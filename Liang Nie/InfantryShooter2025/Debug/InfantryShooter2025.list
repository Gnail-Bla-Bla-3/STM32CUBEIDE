
InfantryShooter2025.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cda0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000110  0800cf30  0800cf30  0000df30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d040  0800d040  0000f07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800d040  0800d040  0000e040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d048  0800d048  0000f07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d048  0800d048  0000e048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d04c  0800d04c  0000e04c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800d050  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f07c  2**0
                  CONTENTS
 10 .bss          000055f8  2000007c  2000007c  0000f07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005674  20005674  0000f07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000255db  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000053df  00000000  00000000  00034687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001e90  00000000  00000000  00039a68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000017ec  00000000  00000000  0003b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025ea8  00000000  00000000  0003d0e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000255e6  00000000  00000000  00062f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0b47  00000000  00000000  00088572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001690b9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008468  00000000  00000000  001690fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00171564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800cf18 	.word	0x0800cf18

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800cf18 	.word	0x0800cf18

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	@ 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2uiz>:
 800097c:	004a      	lsls	r2, r1, #1
 800097e:	d211      	bcs.n	80009a4 <__aeabi_d2uiz+0x28>
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000984:	d211      	bcs.n	80009aa <__aeabi_d2uiz+0x2e>
 8000986:	d50d      	bpl.n	80009a4 <__aeabi_d2uiz+0x28>
 8000988:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d40e      	bmi.n	80009b0 <__aeabi_d2uiz+0x34>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	fa23 f002 	lsr.w	r0, r3, r2
 80009a2:	4770      	bx	lr
 80009a4:	f04f 0000 	mov.w	r0, #0
 80009a8:	4770      	bx	lr
 80009aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ae:	d102      	bne.n	80009b6 <__aeabi_d2uiz+0x3a>
 80009b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80009b4:	4770      	bx	lr
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	4770      	bx	lr

080009bc <__aeabi_uldivmod>:
 80009bc:	b953      	cbnz	r3, 80009d4 <__aeabi_uldivmod+0x18>
 80009be:	b94a      	cbnz	r2, 80009d4 <__aeabi_uldivmod+0x18>
 80009c0:	2900      	cmp	r1, #0
 80009c2:	bf08      	it	eq
 80009c4:	2800      	cmpeq	r0, #0
 80009c6:	bf1c      	itt	ne
 80009c8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80009cc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80009d0:	f000 b96a 	b.w	8000ca8 <__aeabi_idiv0>
 80009d4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009d8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009dc:	f000 f806 	bl	80009ec <__udivmoddi4>
 80009e0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009e8:	b004      	add	sp, #16
 80009ea:	4770      	bx	lr

080009ec <__udivmoddi4>:
 80009ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009f0:	9d08      	ldr	r5, [sp, #32]
 80009f2:	460c      	mov	r4, r1
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <__udivmoddi4+0xaa>
 80009f8:	4694      	mov	ip, r2
 80009fa:	458c      	cmp	ip, r1
 80009fc:	4686      	mov	lr, r0
 80009fe:	fab2 f282 	clz	r2, r2
 8000a02:	d962      	bls.n	8000aca <__udivmoddi4+0xde>
 8000a04:	b14a      	cbz	r2, 8000a1a <__udivmoddi4+0x2e>
 8000a06:	f1c2 0320 	rsb	r3, r2, #32
 8000a0a:	4091      	lsls	r1, r2
 8000a0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000a10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a14:	4319      	orrs	r1, r3
 8000a16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000a1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a1e:	fa1f f68c 	uxth.w	r6, ip
 8000a22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000a26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000a2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000a2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a32:	fb04 f106 	mul.w	r1, r4, r6
 8000a36:	4299      	cmp	r1, r3
 8000a38:	d90a      	bls.n	8000a50 <__udivmoddi4+0x64>
 8000a3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000a42:	f080 8112 	bcs.w	8000c6a <__udivmoddi4+0x27e>
 8000a46:	4299      	cmp	r1, r3
 8000a48:	f240 810f 	bls.w	8000c6a <__udivmoddi4+0x27e>
 8000a4c:	3c02      	subs	r4, #2
 8000a4e:	4463      	add	r3, ip
 8000a50:	1a59      	subs	r1, r3, r1
 8000a52:	fa1f f38e 	uxth.w	r3, lr
 8000a56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000a5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000a5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a62:	fb00 f606 	mul.w	r6, r0, r6
 8000a66:	429e      	cmp	r6, r3
 8000a68:	d90a      	bls.n	8000a80 <__udivmoddi4+0x94>
 8000a6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000a6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000a72:	f080 80fc 	bcs.w	8000c6e <__udivmoddi4+0x282>
 8000a76:	429e      	cmp	r6, r3
 8000a78:	f240 80f9 	bls.w	8000c6e <__udivmoddi4+0x282>
 8000a7c:	4463      	add	r3, ip
 8000a7e:	3802      	subs	r0, #2
 8000a80:	1b9b      	subs	r3, r3, r6
 8000a82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000a86:	2100      	movs	r1, #0
 8000a88:	b11d      	cbz	r5, 8000a92 <__udivmoddi4+0xa6>
 8000a8a:	40d3      	lsrs	r3, r2
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000a92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a96:	428b      	cmp	r3, r1
 8000a98:	d905      	bls.n	8000aa6 <__udivmoddi4+0xba>
 8000a9a:	b10d      	cbz	r5, 8000aa0 <__udivmoddi4+0xb4>
 8000a9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4608      	mov	r0, r1
 8000aa4:	e7f5      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aa6:	fab3 f183 	clz	r1, r3
 8000aaa:	2900      	cmp	r1, #0
 8000aac:	d146      	bne.n	8000b3c <__udivmoddi4+0x150>
 8000aae:	42a3      	cmp	r3, r4
 8000ab0:	d302      	bcc.n	8000ab8 <__udivmoddi4+0xcc>
 8000ab2:	4290      	cmp	r0, r2
 8000ab4:	f0c0 80f0 	bcc.w	8000c98 <__udivmoddi4+0x2ac>
 8000ab8:	1a86      	subs	r6, r0, r2
 8000aba:	eb64 0303 	sbc.w	r3, r4, r3
 8000abe:	2001      	movs	r0, #1
 8000ac0:	2d00      	cmp	r5, #0
 8000ac2:	d0e6      	beq.n	8000a92 <__udivmoddi4+0xa6>
 8000ac4:	e9c5 6300 	strd	r6, r3, [r5]
 8000ac8:	e7e3      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000aca:	2a00      	cmp	r2, #0
 8000acc:	f040 8090 	bne.w	8000bf0 <__udivmoddi4+0x204>
 8000ad0:	eba1 040c 	sub.w	r4, r1, ip
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa1f f78c 	uxth.w	r7, ip
 8000adc:	2101      	movs	r1, #1
 8000ade:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ae2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ae6:	fb08 4416 	mls	r4, r8, r6, r4
 8000aea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000aee:	fb07 f006 	mul.w	r0, r7, r6
 8000af2:	4298      	cmp	r0, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x11c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000afe:	d202      	bcs.n	8000b06 <__udivmoddi4+0x11a>
 8000b00:	4298      	cmp	r0, r3
 8000b02:	f200 80cd 	bhi.w	8000ca0 <__udivmoddi4+0x2b4>
 8000b06:	4626      	mov	r6, r4
 8000b08:	1a1c      	subs	r4, r3, r0
 8000b0a:	fa1f f38e 	uxth.w	r3, lr
 8000b0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000b12:	fb08 4410 	mls	r4, r8, r0, r4
 8000b16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000b1a:	fb00 f707 	mul.w	r7, r0, r7
 8000b1e:	429f      	cmp	r7, r3
 8000b20:	d908      	bls.n	8000b34 <__udivmoddi4+0x148>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000b2a:	d202      	bcs.n	8000b32 <__udivmoddi4+0x146>
 8000b2c:	429f      	cmp	r7, r3
 8000b2e:	f200 80b0 	bhi.w	8000c92 <__udivmoddi4+0x2a6>
 8000b32:	4620      	mov	r0, r4
 8000b34:	1bdb      	subs	r3, r3, r7
 8000b36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b3a:	e7a5      	b.n	8000a88 <__udivmoddi4+0x9c>
 8000b3c:	f1c1 0620 	rsb	r6, r1, #32
 8000b40:	408b      	lsls	r3, r1
 8000b42:	fa22 f706 	lsr.w	r7, r2, r6
 8000b46:	431f      	orrs	r7, r3
 8000b48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000b4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000b50:	ea43 030c 	orr.w	r3, r3, ip
 8000b54:	40f4      	lsrs	r4, r6
 8000b56:	fa00 f801 	lsl.w	r8, r0, r1
 8000b5a:	0c38      	lsrs	r0, r7, #16
 8000b5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000b60:	fbb4 fef0 	udiv	lr, r4, r0
 8000b64:	fa1f fc87 	uxth.w	ip, r7
 8000b68:	fb00 441e 	mls	r4, r0, lr, r4
 8000b6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000b70:	fb0e f90c 	mul.w	r9, lr, ip
 8000b74:	45a1      	cmp	r9, r4
 8000b76:	fa02 f201 	lsl.w	r2, r2, r1
 8000b7a:	d90a      	bls.n	8000b92 <__udivmoddi4+0x1a6>
 8000b7c:	193c      	adds	r4, r7, r4
 8000b7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000b82:	f080 8084 	bcs.w	8000c8e <__udivmoddi4+0x2a2>
 8000b86:	45a1      	cmp	r9, r4
 8000b88:	f240 8081 	bls.w	8000c8e <__udivmoddi4+0x2a2>
 8000b8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000b90:	443c      	add	r4, r7
 8000b92:	eba4 0409 	sub.w	r4, r4, r9
 8000b96:	fa1f f983 	uxth.w	r9, r3
 8000b9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000b9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ba2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ba6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000baa:	45a4      	cmp	ip, r4
 8000bac:	d907      	bls.n	8000bbe <__udivmoddi4+0x1d2>
 8000bae:	193c      	adds	r4, r7, r4
 8000bb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000bb4:	d267      	bcs.n	8000c86 <__udivmoddi4+0x29a>
 8000bb6:	45a4      	cmp	ip, r4
 8000bb8:	d965      	bls.n	8000c86 <__udivmoddi4+0x29a>
 8000bba:	3b02      	subs	r3, #2
 8000bbc:	443c      	add	r4, r7
 8000bbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000bc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000bc6:	eba4 040c 	sub.w	r4, r4, ip
 8000bca:	429c      	cmp	r4, r3
 8000bcc:	46ce      	mov	lr, r9
 8000bce:	469c      	mov	ip, r3
 8000bd0:	d351      	bcc.n	8000c76 <__udivmoddi4+0x28a>
 8000bd2:	d04e      	beq.n	8000c72 <__udivmoddi4+0x286>
 8000bd4:	b155      	cbz	r5, 8000bec <__udivmoddi4+0x200>
 8000bd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000bda:	eb64 040c 	sbc.w	r4, r4, ip
 8000bde:	fa04 f606 	lsl.w	r6, r4, r6
 8000be2:	40cb      	lsrs	r3, r1
 8000be4:	431e      	orrs	r6, r3
 8000be6:	40cc      	lsrs	r4, r1
 8000be8:	e9c5 6400 	strd	r6, r4, [r5]
 8000bec:	2100      	movs	r1, #0
 8000bee:	e750      	b.n	8000a92 <__udivmoddi4+0xa6>
 8000bf0:	f1c2 0320 	rsb	r3, r2, #32
 8000bf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000bf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000c00:	4094      	lsls	r4, r2
 8000c02:	430c      	orrs	r4, r1
 8000c04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000c0c:	fa1f f78c 	uxth.w	r7, ip
 8000c10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c14:	fb08 3110 	mls	r1, r8, r0, r3
 8000c18:	0c23      	lsrs	r3, r4, #16
 8000c1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c1e:	fb00 f107 	mul.w	r1, r0, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d908      	bls.n	8000c38 <__udivmoddi4+0x24c>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000c2e:	d22c      	bcs.n	8000c8a <__udivmoddi4+0x29e>
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d92a      	bls.n	8000c8a <__udivmoddi4+0x29e>
 8000c34:	3802      	subs	r0, #2
 8000c36:	4463      	add	r3, ip
 8000c38:	1a5b      	subs	r3, r3, r1
 8000c3a:	b2a4      	uxth	r4, r4
 8000c3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000c40:	fb08 3311 	mls	r3, r8, r1, r3
 8000c44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c48:	fb01 f307 	mul.w	r3, r1, r7
 8000c4c:	42a3      	cmp	r3, r4
 8000c4e:	d908      	bls.n	8000c62 <__udivmoddi4+0x276>
 8000c50:	eb1c 0404 	adds.w	r4, ip, r4
 8000c54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000c58:	d213      	bcs.n	8000c82 <__udivmoddi4+0x296>
 8000c5a:	42a3      	cmp	r3, r4
 8000c5c:	d911      	bls.n	8000c82 <__udivmoddi4+0x296>
 8000c5e:	3902      	subs	r1, #2
 8000c60:	4464      	add	r4, ip
 8000c62:	1ae4      	subs	r4, r4, r3
 8000c64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000c68:	e739      	b.n	8000ade <__udivmoddi4+0xf2>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	e6f0      	b.n	8000a50 <__udivmoddi4+0x64>
 8000c6e:	4608      	mov	r0, r1
 8000c70:	e706      	b.n	8000a80 <__udivmoddi4+0x94>
 8000c72:	45c8      	cmp	r8, r9
 8000c74:	d2ae      	bcs.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000c7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000c7e:	3801      	subs	r0, #1
 8000c80:	e7a8      	b.n	8000bd4 <__udivmoddi4+0x1e8>
 8000c82:	4631      	mov	r1, r6
 8000c84:	e7ed      	b.n	8000c62 <__udivmoddi4+0x276>
 8000c86:	4603      	mov	r3, r0
 8000c88:	e799      	b.n	8000bbe <__udivmoddi4+0x1d2>
 8000c8a:	4630      	mov	r0, r6
 8000c8c:	e7d4      	b.n	8000c38 <__udivmoddi4+0x24c>
 8000c8e:	46d6      	mov	lr, sl
 8000c90:	e77f      	b.n	8000b92 <__udivmoddi4+0x1a6>
 8000c92:	4463      	add	r3, ip
 8000c94:	3802      	subs	r0, #2
 8000c96:	e74d      	b.n	8000b34 <__udivmoddi4+0x148>
 8000c98:	4606      	mov	r6, r0
 8000c9a:	4623      	mov	r3, r4
 8000c9c:	4608      	mov	r0, r1
 8000c9e:	e70f      	b.n	8000ac0 <__udivmoddi4+0xd4>
 8000ca0:	3e02      	subs	r6, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	e730      	b.n	8000b08 <__udivmoddi4+0x11c>
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_idiv0>:
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop

08000cac <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000cb0:	4b04      	ldr	r3, [pc, #16]	@ (8000cc4 <BMI088_ACCEL_NS_L+0x18>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4a04      	ldr	r2, [pc, #16]	@ (8000cc8 <BMI088_ACCEL_NS_L+0x1c>)
 8000cb6:	8811      	ldrh	r1, [r2, #0]
 8000cb8:	2200      	movs	r2, #0
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f005 fa14 	bl	80060e8 <HAL_GPIO_WritePin>
}
 8000cc0:	bf00      	nop
 8000cc2:	bd80      	pop	{r7, pc}
 8000cc4:	20000000 	.word	0x20000000
 8000cc8:	20000004 	.word	0x20000004

08000ccc <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000cd0:	4b04      	ldr	r3, [pc, #16]	@ (8000ce4 <BMI088_ACCEL_NS_H+0x18>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a04      	ldr	r2, [pc, #16]	@ (8000ce8 <BMI088_ACCEL_NS_H+0x1c>)
 8000cd6:	8811      	ldrh	r1, [r2, #0]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f005 fa04 	bl	80060e8 <HAL_GPIO_WritePin>
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	20000000 	.word	0x20000000
 8000ce8:	20000004 	.word	0x20000004

08000cec <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000cf0:	4b04      	ldr	r3, [pc, #16]	@ (8000d04 <BMI088_GYRO_NS_L+0x18>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a04      	ldr	r2, [pc, #16]	@ (8000d08 <BMI088_GYRO_NS_L+0x1c>)
 8000cf6:	8811      	ldrh	r1, [r2, #0]
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f005 f9f4 	bl	80060e8 <HAL_GPIO_WritePin>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	20000008 	.word	0x20000008
 8000d08:	2000000c 	.word	0x2000000c

08000d0c <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000d10:	4b04      	ldr	r3, [pc, #16]	@ (8000d24 <BMI088_GYRO_NS_H+0x18>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	@ (8000d28 <BMI088_GYRO_NS_H+0x1c>)
 8000d16:	8811      	ldrh	r1, [r2, #0]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f005 f9e4 	bl	80060e8 <HAL_GPIO_WritePin>
}
 8000d20:	bf00      	nop
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	20000008 	.word	0x20000008
 8000d28:	2000000c 	.word	0x2000000c

08000d2c <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b086      	sub	sp, #24
 8000d30:	af02      	add	r7, sp, #8
 8000d32:	4603      	mov	r3, r0
 8000d34:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 8000d36:	f107 020f 	add.w	r2, r7, #15
 8000d3a:	1df9      	adds	r1, r7, #7
 8000d3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d40:	9300      	str	r3, [sp, #0]
 8000d42:	2301      	movs	r3, #1
 8000d44:	4803      	ldr	r0, [pc, #12]	@ (8000d54 <BMI088_read_write_byte+0x28>)
 8000d46:	f006 fcf7 	bl	8007738 <HAL_SPI_TransmitReceive>
    return rx_data;
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3710      	adds	r7, #16
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	20000644 	.word	0x20000644

08000d58 <IMU_get_temp>:
		return accel[2];
	} else {
		return 0;
	}
}
float IMU_get_temp(void) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 8000d5c:	4a05      	ldr	r2, [pc, #20]	@ (8000d74 <IMU_get_temp+0x1c>)
 8000d5e:	4906      	ldr	r1, [pc, #24]	@ (8000d78 <IMU_get_temp+0x20>)
 8000d60:	4806      	ldr	r0, [pc, #24]	@ (8000d7c <IMU_get_temp+0x24>)
 8000d62:	f000 f80d 	bl	8000d80 <BMI088_read>
	return temp;
 8000d66:	4b03      	ldr	r3, [pc, #12]	@ (8000d74 <IMU_get_temp+0x1c>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	ee07 3a90 	vmov	s15, r3
}
 8000d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	200000b0 	.word	0x200000b0
 8000d78:	200000a4 	.word	0x200000a4
 8000d7c:	20000098 	.word	0x20000098

08000d80 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b088      	sub	sp, #32
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	60f8      	str	r0, [r7, #12]
 8000d88:	60b9      	str	r1, [r7, #8]
 8000d8a:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8000d8c:	4a70      	ldr	r2, [pc, #448]	@ (8000f50 <BMI088_read+0x1d0>)
 8000d8e:	f107 0314 	add.w	r3, r7, #20
 8000d92:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d96:	6018      	str	r0, [r3, #0]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	8019      	strh	r1, [r3, #0]
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	0c0a      	lsrs	r2, r1, #16
 8000da0:	701a      	strb	r2, [r3, #0]
 8000da2:	2300      	movs	r3, #0
 8000da4:	76fb      	strb	r3, [r7, #27]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000da6:	f7ff ff81 	bl	8000cac <BMI088_ACCEL_NS_L>
 8000daa:	2092      	movs	r0, #146	@ 0x92
 8000dac:	f7ff ffbe 	bl	8000d2c <BMI088_read_write_byte>
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	2206      	movs	r2, #6
 8000db6:	4619      	mov	r1, r3
 8000db8:	2012      	movs	r0, #18
 8000dba:	f000 f8cf 	bl	8000f5c <BMI088_read_muli_reg>
 8000dbe:	f7ff ff85 	bl	8000ccc <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000dc2:	7d7b      	ldrb	r3, [r7, #21]
 8000dc4:	021b      	lsls	r3, r3, #8
 8000dc6:	b21a      	sxth	r2, r3
 8000dc8:	7d3b      	ldrb	r3, [r7, #20]
 8000dca:	b21b      	sxth	r3, r3
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000dd0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dd4:	ee07 3a90 	vmov	s15, r3
 8000dd8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ddc:	4b5d      	ldr	r3, [pc, #372]	@ (8000f54 <BMI088_read+0x1d4>)
 8000dde:	edd3 7a00 	vldr	s15, [r3]
 8000de2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000dec:	7dfb      	ldrb	r3, [r7, #23]
 8000dee:	021b      	lsls	r3, r3, #8
 8000df0:	b21a      	sxth	r2, r3
 8000df2:	7dbb      	ldrb	r3, [r7, #22]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000dfa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000dfe:	ee07 3a90 	vmov	s15, r3
 8000e02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e06:	4b53      	ldr	r3, [pc, #332]	@ (8000f54 <BMI088_read+0x1d4>)
 8000e08:	edd3 7a00 	vldr	s15, [r3]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
 8000e0e:	3304      	adds	r3, #4
 8000e10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e14:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000e18:	7e7b      	ldrb	r3, [r7, #25]
 8000e1a:	021b      	lsls	r3, r3, #8
 8000e1c:	b21a      	sxth	r2, r3
 8000e1e:	7e3b      	ldrb	r3, [r7, #24]
 8000e20:	b21b      	sxth	r3, r3
 8000e22:	4313      	orrs	r3, r2
 8000e24:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8000e26:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e2a:	ee07 3a90 	vmov	s15, r3
 8000e2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e32:	4b48      	ldr	r3, [pc, #288]	@ (8000f54 <BMI088_read+0x1d4>)
 8000e34:	edd3 7a00 	vldr	s15, [r3]
 8000e38:	68bb      	ldr	r3, [r7, #8]
 8000e3a:	3308      	adds	r3, #8
 8000e3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e40:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 8000e44:	f7ff ff52 	bl	8000cec <BMI088_GYRO_NS_L>
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	2208      	movs	r2, #8
 8000e4e:	4619      	mov	r1, r3
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f883 	bl	8000f5c <BMI088_read_muli_reg>
 8000e56:	f7ff ff59 	bl	8000d0c <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000e5a:	7d3b      	ldrb	r3, [r7, #20]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	d140      	bne.n	8000ee2 <BMI088_read+0x162>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000e60:	7dfb      	ldrb	r3, [r7, #23]
 8000e62:	021b      	lsls	r3, r3, #8
 8000e64:	b21a      	sxth	r2, r3
 8000e66:	7dbb      	ldrb	r3, [r7, #22]
 8000e68:	b21b      	sxth	r3, r3
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000e6e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e72:	ee07 3a90 	vmov	s15, r3
 8000e76:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e7a:	4b37      	ldr	r3, [pc, #220]	@ (8000f58 <BMI088_read+0x1d8>)
 8000e7c:	edd3 7a00 	vldr	s15, [r3]
 8000e80:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000e8a:	7e7b      	ldrb	r3, [r7, #25]
 8000e8c:	021b      	lsls	r3, r3, #8
 8000e8e:	b21a      	sxth	r2, r3
 8000e90:	7e3b      	ldrb	r3, [r7, #24]
 8000e92:	b21b      	sxth	r3, r3
 8000e94:	4313      	orrs	r3, r2
 8000e96:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000e98:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000e9c:	ee07 3a90 	vmov	s15, r3
 8000ea0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ea4:	4b2c      	ldr	r3, [pc, #176]	@ (8000f58 <BMI088_read+0x1d8>)
 8000ea6:	edd3 7a00 	vldr	s15, [r3]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	3304      	adds	r3, #4
 8000eae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000eb2:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000eb6:	7efb      	ldrb	r3, [r7, #27]
 8000eb8:	021b      	lsls	r3, r3, #8
 8000eba:	b21a      	sxth	r2, r3
 8000ebc:	7ebb      	ldrb	r3, [r7, #26]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000ec4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000ec8:	ee07 3a90 	vmov	s15, r3
 8000ecc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed0:	4b21      	ldr	r3, [pc, #132]	@ (8000f58 <BMI088_read+0x1d8>)
 8000ed2:	edd3 7a00 	vldr	s15, [r3]
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	3308      	adds	r3, #8
 8000eda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ede:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8000ee2:	f7ff fee3 	bl	8000cac <BMI088_ACCEL_NS_L>
 8000ee6:	20a2      	movs	r0, #162	@ 0xa2
 8000ee8:	f7ff ff20 	bl	8000d2c <BMI088_read_write_byte>
 8000eec:	f107 0314 	add.w	r3, r7, #20
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	2022      	movs	r0, #34	@ 0x22
 8000ef6:	f000 f831 	bl	8000f5c <BMI088_read_muli_reg>
 8000efa:	f7ff fee7 	bl	8000ccc <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 8000efe:	7d3b      	ldrb	r3, [r7, #20]
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	b21a      	sxth	r2, r3
 8000f04:	7d7b      	ldrb	r3, [r7, #21]
 8000f06:	095b      	lsrs	r3, r3, #5
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	b21b      	sxth	r3, r3
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8000f10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000f18:	db04      	blt.n	8000f24 <BMI088_read+0x1a4>
    {
        bmi088_raw_temp -= 2048;
 8000f1a:	8bfb      	ldrh	r3, [r7, #30]
 8000f1c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8000f24:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000f28:	ee07 3a90 	vmov	s15, r3
 8000f2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f30:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000f34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f38:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000f3c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	edc3 7a00 	vstr	s15, [r3]
}
 8000f46:	bf00      	nop
 8000f48:	3720      	adds	r7, #32
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	0800cf30 	.word	0x0800cf30
 8000f54:	20000010 	.word	0x20000010
 8000f58:	20000014 	.word	0x20000014

08000f5c <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	6039      	str	r1, [r7, #0]
 8000f66:	71fb      	strb	r3, [r7, #7]
 8000f68:	4613      	mov	r3, r2
 8000f6a:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000f6c:	79fb      	ldrb	r3, [r7, #7]
 8000f6e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f72:	b2db      	uxtb	r3, r3
 8000f74:	4618      	mov	r0, r3
 8000f76:	f7ff fed9 	bl	8000d2c <BMI088_read_write_byte>

    while (len != 0)
 8000f7a:	e00c      	b.n	8000f96 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000f7c:	2055      	movs	r0, #85	@ 0x55
 8000f7e:	f7ff fed5 	bl	8000d2c <BMI088_read_write_byte>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	701a      	strb	r2, [r3, #0]
        buf++;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	603b      	str	r3, [r7, #0]
        len--;
 8000f90:	79bb      	ldrb	r3, [r7, #6]
 8000f92:	3b01      	subs	r3, #1
 8000f94:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8000f96:	79bb      	ldrb	r3, [r7, #6]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d1ef      	bne.n	8000f7c <BMI088_read_muli_reg+0x20>
    }
}
 8000f9c:	bf00      	nop
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_CAN_RxFifo0MsgPendingCallback>:


extern robot_status_t robot_status;
extern power_heat_data_t power_heat_data;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b08c      	sub	sp, #48	@ 0x30
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8000fb0:	f107 0308 	add.w	r3, r7, #8
 8000fb4:	f107 0210 	add.w	r2, r7, #16
 8000fb8:	2100      	movs	r1, #0
 8000fba:	6878      	ldr	r0, [r7, #4]
 8000fbc:	f003 fe7d 	bl	8004cba <HAL_CAN_GetRxMessage>
    switch (rx_header.StdId) {
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8000fc6:	d813      	bhi.n	8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback+0x48>
 8000fc8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000fcc:	f240 809c 	bls.w	8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000fd0:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8000fd4:	2b03      	cmp	r3, #3
 8000fd6:	f200 8097 	bhi.w	8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
 8000fda:	a201      	add	r2, pc, #4	@ (adr r2, 8000fe0 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8000fdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fe0:	080010e5 	.word	0x080010e5
 8000fe4:	080010f7 	.word	0x080010f7
 8000fe8:	08001109 	.word	0x08001109
 8000fec:	08001109 	.word	0x08001109
 8000ff0:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8000ff4:	2b0a      	cmp	r3, #10
 8000ff6:	f200 8087 	bhi.w	8001108 <HAL_CAN_RxFifo0MsgPendingCallback+0x160>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 8000ffa:	693b      	ldr	r3, [r7, #16]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	3b01      	subs	r3, #1
 8001000:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a44      	ldr	r2, [pc, #272]	@ (8001118 <HAL_CAN_RxFifo0MsgPendingCallback+0x170>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d131      	bne.n	8001070 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 800100c:	7a3b      	ldrb	r3, [r7, #8]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7a7b      	ldrb	r3, [r7, #9]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21a      	sxth	r2, r3
 800101a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800101e:	b291      	uxth	r1, r2
 8001020:	4a3e      	ldr	r2, [pc, #248]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001022:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001026:	7abb      	ldrb	r3, [r7, #10]
 8001028:	021b      	lsls	r3, r3, #8
 800102a:	b219      	sxth	r1, r3
 800102c:	7afb      	ldrb	r3, [r7, #11]
 800102e:	b21a      	sxth	r2, r3
 8001030:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001034:	430a      	orrs	r2, r1
 8001036:	b211      	sxth	r1, r2
 8001038:	4a38      	ldr	r2, [pc, #224]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4413      	add	r3, r2
 800103e:	460a      	mov	r2, r1
 8001040:	805a      	strh	r2, [r3, #2]
 8001042:	7b3b      	ldrb	r3, [r7, #12]
 8001044:	021b      	lsls	r3, r3, #8
 8001046:	b219      	sxth	r1, r3
 8001048:	7b7b      	ldrb	r3, [r7, #13]
 800104a:	b21a      	sxth	r2, r3
 800104c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001050:	430a      	orrs	r2, r1
 8001052:	b211      	sxth	r1, r2
 8001054:	4a31      	ldr	r2, [pc, #196]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	4413      	add	r3, r2
 800105a:	460a      	mov	r2, r1
 800105c:	809a      	strh	r2, [r3, #4]
 800105e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001062:	7bb9      	ldrb	r1, [r7, #14]
 8001064:	4a2d      	ldr	r2, [pc, #180]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 8001066:	00db      	lsls	r3, r3, #3
 8001068:	4413      	add	r3, r2
 800106a:	460a      	mov	r2, r1
 800106c:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 800106e:	e04d      	b.n	800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
            } else if (hcan == &hcan2) {
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	4a2b      	ldr	r2, [pc, #172]	@ (8001120 <HAL_CAN_RxFifo0MsgPendingCallback+0x178>)
 8001074:	4293      	cmp	r3, r2
 8001076:	d149      	bne.n	800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 8001078:	7a3b      	ldrb	r3, [r7, #8]
 800107a:	021b      	lsls	r3, r3, #8
 800107c:	b21a      	sxth	r2, r3
 800107e:	7a7b      	ldrb	r3, [r7, #9]
 8001080:	b21b      	sxth	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b21a      	sxth	r2, r3
 8001086:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800108a:	b291      	uxth	r1, r2
 800108c:	4a23      	ldr	r2, [pc, #140]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 800108e:	330b      	adds	r3, #11
 8001090:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001094:	7abb      	ldrb	r3, [r7, #10]
 8001096:	021b      	lsls	r3, r3, #8
 8001098:	b219      	sxth	r1, r3
 800109a:	7afb      	ldrb	r3, [r7, #11]
 800109c:	b21a      	sxth	r2, r3
 800109e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010a2:	430a      	orrs	r2, r1
 80010a4:	b211      	sxth	r1, r2
 80010a6:	4a1d      	ldr	r2, [pc, #116]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80010a8:	330b      	adds	r3, #11
 80010aa:	00db      	lsls	r3, r3, #3
 80010ac:	4413      	add	r3, r2
 80010ae:	460a      	mov	r2, r1
 80010b0:	805a      	strh	r2, [r3, #2]
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b219      	sxth	r1, r3
 80010b8:	7b7b      	ldrb	r3, [r7, #13]
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010c0:	430a      	orrs	r2, r1
 80010c2:	b211      	sxth	r1, r2
 80010c4:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80010c6:	330b      	adds	r3, #11
 80010c8:	00db      	lsls	r3, r3, #3
 80010ca:	4413      	add	r3, r2
 80010cc:	460a      	mov	r2, r1
 80010ce:	809a      	strh	r2, [r3, #4]
 80010d0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80010d4:	7bb9      	ldrb	r1, [r7, #14]
 80010d6:	4a11      	ldr	r2, [pc, #68]	@ (800111c <HAL_CAN_RxFifo0MsgPendingCallback+0x174>)
 80010d8:	330b      	adds	r3, #11
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4413      	add	r3, r2
 80010de:	460a      	mov	r2, r1
 80010e0:	719a      	strb	r2, [r3, #6]
            break;
 80010e2:	e013      	b.n	800110c <HAL_CAN_RxFifo0MsgPendingCallback+0x164>
        }
        case CAN_POWER_ID: {

            memcpy(&power_heat_data, &rx_data, 8);
 80010e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80010e6:	461a      	mov	r2, r3
 80010e8:	f107 0308 	add.w	r3, r7, #8
 80010ec:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010f0:	e882 0003 	stmia.w	r2, {r0, r1}
            break;
 80010f4:	e00b      	b.n	800110e <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
        }
        case CAN_HEAT_ID: {
            memcpy((&power_heat_data.buffer_energy), &rx_data, 8);
 80010f6:	4b0b      	ldr	r3, [pc, #44]	@ (8001124 <HAL_CAN_RxFifo0MsgPendingCallback+0x17c>)
 80010f8:	3308      	adds	r3, #8
 80010fa:	f107 0208 	add.w	r2, r7, #8
 80010fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001102:	e883 0003 	stmia.w	r3, {r0, r1}
            break;
 8001106:	e002      	b.n	800110e <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            //memcpy((&robot_status.shooter_barrel_heat_limit), &rx_data, 6);
            break;
        }

        default: {
            break;
 8001108:	bf00      	nop
 800110a:	e000      	b.n	800110e <HAL_CAN_RxFifo0MsgPendingCallback+0x166>
            break;
 800110c:	bf00      	nop
        }
    }
}
 800110e:	bf00      	nop
 8001110:	3730      	adds	r7, #48	@ 0x30
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200005a0 	.word	0x200005a0
 800111c:	20000104 	.word	0x20000104
 8001120:	200005c8 	.word	0x200005c8
 8001124:	20000514 	.word	0x20000514

08001128 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001128:	b590      	push	{r4, r7, lr}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	4604      	mov	r4, r0
 8001130:	4608      	mov	r0, r1
 8001132:	4611      	mov	r1, r2
 8001134:	461a      	mov	r2, r3
 8001136:	4623      	mov	r3, r4
 8001138:	71fb      	strb	r3, [r7, #7]
 800113a:	4603      	mov	r3, r0
 800113c:	80bb      	strh	r3, [r7, #4]
 800113e:	460b      	mov	r3, r1
 8001140:	807b      	strh	r3, [r7, #2]
 8001142:	4613      	mov	r3, r2
 8001144:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001146:	88bb      	ldrh	r3, [r7, #4]
 8001148:	4a27      	ldr	r2, [pc, #156]	@ (80011e8 <CAN_DriveMotor+0xc0>)
 800114a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 800114c:	4b26      	ldr	r3, [pc, #152]	@ (80011e8 <CAN_DriveMotor+0xc0>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8001152:	4b25      	ldr	r3, [pc, #148]	@ (80011e8 <CAN_DriveMotor+0xc0>)
 8001154:	2200      	movs	r2, #0
 8001156:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001158:	4b23      	ldr	r3, [pc, #140]	@ (80011e8 <CAN_DriveMotor+0xc0>)
 800115a:	2208      	movs	r2, #8
 800115c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 800115e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001162:	121b      	asrs	r3, r3, #8
 8001164:	b21b      	sxth	r3, r3
 8001166:	b2da      	uxtb	r2, r3
 8001168:	4b20      	ldr	r3, [pc, #128]	@ (80011ec <CAN_DriveMotor+0xc4>)
 800116a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 800116c:	887b      	ldrh	r3, [r7, #2]
 800116e:	b2da      	uxtb	r2, r3
 8001170:	4b1e      	ldr	r3, [pc, #120]	@ (80011ec <CAN_DriveMotor+0xc4>)
 8001172:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 8001174:	f9b7 3000 	ldrsh.w	r3, [r7]
 8001178:	121b      	asrs	r3, r3, #8
 800117a:	b21b      	sxth	r3, r3
 800117c:	b2da      	uxtb	r2, r3
 800117e:	4b1b      	ldr	r3, [pc, #108]	@ (80011ec <CAN_DriveMotor+0xc4>)
 8001180:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 8001182:	883b      	ldrh	r3, [r7, #0]
 8001184:	b2da      	uxtb	r2, r3
 8001186:	4b19      	ldr	r3, [pc, #100]	@ (80011ec <CAN_DriveMotor+0xc4>)
 8001188:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 800118a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800118e:	121b      	asrs	r3, r3, #8
 8001190:	b21b      	sxth	r3, r3
 8001192:	b2da      	uxtb	r2, r3
 8001194:	4b15      	ldr	r3, [pc, #84]	@ (80011ec <CAN_DriveMotor+0xc4>)
 8001196:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 8001198:	8c3b      	ldrh	r3, [r7, #32]
 800119a:	b2da      	uxtb	r2, r3
 800119c:	4b13      	ldr	r3, [pc, #76]	@ (80011ec <CAN_DriveMotor+0xc4>)
 800119e:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 80011a0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80011a4:	121b      	asrs	r3, r3, #8
 80011a6:	b21b      	sxth	r3, r3
 80011a8:	b2da      	uxtb	r2, r3
 80011aa:	4b10      	ldr	r3, [pc, #64]	@ (80011ec <CAN_DriveMotor+0xc4>)
 80011ac:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 80011ae:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80011b0:	b2da      	uxtb	r2, r3
 80011b2:	4b0e      	ldr	r3, [pc, #56]	@ (80011ec <CAN_DriveMotor+0xc4>)
 80011b4:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 80011b6:	79fb      	ldrb	r3, [r7, #7]
 80011b8:	2b01      	cmp	r3, #1
 80011ba:	d107      	bne.n	80011cc <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80011bc:	f107 030c 	add.w	r3, r7, #12
 80011c0:	4a0a      	ldr	r2, [pc, #40]	@ (80011ec <CAN_DriveMotor+0xc4>)
 80011c2:	4909      	ldr	r1, [pc, #36]	@ (80011e8 <CAN_DriveMotor+0xc0>)
 80011c4:	480a      	ldr	r0, [pc, #40]	@ (80011f0 <CAN_DriveMotor+0xc8>)
 80011c6:	f003 fc9d 	bl	8004b04 <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 80011ca:	e009      	b.n	80011e0 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	2b02      	cmp	r3, #2
 80011d0:	d106      	bne.n	80011e0 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4a05      	ldr	r2, [pc, #20]	@ (80011ec <CAN_DriveMotor+0xc4>)
 80011d8:	4903      	ldr	r1, [pc, #12]	@ (80011e8 <CAN_DriveMotor+0xc0>)
 80011da:	4806      	ldr	r0, [pc, #24]	@ (80011f4 <CAN_DriveMotor+0xcc>)
 80011dc:	f003 fc92 	bl	8004b04 <HAL_CAN_AddTxMessage>
}
 80011e0:	bf00      	nop
 80011e2:	3714      	adds	r7, #20
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd90      	pop	{r4, r7, pc}
 80011e8:	200000b4 	.word	0x200000b4
 80011ec:	200000cc 	.word	0x200000cc
 80011f0:	200005a0 	.word	0x200005a0
 80011f4:	200005c8 	.word	0x200005c8

080011f8 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 80011f8:	b5b0      	push	{r4, r5, r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	4604      	mov	r4, r0
 8001200:	4608      	mov	r0, r1
 8001202:	4611      	mov	r1, r2
 8001204:	461a      	mov	r2, r3
 8001206:	4623      	mov	r3, r4
 8001208:	71fb      	strb	r3, [r7, #7]
 800120a:	4603      	mov	r3, r0
 800120c:	71bb      	strb	r3, [r7, #6]
 800120e:	460b      	mov	r3, r1
 8001210:	717b      	strb	r3, [r7, #5]
 8001212:	4613      	mov	r3, r2
 8001214:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001216:	79bb      	ldrb	r3, [r7, #6]
 8001218:	2b04      	cmp	r3, #4
 800121a:	f000 8142 	beq.w	80014a2 <CAN_setMotorCtrlVal+0x2aa>
 800121e:	2b04      	cmp	r3, #4
 8001220:	f300 81e1 	bgt.w	80015e6 <CAN_setMotorCtrlVal+0x3ee>
 8001224:	2b02      	cmp	r3, #2
 8001226:	dc02      	bgt.n	800122e <CAN_setMotorCtrlVal+0x36>
 8001228:	2b00      	cmp	r3, #0
 800122a:	dc04      	bgt.n	8001236 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 800122c:	e1db      	b.n	80015e6 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 800122e:	2b03      	cmp	r3, #3
 8001230:	f000 8097 	beq.w	8001362 <CAN_setMotorCtrlVal+0x16a>
}
 8001234:	e1d7      	b.n	80015e6 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001236:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800123a:	2b04      	cmp	r3, #4
 800123c:	dc02      	bgt.n	8001244 <CAN_setMotorCtrlVal+0x4c>
 800123e:	2b00      	cmp	r3, #0
 8001240:	dc05      	bgt.n	800124e <CAN_setMotorCtrlVal+0x56>
					break;
 8001242:	e08c      	b.n	800135e <CAN_setMotorCtrlVal+0x166>
 8001244:	3b05      	subs	r3, #5
 8001246:	2b03      	cmp	r3, #3
 8001248:	f200 8089 	bhi.w	800135e <CAN_setMotorCtrlVal+0x166>
 800124c:	e042      	b.n	80012d4 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 800124e:	79fb      	ldrb	r3, [r7, #7]
 8001250:	1e5a      	subs	r2, r3, #1
 8001252:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001256:	1e59      	subs	r1, r3, #1
 8001258:	48bd      	ldr	r0, [pc, #756]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 800125a:	4613      	mov	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	440b      	add	r3, r1
 8001264:	887a      	ldrh	r2, [r7, #2]
 8001266:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	1e5a      	subs	r2, r3, #1
 800126e:	49b8      	ldr	r1, [pc, #736]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001270:	4613      	mov	r3, r2
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	4413      	add	r3, r2
 8001276:	00db      	lsls	r3, r3, #3
 8001278:	440b      	add	r3, r1
 800127a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800127e:	79fb      	ldrb	r3, [r7, #7]
 8001280:	1e5a      	subs	r2, r3, #1
 8001282:	49b3      	ldr	r1, [pc, #716]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001284:	4613      	mov	r3, r2
 8001286:	005b      	lsls	r3, r3, #1
 8001288:	4413      	add	r3, r2
 800128a:	00db      	lsls	r3, r3, #3
 800128c:	440b      	add	r3, r1
 800128e:	3302      	adds	r3, #2
 8001290:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001294:	79fb      	ldrb	r3, [r7, #7]
 8001296:	1e5a      	subs	r2, r3, #1
 8001298:	49ad      	ldr	r1, [pc, #692]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	00db      	lsls	r3, r3, #3
 80012a2:	440b      	add	r3, r1
 80012a4:	3304      	adds	r3, #4
 80012a6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	1e5a      	subs	r2, r3, #1
 80012ae:	48a8      	ldr	r0, [pc, #672]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80012b0:	4613      	mov	r3, r2
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	4413      	add	r3, r2
 80012b6:	00db      	lsls	r3, r3, #3
 80012b8:	4403      	add	r3, r0
 80012ba:	3306      	adds	r3, #6
 80012bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012c0:	79f8      	ldrb	r0, [r7, #7]
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	9100      	str	r1, [sp, #0]
 80012c6:	462b      	mov	r3, r5
 80012c8:	4622      	mov	r2, r4
 80012ca:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80012ce:	f7ff ff2b 	bl	8001128 <CAN_DriveMotor>
					break;
 80012d2:	e045      	b.n	8001360 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 80012d4:	79fb      	ldrb	r3, [r7, #7]
 80012d6:	1e5a      	subs	r2, r3, #1
 80012d8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012dc:	1f59      	subs	r1, r3, #5
 80012de:	489c      	ldr	r0, [pc, #624]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80012e0:	4613      	mov	r3, r2
 80012e2:	005b      	lsls	r3, r3, #1
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	440b      	add	r3, r1
 80012ea:	3304      	adds	r3, #4
 80012ec:	887a      	ldrh	r2, [r7, #2]
 80012ee:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	1e5a      	subs	r2, r3, #1
 80012f6:	4996      	ldr	r1, [pc, #600]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80012f8:	4613      	mov	r3, r2
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	4413      	add	r3, r2
 80012fe:	00db      	lsls	r3, r3, #3
 8001300:	440b      	add	r3, r1
 8001302:	3308      	adds	r3, #8
 8001304:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001308:	79fb      	ldrb	r3, [r7, #7]
 800130a:	1e5a      	subs	r2, r3, #1
 800130c:	4990      	ldr	r1, [pc, #576]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 800130e:	4613      	mov	r3, r2
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	4413      	add	r3, r2
 8001314:	00db      	lsls	r3, r3, #3
 8001316:	440b      	add	r3, r1
 8001318:	330a      	adds	r3, #10
 800131a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	1e5a      	subs	r2, r3, #1
 8001322:	498b      	ldr	r1, [pc, #556]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	440b      	add	r3, r1
 800132e:	330c      	adds	r3, #12
 8001330:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001334:	79fb      	ldrb	r3, [r7, #7]
 8001336:	1e5a      	subs	r2, r3, #1
 8001338:	4885      	ldr	r0, [pc, #532]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	00db      	lsls	r3, r3, #3
 8001342:	4403      	add	r3, r0
 8001344:	330e      	adds	r3, #14
 8001346:	f9b3 3000 	ldrsh.w	r3, [r3]
 800134a:	79f8      	ldrb	r0, [r7, #7]
 800134c:	9301      	str	r3, [sp, #4]
 800134e:	9100      	str	r1, [sp, #0]
 8001350:	462b      	mov	r3, r5
 8001352:	4622      	mov	r2, r4
 8001354:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001358:	f7ff fee6 	bl	8001128 <CAN_DriveMotor>
					break;
 800135c:	e000      	b.n	8001360 <CAN_setMotorCtrlVal+0x168>
					break;
 800135e:	bf00      	nop
			break;
 8001360:	e141      	b.n	80015e6 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001362:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001366:	2b08      	cmp	r3, #8
 8001368:	f000 8097 	beq.w	800149a <CAN_setMotorCtrlVal+0x2a2>
 800136c:	2b08      	cmp	r3, #8
 800136e:	f300 8096 	bgt.w	800149e <CAN_setMotorCtrlVal+0x2a6>
 8001372:	2b04      	cmp	r3, #4
 8001374:	dc02      	bgt.n	800137c <CAN_setMotorCtrlVal+0x184>
 8001376:	2b00      	cmp	r3, #0
 8001378:	dc05      	bgt.n	8001386 <CAN_setMotorCtrlVal+0x18e>
					break;
 800137a:	e090      	b.n	800149e <CAN_setMotorCtrlVal+0x2a6>
 800137c:	3b05      	subs	r3, #5
 800137e:	2b02      	cmp	r3, #2
 8001380:	f200 808d 	bhi.w	800149e <CAN_setMotorCtrlVal+0x2a6>
 8001384:	e044      	b.n	8001410 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	1e5a      	subs	r2, r3, #1
 800138a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800138e:	1e59      	subs	r1, r3, #1
 8001390:	486f      	ldr	r0, [pc, #444]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001392:	4613      	mov	r3, r2
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	4413      	add	r3, r2
 8001398:	009b      	lsls	r3, r3, #2
 800139a:	440b      	add	r3, r1
 800139c:	3304      	adds	r3, #4
 800139e:	887a      	ldrh	r2, [r7, #2]
 80013a0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	1e5a      	subs	r2, r3, #1
 80013a8:	4969      	ldr	r1, [pc, #420]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80013aa:	4613      	mov	r3, r2
 80013ac:	005b      	lsls	r3, r3, #1
 80013ae:	4413      	add	r3, r2
 80013b0:	00db      	lsls	r3, r3, #3
 80013b2:	440b      	add	r3, r1
 80013b4:	3308      	adds	r3, #8
 80013b6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	1e5a      	subs	r2, r3, #1
 80013be:	4964      	ldr	r1, [pc, #400]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80013c0:	4613      	mov	r3, r2
 80013c2:	005b      	lsls	r3, r3, #1
 80013c4:	4413      	add	r3, r2
 80013c6:	00db      	lsls	r3, r3, #3
 80013c8:	440b      	add	r3, r1
 80013ca:	330a      	adds	r3, #10
 80013cc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	1e5a      	subs	r2, r3, #1
 80013d4:	495e      	ldr	r1, [pc, #376]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80013d6:	4613      	mov	r3, r2
 80013d8:	005b      	lsls	r3, r3, #1
 80013da:	4413      	add	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	440b      	add	r3, r1
 80013e0:	330c      	adds	r3, #12
 80013e2:	f9b3 1000 	ldrsh.w	r1, [r3]
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	1e5a      	subs	r2, r3, #1
 80013ea:	4859      	ldr	r0, [pc, #356]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	00db      	lsls	r3, r3, #3
 80013f4:	4403      	add	r3, r0
 80013f6:	330e      	adds	r3, #14
 80013f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80013fc:	79f8      	ldrb	r0, [r7, #7]
 80013fe:	9301      	str	r3, [sp, #4]
 8001400:	9100      	str	r1, [sp, #0]
 8001402:	462b      	mov	r3, r5
 8001404:	4622      	mov	r2, r4
 8001406:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800140a:	f7ff fe8d 	bl	8001128 <CAN_DriveMotor>
					break;
 800140e:	e047      	b.n	80014a0 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001410:	79fb      	ldrb	r3, [r7, #7]
 8001412:	1e5a      	subs	r2, r3, #1
 8001414:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001418:	1f59      	subs	r1, r3, #5
 800141a:	484d      	ldr	r0, [pc, #308]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	440b      	add	r3, r1
 8001426:	3308      	adds	r3, #8
 8001428:	887a      	ldrh	r2, [r7, #2]
 800142a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	1e5a      	subs	r2, r3, #1
 8001432:	4947      	ldr	r1, [pc, #284]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001434:	4613      	mov	r3, r2
 8001436:	005b      	lsls	r3, r3, #1
 8001438:	4413      	add	r3, r2
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	440b      	add	r3, r1
 800143e:	3310      	adds	r3, #16
 8001440:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	1e5a      	subs	r2, r3, #1
 8001448:	4941      	ldr	r1, [pc, #260]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 800144a:	4613      	mov	r3, r2
 800144c:	005b      	lsls	r3, r3, #1
 800144e:	4413      	add	r3, r2
 8001450:	00db      	lsls	r3, r3, #3
 8001452:	440b      	add	r3, r1
 8001454:	3312      	adds	r3, #18
 8001456:	f9b3 5000 	ldrsh.w	r5, [r3]
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	1e5a      	subs	r2, r3, #1
 800145e:	493c      	ldr	r1, [pc, #240]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001460:	4613      	mov	r3, r2
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	4413      	add	r3, r2
 8001466:	00db      	lsls	r3, r3, #3
 8001468:	440b      	add	r3, r1
 800146a:	3314      	adds	r3, #20
 800146c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	4836      	ldr	r0, [pc, #216]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001476:	4613      	mov	r3, r2
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	4413      	add	r3, r2
 800147c:	00db      	lsls	r3, r3, #3
 800147e:	4403      	add	r3, r0
 8001480:	3316      	adds	r3, #22
 8001482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001486:	79f8      	ldrb	r0, [r7, #7]
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	9100      	str	r1, [sp, #0]
 800148c:	462b      	mov	r3, r5
 800148e:	4622      	mov	r2, r4
 8001490:	f240 21ff 	movw	r1, #767	@ 0x2ff
 8001494:	f7ff fe48 	bl	8001128 <CAN_DriveMotor>
					break;
 8001498:	e002      	b.n	80014a0 <CAN_setMotorCtrlVal+0x2a8>
					break;
 800149a:	bf00      	nop
 800149c:	e0a3      	b.n	80015e6 <CAN_setMotorCtrlVal+0x3ee>
					break;
 800149e:	bf00      	nop
			break;
 80014a0:	e0a1      	b.n	80015e6 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80014a2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014a6:	2b08      	cmp	r3, #8
 80014a8:	f000 8099 	beq.w	80015de <CAN_setMotorCtrlVal+0x3e6>
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	f300 8098 	bgt.w	80015e2 <CAN_setMotorCtrlVal+0x3ea>
 80014b2:	2b04      	cmp	r3, #4
 80014b4:	dc02      	bgt.n	80014bc <CAN_setMotorCtrlVal+0x2c4>
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	dc05      	bgt.n	80014c6 <CAN_setMotorCtrlVal+0x2ce>
					break;
 80014ba:	e092      	b.n	80015e2 <CAN_setMotorCtrlVal+0x3ea>
 80014bc:	3b05      	subs	r3, #5
 80014be:	2b02      	cmp	r3, #2
 80014c0:	f200 808f 	bhi.w	80015e2 <CAN_setMotorCtrlVal+0x3ea>
 80014c4:	e046      	b.n	8001554 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80014c6:	79fb      	ldrb	r3, [r7, #7]
 80014c8:	1e5a      	subs	r2, r3, #1
 80014ca:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014ce:	1e59      	subs	r1, r3, #1
 80014d0:	481f      	ldr	r0, [pc, #124]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	009b      	lsls	r3, r3, #2
 80014da:	440b      	add	r3, r1
 80014dc:	3304      	adds	r3, #4
 80014de:	887a      	ldrh	r2, [r7, #2]
 80014e0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	1e5a      	subs	r2, r3, #1
 80014e8:	4919      	ldr	r1, [pc, #100]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	00db      	lsls	r3, r3, #3
 80014f2:	440b      	add	r3, r1
 80014f4:	3308      	adds	r3, #8
 80014f6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	1e5a      	subs	r2, r3, #1
 80014fe:	4914      	ldr	r1, [pc, #80]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001500:	4613      	mov	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	4413      	add	r3, r2
 8001506:	00db      	lsls	r3, r3, #3
 8001508:	440b      	add	r3, r1
 800150a:	330a      	adds	r3, #10
 800150c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001510:	79fb      	ldrb	r3, [r7, #7]
 8001512:	1e5a      	subs	r2, r3, #1
 8001514:	490e      	ldr	r1, [pc, #56]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 8001516:	4613      	mov	r3, r2
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	4413      	add	r3, r2
 800151c:	00db      	lsls	r3, r3, #3
 800151e:	440b      	add	r3, r1
 8001520:	330c      	adds	r3, #12
 8001522:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001526:	79fb      	ldrb	r3, [r7, #7]
 8001528:	1e5a      	subs	r2, r3, #1
 800152a:	4809      	ldr	r0, [pc, #36]	@ (8001550 <CAN_setMotorCtrlVal+0x358>)
 800152c:	4613      	mov	r3, r2
 800152e:	005b      	lsls	r3, r3, #1
 8001530:	4413      	add	r3, r2
 8001532:	00db      	lsls	r3, r3, #3
 8001534:	4403      	add	r3, r0
 8001536:	330e      	adds	r3, #14
 8001538:	f9b3 3000 	ldrsh.w	r3, [r3]
 800153c:	79f8      	ldrb	r0, [r7, #7]
 800153e:	9301      	str	r3, [sp, #4]
 8001540:	9100      	str	r1, [sp, #0]
 8001542:	462b      	mov	r3, r5
 8001544:	4622      	mov	r2, r4
 8001546:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 800154a:	f7ff fded 	bl	8001128 <CAN_DriveMotor>
					break;
 800154e:	e049      	b.n	80015e4 <CAN_setMotorCtrlVal+0x3ec>
 8001550:	200000d4 	.word	0x200000d4
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	1e5a      	subs	r2, r3, #1
 8001558:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800155c:	1f59      	subs	r1, r3, #5
 800155e:	4824      	ldr	r0, [pc, #144]	@ (80015f0 <CAN_setMotorCtrlVal+0x3f8>)
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	009b      	lsls	r3, r3, #2
 8001568:	440b      	add	r3, r1
 800156a:	3308      	adds	r3, #8
 800156c:	887a      	ldrh	r2, [r7, #2]
 800156e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001572:	79fb      	ldrb	r3, [r7, #7]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	491e      	ldr	r1, [pc, #120]	@ (80015f0 <CAN_setMotorCtrlVal+0x3f8>)
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	00db      	lsls	r3, r3, #3
 8001580:	440b      	add	r3, r1
 8001582:	3310      	adds	r3, #16
 8001584:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001588:	79fb      	ldrb	r3, [r7, #7]
 800158a:	1e5a      	subs	r2, r3, #1
 800158c:	4918      	ldr	r1, [pc, #96]	@ (80015f0 <CAN_setMotorCtrlVal+0x3f8>)
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	440b      	add	r3, r1
 8001598:	3312      	adds	r3, #18
 800159a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800159e:	79fb      	ldrb	r3, [r7, #7]
 80015a0:	1e5a      	subs	r2, r3, #1
 80015a2:	4913      	ldr	r1, [pc, #76]	@ (80015f0 <CAN_setMotorCtrlVal+0x3f8>)
 80015a4:	4613      	mov	r3, r2
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	4413      	add	r3, r2
 80015aa:	00db      	lsls	r3, r3, #3
 80015ac:	440b      	add	r3, r1
 80015ae:	3314      	adds	r3, #20
 80015b0:	f9b3 1000 	ldrsh.w	r1, [r3]
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	1e5a      	subs	r2, r3, #1
 80015b8:	480d      	ldr	r0, [pc, #52]	@ (80015f0 <CAN_setMotorCtrlVal+0x3f8>)
 80015ba:	4613      	mov	r3, r2
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4413      	add	r3, r2
 80015c0:	00db      	lsls	r3, r3, #3
 80015c2:	4403      	add	r3, r0
 80015c4:	3316      	adds	r3, #22
 80015c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ca:	79f8      	ldrb	r0, [r7, #7]
 80015cc:	9301      	str	r3, [sp, #4]
 80015ce:	9100      	str	r1, [sp, #0]
 80015d0:	462b      	mov	r3, r5
 80015d2:	4622      	mov	r2, r4
 80015d4:	f240 21fe 	movw	r1, #766	@ 0x2fe
 80015d8:	f7ff fda6 	bl	8001128 <CAN_DriveMotor>
					break;
 80015dc:	e002      	b.n	80015e4 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80015de:	bf00      	nop
 80015e0:	e000      	b.n	80015e4 <CAN_setMotorCtrlVal+0x3ec>
					break;
 80015e2:	bf00      	nop
			break;
 80015e4:	bf00      	nop
}
 80015e6:	bf00      	nop
 80015e8:	3708      	adds	r7, #8
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bdb0      	pop	{r4, r5, r7, pc}
 80015ee:	bf00      	nop
 80015f0:	200000d4 	.word	0x200000d4

080015f4 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 80015f4:	b590      	push	{r4, r7, lr}
 80015f6:	b08b      	sub	sp, #44	@ 0x2c
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4604      	mov	r4, r0
 80015fc:	4608      	mov	r0, r1
 80015fe:	4611      	mov	r1, r2
 8001600:	461a      	mov	r2, r3
 8001602:	eef0 6a40 	vmov.f32	s13, s0
 8001606:	eeb0 7a60 	vmov.f32	s14, s1
 800160a:	eef0 7a41 	vmov.f32	s15, s2
 800160e:	4623      	mov	r3, r4
 8001610:	75fb      	strb	r3, [r7, #23]
 8001612:	4603      	mov	r3, r0
 8001614:	75bb      	strb	r3, [r7, #22]
 8001616:	460b      	mov	r3, r1
 8001618:	757b      	strb	r3, [r7, #21]
 800161a:	4613      	mov	r3, r2
 800161c:	827b      	strh	r3, [r7, #18]
 800161e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001622:	ed87 7a02 	vstr	s14, [r7, #8]
 8001626:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 800162e:	7dfb      	ldrb	r3, [r7, #23]
 8001630:	3b01      	subs	r3, #1
 8001632:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001634:	7dbb      	ldrb	r3, [r7, #22]
 8001636:	2b02      	cmp	r3, #2
 8001638:	dc02      	bgt.n	8001640 <calcRPM_PID+0x4c>
 800163a:	2b00      	cmp	r3, #0
 800163c:	dc04      	bgt.n	8001648 <calcRPM_PID+0x54>
 800163e:	e00d      	b.n	800165c <calcRPM_PID+0x68>
 8001640:	3b03      	subs	r3, #3
 8001642:	2b01      	cmp	r3, #1
 8001644:	d80a      	bhi.n	800165c <calcRPM_PID+0x68>
 8001646:	e004      	b.n	8001652 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001648:	7d7b      	ldrb	r3, [r7, #21]
 800164a:	3b01      	subs	r3, #1
 800164c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001650:	e009      	b.n	8001666 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001652:	7d7b      	ldrb	r3, [r7, #21]
 8001654:	3303      	adds	r3, #3
 8001656:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 800165a:	e004      	b.n	8001666 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 800165c:	7d7b      	ldrb	r3, [r7, #21]
 800165e:	3b01      	subs	r3, #1
 8001660:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001664:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001666:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 800166a:	7ffa      	ldrb	r2, [r7, #31]
 800166c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001670:	4c70      	ldr	r4, [pc, #448]	@ (8001834 <calcRPM_PID+0x240>)
 8001672:	4613      	mov	r3, r2
 8001674:	009b      	lsls	r3, r3, #2
 8001676:	4413      	add	r3, r2
 8001678:	005b      	lsls	r3, r3, #1
 800167a:	4413      	add	r3, r2
 800167c:	4403      	add	r3, r0
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	4423      	add	r3, r4
 8001682:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001686:	7ffa      	ldrb	r2, [r7, #31]
 8001688:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800168c:	1ac9      	subs	r1, r1, r3
 800168e:	4c6a      	ldr	r4, [pc, #424]	@ (8001838 <calcRPM_PID+0x244>)
 8001690:	4613      	mov	r3, r2
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	4413      	add	r3, r2
 8001696:	005b      	lsls	r3, r3, #1
 8001698:	4413      	add	r3, r2
 800169a:	4403      	add	r3, r0
 800169c:	011b      	lsls	r3, r3, #4
 800169e:	4423      	add	r3, r4
 80016a0:	3304      	adds	r3, #4
 80016a2:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80016a4:	7ffa      	ldrb	r2, [r7, #31]
 80016a6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80016aa:	4863      	ldr	r0, [pc, #396]	@ (8001838 <calcRPM_PID+0x244>)
 80016ac:	4613      	mov	r3, r2
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	4413      	add	r3, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	011b      	lsls	r3, r3, #4
 80016ba:	4403      	add	r3, r0
 80016bc:	3308      	adds	r3, #8
 80016be:	6819      	ldr	r1, [r3, #0]
 80016c0:	7ffa      	ldrb	r2, [r7, #31]
 80016c2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80016c6:	4c5c      	ldr	r4, [pc, #368]	@ (8001838 <calcRPM_PID+0x244>)
 80016c8:	4613      	mov	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	4413      	add	r3, r2
 80016ce:	005b      	lsls	r3, r3, #1
 80016d0:	4413      	add	r3, r2
 80016d2:	4403      	add	r3, r0
 80016d4:	011b      	lsls	r3, r3, #4
 80016d6:	4423      	add	r3, r4
 80016d8:	3304      	adds	r3, #4
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	7ffa      	ldrb	r2, [r7, #31]
 80016de:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80016e2:	4419      	add	r1, r3
 80016e4:	4c54      	ldr	r4, [pc, #336]	@ (8001838 <calcRPM_PID+0x244>)
 80016e6:	4613      	mov	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	4413      	add	r3, r2
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	4413      	add	r3, r2
 80016f0:	4403      	add	r3, r0
 80016f2:	011b      	lsls	r3, r3, #4
 80016f4:	4423      	add	r3, r4
 80016f6:	3308      	adds	r3, #8
 80016f8:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 80016fa:	7ffa      	ldrb	r2, [r7, #31]
 80016fc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001700:	484d      	ldr	r0, [pc, #308]	@ (8001838 <calcRPM_PID+0x244>)
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	4413      	add	r3, r2
 800170c:	440b      	add	r3, r1
 800170e:	011b      	lsls	r3, r3, #4
 8001710:	4403      	add	r3, r0
 8001712:	6819      	ldr	r1, [r3, #0]
 8001714:	7ffa      	ldrb	r2, [r7, #31]
 8001716:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 800171a:	4c46      	ldr	r4, [pc, #280]	@ (8001834 <calcRPM_PID+0x240>)
 800171c:	4613      	mov	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4413      	add	r3, r2
 8001722:	005b      	lsls	r3, r3, #1
 8001724:	4413      	add	r3, r2
 8001726:	4403      	add	r3, r0
 8001728:	00db      	lsls	r3, r3, #3
 800172a:	4423      	add	r3, r4
 800172c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001730:	7ffa      	ldrb	r2, [r7, #31]
 8001732:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001736:	1ac9      	subs	r1, r1, r3
 8001738:	4c3f      	ldr	r4, [pc, #252]	@ (8001838 <calcRPM_PID+0x244>)
 800173a:	4613      	mov	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	4413      	add	r3, r2
 8001740:	005b      	lsls	r3, r3, #1
 8001742:	4413      	add	r3, r2
 8001744:	4403      	add	r3, r0
 8001746:	011b      	lsls	r3, r3, #4
 8001748:	4423      	add	r3, r4
 800174a:	330c      	adds	r3, #12
 800174c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 800174e:	7ffa      	ldrb	r2, [r7, #31]
 8001750:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001754:	4837      	ldr	r0, [pc, #220]	@ (8001834 <calcRPM_PID+0x240>)
 8001756:	4613      	mov	r3, r2
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	4413      	add	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	440b      	add	r3, r1
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	4403      	add	r3, r0
 8001766:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800176a:	7ffa      	ldrb	r2, [r7, #31]
 800176c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001770:	461c      	mov	r4, r3
 8001772:	4831      	ldr	r0, [pc, #196]	@ (8001838 <calcRPM_PID+0x244>)
 8001774:	4613      	mov	r3, r2
 8001776:	009b      	lsls	r3, r3, #2
 8001778:	4413      	add	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	440b      	add	r3, r1
 8001780:	011b      	lsls	r3, r3, #4
 8001782:	4403      	add	r3, r0
 8001784:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001786:	ed97 7a01 	vldr	s14, [r7, #4]
 800178a:	7ffa      	ldrb	r2, [r7, #31]
 800178c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001790:	4829      	ldr	r0, [pc, #164]	@ (8001838 <calcRPM_PID+0x244>)
 8001792:	4613      	mov	r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4413      	add	r3, r2
 8001798:	005b      	lsls	r3, r3, #1
 800179a:	4413      	add	r3, r2
 800179c:	440b      	add	r3, r1
 800179e:	011b      	lsls	r3, r3, #4
 80017a0:	4403      	add	r3, r0
 80017a2:	3304      	adds	r3, #4
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	ee07 3a90 	vmov	s15, r3
 80017aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80017b2:	edd7 6a02 	vldr	s13, [r7, #8]
 80017b6:	7ffa      	ldrb	r2, [r7, #31]
 80017b8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80017bc:	481e      	ldr	r0, [pc, #120]	@ (8001838 <calcRPM_PID+0x244>)
 80017be:	4613      	mov	r3, r2
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	4413      	add	r3, r2
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4413      	add	r3, r2
 80017c8:	440b      	add	r3, r1
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	4403      	add	r3, r0
 80017ce:	3308      	adds	r3, #8
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	ee07 3a90 	vmov	s15, r3
 80017d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80017de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017e2:	edd7 6a03 	vldr	s13, [r7, #12]
 80017e6:	7ffa      	ldrb	r2, [r7, #31]
 80017e8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80017ec:	4812      	ldr	r0, [pc, #72]	@ (8001838 <calcRPM_PID+0x244>)
 80017ee:	4613      	mov	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	4413      	add	r3, r2
 80017f8:	440b      	add	r3, r1
 80017fa:	011b      	lsls	r3, r3, #4
 80017fc:	4403      	add	r3, r0
 80017fe:	330c      	adds	r3, #12
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	ee07 3a90 	vmov	s15, r3
 8001806:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800180a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800180e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001812:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001816:	ee17 3a90 	vmov	r3, s15
 800181a:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 800181c:	7dbb      	ldrb	r3, [r7, #22]
 800181e:	6a39      	ldr	r1, [r7, #32]
 8001820:	4618      	mov	r0, r3
 8001822:	f000 f997 	bl	8001b54 <applyCtrlLimit>
 8001826:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001828:	6a3b      	ldr	r3, [r7, #32]
}
 800182a:	4618      	mov	r0, r3
 800182c:	372c      	adds	r7, #44	@ 0x2c
 800182e:	46bd      	mov	sp, r7
 8001830:	bd90      	pop	{r4, r7, pc}
 8001832:	bf00      	nop
 8001834:	20000104 	.word	0x20000104
 8001838:	200001b4 	.word	0x200001b4

0800183c <calcPosition_PID>:

int32_t calcPosition_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 800183c:	b590      	push	{r4, r7, lr}
 800183e:	b08b      	sub	sp, #44	@ 0x2c
 8001840:	af00      	add	r7, sp, #0
 8001842:	4604      	mov	r4, r0
 8001844:	4608      	mov	r0, r1
 8001846:	4611      	mov	r1, r2
 8001848:	461a      	mov	r2, r3
 800184a:	eef0 6a40 	vmov.f32	s13, s0
 800184e:	eeb0 7a60 	vmov.f32	s14, s1
 8001852:	eef0 7a41 	vmov.f32	s15, s2
 8001856:	4623      	mov	r3, r4
 8001858:	75fb      	strb	r3, [r7, #23]
 800185a:	4603      	mov	r3, r0
 800185c:	75bb      	strb	r3, [r7, #22]
 800185e:	460b      	mov	r3, r1
 8001860:	757b      	strb	r3, [r7, #21]
 8001862:	4613      	mov	r3, r2
 8001864:	827b      	strh	r3, [r7, #18]
 8001866:	edc7 6a01 	vstr	s13, [r7, #4]
 800186a:	ed87 7a02 	vstr	s14, [r7, #8]
 800186e:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001876:	7dfb      	ldrb	r3, [r7, #23]
 8001878:	3b01      	subs	r3, #1
 800187a:	77fb      	strb	r3, [r7, #31]
	int16_t cwPositionDifference = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	83bb      	strh	r3, [r7, #28]
	int16_t ccwPositionDifference = 0;
 8001880:	2300      	movs	r3, #0
 8001882:	837b      	strh	r3, [r7, #26]
	switch(motorType) {
 8001884:	7dbb      	ldrb	r3, [r7, #22]
 8001886:	2b02      	cmp	r3, #2
 8001888:	dc02      	bgt.n	8001890 <calcPosition_PID+0x54>
 800188a:	2b00      	cmp	r3, #0
 800188c:	dc04      	bgt.n	8001898 <calcPosition_PID+0x5c>
 800188e:	e00d      	b.n	80018ac <calcPosition_PID+0x70>
 8001890:	3b03      	subs	r3, #3
 8001892:	2b01      	cmp	r3, #1
 8001894:	d80a      	bhi.n	80018ac <calcPosition_PID+0x70>
 8001896:	e004      	b.n	80018a2 <calcPosition_PID+0x66>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001898:	7d7b      	ldrb	r3, [r7, #21]
 800189a:	3b01      	subs	r3, #1
 800189c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018a0:	e009      	b.n	80018b6 <calcPosition_PID+0x7a>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 80018a2:	7d7b      	ldrb	r3, [r7, #21]
 80018a4:	3303      	adds	r3, #3
 80018a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018aa:	e004      	b.n	80018b6 <calcPosition_PID+0x7a>
		}
		default: {
			ID = motorID - 1;
 80018ac:	7d7b      	ldrb	r3, [r7, #21]
 80018ae:	3b01      	subs	r3, #1
 80018b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 80018b4:	bf00      	nop
		}
	}

	if (positionTarget - motorFeedback[busID][ID].rotor_position >= 0) {
 80018b6:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 80018ba:	7ffa      	ldrb	r2, [r7, #31]
 80018bc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80018c0:	4ca2      	ldr	r4, [pc, #648]	@ (8001b4c <calcPosition_PID+0x310>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	4413      	add	r3, r2
 80018cc:	4403      	add	r3, r0
 80018ce:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80018d2:	1acb      	subs	r3, r1, r3
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	db10      	blt.n	80018fa <calcPosition_PID+0xbe>
		cwPositionDifference = positionTarget - motorFeedback[busID][ID].rotor_position;
 80018d8:	8a79      	ldrh	r1, [r7, #18]
 80018da:	7ffa      	ldrb	r2, [r7, #31]
 80018dc:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80018e0:	4c9a      	ldr	r4, [pc, #616]	@ (8001b4c <calcPosition_PID+0x310>)
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	005b      	lsls	r3, r3, #1
 80018ea:	4413      	add	r3, r2
 80018ec:	4403      	add	r3, r0
 80018ee:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80018f2:	1acb      	subs	r3, r1, r3
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	83bb      	strh	r3, [r7, #28]
 80018f8:	e012      	b.n	8001920 <calcPosition_PID+0xe4>
	} else {
		cwPositionDifference = 8192 - motorFeedback[busID][ID].rotor_position + positionTarget;
 80018fa:	8a79      	ldrh	r1, [r7, #18]
 80018fc:	7ffa      	ldrb	r2, [r7, #31]
 80018fe:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001902:	4c92      	ldr	r4, [pc, #584]	@ (8001b4c <calcPosition_PID+0x310>)
 8001904:	4613      	mov	r3, r2
 8001906:	009b      	lsls	r3, r3, #2
 8001908:	4413      	add	r3, r2
 800190a:	005b      	lsls	r3, r3, #1
 800190c:	4413      	add	r3, r2
 800190e:	4403      	add	r3, r0
 8001910:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001914:	1acb      	subs	r3, r1, r3
 8001916:	b29b      	uxth	r3, r3
 8001918:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800191c:	b29b      	uxth	r3, r3
 800191e:	83bb      	strh	r3, [r7, #28]
	}

	if (motorFeedback[busID][ID].rotor_position - positionTarget >= 0) {
 8001920:	7ffa      	ldrb	r2, [r7, #31]
 8001922:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001926:	4889      	ldr	r0, [pc, #548]	@ (8001b4c <calcPosition_PID+0x310>)
 8001928:	4613      	mov	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	4413      	add	r3, r2
 800192e:	005b      	lsls	r3, r3, #1
 8001930:	4413      	add	r3, r2
 8001932:	440b      	add	r3, r1
 8001934:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001938:	461a      	mov	r2, r3
 800193a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	db10      	blt.n	8001966 <calcPosition_PID+0x12a>
		ccwPositionDifference =  motorFeedback[busID][ID].rotor_position - positionTarget;
 8001944:	7ffa      	ldrb	r2, [r7, #31]
 8001946:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800194a:	4880      	ldr	r0, [pc, #512]	@ (8001b4c <calcPosition_PID+0x310>)
 800194c:	4613      	mov	r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	4413      	add	r3, r2
 8001952:	005b      	lsls	r3, r3, #1
 8001954:	4413      	add	r3, r2
 8001956:	440b      	add	r3, r1
 8001958:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800195c:	8a7b      	ldrh	r3, [r7, #18]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	b29b      	uxth	r3, r3
 8001962:	837b      	strh	r3, [r7, #26]
 8001964:	e012      	b.n	800198c <calcPosition_PID+0x150>
	} else {
		ccwPositionDifference = 8192 + motorFeedback[busID][ID].rotor_position - positionTarget;
 8001966:	7ffa      	ldrb	r2, [r7, #31]
 8001968:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 800196c:	4877      	ldr	r0, [pc, #476]	@ (8001b4c <calcPosition_PID+0x310>)
 800196e:	4613      	mov	r3, r2
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	4413      	add	r3, r2
 8001978:	440b      	add	r3, r1
 800197a:	f830 2033 	ldrh.w	r2, [r0, r3, lsl #3]
 800197e:	8a7b      	ldrh	r3, [r7, #18]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	b29b      	uxth	r3, r3
 8001984:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8001988:	b29b      	uxth	r3, r3
 800198a:	837b      	strh	r3, [r7, #26]
//	} else {     // ccw better
//		positionDifference = motorFeedback[busID][ID].rotor_position - positionTarget;
//		usart_printf("CCW %d %d \r\n", positionDifference, motorFeedback[busID][ID].rotor_position - positionTarget);
//	}

	PID_data[busID][ID].pVal = positionTarget - motorFeedback[busID][ID].rotor_position;     // update proportional term
 800198c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001990:	7ffa      	ldrb	r2, [r7, #31]
 8001992:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001996:	4c6d      	ldr	r4, [pc, #436]	@ (8001b4c <calcPosition_PID+0x310>)
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	4413      	add	r3, r2
 80019a2:	4403      	add	r3, r0
 80019a4:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 80019a8:	7ffa      	ldrb	r2, [r7, #31]
 80019aa:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019ae:	1ac9      	subs	r1, r1, r3
 80019b0:	4c67      	ldr	r4, [pc, #412]	@ (8001b50 <calcPosition_PID+0x314>)
 80019b2:	4613      	mov	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	4413      	add	r3, r2
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	4413      	add	r3, r2
 80019bc:	4403      	add	r3, r0
 80019be:	011b      	lsls	r3, r3, #4
 80019c0:	4423      	add	r3, r4
 80019c2:	3304      	adds	r3, #4
 80019c4:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 80019c6:	7ffa      	ldrb	r2, [r7, #31]
 80019c8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80019cc:	4860      	ldr	r0, [pc, #384]	@ (8001b50 <calcPosition_PID+0x314>)
 80019ce:	4613      	mov	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	4413      	add	r3, r2
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	4413      	add	r3, r2
 80019d8:	440b      	add	r3, r1
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	4403      	add	r3, r0
 80019de:	3308      	adds	r3, #8
 80019e0:	6819      	ldr	r1, [r3, #0]
 80019e2:	7ffa      	ldrb	r2, [r7, #31]
 80019e4:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 80019e8:	4c59      	ldr	r4, [pc, #356]	@ (8001b50 <calcPosition_PID+0x314>)
 80019ea:	4613      	mov	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	4413      	add	r3, r2
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	4413      	add	r3, r2
 80019f4:	4403      	add	r3, r0
 80019f6:	011b      	lsls	r3, r3, #4
 80019f8:	4423      	add	r3, r4
 80019fa:	3304      	adds	r3, #4
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	7ffa      	ldrb	r2, [r7, #31]
 8001a00:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a04:	4419      	add	r1, r3
 8001a06:	4c52      	ldr	r4, [pc, #328]	@ (8001b50 <calcPosition_PID+0x314>)
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	4413      	add	r3, r2
 8001a12:	4403      	add	r3, r0
 8001a14:	011b      	lsls	r3, r3, #4
 8001a16:	4423      	add	r3, r4
 8001a18:	3308      	adds	r3, #8
 8001a1a:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].rotor_position;       // update derivative term
 8001a1c:	7ffa      	ldrb	r2, [r7, #31]
 8001a1e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a22:	484b      	ldr	r0, [pc, #300]	@ (8001b50 <calcPosition_PID+0x314>)
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	440b      	add	r3, r1
 8001a30:	011b      	lsls	r3, r3, #4
 8001a32:	4403      	add	r3, r0
 8001a34:	6819      	ldr	r1, [r3, #0]
 8001a36:	7ffa      	ldrb	r2, [r7, #31]
 8001a38:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a3c:	4c43      	ldr	r4, [pc, #268]	@ (8001b4c <calcPosition_PID+0x310>)
 8001a3e:	4613      	mov	r3, r2
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	4413      	add	r3, r2
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	4413      	add	r3, r2
 8001a48:	4403      	add	r3, r0
 8001a4a:	f834 3033 	ldrh.w	r3, [r4, r3, lsl #3]
 8001a4e:	7ffa      	ldrb	r2, [r7, #31]
 8001a50:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001a54:	1ac9      	subs	r1, r1, r3
 8001a56:	4c3e      	ldr	r4, [pc, #248]	@ (8001b50 <calcPosition_PID+0x314>)
 8001a58:	4613      	mov	r3, r2
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4413      	add	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	4403      	add	r3, r0
 8001a64:	011b      	lsls	r3, r3, #4
 8001a66:	4423      	add	r3, r4
 8001a68:	330c      	adds	r3, #12
 8001a6a:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].rotor_position;                        // save the current RPM to be used in the next cycle
 8001a6c:	7ffa      	ldrb	r2, [r7, #31]
 8001a6e:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a72:	4836      	ldr	r0, [pc, #216]	@ (8001b4c <calcPosition_PID+0x310>)
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	4413      	add	r3, r2
 8001a7e:	440b      	add	r3, r1
 8001a80:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 8001a84:	7ffa      	ldrb	r2, [r7, #31]
 8001a86:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001a8a:	461c      	mov	r4, r3
 8001a8c:	4830      	ldr	r0, [pc, #192]	@ (8001b50 <calcPosition_PID+0x314>)
 8001a8e:	4613      	mov	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4413      	add	r3, r2
 8001a98:	440b      	add	r3, r1
 8001a9a:	011b      	lsls	r3, r3, #4
 8001a9c:	4403      	add	r3, r0
 8001a9e:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001aa0:	ed97 7a01 	vldr	s14, [r7, #4]
 8001aa4:	7ffa      	ldrb	r2, [r7, #31]
 8001aa6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001aaa:	4829      	ldr	r0, [pc, #164]	@ (8001b50 <calcPosition_PID+0x314>)
 8001aac:	4613      	mov	r3, r2
 8001aae:	009b      	lsls	r3, r3, #2
 8001ab0:	4413      	add	r3, r2
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	4413      	add	r3, r2
 8001ab6:	440b      	add	r3, r1
 8001ab8:	011b      	lsls	r3, r3, #4
 8001aba:	4403      	add	r3, r0
 8001abc:	3304      	adds	r3, #4
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ac8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001acc:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ad0:	7ffa      	ldrb	r2, [r7, #31]
 8001ad2:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001ad6:	481e      	ldr	r0, [pc, #120]	@ (8001b50 <calcPosition_PID+0x314>)
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4413      	add	r3, r2
 8001ae2:	440b      	add	r3, r1
 8001ae4:	011b      	lsls	r3, r3, #4
 8001ae6:	4403      	add	r3, r0
 8001ae8:	3308      	adds	r3, #8
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	ee07 3a90 	vmov	s15, r3
 8001af0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001af4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001af8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001afc:	edd7 6a03 	vldr	s13, [r7, #12]
 8001b00:	7ffa      	ldrb	r2, [r7, #31]
 8001b02:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001b06:	4812      	ldr	r0, [pc, #72]	@ (8001b50 <calcPosition_PID+0x314>)
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	4413      	add	r3, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	011b      	lsls	r3, r3, #4
 8001b16:	4403      	add	r3, r0
 8001b18:	330c      	adds	r3, #12
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b30:	ee17 3a90 	vmov	r3, s15
 8001b34:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001b36:	7dbb      	ldrb	r3, [r7, #22]
 8001b38:	6a39      	ldr	r1, [r7, #32]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f000 f80a 	bl	8001b54 <applyCtrlLimit>
 8001b40:	6238      	str	r0, [r7, #32]
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
 8001b42:	6a3b      	ldr	r3, [r7, #32]
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	372c      	adds	r7, #44	@ 0x2c
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd90      	pop	{r4, r7, pc}
 8001b4c:	20000104 	.word	0x20000104
 8001b50:	200001b4 	.word	0x200001b4

08001b54 <applyCtrlLimit>:

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	6039      	str	r1, [r7, #0]
 8001b5e:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	2b04      	cmp	r3, #4
 8001b64:	d009      	beq.n	8001b7a <applyCtrlLimit+0x26>
 8001b66:	2b04      	cmp	r3, #4
 8001b68:	dc29      	bgt.n	8001bbe <applyCtrlLimit+0x6a>
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	dc02      	bgt.n	8001b74 <applyCtrlLimit+0x20>
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	dc03      	bgt.n	8001b7a <applyCtrlLimit+0x26>
 8001b72:	e024      	b.n	8001bbe <applyCtrlLimit+0x6a>
 8001b74:	2b03      	cmp	r3, #3
 8001b76:	d00f      	beq.n	8001b98 <applyCtrlLimit+0x44>
 8001b78:	e021      	b.n	8001bbe <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001b80:	dd03      	ble.n	8001b8a <applyCtrlLimit+0x36>
				val = 16384;
 8001b82:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001b86:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001b88:	e016      	b.n	8001bb8 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001b90:	da12      	bge.n	8001bb8 <applyCtrlLimit+0x64>
				val = -16384;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	@ (8001bcc <applyCtrlLimit+0x78>)
 8001b94:	603b      	str	r3, [r7, #0]
			break;
 8001b96:	e00f      	b.n	8001bb8 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	dd03      	ble.n	8001baa <applyCtrlLimit+0x56>
				val = 25000;
 8001ba2:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001ba6:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001ba8:	e008      	b.n	8001bbc <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <applyCtrlLimit+0x7c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	da04      	bge.n	8001bbc <applyCtrlLimit+0x68>
				val = -25000;
 8001bb2:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <applyCtrlLimit+0x7c>)
 8001bb4:	603b      	str	r3, [r7, #0]
			break;
 8001bb6:	e001      	b.n	8001bbc <applyCtrlLimit+0x68>
			break;
 8001bb8:	bf00      	nop
 8001bba:	e000      	b.n	8001bbe <applyCtrlLimit+0x6a>
			break;
 8001bbc:	bf00      	nop
		}
	}
	return val;
 8001bbe:	683b      	ldr	r3, [r7, #0]
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	ffffc000 	.word	0xffffc000
 8001bd0:	ffff9e58 	.word	0xffff9e58

08001bd4 <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001bd4:	b590      	push	{r4, r7, lr}
 8001bd6:	b087      	sub	sp, #28
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4604      	mov	r4, r0
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	eef0 6a40 	vmov.f32	s13, s0
 8001be6:	eeb0 7a60 	vmov.f32	s14, s1
 8001bea:	eef0 7a41 	vmov.f32	s15, s2
 8001bee:	4623      	mov	r3, r4
 8001bf0:	75fb      	strb	r3, [r7, #23]
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	75bb      	strb	r3, [r7, #22]
 8001bf6:	460b      	mov	r3, r1
 8001bf8:	757b      	strb	r3, [r7, #21]
 8001bfa:	4613      	mov	r3, r2
 8001bfc:	827b      	strh	r3, [r7, #18]
 8001bfe:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c02:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c06:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8001c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c0e:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c12:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c16:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c1a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001c1e:	7db9      	ldrb	r1, [r7, #22]
 8001c20:	7df8      	ldrb	r0, [r7, #23]
 8001c22:	eeb0 0a66 	vmov.f32	s0, s13
 8001c26:	eef0 0a47 	vmov.f32	s1, s14
 8001c2a:	eeb0 1a67 	vmov.f32	s2, s15
 8001c2e:	f7ff fce1 	bl	80015f4 <calcRPM_PID>
 8001c32:	4603      	mov	r3, r0
 8001c34:	b21b      	sxth	r3, r3
 8001c36:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001c3a:	7db9      	ldrb	r1, [r7, #22]
 8001c3c:	7df8      	ldrb	r0, [r7, #23]
 8001c3e:	f7ff fadb 	bl	80011f8 <CAN_setMotorCtrlVal>
}
 8001c42:	bf00      	nop
 8001c44:	371c      	adds	r7, #28
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd90      	pop	{r4, r7, pc}

08001c4a <setMotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
 8001c4a:	b590      	push	{r4, r7, lr}
 8001c4c:	b087      	sub	sp, #28
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	4604      	mov	r4, r0
 8001c52:	4608      	mov	r0, r1
 8001c54:	4611      	mov	r1, r2
 8001c56:	461a      	mov	r2, r3
 8001c58:	eef0 6a40 	vmov.f32	s13, s0
 8001c5c:	eeb0 7a60 	vmov.f32	s14, s1
 8001c60:	eef0 7a41 	vmov.f32	s15, s2
 8001c64:	4623      	mov	r3, r4
 8001c66:	75fb      	strb	r3, [r7, #23]
 8001c68:	4603      	mov	r3, r0
 8001c6a:	75bb      	strb	r3, [r7, #22]
 8001c6c:	460b      	mov	r3, r1
 8001c6e:	757b      	strb	r3, [r7, #21]
 8001c70:	4613      	mov	r3, r2
 8001c72:	827b      	strh	r3, [r7, #18]
 8001c74:	edc7 6a01 	vstr	s13, [r7, #4]
 8001c78:	ed87 7a02 	vstr	s14, [r7, #8]
 8001c7c:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
 8001c80:	edd7 6a01 	vldr	s13, [r7, #4]
 8001c84:	ed97 7a02 	vldr	s14, [r7, #8]
 8001c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8001c8c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001c90:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001c94:	7db9      	ldrb	r1, [r7, #22]
 8001c96:	7df8      	ldrb	r0, [r7, #23]
 8001c98:	eeb0 0a66 	vmov.f32	s0, s13
 8001c9c:	eef0 0a47 	vmov.f32	s1, s14
 8001ca0:	eeb0 1a67 	vmov.f32	s2, s15
 8001ca4:	f7ff fdca 	bl	800183c <calcPosition_PID>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	b21b      	sxth	r3, r3
 8001cac:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001cb0:	7db9      	ldrb	r1, [r7, #22]
 8001cb2:	7df8      	ldrb	r0, [r7, #23]
 8001cb4:	f7ff faa0 	bl	80011f8 <CAN_setMotorCtrlVal>
}
 8001cb8:	bf00      	nop
 8001cba:	371c      	adds	r7, #28
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd90      	pop	{r4, r7, pc}

08001cc0 <usart_Init>:
pc_control_t pc_control;
custom_client_data_t custom_client_data;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 8001cc4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cc8:	4905      	ldr	r1, [pc, #20]	@ (8001ce0 <usart_Init+0x20>)
 8001cca:	4806      	ldr	r0, [pc, #24]	@ (8001ce4 <usart_Init+0x24>)
 8001ccc:	f006 ff95 	bl	8008bfa <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 8001cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001cd4:	4904      	ldr	r1, [pc, #16]	@ (8001ce8 <usart_Init+0x28>)
 8001cd6:	4805      	ldr	r0, [pc, #20]	@ (8001cec <usart_Init+0x2c>)
 8001cd8:	f006 ff8f 	bl	8008bfa <HAL_UARTEx_ReceiveToIdle_DMA>
}
 8001cdc:	bf00      	nop
 8001cde:	bd80      	pop	{r7, pc}
 8001ce0:	20000314 	.word	0x20000314
 8001ce4:	20000804 	.word	0x20000804
 8001ce8:	20000414 	.word	0x20000414
 8001cec:	2000088c 	.word	0x2000088c

08001cf0 <HAL_UARTEx_RxEventCallback>:
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	460b      	mov	r3, r1
 8001cfa:	807b      	strh	r3, [r7, #2]
			}

	}
	*/

}
 8001cfc:	bf00      	nop
 8001cfe:	370c      	adds	r7, #12
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <can_filter_init>:

extern CAN_HandleTypeDef hcan1;
extern CAN_HandleTypeDef hcan2;
// extern CAN_HandleTypeDef hcan2;

void can_filter_init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b08a      	sub	sp, #40	@ 0x28
 8001d0c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001d16:	2301      	movs	r3, #1
 8001d18:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001d22:	2300      	movs	r3, #0
 8001d24:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001d26:	2300      	movs	r3, #0
 8001d28:	60fb      	str	r3, [r7, #12]
    can_filter_st.FilterBank = 0;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001d32:	463b      	mov	r3, r7
 8001d34:	4619      	mov	r1, r3
 8001d36:	480f      	ldr	r0, [pc, #60]	@ (8001d74 <can_filter_init+0x6c>)
 8001d38:	f002 fdc0 	bl	80048bc <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001d3c:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <can_filter_init+0x6c>)
 8001d3e:	f002 fe9d 	bl	8004a7c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d42:	2102      	movs	r1, #2
 8001d44:	480b      	ldr	r0, [pc, #44]	@ (8001d74 <can_filter_init+0x6c>)
 8001d46:	f003 f8ca 	bl	8004ede <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 14;
 8001d4a:	230e      	movs	r3, #14
 8001d4c:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 14;
 8001d4e:	230e      	movs	r3, #14
 8001d50:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001d52:	463b      	mov	r3, r7
 8001d54:	4619      	mov	r1, r3
 8001d56:	4808      	ldr	r0, [pc, #32]	@ (8001d78 <can_filter_init+0x70>)
 8001d58:	f002 fdb0 	bl	80048bc <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001d5c:	4806      	ldr	r0, [pc, #24]	@ (8001d78 <can_filter_init+0x70>)
 8001d5e:	f002 fe8d 	bl	8004a7c <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001d62:	2102      	movs	r1, #2
 8001d64:	4804      	ldr	r0, [pc, #16]	@ (8001d78 <can_filter_init+0x70>)
 8001d66:	f003 f8ba 	bl	8004ede <HAL_CAN_ActivateNotification>
}
 8001d6a:	bf00      	nop
 8001d6c:	3728      	adds	r7, #40	@ 0x28
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	200005a0 	.word	0x200005a0
 8001d78:	200005c8 	.word	0x200005c8

08001d7c <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8001d86:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <imu_pwm_set+0x1c>)
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	40014400 	.word	0x40014400

08001d9c <RC_init>:
#include "main.h"

extern UART_HandleTypeDef huart3;
extern DMA_HandleTypeDef hdma_usart3_rx;

void RC_init(uint8_t *rx1_buf, uint8_t *rx2_buf, uint16_t dma_buf_num) {
 8001d9c:	b480      	push	{r7}
 8001d9e:	b085      	sub	sp, #20
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	4613      	mov	r3, r2
 8001da8:	80fb      	strh	r3, [r7, #6]
    SET_BIT(huart3.Instance->CR3, USART_CR3_DMAR);                 //enable the DMA transfer for the receiver request
 8001daa:	4b27      	ldr	r3, [pc, #156]	@ (8001e48 <RC_init+0xac>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	695a      	ldr	r2, [r3, #20]
 8001db0:	4b25      	ldr	r3, [pc, #148]	@ (8001e48 <RC_init+0xac>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001db8:	615a      	str	r2, [r3, #20]
    __HAL_UART_ENABLE_IT(&huart3, UART_IT_IDLE);                  //enalbe idle interrupt
 8001dba:	4b23      	ldr	r3, [pc, #140]	@ (8001e48 <RC_init+0xac>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	68da      	ldr	r2, [r3, #12]
 8001dc0:	4b21      	ldr	r3, [pc, #132]	@ (8001e48 <RC_init+0xac>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f042 0210 	orr.w	r2, r2, #16
 8001dc8:	60da      	str	r2, [r3, #12]
    __HAL_DMA_DISABLE(&hdma_usart3_rx);                   //disable DMA
 8001dca:	4b20      	ldr	r3, [pc, #128]	@ (8001e4c <RC_init+0xb0>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e4c <RC_init+0xb0>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f022 0201 	bic.w	r2, r2, #1
 8001dd8:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001dda:	e007      	b.n	8001dec <RC_init+0x50>
        __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8001ddc:	4b1b      	ldr	r3, [pc, #108]	@ (8001e4c <RC_init+0xb0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	4b1a      	ldr	r3, [pc, #104]	@ (8001e4c <RC_init+0xb0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]
    while(hdma_usart3_rx.Instance->CR & DMA_SxCR_EN) {
 8001dec:	4b17      	ldr	r3, [pc, #92]	@ (8001e4c <RC_init+0xb0>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f003 0301 	and.w	r3, r3, #1
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f0      	bne.n	8001ddc <RC_init+0x40>
    }
    hdma_usart3_rx.Instance->PAR = (uint32_t) & (USART3->DR);                   //memory buffer 1
 8001dfa:	4b14      	ldr	r3, [pc, #80]	@ (8001e4c <RC_init+0xb0>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a14      	ldr	r2, [pc, #80]	@ (8001e50 <RC_init+0xb4>)
 8001e00:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Instance->M0AR = (uint32_t)(rx1_buf);                 //memory buffer 2
 8001e02:	4b12      	ldr	r3, [pc, #72]	@ (8001e4c <RC_init+0xb0>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Instance->M1AR = (uint32_t)(rx2_buf);                  //data length
 8001e0a:	4b10      	ldr	r3, [pc, #64]	@ (8001e4c <RC_init+0xb0>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Instance->NDTR = dma_buf_num;                 //enable double memory buffer
 8001e12:	4b0e      	ldr	r3, [pc, #56]	@ (8001e4c <RC_init+0xb0>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	88fa      	ldrh	r2, [r7, #6]
 8001e18:	605a      	str	r2, [r3, #4]
    SET_BIT(hdma_usart3_rx.Instance->CR, DMA_SxCR_DBM);
 8001e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e4c <RC_init+0xb0>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b0a      	ldr	r3, [pc, #40]	@ (8001e4c <RC_init+0xb0>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8001e28:	601a      	str	r2, [r3, #0]
    __HAL_DMA_ENABLE(&hdma_usart3_rx);                 //enable DMA
 8001e2a:	4b08      	ldr	r3, [pc, #32]	@ (8001e4c <RC_init+0xb0>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b06      	ldr	r3, [pc, #24]	@ (8001e4c <RC_init+0xb0>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f042 0201 	orr.w	r2, r2, #1
 8001e38:	601a      	str	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000848 	.word	0x20000848
 8001e4c:	20000990 	.word	0x20000990
 8001e50:	40004804 	.word	0x40004804

08001e54 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8001e5c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e60:	f008 f8c2 	bl	8009fe8 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8001e64:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8001f08 <imu_temp_control_task+0xb4>
 8001e68:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8001f0c <imu_temp_control_task+0xb8>
 8001e6c:	4a28      	ldr	r2, [pc, #160]	@ (8001f10 <imu_temp_control_task+0xbc>)
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4828      	ldr	r0, [pc, #160]	@ (8001f14 <imu_temp_control_task+0xc0>)
 8001e72:	f000 ffdf 	bl	8002e34 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e76:	4b28      	ldr	r3, [pc, #160]	@ (8001f18 <imu_temp_control_task+0xc4>)
 8001e78:	2210      	movs	r2, #16
 8001e7a:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e7c:	4826      	ldr	r0, [pc, #152]	@ (8001f18 <imu_temp_control_task+0xc4>)
 8001e7e:	f005 fbd2 	bl	8007626 <HAL_SPI_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8001e88:	f000 ffce 	bl	8002e28 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8001e8c:	2000      	movs	r0, #0
 8001e8e:	f009 f9c9 	bl	800b224 <pcTaskGetName>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4618      	mov	r0, r3
 8001e96:	f009 fa59 	bl	800b34c <xTaskGetHandle>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001f1c <imu_temp_control_task+0xc8>)
 8001e9e:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8001ea0:	4b1f      	ldr	r3, [pc, #124]	@ (8001f20 <imu_temp_control_task+0xcc>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8001ea6:	bf00      	nop
 8001ea8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001eac:	2001      	movs	r0, #1
 8001eae:	f009 fe79 	bl	800bba4 <ulTaskNotifyTake>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d1f7      	bne.n	8001ea8 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8001eb8:	f7fe ff4e 	bl	8000d58 <IMU_get_temp>
 8001ebc:	eef0 7a40 	vmov.f32	s15, s0
 8001ec0:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001f24 <imu_temp_control_task+0xd0>
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	4812      	ldr	r0, [pc, #72]	@ (8001f14 <imu_temp_control_task+0xc0>)
 8001eca:	f001 f80a 	bl	8002ee2 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <imu_temp_control_task+0xc0>)
 8001ed0:	edd3 7a08 	vldr	s15, [r3, #32]
 8001ed4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ed8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001edc:	d503      	bpl.n	8001ee6 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <imu_temp_control_task+0xc0>)
 8001ee0:	f04f 0200 	mov.w	r2, #0
 8001ee4:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	@ (8001f14 <imu_temp_control_task+0xc0>)
 8001ee8:	edd3 7a08 	vldr	s15, [r3, #32]
 8001eec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ef0:	ee17 3a90 	vmov	r3, s15
 8001ef4:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8001ef6:	89fb      	ldrh	r3, [r7, #14]
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f7ff ff3f 	bl	8001d7c <imu_pwm_set>
        osDelay(5);
 8001efe:	2005      	movs	r0, #5
 8001f00:	f008 f872 	bl	8009fe8 <osDelay>
    {
 8001f04:	e7cf      	b.n	8001ea6 <imu_temp_control_task+0x52>
 8001f06:	bf00      	nop
 8001f08:	45898000 	.word	0x45898000
 8001f0c:	458ca000 	.word	0x458ca000
 8001f10:	0800cf84 	.word	0x0800cf84
 8001f14:	20000548 	.word	0x20000548
 8001f18:	20000644 	.word	0x20000644
 8001f1c:	20000540 	.word	0x20000540
 8001f20:	20000544 	.word	0x20000544
 8001f24:	42200000 	.word	0x42200000

08001f28 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	4603      	mov	r3, r0
 8001f30:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8001f32:	4b12      	ldr	r3, [pc, #72]	@ (8001f7c <HAL_GPIO_EXTI_Callback+0x54>)
 8001f34:	881b      	ldrh	r3, [r3, #0]
 8001f36:	88fa      	ldrh	r2, [r7, #6]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d11b      	bne.n	8001f74 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8001f3c:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <HAL_GPIO_EXTI_Callback+0x58>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d016      	beq.n	8001f74 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001f46:	f009 fd9f 	bl	800ba88 <xTaskGetSchedulerState>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d011      	beq.n	8001f74 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8001f50:	4b0c      	ldr	r3, [pc, #48]	@ (8001f84 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	490c      	ldr	r1, [pc, #48]	@ (8001f88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001f56:	4618      	mov	r0, r3
 8001f58:	f009 fe70 	bl	800bc3c <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f88 <HAL_GPIO_EXTI_Callback+0x60>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d007      	beq.n	8001f74 <HAL_GPIO_EXTI_Callback+0x4c>
 8001f64:	4b09      	ldr	r3, [pc, #36]	@ (8001f8c <HAL_GPIO_EXTI_Callback+0x64>)
 8001f66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	f3bf 8f4f 	dsb	sy
 8001f70:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	2000000e 	.word	0x2000000e
 8001f80:	20000544 	.word	0x20000544
 8001f84:	20000540 	.word	0x20000540
 8001f88:	20000590 	.word	0x20000590
 8001f8c:	e000ed04 	.word	0xe000ed04

08001f90 <ist8310_read_mag>:
/**
  * @brief          read mag magnetic field strength data of IST8310 by I2C
  * @param[out]     mag variable
  * @retval         none
  */
void ist8310_read_mag(float mag[3]) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
    uint8_t buf[6];
    int16_t temp_ist8310_data = 0;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	81fb      	strh	r3, [r7, #14]
    //read the "DATAXL" register (0x03)
    ist8310_IIC_read_muli_reg(0x03, buf, 6);
 8001f9c:	f107 0308 	add.w	r3, r7, #8
 8001fa0:	2206      	movs	r2, #6
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	2003      	movs	r0, #3
 8001fa6:	f000 f845 	bl	8002034 <ist8310_IIC_read_muli_reg>

    temp_ist8310_data = (int16_t)((buf[1] << 8) | buf[0]);
 8001faa:	7a7b      	ldrb	r3, [r7, #9]
 8001fac:	021b      	lsls	r3, r3, #8
 8001fae:	b21a      	sxth	r2, r3
 8001fb0:	7a3b      	ldrb	r3, [r7, #8]
 8001fb2:	b21b      	sxth	r3, r3
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	81fb      	strh	r3, [r7, #14]
    mag[0] = MAG_SEN * temp_ist8310_data;
 8001fb8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fbc:	ee07 3a90 	vmov	s15, r3
 8001fc0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fc4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8002030 <ist8310_read_mag+0xa0>
 8001fc8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[3] << 8) | buf[2]);
 8001fd2:	7afb      	ldrb	r3, [r7, #11]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	b21a      	sxth	r2, r3
 8001fd8:	7abb      	ldrb	r3, [r7, #10]
 8001fda:	b21b      	sxth	r3, r3
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	81fb      	strh	r3, [r7, #14]
    mag[1] = MAG_SEN * temp_ist8310_data;
 8001fe0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001fe4:	ee07 3a90 	vmov	s15, r3
 8001fe8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3304      	adds	r3, #4
 8001ff0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8002030 <ist8310_read_mag+0xa0>
 8001ff4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ff8:	edc3 7a00 	vstr	s15, [r3]
    temp_ist8310_data = (int16_t)((buf[5] << 8) | buf[4]);
 8001ffc:	7b7b      	ldrb	r3, [r7, #13]
 8001ffe:	021b      	lsls	r3, r3, #8
 8002000:	b21a      	sxth	r2, r3
 8002002:	7b3b      	ldrb	r3, [r7, #12]
 8002004:	b21b      	sxth	r3, r3
 8002006:	4313      	orrs	r3, r2
 8002008:	81fb      	strh	r3, [r7, #14]
    mag[2] = MAG_SEN * temp_ist8310_data;
 800200a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	3308      	adds	r3, #8
 800201a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002030 <ist8310_read_mag+0xa0>
 800201e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002022:	edc3 7a00 	vstr	s15, [r3]
}
 8002026:	bf00      	nop
 8002028:	3710      	adds	r7, #16
 800202a:	46bd      	mov	sp, r7
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	3e99999a 	.word	0x3e99999a

08002034 <ist8310_IIC_read_muli_reg>:
  * @param[out]     read buffer
  * @param[in]      Size Amount of data to be read
  * @retval         none
  */
void ist8310_IIC_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b086      	sub	sp, #24
 8002038:	af04      	add	r7, sp, #16
 800203a:	4603      	mov	r3, r0
 800203c:	6039      	str	r1, [r7, #0]
 800203e:	71fb      	strb	r3, [r7, #7]
 8002040:	4613      	mov	r3, r2
 8002042:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c3, IST8310_IIC_ADDRESS <<1, reg,I2C_MEMADD_SIZE_8BIT,buf,len,10);
 8002044:	79fb      	ldrb	r3, [r7, #7]
 8002046:	b29a      	uxth	r2, r3
 8002048:	79bb      	ldrb	r3, [r7, #6]
 800204a:	b29b      	uxth	r3, r3
 800204c:	210a      	movs	r1, #10
 800204e:	9102      	str	r1, [sp, #8]
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2301      	movs	r3, #1
 8002058:	211c      	movs	r1, #28
 800205a:	4803      	ldr	r0, [pc, #12]	@ (8002068 <ist8310_IIC_read_muli_reg+0x34>)
 800205c:	f004 f9ba 	bl	80063d4 <HAL_I2C_Mem_Read>
}
 8002060:	bf00      	nop
 8002062:	3708      	adds	r7, #8
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	200005f0 	.word	0x200005f0

0800206c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002070:	f002 fab6 	bl	80045e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002074:	f000 f868 	bl	8002148 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002078:	f000 fcea 	bl	8002a50 <MX_GPIO_Init>
  MX_DMA_Init();
 800207c:	f000 fc9a 	bl	80029b4 <MX_DMA_Init>
  MX_CAN1_Init();
 8002080:	f000 f8ce 	bl	8002220 <MX_CAN1_Init>
  MX_CAN2_Init();
 8002084:	f000 f902 	bl	800228c <MX_CAN2_Init>
  MX_SPI1_Init();
 8002088:	f000 f964 	bl	8002354 <MX_SPI1_Init>
  MX_TIM4_Init();
 800208c:	f000 fa40 	bl	8002510 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8002090:	f000 fc10 	bl	80028b4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8002094:	f000 fc64 	bl	8002960 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8002098:	f000 f992 	bl	80023c0 <MX_TIM1_Init>
  MX_TIM8_Init();
 800209c:	f000 fb20 	bl	80026e0 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80020a0:	f000 fc32 	bl	8002908 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80020a4:	f000 fbb8 	bl	8002818 <MX_TIM10_Init>
  MX_I2C3_Init();
 80020a8:	f000 f926 	bl	80022f8 <MX_I2C3_Init>
  MX_TIM5_Init();
 80020ac:	f000 faa8 	bl	8002600 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  can_filter_init();
 80020b0:	f7ff fe2a 	bl	8001d08 <can_filter_init>
  remote_control_init();
 80020b4:	f001 f99e 	bl	80033f4 <remote_control_init>
  usart_Init();
 80020b8:	f7ff fe02 	bl	8001cc0 <usart_Init>
  local_rc_ctrl = get_remote_control_point();
 80020bc:	f001 f9a8 	bl	8003410 <get_remote_control_point>
 80020c0:	4603      	mov	r3, r0
 80020c2:	4a14      	ldr	r2, [pc, #80]	@ (8002114 <main+0xa8>)
 80020c4:	6013      	str	r3, [r2, #0]
  //__HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80020c6:	f007 feb3 	bl	8009e30 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 80020ca:	4a13      	ldr	r2, [pc, #76]	@ (8002118 <main+0xac>)
 80020cc:	2100      	movs	r1, #0
 80020ce:	4813      	ldr	r0, [pc, #76]	@ (800211c <main+0xb0>)
 80020d0:	f007 fef8 	bl	8009ec4 <osThreadNew>
 80020d4:	4603      	mov	r3, r0
 80020d6:	4a12      	ldr	r2, [pc, #72]	@ (8002120 <main+0xb4>)
 80020d8:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 80020da:	4a12      	ldr	r2, [pc, #72]	@ (8002124 <main+0xb8>)
 80020dc:	2100      	movs	r1, #0
 80020de:	4812      	ldr	r0, [pc, #72]	@ (8002128 <main+0xbc>)
 80020e0:	f007 fef0 	bl	8009ec4 <osThreadNew>
 80020e4:	4603      	mov	r3, r0
 80020e6:	4a11      	ldr	r2, [pc, #68]	@ (800212c <main+0xc0>)
 80020e8:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 80020ea:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <main+0xc4>)
 80020ec:	2100      	movs	r1, #0
 80020ee:	4811      	ldr	r0, [pc, #68]	@ (8002134 <main+0xc8>)
 80020f0:	f007 fee8 	bl	8009ec4 <osThreadNew>
 80020f4:	4603      	mov	r3, r0
 80020f6:	4a10      	ldr	r2, [pc, #64]	@ (8002138 <main+0xcc>)
 80020f8:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 80020fa:	4a10      	ldr	r2, [pc, #64]	@ (800213c <main+0xd0>)
 80020fc:	2100      	movs	r1, #0
 80020fe:	4810      	ldr	r0, [pc, #64]	@ (8002140 <main+0xd4>)
 8002100:	f007 fee0 	bl	8009ec4 <osThreadNew>
 8002104:	4603      	mov	r3, r0
 8002106:	4a0f      	ldr	r2, [pc, #60]	@ (8002144 <main+0xd8>)
 8002108:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800210a:	f007 feb5 	bl	8009e78 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800210e:	bf00      	nop
 8002110:	e7fd      	b.n	800210e <main+0xa2>
 8002112:	bf00      	nop
 8002114:	20000ac0 	.word	0x20000ac0
 8002118:	0800cf90 	.word	0x0800cf90
 800211c:	08002c5d 	.word	0x08002c5d
 8002120:	20000ab0 	.word	0x20000ab0
 8002124:	0800cfb4 	.word	0x0800cfb4
 8002128:	08002c71 	.word	0x08002c71
 800212c:	20000ab4 	.word	0x20000ab4
 8002130:	0800cfd8 	.word	0x0800cfd8
 8002134:	08001e55 	.word	0x08001e55
 8002138:	20000ab8 	.word	0x20000ab8
 800213c:	0800cffc 	.word	0x0800cffc
 8002140:	08002e19 	.word	0x08002e19
 8002144:	20000abc 	.word	0x20000abc

08002148 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	@ 0x50
 800214c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800214e:	f107 0320 	add.w	r3, r7, #32
 8002152:	2230      	movs	r2, #48	@ 0x30
 8002154:	2100      	movs	r1, #0
 8002156:	4618      	mov	r0, r3
 8002158:	f00a fdf6 	bl	800cd48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800215c:	f107 030c 	add.w	r3, r7, #12
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	4b29      	ldr	r3, [pc, #164]	@ (8002218 <SystemClock_Config+0xd0>)
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	4a28      	ldr	r2, [pc, #160]	@ (8002218 <SystemClock_Config+0xd0>)
 8002176:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800217a:	6413      	str	r3, [r2, #64]	@ 0x40
 800217c:	4b26      	ldr	r3, [pc, #152]	@ (8002218 <SystemClock_Config+0xd0>)
 800217e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002180:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002184:	60bb      	str	r3, [r7, #8]
 8002186:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	4b23      	ldr	r3, [pc, #140]	@ (800221c <SystemClock_Config+0xd4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a22      	ldr	r2, [pc, #136]	@ (800221c <SystemClock_Config+0xd4>)
 8002192:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002196:	6013      	str	r3, [r2, #0]
 8002198:	4b20      	ldr	r3, [pc, #128]	@ (800221c <SystemClock_Config+0xd4>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021a0:	607b      	str	r3, [r7, #4]
 80021a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021a4:	2301      	movs	r3, #1
 80021a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021a8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80021ac:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021ae:	2302      	movs	r3, #2
 80021b0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021b2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80021b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80021b8:	2306      	movs	r3, #6
 80021ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80021bc:	23a8      	movs	r3, #168	@ 0xa8
 80021be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80021c0:	2302      	movs	r3, #2
 80021c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80021c4:	2304      	movs	r3, #4
 80021c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021c8:	f107 0320 	add.w	r3, r7, #32
 80021cc:	4618      	mov	r0, r3
 80021ce:	f004 fdab 	bl	8006d28 <HAL_RCC_OscConfig>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80021d8:	f000 fe26 	bl	8002e28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021dc:	230f      	movs	r3, #15
 80021de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021e0:	2302      	movs	r3, #2
 80021e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80021e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80021ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80021ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80021f4:	f107 030c 	add.w	r3, r7, #12
 80021f8:	2105      	movs	r1, #5
 80021fa:	4618      	mov	r0, r3
 80021fc:	f005 f80c 	bl	8007218 <HAL_RCC_ClockConfig>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8002206:	f000 fe0f 	bl	8002e28 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800220a:	f005 f8eb 	bl	80073e4 <HAL_RCC_EnableCSS>
}
 800220e:	bf00      	nop
 8002210:	3750      	adds	r7, #80	@ 0x50
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	40023800 	.word	0x40023800
 800221c:	40007000 	.word	0x40007000

08002220 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002224:	4b17      	ldr	r3, [pc, #92]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002226:	4a18      	ldr	r2, [pc, #96]	@ (8002288 <MX_CAN1_Init+0x68>)
 8002228:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 800222a:	4b16      	ldr	r3, [pc, #88]	@ (8002284 <MX_CAN1_Init+0x64>)
 800222c:	2203      	movs	r2, #3
 800222e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002230:	4b14      	ldr	r3, [pc, #80]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002232:	2200      	movs	r2, #0
 8002234:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002236:	4b13      	ldr	r3, [pc, #76]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002238:	2200      	movs	r2, #0
 800223a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 800223c:	4b11      	ldr	r3, [pc, #68]	@ (8002284 <MX_CAN1_Init+0x64>)
 800223e:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8002242:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8002244:	4b0f      	ldr	r3, [pc, #60]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002246:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800224a:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 800224c:	4b0d      	ldr	r3, [pc, #52]	@ (8002284 <MX_CAN1_Init+0x64>)
 800224e:	2200      	movs	r2, #0
 8002250:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002252:	4b0c      	ldr	r3, [pc, #48]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002254:	2200      	movs	r2, #0
 8002256:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002258:	4b0a      	ldr	r3, [pc, #40]	@ (8002284 <MX_CAN1_Init+0x64>)
 800225a:	2200      	movs	r2, #0
 800225c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800225e:	4b09      	ldr	r3, [pc, #36]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002260:	2200      	movs	r2, #0
 8002262:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002264:	4b07      	ldr	r3, [pc, #28]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002266:	2200      	movs	r2, #0
 8002268:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800226a:	4b06      	ldr	r3, [pc, #24]	@ (8002284 <MX_CAN1_Init+0x64>)
 800226c:	2200      	movs	r2, #0
 800226e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002270:	4804      	ldr	r0, [pc, #16]	@ (8002284 <MX_CAN1_Init+0x64>)
 8002272:	f002 fa27 	bl	80046c4 <HAL_CAN_Init>
 8002276:	4603      	mov	r3, r0
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800227c:	f000 fdd4 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002280:	bf00      	nop
 8002282:	bd80      	pop	{r7, pc}
 8002284:	200005a0 	.word	0x200005a0
 8002288:	40006400 	.word	0x40006400

0800228c <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8002290:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <MX_CAN2_Init+0x64>)
 8002292:	4a18      	ldr	r2, [pc, #96]	@ (80022f4 <MX_CAN2_Init+0x68>)
 8002294:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8002296:	4b16      	ldr	r3, [pc, #88]	@ (80022f0 <MX_CAN2_Init+0x64>)
 8002298:	2203      	movs	r2, #3
 800229a:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 800229c:	4b14      	ldr	r3, [pc, #80]	@ (80022f0 <MX_CAN2_Init+0x64>)
 800229e:	2200      	movs	r2, #0
 80022a0:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80022a2:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022aa:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80022ae:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022b2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80022b6:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80022b8:	4b0d      	ldr	r3, [pc, #52]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80022be:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80022c4:	4b0a      	ldr	r3, [pc, #40]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 80022ca:	4b09      	ldr	r3, [pc, #36]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 80022d0:	4b07      	ldr	r3, [pc, #28]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 80022d6:	4b06      	ldr	r3, [pc, #24]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022d8:	2200      	movs	r2, #0
 80022da:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 80022dc:	4804      	ldr	r0, [pc, #16]	@ (80022f0 <MX_CAN2_Init+0x64>)
 80022de:	f002 f9f1 	bl	80046c4 <HAL_CAN_Init>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 80022e8:	f000 fd9e 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 80022ec:	bf00      	nop
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	200005c8 	.word	0x200005c8
 80022f4:	40006800 	.word	0x40006800

080022f8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80022fc:	4b12      	ldr	r3, [pc, #72]	@ (8002348 <MX_I2C3_Init+0x50>)
 80022fe:	4a13      	ldr	r2, [pc, #76]	@ (800234c <MX_I2C3_Init+0x54>)
 8002300:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8002302:	4b11      	ldr	r3, [pc, #68]	@ (8002348 <MX_I2C3_Init+0x50>)
 8002304:	4a12      	ldr	r2, [pc, #72]	@ (8002350 <MX_I2C3_Init+0x58>)
 8002306:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002308:	4b0f      	ldr	r3, [pc, #60]	@ (8002348 <MX_I2C3_Init+0x50>)
 800230a:	2200      	movs	r2, #0
 800230c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800230e:	4b0e      	ldr	r3, [pc, #56]	@ (8002348 <MX_I2C3_Init+0x50>)
 8002310:	2200      	movs	r2, #0
 8002312:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002314:	4b0c      	ldr	r3, [pc, #48]	@ (8002348 <MX_I2C3_Init+0x50>)
 8002316:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800231a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800231c:	4b0a      	ldr	r3, [pc, #40]	@ (8002348 <MX_I2C3_Init+0x50>)
 800231e:	2200      	movs	r2, #0
 8002320:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002322:	4b09      	ldr	r3, [pc, #36]	@ (8002348 <MX_I2C3_Init+0x50>)
 8002324:	2200      	movs	r2, #0
 8002326:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <MX_I2C3_Init+0x50>)
 800232a:	2200      	movs	r2, #0
 800232c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800232e:	4b06      	ldr	r3, [pc, #24]	@ (8002348 <MX_I2C3_Init+0x50>)
 8002330:	2200      	movs	r2, #0
 8002332:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002334:	4804      	ldr	r0, [pc, #16]	@ (8002348 <MX_I2C3_Init+0x50>)
 8002336:	f003 ff09 	bl	800614c <HAL_I2C_Init>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d001      	beq.n	8002344 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8002340:	f000 fd72 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}
 8002348:	200005f0 	.word	0x200005f0
 800234c:	40005c00 	.word	0x40005c00
 8002350:	00061a80 	.word	0x00061a80

08002354 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8002358:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <MX_SPI1_Init+0x64>)
 800235a:	4a18      	ldr	r2, [pc, #96]	@ (80023bc <MX_SPI1_Init+0x68>)
 800235c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800235e:	4b16      	ldr	r3, [pc, #88]	@ (80023b8 <MX_SPI1_Init+0x64>)
 8002360:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002364:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <MX_SPI1_Init+0x64>)
 8002368:	2200      	movs	r2, #0
 800236a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800236c:	4b12      	ldr	r3, [pc, #72]	@ (80023b8 <MX_SPI1_Init+0x64>)
 800236e:	2200      	movs	r2, #0
 8002370:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002372:	4b11      	ldr	r3, [pc, #68]	@ (80023b8 <MX_SPI1_Init+0x64>)
 8002374:	2202      	movs	r2, #2
 8002376:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002378:	4b0f      	ldr	r3, [pc, #60]	@ (80023b8 <MX_SPI1_Init+0x64>)
 800237a:	2201      	movs	r2, #1
 800237c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800237e:	4b0e      	ldr	r3, [pc, #56]	@ (80023b8 <MX_SPI1_Init+0x64>)
 8002380:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002384:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8002386:	4b0c      	ldr	r3, [pc, #48]	@ (80023b8 <MX_SPI1_Init+0x64>)
 8002388:	2238      	movs	r2, #56	@ 0x38
 800238a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800238c:	4b0a      	ldr	r3, [pc, #40]	@ (80023b8 <MX_SPI1_Init+0x64>)
 800238e:	2200      	movs	r2, #0
 8002390:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <MX_SPI1_Init+0x64>)
 8002394:	2200      	movs	r2, #0
 8002396:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002398:	4b07      	ldr	r3, [pc, #28]	@ (80023b8 <MX_SPI1_Init+0x64>)
 800239a:	2200      	movs	r2, #0
 800239c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800239e:	4b06      	ldr	r3, [pc, #24]	@ (80023b8 <MX_SPI1_Init+0x64>)
 80023a0:	220a      	movs	r2, #10
 80023a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80023a4:	4804      	ldr	r0, [pc, #16]	@ (80023b8 <MX_SPI1_Init+0x64>)
 80023a6:	f005 f93e 	bl	8007626 <HAL_SPI_Init>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80023b0:	f000 fd3a 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80023b4:	bf00      	nop
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000644 	.word	0x20000644
 80023bc:	40013000 	.word	0x40013000

080023c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b092      	sub	sp, #72	@ 0x48
 80023c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023c6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]
 80023ce:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80023d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
 80023e0:	615a      	str	r2, [r3, #20]
 80023e2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2220      	movs	r2, #32
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f00a fcac 	bl	800cd48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80023f0:	4b45      	ldr	r3, [pc, #276]	@ (8002508 <MX_TIM1_Init+0x148>)
 80023f2:	4a46      	ldr	r2, [pc, #280]	@ (800250c <MX_TIM1_Init+0x14c>)
 80023f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 80023f6:	4b44      	ldr	r3, [pc, #272]	@ (8002508 <MX_TIM1_Init+0x148>)
 80023f8:	2253      	movs	r2, #83	@ 0x53
 80023fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023fc:	4b42      	ldr	r3, [pc, #264]	@ (8002508 <MX_TIM1_Init+0x148>)
 80023fe:	2200      	movs	r2, #0
 8002400:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8002402:	4b41      	ldr	r3, [pc, #260]	@ (8002508 <MX_TIM1_Init+0x148>)
 8002404:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002408:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800240a:	4b3f      	ldr	r3, [pc, #252]	@ (8002508 <MX_TIM1_Init+0x148>)
 800240c:	2200      	movs	r2, #0
 800240e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002410:	4b3d      	ldr	r3, [pc, #244]	@ (8002508 <MX_TIM1_Init+0x148>)
 8002412:	2200      	movs	r2, #0
 8002414:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002416:	4b3c      	ldr	r3, [pc, #240]	@ (8002508 <MX_TIM1_Init+0x148>)
 8002418:	2200      	movs	r2, #0
 800241a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800241c:	483a      	ldr	r0, [pc, #232]	@ (8002508 <MX_TIM1_Init+0x148>)
 800241e:	f005 fcaf 	bl	8007d80 <HAL_TIM_PWM_Init>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002428:	f000 fcfe 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800242c:	2300      	movs	r3, #0
 800242e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002430:	2300      	movs	r3, #0
 8002432:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002434:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002438:	4619      	mov	r1, r3
 800243a:	4833      	ldr	r0, [pc, #204]	@ (8002508 <MX_TIM1_Init+0x148>)
 800243c:	f006 fac2 	bl	80089c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002440:	4603      	mov	r3, r0
 8002442:	2b00      	cmp	r3, #0
 8002444:	d001      	beq.n	800244a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002446:	f000 fcef 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800244a:	2360      	movs	r3, #96	@ 0x60
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800244e:	2300      	movs	r3, #0
 8002450:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002452:	2300      	movs	r3, #0
 8002454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002456:	2300      	movs	r3, #0
 8002458:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800245a:	2300      	movs	r3, #0
 800245c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800245e:	2300      	movs	r3, #0
 8002460:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002462:	2300      	movs	r3, #0
 8002464:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002466:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800246a:	2200      	movs	r2, #0
 800246c:	4619      	mov	r1, r3
 800246e:	4826      	ldr	r0, [pc, #152]	@ (8002508 <MX_TIM1_Init+0x148>)
 8002470:	f005 fe0e 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 8002474:	4603      	mov	r3, r0
 8002476:	2b00      	cmp	r3, #0
 8002478:	d001      	beq.n	800247e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800247a:	f000 fcd5 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800247e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002482:	2204      	movs	r2, #4
 8002484:	4619      	mov	r1, r3
 8002486:	4820      	ldr	r0, [pc, #128]	@ (8002508 <MX_TIM1_Init+0x148>)
 8002488:	f005 fe02 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002492:	f000 fcc9 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249a:	2208      	movs	r2, #8
 800249c:	4619      	mov	r1, r3
 800249e:	481a      	ldr	r0, [pc, #104]	@ (8002508 <MX_TIM1_Init+0x148>)
 80024a0:	f005 fdf6 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 80024a4:	4603      	mov	r3, r0
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d001      	beq.n	80024ae <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 80024aa:	f000 fcbd 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80024ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024b2:	220c      	movs	r2, #12
 80024b4:	4619      	mov	r1, r3
 80024b6:	4814      	ldr	r0, [pc, #80]	@ (8002508 <MX_TIM1_Init+0x148>)
 80024b8:	f005 fdea 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 80024bc:	4603      	mov	r3, r0
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d001      	beq.n	80024c6 <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80024c2:	f000 fcb1 	bl	8002e28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80024d6:	2300      	movs	r3, #0
 80024d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80024da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80024de:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80024e0:	2300      	movs	r3, #0
 80024e2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80024e4:	1d3b      	adds	r3, r7, #4
 80024e6:	4619      	mov	r1, r3
 80024e8:	4807      	ldr	r0, [pc, #28]	@ (8002508 <MX_TIM1_Init+0x148>)
 80024ea:	f006 fae7 	bl	8008abc <HAL_TIMEx_ConfigBreakDeadTime>
 80024ee:	4603      	mov	r3, r0
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d001      	beq.n	80024f8 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80024f4:	f000 fc98 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80024f8:	4803      	ldr	r0, [pc, #12]	@ (8002508 <MX_TIM1_Init+0x148>)
 80024fa:	f001 fcad 	bl	8003e58 <HAL_TIM_MspPostInit>

}
 80024fe:	bf00      	nop
 8002500:	3748      	adds	r7, #72	@ 0x48
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	2000069c 	.word	0x2000069c
 800250c:	40010000 	.word	0x40010000

08002510 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b08e      	sub	sp, #56	@ 0x38
 8002514:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002516:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800251a:	2200      	movs	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	605a      	str	r2, [r3, #4]
 8002520:	609a      	str	r2, [r3, #8]
 8002522:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002524:	f107 0320 	add.w	r3, r7, #32
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800252e:	1d3b      	adds	r3, r7, #4
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
 800253c:	615a      	str	r2, [r3, #20]
 800253e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002540:	4b2d      	ldr	r3, [pc, #180]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 8002542:	4a2e      	ldr	r2, [pc, #184]	@ (80025fc <MX_TIM4_Init+0xec>)
 8002544:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002546:	4b2c      	ldr	r3, [pc, #176]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 8002548:	2200      	movs	r2, #0
 800254a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800254c:	4b2a      	ldr	r3, [pc, #168]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 800254e:	2200      	movs	r2, #0
 8002550:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8002552:	4b29      	ldr	r3, [pc, #164]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 8002554:	f245 2207 	movw	r2, #20999	@ 0x5207
 8002558:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800255a:	4b27      	ldr	r3, [pc, #156]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002560:	4b25      	ldr	r3, [pc, #148]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 8002562:	2280      	movs	r2, #128	@ 0x80
 8002564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002566:	4824      	ldr	r0, [pc, #144]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 8002568:	f005 fb52 	bl	8007c10 <HAL_TIM_Base_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8002572:	f000 fc59 	bl	8002e28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002576:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800257a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800257c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002580:	4619      	mov	r1, r3
 8002582:	481d      	ldr	r0, [pc, #116]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 8002584:	f005 fe46 	bl	8008214 <HAL_TIM_ConfigClockSource>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800258e:	f000 fc4b 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002592:	4819      	ldr	r0, [pc, #100]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 8002594:	f005 fbf4 	bl	8007d80 <HAL_TIM_PWM_Init>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	d001      	beq.n	80025a2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800259e:	f000 fc43 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80025a2:	2300      	movs	r3, #0
 80025a4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80025a6:	2300      	movs	r3, #0
 80025a8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80025aa:	f107 0320 	add.w	r3, r7, #32
 80025ae:	4619      	mov	r1, r3
 80025b0:	4811      	ldr	r0, [pc, #68]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 80025b2:	f006 fa07 	bl	80089c4 <HAL_TIMEx_MasterConfigSynchronization>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80025bc:	f000 fc34 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80025c0:	2360      	movs	r3, #96	@ 0x60
 80025c2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80025c4:	f642 1303 	movw	r3, #10499	@ 0x2903
 80025c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80025ca:	2300      	movs	r3, #0
 80025cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80025ce:	2300      	movs	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80025d2:	1d3b      	adds	r3, r7, #4
 80025d4:	2208      	movs	r2, #8
 80025d6:	4619      	mov	r1, r3
 80025d8:	4807      	ldr	r0, [pc, #28]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 80025da:	f005 fd59 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 80025de:	4603      	mov	r3, r0
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d001      	beq.n	80025e8 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80025e4:	f000 fc20 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80025e8:	4803      	ldr	r0, [pc, #12]	@ (80025f8 <MX_TIM4_Init+0xe8>)
 80025ea:	f001 fc35 	bl	8003e58 <HAL_TIM_MspPostInit>

}
 80025ee:	bf00      	nop
 80025f0:	3738      	adds	r7, #56	@ 0x38
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}
 80025f6:	bf00      	nop
 80025f8:	200006e4 	.word	0x200006e4
 80025fc:	40000800 	.word	0x40000800

08002600 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b08a      	sub	sp, #40	@ 0x28
 8002604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002606:	f107 0320 	add.w	r3, r7, #32
 800260a:	2200      	movs	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002610:	1d3b      	adds	r3, r7, #4
 8002612:	2200      	movs	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	605a      	str	r2, [r3, #4]
 8002618:	609a      	str	r2, [r3, #8]
 800261a:	60da      	str	r2, [r3, #12]
 800261c:	611a      	str	r2, [r3, #16]
 800261e:	615a      	str	r2, [r3, #20]
 8002620:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002622:	4b2d      	ldr	r3, [pc, #180]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 8002624:	4a2d      	ldr	r2, [pc, #180]	@ (80026dc <MX_TIM5_Init+0xdc>)
 8002626:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8002628:	4b2b      	ldr	r3, [pc, #172]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 800262a:	222a      	movs	r2, #42	@ 0x2a
 800262c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800262e:	4b2a      	ldr	r3, [pc, #168]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 8002630:	2200      	movs	r2, #0
 8002632:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8002634:	4b28      	ldr	r3, [pc, #160]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 8002636:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800263a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800263c:	4b26      	ldr	r3, [pc, #152]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 800263e:	2200      	movs	r2, #0
 8002640:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002642:	4b25      	ldr	r3, [pc, #148]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 8002644:	2200      	movs	r2, #0
 8002646:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8002648:	4823      	ldr	r0, [pc, #140]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 800264a:	f005 fb99 	bl	8007d80 <HAL_TIM_PWM_Init>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d001      	beq.n	8002658 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8002654:	f000 fbe8 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002658:	2300      	movs	r3, #0
 800265a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800265c:	2300      	movs	r3, #0
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002660:	f107 0320 	add.w	r3, r7, #32
 8002664:	4619      	mov	r1, r3
 8002666:	481c      	ldr	r0, [pc, #112]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 8002668:	f006 f9ac 	bl	80089c4 <HAL_TIMEx_MasterConfigSynchronization>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8002672:	f000 fbd9 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002676:	2360      	movs	r3, #96	@ 0x60
 8002678:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800267a:	2300      	movs	r3, #0
 800267c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800267e:	2300      	movs	r3, #0
 8002680:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002686:	1d3b      	adds	r3, r7, #4
 8002688:	2200      	movs	r2, #0
 800268a:	4619      	mov	r1, r3
 800268c:	4812      	ldr	r0, [pc, #72]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 800268e:	f005 fcff 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 8002692:	4603      	mov	r3, r0
 8002694:	2b00      	cmp	r3, #0
 8002696:	d001      	beq.n	800269c <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8002698:	f000 fbc6 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800269c:	1d3b      	adds	r3, r7, #4
 800269e:	2204      	movs	r2, #4
 80026a0:	4619      	mov	r1, r3
 80026a2:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 80026a4:	f005 fcf4 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 80026ae:	f000 fbbb 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	2208      	movs	r2, #8
 80026b6:	4619      	mov	r1, r3
 80026b8:	4807      	ldr	r0, [pc, #28]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 80026ba:	f005 fce9 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80026c4:	f000 fbb0 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80026c8:	4803      	ldr	r0, [pc, #12]	@ (80026d8 <MX_TIM5_Init+0xd8>)
 80026ca:	f001 fbc5 	bl	8003e58 <HAL_TIM_MspPostInit>

}
 80026ce:	bf00      	nop
 80026d0:	3728      	adds	r7, #40	@ 0x28
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	2000072c 	.word	0x2000072c
 80026dc:	40000c00 	.word	0x40000c00

080026e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b092      	sub	sp, #72	@ 0x48
 80026e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80026ea:	2200      	movs	r2, #0
 80026ec:	601a      	str	r2, [r3, #0]
 80026ee:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026f4:	2200      	movs	r2, #0
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	609a      	str	r2, [r3, #8]
 80026fc:	60da      	str	r2, [r3, #12]
 80026fe:	611a      	str	r2, [r3, #16]
 8002700:	615a      	str	r2, [r3, #20]
 8002702:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002704:	1d3b      	adds	r3, r7, #4
 8002706:	2220      	movs	r2, #32
 8002708:	2100      	movs	r1, #0
 800270a:	4618      	mov	r0, r3
 800270c:	f00a fb1c 	bl	800cd48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002710:	4b3f      	ldr	r3, [pc, #252]	@ (8002810 <MX_TIM8_Init+0x130>)
 8002712:	4a40      	ldr	r2, [pc, #256]	@ (8002814 <MX_TIM8_Init+0x134>)
 8002714:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8002716:	4b3e      	ldr	r3, [pc, #248]	@ (8002810 <MX_TIM8_Init+0x130>)
 8002718:	2253      	movs	r2, #83	@ 0x53
 800271a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800271c:	4b3c      	ldr	r3, [pc, #240]	@ (8002810 <MX_TIM8_Init+0x130>)
 800271e:	2200      	movs	r2, #0
 8002720:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8002722:	4b3b      	ldr	r3, [pc, #236]	@ (8002810 <MX_TIM8_Init+0x130>)
 8002724:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8002728:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800272a:	4b39      	ldr	r3, [pc, #228]	@ (8002810 <MX_TIM8_Init+0x130>)
 800272c:	2200      	movs	r2, #0
 800272e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <MX_TIM8_Init+0x130>)
 8002732:	2200      	movs	r2, #0
 8002734:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002736:	4b36      	ldr	r3, [pc, #216]	@ (8002810 <MX_TIM8_Init+0x130>)
 8002738:	2280      	movs	r2, #128	@ 0x80
 800273a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800273c:	4834      	ldr	r0, [pc, #208]	@ (8002810 <MX_TIM8_Init+0x130>)
 800273e:	f005 fb1f 	bl	8007d80 <HAL_TIM_PWM_Init>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8002748:	f000 fb6e 	bl	8002e28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800274c:	2300      	movs	r3, #0
 800274e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002750:	2300      	movs	r3, #0
 8002752:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002754:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002758:	4619      	mov	r1, r3
 800275a:	482d      	ldr	r0, [pc, #180]	@ (8002810 <MX_TIM8_Init+0x130>)
 800275c:	f006 f932 	bl	80089c4 <HAL_TIMEx_MasterConfigSynchronization>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8002766:	f000 fb5f 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800276a:	2360      	movs	r3, #96	@ 0x60
 800276c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800276e:	2300      	movs	r3, #0
 8002770:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002772:	2300      	movs	r3, #0
 8002774:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002776:	2300      	movs	r3, #0
 8002778:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800277a:	2300      	movs	r3, #0
 800277c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800277e:	2300      	movs	r3, #0
 8002780:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002782:	2300      	movs	r3, #0
 8002784:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800278a:	2200      	movs	r2, #0
 800278c:	4619      	mov	r1, r3
 800278e:	4820      	ldr	r0, [pc, #128]	@ (8002810 <MX_TIM8_Init+0x130>)
 8002790:	f005 fc7e 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 8002794:	4603      	mov	r3, r0
 8002796:	2b00      	cmp	r3, #0
 8002798:	d001      	beq.n	800279e <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 800279a:	f000 fb45 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800279e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027a2:	2204      	movs	r2, #4
 80027a4:	4619      	mov	r1, r3
 80027a6:	481a      	ldr	r0, [pc, #104]	@ (8002810 <MX_TIM8_Init+0x130>)
 80027a8:	f005 fc72 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 80027b2:	f000 fb39 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80027b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027ba:	2208      	movs	r2, #8
 80027bc:	4619      	mov	r1, r3
 80027be:	4814      	ldr	r0, [pc, #80]	@ (8002810 <MX_TIM8_Init+0x130>)
 80027c0:	f005 fc66 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d001      	beq.n	80027ce <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80027ca:	f000 fb2d 	bl	8002e28 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027d2:	2300      	movs	r3, #0
 80027d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027d6:	2300      	movs	r3, #0
 80027d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027e8:	2300      	movs	r3, #0
 80027ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80027ec:	1d3b      	adds	r3, r7, #4
 80027ee:	4619      	mov	r1, r3
 80027f0:	4807      	ldr	r0, [pc, #28]	@ (8002810 <MX_TIM8_Init+0x130>)
 80027f2:	f006 f963 	bl	8008abc <HAL_TIMEx_ConfigBreakDeadTime>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80027fc:	f000 fb14 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002800:	4803      	ldr	r0, [pc, #12]	@ (8002810 <MX_TIM8_Init+0x130>)
 8002802:	f001 fb29 	bl	8003e58 <HAL_TIM_MspPostInit>

}
 8002806:	bf00      	nop
 8002808:	3748      	adds	r7, #72	@ 0x48
 800280a:	46bd      	mov	sp, r7
 800280c:	bd80      	pop	{r7, pc}
 800280e:	bf00      	nop
 8002810:	20000774 	.word	0x20000774
 8002814:	40010400 	.word	0x40010400

08002818 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b088      	sub	sp, #32
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800281e:	1d3b      	adds	r3, r7, #4
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
 800282c:	615a      	str	r2, [r3, #20]
 800282e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8002830:	4b1e      	ldr	r3, [pc, #120]	@ (80028ac <MX_TIM10_Init+0x94>)
 8002832:	4a1f      	ldr	r2, [pc, #124]	@ (80028b0 <MX_TIM10_Init+0x98>)
 8002834:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8002836:	4b1d      	ldr	r3, [pc, #116]	@ (80028ac <MX_TIM10_Init+0x94>)
 8002838:	2200      	movs	r2, #0
 800283a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800283c:	4b1b      	ldr	r3, [pc, #108]	@ (80028ac <MX_TIM10_Init+0x94>)
 800283e:	2200      	movs	r2, #0
 8002840:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8002842:	4b1a      	ldr	r3, [pc, #104]	@ (80028ac <MX_TIM10_Init+0x94>)
 8002844:	f241 3287 	movw	r2, #4999	@ 0x1387
 8002848:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800284a:	4b18      	ldr	r3, [pc, #96]	@ (80028ac <MX_TIM10_Init+0x94>)
 800284c:	2200      	movs	r2, #0
 800284e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002850:	4b16      	ldr	r3, [pc, #88]	@ (80028ac <MX_TIM10_Init+0x94>)
 8002852:	2200      	movs	r2, #0
 8002854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8002856:	4815      	ldr	r0, [pc, #84]	@ (80028ac <MX_TIM10_Init+0x94>)
 8002858:	f005 f9da 	bl	8007c10 <HAL_TIM_Base_Init>
 800285c:	4603      	mov	r3, r0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d001      	beq.n	8002866 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8002862:	f000 fae1 	bl	8002e28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8002866:	4811      	ldr	r0, [pc, #68]	@ (80028ac <MX_TIM10_Init+0x94>)
 8002868:	f005 fa8a 	bl	8007d80 <HAL_TIM_PWM_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8002872:	f000 fad9 	bl	8002e28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002876:	2360      	movs	r3, #96	@ 0x60
 8002878:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800287e:	2300      	movs	r3, #0
 8002880:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002882:	2300      	movs	r3, #0
 8002884:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002886:	1d3b      	adds	r3, r7, #4
 8002888:	2200      	movs	r2, #0
 800288a:	4619      	mov	r1, r3
 800288c:	4807      	ldr	r0, [pc, #28]	@ (80028ac <MX_TIM10_Init+0x94>)
 800288e:	f005 fbff 	bl	8008090 <HAL_TIM_PWM_ConfigChannel>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8002898:	f000 fac6 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 800289c:	4803      	ldr	r0, [pc, #12]	@ (80028ac <MX_TIM10_Init+0x94>)
 800289e:	f001 fadb 	bl	8003e58 <HAL_TIM_MspPostInit>

}
 80028a2:	bf00      	nop
 80028a4:	3720      	adds	r7, #32
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	200007bc 	.word	0x200007bc
 80028b0:	40014400 	.word	0x40014400

080028b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80028b8:	4b11      	ldr	r3, [pc, #68]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028ba:	4a12      	ldr	r2, [pc, #72]	@ (8002904 <MX_USART1_UART_Init+0x50>)
 80028bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80028be:	4b10      	ldr	r3, [pc, #64]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80028c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80028c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80028cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80028d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028d4:	2200      	movs	r2, #0
 80028d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80028d8:	4b09      	ldr	r3, [pc, #36]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028da:	220c      	movs	r2, #12
 80028dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028de:	4b08      	ldr	r3, [pc, #32]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80028e4:	4b06      	ldr	r3, [pc, #24]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80028ea:	4805      	ldr	r0, [pc, #20]	@ (8002900 <MX_USART1_UART_Init+0x4c>)
 80028ec:	f006 f938 	bl	8008b60 <HAL_UART_Init>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d001      	beq.n	80028fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80028f6:	f000 fa97 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80028fa:	bf00      	nop
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	20000804 	.word	0x20000804
 8002904:	40011000 	.word	0x40011000

08002908 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002908:	b580      	push	{r7, lr}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800290c:	4b11      	ldr	r3, [pc, #68]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 800290e:	4a12      	ldr	r2, [pc, #72]	@ (8002958 <MX_USART3_UART_Init+0x50>)
 8002910:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8002912:	4b10      	ldr	r3, [pc, #64]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 8002914:	4a11      	ldr	r2, [pc, #68]	@ (800295c <MX_USART3_UART_Init+0x54>)
 8002916:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002918:	4b0e      	ldr	r3, [pc, #56]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 800291a:	2200      	movs	r2, #0
 800291c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800291e:	4b0d      	ldr	r3, [pc, #52]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 8002920:	2200      	movs	r2, #0
 8002922:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8002924:	4b0b      	ldr	r3, [pc, #44]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 8002926:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800292a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800292c:	4b09      	ldr	r3, [pc, #36]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 800292e:	220c      	movs	r2, #12
 8002930:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002932:	4b08      	ldr	r3, [pc, #32]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 8002934:	2200      	movs	r2, #0
 8002936:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002938:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 800293a:	2200      	movs	r2, #0
 800293c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800293e:	4805      	ldr	r0, [pc, #20]	@ (8002954 <MX_USART3_UART_Init+0x4c>)
 8002940:	f006 f90e 	bl	8008b60 <HAL_UART_Init>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d001      	beq.n	800294e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800294a:	f000 fa6d 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	20000848 	.word	0x20000848
 8002958:	40004800 	.word	0x40004800
 800295c:	000186a0 	.word	0x000186a0

08002960 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002964:	4b11      	ldr	r3, [pc, #68]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002966:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <MX_USART6_UART_Init+0x50>)
 8002968:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800296a:	4b10      	ldr	r3, [pc, #64]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 800296c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002970:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002972:	4b0e      	ldr	r3, [pc, #56]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002974:	2200      	movs	r2, #0
 8002976:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002978:	4b0c      	ldr	r3, [pc, #48]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 800297a:	2200      	movs	r2, #0
 800297c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800297e:	4b0b      	ldr	r3, [pc, #44]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002980:	2200      	movs	r2, #0
 8002982:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002984:	4b09      	ldr	r3, [pc, #36]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002986:	220c      	movs	r2, #12
 8002988:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800298a:	4b08      	ldr	r3, [pc, #32]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 800298c:	2200      	movs	r2, #0
 800298e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002992:	2200      	movs	r2, #0
 8002994:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002996:	4805      	ldr	r0, [pc, #20]	@ (80029ac <MX_USART6_UART_Init+0x4c>)
 8002998:	f006 f8e2 	bl	8008b60 <HAL_UART_Init>
 800299c:	4603      	mov	r3, r0
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d001      	beq.n	80029a6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80029a2:	f000 fa41 	bl	8002e28 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80029a6:	bf00      	nop
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	2000088c 	.word	0x2000088c
 80029b0:	40011400 	.word	0x40011400

080029b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80029ba:	2300      	movs	r3, #0
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	4b23      	ldr	r3, [pc, #140]	@ (8002a4c <MX_DMA_Init+0x98>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c2:	4a22      	ldr	r2, [pc, #136]	@ (8002a4c <MX_DMA_Init+0x98>)
 80029c4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80029c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ca:	4b20      	ldr	r3, [pc, #128]	@ (8002a4c <MX_DMA_Init+0x98>)
 80029cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029d2:	607b      	str	r3, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80029d6:	2300      	movs	r3, #0
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	4b1c      	ldr	r3, [pc, #112]	@ (8002a4c <MX_DMA_Init+0x98>)
 80029dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029de:	4a1b      	ldr	r2, [pc, #108]	@ (8002a4c <MX_DMA_Init+0x98>)
 80029e0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80029e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029e6:	4b19      	ldr	r3, [pc, #100]	@ (8002a4c <MX_DMA_Init+0x98>)
 80029e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029ee:	603b      	str	r3, [r7, #0]
 80029f0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80029f2:	2200      	movs	r2, #0
 80029f4:	2105      	movs	r1, #5
 80029f6:	200c      	movs	r0, #12
 80029f8:	f002 fda1 	bl	800553e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80029fc:	200c      	movs	r0, #12
 80029fe:	f002 fdba 	bl	8005576 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8002a02:	2200      	movs	r2, #0
 8002a04:	2105      	movs	r1, #5
 8002a06:	2039      	movs	r0, #57	@ 0x39
 8002a08:	f002 fd99 	bl	800553e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002a0c:	2039      	movs	r0, #57	@ 0x39
 8002a0e:	f002 fdb2 	bl	8005576 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	2105      	movs	r1, #5
 8002a16:	203a      	movs	r0, #58	@ 0x3a
 8002a18:	f002 fd91 	bl	800553e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002a1c:	203a      	movs	r0, #58	@ 0x3a
 8002a1e:	f002 fdaa 	bl	8005576 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8002a22:	2200      	movs	r2, #0
 8002a24:	2105      	movs	r1, #5
 8002a26:	2045      	movs	r0, #69	@ 0x45
 8002a28:	f002 fd89 	bl	800553e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002a2c:	2045      	movs	r0, #69	@ 0x45
 8002a2e:	f002 fda2 	bl	8005576 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8002a32:	2200      	movs	r2, #0
 8002a34:	2105      	movs	r1, #5
 8002a36:	2046      	movs	r0, #70	@ 0x46
 8002a38:	f002 fd81 	bl	800553e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002a3c:	2046      	movs	r0, #70	@ 0x46
 8002a3e:	f002 fd9a 	bl	8005576 <HAL_NVIC_EnableIRQ>

}
 8002a42:	bf00      	nop
 8002a44:	3708      	adds	r7, #8
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023800 	.word	0x40023800

08002a50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b08e      	sub	sp, #56	@ 0x38
 8002a54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	605a      	str	r2, [r3, #4]
 8002a60:	609a      	str	r2, [r3, #8]
 8002a62:	60da      	str	r2, [r3, #12]
 8002a64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a66:	2300      	movs	r3, #0
 8002a68:	623b      	str	r3, [r7, #32]
 8002a6a:	4b77      	ldr	r3, [pc, #476]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a6e:	4a76      	ldr	r2, [pc, #472]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002a70:	f043 0302 	orr.w	r3, r3, #2
 8002a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a76:	4b74      	ldr	r3, [pc, #464]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	623b      	str	r3, [r7, #32]
 8002a80:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	4b70      	ldr	r3, [pc, #448]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	4a6f      	ldr	r2, [pc, #444]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002a8c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a92:	4b6d      	ldr	r3, [pc, #436]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	61bb      	str	r3, [r7, #24]
 8002aa2:	4b69      	ldr	r3, [pc, #420]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	4a68      	ldr	r2, [pc, #416]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002aa8:	f043 0301 	orr.w	r3, r3, #1
 8002aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aae:	4b66      	ldr	r3, [pc, #408]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	61bb      	str	r3, [r7, #24]
 8002ab8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
 8002abe:	4b62      	ldr	r3, [pc, #392]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	4a61      	ldr	r2, [pc, #388]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002ac4:	f043 0308 	orr.w	r3, r3, #8
 8002ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aca:	4b5f      	ldr	r3, [pc, #380]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	617b      	str	r3, [r7, #20]
 8002ad4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	613b      	str	r3, [r7, #16]
 8002ada:	4b5b      	ldr	r3, [pc, #364]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	4a5a      	ldr	r2, [pc, #360]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002ae0:	f043 0304 	orr.w	r3, r3, #4
 8002ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ae6:	4b58      	ldr	r3, [pc, #352]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	613b      	str	r3, [r7, #16]
 8002af0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002af2:	2300      	movs	r3, #0
 8002af4:	60fb      	str	r3, [r7, #12]
 8002af6:	4b54      	ldr	r3, [pc, #336]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	4a53      	ldr	r2, [pc, #332]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002afc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b02:	4b51      	ldr	r3, [pc, #324]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002b0e:	2300      	movs	r3, #0
 8002b10:	60bb      	str	r3, [r7, #8]
 8002b12:	4b4d      	ldr	r3, [pc, #308]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	4a4c      	ldr	r2, [pc, #304]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b1e:	4b4a      	ldr	r3, [pc, #296]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
 8002b2e:	4b46      	ldr	r3, [pc, #280]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	4a45      	ldr	r2, [pc, #276]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b34:	f043 0320 	orr.w	r3, r3, #32
 8002b38:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b3a:	4b43      	ldr	r3, [pc, #268]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b3e:	f003 0320 	and.w	r3, r3, #32
 8002b42:	607b      	str	r3, [r7, #4]
 8002b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	603b      	str	r3, [r7, #0]
 8002b4a:	4b3f      	ldr	r3, [pc, #252]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b4e:	4a3e      	ldr	r2, [pc, #248]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b50:	f043 0310 	orr.w	r3, r3, #16
 8002b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b56:	4b3c      	ldr	r3, [pc, #240]	@ (8002c48 <MX_GPIO_Init+0x1f8>)
 8002b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5a:	f003 0310 	and.w	r3, r3, #16
 8002b5e:	603b      	str	r3, [r7, #0]
 8002b60:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2140      	movs	r1, #64	@ 0x40
 8002b66:	4839      	ldr	r0, [pc, #228]	@ (8002c4c <MX_GPIO_Init+0x1fc>)
 8002b68:	f003 fabe 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	2110      	movs	r1, #16
 8002b70:	4837      	ldr	r0, [pc, #220]	@ (8002c50 <MX_GPIO_Init+0x200>)
 8002b72:	f003 fab9 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8002b76:	2200      	movs	r2, #0
 8002b78:	2101      	movs	r1, #1
 8002b7a:	4836      	ldr	r0, [pc, #216]	@ (8002c54 <MX_GPIO_Init+0x204>)
 8002b7c:	f003 fab4 	bl	80060e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b80:	2340      	movs	r3, #64	@ 0x40
 8002b82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b84:	2301      	movs	r3, #1
 8002b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002b90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b94:	4619      	mov	r1, r3
 8002b96:	482d      	ldr	r0, [pc, #180]	@ (8002c4c <MX_GPIO_Init+0x1fc>)
 8002b98:	f003 f90a 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b9c:	2308      	movs	r3, #8
 8002b9e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ba0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bae:	4619      	mov	r1, r3
 8002bb0:	4826      	ldr	r0, [pc, #152]	@ (8002c4c <MX_GPIO_Init+0x1fc>)
 8002bb2:	f003 f8fd 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4821      	ldr	r0, [pc, #132]	@ (8002c50 <MX_GPIO_Init+0x200>)
 8002bca:	f003 f8f1 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002bce:	2310      	movs	r3, #16
 8002bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002be2:	4619      	mov	r1, r3
 8002be4:	481a      	ldr	r0, [pc, #104]	@ (8002c50 <MX_GPIO_Init+0x200>)
 8002be6:	f003 f8e3 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8002bea:	2330      	movs	r3, #48	@ 0x30
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002bee:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	4816      	ldr	r0, [pc, #88]	@ (8002c58 <MX_GPIO_Init+0x208>)
 8002c00:	f003 f8d6 	bl	8005db0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002c04:	2301      	movs	r3, #1
 8002c06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c10:	2300      	movs	r3, #0
 8002c12:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002c18:	4619      	mov	r1, r3
 8002c1a:	480e      	ldr	r0, [pc, #56]	@ (8002c54 <MX_GPIO_Init+0x204>)
 8002c1c:	f003 f8c8 	bl	8005db0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8002c20:	2200      	movs	r2, #0
 8002c22:	2105      	movs	r1, #5
 8002c24:	2009      	movs	r0, #9
 8002c26:	f002 fc8a 	bl	800553e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002c2a:	2009      	movs	r0, #9
 8002c2c:	f002 fca3 	bl	8005576 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8002c30:	2200      	movs	r2, #0
 8002c32:	2105      	movs	r1, #5
 8002c34:	200a      	movs	r0, #10
 8002c36:	f002 fc82 	bl	800553e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8002c3a:	200a      	movs	r0, #10
 8002c3c:	f002 fc9b 	bl	8005576 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002c40:	bf00      	nop
 8002c42:	3738      	adds	r7, #56	@ 0x38
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40021800 	.word	0x40021800
 8002c50:	40020000 	.word	0x40020000
 8002c54:	40020400 	.word	0x40020400
 8002c58:	40020800 	.word	0x40020800

08002c5c <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

	for(;;) {
		osDelay(5);
 8002c64:	2005      	movs	r0, #5
 8002c66:	f007 f9bf 	bl	8009fe8 <osDelay>
 8002c6a:	e7fb      	b.n	8002c64 <TaskMain+0x8>
 8002c6c:	0000      	movs	r0, r0
	...

08002c70 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b090      	sub	sp, #64	@ 0x40
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
	PWMInit(&htim1, &htim4, &htim5, &htim8);
 8002c78:	4b5f      	ldr	r3, [pc, #380]	@ (8002df8 <TaskChassis+0x188>)
 8002c7a:	4a60      	ldr	r2, [pc, #384]	@ (8002dfc <TaskChassis+0x18c>)
 8002c7c:	4960      	ldr	r1, [pc, #384]	@ (8002e00 <TaskChassis+0x190>)
 8002c7e:	4861      	ldr	r0, [pc, #388]	@ (8002e04 <TaskChassis+0x194>)
 8002c80:	f000 fa78 	bl	8003174 <PWMInit>

	PID_preset_t YPVoltageRPM = {10.0, 0.0, 0.0};
 8002c84:	4b60      	ldr	r3, [pc, #384]	@ (8002e08 <TaskChassis+0x198>)
 8002c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c88:	f04f 0300 	mov.w	r3, #0
 8002c8c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	637b      	str	r3, [r7, #52]	@ 0x34
	PID_preset_t CyawPresetVoltageRPM = {7.0, 0.0, 0.0};
 8002c94:	4b5d      	ldr	r3, [pc, #372]	@ (8002e0c <TaskChassis+0x19c>)
 8002c96:	623b      	str	r3, [r7, #32]
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c9e:	f04f 0300 	mov.w	r3, #0
 8002ca2:	62bb      	str	r3, [r7, #40]	@ 0x28
	PID_preset_t yawPresetVoltageRPM = {18.0, 0.0, 0.0};
 8002ca4:	4b5a      	ldr	r3, [pc, #360]	@ (8002e10 <TaskChassis+0x1a0>)
 8002ca6:	617b      	str	r3, [r7, #20]
 8002ca8:	f04f 0300 	mov.w	r3, #0
 8002cac:	61bb      	str	r3, [r7, #24]
 8002cae:	f04f 0300 	mov.w	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
	PID_preset_t pitchBoi = {20.0, 0.0, 0.0};
 8002cb4:	4b57      	ldr	r3, [pc, #348]	@ (8002e14 <TaskChassis+0x1a4>)
 8002cb6:	60bb      	str	r3, [r7, #8]
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	f04f 0300 	mov.w	r3, #0
 8002cc2:	613b      	str	r3, [r7, #16]

	int16_t returnScaler = 2;
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    	*/
    	// usart_printf("Beans %d\r\n", getMotorRPM(Bus1, M2006, 5));
    	// TURRET PITCH TOP = 6800
    	// TURRET PITCH BOTTOM = 5500
    	// DELTA PITCH = 1300
    	uint16_t currentPos = ((1.4*(getRCchannel(3)))+6150);
 8002cc8:	2003      	movs	r0, #3
 8002cca:	f000 fd57 	bl	800377c <getRCchannel>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fbd7 	bl	8000484 <__aeabi_i2d>
 8002cd6:	a344      	add	r3, pc, #272	@ (adr r3, 8002de8 <TaskChassis+0x178>)
 8002cd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cdc:	f7fd fc3c 	bl	8000558 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	a341      	add	r3, pc, #260	@ (adr r3, 8002df0 <TaskChassis+0x180>)
 8002cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cee:	f7fd fa7d 	bl	80001ec <__adddf3>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd fe3f 	bl	800097c <__aeabi_d2uiz>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    	setMotorPosition(Bus1, GM6020, 7, currentPos, pitchBoi);
 8002d02:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	@ 0x3c
 8002d06:	edd7 6a02 	vldr	s13, [r7, #8]
 8002d0a:	ed97 7a03 	vldr	s14, [r7, #12]
 8002d0e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002d12:	eeb0 0a66 	vmov.f32	s0, s13
 8002d16:	eef0 0a47 	vmov.f32	s1, s14
 8002d1a:	eeb0 1a67 	vmov.f32	s2, s15
 8002d1e:	2207      	movs	r2, #7
 8002d20:	2103      	movs	r1, #3
 8002d22:	2001      	movs	r0, #1
 8002d24:	f7fe ff91 	bl	8001c4a <setMotorPosition>

        uint16_t speed = 9000;
 8002d28:	f242 3328 	movw	r3, #9000	@ 0x2328
 8002d2c:	877b      	strh	r3, [r7, #58]	@ 0x3a


        if (getRCswitch(1) == 3) {
 8002d2e:	2001      	movs	r0, #1
 8002d30:	f000 fd38 	bl	80037a4 <getRCswitch>
 8002d34:	4603      	mov	r3, r0
 8002d36:	2b03      	cmp	r3, #3
 8002d38:	d128      	bne.n	8002d8c <TaskChassis+0x11c>
            setMotorRPM(Bus1, M3508, 1, -1*speed, yawPresetVoltageRPM);
 8002d3a:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8002d3c:	425b      	negs	r3, r3
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	b21b      	sxth	r3, r3
 8002d42:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d46:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d4a:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d4e:	eeb0 0a66 	vmov.f32	s0, s13
 8002d52:	eef0 0a47 	vmov.f32	s1, s14
 8002d56:	eeb0 1a67 	vmov.f32	s2, s15
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	2101      	movs	r1, #1
 8002d5e:	2001      	movs	r0, #1
 8002d60:	f7fe ff38 	bl	8001bd4 <setMotorRPM>
            setMotorRPM(Bus1, M3508, 2, speed, yawPresetVoltageRPM);
 8002d64:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	@ 0x3a
 8002d68:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d6c:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d70:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d74:	eeb0 0a66 	vmov.f32	s0, s13
 8002d78:	eef0 0a47 	vmov.f32	s1, s14
 8002d7c:	eeb0 1a67 	vmov.f32	s2, s15
 8002d80:	2202      	movs	r2, #2
 8002d82:	2101      	movs	r1, #1
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7fe ff25 	bl	8001bd4 <setMotorRPM>
 8002d8a:	e023      	b.n	8002dd4 <TaskChassis+0x164>
        } else {
        	setMotorRPM(Bus1, M3508, 1, 0, yawPresetVoltageRPM);
 8002d8c:	edd7 6a05 	vldr	s13, [r7, #20]
 8002d90:	ed97 7a06 	vldr	s14, [r7, #24]
 8002d94:	edd7 7a07 	vldr	s15, [r7, #28]
 8002d98:	eeb0 0a66 	vmov.f32	s0, s13
 8002d9c:	eef0 0a47 	vmov.f32	s1, s14
 8002da0:	eeb0 1a67 	vmov.f32	s2, s15
 8002da4:	2300      	movs	r3, #0
 8002da6:	2201      	movs	r2, #1
 8002da8:	2101      	movs	r1, #1
 8002daa:	2001      	movs	r0, #1
 8002dac:	f7fe ff12 	bl	8001bd4 <setMotorRPM>
        	setMotorRPM(Bus1, M3508, 2, 0,yawPresetVoltageRPM);
 8002db0:	edd7 6a05 	vldr	s13, [r7, #20]
 8002db4:	ed97 7a06 	vldr	s14, [r7, #24]
 8002db8:	edd7 7a07 	vldr	s15, [r7, #28]
 8002dbc:	eeb0 0a66 	vmov.f32	s0, s13
 8002dc0:	eef0 0a47 	vmov.f32	s1, s14
 8002dc4:	eeb0 1a67 	vmov.f32	s2, s15
 8002dc8:	2300      	movs	r3, #0
 8002dca:	2202      	movs	r2, #2
 8002dcc:	2101      	movs	r1, #1
 8002dce:	2001      	movs	r0, #1
 8002dd0:	f7fe ff00 	bl	8001bd4 <setMotorRPM>
        }

		PWMTimerStarter();
 8002dd4:	f000 fa02 	bl	80031dc <PWMTimerStarter>
		RCkeysRefresh();
 8002dd8:	f000 fcf8 	bl	80037cc <RCkeysRefresh>
        osDelay(10);
 8002ddc:	200a      	movs	r0, #10
 8002dde:	f007 f903 	bl	8009fe8 <osDelay>
    for(;;) {
 8002de2:	e771      	b.n	8002cc8 <TaskChassis+0x58>
 8002de4:	f3af 8000 	nop.w
 8002de8:	66666666 	.word	0x66666666
 8002dec:	3ff66666 	.word	0x3ff66666
 8002df0:	00000000 	.word	0x00000000
 8002df4:	40b80600 	.word	0x40b80600
 8002df8:	20000774 	.word	0x20000774
 8002dfc:	2000072c 	.word	0x2000072c
 8002e00:	200006e4 	.word	0x200006e4
 8002e04:	2000069c 	.word	0x2000069c
 8002e08:	41200000 	.word	0x41200000
 8002e0c:	40e00000 	.word	0x40e00000
 8002e10:	41900000 	.word	0x41900000
 8002e14:	41a00000 	.word	0x41a00000

08002e18 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
	// JoulesBuffer = 60;
  /* Infinite loop */
	for(;;)
	{
		osDelay(5);
 8002e20:	2005      	movs	r0, #5
 8002e22:	f007 f8e1 	bl	8009fe8 <osDelay>
 8002e26:	e7fb      	b.n	8002e20 <TaskTurret+0x8>

08002e28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002e2c:	b672      	cpsid	i
}
 8002e2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002e30:	bf00      	nop
 8002e32:	e7fd      	b.n	8002e30 <Error_Handler+0x8>

08002e34 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b087      	sub	sp, #28
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6178      	str	r0, [r7, #20]
 8002e3c:	460b      	mov	r3, r1
 8002e3e:	60fa      	str	r2, [r7, #12]
 8002e40:	ed87 0a02 	vstr	s0, [r7, #8]
 8002e44:	edc7 0a01 	vstr	s1, [r7, #4]
 8002e48:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d042      	beq.n	8002ed6 <PID_init+0xa2>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d03f      	beq.n	8002ed6 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	7cfa      	ldrb	r2, [r7, #19]
 8002e5a:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	3304      	adds	r3, #4
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	3308      	adds	r3, #8
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 8002e7e:	697b      	ldr	r3, [r7, #20]
 8002e80:	687a      	ldr	r2, [r7, #4]
 8002e82:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	f04f 0200 	mov.w	r2, #0
 8002e8a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e94:	697b      	ldr	r3, [r7, #20]
 8002e96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	f04f 0200 	mov.w	r2, #0
 8002ea2:	621a      	str	r2, [r3, #32]
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	6a1a      	ldr	r2, [r3, #32]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	629a      	str	r2, [r3, #40]	@ 0x28
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002eb8:	697b      	ldr	r3, [r7, #20]
 8002eba:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ed4:	e000      	b.n	8002ed8 <PID_init+0xa4>
        return;
 8002ed6:	bf00      	nop
}
 8002ed8:	371c      	adds	r7, #28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b085      	sub	sp, #20
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	60f8      	str	r0, [r7, #12]
 8002eea:	ed87 0a02 	vstr	s0, [r7, #8]
 8002eee:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d102      	bne.n	8002efe <PID_calc+0x1c>
    {
        return 0.0f;
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e130      	b.n	8003160 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8002f1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8002f1e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 8095 	bne.w	8003060 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	ed93 7a01 	vldr	s14, [r3, #4]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002f42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	edd3 6a02 	vldr	s13, [r3, #8]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8002f5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8002f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	ed93 7a03 	vldr	s14, [r3, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8002f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fb4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fbc:	dd04      	ble.n	8002fc8 <PID_calc+0xe6>
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	695a      	ldr	r2, [r3, #20]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	629a      	str	r2, [r3, #40]	@ 0x28
 8002fc6:	e014      	b.n	8002ff2 <PID_calc+0x110>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fd4:	eef1 7a67 	vneg.f32	s15, s15
 8002fd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002fdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fe0:	d507      	bpl.n	8002ff2 <PID_calc+0x110>
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	edd3 7a05 	vldr	s15, [r3, #20]
 8002fe8:	eef1 7a67 	vneg.f32	s15, s15
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8002ffe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003008:	ee77 7a27 	vadd.f32	s15, s14, s15
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	ed93 7a08 	vldr	s14, [r3, #32]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	edd3 7a04 	vldr	s15, [r3, #16]
 800301e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003022:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003026:	dd04      	ble.n	8003032 <PID_calc+0x150>
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	691a      	ldr	r2, [r3, #16]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	621a      	str	r2, [r3, #32]
 8003030:	e094      	b.n	800315c <PID_calc+0x27a>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	ed93 7a08 	vldr	s14, [r3, #32]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	edd3 7a04 	vldr	s15, [r3, #16]
 800303e:	eef1 7a67 	vneg.f32	s15, s15
 8003042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800304a:	f140 8087 	bpl.w	800315c <PID_calc+0x27a>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	edd3 7a04 	vldr	s15, [r3, #16]
 8003054:	eef1 7a67 	vneg.f32	s15, s15
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	edc3 7a08 	vstr	s15, [r3, #32]
 800305e:	e07d      	b.n	800315c <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d179      	bne.n	800315c <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	ed93 7a01 	vldr	s14, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 800307a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800307e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	ed93 7a02 	vldr	s14, [r3, #8]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80030ba:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80030be:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 80030c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80030de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	ed93 7a08 	vldr	s14, [r3, #32]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 80030fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8003104:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003108:	ee77 7a27 	vadd.f32	s15, s14, s15
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	ed93 7a08 	vldr	s14, [r3, #32]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	edd3 7a04 	vldr	s15, [r3, #16]
 800311e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003126:	dd04      	ble.n	8003132 <PID_calc+0x250>
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	691a      	ldr	r2, [r3, #16]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	621a      	str	r2, [r3, #32]
 8003130:	e014      	b.n	800315c <PID_calc+0x27a>
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	ed93 7a08 	vldr	s14, [r3, #32]
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	edd3 7a04 	vldr	s15, [r3, #16]
 800313e:	eef1 7a67 	vneg.f32	s15, s15
 8003142:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003146:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800314a:	d507      	bpl.n	800315c <PID_calc+0x27a>
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	edd3 7a04 	vldr	s15, [r3, #16]
 8003152:	eef1 7a67 	vneg.f32	s15, s15
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6a1b      	ldr	r3, [r3, #32]
}
 8003160:	ee07 3a90 	vmov	s15, r3
 8003164:	eeb0 0a67 	vmov.f32	s0, s15
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
	...

08003174 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	60f8      	str	r0, [r7, #12]
 800317c:	60b9      	str	r1, [r7, #8]
 800317e:	607a      	str	r2, [r7, #4]
 8003180:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8003182:	4a12      	ldr	r2, [pc, #72]	@ (80031cc <PWMInit+0x58>)
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8003188:	4a11      	ldr	r2, [pc, #68]	@ (80031d0 <PWMInit+0x5c>)
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 800318e:	4a11      	ldr	r2, [pc, #68]	@ (80031d4 <PWMInit+0x60>)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8003194:	4a10      	ldr	r2, [pc, #64]	@ (80031d8 <PWMInit+0x64>)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 800319a:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <PWMInit+0x58>)
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4618      	mov	r0, r3
 80031a0:	f004 fd86 	bl	8007cb0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 80031a4:	4b0a      	ldr	r3, [pc, #40]	@ (80031d0 <PWMInit+0x5c>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f004 fd81 	bl	8007cb0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 80031ae:	4b09      	ldr	r3, [pc, #36]	@ (80031d4 <PWMInit+0x60>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f004 fd7c 	bl	8007cb0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 80031b8:	4b07      	ldr	r3, [pc, #28]	@ (80031d8 <PWMInit+0x64>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f004 fd77 	bl	8007cb0 <HAL_TIM_Base_Start>
}
 80031c2:	bf00      	nop
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	20000ac4 	.word	0x20000ac4
 80031d0:	20000ac8 	.word	0x20000ac8
 80031d4:	20000acc 	.word	0x20000acc
 80031d8:	20000ad0 	.word	0x20000ad0

080031dc <PWMTimerStarter>:
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}

void PWMTimerStarter() {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b082      	sub	sp, #8
 80031e0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 80031e2:	2300      	movs	r3, #0
 80031e4:	607b      	str	r3, [r7, #4]
 80031e6:	e0f1      	b.n	80033cc <PWMTimerStarter+0x1f0>
		switch (i) {
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2b0a      	cmp	r3, #10
 80031ec:	f200 80eb 	bhi.w	80033c6 <PWMTimerStarter+0x1ea>
 80031f0:	a201      	add	r2, pc, #4	@ (adr r2, 80031f8 <PWMTimerStarter+0x1c>)
 80031f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f6:	bf00      	nop
 80031f8:	08003225 	.word	0x08003225
 80031fc:	0800324b 	.word	0x0800324b
 8003200:	08003271 	.word	0x08003271
 8003204:	08003297 	.word	0x08003297
 8003208:	080032bd 	.word	0x080032bd
 800320c:	080032e3 	.word	0x080032e3
 8003210:	08003309 	.word	0x08003309
 8003214:	0800332f 	.word	0x0800332f
 8003218:	08003355 	.word	0x08003355
 800321c:	0800337b 	.word	0x0800337b
 8003220:	080033a1 	.word	0x080033a1
		case 0:
			if (whichPWMisOn[0] == 1) {
 8003224:	4b6e      	ldr	r3, [pc, #440]	@ (80033e0 <PWMTimerStarter+0x204>)
 8003226:	f993 3000 	ldrsb.w	r3, [r3]
 800322a:	2b01      	cmp	r3, #1
 800322c:	d106      	bne.n	800323c <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800322e:	4b6d      	ldr	r3, [pc, #436]	@ (80033e4 <PWMTimerStarter+0x208>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2100      	movs	r1, #0
 8003234:	4618      	mov	r0, r3
 8003236:	f004 fdf3 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 800323a:	e0c4      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 800323c:	4b69      	ldr	r3, [pc, #420]	@ (80033e4 <PWMTimerStarter+0x208>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2100      	movs	r1, #0
 8003242:	4618      	mov	r0, r3
 8003244:	f004 feb4 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 8003248:	e0bd      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 800324a:	4b65      	ldr	r3, [pc, #404]	@ (80033e0 <PWMTimerStarter+0x204>)
 800324c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8003250:	2b01      	cmp	r3, #1
 8003252:	d106      	bne.n	8003262 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8003254:	4b63      	ldr	r3, [pc, #396]	@ (80033e4 <PWMTimerStarter+0x208>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2104      	movs	r1, #4
 800325a:	4618      	mov	r0, r3
 800325c:	f004 fde0 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8003260:	e0b1      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8003262:	4b60      	ldr	r3, [pc, #384]	@ (80033e4 <PWMTimerStarter+0x208>)
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2104      	movs	r1, #4
 8003268:	4618      	mov	r0, r3
 800326a:	f004 fea1 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 800326e:	e0aa      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8003270:	4b5b      	ldr	r3, [pc, #364]	@ (80033e0 <PWMTimerStarter+0x204>)
 8003272:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8003276:	2b01      	cmp	r3, #1
 8003278:	d106      	bne.n	8003288 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 800327a:	4b5a      	ldr	r3, [pc, #360]	@ (80033e4 <PWMTimerStarter+0x208>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2108      	movs	r1, #8
 8003280:	4618      	mov	r0, r3
 8003282:	f004 fdcd 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8003286:	e09e      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8003288:	4b56      	ldr	r3, [pc, #344]	@ (80033e4 <PWMTimerStarter+0x208>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2108      	movs	r1, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f004 fe8e 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 8003294:	e097      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8003296:	4b52      	ldr	r3, [pc, #328]	@ (80033e0 <PWMTimerStarter+0x204>)
 8003298:	f993 3003 	ldrsb.w	r3, [r3, #3]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d106      	bne.n	80032ae <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80032a0:	4b50      	ldr	r3, [pc, #320]	@ (80033e4 <PWMTimerStarter+0x208>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	210c      	movs	r1, #12
 80032a6:	4618      	mov	r0, r3
 80032a8:	f004 fdba 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80032ac:	e08b      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80032ae:	4b4d      	ldr	r3, [pc, #308]	@ (80033e4 <PWMTimerStarter+0x208>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	210c      	movs	r1, #12
 80032b4:	4618      	mov	r0, r3
 80032b6:	f004 fe7b 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 80032ba:	e084      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 80032bc:	4b48      	ldr	r3, [pc, #288]	@ (80033e0 <PWMTimerStarter+0x204>)
 80032be:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d106      	bne.n	80032d4 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 80032c6:	4b48      	ldr	r3, [pc, #288]	@ (80033e8 <PWMTimerStarter+0x20c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f004 fda7 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 80032d2:	e078      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 80032d4:	4b44      	ldr	r3, [pc, #272]	@ (80033e8 <PWMTimerStarter+0x20c>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f004 fe68 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 80032e0:	e071      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 80032e2:	4b3f      	ldr	r3, [pc, #252]	@ (80033e0 <PWMTimerStarter+0x204>)
 80032e4:	f993 3005 	ldrsb.w	r3, [r3, #5]
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d106      	bne.n	80032fa <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 80032ec:	4b3e      	ldr	r3, [pc, #248]	@ (80033e8 <PWMTimerStarter+0x20c>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2104      	movs	r1, #4
 80032f2:	4618      	mov	r0, r3
 80032f4:	f004 fd94 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 80032f8:	e065      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 80032fa:	4b3b      	ldr	r3, [pc, #236]	@ (80033e8 <PWMTimerStarter+0x20c>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	2104      	movs	r1, #4
 8003300:	4618      	mov	r0, r3
 8003302:	f004 fe55 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 8003306:	e05e      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8003308:	4b35      	ldr	r3, [pc, #212]	@ (80033e0 <PWMTimerStarter+0x204>)
 800330a:	f993 3006 	ldrsb.w	r3, [r3, #6]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d106      	bne.n	8003320 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8003312:	4b35      	ldr	r3, [pc, #212]	@ (80033e8 <PWMTimerStarter+0x20c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2108      	movs	r1, #8
 8003318:	4618      	mov	r0, r3
 800331a:	f004 fd81 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 800331e:	e052      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8003320:	4b31      	ldr	r3, [pc, #196]	@ (80033e8 <PWMTimerStarter+0x20c>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2108      	movs	r1, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fe42 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 800332c:	e04b      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 800332e:	4b2c      	ldr	r3, [pc, #176]	@ (80033e0 <PWMTimerStarter+0x204>)
 8003330:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d106      	bne.n	8003346 <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8003338:	4b2c      	ldr	r3, [pc, #176]	@ (80033ec <PWMTimerStarter+0x210>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2100      	movs	r1, #0
 800333e:	4618      	mov	r0, r3
 8003340:	f004 fd6e 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8003344:	e03f      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8003346:	4b29      	ldr	r3, [pc, #164]	@ (80033ec <PWMTimerStarter+0x210>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	2100      	movs	r1, #0
 800334c:	4618      	mov	r0, r3
 800334e:	f004 fe2f 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 8003352:	e038      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8003354:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <PWMTimerStarter+0x204>)
 8003356:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d106      	bne.n	800336c <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 800335e:	4b23      	ldr	r3, [pc, #140]	@ (80033ec <PWMTimerStarter+0x210>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2104      	movs	r1, #4
 8003364:	4618      	mov	r0, r3
 8003366:	f004 fd5b 	bl	8007e20 <HAL_TIM_PWM_Start>

			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
				// usart_printf("beanis\r\n");
			}
			break;
 800336a:	e02c      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 800336c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ec <PWMTimerStarter+0x210>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2104      	movs	r1, #4
 8003372:	4618      	mov	r0, r3
 8003374:	f004 fe1c 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 8003378:	e025      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 800337a:	4b19      	ldr	r3, [pc, #100]	@ (80033e0 <PWMTimerStarter+0x204>)
 800337c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d106      	bne.n	8003392 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8003384:	4b19      	ldr	r3, [pc, #100]	@ (80033ec <PWMTimerStarter+0x210>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2108      	movs	r1, #8
 800338a:	4618      	mov	r0, r3
 800338c:	f004 fd48 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8003390:	e019      	b.n	80033c6 <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8003392:	4b16      	ldr	r3, [pc, #88]	@ (80033ec <PWMTimerStarter+0x210>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2108      	movs	r1, #8
 8003398:	4618      	mov	r0, r3
 800339a:	f004 fe09 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 800339e:	e012      	b.n	80033c6 <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 80033a0:	4b0f      	ldr	r3, [pc, #60]	@ (80033e0 <PWMTimerStarter+0x204>)
 80033a2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80033a6:	2b01      	cmp	r3, #1
 80033a8:	d106      	bne.n	80033b8 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 80033aa:	4b11      	ldr	r3, [pc, #68]	@ (80033f0 <PWMTimerStarter+0x214>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2108      	movs	r1, #8
 80033b0:	4618      	mov	r0, r3
 80033b2:	f004 fd35 	bl	8007e20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 80033b6:	e005      	b.n	80033c4 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 80033b8:	4b0d      	ldr	r3, [pc, #52]	@ (80033f0 <PWMTimerStarter+0x214>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	2108      	movs	r1, #8
 80033be:	4618      	mov	r0, r3
 80033c0:	f004 fdf6 	bl	8007fb0 <HAL_TIM_PWM_Stop>
			break;
 80033c4:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	3301      	adds	r3, #1
 80033ca:	607b      	str	r3, [r7, #4]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b0a      	cmp	r3, #10
 80033d0:	f77f af0a 	ble.w	80031e8 <PWMTimerStarter+0xc>
		}
	}
}
 80033d4:	bf00      	nop
 80033d6:	bf00      	nop
 80033d8:	3708      	adds	r7, #8
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000ad4 	.word	0x20000ad4
 80033e4:	20000ac4 	.word	0x20000ac4
 80033e8:	20000ad0 	.word	0x20000ad0
 80033ec:	20000acc 	.word	0x20000acc
 80033f0:	20000ac8 	.word	0x20000ac8

080033f4 <remote_control_init>:
/**
  * @brief          remote control init
  * @param[in]      none
  * @retval         none
  */
void remote_control_init(void) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0
    RC_init(sbus_rx_buf[0], sbus_rx_buf[1], SBUS_RX_BUF_NUM);
 80033f8:	2224      	movs	r2, #36	@ 0x24
 80033fa:	4903      	ldr	r1, [pc, #12]	@ (8003408 <remote_control_init+0x14>)
 80033fc:	4803      	ldr	r0, [pc, #12]	@ (800340c <remote_control_init+0x18>)
 80033fe:	f7fe fccd 	bl	8001d9c <RC_init>
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	20000b1c 	.word	0x20000b1c
 800340c:	20000af8 	.word	0x20000af8

08003410 <get_remote_control_point>:
/**
  * @brief          get remote control data point
  * @param[in]      none
  * @retval         remote control data point
  */
const RC_ctrl_t *get_remote_control_point(void) {
 8003410:	b480      	push	{r7}
 8003412:	af00      	add	r7, sp, #0
    return &rc_ctrl;
 8003414:	4b02      	ldr	r3, [pc, #8]	@ (8003420 <get_remote_control_point+0x10>)
}
 8003416:	4618      	mov	r0, r3
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	20000ae0 	.word	0x20000ae0

08003424 <USART3_IRQHandler>:

void USART3_IRQHandler(void) {
 8003424:	b580      	push	{r7, lr}
 8003426:	b082      	sub	sp, #8
 8003428:	af00      	add	r7, sp, #0
    if(huart3.Instance->SR & UART_FLAG_RXNE) {
 800342a:	4b44      	ldr	r3, [pc, #272]	@ (800353c <USART3_IRQHandler+0x118>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00b      	beq.n	8003450 <USART3_IRQHandler+0x2c>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 8003438:	2300      	movs	r3, #0
 800343a:	607b      	str	r3, [r7, #4]
 800343c:	4b3f      	ldr	r3, [pc, #252]	@ (800353c <USART3_IRQHandler+0x118>)
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	607b      	str	r3, [r7, #4]
 8003444:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <USART3_IRQHandler+0x118>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	607b      	str	r3, [r7, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
            {
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
            }
        }
    }
}
 800344e:	e070      	b.n	8003532 <USART3_IRQHandler+0x10e>
    else if(USART3->SR & UART_FLAG_IDLE) {
 8003450:	4b3b      	ldr	r3, [pc, #236]	@ (8003540 <USART3_IRQHandler+0x11c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0310 	and.w	r3, r3, #16
 8003458:	2b00      	cmp	r3, #0
 800345a:	d06a      	beq.n	8003532 <USART3_IRQHandler+0x10e>
        __HAL_UART_CLEAR_PEFLAG(&huart3);
 800345c:	2300      	movs	r3, #0
 800345e:	603b      	str	r3, [r7, #0]
 8003460:	4b36      	ldr	r3, [pc, #216]	@ (800353c <USART3_IRQHandler+0x118>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	603b      	str	r3, [r7, #0]
 8003468:	4b34      	ldr	r3, [pc, #208]	@ (800353c <USART3_IRQHandler+0x118>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	603b      	str	r3, [r7, #0]
 8003470:	683b      	ldr	r3, [r7, #0]
        if ((hdma_usart3_rx.Instance->CR & DMA_SxCR_CT) == RESET) {
 8003472:	4b34      	ldr	r3, [pc, #208]	@ (8003544 <USART3_IRQHandler+0x120>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d12d      	bne.n	80034dc <USART3_IRQHandler+0xb8>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 8003480:	4b30      	ldr	r3, [pc, #192]	@ (8003544 <USART3_IRQHandler+0x120>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	4b2f      	ldr	r3, [pc, #188]	@ (8003544 <USART3_IRQHandler+0x120>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f022 0201 	bic.w	r2, r2, #1
 800348e:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 8003490:	4b2c      	ldr	r3, [pc, #176]	@ (8003544 <USART3_IRQHandler+0x120>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	b29b      	uxth	r3, r3
 8003498:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 800349c:	b29a      	uxth	r2, r3
 800349e:	4b2a      	ldr	r3, [pc, #168]	@ (8003548 <USART3_IRQHandler+0x124>)
 80034a0:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80034a2:	4b28      	ldr	r3, [pc, #160]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	2224      	movs	r2, #36	@ 0x24
 80034a8:	605a      	str	r2, [r3, #4]
            hdma_usart3_rx.Instance->CR |= DMA_SxCR_CT;
 80034aa:	4b26      	ldr	r3, [pc, #152]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	4b24      	ldr	r3, [pc, #144]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80034b8:	601a      	str	r2, [r3, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 80034ba:	4b22      	ldr	r3, [pc, #136]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	4b20      	ldr	r3, [pc, #128]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f042 0201 	orr.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH) {
 80034ca:	4b1f      	ldr	r3, [pc, #124]	@ (8003548 <USART3_IRQHandler+0x124>)
 80034cc:	881b      	ldrh	r3, [r3, #0]
 80034ce:	2b12      	cmp	r3, #18
 80034d0:	d12f      	bne.n	8003532 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[0], &rc_ctrl);
 80034d2:	491e      	ldr	r1, [pc, #120]	@ (800354c <USART3_IRQHandler+0x128>)
 80034d4:	481e      	ldr	r0, [pc, #120]	@ (8003550 <USART3_IRQHandler+0x12c>)
 80034d6:	f000 f841 	bl	800355c <sbus_to_rc>
}
 80034da:	e02a      	b.n	8003532 <USART3_IRQHandler+0x10e>
            __HAL_DMA_DISABLE(&hdma_usart3_rx);
 80034dc:	4b19      	ldr	r3, [pc, #100]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	4b18      	ldr	r3, [pc, #96]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0201 	bic.w	r2, r2, #1
 80034ea:	601a      	str	r2, [r3, #0]
            this_time_rx_len = SBUS_RX_BUF_NUM - hdma_usart3_rx.Instance->NDTR;
 80034ec:	4b15      	ldr	r3, [pc, #84]	@ (8003544 <USART3_IRQHandler+0x120>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	f1c3 0324 	rsb	r3, r3, #36	@ 0x24
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	4b13      	ldr	r3, [pc, #76]	@ (8003548 <USART3_IRQHandler+0x124>)
 80034fc:	801a      	strh	r2, [r3, #0]
            hdma_usart3_rx.Instance->NDTR = SBUS_RX_BUF_NUM;
 80034fe:	4b11      	ldr	r3, [pc, #68]	@ (8003544 <USART3_IRQHandler+0x120>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2224      	movs	r2, #36	@ 0x24
 8003504:	605a      	str	r2, [r3, #4]
            DMA1_Stream1->CR &= ~(DMA_SxCR_CT);
 8003506:	4b13      	ldr	r3, [pc, #76]	@ (8003554 <USART3_IRQHandler+0x130>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a12      	ldr	r2, [pc, #72]	@ (8003554 <USART3_IRQHandler+0x130>)
 800350c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 8003510:	6013      	str	r3, [r2, #0]
            __HAL_DMA_ENABLE(&hdma_usart3_rx);
 8003512:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <USART3_IRQHandler+0x120>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <USART3_IRQHandler+0x120>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f042 0201 	orr.w	r2, r2, #1
 8003520:	601a      	str	r2, [r3, #0]
            if(this_time_rx_len == RC_FRAME_LENGTH)
 8003522:	4b09      	ldr	r3, [pc, #36]	@ (8003548 <USART3_IRQHandler+0x124>)
 8003524:	881b      	ldrh	r3, [r3, #0]
 8003526:	2b12      	cmp	r3, #18
 8003528:	d103      	bne.n	8003532 <USART3_IRQHandler+0x10e>
                sbus_to_rc(sbus_rx_buf[1], &rc_ctrl);
 800352a:	4908      	ldr	r1, [pc, #32]	@ (800354c <USART3_IRQHandler+0x128>)
 800352c:	480a      	ldr	r0, [pc, #40]	@ (8003558 <USART3_IRQHandler+0x134>)
 800352e:	f000 f815 	bl	800355c <sbus_to_rc>
}
 8003532:	bf00      	nop
 8003534:	3708      	adds	r7, #8
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000848 	.word	0x20000848
 8003540:	40004800 	.word	0x40004800
 8003544:	20000990 	.word	0x20000990
 8003548:	20000b40 	.word	0x20000b40
 800354c:	20000ae0 	.word	0x20000ae0
 8003550:	20000af8 	.word	0x20000af8
 8003554:	40026028 	.word	0x40026028
 8003558:	20000b1c 	.word	0x20000b1c

0800355c <sbus_to_rc>:
  * @brief          remote control protocol resolution
  * @param[in]      sbus_buf: raw data point
  * @param[out]     rc_ctrl: remote control data struct point
  * @retval         none
  */
static void sbus_to_rc(volatile const uint8_t *sbus_buf, RC_ctrl_t *rc_ctrl) {
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	6039      	str	r1, [r7, #0]
    if (sbus_buf == NULL || rc_ctrl == NULL) {
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8101 	beq.w	8003770 <sbus_to_rc+0x214>
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	2b00      	cmp	r3, #0
 8003572:	f000 80fd 	beq.w	8003770 <sbus_to_rc+0x214>
        return;
    }

    rc_ctrl->rc.ch[0] = (sbus_buf[0] | (sbus_buf[1] << 8)) & 0x07ff;        //!< Channel 0
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	b2db      	uxtb	r3, r3
 800357c:	b21a      	sxth	r2, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3301      	adds	r3, #1
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	b2db      	uxtb	r3, r3
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	b21b      	sxth	r3, r3
 800358a:	4313      	orrs	r3, r2
 800358c:	b21b      	sxth	r3, r3
 800358e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003592:	b21a      	sxth	r2, r3
 8003594:	683b      	ldr	r3, [r7, #0]
 8003596:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] = ((sbus_buf[1] >> 3) | (sbus_buf[2] << 5)) & 0x07ff; //!< Channel 1
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	3301      	adds	r3, #1
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	08db      	lsrs	r3, r3, #3
 80035a2:	b2db      	uxtb	r3, r3
 80035a4:	b21a      	sxth	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	3302      	adds	r3, #2
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	015b      	lsls	r3, r3, #5
 80035b0:	b21b      	sxth	r3, r3
 80035b2:	4313      	orrs	r3, r2
 80035b4:	b21b      	sxth	r3, r3
 80035b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035ba:	b21a      	sxth	r2, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3302      	adds	r3, #2
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	099b      	lsrs	r3, r3, #6
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	b21a      	sxth	r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3303      	adds	r3, #3
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	009b      	lsls	r3, r3, #2
 80035d8:	b21b      	sxth	r3, r3
 80035da:	4313      	orrs	r3, r2
 80035dc:	b21a      	sxth	r2, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	3304      	adds	r3, #4
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	029b      	lsls	r3, r3, #10
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80035e8:	b21b      	sxth	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b21b      	sxth	r3, r3
                         (sbus_buf[4] << 10)) &0x07ff;
 80035ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035f2:	b21a      	sxth	r2, r3
    rc_ctrl->rc.ch[2] = ((sbus_buf[2] >> 6) | (sbus_buf[3] << 2) |          //!< Channel 2
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] = ((sbus_buf[4] >> 1) | (sbus_buf[5] << 7)) & 0x07ff; //!< Channel 3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	3304      	adds	r3, #4
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	085b      	lsrs	r3, r3, #1
 8003602:	b2db      	uxtb	r3, r3
 8003604:	b21a      	sxth	r2, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	3305      	adds	r3, #5
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	b2db      	uxtb	r3, r3
 800360e:	01db      	lsls	r3, r3, #7
 8003610:	b21b      	sxth	r3, r3
 8003612:	4313      	orrs	r3, r2
 8003614:	b21b      	sxth	r3, r3
 8003616:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800361a:	b21a      	sxth	r2, r3
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.s[0] = ((sbus_buf[5] >> 4) & 0x0003);                  //!< Switch left
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3305      	adds	r3, #5
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	091b      	lsrs	r3, r3, #4
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	b2da      	uxtb	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	729a      	strb	r2, [r3, #10]
    rc_ctrl->rc.s[1] = ((sbus_buf[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	3305      	adds	r3, #5
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	b2db      	uxtb	r3, r3
 800363e:	091b      	lsrs	r3, r3, #4
 8003640:	b2db      	uxtb	r3, r3
 8003642:	109b      	asrs	r3, r3, #2
 8003644:	b2db      	uxtb	r3, r3
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	b2da      	uxtb	r2, r3
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	72da      	strb	r2, [r3, #11]
    rc_ctrl->mouse.x = sbus_buf[6] | (sbus_buf[7] << 8);                    //!< Mouse X axis
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	3306      	adds	r3, #6
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	b21a      	sxth	r2, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	3307      	adds	r3, #7
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	b2db      	uxtb	r3, r3
 8003662:	021b      	lsls	r3, r3, #8
 8003664:	b21b      	sxth	r3, r3
 8003666:	4313      	orrs	r3, r2
 8003668:	b21a      	sxth	r2, r3
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	819a      	strh	r2, [r3, #12]
    rc_ctrl->mouse.y = sbus_buf[8] | (sbus_buf[9] << 8);                    //!< Mouse Y axis
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	3308      	adds	r3, #8
 8003672:	781b      	ldrb	r3, [r3, #0]
 8003674:	b2db      	uxtb	r3, r3
 8003676:	b21a      	sxth	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	3309      	adds	r3, #9
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	021b      	lsls	r3, r3, #8
 8003682:	b21b      	sxth	r3, r3
 8003684:	4313      	orrs	r3, r2
 8003686:	b21a      	sxth	r2, r3
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	81da      	strh	r2, [r3, #14]
    rc_ctrl->mouse.z = sbus_buf[10] | (sbus_buf[11] << 8);                  //!< Mouse Z axis
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	330a      	adds	r3, #10
 8003690:	781b      	ldrb	r3, [r3, #0]
 8003692:	b2db      	uxtb	r3, r3
 8003694:	b21a      	sxth	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	330b      	adds	r3, #11
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	021b      	lsls	r3, r3, #8
 80036a0:	b21b      	sxth	r3, r3
 80036a2:	4313      	orrs	r3, r2
 80036a4:	b21a      	sxth	r2, r3
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	821a      	strh	r2, [r3, #16]
    rc_ctrl->mouse.press_l = sbus_buf[12];                                  //!< Mouse Left Is Pressed ?
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	330c      	adds	r3, #12
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	749a      	strb	r2, [r3, #18]
    rc_ctrl->mouse.press_r = sbus_buf[13];                                  //!< Mouse Right Is Pressed ?
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	330d      	adds	r3, #13
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	74da      	strb	r2, [r3, #19]
    rc_ctrl->key.v = sbus_buf[14] | (sbus_buf[15] << 8);                    //!< KeyBoard value
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	330e      	adds	r3, #14
 80036c6:	781b      	ldrb	r3, [r3, #0]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	b21a      	sxth	r2, r3
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	330f      	adds	r3, #15
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	b2db      	uxtb	r3, r3
 80036d4:	021b      	lsls	r3, r3, #8
 80036d6:	b21b      	sxth	r3, r3
 80036d8:	4313      	orrs	r3, r2
 80036da:	b21b      	sxth	r3, r3
 80036dc:	b29a      	uxth	r2, r3
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	829a      	strh	r2, [r3, #20]
    rc_ctrl->rc.ch[4] = sbus_buf[16] | (sbus_buf[17] << 8);                 //NULL
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	3310      	adds	r3, #16
 80036e6:	781b      	ldrb	r3, [r3, #0]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	b21a      	sxth	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	3311      	adds	r3, #17
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	021b      	lsls	r3, r3, #8
 80036f6:	b21b      	sxth	r3, r3
 80036f8:	4313      	orrs	r3, r2
 80036fa:	b21a      	sxth	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	811a      	strh	r2, [r3, #8]

    rc_ctrl->rc.ch[0] -= RC_CH_VALUE_OFFSET;
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003706:	b21b      	sxth	r3, r3
 8003708:	b29b      	uxth	r3, r3
 800370a:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800370e:	b29b      	uxth	r3, r3
 8003710:	b21a      	sxth	r2, r3
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	801a      	strh	r2, [r3, #0]
    rc_ctrl->rc.ch[1] -= RC_CH_VALUE_OFFSET;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800371c:	b21b      	sxth	r3, r3
 800371e:	b29b      	uxth	r3, r3
 8003720:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003724:	b29b      	uxth	r3, r3
 8003726:	b21a      	sxth	r2, r3
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	805a      	strh	r2, [r3, #2]
    rc_ctrl->rc.ch[2] -= RC_CH_VALUE_OFFSET;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003732:	b21b      	sxth	r3, r3
 8003734:	b29b      	uxth	r3, r3
 8003736:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800373a:	b29b      	uxth	r3, r3
 800373c:	b21a      	sxth	r2, r3
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	809a      	strh	r2, [r3, #4]
    rc_ctrl->rc.ch[3] -= RC_CH_VALUE_OFFSET;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003748:	b21b      	sxth	r3, r3
 800374a:	b29b      	uxth	r3, r3
 800374c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003750:	b29b      	uxth	r3, r3
 8003752:	b21a      	sxth	r2, r3
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	80da      	strh	r2, [r3, #6]
    rc_ctrl->rc.ch[4] -= RC_CH_VALUE_OFFSET;
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800375e:	b21b      	sxth	r3, r3
 8003760:	b29b      	uxth	r3, r3
 8003762:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8003766:	b29b      	uxth	r3, r3
 8003768:	b21a      	sxth	r2, r3
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	811a      	strh	r2, [r3, #8]
 800376e:	e000      	b.n	8003772 <sbus_to_rc+0x216>
        return;
 8003770:	bf00      	nop
}
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <getRCchannel>:

int16_t getRCchannel(int8_t channelID) {
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	4603      	mov	r3, r0
 8003784:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.ch[channelID];
 8003786:	4b06      	ldr	r3, [pc, #24]	@ (80037a0 <getRCchannel+0x24>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f997 2007 	ldrsb.w	r2, [r7, #7]
 800378e:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8003792:	b21b      	sxth	r3, r3
}
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr
 80037a0:	20000018 	.word	0x20000018

080037a4 <getRCswitch>:

int8_t getRCswitch(int8_t switchID) {
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	71fb      	strb	r3, [r7, #7]
	return rc_ptr->rc.s[switchID];
 80037ae:	4b06      	ldr	r3, [pc, #24]	@ (80037c8 <getRCswitch+0x24>)
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037b6:	4413      	add	r3, r2
 80037b8:	7a9b      	ldrb	r3, [r3, #10]
 80037ba:	b25b      	sxtb	r3, r3
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr
 80037c8:	20000018 	.word	0x20000018

080037cc <RCkeysRefresh>:
	} else {
		return 0;
	}
}

void RCkeysRefresh(void) {//temporary until uart fixed
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
	uint16_t key = rc_ptr->key.v;
 80037d2:	4b85      	ldr	r3, [pc, #532]	@ (80039e8 <RCkeysRefresh+0x21c>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	7d1a      	ldrb	r2, [r3, #20]
 80037d8:	7d5b      	ldrb	r3, [r3, #21]
 80037da:	021b      	lsls	r3, r3, #8
 80037dc:	4313      	orrs	r3, r2
 80037de:	80fb      	strh	r3, [r7, #6]
	if(key > 32767){
 80037e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	da07      	bge.n	80037f8 <RCkeysRefresh+0x2c>
		pc_control.b = 1;
 80037e8:	4b80      	ldr	r3, [pc, #512]	@ (80039ec <RCkeysRefresh+0x220>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	76da      	strb	r2, [r3, #27]
		key= key - 32768;
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	f5a3 4300 	sub.w	r3, r3, #32768	@ 0x8000
 80037f4:	80fb      	strh	r3, [r7, #6]
 80037f6:	e002      	b.n	80037fe <RCkeysRefresh+0x32>
	}else{
		pc_control.b = 0;
 80037f8:	4b7c      	ldr	r3, [pc, #496]	@ (80039ec <RCkeysRefresh+0x220>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	76da      	strb	r2, [r3, #27]
	}
	if(key>16383){
 80037fe:	88fb      	ldrh	r3, [r7, #6]
 8003800:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003804:	d307      	bcc.n	8003816 <RCkeysRefresh+0x4a>
		pc_control.v = 1;
 8003806:	4b79      	ldr	r3, [pc, #484]	@ (80039ec <RCkeysRefresh+0x220>)
 8003808:	2201      	movs	r2, #1
 800380a:	769a      	strb	r2, [r3, #26]
		key= key - 16384;
 800380c:	88fb      	ldrh	r3, [r7, #6]
 800380e:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 8003812:	80fb      	strh	r3, [r7, #6]
 8003814:	e002      	b.n	800381c <RCkeysRefresh+0x50>
	}else{
		pc_control.v = 0;
 8003816:	4b75      	ldr	r3, [pc, #468]	@ (80039ec <RCkeysRefresh+0x220>)
 8003818:	2200      	movs	r2, #0
 800381a:	769a      	strb	r2, [r3, #26]
	}
	if(key>8191){
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003822:	d307      	bcc.n	8003834 <RCkeysRefresh+0x68>
		pc_control.c = 1;
 8003824:	4b71      	ldr	r3, [pc, #452]	@ (80039ec <RCkeysRefresh+0x220>)
 8003826:	2201      	movs	r2, #1
 8003828:	765a      	strb	r2, [r3, #25]
		key= key - 8192;
 800382a:	88fb      	ldrh	r3, [r7, #6]
 800382c:	f5a3 5300 	sub.w	r3, r3, #8192	@ 0x2000
 8003830:	80fb      	strh	r3, [r7, #6]
 8003832:	e002      	b.n	800383a <RCkeysRefresh+0x6e>
	}else{
		pc_control.c = 0;
 8003834:	4b6d      	ldr	r3, [pc, #436]	@ (80039ec <RCkeysRefresh+0x220>)
 8003836:	2200      	movs	r2, #0
 8003838:	765a      	strb	r2, [r3, #25]
	}
	if(key>4095){
 800383a:	88fb      	ldrh	r3, [r7, #6]
 800383c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003840:	d307      	bcc.n	8003852 <RCkeysRefresh+0x86>
		pc_control.x = 1;
 8003842:	4b6a      	ldr	r3, [pc, #424]	@ (80039ec <RCkeysRefresh+0x220>)
 8003844:	2201      	movs	r2, #1
 8003846:	761a      	strb	r2, [r3, #24]
		key= key - 4096;
 8003848:	88fb      	ldrh	r3, [r7, #6]
 800384a:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800384e:	80fb      	strh	r3, [r7, #6]
 8003850:	e002      	b.n	8003858 <RCkeysRefresh+0x8c>
	}else{
		pc_control.x = 0;
 8003852:	4b66      	ldr	r3, [pc, #408]	@ (80039ec <RCkeysRefresh+0x220>)
 8003854:	2200      	movs	r2, #0
 8003856:	761a      	strb	r2, [r3, #24]
	}
	if(key>2047){
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800385e:	d307      	bcc.n	8003870 <RCkeysRefresh+0xa4>
		pc_control.z = 1;
 8003860:	4b62      	ldr	r3, [pc, #392]	@ (80039ec <RCkeysRefresh+0x220>)
 8003862:	2201      	movs	r2, #1
 8003864:	75da      	strb	r2, [r3, #23]
		key= key - 2048;
 8003866:	88fb      	ldrh	r3, [r7, #6]
 8003868:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800386c:	80fb      	strh	r3, [r7, #6]
 800386e:	e002      	b.n	8003876 <RCkeysRefresh+0xaa>
	}else{
		pc_control.z = 0;
 8003870:	4b5e      	ldr	r3, [pc, #376]	@ (80039ec <RCkeysRefresh+0x220>)
 8003872:	2200      	movs	r2, #0
 8003874:	75da      	strb	r2, [r3, #23]
	}
	if(key>1023){
 8003876:	88fb      	ldrh	r3, [r7, #6]
 8003878:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800387c:	d307      	bcc.n	800388e <RCkeysRefresh+0xc2>
		pc_control.g = 1;
 800387e:	4b5b      	ldr	r3, [pc, #364]	@ (80039ec <RCkeysRefresh+0x220>)
 8003880:	2201      	movs	r2, #1
 8003882:	759a      	strb	r2, [r3, #22]
		key= key - 1024;
 8003884:	88fb      	ldrh	r3, [r7, #6]
 8003886:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 800388a:	80fb      	strh	r3, [r7, #6]
 800388c:	e002      	b.n	8003894 <RCkeysRefresh+0xc8>
	}else{
		pc_control.g = 0;
 800388e:	4b57      	ldr	r3, [pc, #348]	@ (80039ec <RCkeysRefresh+0x220>)
 8003890:	2200      	movs	r2, #0
 8003892:	759a      	strb	r2, [r3, #22]
	}
	if(key>511){
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800389a:	d307      	bcc.n	80038ac <RCkeysRefresh+0xe0>
		pc_control.f = 1;
 800389c:	4b53      	ldr	r3, [pc, #332]	@ (80039ec <RCkeysRefresh+0x220>)
 800389e:	2201      	movs	r2, #1
 80038a0:	755a      	strb	r2, [r3, #21]
		key= key - 512;
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 80038a8:	80fb      	strh	r3, [r7, #6]
 80038aa:	e002      	b.n	80038b2 <RCkeysRefresh+0xe6>
	}else{
		pc_control.f = 0;
 80038ac:	4b4f      	ldr	r3, [pc, #316]	@ (80039ec <RCkeysRefresh+0x220>)
 80038ae:	2200      	movs	r2, #0
 80038b0:	755a      	strb	r2, [r3, #21]
	}
	if(key > 255){
 80038b2:	88fb      	ldrh	r3, [r7, #6]
 80038b4:	2bff      	cmp	r3, #255	@ 0xff
 80038b6:	d907      	bls.n	80038c8 <RCkeysRefresh+0xfc>
		pc_control.r = 1;
 80038b8:	4b4c      	ldr	r3, [pc, #304]	@ (80039ec <RCkeysRefresh+0x220>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	751a      	strb	r2, [r3, #20]
		key = key - 256;
 80038be:	88fb      	ldrh	r3, [r7, #6]
 80038c0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80038c4:	80fb      	strh	r3, [r7, #6]
 80038c6:	e002      	b.n	80038ce <RCkeysRefresh+0x102>
	}else{
		pc_control.r = 0;
 80038c8:	4b48      	ldr	r3, [pc, #288]	@ (80039ec <RCkeysRefresh+0x220>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	751a      	strb	r2, [r3, #20]
	}


	if(key > 127){
 80038ce:	88fb      	ldrh	r3, [r7, #6]
 80038d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80038d2:	d906      	bls.n	80038e2 <RCkeysRefresh+0x116>
		pc_control.e = 1;
 80038d4:	4b45      	ldr	r3, [pc, #276]	@ (80039ec <RCkeysRefresh+0x220>)
 80038d6:	2201      	movs	r2, #1
 80038d8:	74da      	strb	r2, [r3, #19]
		key = key - 128;
 80038da:	88fb      	ldrh	r3, [r7, #6]
 80038dc:	3b80      	subs	r3, #128	@ 0x80
 80038de:	80fb      	strh	r3, [r7, #6]
 80038e0:	e002      	b.n	80038e8 <RCkeysRefresh+0x11c>
	}else{
		pc_control.e = 0;
 80038e2:	4b42      	ldr	r3, [pc, #264]	@ (80039ec <RCkeysRefresh+0x220>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	74da      	strb	r2, [r3, #19]

	}
	if(key>63){
 80038e8:	88fb      	ldrh	r3, [r7, #6]
 80038ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80038ec:	d906      	bls.n	80038fc <RCkeysRefresh+0x130>
		pc_control.q = 1;
 80038ee:	4b3f      	ldr	r3, [pc, #252]	@ (80039ec <RCkeysRefresh+0x220>)
 80038f0:	2201      	movs	r2, #1
 80038f2:	749a      	strb	r2, [r3, #18]
		key= key - 64;
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	3b40      	subs	r3, #64	@ 0x40
 80038f8:	80fb      	strh	r3, [r7, #6]
 80038fa:	e002      	b.n	8003902 <RCkeysRefresh+0x136>
	}else{
		pc_control.q = 0;
 80038fc:	4b3b      	ldr	r3, [pc, #236]	@ (80039ec <RCkeysRefresh+0x220>)
 80038fe:	2200      	movs	r2, #0
 8003900:	749a      	strb	r2, [r3, #18]
	}
	if(key>31){
 8003902:	88fb      	ldrh	r3, [r7, #6]
 8003904:	2b1f      	cmp	r3, #31
 8003906:	d906      	bls.n	8003916 <RCkeysRefresh+0x14a>
		pc_control.ctrl = 1;
 8003908:	4b38      	ldr	r3, [pc, #224]	@ (80039ec <RCkeysRefresh+0x220>)
 800390a:	2201      	movs	r2, #1
 800390c:	745a      	strb	r2, [r3, #17]
		key =key - 32;
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	3b20      	subs	r3, #32
 8003912:	80fb      	strh	r3, [r7, #6]
 8003914:	e002      	b.n	800391c <RCkeysRefresh+0x150>
	}else{
		pc_control.ctrl = 0;
 8003916:	4b35      	ldr	r3, [pc, #212]	@ (80039ec <RCkeysRefresh+0x220>)
 8003918:	2200      	movs	r2, #0
 800391a:	745a      	strb	r2, [r3, #17]
	}
	if(key>15){
 800391c:	88fb      	ldrh	r3, [r7, #6]
 800391e:	2b0f      	cmp	r3, #15
 8003920:	d906      	bls.n	8003930 <RCkeysRefresh+0x164>
		pc_control.shift = 1;
 8003922:	4b32      	ldr	r3, [pc, #200]	@ (80039ec <RCkeysRefresh+0x220>)
 8003924:	2201      	movs	r2, #1
 8003926:	741a      	strb	r2, [r3, #16]
		key= key - 16;
 8003928:	88fb      	ldrh	r3, [r7, #6]
 800392a:	3b10      	subs	r3, #16
 800392c:	80fb      	strh	r3, [r7, #6]
 800392e:	e002      	b.n	8003936 <RCkeysRefresh+0x16a>
	}else{
		pc_control.shift = 0;
 8003930:	4b2e      	ldr	r3, [pc, #184]	@ (80039ec <RCkeysRefresh+0x220>)
 8003932:	2200      	movs	r2, #0
 8003934:	741a      	strb	r2, [r3, #16]
	}
	if(key>7){
 8003936:	88fb      	ldrh	r3, [r7, #6]
 8003938:	2b07      	cmp	r3, #7
 800393a:	d906      	bls.n	800394a <RCkeysRefresh+0x17e>
		pc_control.d = 1;
 800393c:	4b2b      	ldr	r3, [pc, #172]	@ (80039ec <RCkeysRefresh+0x220>)
 800393e:	2201      	movs	r2, #1
 8003940:	73da      	strb	r2, [r3, #15]
		key= key - 8;
 8003942:	88fb      	ldrh	r3, [r7, #6]
 8003944:	3b08      	subs	r3, #8
 8003946:	80fb      	strh	r3, [r7, #6]
 8003948:	e002      	b.n	8003950 <RCkeysRefresh+0x184>
	}else{
		pc_control.d = 0;
 800394a:	4b28      	ldr	r3, [pc, #160]	@ (80039ec <RCkeysRefresh+0x220>)
 800394c:	2200      	movs	r2, #0
 800394e:	73da      	strb	r2, [r3, #15]
	}
	if(key>3){
 8003950:	88fb      	ldrh	r3, [r7, #6]
 8003952:	2b03      	cmp	r3, #3
 8003954:	d906      	bls.n	8003964 <RCkeysRefresh+0x198>
		pc_control.a = 1;
 8003956:	4b25      	ldr	r3, [pc, #148]	@ (80039ec <RCkeysRefresh+0x220>)
 8003958:	2201      	movs	r2, #1
 800395a:	739a      	strb	r2, [r3, #14]
		key= key - 4;
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	3b04      	subs	r3, #4
 8003960:	80fb      	strh	r3, [r7, #6]
 8003962:	e002      	b.n	800396a <RCkeysRefresh+0x19e>
	}else{
		pc_control.a = 0;
 8003964:	4b21      	ldr	r3, [pc, #132]	@ (80039ec <RCkeysRefresh+0x220>)
 8003966:	2200      	movs	r2, #0
 8003968:	739a      	strb	r2, [r3, #14]
	}
	if(key>1){
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d906      	bls.n	800397e <RCkeysRefresh+0x1b2>
		pc_control.s = 1;
 8003970:	4b1e      	ldr	r3, [pc, #120]	@ (80039ec <RCkeysRefresh+0x220>)
 8003972:	2201      	movs	r2, #1
 8003974:	735a      	strb	r2, [r3, #13]
		key= key - 2;
 8003976:	88fb      	ldrh	r3, [r7, #6]
 8003978:	3b02      	subs	r3, #2
 800397a:	80fb      	strh	r3, [r7, #6]
 800397c:	e002      	b.n	8003984 <RCkeysRefresh+0x1b8>
	}else{
		pc_control.s = 0;
 800397e:	4b1b      	ldr	r3, [pc, #108]	@ (80039ec <RCkeysRefresh+0x220>)
 8003980:	2200      	movs	r2, #0
 8003982:	735a      	strb	r2, [r3, #13]
	}
	if(key > 0){
 8003984:	88fb      	ldrh	r3, [r7, #6]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d003      	beq.n	8003992 <RCkeysRefresh+0x1c6>
		pc_control.w = 1;
 800398a:	4b18      	ldr	r3, [pc, #96]	@ (80039ec <RCkeysRefresh+0x220>)
 800398c:	2201      	movs	r2, #1
 800398e:	731a      	strb	r2, [r3, #12]
 8003990:	e002      	b.n	8003998 <RCkeysRefresh+0x1cc>
	}else{
		pc_control.w = 0;
 8003992:	4b16      	ldr	r3, [pc, #88]	@ (80039ec <RCkeysRefresh+0x220>)
 8003994:	2200      	movs	r2, #0
 8003996:	731a      	strb	r2, [r3, #12]
	}

	pc_control.mouse_x = rc_ptr->mouse.x;
 8003998:	4b13      	ldr	r3, [pc, #76]	@ (80039e8 <RCkeysRefresh+0x21c>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80039a0:	b21a      	sxth	r2, r3
 80039a2:	4b12      	ldr	r3, [pc, #72]	@ (80039ec <RCkeysRefresh+0x220>)
 80039a4:	801a      	strh	r2, [r3, #0]
	pc_control.mouse_y = rc_ptr->mouse.y;
 80039a6:	4b10      	ldr	r3, [pc, #64]	@ (80039e8 <RCkeysRefresh+0x21c>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80039ae:	b21a      	sxth	r2, r3
 80039b0:	4b0e      	ldr	r3, [pc, #56]	@ (80039ec <RCkeysRefresh+0x220>)
 80039b2:	805a      	strh	r2, [r3, #2]
	pc_control.mouse_z = rc_ptr->mouse.z;
 80039b4:	4b0c      	ldr	r3, [pc, #48]	@ (80039e8 <RCkeysRefresh+0x21c>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80039bc:	b21a      	sxth	r2, r3
 80039be:	4b0b      	ldr	r3, [pc, #44]	@ (80039ec <RCkeysRefresh+0x220>)
 80039c0:	809a      	strh	r2, [r3, #4]

	pc_control.left_button_down = rc_ptr->mouse.press_l;
 80039c2:	4b09      	ldr	r3, [pc, #36]	@ (80039e8 <RCkeysRefresh+0x21c>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	7c9b      	ldrb	r3, [r3, #18]
 80039c8:	b25a      	sxtb	r2, r3
 80039ca:	4b08      	ldr	r3, [pc, #32]	@ (80039ec <RCkeysRefresh+0x220>)
 80039cc:	719a      	strb	r2, [r3, #6]
	pc_control.right_button_down = rc_ptr->mouse.press_r;
 80039ce:	4b06      	ldr	r3, [pc, #24]	@ (80039e8 <RCkeysRefresh+0x21c>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	7cdb      	ldrb	r3, [r3, #19]
 80039d4:	b25a      	sxtb	r2, r3
 80039d6:	4b05      	ldr	r3, [pc, #20]	@ (80039ec <RCkeysRefresh+0x220>)
 80039d8:	71da      	strb	r2, [r3, #7]
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	20000018 	.word	0x20000018
 80039ec:	20000524 	.word	0x20000524

080039f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	b082      	sub	sp, #8
 80039f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f6:	2300      	movs	r3, #0
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <HAL_MspInit+0x54>)
 80039fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fe:	4a11      	ldr	r2, [pc, #68]	@ (8003a44 <HAL_MspInit+0x54>)
 8003a00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a06:	4b0f      	ldr	r3, [pc, #60]	@ (8003a44 <HAL_MspInit+0x54>)
 8003a08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a0e:	607b      	str	r3, [r7, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	2300      	movs	r3, #0
 8003a14:	603b      	str	r3, [r7, #0]
 8003a16:	4b0b      	ldr	r3, [pc, #44]	@ (8003a44 <HAL_MspInit+0x54>)
 8003a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1a:	4a0a      	ldr	r2, [pc, #40]	@ (8003a44 <HAL_MspInit+0x54>)
 8003a1c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a20:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a22:	4b08      	ldr	r3, [pc, #32]	@ (8003a44 <HAL_MspInit+0x54>)
 8003a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2a:	603b      	str	r3, [r7, #0]
 8003a2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003a2e:	2200      	movs	r2, #0
 8003a30:	210f      	movs	r1, #15
 8003a32:	f06f 0001 	mvn.w	r0, #1
 8003a36:	f001 fd82 	bl	800553e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40023800 	.word	0x40023800

08003a48 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b08c      	sub	sp, #48	@ 0x30
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	f107 031c 	add.w	r3, r7, #28
 8003a54:	2200      	movs	r2, #0
 8003a56:	601a      	str	r2, [r3, #0]
 8003a58:	605a      	str	r2, [r3, #4]
 8003a5a:	609a      	str	r2, [r3, #8]
 8003a5c:	60da      	str	r2, [r3, #12]
 8003a5e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a4a      	ldr	r2, [pc, #296]	@ (8003b90 <HAL_CAN_MspInit+0x148>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d13d      	bne.n	8003ae6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <HAL_CAN_MspInit+0x14c>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	3301      	adds	r3, #1
 8003a70:	4a48      	ldr	r2, [pc, #288]	@ (8003b94 <HAL_CAN_MspInit+0x14c>)
 8003a72:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003a74:	4b47      	ldr	r3, [pc, #284]	@ (8003b94 <HAL_CAN_MspInit+0x14c>)
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d10d      	bne.n	8003a98 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	61bb      	str	r3, [r7, #24]
 8003a80:	4b45      	ldr	r3, [pc, #276]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a84:	4a44      	ldr	r2, [pc, #272]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003a86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003a8a:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a8c:	4b42      	ldr	r3, [pc, #264]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a94:	61bb      	str	r3, [r7, #24]
 8003a96:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003a98:	2300      	movs	r3, #0
 8003a9a:	617b      	str	r3, [r7, #20]
 8003a9c:	4b3e      	ldr	r3, [pc, #248]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa0:	4a3d      	ldr	r2, [pc, #244]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003aa2:	f043 0308 	orr.w	r3, r3, #8
 8003aa6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003aa8:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003aaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aac:	f003 0308 	and.w	r3, r3, #8
 8003ab0:	617b      	str	r3, [r7, #20]
 8003ab2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003abc:	2300      	movs	r3, #0
 8003abe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ac0:	2303      	movs	r3, #3
 8003ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003ac4:	2309      	movs	r3, #9
 8003ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac8:	f107 031c 	add.w	r3, r7, #28
 8003acc:	4619      	mov	r1, r3
 8003ace:	4833      	ldr	r0, [pc, #204]	@ (8003b9c <HAL_CAN_MspInit+0x154>)
 8003ad0:	f002 f96e 	bl	8005db0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2105      	movs	r1, #5
 8003ad8:	2014      	movs	r0, #20
 8003ada:	f001 fd30 	bl	800553e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003ade:	2014      	movs	r0, #20
 8003ae0:	f001 fd49 	bl	8005576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8003ae4:	e04f      	b.n	8003b86 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a2d      	ldr	r2, [pc, #180]	@ (8003ba0 <HAL_CAN_MspInit+0x158>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d14a      	bne.n	8003b86 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8003af0:	2300      	movs	r3, #0
 8003af2:	613b      	str	r3, [r7, #16]
 8003af4:	4b28      	ldr	r3, [pc, #160]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003af6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003af8:	4a27      	ldr	r2, [pc, #156]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003afa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003afe:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b00:	4b25      	ldr	r3, [pc, #148]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003b02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b04:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003b08:	613b      	str	r3, [r7, #16]
 8003b0a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8003b0c:	4b21      	ldr	r3, [pc, #132]	@ (8003b94 <HAL_CAN_MspInit+0x14c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a20      	ldr	r2, [pc, #128]	@ (8003b94 <HAL_CAN_MspInit+0x14c>)
 8003b14:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8003b16:	4b1f      	ldr	r3, [pc, #124]	@ (8003b94 <HAL_CAN_MspInit+0x14c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d10d      	bne.n	8003b3a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8003b1e:	2300      	movs	r3, #0
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	4b1d      	ldr	r3, [pc, #116]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b26:	4a1c      	ldr	r2, [pc, #112]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003b28:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003b2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b2e:	4b1a      	ldr	r3, [pc, #104]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	60bb      	str	r3, [r7, #8]
 8003b3e:	4b16      	ldr	r3, [pc, #88]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b42:	4a15      	ldr	r2, [pc, #84]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003b44:	f043 0302 	orr.w	r3, r3, #2
 8003b48:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b4a:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <HAL_CAN_MspInit+0x150>)
 8003b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b4e:	f003 0302 	and.w	r3, r3, #2
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003b56:	2360      	movs	r3, #96	@ 0x60
 8003b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b5a:	2302      	movs	r3, #2
 8003b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b62:	2303      	movs	r3, #3
 8003b64:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8003b66:	2309      	movs	r3, #9
 8003b68:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b6a:	f107 031c 	add.w	r3, r7, #28
 8003b6e:	4619      	mov	r1, r3
 8003b70:	480c      	ldr	r0, [pc, #48]	@ (8003ba4 <HAL_CAN_MspInit+0x15c>)
 8003b72:	f002 f91d 	bl	8005db0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8003b76:	2200      	movs	r2, #0
 8003b78:	2105      	movs	r1, #5
 8003b7a:	2040      	movs	r0, #64	@ 0x40
 8003b7c:	f001 fcdf 	bl	800553e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8003b80:	2040      	movs	r0, #64	@ 0x40
 8003b82:	f001 fcf8 	bl	8005576 <HAL_NVIC_EnableIRQ>
}
 8003b86:	bf00      	nop
 8003b88:	3730      	adds	r7, #48	@ 0x30
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	bd80      	pop	{r7, pc}
 8003b8e:	bf00      	nop
 8003b90:	40006400 	.word	0x40006400
 8003b94:	20000b44 	.word	0x20000b44
 8003b98:	40023800 	.word	0x40023800
 8003b9c:	40020c00 	.word	0x40020c00
 8003ba0:	40006800 	.word	0x40006800
 8003ba4:	40020400 	.word	0x40020400

08003ba8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08a      	sub	sp, #40	@ 0x28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 0314 	add.w	r3, r7, #20
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a29      	ldr	r2, [pc, #164]	@ (8003c6c <HAL_I2C_MspInit+0xc4>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d14b      	bne.n	8003c62 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bd2:	4a27      	ldr	r2, [pc, #156]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003bd4:	f043 0304 	orr.w	r3, r3, #4
 8003bd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bda:	4b25      	ldr	r3, [pc, #148]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bde:	f003 0304 	and.w	r3, r3, #4
 8003be2:	613b      	str	r3, [r7, #16]
 8003be4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	60fb      	str	r3, [r7, #12]
 8003bea:	4b21      	ldr	r3, [pc, #132]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	4a20      	ldr	r2, [pc, #128]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003bf0:	f043 0301 	orr.w	r3, r3, #1
 8003bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bf6:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	60fb      	str	r3, [r7, #12]
 8003c00:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003c02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c08:	2312      	movs	r3, #18
 8003c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c10:	2303      	movs	r3, #3
 8003c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c14:	2304      	movs	r3, #4
 8003c16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c18:	f107 0314 	add.w	r3, r7, #20
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	4815      	ldr	r0, [pc, #84]	@ (8003c74 <HAL_I2C_MspInit+0xcc>)
 8003c20:	f002 f8c6 	bl	8005db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8003c24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c2a:	2312      	movs	r3, #18
 8003c2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c32:	2303      	movs	r3, #3
 8003c34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003c36:	2304      	movs	r3, #4
 8003c38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c3a:	f107 0314 	add.w	r3, r7, #20
 8003c3e:	4619      	mov	r1, r3
 8003c40:	480d      	ldr	r0, [pc, #52]	@ (8003c78 <HAL_I2C_MspInit+0xd0>)
 8003c42:	f002 f8b5 	bl	8005db0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	4b09      	ldr	r3, [pc, #36]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c4e:	4a08      	ldr	r2, [pc, #32]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003c50:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003c54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c56:	4b06      	ldr	r3, [pc, #24]	@ (8003c70 <HAL_I2C_MspInit+0xc8>)
 8003c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003c5e:	60bb      	str	r3, [r7, #8]
 8003c60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003c62:	bf00      	nop
 8003c64:	3728      	adds	r7, #40	@ 0x28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40005c00 	.word	0x40005c00
 8003c70:	40023800 	.word	0x40023800
 8003c74:	40020800 	.word	0x40020800
 8003c78:	40020000 	.word	0x40020000

08003c7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b08a      	sub	sp, #40	@ 0x28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c84:	f107 0314 	add.w	r3, r7, #20
 8003c88:	2200      	movs	r2, #0
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	605a      	str	r2, [r3, #4]
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	60da      	str	r2, [r3, #12]
 8003c92:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a28      	ldr	r2, [pc, #160]	@ (8003d3c <HAL_SPI_MspInit+0xc0>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d149      	bne.n	8003d32 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	613b      	str	r3, [r7, #16]
 8003ca2:	4b27      	ldr	r3, [pc, #156]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ca6:	4a26      	ldr	r2, [pc, #152]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003ca8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cae:	4b24      	ldr	r3, [pc, #144]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cb6:	613b      	str	r3, [r7, #16]
 8003cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003cba:	2300      	movs	r3, #0
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	4b20      	ldr	r3, [pc, #128]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc2:	4a1f      	ldr	r2, [pc, #124]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003cc4:	f043 0302 	orr.w	r3, r3, #2
 8003cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cca:	4b1d      	ldr	r3, [pc, #116]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	60fb      	str	r3, [r7, #12]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	60bb      	str	r3, [r7, #8]
 8003cda:	4b19      	ldr	r3, [pc, #100]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cde:	4a18      	ldr	r2, [pc, #96]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ce6:	4b16      	ldr	r3, [pc, #88]	@ (8003d40 <HAL_SPI_MspInit+0xc4>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	60bb      	str	r3, [r7, #8]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8003cf2:	2318      	movs	r3, #24
 8003cf4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf6:	2302      	movs	r3, #2
 8003cf8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d02:	2305      	movs	r3, #5
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d06:	f107 0314 	add.w	r3, r7, #20
 8003d0a:	4619      	mov	r1, r3
 8003d0c:	480d      	ldr	r0, [pc, #52]	@ (8003d44 <HAL_SPI_MspInit+0xc8>)
 8003d0e:	f002 f84f 	bl	8005db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003d12:	2380      	movs	r3, #128	@ 0x80
 8003d14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d16:	2302      	movs	r3, #2
 8003d18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1e:	2303      	movs	r3, #3
 8003d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d22:	2305      	movs	r3, #5
 8003d24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4806      	ldr	r0, [pc, #24]	@ (8003d48 <HAL_SPI_MspInit+0xcc>)
 8003d2e:	f002 f83f 	bl	8005db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003d32:	bf00      	nop
 8003d34:	3728      	adds	r7, #40	@ 0x28
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	40013000 	.word	0x40013000
 8003d40:	40023800 	.word	0x40023800
 8003d44:	40020400 	.word	0x40020400
 8003d48:	40020000 	.word	0x40020000

08003d4c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1f      	ldr	r2, [pc, #124]	@ (8003dd8 <HAL_TIM_PWM_MspInit+0x8c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d10e      	bne.n	8003d7c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003d5e:	2300      	movs	r3, #0
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	4b1e      	ldr	r3, [pc, #120]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d66:	4a1d      	ldr	r2, [pc, #116]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003d68:	f043 0301 	orr.w	r3, r3, #1
 8003d6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003d70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d72:	f003 0301 	and.w	r3, r3, #1
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003d7a:	e026      	b.n	8003dca <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a17      	ldr	r2, [pc, #92]	@ (8003de0 <HAL_TIM_PWM_MspInit+0x94>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d10e      	bne.n	8003da4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003d86:	2300      	movs	r3, #0
 8003d88:	613b      	str	r3, [r7, #16]
 8003d8a:	4b14      	ldr	r3, [pc, #80]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d8e:	4a13      	ldr	r2, [pc, #76]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003d90:	f043 0308 	orr.w	r3, r3, #8
 8003d94:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d96:	4b11      	ldr	r3, [pc, #68]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	613b      	str	r3, [r7, #16]
 8003da0:	693b      	ldr	r3, [r7, #16]
}
 8003da2:	e012      	b.n	8003dca <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0e      	ldr	r2, [pc, #56]	@ (8003de4 <HAL_TIM_PWM_MspInit+0x98>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d10d      	bne.n	8003dca <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60fb      	str	r3, [r7, #12]
 8003db2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003db6:	4a09      	ldr	r2, [pc, #36]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003db8:	f043 0302 	orr.w	r3, r3, #2
 8003dbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003dbe:	4b07      	ldr	r3, [pc, #28]	@ (8003ddc <HAL_TIM_PWM_MspInit+0x90>)
 8003dc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003dc2:	f003 0302 	and.w	r3, r3, #2
 8003dc6:	60fb      	str	r3, [r7, #12]
 8003dc8:	68fb      	ldr	r3, [r7, #12]
}
 8003dca:	bf00      	nop
 8003dcc:	371c      	adds	r7, #28
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	40010000 	.word	0x40010000
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	40000c00 	.word	0x40000c00
 8003de4:	40010400 	.word	0x40010400

08003de8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a15      	ldr	r2, [pc, #84]	@ (8003e4c <HAL_TIM_Base_MspInit+0x64>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d10e      	bne.n	8003e18 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60fb      	str	r3, [r7, #12]
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <HAL_TIM_Base_MspInit+0x68>)
 8003e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e02:	4a13      	ldr	r2, [pc, #76]	@ (8003e50 <HAL_TIM_Base_MspInit+0x68>)
 8003e04:	f043 0304 	orr.w	r3, r3, #4
 8003e08:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e0a:	4b11      	ldr	r3, [pc, #68]	@ (8003e50 <HAL_TIM_Base_MspInit+0x68>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e0e:	f003 0304 	and.w	r3, r3, #4
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8003e16:	e012      	b.n	8003e3e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a0d      	ldr	r2, [pc, #52]	@ (8003e54 <HAL_TIM_Base_MspInit+0x6c>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d10d      	bne.n	8003e3e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8003e22:	2300      	movs	r3, #0
 8003e24:	60bb      	str	r3, [r7, #8]
 8003e26:	4b0a      	ldr	r3, [pc, #40]	@ (8003e50 <HAL_TIM_Base_MspInit+0x68>)
 8003e28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e2a:	4a09      	ldr	r2, [pc, #36]	@ (8003e50 <HAL_TIM_Base_MspInit+0x68>)
 8003e2c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003e30:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e32:	4b07      	ldr	r3, [pc, #28]	@ (8003e50 <HAL_TIM_Base_MspInit+0x68>)
 8003e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3a:	60bb      	str	r3, [r7, #8]
 8003e3c:	68bb      	ldr	r3, [r7, #8]
}
 8003e3e:	bf00      	nop
 8003e40:	3714      	adds	r7, #20
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40014400 	.word	0x40014400

08003e58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08e      	sub	sp, #56	@ 0x38
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003e64:	2200      	movs	r2, #0
 8003e66:	601a      	str	r2, [r3, #0]
 8003e68:	605a      	str	r2, [r3, #4]
 8003e6a:	609a      	str	r2, [r3, #8]
 8003e6c:	60da      	str	r2, [r3, #12]
 8003e6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a6a      	ldr	r2, [pc, #424]	@ (8004020 <HAL_TIM_MspPostInit+0x1c8>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d11f      	bne.n	8003eba <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	623b      	str	r3, [r7, #32]
 8003e7e:	4b69      	ldr	r3, [pc, #420]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e82:	4a68      	ldr	r2, [pc, #416]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003e84:	f043 0310 	orr.w	r3, r3, #16
 8003e88:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e8a:	4b66      	ldr	r3, [pc, #408]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	623b      	str	r3, [r7, #32]
 8003e94:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8003e96:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8003e9a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003eac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	485d      	ldr	r0, [pc, #372]	@ (8004028 <HAL_TIM_MspPostInit+0x1d0>)
 8003eb4:	f001 ff7c 	bl	8005db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8003eb8:	e0ae      	b.n	8004018 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a5b      	ldr	r2, [pc, #364]	@ (800402c <HAL_TIM_MspPostInit+0x1d4>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d11f      	bne.n	8003f04 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
 8003ec8:	4b56      	ldr	r3, [pc, #344]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ecc:	4a55      	ldr	r2, [pc, #340]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003ece:	f043 0308 	orr.w	r3, r3, #8
 8003ed2:	6313      	str	r3, [r2, #48]	@ 0x30
 8003ed4:	4b53      	ldr	r3, [pc, #332]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ed8:	f003 0308 	and.w	r3, r3, #8
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8003ee0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee6:	2302      	movs	r3, #2
 8003ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eea:	2300      	movs	r3, #0
 8003eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8003ef2:	2302      	movs	r3, #2
 8003ef4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ef6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003efa:	4619      	mov	r1, r3
 8003efc:	484c      	ldr	r0, [pc, #304]	@ (8004030 <HAL_TIM_MspPostInit+0x1d8>)
 8003efe:	f001 ff57 	bl	8005db0 <HAL_GPIO_Init>
}
 8003f02:	e089      	b.n	8004018 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a4a      	ldr	r2, [pc, #296]	@ (8004034 <HAL_TIM_MspPostInit+0x1dc>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d11f      	bne.n	8003f4e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f0e:	2300      	movs	r3, #0
 8003f10:	61bb      	str	r3, [r7, #24]
 8003f12:	4b44      	ldr	r3, [pc, #272]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f16:	4a43      	ldr	r2, [pc, #268]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f1e:	4b41      	ldr	r3, [pc, #260]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8003f2a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8003f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f30:	2302      	movs	r3, #2
 8003f32:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f38:	2300      	movs	r3, #0
 8003f3a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003f3c:	2302      	movs	r3, #2
 8003f3e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f44:	4619      	mov	r1, r3
 8003f46:	483c      	ldr	r0, [pc, #240]	@ (8004038 <HAL_TIM_MspPostInit+0x1e0>)
 8003f48:	f001 ff32 	bl	8005db0 <HAL_GPIO_Init>
}
 8003f4c:	e064      	b.n	8004018 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a3a      	ldr	r2, [pc, #232]	@ (800403c <HAL_TIM_MspPostInit+0x1e4>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d13c      	bne.n	8003fd2 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]
 8003f5c:	4b31      	ldr	r3, [pc, #196]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f60:	4a30      	ldr	r2, [pc, #192]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f66:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f68:	4b2e      	ldr	r3, [pc, #184]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f70:	617b      	str	r3, [r7, #20]
 8003f72:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f74:	2300      	movs	r3, #0
 8003f76:	613b      	str	r3, [r7, #16]
 8003f78:	4b2a      	ldr	r3, [pc, #168]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7c:	4a29      	ldr	r2, [pc, #164]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f7e:	f043 0304 	orr.w	r3, r3, #4
 8003f82:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f84:	4b27      	ldr	r3, [pc, #156]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003f86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8003f90:	23c0      	movs	r3, #192	@ 0xc0
 8003f92:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f94:	2302      	movs	r3, #2
 8003f96:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8003fa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fa8:	4619      	mov	r1, r3
 8003faa:	4825      	ldr	r0, [pc, #148]	@ (8004040 <HAL_TIM_MspPostInit+0x1e8>)
 8003fac:	f001 ff00 	bl	8005db0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fb0:	2340      	movs	r3, #64	@ 0x40
 8003fb2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003fc0:	2303      	movs	r3, #3
 8003fc2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fc8:	4619      	mov	r1, r3
 8003fca:	481e      	ldr	r0, [pc, #120]	@ (8004044 <HAL_TIM_MspPostInit+0x1ec>)
 8003fcc:	f001 fef0 	bl	8005db0 <HAL_GPIO_Init>
}
 8003fd0:	e022      	b.n	8004018 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a1c      	ldr	r2, [pc, #112]	@ (8004048 <HAL_TIM_MspPostInit+0x1f0>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d11d      	bne.n	8004018 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003fdc:	2300      	movs	r3, #0
 8003fde:	60fb      	str	r3, [r7, #12]
 8003fe0:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	4a0f      	ldr	r2, [pc, #60]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003fe6:	f043 0320 	orr.w	r3, r3, #32
 8003fea:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fec:	4b0d      	ldr	r3, [pc, #52]	@ (8004024 <HAL_TIM_MspPostInit+0x1cc>)
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	f003 0320 	and.w	r3, r3, #32
 8003ff4:	60fb      	str	r3, [r7, #12]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003ff8:	2340      	movs	r3, #64	@ 0x40
 8003ffa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004000:	2301      	movs	r3, #1
 8004002:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004004:	2302      	movs	r3, #2
 8004006:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004008:	2303      	movs	r3, #3
 800400a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800400c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004010:	4619      	mov	r1, r3
 8004012:	480e      	ldr	r0, [pc, #56]	@ (800404c <HAL_TIM_MspPostInit+0x1f4>)
 8004014:	f001 fecc 	bl	8005db0 <HAL_GPIO_Init>
}
 8004018:	bf00      	nop
 800401a:	3738      	adds	r7, #56	@ 0x38
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40010000 	.word	0x40010000
 8004024:	40023800 	.word	0x40023800
 8004028:	40021000 	.word	0x40021000
 800402c:	40000800 	.word	0x40000800
 8004030:	40020c00 	.word	0x40020c00
 8004034:	40000c00 	.word	0x40000c00
 8004038:	40021c00 	.word	0x40021c00
 800403c:	40010400 	.word	0x40010400
 8004040:	40022000 	.word	0x40022000
 8004044:	40020800 	.word	0x40020800
 8004048:	40014400 	.word	0x40014400
 800404c:	40021400 	.word	0x40021400

08004050 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	@ 0x38
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004058:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800405c:	2200      	movs	r2, #0
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	605a      	str	r2, [r3, #4]
 8004062:	609a      	str	r2, [r3, #8]
 8004064:	60da      	str	r2, [r3, #12]
 8004066:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a90      	ldr	r2, [pc, #576]	@ (80042b0 <HAL_UART_MspInit+0x260>)
 800406e:	4293      	cmp	r3, r2
 8004070:	f040 80b2 	bne.w	80041d8 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004074:	2300      	movs	r3, #0
 8004076:	623b      	str	r3, [r7, #32]
 8004078:	4b8e      	ldr	r3, [pc, #568]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 800407a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407c:	4a8d      	ldr	r2, [pc, #564]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 800407e:	f043 0310 	orr.w	r3, r3, #16
 8004082:	6453      	str	r3, [r2, #68]	@ 0x44
 8004084:	4b8b      	ldr	r3, [pc, #556]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 8004086:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004088:	f003 0310 	and.w	r3, r3, #16
 800408c:	623b      	str	r3, [r7, #32]
 800408e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	4b87      	ldr	r3, [pc, #540]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004098:	4a86      	ldr	r2, [pc, #536]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	6313      	str	r3, [r2, #48]	@ 0x30
 80040a0:	4b84      	ldr	r3, [pc, #528]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	61fb      	str	r3, [r7, #28]
 80040aa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	2300      	movs	r3, #0
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	4b80      	ldr	r3, [pc, #512]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 80040b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b4:	4a7f      	ldr	r2, [pc, #508]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 80040b6:	f043 0301 	orr.w	r3, r3, #1
 80040ba:	6313      	str	r3, [r2, #48]	@ 0x30
 80040bc:	4b7d      	ldr	r3, [pc, #500]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 80040be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
 80040c6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80040c8:	2380      	movs	r3, #128	@ 0x80
 80040ca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040cc:	2302      	movs	r3, #2
 80040ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d0:	2300      	movs	r3, #0
 80040d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040d4:	2303      	movs	r3, #3
 80040d6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040d8:	2307      	movs	r3, #7
 80040da:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80040e0:	4619      	mov	r1, r3
 80040e2:	4875      	ldr	r0, [pc, #468]	@ (80042b8 <HAL_UART_MspInit+0x268>)
 80040e4:	f001 fe64 	bl	8005db0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80040e8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80040ec:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040ee:	2302      	movs	r3, #2
 80040f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f2:	2300      	movs	r3, #0
 80040f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040f6:	2303      	movs	r3, #3
 80040f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80040fa:	2307      	movs	r3, #7
 80040fc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004102:	4619      	mov	r1, r3
 8004104:	486d      	ldr	r0, [pc, #436]	@ (80042bc <HAL_UART_MspInit+0x26c>)
 8004106:	f001 fe53 	bl	8005db0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800410a:	4b6d      	ldr	r3, [pc, #436]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 800410c:	4a6d      	ldr	r2, [pc, #436]	@ (80042c4 <HAL_UART_MspInit+0x274>)
 800410e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8004110:	4b6b      	ldr	r3, [pc, #428]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004112:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004116:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004118:	4b69      	ldr	r3, [pc, #420]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 800411a:	2240      	movs	r2, #64	@ 0x40
 800411c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800411e:	4b68      	ldr	r3, [pc, #416]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004120:	2200      	movs	r2, #0
 8004122:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004124:	4b66      	ldr	r3, [pc, #408]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004126:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800412a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800412c:	4b64      	ldr	r3, [pc, #400]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 800412e:	2200      	movs	r2, #0
 8004130:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004132:	4b63      	ldr	r3, [pc, #396]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004134:	2200      	movs	r2, #0
 8004136:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8004138:	4b61      	ldr	r3, [pc, #388]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 800413a:	2200      	movs	r2, #0
 800413c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800413e:	4b60      	ldr	r3, [pc, #384]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004140:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004144:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004146:	4b5e      	ldr	r3, [pc, #376]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004148:	2200      	movs	r2, #0
 800414a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800414c:	485c      	ldr	r0, [pc, #368]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 800414e:	f001 fa2d 	bl	80055ac <HAL_DMA_Init>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d001      	beq.n	800415c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8004158:	f7fe fe66 	bl	8002e28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a58      	ldr	r2, [pc, #352]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004160:	635a      	str	r2, [r3, #52]	@ 0x34
 8004162:	4a57      	ldr	r2, [pc, #348]	@ (80042c0 <HAL_UART_MspInit+0x270>)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8004168:	4b57      	ldr	r3, [pc, #348]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 800416a:	4a58      	ldr	r2, [pc, #352]	@ (80042cc <HAL_UART_MspInit+0x27c>)
 800416c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800416e:	4b56      	ldr	r3, [pc, #344]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 8004170:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004174:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004176:	4b54      	ldr	r3, [pc, #336]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 8004178:	2200      	movs	r2, #0
 800417a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800417c:	4b52      	ldr	r3, [pc, #328]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 800417e:	2200      	movs	r2, #0
 8004180:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004182:	4b51      	ldr	r3, [pc, #324]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 8004184:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004188:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800418a:	4b4f      	ldr	r3, [pc, #316]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 800418c:	2200      	movs	r2, #0
 800418e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004190:	4b4d      	ldr	r3, [pc, #308]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 8004192:	2200      	movs	r2, #0
 8004194:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8004196:	4b4c      	ldr	r3, [pc, #304]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 8004198:	2200      	movs	r2, #0
 800419a:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800419c:	4b4a      	ldr	r3, [pc, #296]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 800419e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80041a2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80041a4:	4b48      	ldr	r3, [pc, #288]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 80041a6:	2200      	movs	r2, #0
 80041a8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80041aa:	4847      	ldr	r0, [pc, #284]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 80041ac:	f001 f9fe 	bl	80055ac <HAL_DMA_Init>
 80041b0:	4603      	mov	r3, r0
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80041b6:	f7fe fe37 	bl	8002e28 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a42      	ldr	r2, [pc, #264]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 80041be:	639a      	str	r2, [r3, #56]	@ 0x38
 80041c0:	4a41      	ldr	r2, [pc, #260]	@ (80042c8 <HAL_UART_MspInit+0x278>)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80041c6:	2200      	movs	r2, #0
 80041c8:	2105      	movs	r1, #5
 80041ca:	2025      	movs	r0, #37	@ 0x25
 80041cc:	f001 f9b7 	bl	800553e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80041d0:	2025      	movs	r0, #37	@ 0x25
 80041d2:	f001 f9d0 	bl	8005576 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80041d6:	e11c      	b.n	8004412 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a3c      	ldr	r2, [pc, #240]	@ (80042d0 <HAL_UART_MspInit+0x280>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d17e      	bne.n	80042e0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 80041e2:	2300      	movs	r3, #0
 80041e4:	617b      	str	r3, [r7, #20]
 80041e6:	4b33      	ldr	r3, [pc, #204]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 80041e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ea:	4a32      	ldr	r2, [pc, #200]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 80041ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80041f2:	4b30      	ldr	r3, [pc, #192]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 80041f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041fa:	617b      	str	r3, [r7, #20]
 80041fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80041fe:	2300      	movs	r3, #0
 8004200:	613b      	str	r3, [r7, #16]
 8004202:	4b2c      	ldr	r3, [pc, #176]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004206:	4a2b      	ldr	r2, [pc, #172]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 8004208:	f043 0304 	orr.w	r3, r3, #4
 800420c:	6313      	str	r3, [r2, #48]	@ 0x30
 800420e:	4b29      	ldr	r3, [pc, #164]	@ (80042b4 <HAL_UART_MspInit+0x264>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004212:	f003 0304 	and.w	r3, r3, #4
 8004216:	613b      	str	r3, [r7, #16]
 8004218:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800421a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800421e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004220:	2302      	movs	r3, #2
 8004222:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004224:	2300      	movs	r3, #0
 8004226:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004228:	2303      	movs	r3, #3
 800422a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800422c:	2307      	movs	r3, #7
 800422e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004230:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004234:	4619      	mov	r1, r3
 8004236:	4827      	ldr	r0, [pc, #156]	@ (80042d4 <HAL_UART_MspInit+0x284>)
 8004238:	f001 fdba 	bl	8005db0 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800423c:	4b26      	ldr	r3, [pc, #152]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 800423e:	4a27      	ldr	r2, [pc, #156]	@ (80042dc <HAL_UART_MspInit+0x28c>)
 8004240:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8004242:	4b25      	ldr	r3, [pc, #148]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004244:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004248:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800424a:	4b23      	ldr	r3, [pc, #140]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 800424c:	2200      	movs	r2, #0
 800424e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004250:	4b21      	ldr	r3, [pc, #132]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004252:	2200      	movs	r2, #0
 8004254:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004256:	4b20      	ldr	r3, [pc, #128]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004258:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800425c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800425e:	4b1e      	ldr	r3, [pc, #120]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004260:	2200      	movs	r2, #0
 8004262:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004264:	4b1c      	ldr	r3, [pc, #112]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004266:	2200      	movs	r2, #0
 8004268:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800426a:	4b1b      	ldr	r3, [pc, #108]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 800426c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004270:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8004272:	4b19      	ldr	r3, [pc, #100]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004274:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004278:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800427a:	4b17      	ldr	r3, [pc, #92]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 800427c:	2200      	movs	r2, #0
 800427e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8004280:	4815      	ldr	r0, [pc, #84]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004282:	f001 f993 	bl	80055ac <HAL_DMA_Init>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800428c:	f7fe fdcc 	bl	8002e28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a11      	ldr	r2, [pc, #68]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004294:	639a      	str	r2, [r3, #56]	@ 0x38
 8004296:	4a10      	ldr	r2, [pc, #64]	@ (80042d8 <HAL_UART_MspInit+0x288>)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800429c:	2200      	movs	r2, #0
 800429e:	2105      	movs	r1, #5
 80042a0:	2027      	movs	r0, #39	@ 0x27
 80042a2:	f001 f94c 	bl	800553e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80042a6:	2027      	movs	r0, #39	@ 0x27
 80042a8:	f001 f965 	bl	8005576 <HAL_NVIC_EnableIRQ>
}
 80042ac:	e0b1      	b.n	8004412 <HAL_UART_MspInit+0x3c2>
 80042ae:	bf00      	nop
 80042b0:	40011000 	.word	0x40011000
 80042b4:	40023800 	.word	0x40023800
 80042b8:	40020400 	.word	0x40020400
 80042bc:	40020000 	.word	0x40020000
 80042c0:	200008d0 	.word	0x200008d0
 80042c4:	400264b8 	.word	0x400264b8
 80042c8:	20000930 	.word	0x20000930
 80042cc:	40026440 	.word	0x40026440
 80042d0:	40004800 	.word	0x40004800
 80042d4:	40020800 	.word	0x40020800
 80042d8:	20000990 	.word	0x20000990
 80042dc:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a4d      	ldr	r2, [pc, #308]	@ (800441c <HAL_UART_MspInit+0x3cc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	f040 8093 	bne.w	8004412 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80042ec:	2300      	movs	r3, #0
 80042ee:	60fb      	str	r3, [r7, #12]
 80042f0:	4b4b      	ldr	r3, [pc, #300]	@ (8004420 <HAL_UART_MspInit+0x3d0>)
 80042f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042f4:	4a4a      	ldr	r2, [pc, #296]	@ (8004420 <HAL_UART_MspInit+0x3d0>)
 80042f6:	f043 0320 	orr.w	r3, r3, #32
 80042fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80042fc:	4b48      	ldr	r3, [pc, #288]	@ (8004420 <HAL_UART_MspInit+0x3d0>)
 80042fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004300:	f003 0320 	and.w	r3, r3, #32
 8004304:	60fb      	str	r3, [r7, #12]
 8004306:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004308:	2300      	movs	r3, #0
 800430a:	60bb      	str	r3, [r7, #8]
 800430c:	4b44      	ldr	r3, [pc, #272]	@ (8004420 <HAL_UART_MspInit+0x3d0>)
 800430e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004310:	4a43      	ldr	r2, [pc, #268]	@ (8004420 <HAL_UART_MspInit+0x3d0>)
 8004312:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004316:	6313      	str	r3, [r2, #48]	@ 0x30
 8004318:	4b41      	ldr	r3, [pc, #260]	@ (8004420 <HAL_UART_MspInit+0x3d0>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004320:	60bb      	str	r3, [r7, #8]
 8004322:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8004324:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8004328:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800432a:	2302      	movs	r3, #2
 800432c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800432e:	2300      	movs	r3, #0
 8004330:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004332:	2303      	movs	r3, #3
 8004334:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004336:	2308      	movs	r3, #8
 8004338:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800433a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800433e:	4619      	mov	r1, r3
 8004340:	4838      	ldr	r0, [pc, #224]	@ (8004424 <HAL_UART_MspInit+0x3d4>)
 8004342:	f001 fd35 	bl	8005db0 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8004346:	4b38      	ldr	r3, [pc, #224]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 8004348:	4a38      	ldr	r2, [pc, #224]	@ (800442c <HAL_UART_MspInit+0x3dc>)
 800434a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800434c:	4b36      	ldr	r3, [pc, #216]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 800434e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8004352:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004354:	4b34      	ldr	r3, [pc, #208]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 8004356:	2200      	movs	r2, #0
 8004358:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800435a:	4b33      	ldr	r3, [pc, #204]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 800435c:	2200      	movs	r2, #0
 800435e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004360:	4b31      	ldr	r3, [pc, #196]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 8004362:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004366:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004368:	4b2f      	ldr	r3, [pc, #188]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 800436a:	2200      	movs	r2, #0
 800436c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800436e:	4b2e      	ldr	r3, [pc, #184]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 8004370:	2200      	movs	r2, #0
 8004372:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8004374:	4b2c      	ldr	r3, [pc, #176]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 8004376:	2200      	movs	r2, #0
 8004378:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800437a:	4b2b      	ldr	r3, [pc, #172]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 800437c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8004380:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004382:	4b29      	ldr	r3, [pc, #164]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 8004384:	2200      	movs	r2, #0
 8004386:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8004388:	4827      	ldr	r0, [pc, #156]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 800438a:	f001 f90f 	bl	80055ac <HAL_DMA_Init>
 800438e:	4603      	mov	r3, r0
 8004390:	2b00      	cmp	r3, #0
 8004392:	d001      	beq.n	8004398 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8004394:	f7fe fd48 	bl	8002e28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4a23      	ldr	r2, [pc, #140]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 800439c:	639a      	str	r2, [r3, #56]	@ 0x38
 800439e:	4a22      	ldr	r2, [pc, #136]	@ (8004428 <HAL_UART_MspInit+0x3d8>)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80043a4:	4b22      	ldr	r3, [pc, #136]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043a6:	4a23      	ldr	r2, [pc, #140]	@ (8004434 <HAL_UART_MspInit+0x3e4>)
 80043a8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80043aa:	4b21      	ldr	r3, [pc, #132]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043ac:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80043b0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80043b2:	4b1f      	ldr	r3, [pc, #124]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043b4:	2240      	movs	r2, #64	@ 0x40
 80043b6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80043b8:	4b1d      	ldr	r3, [pc, #116]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043ba:	2200      	movs	r2, #0
 80043bc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80043be:	4b1c      	ldr	r3, [pc, #112]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043c0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80043c4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80043c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80043cc:	4b18      	ldr	r3, [pc, #96]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043ce:	2200      	movs	r2, #0
 80043d0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80043d2:	4b17      	ldr	r3, [pc, #92]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80043d8:	4b15      	ldr	r3, [pc, #84]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043da:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80043de:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80043e0:	4b13      	ldr	r3, [pc, #76]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043e2:	2200      	movs	r2, #0
 80043e4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80043e6:	4812      	ldr	r0, [pc, #72]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043e8:	f001 f8e0 	bl	80055ac <HAL_DMA_Init>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 80043f2:	f7fe fd19 	bl	8002e28 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a0d      	ldr	r2, [pc, #52]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043fa:	635a      	str	r2, [r3, #52]	@ 0x34
 80043fc:	4a0c      	ldr	r2, [pc, #48]	@ (8004430 <HAL_UART_MspInit+0x3e0>)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8004402:	2200      	movs	r2, #0
 8004404:	2105      	movs	r1, #5
 8004406:	2047      	movs	r0, #71	@ 0x47
 8004408:	f001 f899 	bl	800553e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800440c:	2047      	movs	r0, #71	@ 0x47
 800440e:	f001 f8b2 	bl	8005576 <HAL_NVIC_EnableIRQ>
}
 8004412:	bf00      	nop
 8004414:	3738      	adds	r7, #56	@ 0x38
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	40011400 	.word	0x40011400
 8004420:	40023800 	.word	0x40023800
 8004424:	40021800 	.word	0x40021800
 8004428:	200009f0 	.word	0x200009f0
 800442c:	40026428 	.word	0x40026428
 8004430:	20000a50 	.word	0x20000a50
 8004434:	400264a0 	.word	0x400264a0

08004438 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800443c:	f003 f8d8 	bl	80075f0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004440:	bf00      	nop
 8004442:	e7fd      	b.n	8004440 <NMI_Handler+0x8>

08004444 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004444:	b480      	push	{r7}
 8004446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <HardFault_Handler+0x4>

0800444c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800444c:	b480      	push	{r7}
 800444e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004450:	bf00      	nop
 8004452:	e7fd      	b.n	8004450 <MemManage_Handler+0x4>

08004454 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004454:	b480      	push	{r7}
 8004456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004458:	bf00      	nop
 800445a:	e7fd      	b.n	8004458 <BusFault_Handler+0x4>

0800445c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800445c:	b480      	push	{r7}
 800445e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004460:	bf00      	nop
 8004462:	e7fd      	b.n	8004460 <UsageFault_Handler+0x4>

08004464 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004468:	bf00      	nop
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004476:	f000 f905 	bl	8004684 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800447a:	f007 fb05 	bl	800ba88 <xTaskGetSchedulerState>
 800447e:	4603      	mov	r3, r0
 8004480:	2b01      	cmp	r3, #1
 8004482:	d001      	beq.n	8004488 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8004484:	f008 f9e0 	bl	800c848 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004488:	bf00      	nop
 800448a:	bd80      	pop	{r7, pc}

0800448c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004490:	2008      	movs	r0, #8
 8004492:	f001 fe43 	bl	800611c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  ist8310_read_mag(magnetometerData);
 8004496:	4802      	ldr	r0, [pc, #8]	@ (80044a0 <EXTI3_IRQHandler+0x14>)
 8004498:	f7fd fd7a 	bl	8001f90 <ist8310_read_mag>
  /* USER CODE END EXTI3_IRQn 1 */
}
 800449c:	bf00      	nop
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	20000594 	.word	0x20000594

080044a4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80044a8:	2010      	movs	r0, #16
 80044aa:	f001 fe37 	bl	800611c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80044ae:	bf00      	nop
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80044b8:	4802      	ldr	r0, [pc, #8]	@ (80044c4 <DMA1_Stream1_IRQHandler+0x10>)
 80044ba:	f001 fa0f 	bl	80058dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
 80044c2:	bf00      	nop
 80044c4:	20000990 	.word	0x20000990

080044c8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80044c8:	b580      	push	{r7, lr}
 80044ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80044cc:	4802      	ldr	r0, [pc, #8]	@ (80044d8 <CAN1_RX0_IRQHandler+0x10>)
 80044ce:	f000 fd2c 	bl	8004f2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80044d2:	bf00      	nop
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	bf00      	nop
 80044d8:	200005a0 	.word	0x200005a0

080044dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80044e0:	4802      	ldr	r0, [pc, #8]	@ (80044ec <USART1_IRQHandler+0x10>)
 80044e2:	f004 fbef 	bl	8008cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80044e6:	bf00      	nop
 80044e8:	bd80      	pop	{r7, pc}
 80044ea:	bf00      	nop
 80044ec:	20000804 	.word	0x20000804

080044f0 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80044f4:	4802      	ldr	r0, [pc, #8]	@ (8004500 <DMA2_Stream1_IRQHandler+0x10>)
 80044f6:	f001 f9f1 	bl	80058dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80044fa:	bf00      	nop
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	200009f0 	.word	0x200009f0

08004504 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8004508:	4802      	ldr	r0, [pc, #8]	@ (8004514 <DMA2_Stream2_IRQHandler+0x10>)
 800450a:	f001 f9e7 	bl	80058dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20000930 	.word	0x20000930

08004518 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8004518:	b580      	push	{r7, lr}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 800451c:	4802      	ldr	r0, [pc, #8]	@ (8004528 <CAN2_RX0_IRQHandler+0x10>)
 800451e:	f000 fd04 	bl	8004f2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8004522:	bf00      	nop
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	200005c8 	.word	0x200005c8

0800452c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8004530:	4802      	ldr	r0, [pc, #8]	@ (800453c <DMA2_Stream6_IRQHandler+0x10>)
 8004532:	f001 f9d3 	bl	80058dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000a50 	.word	0x20000a50

08004540 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8004544:	4802      	ldr	r0, [pc, #8]	@ (8004550 <DMA2_Stream7_IRQHandler+0x10>)
 8004546:	f001 f9c9 	bl	80058dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800454a:	bf00      	nop
 800454c:	bd80      	pop	{r7, pc}
 800454e:	bf00      	nop
 8004550:	200008d0 	.word	0x200008d0

08004554 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8004558:	4802      	ldr	r0, [pc, #8]	@ (8004564 <USART6_IRQHandler+0x10>)
 800455a:	f004 fbb3 	bl	8008cc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	bd80      	pop	{r7, pc}
 8004562:	bf00      	nop
 8004564:	2000088c 	.word	0x2000088c

08004568 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800456c:	4b06      	ldr	r3, [pc, #24]	@ (8004588 <SystemInit+0x20>)
 800456e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004572:	4a05      	ldr	r2, [pc, #20]	@ (8004588 <SystemInit+0x20>)
 8004574:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004578:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800457c:	bf00      	nop
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800458c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80045c4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004590:	480d      	ldr	r0, [pc, #52]	@ (80045c8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004592:	490e      	ldr	r1, [pc, #56]	@ (80045cc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004594:	4a0e      	ldr	r2, [pc, #56]	@ (80045d0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004598:	e002      	b.n	80045a0 <LoopCopyDataInit>

0800459a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800459a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800459c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800459e:	3304      	adds	r3, #4

080045a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80045a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80045a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80045a4:	d3f9      	bcc.n	800459a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80045a6:	4a0b      	ldr	r2, [pc, #44]	@ (80045d4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80045a8:	4c0b      	ldr	r4, [pc, #44]	@ (80045d8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80045aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80045ac:	e001      	b.n	80045b2 <LoopFillZerobss>

080045ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80045ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80045b0:	3204      	adds	r2, #4

080045b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80045b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80045b4:	d3fb      	bcc.n	80045ae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80045b6:	f7ff ffd7 	bl	8004568 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045ba:	f008 fc23 	bl	800ce04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045be:	f7fd fd55 	bl	800206c <main>
  bx  lr    
 80045c2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80045c4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80045c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80045cc:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80045d0:	0800d050 	.word	0x0800d050
  ldr r2, =_sbss
 80045d4:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80045d8:	20005674 	.word	0x20005674

080045dc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045dc:	e7fe      	b.n	80045dc <ADC_IRQHandler>
	...

080045e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80045e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004620 <HAL_Init+0x40>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a0d      	ldr	r2, [pc, #52]	@ (8004620 <HAL_Init+0x40>)
 80045ea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80045ee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80045f0:	4b0b      	ldr	r3, [pc, #44]	@ (8004620 <HAL_Init+0x40>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a0a      	ldr	r2, [pc, #40]	@ (8004620 <HAL_Init+0x40>)
 80045f6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80045fa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80045fc:	4b08      	ldr	r3, [pc, #32]	@ (8004620 <HAL_Init+0x40>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a07      	ldr	r2, [pc, #28]	@ (8004620 <HAL_Init+0x40>)
 8004602:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004606:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004608:	2003      	movs	r0, #3
 800460a:	f000 ff8d 	bl	8005528 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800460e:	200f      	movs	r0, #15
 8004610:	f000 f808 	bl	8004624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004614:	f7ff f9ec 	bl	80039f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004618:	2300      	movs	r3, #0
}
 800461a:	4618      	mov	r0, r3
 800461c:	bd80      	pop	{r7, pc}
 800461e:	bf00      	nop
 8004620:	40023c00 	.word	0x40023c00

08004624 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800462c:	4b12      	ldr	r3, [pc, #72]	@ (8004678 <HAL_InitTick+0x54>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b12      	ldr	r3, [pc, #72]	@ (800467c <HAL_InitTick+0x58>)
 8004632:	781b      	ldrb	r3, [r3, #0]
 8004634:	4619      	mov	r1, r3
 8004636:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800463a:	fbb3 f3f1 	udiv	r3, r3, r1
 800463e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004642:	4618      	mov	r0, r3
 8004644:	f000 ffa5 	bl	8005592 <HAL_SYSTICK_Config>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e00e      	b.n	8004670 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b0f      	cmp	r3, #15
 8004656:	d80a      	bhi.n	800466e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004658:	2200      	movs	r2, #0
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004660:	f000 ff6d 	bl	800553e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004664:	4a06      	ldr	r2, [pc, #24]	@ (8004680 <HAL_InitTick+0x5c>)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	2000001c 	.word	0x2000001c
 800467c:	20000024 	.word	0x20000024
 8004680:	20000020 	.word	0x20000020

08004684 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004684:	b480      	push	{r7}
 8004686:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004688:	4b06      	ldr	r3, [pc, #24]	@ (80046a4 <HAL_IncTick+0x20>)
 800468a:	781b      	ldrb	r3, [r3, #0]
 800468c:	461a      	mov	r2, r3
 800468e:	4b06      	ldr	r3, [pc, #24]	@ (80046a8 <HAL_IncTick+0x24>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4413      	add	r3, r2
 8004694:	4a04      	ldr	r2, [pc, #16]	@ (80046a8 <HAL_IncTick+0x24>)
 8004696:	6013      	str	r3, [r2, #0]
}
 8004698:	bf00      	nop
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000024 	.word	0x20000024
 80046a8:	20000b48 	.word	0x20000b48

080046ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80046ac:	b480      	push	{r7}
 80046ae:	af00      	add	r7, sp, #0
  return uwTick;
 80046b0:	4b03      	ldr	r3, [pc, #12]	@ (80046c0 <HAL_GetTick+0x14>)
 80046b2:	681b      	ldr	r3, [r3, #0]
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046bc:	4770      	bx	lr
 80046be:	bf00      	nop
 80046c0:	20000b48 	.word	0x20000b48

080046c4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b084      	sub	sp, #16
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d101      	bne.n	80046d6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e0ed      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d102      	bne.n	80046e8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80046e2:	6878      	ldr	r0, [r7, #4]
 80046e4:	f7ff f9b0 	bl	8003a48 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0201 	orr.w	r2, r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80046f8:	f7ff ffd8 	bl	80046ac <HAL_GetTick>
 80046fc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80046fe:	e012      	b.n	8004726 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004700:	f7ff ffd4 	bl	80046ac <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b0a      	cmp	r3, #10
 800470c:	d90b      	bls.n	8004726 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004712:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2205      	movs	r2, #5
 800471e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e0c5      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0301 	and.w	r3, r3, #1
 8004730:	2b00      	cmp	r3, #0
 8004732:	d0e5      	beq.n	8004700 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681a      	ldr	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f022 0202 	bic.w	r2, r2, #2
 8004742:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004744:	f7ff ffb2 	bl	80046ac <HAL_GetTick>
 8004748:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800474a:	e012      	b.n	8004772 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800474c:	f7ff ffae 	bl	80046ac <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b0a      	cmp	r3, #10
 8004758:	d90b      	bls.n	8004772 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800475e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2205      	movs	r2, #5
 800476a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e09f      	b.n	80048b2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1e5      	bne.n	800474c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	7e1b      	ldrb	r3, [r3, #24]
 8004784:	2b01      	cmp	r3, #1
 8004786:	d108      	bne.n	800479a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004796:	601a      	str	r2, [r3, #0]
 8004798:	e007      	b.n	80047aa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047a8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	7e5b      	ldrb	r3, [r3, #25]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d108      	bne.n	80047c4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681a      	ldr	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047c0:	601a      	str	r2, [r3, #0]
 80047c2:	e007      	b.n	80047d4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80047d2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	7e9b      	ldrb	r3, [r3, #26]
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d108      	bne.n	80047ee <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	681a      	ldr	r2, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f042 0220 	orr.w	r2, r2, #32
 80047ea:	601a      	str	r2, [r3, #0]
 80047ec:	e007      	b.n	80047fe <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0220 	bic.w	r2, r2, #32
 80047fc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	7edb      	ldrb	r3, [r3, #27]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d108      	bne.n	8004818 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0210 	bic.w	r2, r2, #16
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681a      	ldr	r2, [r3, #0]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f042 0210 	orr.w	r2, r2, #16
 8004826:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	7f1b      	ldrb	r3, [r3, #28]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d108      	bne.n	8004842 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f042 0208 	orr.w	r2, r2, #8
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	e007      	b.n	8004852 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	681a      	ldr	r2, [r3, #0]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0208 	bic.w	r2, r2, #8
 8004850:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	7f5b      	ldrb	r3, [r3, #29]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d108      	bne.n	800486c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681a      	ldr	r2, [r3, #0]
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f042 0204 	orr.w	r2, r2, #4
 8004868:	601a      	str	r2, [r3, #0]
 800486a:	e007      	b.n	800487c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f022 0204 	bic.w	r2, r2, #4
 800487a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	689a      	ldr	r2, [r3, #8]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	431a      	orrs	r2, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	431a      	orrs	r2, r3
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	695b      	ldr	r3, [r3, #20]
 8004890:	ea42 0103 	orr.w	r1, r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	1e5a      	subs	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	430a      	orrs	r2, r1
 80048a0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2200      	movs	r2, #0
 80048a6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3710      	adds	r7, #16
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bd80      	pop	{r7, pc}
	...

080048bc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 80048bc:	b480      	push	{r7}
 80048be:	b087      	sub	sp, #28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
 80048c4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	f893 3020 	ldrb.w	r3, [r3, #32]
 80048d2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80048d4:	7cfb      	ldrb	r3, [r7, #19]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d003      	beq.n	80048e2 <HAL_CAN_ConfigFilter+0x26>
 80048da:	7cfb      	ldrb	r3, [r7, #19]
 80048dc:	2b02      	cmp	r3, #2
 80048de:	f040 80be 	bne.w	8004a5e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80048e2:	4b65      	ldr	r3, [pc, #404]	@ (8004a78 <HAL_CAN_ConfigFilter+0x1bc>)
 80048e4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048ec:	f043 0201 	orr.w	r2, r3, #1
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80048fc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004900:	697b      	ldr	r3, [r7, #20]
 8004902:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004910:	021b      	lsls	r3, r3, #8
 8004912:	431a      	orrs	r2, r3
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	695b      	ldr	r3, [r3, #20]
 800491e:	f003 031f 	and.w	r3, r3, #31
 8004922:	2201      	movs	r2, #1
 8004924:	fa02 f303 	lsl.w	r3, r2, r3
 8004928:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	43db      	mvns	r3, r3
 8004934:	401a      	ands	r2, r3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d123      	bne.n	800498c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	43db      	mvns	r3, r3
 800494e:	401a      	ands	r2, r3
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	68db      	ldr	r3, [r3, #12]
 800495a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	685b      	ldr	r3, [r3, #4]
 8004960:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004962:	683a      	ldr	r2, [r7, #0]
 8004964:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004966:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	3248      	adds	r2, #72	@ 0x48
 800496c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004980:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004982:	6979      	ldr	r1, [r7, #20]
 8004984:	3348      	adds	r3, #72	@ 0x48
 8004986:	00db      	lsls	r3, r3, #3
 8004988:	440b      	add	r3, r1
 800498a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	69db      	ldr	r3, [r3, #28]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d122      	bne.n	80049da <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	431a      	orrs	r2, r3
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049b0:	683a      	ldr	r2, [r7, #0]
 80049b2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80049b4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	3248      	adds	r2, #72	@ 0x48
 80049ba:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	689b      	ldr	r3, [r3, #8]
 80049c2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	68db      	ldr	r3, [r3, #12]
 80049c8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80049ce:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80049d0:	6979      	ldr	r1, [r7, #20]
 80049d2:	3348      	adds	r3, #72	@ 0x48
 80049d4:	00db      	lsls	r3, r3, #3
 80049d6:	440b      	add	r3, r1
 80049d8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80049da:	683b      	ldr	r3, [r7, #0]
 80049dc:	699b      	ldr	r3, [r3, #24]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d109      	bne.n	80049f6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80049e2:	697b      	ldr	r3, [r7, #20]
 80049e4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	43db      	mvns	r3, r3
 80049ec:	401a      	ands	r2, r3
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80049f4:	e007      	b.n	8004a06 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	431a      	orrs	r2, r3
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	691b      	ldr	r3, [r3, #16]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d109      	bne.n	8004a22 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	43db      	mvns	r3, r3
 8004a18:	401a      	ands	r2, r3
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004a20:	e007      	b.n	8004a32 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004a22:	697b      	ldr	r3, [r7, #20]
 8004a24:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	6a1b      	ldr	r3, [r3, #32]
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d107      	bne.n	8004a4a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	697b      	ldr	r3, [r7, #20]
 8004a46:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004a4a:	697b      	ldr	r3, [r7, #20]
 8004a4c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004a50:	f023 0201 	bic.w	r2, r3, #1
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	e006      	b.n	8004a6c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a62:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004a6a:	2301      	movs	r3, #1
  }
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	371c      	adds	r7, #28
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr
 8004a78:	40006400 	.word	0x40006400

08004a7c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004a8a:	b2db      	uxtb	r3, r3
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d12e      	bne.n	8004aee <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2202      	movs	r2, #2
 8004a94:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681a      	ldr	r2, [r3, #0]
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f022 0201 	bic.w	r2, r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004aa8:	f7ff fe00 	bl	80046ac <HAL_GetTick>
 8004aac:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004aae:	e012      	b.n	8004ad6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ab0:	f7ff fdfc 	bl	80046ac <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b0a      	cmp	r3, #10
 8004abc:	d90b      	bls.n	8004ad6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2205      	movs	r2, #5
 8004ace:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e012      	b.n	8004afc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f003 0301 	and.w	r3, r3, #1
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d1e5      	bne.n	8004ab0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004aea:	2300      	movs	r3, #0
 8004aec:	e006      	b.n	8004afc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b089      	sub	sp, #36	@ 0x24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
 8004b10:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b18:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	689b      	ldr	r3, [r3, #8]
 8004b20:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004b22:	7ffb      	ldrb	r3, [r7, #31]
 8004b24:	2b01      	cmp	r3, #1
 8004b26:	d003      	beq.n	8004b30 <HAL_CAN_AddTxMessage+0x2c>
 8004b28:	7ffb      	ldrb	r3, [r7, #31]
 8004b2a:	2b02      	cmp	r3, #2
 8004b2c:	f040 80b8 	bne.w	8004ca0 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d105      	bne.n	8004b50 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	f000 80a0 	beq.w	8004c90 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	0e1b      	lsrs	r3, r3, #24
 8004b54:	f003 0303 	and.w	r3, r3, #3
 8004b58:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d907      	bls.n	8004b70 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b64:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e09e      	b.n	8004cae <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004b70:	2201      	movs	r2, #1
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	409a      	lsls	r2, r3
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10d      	bne.n	8004b9e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	6809      	ldr	r1, [r1, #0]
 8004b90:	431a      	orrs	r2, r3
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	3318      	adds	r3, #24
 8004b96:	011b      	lsls	r3, r3, #4
 8004b98:	440b      	add	r3, r1
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	e00f      	b.n	8004bbe <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004ba8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bae:	68f9      	ldr	r1, [r7, #12]
 8004bb0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004bb2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	3318      	adds	r3, #24
 8004bb8:	011b      	lsls	r3, r3, #4
 8004bba:	440b      	add	r3, r1
 8004bbc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6819      	ldr	r1, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	691a      	ldr	r2, [r3, #16]
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	3318      	adds	r3, #24
 8004bca:	011b      	lsls	r3, r3, #4
 8004bcc:	440b      	add	r3, r1
 8004bce:	3304      	adds	r3, #4
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004bd2:	68bb      	ldr	r3, [r7, #8]
 8004bd4:	7d1b      	ldrb	r3, [r3, #20]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d111      	bne.n	8004bfe <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	697b      	ldr	r3, [r7, #20]
 8004be0:	3318      	adds	r3, #24
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	4413      	add	r3, r2
 8004be6:	3304      	adds	r3, #4
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68fa      	ldr	r2, [r7, #12]
 8004bec:	6811      	ldr	r1, [r2, #0]
 8004bee:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004bf2:	697b      	ldr	r3, [r7, #20]
 8004bf4:	3318      	adds	r3, #24
 8004bf6:	011b      	lsls	r3, r3, #4
 8004bf8:	440b      	add	r3, r1
 8004bfa:	3304      	adds	r3, #4
 8004bfc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	3307      	adds	r3, #7
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	061a      	lsls	r2, r3, #24
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	3306      	adds	r3, #6
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	041b      	lsls	r3, r3, #16
 8004c0e:	431a      	orrs	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	3305      	adds	r3, #5
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	021b      	lsls	r3, r3, #8
 8004c18:	4313      	orrs	r3, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	3204      	adds	r2, #4
 8004c1e:	7812      	ldrb	r2, [r2, #0]
 8004c20:	4610      	mov	r0, r2
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	6811      	ldr	r1, [r2, #0]
 8004c26:	ea43 0200 	orr.w	r2, r3, r0
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	011b      	lsls	r3, r3, #4
 8004c2e:	440b      	add	r3, r1
 8004c30:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8004c34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	3303      	adds	r3, #3
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	061a      	lsls	r2, r3, #24
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	3302      	adds	r3, #2
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	041b      	lsls	r3, r3, #16
 8004c46:	431a      	orrs	r2, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	3301      	adds	r3, #1
 8004c4c:	781b      	ldrb	r3, [r3, #0]
 8004c4e:	021b      	lsls	r3, r3, #8
 8004c50:	4313      	orrs	r3, r2
 8004c52:	687a      	ldr	r2, [r7, #4]
 8004c54:	7812      	ldrb	r2, [r2, #0]
 8004c56:	4610      	mov	r0, r2
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	6811      	ldr	r1, [r2, #0]
 8004c5c:	ea43 0200 	orr.w	r2, r3, r0
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	011b      	lsls	r3, r3, #4
 8004c64:	440b      	add	r3, r1
 8004c66:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8004c6a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	3318      	adds	r3, #24
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	4413      	add	r3, r2
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	6811      	ldr	r1, [r2, #0]
 8004c7e:	f043 0201 	orr.w	r2, r3, #1
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	3318      	adds	r3, #24
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	440b      	add	r3, r1
 8004c8a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	e00e      	b.n	8004cae <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c94:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e006      	b.n	8004cae <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ca4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
  }
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3724      	adds	r7, #36	@ 0x24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr

08004cba <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004cba:	b480      	push	{r7}
 8004cbc:	b087      	sub	sp, #28
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	60f8      	str	r0, [r7, #12]
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004cce:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004cd0:	7dfb      	ldrb	r3, [r7, #23]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d003      	beq.n	8004cde <HAL_CAN_GetRxMessage+0x24>
 8004cd6:	7dfb      	ldrb	r3, [r7, #23]
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	f040 80f3 	bne.w	8004ec4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d10e      	bne.n	8004d02 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d116      	bne.n	8004d20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cf6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e0e7      	b.n	8004ed2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f003 0303 	and.w	r3, r3, #3
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d107      	bne.n	8004d20 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d14:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e0d8      	b.n	8004ed2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	331b      	adds	r3, #27
 8004d28:	011b      	lsls	r3, r3, #4
 8004d2a:	4413      	add	r3, r2
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f003 0204 	and.w	r2, r3, #4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d10c      	bne.n	8004d58 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681a      	ldr	r2, [r3, #0]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	331b      	adds	r3, #27
 8004d46:	011b      	lsls	r3, r3, #4
 8004d48:	4413      	add	r3, r2
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	0d5b      	lsrs	r3, r3, #21
 8004d4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	601a      	str	r2, [r3, #0]
 8004d56:	e00b      	b.n	8004d70 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	331b      	adds	r3, #27
 8004d60:	011b      	lsls	r3, r3, #4
 8004d62:	4413      	add	r3, r2
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	08db      	lsrs	r3, r3, #3
 8004d68:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	331b      	adds	r3, #27
 8004d78:	011b      	lsls	r3, r3, #4
 8004d7a:	4413      	add	r3, r2
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0202 	and.w	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	331b      	adds	r3, #27
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	4413      	add	r3, r2
 8004d92:	3304      	adds	r3, #4
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 020f 	and.w	r2, r3, #15
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	331b      	adds	r3, #27
 8004da6:	011b      	lsls	r3, r3, #4
 8004da8:	4413      	add	r3, r2
 8004daa:	3304      	adds	r3, #4
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	0a1b      	lsrs	r3, r3, #8
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681a      	ldr	r2, [r3, #0]
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	331b      	adds	r3, #27
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	4413      	add	r3, r2
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	0c1b      	lsrs	r3, r3, #16
 8004dc8:	b29a      	uxth	r2, r3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	011b      	lsls	r3, r3, #4
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	b2da      	uxtb	r2, r3
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	68bb      	ldr	r3, [r7, #8]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	0a1a      	lsrs	r2, r3, #8
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	b2d2      	uxtb	r2, r2
 8004dfc:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	011b      	lsls	r3, r3, #4
 8004e06:	4413      	add	r3, r2
 8004e08:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	0c1a      	lsrs	r2, r3, #16
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	3302      	adds	r3, #2
 8004e14:	b2d2      	uxtb	r2, r2
 8004e16:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	011b      	lsls	r3, r3, #4
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	0e1a      	lsrs	r2, r3, #24
 8004e2a:	683b      	ldr	r3, [r7, #0]
 8004e2c:	3303      	adds	r3, #3
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681a      	ldr	r2, [r3, #0]
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	011b      	lsls	r3, r3, #4
 8004e3a:	4413      	add	r3, r2
 8004e3c:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	3304      	adds	r3, #4
 8004e46:	b2d2      	uxtb	r2, r2
 8004e48:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681a      	ldr	r2, [r3, #0]
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	011b      	lsls	r3, r3, #4
 8004e52:	4413      	add	r3, r2
 8004e54:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	0a1a      	lsrs	r2, r3, #8
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	3305      	adds	r3, #5
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	011b      	lsls	r3, r3, #4
 8004e6c:	4413      	add	r3, r2
 8004e6e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	0c1a      	lsrs	r2, r3, #16
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	3306      	adds	r3, #6
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	011b      	lsls	r3, r3, #4
 8004e86:	4413      	add	r3, r2
 8004e88:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	0e1a      	lsrs	r2, r3, #24
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	3307      	adds	r3, #7
 8004e94:	b2d2      	uxtb	r2, r2
 8004e96:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d108      	bne.n	8004eb0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68da      	ldr	r2, [r3, #12]
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f042 0220 	orr.w	r2, r2, #32
 8004eac:	60da      	str	r2, [r3, #12]
 8004eae:	e007      	b.n	8004ec0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	691a      	ldr	r2, [r3, #16]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0220 	orr.w	r2, r2, #32
 8004ebe:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	e006      	b.n	8004ed2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
  }
}
 8004ed2:	4618      	mov	r0, r3
 8004ed4:	371c      	adds	r7, #28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004edc:	4770      	bx	lr

08004ede <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8004ede:	b480      	push	{r7}
 8004ee0:	b085      	sub	sp, #20
 8004ee2:	af00      	add	r7, sp, #0
 8004ee4:	6078      	str	r0, [r7, #4]
 8004ee6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004eee:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d002      	beq.n	8004efc <HAL_CAN_ActivateNotification+0x1e>
 8004ef6:	7bfb      	ldrb	r3, [r7, #15]
 8004ef8:	2b02      	cmp	r3, #2
 8004efa:	d109      	bne.n	8004f10 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6959      	ldr	r1, [r3, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	430a      	orrs	r2, r1
 8004f0a:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	e006      	b.n	8004f1e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f14:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
  }
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3714      	adds	r7, #20
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004f2a:	b580      	push	{r7, lr}
 8004f2c:	b08a      	sub	sp, #40	@ 0x28
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004f32:	2300      	movs	r3, #0
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	695b      	ldr	r3, [r3, #20]
 8004f3c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	68db      	ldr	r3, [r3, #12]
 8004f54:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	699b      	ldr	r3, [r3, #24]
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004f66:	6a3b      	ldr	r3, [r7, #32]
 8004f68:	f003 0301 	and.w	r3, r3, #1
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d07c      	beq.n	800506a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d023      	beq.n	8004fc2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d003      	beq.n	8004f94 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8004f8c:	6878      	ldr	r0, [r7, #4]
 8004f8e:	f000 f983 	bl	8005298 <HAL_CAN_TxMailbox0CompleteCallback>
 8004f92:	e016      	b.n	8004fc2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 0304 	and.w	r3, r3, #4
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d004      	beq.n	8004fa8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8004f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fa0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004fa4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa6:	e00c      	b.n	8004fc2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8004fa8:	69bb      	ldr	r3, [r7, #24]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d004      	beq.n	8004fbc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fba:	e002      	b.n	8004fc2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f989 	bl	80052d4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d024      	beq.n	8005016 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8004fd6:	69bb      	ldr	r3, [r7, #24]
 8004fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d003      	beq.n	8004fe8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8004fe0:	6878      	ldr	r0, [r7, #4]
 8004fe2:	f000 f963 	bl	80052ac <HAL_CAN_TxMailbox1CompleteCallback>
 8004fe6:	e016      	b.n	8005016 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d004      	beq.n	8004ffc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8004ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8004ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ffa:	e00c      	b.n	8005016 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005002:	2b00      	cmp	r3, #0
 8005004:	d004      	beq.n	8005010 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8005006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800500c:	627b      	str	r3, [r7, #36]	@ 0x24
 800500e:	e002      	b.n	8005016 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f969 	bl	80052e8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800501c:	2b00      	cmp	r3, #0
 800501e:	d024      	beq.n	800506a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005028:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005034:	6878      	ldr	r0, [r7, #4]
 8005036:	f000 f943 	bl	80052c0 <HAL_CAN_TxMailbox2CompleteCallback>
 800503a:	e016      	b.n	800506a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005048:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800504c:	627b      	str	r3, [r7, #36]	@ 0x24
 800504e:	e00c      	b.n	800506a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005050:	69bb      	ldr	r3, [r7, #24]
 8005052:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d004      	beq.n	8005064 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800505a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800505c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005060:	627b      	str	r3, [r7, #36]	@ 0x24
 8005062:	e002      	b.n	800506a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f949 	bl	80052fc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800506a:	6a3b      	ldr	r3, [r7, #32]
 800506c:	f003 0308 	and.w	r3, r3, #8
 8005070:	2b00      	cmp	r3, #0
 8005072:	d00c      	beq.n	800508e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	d007      	beq.n	800508e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800507e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005084:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2210      	movs	r2, #16
 800508c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800508e:	6a3b      	ldr	r3, [r7, #32]
 8005090:	f003 0304 	and.w	r3, r3, #4
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00b      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005098:	697b      	ldr	r3, [r7, #20]
 800509a:	f003 0308 	and.w	r3, r3, #8
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d006      	beq.n	80050b0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2208      	movs	r2, #8
 80050a8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f930 	bl	8005310 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80050b0:	6a3b      	ldr	r3, [r7, #32]
 80050b2:	f003 0302 	and.w	r3, r3, #2
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d009      	beq.n	80050ce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68db      	ldr	r3, [r3, #12]
 80050c0:	f003 0303 	and.w	r3, r3, #3
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d002      	beq.n	80050ce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f7fb ff6d 	bl	8000fa8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80050ce:	6a3b      	ldr	r3, [r7, #32]
 80050d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00c      	beq.n	80050f2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	f003 0310 	and.w	r3, r3, #16
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d007      	beq.n	80050f2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80050e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80050e8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	2210      	movs	r2, #16
 80050f0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80050f2:	6a3b      	ldr	r3, [r7, #32]
 80050f4:	f003 0320 	and.w	r3, r3, #32
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00b      	beq.n	8005114 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f003 0308 	and.w	r3, r3, #8
 8005102:	2b00      	cmp	r3, #0
 8005104:	d006      	beq.n	8005114 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	2208      	movs	r2, #8
 800510c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f912 	bl	8005338 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	2b00      	cmp	r3, #0
 800511c:	d009      	beq.n	8005132 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	691b      	ldr	r3, [r3, #16]
 8005124:	f003 0303 	and.w	r3, r3, #3
 8005128:	2b00      	cmp	r3, #0
 800512a:	d002      	beq.n	8005132 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 f8f9 	bl	8005324 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800513c:	69fb      	ldr	r3, [r7, #28]
 800513e:	f003 0310 	and.w	r3, r3, #16
 8005142:	2b00      	cmp	r3, #0
 8005144:	d006      	beq.n	8005154 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	2210      	movs	r2, #16
 800514c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f000 f8fc 	bl	800534c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005154:	6a3b      	ldr	r3, [r7, #32]
 8005156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00b      	beq.n	8005176 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	f003 0308 	and.w	r3, r3, #8
 8005164:	2b00      	cmp	r3, #0
 8005166:	d006      	beq.n	8005176 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	2208      	movs	r2, #8
 800516e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f000 f8f5 	bl	8005360 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005176:	6a3b      	ldr	r3, [r7, #32]
 8005178:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800517c:	2b00      	cmp	r3, #0
 800517e:	d07b      	beq.n	8005278 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005180:	69fb      	ldr	r3, [r7, #28]
 8005182:	f003 0304 	and.w	r3, r3, #4
 8005186:	2b00      	cmp	r3, #0
 8005188:	d072      	beq.n	8005270 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800519a:	2b00      	cmp	r3, #0
 800519c:	d003      	beq.n	80051a6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800519e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051a6:	6a3b      	ldr	r3, [r7, #32]
 80051a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d008      	beq.n	80051c2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d003      	beq.n	80051c2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80051ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051bc:	f043 0302 	orr.w	r3, r3, #2
 80051c0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051c2:	6a3b      	ldr	r3, [r7, #32]
 80051c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	f043 0304 	orr.w	r3, r3, #4
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d043      	beq.n	8005270 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d03e      	beq.n	8005270 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80051f8:	2b60      	cmp	r3, #96	@ 0x60
 80051fa:	d02b      	beq.n	8005254 <HAL_CAN_IRQHandler+0x32a>
 80051fc:	2b60      	cmp	r3, #96	@ 0x60
 80051fe:	d82e      	bhi.n	800525e <HAL_CAN_IRQHandler+0x334>
 8005200:	2b50      	cmp	r3, #80	@ 0x50
 8005202:	d022      	beq.n	800524a <HAL_CAN_IRQHandler+0x320>
 8005204:	2b50      	cmp	r3, #80	@ 0x50
 8005206:	d82a      	bhi.n	800525e <HAL_CAN_IRQHandler+0x334>
 8005208:	2b40      	cmp	r3, #64	@ 0x40
 800520a:	d019      	beq.n	8005240 <HAL_CAN_IRQHandler+0x316>
 800520c:	2b40      	cmp	r3, #64	@ 0x40
 800520e:	d826      	bhi.n	800525e <HAL_CAN_IRQHandler+0x334>
 8005210:	2b30      	cmp	r3, #48	@ 0x30
 8005212:	d010      	beq.n	8005236 <HAL_CAN_IRQHandler+0x30c>
 8005214:	2b30      	cmp	r3, #48	@ 0x30
 8005216:	d822      	bhi.n	800525e <HAL_CAN_IRQHandler+0x334>
 8005218:	2b10      	cmp	r3, #16
 800521a:	d002      	beq.n	8005222 <HAL_CAN_IRQHandler+0x2f8>
 800521c:	2b20      	cmp	r3, #32
 800521e:	d005      	beq.n	800522c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005220:	e01d      	b.n	800525e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	f043 0308 	orr.w	r3, r3, #8
 8005228:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800522a:	e019      	b.n	8005260 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800522c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800522e:	f043 0310 	orr.w	r3, r3, #16
 8005232:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005234:	e014      	b.n	8005260 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005238:	f043 0320 	orr.w	r3, r3, #32
 800523c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800523e:	e00f      	b.n	8005260 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005242:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005246:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005248:	e00a      	b.n	8005260 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800524a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005250:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8005252:	e005      	b.n	8005260 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005256:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800525c:	e000      	b.n	8005260 <HAL_CAN_IRQHandler+0x336>
            break;
 800525e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699a      	ldr	r2, [r3, #24]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800526e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2204      	movs	r2, #4
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d008      	beq.n	8005290 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f000 f872 	bl	8005374 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005290:	bf00      	nop
 8005292:	3728      	adds	r7, #40	@ 0x28
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b083      	sub	sp, #12
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80052b4:	bf00      	nop
 80052b6:	370c      	adds	r7, #12
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80052c0:	b480      	push	{r7}
 80052c2:	b083      	sub	sp, #12
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80052c8:	bf00      	nop
 80052ca:	370c      	adds	r7, #12
 80052cc:	46bd      	mov	sp, r7
 80052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d2:	4770      	bx	lr

080052d4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80052dc:	bf00      	nop
 80052de:	370c      	adds	r7, #12
 80052e0:	46bd      	mov	sp, r7
 80052e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e6:	4770      	bx	lr

080052e8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052e8:	b480      	push	{r7}
 80052ea:	b083      	sub	sp, #12
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80052f0:	bf00      	nop
 80052f2:	370c      	adds	r7, #12
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr

080052fc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005310:	b480      	push	{r7}
 8005312:	b083      	sub	sp, #12
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005322:	4770      	bx	lr

08005324 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800532c:	bf00      	nop
 800532e:	370c      	adds	r7, #12
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005338:	b480      	push	{r7}
 800533a:	b083      	sub	sp, #12
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005340:	bf00      	nop
 8005342:	370c      	adds	r7, #12
 8005344:	46bd      	mov	sp, r7
 8005346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534a:	4770      	bx	lr

0800534c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005354:	bf00      	nop
 8005356:	370c      	adds	r7, #12
 8005358:	46bd      	mov	sp, r7
 800535a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535e:	4770      	bx	lr

08005360 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005360:	b480      	push	{r7}
 8005362:	b083      	sub	sp, #12
 8005364:	af00      	add	r7, sp, #0
 8005366:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005368:	bf00      	nop
 800536a:	370c      	adds	r7, #12
 800536c:	46bd      	mov	sp, r7
 800536e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005372:	4770      	bx	lr

08005374 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800537c:	bf00      	nop
 800537e:	370c      	adds	r7, #12
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	f003 0307 	and.w	r3, r3, #7
 8005396:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005398:	4b0c      	ldr	r3, [pc, #48]	@ (80053cc <__NVIC_SetPriorityGrouping+0x44>)
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800539e:	68ba      	ldr	r2, [r7, #8]
 80053a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80053a4:	4013      	ands	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80053b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80053b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80053b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80053ba:	4a04      	ldr	r2, [pc, #16]	@ (80053cc <__NVIC_SetPriorityGrouping+0x44>)
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	60d3      	str	r3, [r2, #12]
}
 80053c0:	bf00      	nop
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr
 80053cc:	e000ed00 	.word	0xe000ed00

080053d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80053d4:	4b04      	ldr	r3, [pc, #16]	@ (80053e8 <__NVIC_GetPriorityGrouping+0x18>)
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	0a1b      	lsrs	r3, r3, #8
 80053da:	f003 0307 	and.w	r3, r3, #7
}
 80053de:	4618      	mov	r0, r3
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr
 80053e8:	e000ed00 	.word	0xe000ed00

080053ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b083      	sub	sp, #12
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	4603      	mov	r3, r0
 80053f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	db0b      	blt.n	8005416 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	f003 021f 	and.w	r2, r3, #31
 8005404:	4907      	ldr	r1, [pc, #28]	@ (8005424 <__NVIC_EnableIRQ+0x38>)
 8005406:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800540a:	095b      	lsrs	r3, r3, #5
 800540c:	2001      	movs	r0, #1
 800540e:	fa00 f202 	lsl.w	r2, r0, r2
 8005412:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005416:	bf00      	nop
 8005418:	370c      	adds	r7, #12
 800541a:	46bd      	mov	sp, r7
 800541c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop
 8005424:	e000e100 	.word	0xe000e100

08005428 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	4603      	mov	r3, r0
 8005430:	6039      	str	r1, [r7, #0]
 8005432:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005434:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005438:	2b00      	cmp	r3, #0
 800543a:	db0a      	blt.n	8005452 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	b2da      	uxtb	r2, r3
 8005440:	490c      	ldr	r1, [pc, #48]	@ (8005474 <__NVIC_SetPriority+0x4c>)
 8005442:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005446:	0112      	lsls	r2, r2, #4
 8005448:	b2d2      	uxtb	r2, r2
 800544a:	440b      	add	r3, r1
 800544c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005450:	e00a      	b.n	8005468 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	b2da      	uxtb	r2, r3
 8005456:	4908      	ldr	r1, [pc, #32]	@ (8005478 <__NVIC_SetPriority+0x50>)
 8005458:	79fb      	ldrb	r3, [r7, #7]
 800545a:	f003 030f 	and.w	r3, r3, #15
 800545e:	3b04      	subs	r3, #4
 8005460:	0112      	lsls	r2, r2, #4
 8005462:	b2d2      	uxtb	r2, r2
 8005464:	440b      	add	r3, r1
 8005466:	761a      	strb	r2, [r3, #24]
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr
 8005474:	e000e100 	.word	0xe000e100
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800547c:	b480      	push	{r7}
 800547e:	b089      	sub	sp, #36	@ 0x24
 8005480:	af00      	add	r7, sp, #0
 8005482:	60f8      	str	r0, [r7, #12]
 8005484:	60b9      	str	r1, [r7, #8]
 8005486:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f003 0307 	and.w	r3, r3, #7
 800548e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005490:	69fb      	ldr	r3, [r7, #28]
 8005492:	f1c3 0307 	rsb	r3, r3, #7
 8005496:	2b04      	cmp	r3, #4
 8005498:	bf28      	it	cs
 800549a:	2304      	movcs	r3, #4
 800549c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800549e:	69fb      	ldr	r3, [r7, #28]
 80054a0:	3304      	adds	r3, #4
 80054a2:	2b06      	cmp	r3, #6
 80054a4:	d902      	bls.n	80054ac <NVIC_EncodePriority+0x30>
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	3b03      	subs	r3, #3
 80054aa:	e000      	b.n	80054ae <NVIC_EncodePriority+0x32>
 80054ac:	2300      	movs	r3, #0
 80054ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80054b4:	69bb      	ldr	r3, [r7, #24]
 80054b6:	fa02 f303 	lsl.w	r3, r2, r3
 80054ba:	43da      	mvns	r2, r3
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	401a      	ands	r2, r3
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80054c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	fa01 f303 	lsl.w	r3, r1, r3
 80054ce:	43d9      	mvns	r1, r3
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80054d4:	4313      	orrs	r3, r2
         );
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3724      	adds	r7, #36	@ 0x24
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
	...

080054e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	3b01      	subs	r3, #1
 80054f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054f4:	d301      	bcc.n	80054fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80054f6:	2301      	movs	r3, #1
 80054f8:	e00f      	b.n	800551a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80054fa:	4a0a      	ldr	r2, [pc, #40]	@ (8005524 <SysTick_Config+0x40>)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	3b01      	subs	r3, #1
 8005500:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005502:	210f      	movs	r1, #15
 8005504:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005508:	f7ff ff8e 	bl	8005428 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800550c:	4b05      	ldr	r3, [pc, #20]	@ (8005524 <SysTick_Config+0x40>)
 800550e:	2200      	movs	r2, #0
 8005510:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005512:	4b04      	ldr	r3, [pc, #16]	@ (8005524 <SysTick_Config+0x40>)
 8005514:	2207      	movs	r2, #7
 8005516:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005518:	2300      	movs	r3, #0
}
 800551a:	4618      	mov	r0, r3
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	e000e010 	.word	0xe000e010

08005528 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b082      	sub	sp, #8
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f7ff ff29 	bl	8005388 <__NVIC_SetPriorityGrouping>
}
 8005536:	bf00      	nop
 8005538:	3708      	adds	r7, #8
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800553e:	b580      	push	{r7, lr}
 8005540:	b086      	sub	sp, #24
 8005542:	af00      	add	r7, sp, #0
 8005544:	4603      	mov	r3, r0
 8005546:	60b9      	str	r1, [r7, #8]
 8005548:	607a      	str	r2, [r7, #4]
 800554a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005550:	f7ff ff3e 	bl	80053d0 <__NVIC_GetPriorityGrouping>
 8005554:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005556:	687a      	ldr	r2, [r7, #4]
 8005558:	68b9      	ldr	r1, [r7, #8]
 800555a:	6978      	ldr	r0, [r7, #20]
 800555c:	f7ff ff8e 	bl	800547c <NVIC_EncodePriority>
 8005560:	4602      	mov	r2, r0
 8005562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005566:	4611      	mov	r1, r2
 8005568:	4618      	mov	r0, r3
 800556a:	f7ff ff5d 	bl	8005428 <__NVIC_SetPriority>
}
 800556e:	bf00      	nop
 8005570:	3718      	adds	r7, #24
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}

08005576 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005576:	b580      	push	{r7, lr}
 8005578:	b082      	sub	sp, #8
 800557a:	af00      	add	r7, sp, #0
 800557c:	4603      	mov	r3, r0
 800557e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005580:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005584:	4618      	mov	r0, r3
 8005586:	f7ff ff31 	bl	80053ec <__NVIC_EnableIRQ>
}
 800558a:	bf00      	nop
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b082      	sub	sp, #8
 8005596:	af00      	add	r7, sp, #0
 8005598:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800559a:	6878      	ldr	r0, [r7, #4]
 800559c:	f7ff ffa2 	bl	80054e4 <SysTick_Config>
 80055a0:	4603      	mov	r3, r0
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3708      	adds	r7, #8
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
	...

080055ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b086      	sub	sp, #24
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80055b4:	2300      	movs	r3, #0
 80055b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80055b8:	f7ff f878 	bl	80046ac <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e099      	b.n	80056fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	681a      	ldr	r2, [r3, #0]
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f022 0201 	bic.w	r2, r2, #1
 80055e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80055e8:	e00f      	b.n	800560a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80055ea:	f7ff f85f 	bl	80046ac <HAL_GetTick>
 80055ee:	4602      	mov	r2, r0
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	2b05      	cmp	r3, #5
 80055f6:	d908      	bls.n	800560a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2220      	movs	r2, #32
 80055fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2203      	movs	r2, #3
 8005602:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8005606:	2303      	movs	r3, #3
 8005608:	e078      	b.n	80056fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f003 0301 	and.w	r3, r3, #1
 8005614:	2b00      	cmp	r3, #0
 8005616:	d1e8      	bne.n	80055ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005620:	697a      	ldr	r2, [r7, #20]
 8005622:	4b38      	ldr	r3, [pc, #224]	@ (8005704 <HAL_DMA_Init+0x158>)
 8005624:	4013      	ands	r3, r2
 8005626:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005636:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005642:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	699b      	ldr	r3, [r3, #24]
 8005648:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800564e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6a1b      	ldr	r3, [r3, #32]
 8005654:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005656:	697a      	ldr	r2, [r7, #20]
 8005658:	4313      	orrs	r3, r2
 800565a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005660:	2b04      	cmp	r3, #4
 8005662:	d107      	bne.n	8005674 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800566c:	4313      	orrs	r3, r2
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	4313      	orrs	r3, r2
 8005672:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	697a      	ldr	r2, [r7, #20]
 800567a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f023 0307 	bic.w	r3, r3, #7
 800568a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	697a      	ldr	r2, [r7, #20]
 8005692:	4313      	orrs	r3, r2
 8005694:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	2b04      	cmp	r3, #4
 800569c:	d117      	bne.n	80056ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00e      	beq.n	80056ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80056b0:	6878      	ldr	r0, [r7, #4]
 80056b2:	f000 fb01 	bl	8005cb8 <DMA_CheckFifoParam>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2240      	movs	r2, #64	@ 0x40
 80056c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80056ca:	2301      	movs	r3, #1
 80056cc:	e016      	b.n	80056fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	697a      	ldr	r2, [r7, #20]
 80056d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fab8 	bl	8005c4c <DMA_CalcBaseAndBitshift>
 80056dc:	4603      	mov	r3, r0
 80056de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056e4:	223f      	movs	r2, #63	@ 0x3f
 80056e6:	409a      	lsls	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80056fa:	2300      	movs	r3, #0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3718      	adds	r7, #24
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}
 8005704:	f010803f 	.word	0xf010803f

08005708 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b086      	sub	sp, #24
 800570c:	af00      	add	r7, sp, #0
 800570e:	60f8      	str	r0, [r7, #12]
 8005710:	60b9      	str	r1, [r7, #8]
 8005712:	607a      	str	r2, [r7, #4]
 8005714:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8005726:	2b01      	cmp	r3, #1
 8005728:	d101      	bne.n	800572e <HAL_DMA_Start_IT+0x26>
 800572a:	2302      	movs	r3, #2
 800572c:	e040      	b.n	80057b0 <HAL_DMA_Start_IT+0xa8>
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2201      	movs	r2, #1
 8005732:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d12f      	bne.n	80057a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2202      	movs	r2, #2
 8005746:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	687a      	ldr	r2, [r7, #4]
 8005754:	68b9      	ldr	r1, [r7, #8]
 8005756:	68f8      	ldr	r0, [r7, #12]
 8005758:	f000 fa4a 	bl	8005bf0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005760:	223f      	movs	r2, #63	@ 0x3f
 8005762:	409a      	lsls	r2, r3
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0216 	orr.w	r2, r2, #22
 8005776:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577c:	2b00      	cmp	r3, #0
 800577e:	d007      	beq.n	8005790 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 0208 	orr.w	r2, r2, #8
 800578e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f042 0201 	orr.w	r2, r2, #1
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	e005      	b.n	80057ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80057aa:	2302      	movs	r3, #2
 80057ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80057ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3718      	adds	r7, #24
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b084      	sub	sp, #16
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80057c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80057c6:	f7fe ff71 	bl	80046ac <HAL_GetTick>
 80057ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b02      	cmp	r3, #2
 80057d6:	d008      	beq.n	80057ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2280      	movs	r2, #128	@ 0x80
 80057dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	e052      	b.n	8005890 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0216 	bic.w	r2, r2, #22
 80057f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005808:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <HAL_DMA_Abort+0x62>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005816:	2b00      	cmp	r3, #0
 8005818:	d007      	beq.n	800582a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f022 0208 	bic.w	r2, r2, #8
 8005828:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0201 	bic.w	r2, r2, #1
 8005838:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800583a:	e013      	b.n	8005864 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800583c:	f7fe ff36 	bl	80046ac <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b05      	cmp	r3, #5
 8005848:	d90c      	bls.n	8005864 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2220      	movs	r2, #32
 800584e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2203      	movs	r2, #3
 8005854:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8005860:	2303      	movs	r3, #3
 8005862:	e015      	b.n	8005890 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e4      	bne.n	800583c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005876:	223f      	movs	r2, #63	@ 0x3f
 8005878:	409a      	lsls	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2201      	movs	r2, #1
 8005882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800588e:	2300      	movs	r3, #0
}
 8005890:	4618      	mov	r0, r3
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d004      	beq.n	80058b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	2280      	movs	r2, #128	@ 0x80
 80058b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80058b2:	2301      	movs	r3, #1
 80058b4:	e00c      	b.n	80058d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2205      	movs	r2, #5
 80058ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f022 0201 	bic.w	r2, r2, #1
 80058cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058ce:	2300      	movs	r3, #0
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	370c      	adds	r7, #12
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr

080058dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80058e8:	4b8e      	ldr	r3, [pc, #568]	@ (8005b24 <HAL_DMA_IRQHandler+0x248>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a8e      	ldr	r2, [pc, #568]	@ (8005b28 <HAL_DMA_IRQHandler+0x24c>)
 80058ee:	fba2 2303 	umull	r2, r3, r2, r3
 80058f2:	0a9b      	lsrs	r3, r3, #10
 80058f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80058fc:	693b      	ldr	r3, [r7, #16]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005906:	2208      	movs	r2, #8
 8005908:	409a      	lsls	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	4013      	ands	r3, r2
 800590e:	2b00      	cmp	r3, #0
 8005910:	d01a      	beq.n	8005948 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f003 0304 	and.w	r3, r3, #4
 800591c:	2b00      	cmp	r3, #0
 800591e:	d013      	beq.n	8005948 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	681a      	ldr	r2, [r3, #0]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f022 0204 	bic.w	r2, r2, #4
 800592e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005934:	2208      	movs	r2, #8
 8005936:	409a      	lsls	r2, r3
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005940:	f043 0201 	orr.w	r2, r3, #1
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800594c:	2201      	movs	r2, #1
 800594e:	409a      	lsls	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4013      	ands	r3, r2
 8005954:	2b00      	cmp	r3, #0
 8005956:	d012      	beq.n	800597e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00b      	beq.n	800597e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800596a:	2201      	movs	r2, #1
 800596c:	409a      	lsls	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005976:	f043 0202 	orr.w	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005982:	2204      	movs	r2, #4
 8005984:	409a      	lsls	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4013      	ands	r3, r2
 800598a:	2b00      	cmp	r3, #0
 800598c:	d012      	beq.n	80059b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0302 	and.w	r3, r3, #2
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00b      	beq.n	80059b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059a0:	2204      	movs	r2, #4
 80059a2:	409a      	lsls	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80059ac:	f043 0204 	orr.w	r2, r3, #4
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059b8:	2210      	movs	r2, #16
 80059ba:	409a      	lsls	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4013      	ands	r3, r2
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d043      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f003 0308 	and.w	r3, r3, #8
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d03c      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80059d6:	2210      	movs	r2, #16
 80059d8:	409a      	lsls	r2, r3
 80059da:	693b      	ldr	r3, [r7, #16]
 80059dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d018      	beq.n	8005a1e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d108      	bne.n	8005a0c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d024      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	4798      	blx	r3
 8005a0a:	e01f      	b.n	8005a4c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d01b      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	4798      	blx	r3
 8005a1c:	e016      	b.n	8005a4c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d107      	bne.n	8005a3c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f022 0208 	bic.w	r2, r2, #8
 8005a3a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a50:	2220      	movs	r2, #32
 8005a52:	409a      	lsls	r2, r3
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	4013      	ands	r3, r2
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	f000 808f 	beq.w	8005b7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f003 0310 	and.w	r3, r3, #16
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	f000 8087 	beq.w	8005b7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005a72:	2220      	movs	r2, #32
 8005a74:	409a      	lsls	r2, r3
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	2b05      	cmp	r3, #5
 8005a84:	d136      	bne.n	8005af4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f022 0216 	bic.w	r2, r2, #22
 8005a94:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005aa4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d103      	bne.n	8005ab6 <HAL_DMA_IRQHandler+0x1da>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d007      	beq.n	8005ac6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0208 	bic.w	r2, r2, #8
 8005ac4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005aca:	223f      	movs	r2, #63	@ 0x3f
 8005acc:	409a      	lsls	r2, r3
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d07e      	beq.n	8005be8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	4798      	blx	r3
        }
        return;
 8005af2:	e079      	b.n	8005be8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d01d      	beq.n	8005b3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10d      	bne.n	8005b2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d031      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	4798      	blx	r3
 8005b20:	e02c      	b.n	8005b7c <HAL_DMA_IRQHandler+0x2a0>
 8005b22:	bf00      	nop
 8005b24:	2000001c 	.word	0x2000001c
 8005b28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d023      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	4798      	blx	r3
 8005b3c:	e01e      	b.n	8005b7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d10f      	bne.n	8005b6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f022 0210 	bic.w	r2, r2, #16
 8005b5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2201      	movs	r2, #1
 8005b60:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d003      	beq.n	8005b7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d032      	beq.n	8005bea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d022      	beq.n	8005bd6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2205      	movs	r2, #5
 8005b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f022 0201 	bic.w	r2, r2, #1
 8005ba6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	3301      	adds	r3, #1
 8005bac:	60bb      	str	r3, [r7, #8]
 8005bae:	697a      	ldr	r2, [r7, #20]
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d307      	bcc.n	8005bc4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f003 0301 	and.w	r3, r3, #1
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1f2      	bne.n	8005ba8 <HAL_DMA_IRQHandler+0x2cc>
 8005bc2:	e000      	b.n	8005bc6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005bc4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005be2:	6878      	ldr	r0, [r7, #4]
 8005be4:	4798      	blx	r3
 8005be6:	e000      	b.n	8005bea <HAL_DMA_IRQHandler+0x30e>
        return;
 8005be8:	bf00      	nop
    }
  }
}
 8005bea:	3718      	adds	r7, #24
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
 8005bfc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8005c0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	683a      	ldr	r2, [r7, #0]
 8005c14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b40      	cmp	r3, #64	@ 0x40
 8005c1c:	d108      	bne.n	8005c30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005c2e:	e007      	b.n	8005c40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	60da      	str	r2, [r3, #12]
}
 8005c40:	bf00      	nop
 8005c42:	3714      	adds	r7, #20
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b085      	sub	sp, #20
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	3b10      	subs	r3, #16
 8005c5c:	4a14      	ldr	r2, [pc, #80]	@ (8005cb0 <DMA_CalcBaseAndBitshift+0x64>)
 8005c5e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c62:	091b      	lsrs	r3, r3, #4
 8005c64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005c66:	4a13      	ldr	r2, [pc, #76]	@ (8005cb4 <DMA_CalcBaseAndBitshift+0x68>)
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	461a      	mov	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d909      	bls.n	8005c8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c82:	f023 0303 	bic.w	r3, r3, #3
 8005c86:	1d1a      	adds	r2, r3, #4
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	659a      	str	r2, [r3, #88]	@ 0x58
 8005c8c:	e007      	b.n	8005c9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005c96:	f023 0303 	bic.w	r3, r3, #3
 8005c9a:	687a      	ldr	r2, [r7, #4]
 8005c9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3714      	adds	r7, #20
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	aaaaaaab 	.word	0xaaaaaaab
 8005cb4:	0800d038 	.word	0x0800d038

08005cb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	b085      	sub	sp, #20
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d11f      	bne.n	8005d12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b03      	cmp	r3, #3
 8005cd6:	d856      	bhi.n	8005d86 <DMA_CheckFifoParam+0xce>
 8005cd8:	a201      	add	r2, pc, #4	@ (adr r2, 8005ce0 <DMA_CheckFifoParam+0x28>)
 8005cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cde:	bf00      	nop
 8005ce0:	08005cf1 	.word	0x08005cf1
 8005ce4:	08005d03 	.word	0x08005d03
 8005ce8:	08005cf1 	.word	0x08005cf1
 8005cec:	08005d87 	.word	0x08005d87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cf4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d046      	beq.n	8005d8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d00:	e043      	b.n	8005d8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d0a:	d140      	bne.n	8005d8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d10:	e03d      	b.n	8005d8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	699b      	ldr	r3, [r3, #24]
 8005d16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d1a:	d121      	bne.n	8005d60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005d1c:	68bb      	ldr	r3, [r7, #8]
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d837      	bhi.n	8005d92 <DMA_CheckFifoParam+0xda>
 8005d22:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <DMA_CheckFifoParam+0x70>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005d39 	.word	0x08005d39
 8005d2c:	08005d3f 	.word	0x08005d3f
 8005d30:	08005d39 	.word	0x08005d39
 8005d34:	08005d51 	.word	0x08005d51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3c:	e030      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d025      	beq.n	8005d96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005d4a:	2301      	movs	r3, #1
 8005d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005d4e:	e022      	b.n	8005d96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005d58:	d11f      	bne.n	8005d9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005d5e:	e01c      	b.n	8005d9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b02      	cmp	r3, #2
 8005d64:	d903      	bls.n	8005d6e <DMA_CheckFifoParam+0xb6>
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d003      	beq.n	8005d74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005d6c:	e018      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	73fb      	strb	r3, [r7, #15]
      break;
 8005d72:	e015      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005d78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d00e      	beq.n	8005d9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	73fb      	strb	r3, [r7, #15]
      break;
 8005d84:	e00b      	b.n	8005d9e <DMA_CheckFifoParam+0xe6>
      break;
 8005d86:	bf00      	nop
 8005d88:	e00a      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      break;
 8005d8a:	bf00      	nop
 8005d8c:	e008      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      break;
 8005d8e:	bf00      	nop
 8005d90:	e006      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      break;
 8005d92:	bf00      	nop
 8005d94:	e004      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      break;
 8005d96:	bf00      	nop
 8005d98:	e002      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005d9a:	bf00      	nop
 8005d9c:	e000      	b.n	8005da0 <DMA_CheckFifoParam+0xe8>
      break;
 8005d9e:	bf00      	nop
    }
  } 
  
  return status; 
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3714      	adds	r7, #20
 8005da6:	46bd      	mov	sp, r7
 8005da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dac:	4770      	bx	lr
 8005dae:	bf00      	nop

08005db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b089      	sub	sp, #36	@ 0x24
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	61fb      	str	r3, [r7, #28]
 8005dca:	e16b      	b.n	80060a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005dcc:	2201      	movs	r2, #1
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005dd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4013      	ands	r3, r2
 8005dde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005de0:	693a      	ldr	r2, [r7, #16]
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	429a      	cmp	r2, r3
 8005de6:	f040 815a 	bne.w	800609e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	685b      	ldr	r3, [r3, #4]
 8005dee:	f003 0303 	and.w	r3, r3, #3
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d005      	beq.n	8005e02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	685b      	ldr	r3, [r3, #4]
 8005dfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005dfe:	2b02      	cmp	r3, #2
 8005e00:	d130      	bne.n	8005e64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	689b      	ldr	r3, [r3, #8]
 8005e06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	005b      	lsls	r3, r3, #1
 8005e0c:	2203      	movs	r2, #3
 8005e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8005e12:	43db      	mvns	r3, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4013      	ands	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	68da      	ldr	r2, [r3, #12]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	fa02 f303 	lsl.w	r3, r2, r3
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	4313      	orrs	r3, r2
 8005e2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	69ba      	ldr	r2, [r7, #24]
 8005e30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	685b      	ldr	r3, [r3, #4]
 8005e36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005e38:	2201      	movs	r2, #1
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e40:	43db      	mvns	r3, r3
 8005e42:	69ba      	ldr	r2, [r7, #24]
 8005e44:	4013      	ands	r3, r2
 8005e46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	091b      	lsrs	r3, r3, #4
 8005e4e:	f003 0201 	and.w	r2, r3, #1
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	fa02 f303 	lsl.w	r3, r2, r3
 8005e58:	69ba      	ldr	r2, [r7, #24]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	69ba      	ldr	r2, [r7, #24]
 8005e62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	f003 0303 	and.w	r3, r3, #3
 8005e6c:	2b03      	cmp	r3, #3
 8005e6e:	d017      	beq.n	8005ea0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005e76:	69fb      	ldr	r3, [r7, #28]
 8005e78:	005b      	lsls	r3, r3, #1
 8005e7a:	2203      	movs	r2, #3
 8005e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e80:	43db      	mvns	r3, r3
 8005e82:	69ba      	ldr	r2, [r7, #24]
 8005e84:	4013      	ands	r3, r2
 8005e86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689a      	ldr	r2, [r3, #8]
 8005e8c:	69fb      	ldr	r3, [r7, #28]
 8005e8e:	005b      	lsls	r3, r3, #1
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	69ba      	ldr	r2, [r7, #24]
 8005e9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	f003 0303 	and.w	r3, r3, #3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d123      	bne.n	8005ef4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	08da      	lsrs	r2, r3, #3
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	3208      	adds	r2, #8
 8005eb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005eba:	69fb      	ldr	r3, [r7, #28]
 8005ebc:	f003 0307 	and.w	r3, r3, #7
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	220f      	movs	r2, #15
 8005ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ec8:	43db      	mvns	r3, r3
 8005eca:	69ba      	ldr	r2, [r7, #24]
 8005ecc:	4013      	ands	r3, r2
 8005ece:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	691a      	ldr	r2, [r3, #16]
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	f003 0307 	and.w	r3, r3, #7
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ee0:	69ba      	ldr	r2, [r7, #24]
 8005ee2:	4313      	orrs	r3, r2
 8005ee4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	08da      	lsrs	r2, r3, #3
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	3208      	adds	r2, #8
 8005eee:	69b9      	ldr	r1, [r7, #24]
 8005ef0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005efa:	69fb      	ldr	r3, [r7, #28]
 8005efc:	005b      	lsls	r3, r3, #1
 8005efe:	2203      	movs	r2, #3
 8005f00:	fa02 f303 	lsl.w	r3, r2, r3
 8005f04:	43db      	mvns	r3, r3
 8005f06:	69ba      	ldr	r2, [r7, #24]
 8005f08:	4013      	ands	r3, r2
 8005f0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	f003 0203 	and.w	r2, r3, #3
 8005f14:	69fb      	ldr	r3, [r7, #28]
 8005f16:	005b      	lsls	r3, r3, #1
 8005f18:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1c:	69ba      	ldr	r2, [r7, #24]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f000 80b4 	beq.w	800609e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005f36:	2300      	movs	r3, #0
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	4b60      	ldr	r3, [pc, #384]	@ (80060bc <HAL_GPIO_Init+0x30c>)
 8005f3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f3e:	4a5f      	ldr	r2, [pc, #380]	@ (80060bc <HAL_GPIO_Init+0x30c>)
 8005f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005f44:	6453      	str	r3, [r2, #68]	@ 0x44
 8005f46:	4b5d      	ldr	r3, [pc, #372]	@ (80060bc <HAL_GPIO_Init+0x30c>)
 8005f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f4e:	60fb      	str	r3, [r7, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005f52:	4a5b      	ldr	r2, [pc, #364]	@ (80060c0 <HAL_GPIO_Init+0x310>)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	089b      	lsrs	r3, r3, #2
 8005f58:	3302      	adds	r3, #2
 8005f5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005f60:	69fb      	ldr	r3, [r7, #28]
 8005f62:	f003 0303 	and.w	r3, r3, #3
 8005f66:	009b      	lsls	r3, r3, #2
 8005f68:	220f      	movs	r2, #15
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4013      	ands	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	4a52      	ldr	r2, [pc, #328]	@ (80060c4 <HAL_GPIO_Init+0x314>)
 8005f7a:	4293      	cmp	r3, r2
 8005f7c:	d02b      	beq.n	8005fd6 <HAL_GPIO_Init+0x226>
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	4a51      	ldr	r2, [pc, #324]	@ (80060c8 <HAL_GPIO_Init+0x318>)
 8005f82:	4293      	cmp	r3, r2
 8005f84:	d025      	beq.n	8005fd2 <HAL_GPIO_Init+0x222>
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	4a50      	ldr	r2, [pc, #320]	@ (80060cc <HAL_GPIO_Init+0x31c>)
 8005f8a:	4293      	cmp	r3, r2
 8005f8c:	d01f      	beq.n	8005fce <HAL_GPIO_Init+0x21e>
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	4a4f      	ldr	r2, [pc, #316]	@ (80060d0 <HAL_GPIO_Init+0x320>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d019      	beq.n	8005fca <HAL_GPIO_Init+0x21a>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	4a4e      	ldr	r2, [pc, #312]	@ (80060d4 <HAL_GPIO_Init+0x324>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d013      	beq.n	8005fc6 <HAL_GPIO_Init+0x216>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80060d8 <HAL_GPIO_Init+0x328>)
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	d00d      	beq.n	8005fc2 <HAL_GPIO_Init+0x212>
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80060dc <HAL_GPIO_Init+0x32c>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d007      	beq.n	8005fbe <HAL_GPIO_Init+0x20e>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80060e0 <HAL_GPIO_Init+0x330>)
 8005fb2:	4293      	cmp	r3, r2
 8005fb4:	d101      	bne.n	8005fba <HAL_GPIO_Init+0x20a>
 8005fb6:	2307      	movs	r3, #7
 8005fb8:	e00e      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fba:	2308      	movs	r3, #8
 8005fbc:	e00c      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fbe:	2306      	movs	r3, #6
 8005fc0:	e00a      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fc2:	2305      	movs	r3, #5
 8005fc4:	e008      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fc6:	2304      	movs	r3, #4
 8005fc8:	e006      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fca:	2303      	movs	r3, #3
 8005fcc:	e004      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fce:	2302      	movs	r3, #2
 8005fd0:	e002      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e000      	b.n	8005fd8 <HAL_GPIO_Init+0x228>
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	f002 0203 	and.w	r2, r2, #3
 8005fde:	0092      	lsls	r2, r2, #2
 8005fe0:	4093      	lsls	r3, r2
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005fe8:	4935      	ldr	r1, [pc, #212]	@ (80060c0 <HAL_GPIO_Init+0x310>)
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	089b      	lsrs	r3, r3, #2
 8005fee:	3302      	adds	r3, #2
 8005ff0:	69ba      	ldr	r2, [r7, #24]
 8005ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005ffc:	693b      	ldr	r3, [r7, #16]
 8005ffe:	43db      	mvns	r3, r3
 8006000:	69ba      	ldr	r2, [r7, #24]
 8006002:	4013      	ands	r3, r2
 8006004:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006012:	69ba      	ldr	r2, [r7, #24]
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	4313      	orrs	r3, r2
 8006018:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800601a:	4a32      	ldr	r2, [pc, #200]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006020:	4b30      	ldr	r3, [pc, #192]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 8006022:	68db      	ldr	r3, [r3, #12]
 8006024:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006026:	693b      	ldr	r3, [r7, #16]
 8006028:	43db      	mvns	r3, r3
 800602a:	69ba      	ldr	r2, [r7, #24]
 800602c:	4013      	ands	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006030:	683b      	ldr	r3, [r7, #0]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006038:	2b00      	cmp	r3, #0
 800603a:	d003      	beq.n	8006044 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800603c:	69ba      	ldr	r2, [r7, #24]
 800603e:	693b      	ldr	r3, [r7, #16]
 8006040:	4313      	orrs	r3, r2
 8006042:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006044:	4a27      	ldr	r2, [pc, #156]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800604a:	4b26      	ldr	r3, [pc, #152]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	43db      	mvns	r3, r3
 8006054:	69ba      	ldr	r2, [r7, #24]
 8006056:	4013      	ands	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	685b      	ldr	r3, [r3, #4]
 800605e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006062:	2b00      	cmp	r3, #0
 8006064:	d003      	beq.n	800606e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006066:	69ba      	ldr	r2, [r7, #24]
 8006068:	693b      	ldr	r3, [r7, #16]
 800606a:	4313      	orrs	r3, r2
 800606c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800606e:	4a1d      	ldr	r2, [pc, #116]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006074:	4b1b      	ldr	r3, [pc, #108]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800607a:	693b      	ldr	r3, [r7, #16]
 800607c:	43db      	mvns	r3, r3
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	4013      	ands	r3, r2
 8006082:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	685b      	ldr	r3, [r3, #4]
 8006088:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800608c:	2b00      	cmp	r3, #0
 800608e:	d003      	beq.n	8006098 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	4313      	orrs	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006098:	4a12      	ldr	r2, [pc, #72]	@ (80060e4 <HAL_GPIO_Init+0x334>)
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800609e:	69fb      	ldr	r3, [r7, #28]
 80060a0:	3301      	adds	r3, #1
 80060a2:	61fb      	str	r3, [r7, #28]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b0f      	cmp	r3, #15
 80060a8:	f67f ae90 	bls.w	8005dcc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80060ac:	bf00      	nop
 80060ae:	bf00      	nop
 80060b0:	3724      	adds	r7, #36	@ 0x24
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	40023800 	.word	0x40023800
 80060c0:	40013800 	.word	0x40013800
 80060c4:	40020000 	.word	0x40020000
 80060c8:	40020400 	.word	0x40020400
 80060cc:	40020800 	.word	0x40020800
 80060d0:	40020c00 	.word	0x40020c00
 80060d4:	40021000 	.word	0x40021000
 80060d8:	40021400 	.word	0x40021400
 80060dc:	40021800 	.word	0x40021800
 80060e0:	40021c00 	.word	0x40021c00
 80060e4:	40013c00 	.word	0x40013c00

080060e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	460b      	mov	r3, r1
 80060f2:	807b      	strh	r3, [r7, #2]
 80060f4:	4613      	mov	r3, r2
 80060f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80060f8:	787b      	ldrb	r3, [r7, #1]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d003      	beq.n	8006106 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80060fe:	887a      	ldrh	r2, [r7, #2]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006104:	e003      	b.n	800610e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006106:	887b      	ldrh	r3, [r7, #2]
 8006108:	041a      	lsls	r2, r3, #16
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	619a      	str	r2, [r3, #24]
}
 800610e:	bf00      	nop
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
	...

0800611c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b082      	sub	sp, #8
 8006120:	af00      	add	r7, sp, #0
 8006122:	4603      	mov	r3, r0
 8006124:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006126:	4b08      	ldr	r3, [pc, #32]	@ (8006148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	88fb      	ldrh	r3, [r7, #6]
 800612c:	4013      	ands	r3, r2
 800612e:	2b00      	cmp	r3, #0
 8006130:	d006      	beq.n	8006140 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006132:	4a05      	ldr	r2, [pc, #20]	@ (8006148 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006134:	88fb      	ldrh	r3, [r7, #6]
 8006136:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006138:	88fb      	ldrh	r3, [r7, #6]
 800613a:	4618      	mov	r0, r3
 800613c:	f7fb fef4 	bl	8001f28 <HAL_GPIO_EXTI_Callback>
  }
}
 8006140:	bf00      	nop
 8006142:	3708      	adds	r7, #8
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	40013c00 	.word	0x40013c00

0800614c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b084      	sub	sp, #16
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e12b      	b.n	80063b6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b00      	cmp	r3, #0
 8006168:	d106      	bne.n	8006178 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2200      	movs	r2, #0
 800616e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f7fd fd18 	bl	8003ba8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2224      	movs	r2, #36	@ 0x24
 800617c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	681a      	ldr	r2, [r3, #0]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 0201 	bic.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800619e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80061ae:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80061b0:	f001 f9f6 	bl	80075a0 <HAL_RCC_GetPCLK1Freq>
 80061b4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	4a81      	ldr	r2, [pc, #516]	@ (80063c0 <HAL_I2C_Init+0x274>)
 80061bc:	4293      	cmp	r3, r2
 80061be:	d807      	bhi.n	80061d0 <HAL_I2C_Init+0x84>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	4a80      	ldr	r2, [pc, #512]	@ (80063c4 <HAL_I2C_Init+0x278>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	bf94      	ite	ls
 80061c8:	2301      	movls	r3, #1
 80061ca:	2300      	movhi	r3, #0
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	e006      	b.n	80061de <HAL_I2C_Init+0x92>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	4a7d      	ldr	r2, [pc, #500]	@ (80063c8 <HAL_I2C_Init+0x27c>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	bf94      	ite	ls
 80061d8:	2301      	movls	r3, #1
 80061da:	2300      	movhi	r3, #0
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d001      	beq.n	80061e6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e0e7      	b.n	80063b6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a78      	ldr	r2, [pc, #480]	@ (80063cc <HAL_I2C_Init+0x280>)
 80061ea:	fba2 2303 	umull	r2, r3, r2, r3
 80061ee:	0c9b      	lsrs	r3, r3, #18
 80061f0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	430a      	orrs	r2, r1
 8006204:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	6a1b      	ldr	r3, [r3, #32]
 800620c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	685b      	ldr	r3, [r3, #4]
 8006214:	4a6a      	ldr	r2, [pc, #424]	@ (80063c0 <HAL_I2C_Init+0x274>)
 8006216:	4293      	cmp	r3, r2
 8006218:	d802      	bhi.n	8006220 <HAL_I2C_Init+0xd4>
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	3301      	adds	r3, #1
 800621e:	e009      	b.n	8006234 <HAL_I2C_Init+0xe8>
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8006226:	fb02 f303 	mul.w	r3, r2, r3
 800622a:	4a69      	ldr	r2, [pc, #420]	@ (80063d0 <HAL_I2C_Init+0x284>)
 800622c:	fba2 2303 	umull	r2, r3, r2, r3
 8006230:	099b      	lsrs	r3, r3, #6
 8006232:	3301      	adds	r3, #1
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	6812      	ldr	r2, [r2, #0]
 8006238:	430b      	orrs	r3, r1
 800623a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69db      	ldr	r3, [r3, #28]
 8006242:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8006246:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	495c      	ldr	r1, [pc, #368]	@ (80063c0 <HAL_I2C_Init+0x274>)
 8006250:	428b      	cmp	r3, r1
 8006252:	d819      	bhi.n	8006288 <HAL_I2C_Init+0x13c>
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	1e59      	subs	r1, r3, #1
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685b      	ldr	r3, [r3, #4]
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	fbb1 f3f3 	udiv	r3, r1, r3
 8006262:	1c59      	adds	r1, r3, #1
 8006264:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8006268:	400b      	ands	r3, r1
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00a      	beq.n	8006284 <HAL_I2C_Init+0x138>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	1e59      	subs	r1, r3, #1
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	005b      	lsls	r3, r3, #1
 8006278:	fbb1 f3f3 	udiv	r3, r1, r3
 800627c:	3301      	adds	r3, #1
 800627e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006282:	e051      	b.n	8006328 <HAL_I2C_Init+0x1dc>
 8006284:	2304      	movs	r3, #4
 8006286:	e04f      	b.n	8006328 <HAL_I2C_Init+0x1dc>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	689b      	ldr	r3, [r3, #8]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d111      	bne.n	80062b4 <HAL_I2C_Init+0x168>
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	1e58      	subs	r0, r3, #1
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	6859      	ldr	r1, [r3, #4]
 8006298:	460b      	mov	r3, r1
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	440b      	add	r3, r1
 800629e:	fbb0 f3f3 	udiv	r3, r0, r3
 80062a2:	3301      	adds	r3, #1
 80062a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	bf0c      	ite	eq
 80062ac:	2301      	moveq	r3, #1
 80062ae:	2300      	movne	r3, #0
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	e012      	b.n	80062da <HAL_I2C_Init+0x18e>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	1e58      	subs	r0, r3, #1
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	460b      	mov	r3, r1
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	440b      	add	r3, r1
 80062c2:	0099      	lsls	r1, r3, #2
 80062c4:	440b      	add	r3, r1
 80062c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80062ca:	3301      	adds	r3, #1
 80062cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	bf0c      	ite	eq
 80062d4:	2301      	moveq	r3, #1
 80062d6:	2300      	movne	r3, #0
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_I2C_Init+0x196>
 80062de:	2301      	movs	r3, #1
 80062e0:	e022      	b.n	8006328 <HAL_I2C_Init+0x1dc>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10e      	bne.n	8006308 <HAL_I2C_Init+0x1bc>
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	1e58      	subs	r0, r3, #1
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6859      	ldr	r1, [r3, #4]
 80062f2:	460b      	mov	r3, r1
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	440b      	add	r3, r1
 80062f8:	fbb0 f3f3 	udiv	r3, r0, r3
 80062fc:	3301      	adds	r3, #1
 80062fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006302:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006306:	e00f      	b.n	8006328 <HAL_I2C_Init+0x1dc>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	1e58      	subs	r0, r3, #1
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6859      	ldr	r1, [r3, #4]
 8006310:	460b      	mov	r3, r1
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	440b      	add	r3, r1
 8006316:	0099      	lsls	r1, r3, #2
 8006318:	440b      	add	r3, r1
 800631a:	fbb0 f3f3 	udiv	r3, r0, r3
 800631e:	3301      	adds	r3, #1
 8006320:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006324:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006328:	6879      	ldr	r1, [r7, #4]
 800632a:	6809      	ldr	r1, [r1, #0]
 800632c:	4313      	orrs	r3, r2
 800632e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	69da      	ldr	r2, [r3, #28]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6a1b      	ldr	r3, [r3, #32]
 8006342:	431a      	orrs	r2, r3
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	430a      	orrs	r2, r1
 800634a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8006356:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	6911      	ldr	r1, [r2, #16]
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	68d2      	ldr	r2, [r2, #12]
 8006362:	4311      	orrs	r1, r2
 8006364:	687a      	ldr	r2, [r7, #4]
 8006366:	6812      	ldr	r2, [r2, #0]
 8006368:	430b      	orrs	r3, r1
 800636a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	695a      	ldr	r2, [r3, #20]
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	699b      	ldr	r3, [r3, #24]
 800637e:	431a      	orrs	r2, r3
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	430a      	orrs	r2, r1
 8006386:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f042 0201 	orr.w	r2, r2, #1
 8006396:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2200      	movs	r2, #0
 800639c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2220      	movs	r2, #32
 80063a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2200      	movs	r2, #0
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3710      	adds	r7, #16
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	000186a0 	.word	0x000186a0
 80063c4:	001e847f 	.word	0x001e847f
 80063c8:	003d08ff 	.word	0x003d08ff
 80063cc:	431bde83 	.word	0x431bde83
 80063d0:	10624dd3 	.word	0x10624dd3

080063d4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b08c      	sub	sp, #48	@ 0x30
 80063d8:	af02      	add	r7, sp, #8
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	4608      	mov	r0, r1
 80063de:	4611      	mov	r1, r2
 80063e0:	461a      	mov	r2, r3
 80063e2:	4603      	mov	r3, r0
 80063e4:	817b      	strh	r3, [r7, #10]
 80063e6:	460b      	mov	r3, r1
 80063e8:	813b      	strh	r3, [r7, #8]
 80063ea:	4613      	mov	r3, r2
 80063ec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80063ee:	f7fe f95d 	bl	80046ac <HAL_GetTick>
 80063f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	2b20      	cmp	r3, #32
 80063fe:	f040 8208 	bne.w	8006812 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	9300      	str	r3, [sp, #0]
 8006406:	2319      	movs	r3, #25
 8006408:	2201      	movs	r2, #1
 800640a:	497b      	ldr	r1, [pc, #492]	@ (80065f8 <HAL_I2C_Mem_Read+0x224>)
 800640c:	68f8      	ldr	r0, [r7, #12]
 800640e:	f000 faef 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 8006412:	4603      	mov	r3, r0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d001      	beq.n	800641c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006418:	2302      	movs	r3, #2
 800641a:	e1fb      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006422:	2b01      	cmp	r3, #1
 8006424:	d101      	bne.n	800642a <HAL_I2C_Mem_Read+0x56>
 8006426:	2302      	movs	r3, #2
 8006428:	e1f4      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2201      	movs	r2, #1
 800642e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0301 	and.w	r3, r3, #1
 800643c:	2b01      	cmp	r3, #1
 800643e:	d007      	beq.n	8006450 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800645e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2222      	movs	r2, #34	@ 0x22
 8006464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2240      	movs	r2, #64	@ 0x40
 800646c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800647a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006480:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006486:	b29a      	uxth	r2, r3
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	4a5b      	ldr	r2, [pc, #364]	@ (80065fc <HAL_I2C_Mem_Read+0x228>)
 8006490:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006492:	88f8      	ldrh	r0, [r7, #6]
 8006494:	893a      	ldrh	r2, [r7, #8]
 8006496:	8979      	ldrh	r1, [r7, #10]
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	9301      	str	r3, [sp, #4]
 800649c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800649e:	9300      	str	r3, [sp, #0]
 80064a0:	4603      	mov	r3, r0
 80064a2:	68f8      	ldr	r0, [r7, #12]
 80064a4:	f000 f9bc 	bl	8006820 <I2C_RequestMemoryRead>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e1b0      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d113      	bne.n	80064e2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064ba:	2300      	movs	r3, #0
 80064bc:	623b      	str	r3, [r7, #32]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	695b      	ldr	r3, [r3, #20]
 80064c4:	623b      	str	r3, [r7, #32]
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	623b      	str	r3, [r7, #32]
 80064ce:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064de:	601a      	str	r2, [r3, #0]
 80064e0:	e184      	b.n	80067ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80064e6:	2b01      	cmp	r3, #1
 80064e8:	d11b      	bne.n	8006522 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064f8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064fa:	2300      	movs	r3, #0
 80064fc:	61fb      	str	r3, [r7, #28]
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	695b      	ldr	r3, [r3, #20]
 8006504:	61fb      	str	r3, [r7, #28]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	681a      	ldr	r2, [r3, #0]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800651e:	601a      	str	r2, [r3, #0]
 8006520:	e164      	b.n	80067ec <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006526:	2b02      	cmp	r3, #2
 8006528:	d11b      	bne.n	8006562 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006538:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006548:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800654a:	2300      	movs	r3, #0
 800654c:	61bb      	str	r3, [r7, #24]
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	695b      	ldr	r3, [r3, #20]
 8006554:	61bb      	str	r3, [r7, #24]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	61bb      	str	r3, [r7, #24]
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	e144      	b.n	80067ec <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006562:	2300      	movs	r3, #0
 8006564:	617b      	str	r3, [r7, #20]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	695b      	ldr	r3, [r3, #20]
 800656c:	617b      	str	r3, [r7, #20]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	699b      	ldr	r3, [r3, #24]
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006578:	e138      	b.n	80067ec <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800657e:	2b03      	cmp	r3, #3
 8006580:	f200 80f1 	bhi.w	8006766 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006588:	2b01      	cmp	r3, #1
 800658a:	d123      	bne.n	80065d4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800658c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800658e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006590:	68f8      	ldr	r0, [r7, #12]
 8006592:	f000 fb44 	bl	8006c1e <I2C_WaitOnRXNEFlagUntilTimeout>
 8006596:	4603      	mov	r3, r0
 8006598:	2b00      	cmp	r3, #0
 800659a:	d001      	beq.n	80065a0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	e139      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	691a      	ldr	r2, [r3, #16]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065aa:	b2d2      	uxtb	r2, r2
 80065ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065b2:	1c5a      	adds	r2, r3, #1
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065bc:	3b01      	subs	r3, #1
 80065be:	b29a      	uxth	r2, r3
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80065d2:	e10b      	b.n	80067ec <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80065d8:	2b02      	cmp	r3, #2
 80065da:	d14e      	bne.n	800667a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	9300      	str	r3, [sp, #0]
 80065e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065e2:	2200      	movs	r2, #0
 80065e4:	4906      	ldr	r1, [pc, #24]	@ (8006600 <HAL_I2C_Mem_Read+0x22c>)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 fa02 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d008      	beq.n	8006604 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e10e      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
 80065f6:	bf00      	nop
 80065f8:	00100002 	.word	0x00100002
 80065fc:	ffff0000 	.word	0xffff0000
 8006600:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	691a      	ldr	r2, [r3, #16]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006626:	1c5a      	adds	r2, r3, #1
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006630:	3b01      	subs	r3, #1
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800663c:	b29b      	uxth	r3, r3
 800663e:	3b01      	subs	r3, #1
 8006640:	b29a      	uxth	r2, r3
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	691a      	ldr	r2, [r3, #16]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006650:	b2d2      	uxtb	r2, r2
 8006652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006662:	3b01      	subs	r3, #1
 8006664:	b29a      	uxth	r2, r3
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800666e:	b29b      	uxth	r3, r3
 8006670:	3b01      	subs	r3, #1
 8006672:	b29a      	uxth	r2, r3
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006678:	e0b8      	b.n	80067ec <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800667a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800667c:	9300      	str	r3, [sp, #0]
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	2200      	movs	r2, #0
 8006682:	4966      	ldr	r1, [pc, #408]	@ (800681c <HAL_I2C_Mem_Read+0x448>)
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f000 f9b3 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 800668a:	4603      	mov	r3, r0
 800668c:	2b00      	cmp	r3, #0
 800668e:	d001      	beq.n	8006694 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006690:	2301      	movs	r3, #1
 8006692:	e0bf      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	681a      	ldr	r2, [r3, #0]
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066a2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	691a      	ldr	r2, [r3, #16]
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	1c5a      	adds	r2, r3, #1
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80066c0:	3b01      	subs	r3, #1
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	9300      	str	r3, [sp, #0]
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	2200      	movs	r2, #0
 80066de:	494f      	ldr	r1, [pc, #316]	@ (800681c <HAL_I2C_Mem_Read+0x448>)
 80066e0:	68f8      	ldr	r0, [r7, #12]
 80066e2:	f000 f985 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	e091      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066fe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	691a      	ldr	r2, [r3, #16]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800670a:	b2d2      	uxtb	r2, r2
 800670c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800671c:	3b01      	subs	r3, #1
 800671e:	b29a      	uxth	r2, r3
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006728:	b29b      	uxth	r3, r3
 800672a:	3b01      	subs	r3, #1
 800672c:	b29a      	uxth	r2, r3
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	691a      	ldr	r2, [r3, #16]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800673c:	b2d2      	uxtb	r2, r2
 800673e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006744:	1c5a      	adds	r2, r3, #1
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800675a:	b29b      	uxth	r3, r3
 800675c:	3b01      	subs	r3, #1
 800675e:	b29a      	uxth	r2, r3
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8006764:	e042      	b.n	80067ec <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006766:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006768:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800676a:	68f8      	ldr	r0, [r7, #12]
 800676c:	f000 fa57 	bl	8006c1e <I2C_WaitOnRXNEFlagUntilTimeout>
 8006770:	4603      	mov	r3, r0
 8006772:	2b00      	cmp	r3, #0
 8006774:	d001      	beq.n	800677a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e04c      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	691a      	ldr	r2, [r3, #16]
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006784:	b2d2      	uxtb	r2, r2
 8006786:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678c:	1c5a      	adds	r2, r3, #1
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	3b01      	subs	r3, #1
 80067a6:	b29a      	uxth	r2, r3
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	695b      	ldr	r3, [r3, #20]
 80067b2:	f003 0304 	and.w	r3, r3, #4
 80067b6:	2b04      	cmp	r3, #4
 80067b8:	d118      	bne.n	80067ec <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c4:	b2d2      	uxtb	r2, r2
 80067c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067cc:	1c5a      	adds	r2, r3, #1
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067d6:	3b01      	subs	r3, #1
 80067d8:	b29a      	uxth	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067e2:	b29b      	uxth	r3, r3
 80067e4:	3b01      	subs	r3, #1
 80067e6:	b29a      	uxth	r2, r3
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f47f aec2 	bne.w	800657a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2200      	movs	r2, #0
 800680a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800680e:	2300      	movs	r3, #0
 8006810:	e000      	b.n	8006814 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006812:	2302      	movs	r3, #2
  }
}
 8006814:	4618      	mov	r0, r3
 8006816:	3728      	adds	r7, #40	@ 0x28
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	00010004 	.word	0x00010004

08006820 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b088      	sub	sp, #32
 8006824:	af02      	add	r7, sp, #8
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	4608      	mov	r0, r1
 800682a:	4611      	mov	r1, r2
 800682c:	461a      	mov	r2, r3
 800682e:	4603      	mov	r3, r0
 8006830:	817b      	strh	r3, [r7, #10]
 8006832:	460b      	mov	r3, r1
 8006834:	813b      	strh	r3, [r7, #8]
 8006836:	4613      	mov	r3, r2
 8006838:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006848:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	681a      	ldr	r2, [r3, #0]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006858:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800685a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685c:	9300      	str	r3, [sp, #0]
 800685e:	6a3b      	ldr	r3, [r7, #32]
 8006860:	2200      	movs	r2, #0
 8006862:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006866:	68f8      	ldr	r0, [r7, #12]
 8006868:	f000 f8c2 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 800686c:	4603      	mov	r3, r0
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00d      	beq.n	800688e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800687c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006880:	d103      	bne.n	800688a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006888:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e0aa      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800688e:	897b      	ldrh	r3, [r7, #10]
 8006890:	b2db      	uxtb	r3, r3
 8006892:	461a      	mov	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800689c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800689e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068a0:	6a3a      	ldr	r2, [r7, #32]
 80068a2:	4952      	ldr	r1, [pc, #328]	@ (80069ec <I2C_RequestMemoryRead+0x1cc>)
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f000 f8fa 	bl	8006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80068aa:	4603      	mov	r3, r0
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d001      	beq.n	80068b4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e097      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	695b      	ldr	r3, [r3, #20]
 80068be:	617b      	str	r3, [r7, #20]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	617b      	str	r3, [r7, #20]
 80068c8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80068ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068cc:	6a39      	ldr	r1, [r7, #32]
 80068ce:	68f8      	ldr	r0, [r7, #12]
 80068d0:	f000 f964 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00d      	beq.n	80068f6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d107      	bne.n	80068f2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80068f0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80068f2:	2301      	movs	r3, #1
 80068f4:	e076      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80068f6:	88fb      	ldrh	r3, [r7, #6]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d105      	bne.n	8006908 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80068fc:	893b      	ldrh	r3, [r7, #8]
 80068fe:	b2da      	uxtb	r2, r3
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	611a      	str	r2, [r3, #16]
 8006906:	e021      	b.n	800694c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006908:	893b      	ldrh	r3, [r7, #8]
 800690a:	0a1b      	lsrs	r3, r3, #8
 800690c:	b29b      	uxth	r3, r3
 800690e:	b2da      	uxtb	r2, r3
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006916:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006918:	6a39      	ldr	r1, [r7, #32]
 800691a:	68f8      	ldr	r0, [r7, #12]
 800691c:	f000 f93e 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006920:	4603      	mov	r3, r0
 8006922:	2b00      	cmp	r3, #0
 8006924:	d00d      	beq.n	8006942 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	2b04      	cmp	r3, #4
 800692c:	d107      	bne.n	800693e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	681a      	ldr	r2, [r3, #0]
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800693c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800693e:	2301      	movs	r3, #1
 8006940:	e050      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006942:	893b      	ldrh	r3, [r7, #8]
 8006944:	b2da      	uxtb	r2, r3
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800694c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800694e:	6a39      	ldr	r1, [r7, #32]
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f923 	bl	8006b9c <I2C_WaitOnTXEFlagUntilTimeout>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00d      	beq.n	8006978 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006960:	2b04      	cmp	r3, #4
 8006962:	d107      	bne.n	8006974 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006972:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006974:	2301      	movs	r3, #1
 8006976:	e035      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	681a      	ldr	r2, [r3, #0]
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006986:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800698a:	9300      	str	r3, [sp, #0]
 800698c:	6a3b      	ldr	r3, [r7, #32]
 800698e:	2200      	movs	r2, #0
 8006990:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f82b 	bl	80069f0 <I2C_WaitOnFlagUntilTimeout>
 800699a:	4603      	mov	r3, r0
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00d      	beq.n	80069bc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80069aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80069ae:	d103      	bne.n	80069b8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80069b6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80069b8:	2303      	movs	r3, #3
 80069ba:	e013      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80069bc:	897b      	ldrh	r3, [r7, #10]
 80069be:	b2db      	uxtb	r3, r3
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	b2da      	uxtb	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80069cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ce:	6a3a      	ldr	r2, [r7, #32]
 80069d0:	4906      	ldr	r1, [pc, #24]	@ (80069ec <I2C_RequestMemoryRead+0x1cc>)
 80069d2:	68f8      	ldr	r0, [r7, #12]
 80069d4:	f000 f863 	bl	8006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	e000      	b.n	80069e4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80069e2:	2300      	movs	r3, #0
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3718      	adds	r7, #24
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	00010002 	.word	0x00010002

080069f0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a00:	e025      	b.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a08:	d021      	beq.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0a:	f7fd fe4f 	bl	80046ac <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	69bb      	ldr	r3, [r7, #24]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	683a      	ldr	r2, [r7, #0]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d116      	bne.n	8006a4e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	2220      	movs	r2, #32
 8006a2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	2200      	movs	r2, #0
 8006a32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a3a:	f043 0220 	orr.w	r2, r3, #32
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	e023      	b.n	8006a96 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	0c1b      	lsrs	r3, r3, #16
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	2b01      	cmp	r3, #1
 8006a56:	d10d      	bne.n	8006a74 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	695b      	ldr	r3, [r3, #20]
 8006a5e:	43da      	mvns	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4013      	ands	r3, r2
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	bf0c      	ite	eq
 8006a6a:	2301      	moveq	r3, #1
 8006a6c:	2300      	movne	r3, #0
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	461a      	mov	r2, r3
 8006a72:	e00c      	b.n	8006a8e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	43da      	mvns	r2, r3
 8006a7c:	68bb      	ldr	r3, [r7, #8]
 8006a7e:	4013      	ands	r3, r2
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	bf0c      	ite	eq
 8006a86:	2301      	moveq	r3, #1
 8006a88:	2300      	movne	r3, #0
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	429a      	cmp	r2, r3
 8006a92:	d0b6      	beq.n	8006a02 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006a94:	2300      	movs	r3, #0
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3710      	adds	r7, #16
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}

08006a9e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006a9e:	b580      	push	{r7, lr}
 8006aa0:	b084      	sub	sp, #16
 8006aa2:	af00      	add	r7, sp, #0
 8006aa4:	60f8      	str	r0, [r7, #12]
 8006aa6:	60b9      	str	r1, [r7, #8]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aac:	e051      	b.n	8006b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006ab8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006abc:	d123      	bne.n	8006b06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006acc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006ad6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006af2:	f043 0204 	orr.w	r2, r3, #4
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2200      	movs	r2, #0
 8006afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e046      	b.n	8006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006b0c:	d021      	beq.n	8006b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b0e:	f7fd fdcd 	bl	80046ac <HAL_GetTick>
 8006b12:	4602      	mov	r2, r0
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	1ad3      	subs	r3, r2, r3
 8006b18:	687a      	ldr	r2, [r7, #4]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d302      	bcc.n	8006b24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d116      	bne.n	8006b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2200      	movs	r2, #0
 8006b28:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	2220      	movs	r2, #32
 8006b2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2200      	movs	r2, #0
 8006b36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b3e:	f043 0220 	orr.w	r2, r3, #32
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e020      	b.n	8006b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	b2db      	uxtb	r3, r3
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d10c      	bne.n	8006b76 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	695b      	ldr	r3, [r3, #20]
 8006b62:	43da      	mvns	r2, r3
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	4013      	ands	r3, r2
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	bf14      	ite	ne
 8006b6e:	2301      	movne	r3, #1
 8006b70:	2300      	moveq	r3, #0
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	e00b      	b.n	8006b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	43da      	mvns	r2, r3
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	4013      	ands	r3, r2
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	bf14      	ite	ne
 8006b88:	2301      	movne	r3, #1
 8006b8a:	2300      	moveq	r3, #0
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d18d      	bne.n	8006aae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3710      	adds	r7, #16
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006ba8:	e02d      	b.n	8006c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f88d 	bl	8006cca <I2C_IsAcknowledgeFailed>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e02d      	b.n	8006c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bba:	68bb      	ldr	r3, [r7, #8]
 8006bbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006bc0:	d021      	beq.n	8006c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bc2:	f7fd fd73 	bl	80046ac <HAL_GetTick>
 8006bc6:	4602      	mov	r2, r0
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	68ba      	ldr	r2, [r7, #8]
 8006bce:	429a      	cmp	r2, r3
 8006bd0:	d302      	bcc.n	8006bd8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006bd2:	68bb      	ldr	r3, [r7, #8]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d116      	bne.n	8006c06 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2200      	movs	r2, #0
 8006bdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	2220      	movs	r2, #32
 8006be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bf2:	f043 0220 	orr.w	r2, r3, #32
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e007      	b.n	8006c16 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	695b      	ldr	r3, [r3, #20]
 8006c0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c10:	2b80      	cmp	r3, #128	@ 0x80
 8006c12:	d1ca      	bne.n	8006baa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006c14:	2300      	movs	r3, #0
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3710      	adds	r7, #16
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}

08006c1e <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c1e:	b580      	push	{r7, lr}
 8006c20:	b084      	sub	sp, #16
 8006c22:	af00      	add	r7, sp, #0
 8006c24:	60f8      	str	r0, [r7, #12]
 8006c26:	60b9      	str	r1, [r7, #8]
 8006c28:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006c2a:	e042      	b.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f003 0310 	and.w	r3, r3, #16
 8006c36:	2b10      	cmp	r3, #16
 8006c38:	d119      	bne.n	8006c6e <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f06f 0210 	mvn.w	r2, #16
 8006c42:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2220      	movs	r2, #32
 8006c4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e029      	b.n	8006cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6e:	f7fd fd1d 	bl	80046ac <HAL_GetTick>
 8006c72:	4602      	mov	r2, r0
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	1ad3      	subs	r3, r2, r3
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d302      	bcc.n	8006c84 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d116      	bne.n	8006cb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2200      	movs	r2, #0
 8006c88:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2220      	movs	r2, #32
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c9e:	f043 0220 	orr.w	r2, r3, #32
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006cae:	2301      	movs	r3, #1
 8006cb0:	e007      	b.n	8006cc2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	695b      	ldr	r3, [r3, #20]
 8006cb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cbc:	2b40      	cmp	r3, #64	@ 0x40
 8006cbe:	d1b5      	bne.n	8006c2c <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006cc0:	2300      	movs	r3, #0
}
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	3710      	adds	r7, #16
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}

08006cca <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006cca:	b480      	push	{r7}
 8006ccc:	b083      	sub	sp, #12
 8006cce:	af00      	add	r7, sp, #0
 8006cd0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695b      	ldr	r3, [r3, #20]
 8006cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006ce0:	d11b      	bne.n	8006d1a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cea:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2220      	movs	r2, #32
 8006cf6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d06:	f043 0204 	orr.w	r2, r3, #4
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d101      	bne.n	8006d3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006d36:	2301      	movs	r3, #1
 8006d38:	e267      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d075      	beq.n	8006e32 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d46:	4b88      	ldr	r3, [pc, #544]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	f003 030c 	and.w	r3, r3, #12
 8006d4e:	2b04      	cmp	r3, #4
 8006d50:	d00c      	beq.n	8006d6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d52:	4b85      	ldr	r3, [pc, #532]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d54:	689b      	ldr	r3, [r3, #8]
 8006d56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d112      	bne.n	8006d84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006d5e:	4b82      	ldr	r3, [pc, #520]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d66:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d6a:	d10b      	bne.n	8006d84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d05b      	beq.n	8006e30 <HAL_RCC_OscConfig+0x108>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	685b      	ldr	r3, [r3, #4]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d157      	bne.n	8006e30 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006d80:	2301      	movs	r3, #1
 8006d82:	e242      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006d8c:	d106      	bne.n	8006d9c <HAL_RCC_OscConfig+0x74>
 8006d8e:	4b76      	ldr	r3, [pc, #472]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a75      	ldr	r2, [pc, #468]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006d94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	e01d      	b.n	8006dd8 <HAL_RCC_OscConfig+0xb0>
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006da4:	d10c      	bne.n	8006dc0 <HAL_RCC_OscConfig+0x98>
 8006da6:	4b70      	ldr	r3, [pc, #448]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a6f      	ldr	r2, [pc, #444]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006db0:	6013      	str	r3, [r2, #0]
 8006db2:	4b6d      	ldr	r3, [pc, #436]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	4a6c      	ldr	r2, [pc, #432]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006db8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006dbc:	6013      	str	r3, [r2, #0]
 8006dbe:	e00b      	b.n	8006dd8 <HAL_RCC_OscConfig+0xb0>
 8006dc0:	4b69      	ldr	r3, [pc, #420]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a68      	ldr	r2, [pc, #416]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dc6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006dca:	6013      	str	r3, [r2, #0]
 8006dcc:	4b66      	ldr	r3, [pc, #408]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a65      	ldr	r2, [pc, #404]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006dd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	685b      	ldr	r3, [r3, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d013      	beq.n	8006e08 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006de0:	f7fd fc64 	bl	80046ac <HAL_GetTick>
 8006de4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006de6:	e008      	b.n	8006dfa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006de8:	f7fd fc60 	bl	80046ac <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	693b      	ldr	r3, [r7, #16]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	2b64      	cmp	r3, #100	@ 0x64
 8006df4:	d901      	bls.n	8006dfa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006df6:	2303      	movs	r3, #3
 8006df8:	e207      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006dfa:	4b5b      	ldr	r3, [pc, #364]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d0f0      	beq.n	8006de8 <HAL_RCC_OscConfig+0xc0>
 8006e06:	e014      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e08:	f7fd fc50 	bl	80046ac <HAL_GetTick>
 8006e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e0e:	e008      	b.n	8006e22 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006e10:	f7fd fc4c 	bl	80046ac <HAL_GetTick>
 8006e14:	4602      	mov	r2, r0
 8006e16:	693b      	ldr	r3, [r7, #16]
 8006e18:	1ad3      	subs	r3, r2, r3
 8006e1a:	2b64      	cmp	r3, #100	@ 0x64
 8006e1c:	d901      	bls.n	8006e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e1f3      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006e22:	4b51      	ldr	r3, [pc, #324]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1f0      	bne.n	8006e10 <HAL_RCC_OscConfig+0xe8>
 8006e2e:	e000      	b.n	8006e32 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e30:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 0302 	and.w	r3, r3, #2
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d063      	beq.n	8006f06 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e40:	689b      	ldr	r3, [r3, #8]
 8006e42:	f003 030c 	and.w	r3, r3, #12
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d00b      	beq.n	8006e62 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e4a:	4b47      	ldr	r3, [pc, #284]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e4c:	689b      	ldr	r3, [r3, #8]
 8006e4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006e52:	2b08      	cmp	r3, #8
 8006e54:	d11c      	bne.n	8006e90 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006e56:	4b44      	ldr	r3, [pc, #272]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d116      	bne.n	8006e90 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e62:	4b41      	ldr	r3, [pc, #260]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f003 0302 	and.w	r3, r3, #2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d005      	beq.n	8006e7a <HAL_RCC_OscConfig+0x152>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	2b01      	cmp	r3, #1
 8006e74:	d001      	beq.n	8006e7a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
 8006e78:	e1c7      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e7a:	4b3b      	ldr	r3, [pc, #236]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4937      	ldr	r1, [pc, #220]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006e8e:	e03a      	b.n	8006f06 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d020      	beq.n	8006eda <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e98:	4b34      	ldr	r3, [pc, #208]	@ (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006e9a:	2201      	movs	r2, #1
 8006e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e9e:	f7fd fc05 	bl	80046ac <HAL_GetTick>
 8006ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ea4:	e008      	b.n	8006eb8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ea6:	f7fd fc01 	bl	80046ac <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	693b      	ldr	r3, [r7, #16]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	2b02      	cmp	r3, #2
 8006eb2:	d901      	bls.n	8006eb8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	e1a8      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006eb8:	4b2b      	ldr	r3, [pc, #172]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d0f0      	beq.n	8006ea6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ec4:	4b28      	ldr	r3, [pc, #160]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	691b      	ldr	r3, [r3, #16]
 8006ed0:	00db      	lsls	r3, r3, #3
 8006ed2:	4925      	ldr	r1, [pc, #148]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	600b      	str	r3, [r1, #0]
 8006ed8:	e015      	b.n	8006f06 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eda:	4b24      	ldr	r3, [pc, #144]	@ (8006f6c <HAL_RCC_OscConfig+0x244>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ee0:	f7fd fbe4 	bl	80046ac <HAL_GetTick>
 8006ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006ee6:	e008      	b.n	8006efa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006ee8:	f7fd fbe0 	bl	80046ac <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	2b02      	cmp	r3, #2
 8006ef4:	d901      	bls.n	8006efa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006ef6:	2303      	movs	r3, #3
 8006ef8:	e187      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006efa:	4b1b      	ldr	r3, [pc, #108]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f003 0302 	and.w	r3, r3, #2
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d1f0      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0308 	and.w	r3, r3, #8
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d036      	beq.n	8006f80 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d016      	beq.n	8006f48 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006f1a:	4b15      	ldr	r3, [pc, #84]	@ (8006f70 <HAL_RCC_OscConfig+0x248>)
 8006f1c:	2201      	movs	r2, #1
 8006f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f20:	f7fd fbc4 	bl	80046ac <HAL_GetTick>
 8006f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f26:	e008      	b.n	8006f3a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f28:	f7fd fbc0 	bl	80046ac <HAL_GetTick>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	1ad3      	subs	r3, r2, r3
 8006f32:	2b02      	cmp	r3, #2
 8006f34:	d901      	bls.n	8006f3a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006f36:	2303      	movs	r3, #3
 8006f38:	e167      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8006f68 <HAL_RCC_OscConfig+0x240>)
 8006f3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d0f0      	beq.n	8006f28 <HAL_RCC_OscConfig+0x200>
 8006f46:	e01b      	b.n	8006f80 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f48:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <HAL_RCC_OscConfig+0x248>)
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006f4e:	f7fd fbad 	bl	80046ac <HAL_GetTick>
 8006f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f54:	e00e      	b.n	8006f74 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006f56:	f7fd fba9 	bl	80046ac <HAL_GetTick>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	693b      	ldr	r3, [r7, #16]
 8006f5e:	1ad3      	subs	r3, r2, r3
 8006f60:	2b02      	cmp	r3, #2
 8006f62:	d907      	bls.n	8006f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006f64:	2303      	movs	r3, #3
 8006f66:	e150      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
 8006f68:	40023800 	.word	0x40023800
 8006f6c:	42470000 	.word	0x42470000
 8006f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006f74:	4b88      	ldr	r3, [pc, #544]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8006f76:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1ea      	bne.n	8006f56 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0304 	and.w	r3, r3, #4
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	f000 8097 	beq.w	80070bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006f92:	4b81      	ldr	r3, [pc, #516]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8006f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d10f      	bne.n	8006fbe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	4b7d      	ldr	r3, [pc, #500]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fa6:	4a7c      	ldr	r2, [pc, #496]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8006fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8006fae:	4b7a      	ldr	r3, [pc, #488]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8006fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006fb6:	60bb      	str	r3, [r7, #8]
 8006fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fbe:	4b77      	ldr	r3, [pc, #476]	@ (800719c <HAL_RCC_OscConfig+0x474>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d118      	bne.n	8006ffc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006fca:	4b74      	ldr	r3, [pc, #464]	@ (800719c <HAL_RCC_OscConfig+0x474>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a73      	ldr	r2, [pc, #460]	@ (800719c <HAL_RCC_OscConfig+0x474>)
 8006fd0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fd6:	f7fd fb69 	bl	80046ac <HAL_GetTick>
 8006fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006fdc:	e008      	b.n	8006ff0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fde:	f7fd fb65 	bl	80046ac <HAL_GetTick>
 8006fe2:	4602      	mov	r2, r0
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	1ad3      	subs	r3, r2, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d901      	bls.n	8006ff0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006fec:	2303      	movs	r3, #3
 8006fee:	e10c      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ff0:	4b6a      	ldr	r3, [pc, #424]	@ (800719c <HAL_RCC_OscConfig+0x474>)
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d0f0      	beq.n	8006fde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	689b      	ldr	r3, [r3, #8]
 8007000:	2b01      	cmp	r3, #1
 8007002:	d106      	bne.n	8007012 <HAL_RCC_OscConfig+0x2ea>
 8007004:	4b64      	ldr	r3, [pc, #400]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007006:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007008:	4a63      	ldr	r2, [pc, #396]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 800700a:	f043 0301 	orr.w	r3, r3, #1
 800700e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007010:	e01c      	b.n	800704c <HAL_RCC_OscConfig+0x324>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	2b05      	cmp	r3, #5
 8007018:	d10c      	bne.n	8007034 <HAL_RCC_OscConfig+0x30c>
 800701a:	4b5f      	ldr	r3, [pc, #380]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 800701c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800701e:	4a5e      	ldr	r2, [pc, #376]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007020:	f043 0304 	orr.w	r3, r3, #4
 8007024:	6713      	str	r3, [r2, #112]	@ 0x70
 8007026:	4b5c      	ldr	r3, [pc, #368]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800702a:	4a5b      	ldr	r2, [pc, #364]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 800702c:	f043 0301 	orr.w	r3, r3, #1
 8007030:	6713      	str	r3, [r2, #112]	@ 0x70
 8007032:	e00b      	b.n	800704c <HAL_RCC_OscConfig+0x324>
 8007034:	4b58      	ldr	r3, [pc, #352]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007036:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007038:	4a57      	ldr	r2, [pc, #348]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 800703a:	f023 0301 	bic.w	r3, r3, #1
 800703e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007040:	4b55      	ldr	r3, [pc, #340]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007044:	4a54      	ldr	r2, [pc, #336]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007046:	f023 0304 	bic.w	r3, r3, #4
 800704a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	689b      	ldr	r3, [r3, #8]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d015      	beq.n	8007080 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007054:	f7fd fb2a 	bl	80046ac <HAL_GetTick>
 8007058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800705a:	e00a      	b.n	8007072 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800705c:	f7fd fb26 	bl	80046ac <HAL_GetTick>
 8007060:	4602      	mov	r2, r0
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	1ad3      	subs	r3, r2, r3
 8007066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800706a:	4293      	cmp	r3, r2
 800706c:	d901      	bls.n	8007072 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800706e:	2303      	movs	r3, #3
 8007070:	e0cb      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007072:	4b49      	ldr	r3, [pc, #292]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007074:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007076:	f003 0302 	and.w	r3, r3, #2
 800707a:	2b00      	cmp	r3, #0
 800707c:	d0ee      	beq.n	800705c <HAL_RCC_OscConfig+0x334>
 800707e:	e014      	b.n	80070aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007080:	f7fd fb14 	bl	80046ac <HAL_GetTick>
 8007084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007086:	e00a      	b.n	800709e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007088:	f7fd fb10 	bl	80046ac <HAL_GetTick>
 800708c:	4602      	mov	r2, r0
 800708e:	693b      	ldr	r3, [r7, #16]
 8007090:	1ad3      	subs	r3, r2, r3
 8007092:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007096:	4293      	cmp	r3, r2
 8007098:	d901      	bls.n	800709e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800709a:	2303      	movs	r3, #3
 800709c:	e0b5      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800709e:	4b3e      	ldr	r3, [pc, #248]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 80070a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80070a2:	f003 0302 	and.w	r3, r3, #2
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d1ee      	bne.n	8007088 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070aa:	7dfb      	ldrb	r3, [r7, #23]
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d105      	bne.n	80070bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070b0:	4b39      	ldr	r3, [pc, #228]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 80070b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070b4:	4a38      	ldr	r2, [pc, #224]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 80070b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80070ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	699b      	ldr	r3, [r3, #24]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	f000 80a1 	beq.w	8007208 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80070c6:	4b34      	ldr	r3, [pc, #208]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	2b08      	cmp	r3, #8
 80070d0:	d05c      	beq.n	800718c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	699b      	ldr	r3, [r3, #24]
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d141      	bne.n	800715e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80070da:	4b31      	ldr	r3, [pc, #196]	@ (80071a0 <HAL_RCC_OscConfig+0x478>)
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070e0:	f7fd fae4 	bl	80046ac <HAL_GetTick>
 80070e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80070e8:	f7fd fae0 	bl	80046ac <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e087      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80070fa:	4b27      	ldr	r3, [pc, #156]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	69da      	ldr	r2, [r3, #28]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6a1b      	ldr	r3, [r3, #32]
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007114:	019b      	lsls	r3, r3, #6
 8007116:	431a      	orrs	r2, r3
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800711c:	085b      	lsrs	r3, r3, #1
 800711e:	3b01      	subs	r3, #1
 8007120:	041b      	lsls	r3, r3, #16
 8007122:	431a      	orrs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007128:	061b      	lsls	r3, r3, #24
 800712a:	491b      	ldr	r1, [pc, #108]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 800712c:	4313      	orrs	r3, r2
 800712e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007130:	4b1b      	ldr	r3, [pc, #108]	@ (80071a0 <HAL_RCC_OscConfig+0x478>)
 8007132:	2201      	movs	r2, #1
 8007134:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007136:	f7fd fab9 	bl	80046ac <HAL_GetTick>
 800713a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800713e:	f7fd fab5 	bl	80046ac <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e05c      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007150:	4b11      	ldr	r3, [pc, #68]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d0f0      	beq.n	800713e <HAL_RCC_OscConfig+0x416>
 800715c:	e054      	b.n	8007208 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800715e:	4b10      	ldr	r3, [pc, #64]	@ (80071a0 <HAL_RCC_OscConfig+0x478>)
 8007160:	2200      	movs	r2, #0
 8007162:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007164:	f7fd faa2 	bl	80046ac <HAL_GetTick>
 8007168:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800716a:	e008      	b.n	800717e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800716c:	f7fd fa9e 	bl	80046ac <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e045      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800717e:	4b06      	ldr	r3, [pc, #24]	@ (8007198 <HAL_RCC_OscConfig+0x470>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d1f0      	bne.n	800716c <HAL_RCC_OscConfig+0x444>
 800718a:	e03d      	b.n	8007208 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	699b      	ldr	r3, [r3, #24]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d107      	bne.n	80071a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007194:	2301      	movs	r3, #1
 8007196:	e038      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
 8007198:	40023800 	.word	0x40023800
 800719c:	40007000 	.word	0x40007000
 80071a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80071a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007214 <HAL_RCC_OscConfig+0x4ec>)
 80071a6:	685b      	ldr	r3, [r3, #4]
 80071a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	2b01      	cmp	r3, #1
 80071b0:	d028      	beq.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80071bc:	429a      	cmp	r2, r3
 80071be:	d121      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d11a      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071ce:	68fa      	ldr	r2, [r7, #12]
 80071d0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80071d4:	4013      	ands	r3, r2
 80071d6:	687a      	ldr	r2, [r7, #4]
 80071d8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80071dc:	4293      	cmp	r3, r2
 80071de:	d111      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80071ea:	085b      	lsrs	r3, r3, #1
 80071ec:	3b01      	subs	r3, #1
 80071ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80071f0:	429a      	cmp	r2, r3
 80071f2:	d107      	bne.n	8007204 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007200:	429a      	cmp	r2, r3
 8007202:	d001      	beq.n	8007208 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007204:	2301      	movs	r3, #1
 8007206:	e000      	b.n	800720a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3718      	adds	r7, #24
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}
 8007212:	bf00      	nop
 8007214:	40023800 	.word	0x40023800

08007218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d101      	bne.n	800722c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007228:	2301      	movs	r3, #1
 800722a:	e0cc      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800722c:	4b68      	ldr	r3, [pc, #416]	@ (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	f003 0307 	and.w	r3, r3, #7
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d90c      	bls.n	8007254 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800723a:	4b65      	ldr	r3, [pc, #404]	@ (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	b2d2      	uxtb	r2, r2
 8007240:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007242:	4b63      	ldr	r3, [pc, #396]	@ (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f003 0307 	and.w	r3, r3, #7
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	d001      	beq.n	8007254 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007250:	2301      	movs	r3, #1
 8007252:	e0b8      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f003 0302 	and.w	r3, r3, #2
 800725c:	2b00      	cmp	r3, #0
 800725e:	d020      	beq.n	80072a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0304 	and.w	r3, r3, #4
 8007268:	2b00      	cmp	r3, #0
 800726a:	d005      	beq.n	8007278 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800726c:	4b59      	ldr	r3, [pc, #356]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	4a58      	ldr	r2, [pc, #352]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007272:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007276:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f003 0308 	and.w	r3, r3, #8
 8007280:	2b00      	cmp	r3, #0
 8007282:	d005      	beq.n	8007290 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007284:	4b53      	ldr	r3, [pc, #332]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	4a52      	ldr	r2, [pc, #328]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800728a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800728e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007290:	4b50      	ldr	r3, [pc, #320]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689b      	ldr	r3, [r3, #8]
 800729c:	494d      	ldr	r1, [pc, #308]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800729e:	4313      	orrs	r3, r2
 80072a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f003 0301 	and.w	r3, r3, #1
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d044      	beq.n	8007338 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	685b      	ldr	r3, [r3, #4]
 80072b2:	2b01      	cmp	r3, #1
 80072b4:	d107      	bne.n	80072c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80072b6:	4b47      	ldr	r3, [pc, #284]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d119      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072c2:	2301      	movs	r3, #1
 80072c4:	e07f      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	685b      	ldr	r3, [r3, #4]
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d003      	beq.n	80072d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80072d2:	2b03      	cmp	r3, #3
 80072d4:	d107      	bne.n	80072e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80072d6:	4b3f      	ldr	r3, [pc, #252]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d109      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e06f      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80072e6:	4b3b      	ldr	r3, [pc, #236]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 0302 	and.w	r3, r3, #2
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e067      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80072f6:	4b37      	ldr	r3, [pc, #220]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80072f8:	689b      	ldr	r3, [r3, #8]
 80072fa:	f023 0203 	bic.w	r2, r3, #3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	685b      	ldr	r3, [r3, #4]
 8007302:	4934      	ldr	r1, [pc, #208]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007304:	4313      	orrs	r3, r2
 8007306:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007308:	f7fd f9d0 	bl	80046ac <HAL_GetTick>
 800730c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800730e:	e00a      	b.n	8007326 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007310:	f7fd f9cc 	bl	80046ac <HAL_GetTick>
 8007314:	4602      	mov	r2, r0
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800731e:	4293      	cmp	r3, r2
 8007320:	d901      	bls.n	8007326 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007322:	2303      	movs	r3, #3
 8007324:	e04f      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007326:	4b2b      	ldr	r3, [pc, #172]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 020c 	and.w	r2, r3, #12
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	429a      	cmp	r2, r3
 8007336:	d1eb      	bne.n	8007310 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007338:	4b25      	ldr	r3, [pc, #148]	@ (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 0307 	and.w	r3, r3, #7
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d20c      	bcs.n	8007360 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007346:	4b22      	ldr	r3, [pc, #136]	@ (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007348:	683a      	ldr	r2, [r7, #0]
 800734a:	b2d2      	uxtb	r2, r2
 800734c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800734e:	4b20      	ldr	r3, [pc, #128]	@ (80073d0 <HAL_RCC_ClockConfig+0x1b8>)
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	f003 0307 	and.w	r3, r3, #7
 8007356:	683a      	ldr	r2, [r7, #0]
 8007358:	429a      	cmp	r2, r3
 800735a:	d001      	beq.n	8007360 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800735c:	2301      	movs	r3, #1
 800735e:	e032      	b.n	80073c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f003 0304 	and.w	r3, r3, #4
 8007368:	2b00      	cmp	r3, #0
 800736a:	d008      	beq.n	800737e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800736c:	4b19      	ldr	r3, [pc, #100]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	68db      	ldr	r3, [r3, #12]
 8007378:	4916      	ldr	r1, [pc, #88]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800737a:	4313      	orrs	r3, r2
 800737c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f003 0308 	and.w	r3, r3, #8
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800738a:	4b12      	ldr	r3, [pc, #72]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800738c:	689b      	ldr	r3, [r3, #8]
 800738e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	691b      	ldr	r3, [r3, #16]
 8007396:	00db      	lsls	r3, r3, #3
 8007398:	490e      	ldr	r1, [pc, #56]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 800739a:	4313      	orrs	r3, r2
 800739c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800739e:	f000 f82d 	bl	80073fc <HAL_RCC_GetSysClockFreq>
 80073a2:	4602      	mov	r2, r0
 80073a4:	4b0b      	ldr	r3, [pc, #44]	@ (80073d4 <HAL_RCC_ClockConfig+0x1bc>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	091b      	lsrs	r3, r3, #4
 80073aa:	f003 030f 	and.w	r3, r3, #15
 80073ae:	490a      	ldr	r1, [pc, #40]	@ (80073d8 <HAL_RCC_ClockConfig+0x1c0>)
 80073b0:	5ccb      	ldrb	r3, [r1, r3]
 80073b2:	fa22 f303 	lsr.w	r3, r2, r3
 80073b6:	4a09      	ldr	r2, [pc, #36]	@ (80073dc <HAL_RCC_ClockConfig+0x1c4>)
 80073b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80073ba:	4b09      	ldr	r3, [pc, #36]	@ (80073e0 <HAL_RCC_ClockConfig+0x1c8>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4618      	mov	r0, r3
 80073c0:	f7fd f930 	bl	8004624 <HAL_InitTick>

  return HAL_OK;
 80073c4:	2300      	movs	r3, #0
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	40023c00 	.word	0x40023c00
 80073d4:	40023800 	.word	0x40023800
 80073d8:	0800d020 	.word	0x0800d020
 80073dc:	2000001c 	.word	0x2000001c
 80073e0:	20000020 	.word	0x20000020

080073e4 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80073e4:	b480      	push	{r7}
 80073e6:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80073e8:	4b03      	ldr	r3, [pc, #12]	@ (80073f8 <HAL_RCC_EnableCSS+0x14>)
 80073ea:	2201      	movs	r2, #1
 80073ec:	601a      	str	r2, [r3, #0]
}
 80073ee:	bf00      	nop
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr
 80073f8:	4247004c 	.word	0x4247004c

080073fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80073fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007400:	b090      	sub	sp, #64	@ 0x40
 8007402:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007404:	2300      	movs	r3, #0
 8007406:	637b      	str	r3, [r7, #52]	@ 0x34
 8007408:	2300      	movs	r3, #0
 800740a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800740c:	2300      	movs	r3, #0
 800740e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007414:	4b59      	ldr	r3, [pc, #356]	@ (800757c <HAL_RCC_GetSysClockFreq+0x180>)
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f003 030c 	and.w	r3, r3, #12
 800741c:	2b08      	cmp	r3, #8
 800741e:	d00d      	beq.n	800743c <HAL_RCC_GetSysClockFreq+0x40>
 8007420:	2b08      	cmp	r3, #8
 8007422:	f200 80a1 	bhi.w	8007568 <HAL_RCC_GetSysClockFreq+0x16c>
 8007426:	2b00      	cmp	r3, #0
 8007428:	d002      	beq.n	8007430 <HAL_RCC_GetSysClockFreq+0x34>
 800742a:	2b04      	cmp	r3, #4
 800742c:	d003      	beq.n	8007436 <HAL_RCC_GetSysClockFreq+0x3a>
 800742e:	e09b      	b.n	8007568 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007430:	4b53      	ldr	r3, [pc, #332]	@ (8007580 <HAL_RCC_GetSysClockFreq+0x184>)
 8007432:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8007434:	e09b      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007436:	4b53      	ldr	r3, [pc, #332]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x188>)
 8007438:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800743a:	e098      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800743c:	4b4f      	ldr	r3, [pc, #316]	@ (800757c <HAL_RCC_GetSysClockFreq+0x180>)
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007444:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007446:	4b4d      	ldr	r3, [pc, #308]	@ (800757c <HAL_RCC_GetSysClockFreq+0x180>)
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800744e:	2b00      	cmp	r3, #0
 8007450:	d028      	beq.n	80074a4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007452:	4b4a      	ldr	r3, [pc, #296]	@ (800757c <HAL_RCC_GetSysClockFreq+0x180>)
 8007454:	685b      	ldr	r3, [r3, #4]
 8007456:	099b      	lsrs	r3, r3, #6
 8007458:	2200      	movs	r2, #0
 800745a:	623b      	str	r3, [r7, #32]
 800745c:	627a      	str	r2, [r7, #36]	@ 0x24
 800745e:	6a3b      	ldr	r3, [r7, #32]
 8007460:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007464:	2100      	movs	r1, #0
 8007466:	4b47      	ldr	r3, [pc, #284]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x188>)
 8007468:	fb03 f201 	mul.w	r2, r3, r1
 800746c:	2300      	movs	r3, #0
 800746e:	fb00 f303 	mul.w	r3, r0, r3
 8007472:	4413      	add	r3, r2
 8007474:	4a43      	ldr	r2, [pc, #268]	@ (8007584 <HAL_RCC_GetSysClockFreq+0x188>)
 8007476:	fba0 1202 	umull	r1, r2, r0, r2
 800747a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800747c:	460a      	mov	r2, r1
 800747e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007480:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007482:	4413      	add	r3, r2
 8007484:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007486:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007488:	2200      	movs	r2, #0
 800748a:	61bb      	str	r3, [r7, #24]
 800748c:	61fa      	str	r2, [r7, #28]
 800748e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007492:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007496:	f7f9 fa91 	bl	80009bc <__aeabi_uldivmod>
 800749a:	4602      	mov	r2, r0
 800749c:	460b      	mov	r3, r1
 800749e:	4613      	mov	r3, r2
 80074a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80074a2:	e053      	b.n	800754c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80074a4:	4b35      	ldr	r3, [pc, #212]	@ (800757c <HAL_RCC_GetSysClockFreq+0x180>)
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	099b      	lsrs	r3, r3, #6
 80074aa:	2200      	movs	r2, #0
 80074ac:	613b      	str	r3, [r7, #16]
 80074ae:	617a      	str	r2, [r7, #20]
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80074b6:	f04f 0b00 	mov.w	fp, #0
 80074ba:	4652      	mov	r2, sl
 80074bc:	465b      	mov	r3, fp
 80074be:	f04f 0000 	mov.w	r0, #0
 80074c2:	f04f 0100 	mov.w	r1, #0
 80074c6:	0159      	lsls	r1, r3, #5
 80074c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80074cc:	0150      	lsls	r0, r2, #5
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	ebb2 080a 	subs.w	r8, r2, sl
 80074d6:	eb63 090b 	sbc.w	r9, r3, fp
 80074da:	f04f 0200 	mov.w	r2, #0
 80074de:	f04f 0300 	mov.w	r3, #0
 80074e2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80074e6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80074ea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80074ee:	ebb2 0408 	subs.w	r4, r2, r8
 80074f2:	eb63 0509 	sbc.w	r5, r3, r9
 80074f6:	f04f 0200 	mov.w	r2, #0
 80074fa:	f04f 0300 	mov.w	r3, #0
 80074fe:	00eb      	lsls	r3, r5, #3
 8007500:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007504:	00e2      	lsls	r2, r4, #3
 8007506:	4614      	mov	r4, r2
 8007508:	461d      	mov	r5, r3
 800750a:	eb14 030a 	adds.w	r3, r4, sl
 800750e:	603b      	str	r3, [r7, #0]
 8007510:	eb45 030b 	adc.w	r3, r5, fp
 8007514:	607b      	str	r3, [r7, #4]
 8007516:	f04f 0200 	mov.w	r2, #0
 800751a:	f04f 0300 	mov.w	r3, #0
 800751e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007522:	4629      	mov	r1, r5
 8007524:	028b      	lsls	r3, r1, #10
 8007526:	4621      	mov	r1, r4
 8007528:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800752c:	4621      	mov	r1, r4
 800752e:	028a      	lsls	r2, r1, #10
 8007530:	4610      	mov	r0, r2
 8007532:	4619      	mov	r1, r3
 8007534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007536:	2200      	movs	r2, #0
 8007538:	60bb      	str	r3, [r7, #8]
 800753a:	60fa      	str	r2, [r7, #12]
 800753c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007540:	f7f9 fa3c 	bl	80009bc <__aeabi_uldivmod>
 8007544:	4602      	mov	r2, r0
 8007546:	460b      	mov	r3, r1
 8007548:	4613      	mov	r3, r2
 800754a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800754c:	4b0b      	ldr	r3, [pc, #44]	@ (800757c <HAL_RCC_GetSysClockFreq+0x180>)
 800754e:	685b      	ldr	r3, [r3, #4]
 8007550:	0c1b      	lsrs	r3, r3, #16
 8007552:	f003 0303 	and.w	r3, r3, #3
 8007556:	3301      	adds	r3, #1
 8007558:	005b      	lsls	r3, r3, #1
 800755a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800755c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800755e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007560:	fbb2 f3f3 	udiv	r3, r2, r3
 8007564:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007566:	e002      	b.n	800756e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007568:	4b05      	ldr	r3, [pc, #20]	@ (8007580 <HAL_RCC_GetSysClockFreq+0x184>)
 800756a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800756c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800756e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007570:	4618      	mov	r0, r3
 8007572:	3740      	adds	r7, #64	@ 0x40
 8007574:	46bd      	mov	sp, r7
 8007576:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800757a:	bf00      	nop
 800757c:	40023800 	.word	0x40023800
 8007580:	00f42400 	.word	0x00f42400
 8007584:	00b71b00 	.word	0x00b71b00

08007588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800758c:	4b03      	ldr	r3, [pc, #12]	@ (800759c <HAL_RCC_GetHCLKFreq+0x14>)
 800758e:	681b      	ldr	r3, [r3, #0]
}
 8007590:	4618      	mov	r0, r3
 8007592:	46bd      	mov	sp, r7
 8007594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007598:	4770      	bx	lr
 800759a:	bf00      	nop
 800759c:	2000001c 	.word	0x2000001c

080075a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80075a4:	f7ff fff0 	bl	8007588 <HAL_RCC_GetHCLKFreq>
 80075a8:	4602      	mov	r2, r0
 80075aa:	4b05      	ldr	r3, [pc, #20]	@ (80075c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	0a9b      	lsrs	r3, r3, #10
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	4903      	ldr	r1, [pc, #12]	@ (80075c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075b6:	5ccb      	ldrb	r3, [r1, r3]
 80075b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075bc:	4618      	mov	r0, r3
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40023800 	.word	0x40023800
 80075c4:	0800d030 	.word	0x0800d030

080075c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80075cc:	f7ff ffdc 	bl	8007588 <HAL_RCC_GetHCLKFreq>
 80075d0:	4602      	mov	r2, r0
 80075d2:	4b05      	ldr	r3, [pc, #20]	@ (80075e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	0b5b      	lsrs	r3, r3, #13
 80075d8:	f003 0307 	and.w	r3, r3, #7
 80075dc:	4903      	ldr	r1, [pc, #12]	@ (80075ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80075de:	5ccb      	ldrb	r3, [r1, r3]
 80075e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	40023800 	.word	0x40023800
 80075ec:	0800d030 	.word	0x0800d030

080075f0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80075f4:	4b06      	ldr	r3, [pc, #24]	@ (8007610 <HAL_RCC_NMI_IRQHandler+0x20>)
 80075f6:	68db      	ldr	r3, [r3, #12]
 80075f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80075fc:	2b80      	cmp	r3, #128	@ 0x80
 80075fe:	d104      	bne.n	800760a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007600:	f000 f80a 	bl	8007618 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007604:	4b03      	ldr	r3, [pc, #12]	@ (8007614 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007606:	2280      	movs	r2, #128	@ 0x80
 8007608:	701a      	strb	r2, [r3, #0]
  }
}
 800760a:	bf00      	nop
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	40023800 	.word	0x40023800
 8007614:	4002380e 	.word	0x4002380e

08007618 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007618:	b480      	push	{r7}
 800761a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800761c:	bf00      	nop
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b082      	sub	sp, #8
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d101      	bne.n	8007638 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e07b      	b.n	8007730 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800763c:	2b00      	cmp	r3, #0
 800763e:	d108      	bne.n	8007652 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	685b      	ldr	r3, [r3, #4]
 8007644:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007648:	d009      	beq.n	800765e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	61da      	str	r2, [r3, #28]
 8007650:	e005      	b.n	800765e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	2200      	movs	r2, #0
 8007656:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2200      	movs	r2, #0
 8007662:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800766a:	b2db      	uxtb	r3, r3
 800766c:	2b00      	cmp	r3, #0
 800766e:	d106      	bne.n	800767e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	2200      	movs	r2, #0
 8007674:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007678:	6878      	ldr	r0, [r7, #4]
 800767a:	f7fc faff 	bl	8003c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2202      	movs	r2, #2
 8007682:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	681a      	ldr	r2, [r3, #0]
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007694:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	685b      	ldr	r3, [r3, #4]
 800769a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	689b      	ldr	r3, [r3, #8]
 80076a2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80076b0:	431a      	orrs	r2, r3
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	691b      	ldr	r3, [r3, #16]
 80076b6:	f003 0302 	and.w	r3, r3, #2
 80076ba:	431a      	orrs	r2, r3
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	695b      	ldr	r3, [r3, #20]
 80076c0:	f003 0301 	and.w	r3, r3, #1
 80076c4:	431a      	orrs	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	699b      	ldr	r3, [r3, #24]
 80076ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80076ce:	431a      	orrs	r2, r3
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80076d8:	431a      	orrs	r2, r3
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a1b      	ldr	r3, [r3, #32]
 80076de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076e2:	ea42 0103 	orr.w	r1, r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80076ea:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	699b      	ldr	r3, [r3, #24]
 80076fa:	0c1b      	lsrs	r3, r3, #16
 80076fc:	f003 0104 	and.w	r1, r3, #4
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007704:	f003 0210 	and.w	r2, r3, #16
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	430a      	orrs	r2, r1
 800770e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	69da      	ldr	r2, [r3, #28]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800771e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2201      	movs	r2, #1
 800772a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800772e:	2300      	movs	r3, #0
}
 8007730:	4618      	mov	r0, r3
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08c      	sub	sp, #48	@ 0x30
 800773c:	af00      	add	r7, sp, #0
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
 8007744:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007746:	2301      	movs	r3, #1
 8007748:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007756:	2b01      	cmp	r3, #1
 8007758:	d101      	bne.n	800775e <HAL_SPI_TransmitReceive+0x26>
 800775a:	2302      	movs	r3, #2
 800775c:	e18a      	b.n	8007a74 <HAL_SPI_TransmitReceive+0x33c>
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	2201      	movs	r2, #1
 8007762:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007766:	f7fc ffa1 	bl	80046ac <HAL_GetTick>
 800776a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007772:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800777c:	887b      	ldrh	r3, [r7, #2]
 800777e:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007780:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007784:	2b01      	cmp	r3, #1
 8007786:	d00f      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x70>
 8007788:	69fb      	ldr	r3, [r7, #28]
 800778a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800778e:	d107      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	689b      	ldr	r3, [r3, #8]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d103      	bne.n	80077a0 <HAL_SPI_TransmitReceive+0x68>
 8007798:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800779c:	2b04      	cmp	r3, #4
 800779e:	d003      	beq.n	80077a8 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80077a0:	2302      	movs	r3, #2
 80077a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80077a6:	e15b      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d005      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x82>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d002      	beq.n	80077ba <HAL_SPI_TransmitReceive+0x82>
 80077b4:	887b      	ldrh	r3, [r7, #2]
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d103      	bne.n	80077c2 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80077c0:	e14e      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077c8:	b2db      	uxtb	r3, r3
 80077ca:	2b04      	cmp	r3, #4
 80077cc:	d003      	beq.n	80077d6 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2205      	movs	r2, #5
 80077d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	2200      	movs	r2, #0
 80077da:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	687a      	ldr	r2, [r7, #4]
 80077e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	887a      	ldrh	r2, [r7, #2]
 80077e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	887a      	ldrh	r2, [r7, #2]
 80077ec:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	68ba      	ldr	r2, [r7, #8]
 80077f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	887a      	ldrh	r2, [r7, #2]
 80077f8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	887a      	ldrh	r2, [r7, #2]
 80077fe:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2200      	movs	r2, #0
 8007804:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007816:	2b40      	cmp	r3, #64	@ 0x40
 8007818:	d007      	beq.n	800782a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	681a      	ldr	r2, [r3, #0]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007828:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007832:	d178      	bne.n	8007926 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d002      	beq.n	8007842 <HAL_SPI_TransmitReceive+0x10a>
 800783c:	8b7b      	ldrh	r3, [r7, #26]
 800783e:	2b01      	cmp	r3, #1
 8007840:	d166      	bne.n	8007910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007846:	881a      	ldrh	r2, [r3, #0]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007852:	1c9a      	adds	r2, r3, #2
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007866:	e053      	b.n	8007910 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 0302 	and.w	r3, r3, #2
 8007872:	2b02      	cmp	r3, #2
 8007874:	d11b      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x176>
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800787a:	b29b      	uxth	r3, r3
 800787c:	2b00      	cmp	r3, #0
 800787e:	d016      	beq.n	80078ae <HAL_SPI_TransmitReceive+0x176>
 8007880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007882:	2b01      	cmp	r3, #1
 8007884:	d113      	bne.n	80078ae <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800788a:	881a      	ldrh	r2, [r3, #0]
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007896:	1c9a      	adds	r2, r3, #2
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	3b01      	subs	r3, #1
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80078aa:	2300      	movs	r3, #0
 80078ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	f003 0301 	and.w	r3, r3, #1
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d119      	bne.n	80078f0 <HAL_SPI_TransmitReceive+0x1b8>
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078c0:	b29b      	uxth	r3, r3
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d014      	beq.n	80078f0 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68da      	ldr	r2, [r3, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d0:	b292      	uxth	r2, r2
 80078d2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078d8:	1c9a      	adds	r2, r3, #2
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078e2:	b29b      	uxth	r3, r3
 80078e4:	3b01      	subs	r3, #1
 80078e6:	b29a      	uxth	r2, r3
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80078ec:	2301      	movs	r3, #1
 80078ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80078f0:	f7fc fedc 	bl	80046ac <HAL_GetTick>
 80078f4:	4602      	mov	r2, r0
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	1ad3      	subs	r3, r2, r3
 80078fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d807      	bhi.n	8007910 <HAL_SPI_TransmitReceive+0x1d8>
 8007900:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007902:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007906:	d003      	beq.n	8007910 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007908:	2303      	movs	r3, #3
 800790a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 800790e:	e0a7      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007914:	b29b      	uxth	r3, r3
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1a6      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x130>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800791e:	b29b      	uxth	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d1a1      	bne.n	8007868 <HAL_SPI_TransmitReceive+0x130>
 8007924:	e07c      	b.n	8007a20 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_SPI_TransmitReceive+0x1fc>
 800792e:	8b7b      	ldrh	r3, [r7, #26]
 8007930:	2b01      	cmp	r3, #1
 8007932:	d16b      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	330c      	adds	r3, #12
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007946:	1c5a      	adds	r2, r3, #1
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007950:	b29b      	uxth	r3, r3
 8007952:	3b01      	subs	r3, #1
 8007954:	b29a      	uxth	r2, r3
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800795a:	e057      	b.n	8007a0c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	f003 0302 	and.w	r3, r3, #2
 8007966:	2b02      	cmp	r3, #2
 8007968:	d11c      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x26c>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800796e:	b29b      	uxth	r3, r3
 8007970:	2b00      	cmp	r3, #0
 8007972:	d017      	beq.n	80079a4 <HAL_SPI_TransmitReceive+0x26c>
 8007974:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007976:	2b01      	cmp	r3, #1
 8007978:	d114      	bne.n	80079a4 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	330c      	adds	r3, #12
 8007984:	7812      	ldrb	r2, [r2, #0]
 8007986:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800798c:	1c5a      	adds	r2, r3, #1
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007996:	b29b      	uxth	r3, r3
 8007998:	3b01      	subs	r3, #1
 800799a:	b29a      	uxth	r2, r3
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80079a0:	2300      	movs	r3, #0
 80079a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0301 	and.w	r3, r3, #1
 80079ae:	2b01      	cmp	r3, #1
 80079b0:	d119      	bne.n	80079e6 <HAL_SPI_TransmitReceive+0x2ae>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b6:	b29b      	uxth	r3, r3
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d014      	beq.n	80079e6 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079c6:	b2d2      	uxtb	r2, r2
 80079c8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079d8:	b29b      	uxth	r3, r3
 80079da:	3b01      	subs	r3, #1
 80079dc:	b29a      	uxth	r2, r3
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80079e2:	2301      	movs	r3, #1
 80079e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80079e6:	f7fc fe61 	bl	80046ac <HAL_GetTick>
 80079ea:	4602      	mov	r2, r0
 80079ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ee:	1ad3      	subs	r3, r2, r3
 80079f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d803      	bhi.n	80079fe <HAL_SPI_TransmitReceive+0x2c6>
 80079f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079fc:	d102      	bne.n	8007a04 <HAL_SPI_TransmitReceive+0x2cc>
 80079fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d103      	bne.n	8007a0c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8007a04:	2303      	movs	r3, #3
 8007a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        goto error;
 8007a0a:	e029      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a10:	b29b      	uxth	r3, r3
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d1a2      	bne.n	800795c <HAL_SPI_TransmitReceive+0x224>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a1a:	b29b      	uxth	r3, r3
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d19d      	bne.n	800795c <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007a20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007a22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007a24:	68f8      	ldr	r0, [r7, #12]
 8007a26:	f000 f8b1 	bl	8007b8c <SPI_EndRxTxTransaction>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d006      	beq.n	8007a3e <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007a30:	2301      	movs	r3, #1
 8007a32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8007a3c:	e010      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	689b      	ldr	r3, [r3, #8]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10b      	bne.n	8007a5e <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007a46:	2300      	movs	r3, #0
 8007a48:	617b      	str	r3, [r7, #20]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	68db      	ldr	r3, [r3, #12]
 8007a50:	617b      	str	r3, [r7, #20]
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	617b      	str	r3, [r7, #20]
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	e000      	b.n	8007a60 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8007a5e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  __HAL_UNLOCK(hspi);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8007a70:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8007a74:	4618      	mov	r0, r3
 8007a76:	3730      	adds	r7, #48	@ 0x30
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a8c:	f7fc fe0e 	bl	80046ac <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	4413      	add	r3, r2
 8007a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a9c:	f7fc fe06 	bl	80046ac <HAL_GetTick>
 8007aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007aa2:	4b39      	ldr	r3, [pc, #228]	@ (8007b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	015b      	lsls	r3, r3, #5
 8007aa8:	0d1b      	lsrs	r3, r3, #20
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	fb02 f303 	mul.w	r3, r2, r3
 8007ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ab2:	e054      	b.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aba:	d050      	beq.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007abc:	f7fc fdf6 	bl	80046ac <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d902      	bls.n	8007ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d13d      	bne.n	8007b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aea:	d111      	bne.n	8007b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af4:	d004      	beq.n	8007b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afe:	d107      	bne.n	8007b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b18:	d10f      	bne.n	8007b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e017      	b.n	8007b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4013      	ands	r3, r2
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	bf0c      	ite	eq
 8007b6e:	2301      	moveq	r3, #1
 8007b70:	2300      	movne	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d19b      	bne.n	8007ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	2000001c 	.word	0x2000001c

08007b8c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b088      	sub	sp, #32
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007b98:	4b1b      	ldr	r3, [pc, #108]	@ (8007c08 <SPI_EndRxTxTransaction+0x7c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a1b      	ldr	r2, [pc, #108]	@ (8007c0c <SPI_EndRxTxTransaction+0x80>)
 8007b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8007ba2:	0d5b      	lsrs	r3, r3, #21
 8007ba4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007ba8:	fb02 f303 	mul.w	r3, r2, r3
 8007bac:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	685b      	ldr	r3, [r3, #4]
 8007bb2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bb6:	d112      	bne.n	8007bde <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	9300      	str	r3, [sp, #0]
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	2180      	movs	r1, #128	@ 0x80
 8007bc2:	68f8      	ldr	r0, [r7, #12]
 8007bc4:	f7ff ff5a 	bl	8007a7c <SPI_WaitFlagStateUntilTimeout>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bd2:	f043 0220 	orr.w	r2, r3, #32
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e00f      	b.n	8007bfe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007bde:	697b      	ldr	r3, [r7, #20]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d00a      	beq.n	8007bfa <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	3b01      	subs	r3, #1
 8007be8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bf4:	2b80      	cmp	r3, #128	@ 0x80
 8007bf6:	d0f2      	beq.n	8007bde <SPI_EndRxTxTransaction+0x52>
 8007bf8:	e000      	b.n	8007bfc <SPI_EndRxTxTransaction+0x70>
        break;
 8007bfa:	bf00      	nop
  }

  return HAL_OK;
 8007bfc:	2300      	movs	r3, #0
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}
 8007c06:	bf00      	nop
 8007c08:	2000001c 	.word	0x2000001c
 8007c0c:	165e9f81 	.word	0x165e9f81

08007c10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b082      	sub	sp, #8
 8007c14:	af00      	add	r7, sp, #0
 8007c16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d101      	bne.n	8007c22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e041      	b.n	8007ca6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d106      	bne.n	8007c3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2200      	movs	r2, #0
 8007c32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f7fc f8d6 	bl	8003de8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2202      	movs	r2, #2
 8007c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	3304      	adds	r3, #4
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	4610      	mov	r0, r2
 8007c50:	f000 fba8 	bl	80083a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2201      	movs	r2, #1
 8007c58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2201      	movs	r2, #1
 8007c60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2201      	movs	r2, #1
 8007c80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2201      	movs	r2, #1
 8007c88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2201      	movs	r2, #1
 8007c90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3708      	adds	r7, #8
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b085      	sub	sp, #20
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	2b01      	cmp	r3, #1
 8007cc2:	d001      	beq.n	8007cc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e046      	b.n	8007d56 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2202      	movs	r2, #2
 8007ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a23      	ldr	r2, [pc, #140]	@ (8007d64 <HAL_TIM_Base_Start+0xb4>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d022      	beq.n	8007d20 <HAL_TIM_Base_Start+0x70>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007ce2:	d01d      	beq.n	8007d20 <HAL_TIM_Base_Start+0x70>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a1f      	ldr	r2, [pc, #124]	@ (8007d68 <HAL_TIM_Base_Start+0xb8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d018      	beq.n	8007d20 <HAL_TIM_Base_Start+0x70>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	4a1e      	ldr	r2, [pc, #120]	@ (8007d6c <HAL_TIM_Base_Start+0xbc>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d013      	beq.n	8007d20 <HAL_TIM_Base_Start+0x70>
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	4a1c      	ldr	r2, [pc, #112]	@ (8007d70 <HAL_TIM_Base_Start+0xc0>)
 8007cfe:	4293      	cmp	r3, r2
 8007d00:	d00e      	beq.n	8007d20 <HAL_TIM_Base_Start+0x70>
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a1b      	ldr	r2, [pc, #108]	@ (8007d74 <HAL_TIM_Base_Start+0xc4>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d009      	beq.n	8007d20 <HAL_TIM_Base_Start+0x70>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a19      	ldr	r2, [pc, #100]	@ (8007d78 <HAL_TIM_Base_Start+0xc8>)
 8007d12:	4293      	cmp	r3, r2
 8007d14:	d004      	beq.n	8007d20 <HAL_TIM_Base_Start+0x70>
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4a18      	ldr	r2, [pc, #96]	@ (8007d7c <HAL_TIM_Base_Start+0xcc>)
 8007d1c:	4293      	cmp	r3, r2
 8007d1e:	d111      	bne.n	8007d44 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	689b      	ldr	r3, [r3, #8]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b06      	cmp	r3, #6
 8007d30:	d010      	beq.n	8007d54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f042 0201 	orr.w	r2, r2, #1
 8007d40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007d42:	e007      	b.n	8007d54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f042 0201 	orr.w	r2, r2, #1
 8007d52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007d54:	2300      	movs	r3, #0
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3714      	adds	r7, #20
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr
 8007d62:	bf00      	nop
 8007d64:	40010000 	.word	0x40010000
 8007d68:	40000400 	.word	0x40000400
 8007d6c:	40000800 	.word	0x40000800
 8007d70:	40000c00 	.word	0x40000c00
 8007d74:	40010400 	.word	0x40010400
 8007d78:	40014000 	.word	0x40014000
 8007d7c:	40001800 	.word	0x40001800

08007d80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b082      	sub	sp, #8
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d101      	bne.n	8007d92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007d8e:	2301      	movs	r3, #1
 8007d90:	e041      	b.n	8007e16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d106      	bne.n	8007dac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007da6:	6878      	ldr	r0, [r7, #4]
 8007da8:	f7fb ffd0 	bl	8003d4c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2202      	movs	r2, #2
 8007db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	3304      	adds	r3, #4
 8007dbc:	4619      	mov	r1, r3
 8007dbe:	4610      	mov	r0, r2
 8007dc0:	f000 faf0 	bl	80083a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2201      	movs	r2, #1
 8007dc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2201      	movs	r2, #1
 8007dd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2201      	movs	r2, #1
 8007de0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2201      	movs	r2, #1
 8007df8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2201      	movs	r2, #1
 8007e10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3708      	adds	r7, #8
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}
	...

08007e20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b084      	sub	sp, #16
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007e2a:	683b      	ldr	r3, [r7, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d109      	bne.n	8007e44 <HAL_TIM_PWM_Start+0x24>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	bf14      	ite	ne
 8007e3c:	2301      	movne	r3, #1
 8007e3e:	2300      	moveq	r3, #0
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	e022      	b.n	8007e8a <HAL_TIM_PWM_Start+0x6a>
 8007e44:	683b      	ldr	r3, [r7, #0]
 8007e46:	2b04      	cmp	r3, #4
 8007e48:	d109      	bne.n	8007e5e <HAL_TIM_PWM_Start+0x3e>
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	bf14      	ite	ne
 8007e56:	2301      	movne	r3, #1
 8007e58:	2300      	moveq	r3, #0
 8007e5a:	b2db      	uxtb	r3, r3
 8007e5c:	e015      	b.n	8007e8a <HAL_TIM_PWM_Start+0x6a>
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	2b08      	cmp	r3, #8
 8007e62:	d109      	bne.n	8007e78 <HAL_TIM_PWM_Start+0x58>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e6a:	b2db      	uxtb	r3, r3
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	bf14      	ite	ne
 8007e70:	2301      	movne	r3, #1
 8007e72:	2300      	moveq	r3, #0
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	e008      	b.n	8007e8a <HAL_TIM_PWM_Start+0x6a>
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b01      	cmp	r3, #1
 8007e82:	bf14      	ite	ne
 8007e84:	2301      	movne	r3, #1
 8007e86:	2300      	moveq	r3, #0
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d001      	beq.n	8007e92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e07c      	b.n	8007f8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_PWM_Start+0x82>
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ea0:	e013      	b.n	8007eca <HAL_TIM_PWM_Start+0xaa>
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b04      	cmp	r3, #4
 8007ea6:	d104      	bne.n	8007eb2 <HAL_TIM_PWM_Start+0x92>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007eb0:	e00b      	b.n	8007eca <HAL_TIM_PWM_Start+0xaa>
 8007eb2:	683b      	ldr	r3, [r7, #0]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d104      	bne.n	8007ec2 <HAL_TIM_PWM_Start+0xa2>
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2202      	movs	r2, #2
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ec0:	e003      	b.n	8007eca <HAL_TIM_PWM_Start+0xaa>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2202      	movs	r2, #2
 8007ec6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2201      	movs	r2, #1
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f000 fd50 	bl	8008978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a2d      	ldr	r2, [pc, #180]	@ (8007f94 <HAL_TIM_PWM_Start+0x174>)
 8007ede:	4293      	cmp	r3, r2
 8007ee0:	d004      	beq.n	8007eec <HAL_TIM_PWM_Start+0xcc>
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a2c      	ldr	r2, [pc, #176]	@ (8007f98 <HAL_TIM_PWM_Start+0x178>)
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d101      	bne.n	8007ef0 <HAL_TIM_PWM_Start+0xd0>
 8007eec:	2301      	movs	r3, #1
 8007eee:	e000      	b.n	8007ef2 <HAL_TIM_PWM_Start+0xd2>
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d007      	beq.n	8007f06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007f04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4a22      	ldr	r2, [pc, #136]	@ (8007f94 <HAL_TIM_PWM_Start+0x174>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d022      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x136>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f18:	d01d      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x136>
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a1f      	ldr	r2, [pc, #124]	@ (8007f9c <HAL_TIM_PWM_Start+0x17c>)
 8007f20:	4293      	cmp	r3, r2
 8007f22:	d018      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x136>
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a1d      	ldr	r2, [pc, #116]	@ (8007fa0 <HAL_TIM_PWM_Start+0x180>)
 8007f2a:	4293      	cmp	r3, r2
 8007f2c:	d013      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x136>
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a1c      	ldr	r2, [pc, #112]	@ (8007fa4 <HAL_TIM_PWM_Start+0x184>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d00e      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x136>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	4a16      	ldr	r2, [pc, #88]	@ (8007f98 <HAL_TIM_PWM_Start+0x178>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d009      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x136>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4a18      	ldr	r2, [pc, #96]	@ (8007fa8 <HAL_TIM_PWM_Start+0x188>)
 8007f48:	4293      	cmp	r3, r2
 8007f4a:	d004      	beq.n	8007f56 <HAL_TIM_PWM_Start+0x136>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	4a16      	ldr	r2, [pc, #88]	@ (8007fac <HAL_TIM_PWM_Start+0x18c>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d111      	bne.n	8007f7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	689b      	ldr	r3, [r3, #8]
 8007f5c:	f003 0307 	and.w	r3, r3, #7
 8007f60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	2b06      	cmp	r3, #6
 8007f66:	d010      	beq.n	8007f8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	681a      	ldr	r2, [r3, #0]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f042 0201 	orr.w	r2, r2, #1
 8007f76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f78:	e007      	b.n	8007f8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681a      	ldr	r2, [r3, #0]
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	f042 0201 	orr.w	r2, r2, #1
 8007f88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3710      	adds	r7, #16
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40010000 	.word	0x40010000
 8007f98:	40010400 	.word	0x40010400
 8007f9c:	40000400 	.word	0x40000400
 8007fa0:	40000800 	.word	0x40000800
 8007fa4:	40000c00 	.word	0x40000c00
 8007fa8:	40014000 	.word	0x40014000
 8007fac:	40001800 	.word	0x40001800

08007fb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
 8007fb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fcd8 	bl	8008978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a2e      	ldr	r2, [pc, #184]	@ (8008088 <HAL_TIM_PWM_Stop+0xd8>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d004      	beq.n	8007fdc <HAL_TIM_PWM_Stop+0x2c>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a2d      	ldr	r2, [pc, #180]	@ (800808c <HAL_TIM_PWM_Stop+0xdc>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d101      	bne.n	8007fe0 <HAL_TIM_PWM_Stop+0x30>
 8007fdc:	2301      	movs	r3, #1
 8007fde:	e000      	b.n	8007fe2 <HAL_TIM_PWM_Stop+0x32>
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d017      	beq.n	8008016 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	6a1a      	ldr	r2, [r3, #32]
 8007fec:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007ff0:	4013      	ands	r3, r2
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d10f      	bne.n	8008016 <HAL_TIM_PWM_Stop+0x66>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	6a1a      	ldr	r2, [r3, #32]
 8007ffc:	f240 4344 	movw	r3, #1092	@ 0x444
 8008000:	4013      	ands	r3, r2
 8008002:	2b00      	cmp	r3, #0
 8008004:	d107      	bne.n	8008016 <HAL_TIM_PWM_Stop+0x66>
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008014:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6a1a      	ldr	r2, [r3, #32]
 800801c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008020:	4013      	ands	r3, r2
 8008022:	2b00      	cmp	r3, #0
 8008024:	d10f      	bne.n	8008046 <HAL_TIM_PWM_Stop+0x96>
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	6a1a      	ldr	r2, [r3, #32]
 800802c:	f240 4344 	movw	r3, #1092	@ 0x444
 8008030:	4013      	ands	r3, r2
 8008032:	2b00      	cmp	r3, #0
 8008034:	d107      	bne.n	8008046 <HAL_TIM_PWM_Stop+0x96>
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f022 0201 	bic.w	r2, r2, #1
 8008044:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <HAL_TIM_PWM_Stop+0xa6>
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008054:	e013      	b.n	800807e <HAL_TIM_PWM_Stop+0xce>
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	2b04      	cmp	r3, #4
 800805a:	d104      	bne.n	8008066 <HAL_TIM_PWM_Stop+0xb6>
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008064:	e00b      	b.n	800807e <HAL_TIM_PWM_Stop+0xce>
 8008066:	683b      	ldr	r3, [r7, #0]
 8008068:	2b08      	cmp	r3, #8
 800806a:	d104      	bne.n	8008076 <HAL_TIM_PWM_Stop+0xc6>
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008074:	e003      	b.n	800807e <HAL_TIM_PWM_Stop+0xce>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2201      	movs	r2, #1
 800807a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3708      	adds	r7, #8
 8008084:	46bd      	mov	sp, r7
 8008086:	bd80      	pop	{r7, pc}
 8008088:	40010000 	.word	0x40010000
 800808c:	40010400 	.word	0x40010400

08008090 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b086      	sub	sp, #24
 8008094:	af00      	add	r7, sp, #0
 8008096:	60f8      	str	r0, [r7, #12]
 8008098:	60b9      	str	r1, [r7, #8]
 800809a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800809c:	2300      	movs	r3, #0
 800809e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d101      	bne.n	80080ae <HAL_TIM_PWM_ConfigChannel+0x1e>
 80080aa:	2302      	movs	r3, #2
 80080ac:	e0ae      	b.n	800820c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	2201      	movs	r2, #1
 80080b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b0c      	cmp	r3, #12
 80080ba:	f200 809f 	bhi.w	80081fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 80080be:	a201      	add	r2, pc, #4	@ (adr r2, 80080c4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	080080f9 	.word	0x080080f9
 80080c8:	080081fd 	.word	0x080081fd
 80080cc:	080081fd 	.word	0x080081fd
 80080d0:	080081fd 	.word	0x080081fd
 80080d4:	08008139 	.word	0x08008139
 80080d8:	080081fd 	.word	0x080081fd
 80080dc:	080081fd 	.word	0x080081fd
 80080e0:	080081fd 	.word	0x080081fd
 80080e4:	0800817b 	.word	0x0800817b
 80080e8:	080081fd 	.word	0x080081fd
 80080ec:	080081fd 	.word	0x080081fd
 80080f0:	080081fd 	.word	0x080081fd
 80080f4:	080081bb 	.word	0x080081bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	68b9      	ldr	r1, [r7, #8]
 80080fe:	4618      	mov	r0, r3
 8008100:	f000 f9f0 	bl	80084e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0208 	orr.w	r2, r2, #8
 8008112:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	699a      	ldr	r2, [r3, #24]
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	f022 0204 	bic.w	r2, r2, #4
 8008122:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	6999      	ldr	r1, [r3, #24]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	691a      	ldr	r2, [r3, #16]
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	619a      	str	r2, [r3, #24]
      break;
 8008136:	e064      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	68b9      	ldr	r1, [r7, #8]
 800813e:	4618      	mov	r0, r3
 8008140:	f000 fa40 	bl	80085c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	699a      	ldr	r2, [r3, #24]
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008152:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008162:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	6999      	ldr	r1, [r3, #24]
 800816a:	68bb      	ldr	r3, [r7, #8]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	021a      	lsls	r2, r3, #8
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	430a      	orrs	r2, r1
 8008176:	619a      	str	r2, [r3, #24]
      break;
 8008178:	e043      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	68b9      	ldr	r1, [r7, #8]
 8008180:	4618      	mov	r0, r3
 8008182:	f000 fa95 	bl	80086b0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	69da      	ldr	r2, [r3, #28]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f042 0208 	orr.w	r2, r2, #8
 8008194:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	69da      	ldr	r2, [r3, #28]
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	f022 0204 	bic.w	r2, r2, #4
 80081a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	69d9      	ldr	r1, [r3, #28]
 80081ac:	68bb      	ldr	r3, [r7, #8]
 80081ae:	691a      	ldr	r2, [r3, #16]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	430a      	orrs	r2, r1
 80081b6:	61da      	str	r2, [r3, #28]
      break;
 80081b8:	e023      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	68b9      	ldr	r1, [r7, #8]
 80081c0:	4618      	mov	r0, r3
 80081c2:	f000 fae9 	bl	8008798 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	69da      	ldr	r2, [r3, #28]
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	69da      	ldr	r2, [r3, #28]
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80081e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	69d9      	ldr	r1, [r3, #28]
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	691b      	ldr	r3, [r3, #16]
 80081f0:	021a      	lsls	r2, r3, #8
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	430a      	orrs	r2, r1
 80081f8:	61da      	str	r2, [r3, #28]
      break;
 80081fa:	e002      	b.n	8008202 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80081fc:	2301      	movs	r3, #1
 80081fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008200:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	2200      	movs	r2, #0
 8008206:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800820a:	7dfb      	ldrb	r3, [r7, #23]
}
 800820c:	4618      	mov	r0, r3
 800820e:	3718      	adds	r7, #24
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}

08008214 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af00      	add	r7, sp, #0
 800821a:	6078      	str	r0, [r7, #4]
 800821c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800821e:	2300      	movs	r3, #0
 8008220:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008228:	2b01      	cmp	r3, #1
 800822a:	d101      	bne.n	8008230 <HAL_TIM_ConfigClockSource+0x1c>
 800822c:	2302      	movs	r3, #2
 800822e:	e0b4      	b.n	800839a <HAL_TIM_ConfigClockSource+0x186>
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2201      	movs	r2, #1
 8008234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2202      	movs	r2, #2
 800823c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	689b      	ldr	r3, [r3, #8]
 8008246:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800824e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008256:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008268:	d03e      	beq.n	80082e8 <HAL_TIM_ConfigClockSource+0xd4>
 800826a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800826e:	f200 8087 	bhi.w	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008276:	f000 8086 	beq.w	8008386 <HAL_TIM_ConfigClockSource+0x172>
 800827a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800827e:	d87f      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008280:	2b70      	cmp	r3, #112	@ 0x70
 8008282:	d01a      	beq.n	80082ba <HAL_TIM_ConfigClockSource+0xa6>
 8008284:	2b70      	cmp	r3, #112	@ 0x70
 8008286:	d87b      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008288:	2b60      	cmp	r3, #96	@ 0x60
 800828a:	d050      	beq.n	800832e <HAL_TIM_ConfigClockSource+0x11a>
 800828c:	2b60      	cmp	r3, #96	@ 0x60
 800828e:	d877      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008290:	2b50      	cmp	r3, #80	@ 0x50
 8008292:	d03c      	beq.n	800830e <HAL_TIM_ConfigClockSource+0xfa>
 8008294:	2b50      	cmp	r3, #80	@ 0x50
 8008296:	d873      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 8008298:	2b40      	cmp	r3, #64	@ 0x40
 800829a:	d058      	beq.n	800834e <HAL_TIM_ConfigClockSource+0x13a>
 800829c:	2b40      	cmp	r3, #64	@ 0x40
 800829e:	d86f      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 80082a0:	2b30      	cmp	r3, #48	@ 0x30
 80082a2:	d064      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082a4:	2b30      	cmp	r3, #48	@ 0x30
 80082a6:	d86b      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 80082a8:	2b20      	cmp	r3, #32
 80082aa:	d060      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082ac:	2b20      	cmp	r3, #32
 80082ae:	d867      	bhi.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d05c      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082b4:	2b10      	cmp	r3, #16
 80082b6:	d05a      	beq.n	800836e <HAL_TIM_ConfigClockSource+0x15a>
 80082b8:	e062      	b.n	8008380 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6818      	ldr	r0, [r3, #0]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	6899      	ldr	r1, [r3, #8]
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	f000 fb35 	bl	8008938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80082d6:	68bb      	ldr	r3, [r7, #8]
 80082d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80082dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	609a      	str	r2, [r3, #8]
      break;
 80082e6:	e04f      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	6818      	ldr	r0, [r3, #0]
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	6899      	ldr	r1, [r3, #8]
 80082f0:	683b      	ldr	r3, [r7, #0]
 80082f2:	685a      	ldr	r2, [r3, #4]
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f000 fb1e 	bl	8008938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	689a      	ldr	r2, [r3, #8]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800830a:	609a      	str	r2, [r3, #8]
      break;
 800830c:	e03c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6818      	ldr	r0, [r3, #0]
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	6859      	ldr	r1, [r3, #4]
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	68db      	ldr	r3, [r3, #12]
 800831a:	461a      	mov	r2, r3
 800831c:	f000 fa92 	bl	8008844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2150      	movs	r1, #80	@ 0x50
 8008326:	4618      	mov	r0, r3
 8008328:	f000 faeb 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 800832c:	e02c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6818      	ldr	r0, [r3, #0]
 8008332:	683b      	ldr	r3, [r7, #0]
 8008334:	6859      	ldr	r1, [r3, #4]
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	68db      	ldr	r3, [r3, #12]
 800833a:	461a      	mov	r2, r3
 800833c:	f000 fab1 	bl	80088a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	2160      	movs	r1, #96	@ 0x60
 8008346:	4618      	mov	r0, r3
 8008348:	f000 fadb 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 800834c:	e01c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6818      	ldr	r0, [r3, #0]
 8008352:	683b      	ldr	r3, [r7, #0]
 8008354:	6859      	ldr	r1, [r3, #4]
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	68db      	ldr	r3, [r3, #12]
 800835a:	461a      	mov	r2, r3
 800835c:	f000 fa72 	bl	8008844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	2140      	movs	r1, #64	@ 0x40
 8008366:	4618      	mov	r0, r3
 8008368:	f000 facb 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 800836c:	e00c      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681a      	ldr	r2, [r3, #0]
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	4619      	mov	r1, r3
 8008378:	4610      	mov	r0, r2
 800837a:	f000 fac2 	bl	8008902 <TIM_ITRx_SetConfig>
      break;
 800837e:	e003      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008380:	2301      	movs	r3, #1
 8008382:	73fb      	strb	r3, [r7, #15]
      break;
 8008384:	e000      	b.n	8008388 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008386:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2201      	movs	r2, #1
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008398:	7bfb      	ldrb	r3, [r7, #15]
}
 800839a:	4618      	mov	r0, r3
 800839c:	3710      	adds	r7, #16
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	4a40      	ldr	r2, [pc, #256]	@ (80084b8 <TIM_Base_SetConfig+0x114>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80083c2:	d00f      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	4a3d      	ldr	r2, [pc, #244]	@ (80084bc <TIM_Base_SetConfig+0x118>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d00b      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	4a3c      	ldr	r2, [pc, #240]	@ (80084c0 <TIM_Base_SetConfig+0x11c>)
 80083d0:	4293      	cmp	r3, r2
 80083d2:	d007      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4a3b      	ldr	r2, [pc, #236]	@ (80084c4 <TIM_Base_SetConfig+0x120>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d003      	beq.n	80083e4 <TIM_Base_SetConfig+0x40>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	4a3a      	ldr	r2, [pc, #232]	@ (80084c8 <TIM_Base_SetConfig+0x124>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d108      	bne.n	80083f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80083ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	68fa      	ldr	r2, [r7, #12]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	4a2f      	ldr	r2, [pc, #188]	@ (80084b8 <TIM_Base_SetConfig+0x114>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d02b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008404:	d027      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	4a2c      	ldr	r2, [pc, #176]	@ (80084bc <TIM_Base_SetConfig+0x118>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d023      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	4a2b      	ldr	r2, [pc, #172]	@ (80084c0 <TIM_Base_SetConfig+0x11c>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d01f      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a2a      	ldr	r2, [pc, #168]	@ (80084c4 <TIM_Base_SetConfig+0x120>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d01b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	4a29      	ldr	r2, [pc, #164]	@ (80084c8 <TIM_Base_SetConfig+0x124>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d017      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	4a28      	ldr	r2, [pc, #160]	@ (80084cc <TIM_Base_SetConfig+0x128>)
 800842a:	4293      	cmp	r3, r2
 800842c:	d013      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	4a27      	ldr	r2, [pc, #156]	@ (80084d0 <TIM_Base_SetConfig+0x12c>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d00f      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	4a26      	ldr	r2, [pc, #152]	@ (80084d4 <TIM_Base_SetConfig+0x130>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00b      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	4a25      	ldr	r2, [pc, #148]	@ (80084d8 <TIM_Base_SetConfig+0x134>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d007      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	4a24      	ldr	r2, [pc, #144]	@ (80084dc <TIM_Base_SetConfig+0x138>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d003      	beq.n	8008456 <TIM_Base_SetConfig+0xb2>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4a23      	ldr	r2, [pc, #140]	@ (80084e0 <TIM_Base_SetConfig+0x13c>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d108      	bne.n	8008468 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800845c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	4313      	orrs	r3, r2
 8008466:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	695b      	ldr	r3, [r3, #20]
 8008472:	4313      	orrs	r3, r2
 8008474:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800847c:	683b      	ldr	r3, [r7, #0]
 800847e:	689a      	ldr	r2, [r3, #8]
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008484:	683b      	ldr	r3, [r7, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	4a0a      	ldr	r2, [pc, #40]	@ (80084b8 <TIM_Base_SetConfig+0x114>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d003      	beq.n	800849c <TIM_Base_SetConfig+0xf8>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	4a0c      	ldr	r2, [pc, #48]	@ (80084c8 <TIM_Base_SetConfig+0x124>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d103      	bne.n	80084a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	691a      	ldr	r2, [r3, #16]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2201      	movs	r2, #1
 80084a8:	615a      	str	r2, [r3, #20]
}
 80084aa:	bf00      	nop
 80084ac:	3714      	adds	r7, #20
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40010000 	.word	0x40010000
 80084bc:	40000400 	.word	0x40000400
 80084c0:	40000800 	.word	0x40000800
 80084c4:	40000c00 	.word	0x40000c00
 80084c8:	40010400 	.word	0x40010400
 80084cc:	40014000 	.word	0x40014000
 80084d0:	40014400 	.word	0x40014400
 80084d4:	40014800 	.word	0x40014800
 80084d8:	40001800 	.word	0x40001800
 80084dc:	40001c00 	.word	0x40001c00
 80084e0:	40002000 	.word	0x40002000

080084e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b087      	sub	sp, #28
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
 80084ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	f023 0201 	bic.w	r2, r3, #1
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	699b      	ldr	r3, [r3, #24]
 800850a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008512:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	f023 0303 	bic.w	r3, r3, #3
 800851a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800851c:	683b      	ldr	r3, [r7, #0]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	4313      	orrs	r3, r2
 8008524:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	f023 0302 	bic.w	r3, r3, #2
 800852c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	697a      	ldr	r2, [r7, #20]
 8008534:	4313      	orrs	r3, r2
 8008536:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	4a20      	ldr	r2, [pc, #128]	@ (80085bc <TIM_OC1_SetConfig+0xd8>)
 800853c:	4293      	cmp	r3, r2
 800853e:	d003      	beq.n	8008548 <TIM_OC1_SetConfig+0x64>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	4a1f      	ldr	r2, [pc, #124]	@ (80085c0 <TIM_OC1_SetConfig+0xdc>)
 8008544:	4293      	cmp	r3, r2
 8008546:	d10c      	bne.n	8008562 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008548:	697b      	ldr	r3, [r7, #20]
 800854a:	f023 0308 	bic.w	r3, r3, #8
 800854e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	68db      	ldr	r3, [r3, #12]
 8008554:	697a      	ldr	r2, [r7, #20]
 8008556:	4313      	orrs	r3, r2
 8008558:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f023 0304 	bic.w	r3, r3, #4
 8008560:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	4a15      	ldr	r2, [pc, #84]	@ (80085bc <TIM_OC1_SetConfig+0xd8>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d003      	beq.n	8008572 <TIM_OC1_SetConfig+0x8e>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	4a14      	ldr	r2, [pc, #80]	@ (80085c0 <TIM_OC1_SetConfig+0xdc>)
 800856e:	4293      	cmp	r3, r2
 8008570:	d111      	bne.n	8008596 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008572:	693b      	ldr	r3, [r7, #16]
 8008574:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800857a:	693b      	ldr	r3, [r7, #16]
 800857c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	695b      	ldr	r3, [r3, #20]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	4313      	orrs	r3, r2
 800858a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	699b      	ldr	r3, [r3, #24]
 8008590:	693a      	ldr	r2, [r7, #16]
 8008592:	4313      	orrs	r3, r2
 8008594:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	693a      	ldr	r2, [r7, #16]
 800859a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	685a      	ldr	r2, [r3, #4]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	621a      	str	r2, [r3, #32]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr
 80085bc:	40010000 	.word	0x40010000
 80085c0:	40010400 	.word	0x40010400

080085c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6a1b      	ldr	r3, [r3, #32]
 80085d2:	f023 0210 	bic.w	r2, r3, #16
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6a1b      	ldr	r3, [r3, #32]
 80085de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	699b      	ldr	r3, [r3, #24]
 80085ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80085f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	021b      	lsls	r3, r3, #8
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f023 0320 	bic.w	r3, r3, #32
 800860e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a22      	ldr	r2, [pc, #136]	@ (80086a8 <TIM_OC2_SetConfig+0xe4>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_OC2_SetConfig+0x68>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a21      	ldr	r2, [pc, #132]	@ (80086ac <TIM_OC2_SetConfig+0xe8>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d10d      	bne.n	8008648 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008646:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a17      	ldr	r2, [pc, #92]	@ (80086a8 <TIM_OC2_SetConfig+0xe4>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d003      	beq.n	8008658 <TIM_OC2_SetConfig+0x94>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a16      	ldr	r2, [pc, #88]	@ (80086ac <TIM_OC2_SetConfig+0xe8>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d113      	bne.n	8008680 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008658:	693b      	ldr	r3, [r7, #16]
 800865a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800865e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008666:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	695b      	ldr	r3, [r3, #20]
 800866c:	009b      	lsls	r3, r3, #2
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008674:	683b      	ldr	r3, [r7, #0]
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	693a      	ldr	r2, [r7, #16]
 800867c:	4313      	orrs	r3, r2
 800867e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	693a      	ldr	r2, [r7, #16]
 8008684:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68fa      	ldr	r2, [r7, #12]
 800868a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	685a      	ldr	r2, [r3, #4]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	697a      	ldr	r2, [r7, #20]
 8008698:	621a      	str	r2, [r3, #32]
}
 800869a:	bf00      	nop
 800869c:	371c      	adds	r7, #28
 800869e:	46bd      	mov	sp, r7
 80086a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	40010000 	.word	0x40010000
 80086ac:	40010400 	.word	0x40010400

080086b0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086b0:	b480      	push	{r7}
 80086b2:	b087      	sub	sp, #28
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	6a1b      	ldr	r3, [r3, #32]
 80086ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	685b      	ldr	r3, [r3, #4]
 80086d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	69db      	ldr	r3, [r3, #28]
 80086d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	f023 0303 	bic.w	r3, r3, #3
 80086e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	68fa      	ldr	r2, [r7, #12]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80086f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	689b      	ldr	r3, [r3, #8]
 80086fe:	021b      	lsls	r3, r3, #8
 8008700:	697a      	ldr	r2, [r7, #20]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	4a21      	ldr	r2, [pc, #132]	@ (8008790 <TIM_OC3_SetConfig+0xe0>)
 800870a:	4293      	cmp	r3, r2
 800870c:	d003      	beq.n	8008716 <TIM_OC3_SetConfig+0x66>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	4a20      	ldr	r2, [pc, #128]	@ (8008794 <TIM_OC3_SetConfig+0xe4>)
 8008712:	4293      	cmp	r3, r2
 8008714:	d10d      	bne.n	8008732 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800871c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	68db      	ldr	r3, [r3, #12]
 8008722:	021b      	lsls	r3, r3, #8
 8008724:	697a      	ldr	r2, [r7, #20]
 8008726:	4313      	orrs	r3, r2
 8008728:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008730:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	4a16      	ldr	r2, [pc, #88]	@ (8008790 <TIM_OC3_SetConfig+0xe0>)
 8008736:	4293      	cmp	r3, r2
 8008738:	d003      	beq.n	8008742 <TIM_OC3_SetConfig+0x92>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4a15      	ldr	r2, [pc, #84]	@ (8008794 <TIM_OC3_SetConfig+0xe4>)
 800873e:	4293      	cmp	r3, r2
 8008740:	d113      	bne.n	800876a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008748:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800874a:	693b      	ldr	r3, [r7, #16]
 800874c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008750:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	695b      	ldr	r3, [r3, #20]
 8008756:	011b      	lsls	r3, r3, #4
 8008758:	693a      	ldr	r2, [r7, #16]
 800875a:	4313      	orrs	r3, r2
 800875c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	699b      	ldr	r3, [r3, #24]
 8008762:	011b      	lsls	r3, r3, #4
 8008764:	693a      	ldr	r2, [r7, #16]
 8008766:	4313      	orrs	r3, r2
 8008768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	68fa      	ldr	r2, [r7, #12]
 8008774:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	685a      	ldr	r2, [r3, #4]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	621a      	str	r2, [r3, #32]
}
 8008784:	bf00      	nop
 8008786:	371c      	adds	r7, #28
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	40010000 	.word	0x40010000
 8008794:	40010400 	.word	0x40010400

08008798 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008798:	b480      	push	{r7}
 800879a:	b087      	sub	sp, #28
 800879c:	af00      	add	r7, sp, #0
 800879e:	6078      	str	r0, [r7, #4]
 80087a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6a1b      	ldr	r3, [r3, #32]
 80087a6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a1b      	ldr	r3, [r3, #32]
 80087b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80087c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	021b      	lsls	r3, r3, #8
 80087d6:	68fa      	ldr	r2, [r7, #12]
 80087d8:	4313      	orrs	r3, r2
 80087da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80087dc:	693b      	ldr	r3, [r7, #16]
 80087de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80087e2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	031b      	lsls	r3, r3, #12
 80087ea:	693a      	ldr	r2, [r7, #16]
 80087ec:	4313      	orrs	r3, r2
 80087ee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	4a12      	ldr	r2, [pc, #72]	@ (800883c <TIM_OC4_SetConfig+0xa4>)
 80087f4:	4293      	cmp	r3, r2
 80087f6:	d003      	beq.n	8008800 <TIM_OC4_SetConfig+0x68>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	4a11      	ldr	r2, [pc, #68]	@ (8008840 <TIM_OC4_SetConfig+0xa8>)
 80087fc:	4293      	cmp	r3, r2
 80087fe:	d109      	bne.n	8008814 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	695b      	ldr	r3, [r3, #20]
 800880c:	019b      	lsls	r3, r3, #6
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	4313      	orrs	r3, r2
 8008812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	685a      	ldr	r2, [r3, #4]
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	693a      	ldr	r2, [r7, #16]
 800882c:	621a      	str	r2, [r3, #32]
}
 800882e:	bf00      	nop
 8008830:	371c      	adds	r7, #28
 8008832:	46bd      	mov	sp, r7
 8008834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008838:	4770      	bx	lr
 800883a:	bf00      	nop
 800883c:	40010000 	.word	0x40010000
 8008840:	40010400 	.word	0x40010400

08008844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008844:	b480      	push	{r7}
 8008846:	b087      	sub	sp, #28
 8008848:	af00      	add	r7, sp, #0
 800884a:	60f8      	str	r0, [r7, #12]
 800884c:	60b9      	str	r1, [r7, #8]
 800884e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	6a1b      	ldr	r3, [r3, #32]
 8008854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	6a1b      	ldr	r3, [r3, #32]
 800885a:	f023 0201 	bic.w	r2, r3, #1
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	699b      	ldr	r3, [r3, #24]
 8008866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008868:	693b      	ldr	r3, [r7, #16]
 800886a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800886e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	011b      	lsls	r3, r3, #4
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	4313      	orrs	r3, r2
 8008878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	f023 030a 	bic.w	r3, r3, #10
 8008880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008882:	697a      	ldr	r2, [r7, #20]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	4313      	orrs	r3, r2
 8008888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	693a      	ldr	r2, [r7, #16]
 800888e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	697a      	ldr	r2, [r7, #20]
 8008894:	621a      	str	r2, [r3, #32]
}
 8008896:	bf00      	nop
 8008898:	371c      	adds	r7, #28
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b087      	sub	sp, #28
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	60f8      	str	r0, [r7, #12]
 80088aa:	60b9      	str	r1, [r7, #8]
 80088ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	6a1b      	ldr	r3, [r3, #32]
 80088b2:	f023 0210 	bic.w	r2, r3, #16
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	699b      	ldr	r3, [r3, #24]
 80088be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6a1b      	ldr	r3, [r3, #32]
 80088c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80088c6:	697b      	ldr	r3, [r7, #20]
 80088c8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80088cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	031b      	lsls	r3, r3, #12
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	4313      	orrs	r3, r2
 80088d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80088d8:	693b      	ldr	r3, [r7, #16]
 80088da:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80088de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	011b      	lsls	r3, r3, #4
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	4313      	orrs	r3, r2
 80088e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	697a      	ldr	r2, [r7, #20]
 80088ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	693a      	ldr	r2, [r7, #16]
 80088f4:	621a      	str	r2, [r3, #32]
}
 80088f6:	bf00      	nop
 80088f8:	371c      	adds	r7, #28
 80088fa:	46bd      	mov	sp, r7
 80088fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008900:	4770      	bx	lr

08008902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008902:	b480      	push	{r7}
 8008904:	b085      	sub	sp, #20
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
 800890a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	689b      	ldr	r3, [r3, #8]
 8008910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800891a:	683a      	ldr	r2, [r7, #0]
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	4313      	orrs	r3, r2
 8008920:	f043 0307 	orr.w	r3, r3, #7
 8008924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	68fa      	ldr	r2, [r7, #12]
 800892a:	609a      	str	r2, [r3, #8]
}
 800892c:	bf00      	nop
 800892e:	3714      	adds	r7, #20
 8008930:	46bd      	mov	sp, r7
 8008932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008936:	4770      	bx	lr

08008938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008938:	b480      	push	{r7}
 800893a:	b087      	sub	sp, #28
 800893c:	af00      	add	r7, sp, #0
 800893e:	60f8      	str	r0, [r7, #12]
 8008940:	60b9      	str	r1, [r7, #8]
 8008942:	607a      	str	r2, [r7, #4]
 8008944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	689b      	ldr	r3, [r3, #8]
 800894a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800894c:	697b      	ldr	r3, [r7, #20]
 800894e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	021a      	lsls	r2, r3, #8
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	431a      	orrs	r2, r3
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	4313      	orrs	r3, r2
 8008960:	697a      	ldr	r2, [r7, #20]
 8008962:	4313      	orrs	r3, r2
 8008964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	609a      	str	r2, [r3, #8]
}
 800896c:	bf00      	nop
 800896e:	371c      	adds	r7, #28
 8008970:	46bd      	mov	sp, r7
 8008972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008976:	4770      	bx	lr

08008978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	f003 031f 	and.w	r3, r3, #31
 800898a:	2201      	movs	r2, #1
 800898c:	fa02 f303 	lsl.w	r3, r2, r3
 8008990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	6a1a      	ldr	r2, [r3, #32]
 8008996:	697b      	ldr	r3, [r7, #20]
 8008998:	43db      	mvns	r3, r3
 800899a:	401a      	ands	r2, r3
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	6a1a      	ldr	r2, [r3, #32]
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	f003 031f 	and.w	r3, r3, #31
 80089aa:	6879      	ldr	r1, [r7, #4]
 80089ac:	fa01 f303 	lsl.w	r3, r1, r3
 80089b0:	431a      	orrs	r2, r3
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	621a      	str	r2, [r3, #32]
}
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
	...

080089c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	6078      	str	r0, [r7, #4]
 80089cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d101      	bne.n	80089dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80089d8:	2302      	movs	r3, #2
 80089da:	e05a      	b.n	8008a92 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	2201      	movs	r2, #1
 80089e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2202      	movs	r2, #2
 80089e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	685b      	ldr	r3, [r3, #4]
 80089f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68fa      	ldr	r2, [r7, #12]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a21      	ldr	r2, [pc, #132]	@ (8008aa0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d022      	beq.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a28:	d01d      	beq.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d018      	beq.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	4a1b      	ldr	r2, [pc, #108]	@ (8008aa8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	d013      	beq.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a1a      	ldr	r2, [pc, #104]	@ (8008aac <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d00e      	beq.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	4a18      	ldr	r2, [pc, #96]	@ (8008ab0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008a4e:	4293      	cmp	r3, r2
 8008a50:	d009      	beq.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	4a17      	ldr	r2, [pc, #92]	@ (8008ab4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d004      	beq.n	8008a66 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	4a15      	ldr	r2, [pc, #84]	@ (8008ab8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a62:	4293      	cmp	r3, r2
 8008a64:	d10c      	bne.n	8008a80 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	4313      	orrs	r3, r2
 8008a76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	68ba      	ldr	r2, [r7, #8]
 8008a7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008a90:	2300      	movs	r3, #0
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr
 8008a9e:	bf00      	nop
 8008aa0:	40010000 	.word	0x40010000
 8008aa4:	40000400 	.word	0x40000400
 8008aa8:	40000800 	.word	0x40000800
 8008aac:	40000c00 	.word	0x40000c00
 8008ab0:	40010400 	.word	0x40010400
 8008ab4:	40014000 	.word	0x40014000
 8008ab8:	40001800 	.word	0x40001800

08008abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008abc:	b480      	push	{r7}
 8008abe:	b085      	sub	sp, #20
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d101      	bne.n	8008ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ad4:	2302      	movs	r3, #2
 8008ad6:	e03d      	b.n	8008b54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	2201      	movs	r2, #1
 8008adc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008ae6:	683b      	ldr	r3, [r7, #0]
 8008ae8:	68db      	ldr	r3, [r3, #12]
 8008aea:	4313      	orrs	r3, r2
 8008aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008aee:	68fb      	ldr	r3, [r7, #12]
 8008af0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008af4:	683b      	ldr	r3, [r7, #0]
 8008af6:	689b      	ldr	r3, [r3, #8]
 8008af8:	4313      	orrs	r3, r2
 8008afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4313      	orrs	r3, r2
 8008b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	4313      	orrs	r3, r2
 8008b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	695b      	ldr	r3, [r3, #20]
 8008b30:	4313      	orrs	r3, r2
 8008b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3714      	adds	r7, #20
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b5e:	4770      	bx	lr

08008b60 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d101      	bne.n	8008b72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	e03f      	b.n	8008bf2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b78:	b2db      	uxtb	r3, r3
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d106      	bne.n	8008b8c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	2200      	movs	r2, #0
 8008b82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	f7fb fa62 	bl	8004050 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2224      	movs	r2, #36	@ 0x24
 8008b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008ba2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f000 fe9b 	bl	80098e0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	691a      	ldr	r2, [r3, #16]
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008bb8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	695a      	ldr	r2, [r3, #20]
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008bc8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008bd8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	2200      	movs	r2, #0
 8008bde:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2220      	movs	r2, #32
 8008be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	2220      	movs	r2, #32
 8008bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8008bf0:	2300      	movs	r3, #0
}
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	3708      	adds	r7, #8
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	bd80      	pop	{r7, pc}

08008bfa <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bfa:	b580      	push	{r7, lr}
 8008bfc:	b08c      	sub	sp, #48	@ 0x30
 8008bfe:	af00      	add	r7, sp, #0
 8008c00:	60f8      	str	r0, [r7, #12]
 8008c02:	60b9      	str	r1, [r7, #8]
 8008c04:	4613      	mov	r3, r2
 8008c06:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b20      	cmp	r3, #32
 8008c12:	d152      	bne.n	8008cba <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d002      	beq.n	8008c20 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8008c1a:	88fb      	ldrh	r3, [r7, #6]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d101      	bne.n	8008c24 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8008c20:	2301      	movs	r3, #1
 8008c22:	e04b      	b.n	8008cbc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c2a:	2b01      	cmp	r3, #1
 8008c2c:	d101      	bne.n	8008c32 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8008c2e:	2302      	movs	r3, #2
 8008c30:	e044      	b.n	8008cbc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2201      	movs	r2, #1
 8008c36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	2201      	movs	r2, #1
 8008c3e:	631a      	str	r2, [r3, #48]	@ 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8008c40:	88fb      	ldrh	r3, [r7, #6]
 8008c42:	461a      	mov	r2, r3
 8008c44:	68b9      	ldr	r1, [r7, #8]
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fbea 	bl	8009420 <UART_Start_Receive_DMA>
 8008c4c:	4603      	mov	r3, r0
 8008c4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8008c52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d12c      	bne.n	8008cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c5e:	2b01      	cmp	r3, #1
 8008c60:	d125      	bne.n	8008cae <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008c62:	2300      	movs	r3, #0
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c80:	69bb      	ldr	r3, [r7, #24]
 8008c82:	e853 3f00 	ldrex	r3, [r3]
 8008c86:	617b      	str	r3, [r7, #20]
   return(result);
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	f043 0310 	orr.w	r3, r3, #16
 8008c8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	330c      	adds	r3, #12
 8008c96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c98:	627a      	str	r2, [r7, #36]	@ 0x24
 8008c9a:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c9c:	6a39      	ldr	r1, [r7, #32]
 8008c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca0:	e841 2300 	strex	r3, r2, [r1]
 8008ca4:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ca6:	69fb      	ldr	r3, [r7, #28]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d1e5      	bne.n	8008c78 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8008cac:	e002      	b.n	8008cb4 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8008cae:	2301      	movs	r3, #1
 8008cb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8008cb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008cb8:	e000      	b.n	8008cbc <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8008cba:	2302      	movs	r3, #2
  }
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3730      	adds	r7, #48	@ 0x30
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b0ba      	sub	sp, #232	@ 0xe8
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	695b      	ldr	r3, [r3, #20]
 8008ce6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8008cea:	2300      	movs	r3, #0
 8008cec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8008cf0:	2300      	movs	r3, #0
 8008cf2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008cf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008cfa:	f003 030f 	and.w	r3, r3, #15
 8008cfe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8008d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d10f      	bne.n	8008d2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d0e:	f003 0320 	and.w	r3, r3, #32
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d009      	beq.n	8008d2a <HAL_UART_IRQHandler+0x66>
 8008d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d1a:	f003 0320 	and.w	r3, r3, #32
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d003      	beq.n	8008d2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fd21 	bl	800976a <UART_Receive_IT>
      return;
 8008d28:	e256      	b.n	80091d8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008d2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	f000 80de 	beq.w	8008ef0 <HAL_UART_IRQHandler+0x22c>
 8008d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d38:	f003 0301 	and.w	r3, r3, #1
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d106      	bne.n	8008d4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	f000 80d1 	beq.w	8008ef0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d52:	f003 0301 	and.w	r3, r3, #1
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <HAL_UART_IRQHandler+0xae>
 8008d5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008d5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d005      	beq.n	8008d72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d6a:	f043 0201 	orr.w	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d76:	f003 0304 	and.w	r3, r3, #4
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <HAL_UART_IRQHandler+0xd2>
 8008d7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008d82:	f003 0301 	and.w	r3, r3, #1
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d005      	beq.n	8008d96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d8e:	f043 0202 	orr.w	r2, r3, #2
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008d9a:	f003 0302 	and.w	r3, r3, #2
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d00b      	beq.n	8008dba <HAL_UART_IRQHandler+0xf6>
 8008da2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d005      	beq.n	8008dba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008db2:	f043 0204 	orr.w	r2, r3, #4
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d011      	beq.n	8008dea <HAL_UART_IRQHandler+0x126>
 8008dc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008dca:	f003 0320 	and.w	r3, r3, #32
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d105      	bne.n	8008dde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008dd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8008dd6:	f003 0301 	and.w	r3, r3, #1
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d005      	beq.n	8008dea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008de2:	f043 0208 	orr.w	r2, r3, #8
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 81ed 	beq.w	80091ce <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008df4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008df8:	f003 0320 	and.w	r3, r3, #32
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d008      	beq.n	8008e12 <HAL_UART_IRQHandler+0x14e>
 8008e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008e04:	f003 0320 	and.w	r3, r3, #32
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d002      	beq.n	8008e12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f000 fcac 	bl	800976a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	695b      	ldr	r3, [r3, #20]
 8008e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e1c:	2b40      	cmp	r3, #64	@ 0x40
 8008e1e:	bf0c      	ite	eq
 8008e20:	2301      	moveq	r3, #1
 8008e22:	2300      	movne	r3, #0
 8008e24:	b2db      	uxtb	r3, r3
 8008e26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008e2e:	f003 0308 	and.w	r3, r3, #8
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d103      	bne.n	8008e3e <HAL_UART_IRQHandler+0x17a>
 8008e36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d04f      	beq.n	8008ede <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f000 fbb4 	bl	80095ac <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	695b      	ldr	r3, [r3, #20]
 8008e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e4e:	2b40      	cmp	r3, #64	@ 0x40
 8008e50:	d141      	bne.n	8008ed6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	3314      	adds	r3, #20
 8008e58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008e60:	e853 3f00 	ldrex	r3, [r3]
 8008e64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8008e68:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8008e6c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3314      	adds	r3, #20
 8008e7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8008e7e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8008e82:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8008e8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8008e8e:	e841 2300 	strex	r3, r2, [r1]
 8008e92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8008e96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1d9      	bne.n	8008e52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d013      	beq.n	8008ece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eaa:	4a7d      	ldr	r2, [pc, #500]	@ (80090a0 <HAL_UART_IRQHandler+0x3dc>)
 8008eac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	f7fc fcf0 	bl	8005898 <HAL_DMA_Abort_IT>
 8008eb8:	4603      	mov	r3, r0
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d016      	beq.n	8008eec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ec4:	687a      	ldr	r2, [r7, #4]
 8008ec6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8008ec8:	4610      	mov	r0, r2
 8008eca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ecc:	e00e      	b.n	8008eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008ece:	6878      	ldr	r0, [r7, #4]
 8008ed0:	f000 f9a4 	bl	800921c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ed4:	e00a      	b.n	8008eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f9a0 	bl	800921c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008edc:	e006      	b.n	8008eec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f000 f99c 	bl	800921c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	641a      	str	r2, [r3, #64]	@ 0x40
      }
    }
    return;
 8008eea:	e170      	b.n	80091ce <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eec:	bf00      	nop
    return;
 8008eee:	e16e      	b.n	80091ce <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef4:	2b01      	cmp	r3, #1
 8008ef6:	f040 814a 	bne.w	800918e <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008efa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8008efe:	f003 0310 	and.w	r3, r3, #16
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	f000 8143 	beq.w	800918e <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8008f0c:	f003 0310 	and.w	r3, r3, #16
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	f000 813c 	beq.w	800918e <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008f16:	2300      	movs	r3, #0
 8008f18:	60bb      	str	r3, [r7, #8]
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	60bb      	str	r3, [r7, #8]
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	685b      	ldr	r3, [r3, #4]
 8008f28:	60bb      	str	r3, [r7, #8]
 8008f2a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	695b      	ldr	r3, [r3, #20]
 8008f32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008f36:	2b40      	cmp	r3, #64	@ 0x40
 8008f38:	f040 80b4 	bne.w	80090a4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	685b      	ldr	r3, [r3, #4]
 8008f44:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008f48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	f000 8140 	beq.w	80091d2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008f56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f5a:	429a      	cmp	r2, r3
 8008f5c:	f080 8139 	bcs.w	80091d2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8008f66:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f6c:	69db      	ldr	r3, [r3, #28]
 8008f6e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008f72:	f000 8088 	beq.w	8009086 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	330c      	adds	r3, #12
 8008f7c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008f84:	e853 3f00 	ldrex	r3, [r3]
 8008f88:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8008f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f94:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	330c      	adds	r3, #12
 8008f9e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8008fa2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008fa6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8008fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8008fb2:	e841 2300 	strex	r3, r2, [r1]
 8008fb6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8008fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d1d9      	bne.n	8008f76 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	3314      	adds	r3, #20
 8008fc8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008fcc:	e853 3f00 	ldrex	r3, [r3]
 8008fd0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008fd2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008fd4:	f023 0301 	bic.w	r3, r3, #1
 8008fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	3314      	adds	r3, #20
 8008fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8008fe6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8008fea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8008fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008ff2:	e841 2300 	strex	r3, r2, [r1]
 8008ff6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8008ff8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d1e1      	bne.n	8008fc2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	3314      	adds	r3, #20
 8009004:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009006:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009008:	e853 3f00 	ldrex	r3, [r3]
 800900c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800900e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009010:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009014:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3314      	adds	r3, #20
 800901e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009022:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009024:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009026:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009028:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800902a:	e841 2300 	strex	r3, r2, [r1]
 800902e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009030:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009032:	2b00      	cmp	r3, #0
 8009034:	d1e3      	bne.n	8008ffe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2220      	movs	r2, #32
 800903a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	681b      	ldr	r3, [r3, #0]
 8009048:	330c      	adds	r3, #12
 800904a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800904c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800904e:	e853 3f00 	ldrex	r3, [r3]
 8009052:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009054:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009056:	f023 0310 	bic.w	r3, r3, #16
 800905a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	330c      	adds	r3, #12
 8009064:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009068:	65ba      	str	r2, [r7, #88]	@ 0x58
 800906a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800906e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009076:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e3      	bne.n	8009044 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009080:	4618      	mov	r0, r3
 8009082:	f7fc fb99 	bl	80057b8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800908e:	b29b      	uxth	r3, r3
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	b29b      	uxth	r3, r3
 8009094:	4619      	mov	r1, r3
 8009096:	6878      	ldr	r0, [r7, #4]
 8009098:	f7f8 fe2a 	bl	8001cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800909c:	e099      	b.n	80091d2 <HAL_UART_IRQHandler+0x50e>
 800909e:	bf00      	nop
 80090a0:	08009673 	.word	0x08009673
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090ac:	b29b      	uxth	r3, r3
 80090ae:	1ad3      	subs	r3, r2, r3
 80090b0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	f000 808b 	beq.w	80091d6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80090c0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 8086 	beq.w	80091d6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	330c      	adds	r3, #12
 80090d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090d4:	e853 3f00 	ldrex	r3, [r3]
 80090d8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80090da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80090dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80090e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	330c      	adds	r3, #12
 80090ea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80090ee:	647a      	str	r2, [r7, #68]	@ 0x44
 80090f0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090f2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80090f4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80090f6:	e841 2300 	strex	r3, r2, [r1]
 80090fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80090fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d1e3      	bne.n	80090ca <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	3314      	adds	r3, #20
 8009108:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800910a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800910c:	e853 3f00 	ldrex	r3, [r3]
 8009110:	623b      	str	r3, [r7, #32]
   return(result);
 8009112:	6a3b      	ldr	r3, [r7, #32]
 8009114:	f023 0301 	bic.w	r3, r3, #1
 8009118:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	3314      	adds	r3, #20
 8009122:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8009126:	633a      	str	r2, [r7, #48]	@ 0x30
 8009128:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800912a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800912c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800912e:	e841 2300 	strex	r3, r2, [r1]
 8009132:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009136:	2b00      	cmp	r3, #0
 8009138:	d1e3      	bne.n	8009102 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	2220      	movs	r2, #32
 800913e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	2200      	movs	r2, #0
 8009146:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	681b      	ldr	r3, [r3, #0]
 800914c:	330c      	adds	r3, #12
 800914e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	693b      	ldr	r3, [r7, #16]
 8009152:	e853 3f00 	ldrex	r3, [r3]
 8009156:	60fb      	str	r3, [r7, #12]
   return(result);
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	f023 0310 	bic.w	r3, r3, #16
 800915e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	330c      	adds	r3, #12
 8009168:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800916c:	61fa      	str	r2, [r7, #28]
 800916e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009170:	69b9      	ldr	r1, [r7, #24]
 8009172:	69fa      	ldr	r2, [r7, #28]
 8009174:	e841 2300 	strex	r3, r2, [r1]
 8009178:	617b      	str	r3, [r7, #20]
   return(result);
 800917a:	697b      	ldr	r3, [r7, #20]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d1e3      	bne.n	8009148 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009180:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009184:	4619      	mov	r1, r3
 8009186:	6878      	ldr	r0, [r7, #4]
 8009188:	f7f8 fdb2 	bl	8001cf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800918c:	e023      	b.n	80091d6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800918e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009192:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009196:	2b00      	cmp	r3, #0
 8009198:	d009      	beq.n	80091ae <HAL_UART_IRQHandler+0x4ea>
 800919a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800919e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d003      	beq.n	80091ae <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80091a6:	6878      	ldr	r0, [r7, #4]
 80091a8:	f000 fa77 	bl	800969a <UART_Transmit_IT>
    return;
 80091ac:	e014      	b.n	80091d8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80091ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80091b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d00e      	beq.n	80091d8 <HAL_UART_IRQHandler+0x514>
 80091ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80091be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d008      	beq.n	80091d8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 fab7 	bl	800973a <UART_EndTransmit_IT>
    return;
 80091cc:	e004      	b.n	80091d8 <HAL_UART_IRQHandler+0x514>
    return;
 80091ce:	bf00      	nop
 80091d0:	e002      	b.n	80091d8 <HAL_UART_IRQHandler+0x514>
      return;
 80091d2:	bf00      	nop
 80091d4:	e000      	b.n	80091d8 <HAL_UART_IRQHandler+0x514>
      return;
 80091d6:	bf00      	nop
  }
}
 80091d8:	37e8      	adds	r7, #232	@ 0xe8
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
 80091de:	bf00      	nop

080091e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80091e8:	bf00      	nop
 80091ea:	370c      	adds	r7, #12
 80091ec:	46bd      	mov	sp, r7
 80091ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091f2:	4770      	bx	lr

080091f4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80091f4:	b480      	push	{r7}
 80091f6:	b083      	sub	sp, #12
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009208:	b480      	push	{r7}
 800920a:	b083      	sub	sp, #12
 800920c:	af00      	add	r7, sp, #0
 800920e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009210:	bf00      	nop
 8009212:	370c      	adds	r7, #12
 8009214:	46bd      	mov	sp, r7
 8009216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800921a:	4770      	bx	lr

0800921c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800921c:	b480      	push	{r7}
 800921e:	b083      	sub	sp, #12
 8009220:	af00      	add	r7, sp, #0
 8009222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009224:	bf00      	nop
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr

08009230 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b09c      	sub	sp, #112	@ 0x70
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800923c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009248:	2b00      	cmp	r3, #0
 800924a:	d172      	bne.n	8009332 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800924c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800924e:	2200      	movs	r2, #0
 8009250:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	330c      	adds	r3, #12
 8009258:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800925a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800925c:	e853 3f00 	ldrex	r3, [r3]
 8009260:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009262:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009268:	66bb      	str	r3, [r7, #104]	@ 0x68
 800926a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009272:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009274:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800927a:	e841 2300 	strex	r3, r2, [r1]
 800927e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009282:	2b00      	cmp	r3, #0
 8009284:	d1e5      	bne.n	8009252 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009286:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	3314      	adds	r3, #20
 800928c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800928e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009290:	e853 3f00 	ldrex	r3, [r3]
 8009294:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009298:	f023 0301 	bic.w	r3, r3, #1
 800929c:	667b      	str	r3, [r7, #100]	@ 0x64
 800929e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	3314      	adds	r3, #20
 80092a4:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80092a6:	647a      	str	r2, [r7, #68]	@ 0x44
 80092a8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092aa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80092ac:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80092ae:	e841 2300 	strex	r3, r2, [r1]
 80092b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80092b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d1e5      	bne.n	8009286 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	3314      	adds	r3, #20
 80092c0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092c4:	e853 3f00 	ldrex	r3, [r3]
 80092c8:	623b      	str	r3, [r7, #32]
   return(result);
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80092d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3314      	adds	r3, #20
 80092d8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80092da:	633a      	str	r2, [r7, #48]	@ 0x30
 80092dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80092e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80092e2:	e841 2300 	strex	r3, r2, [r1]
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80092e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d1e5      	bne.n	80092ba <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80092ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092f0:	2220      	movs	r2, #32
 80092f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80092f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092fa:	2b01      	cmp	r3, #1
 80092fc:	d119      	bne.n	8009332 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	330c      	adds	r3, #12
 8009304:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	e853 3f00 	ldrex	r3, [r3]
 800930c:	60fb      	str	r3, [r7, #12]
   return(result);
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f023 0310 	bic.w	r3, r3, #16
 8009314:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009316:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	330c      	adds	r3, #12
 800931c:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 800931e:	61fa      	str	r2, [r7, #28]
 8009320:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009322:	69b9      	ldr	r1, [r7, #24]
 8009324:	69fa      	ldr	r2, [r7, #28]
 8009326:	e841 2300 	strex	r3, r2, [r1]
 800932a:	617b      	str	r3, [r7, #20]
   return(result);
 800932c:	697b      	ldr	r3, [r7, #20]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1e5      	bne.n	80092fe <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009332:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009336:	2b01      	cmp	r3, #1
 8009338:	d106      	bne.n	8009348 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800933a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800933c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800933e:	4619      	mov	r1, r3
 8009340:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009342:	f7f8 fcd5 	bl	8001cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009346:	e002      	b.n	800934e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8009348:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800934a:	f7ff ff53 	bl	80091f4 <HAL_UART_RxCpltCallback>
}
 800934e:	bf00      	nop
 8009350:	3770      	adds	r7, #112	@ 0x70
 8009352:	46bd      	mov	sp, r7
 8009354:	bd80      	pop	{r7, pc}

08009356 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009356:	b580      	push	{r7, lr}
 8009358:	b084      	sub	sp, #16
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009362:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009368:	2b01      	cmp	r3, #1
 800936a:	d108      	bne.n	800937e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009370:	085b      	lsrs	r3, r3, #1
 8009372:	b29b      	uxth	r3, r3
 8009374:	4619      	mov	r1, r3
 8009376:	68f8      	ldr	r0, [r7, #12]
 8009378:	f7f8 fcba 	bl	8001cf0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800937c:	e002      	b.n	8009384 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800937e:	68f8      	ldr	r0, [r7, #12]
 8009380:	f7ff ff42 	bl	8009208 <HAL_UART_RxHalfCpltCallback>
}
 8009384:	bf00      	nop
 8009386:	3710      	adds	r7, #16
 8009388:	46bd      	mov	sp, r7
 800938a:	bd80      	pop	{r7, pc}

0800938c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800938c:	b580      	push	{r7, lr}
 800938e:	b084      	sub	sp, #16
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009394:	2300      	movs	r3, #0
 8009396:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800939c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	695b      	ldr	r3, [r3, #20]
 80093a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093a8:	2b80      	cmp	r3, #128	@ 0x80
 80093aa:	bf0c      	ite	eq
 80093ac:	2301      	moveq	r3, #1
 80093ae:	2300      	movne	r3, #0
 80093b0:	b2db      	uxtb	r3, r3
 80093b2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	2b21      	cmp	r3, #33	@ 0x21
 80093be:	d108      	bne.n	80093d2 <UART_DMAError+0x46>
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d005      	beq.n	80093d2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2200      	movs	r2, #0
 80093ca:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80093cc:	68b8      	ldr	r0, [r7, #8]
 80093ce:	f000 f8c5 	bl	800955c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	695b      	ldr	r3, [r3, #20]
 80093d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80093dc:	2b40      	cmp	r3, #64	@ 0x40
 80093de:	bf0c      	ite	eq
 80093e0:	2301      	moveq	r3, #1
 80093e2:	2300      	movne	r3, #0
 80093e4:	b2db      	uxtb	r3, r3
 80093e6:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80093e8:	68bb      	ldr	r3, [r7, #8]
 80093ea:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80093ee:	b2db      	uxtb	r3, r3
 80093f0:	2b22      	cmp	r3, #34	@ 0x22
 80093f2:	d108      	bne.n	8009406 <UART_DMAError+0x7a>
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d005      	beq.n	8009406 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80093fa:	68bb      	ldr	r3, [r7, #8]
 80093fc:	2200      	movs	r2, #0
 80093fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009400:	68b8      	ldr	r0, [r7, #8]
 8009402:	f000 f8d3 	bl	80095ac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009406:	68bb      	ldr	r3, [r7, #8]
 8009408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800940a:	f043 0210 	orr.w	r2, r3, #16
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	641a      	str	r2, [r3, #64]	@ 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009412:	68b8      	ldr	r0, [r7, #8]
 8009414:	f7ff ff02 	bl	800921c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009418:	bf00      	nop
 800941a:	3710      	adds	r7, #16
 800941c:	46bd      	mov	sp, r7
 800941e:	bd80      	pop	{r7, pc}

08009420 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b098      	sub	sp, #96	@ 0x60
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	4613      	mov	r3, r2
 800942c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800942e:	68ba      	ldr	r2, [r7, #8]
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	88fa      	ldrh	r2, [r7, #6]
 8009438:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	641a      	str	r2, [r3, #64]	@ 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	2222      	movs	r2, #34	@ 0x22
 8009444:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800944c:	4a40      	ldr	r2, [pc, #256]	@ (8009550 <UART_Start_Receive_DMA+0x130>)
 800944e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009454:	4a3f      	ldr	r2, [pc, #252]	@ (8009554 <UART_Start_Receive_DMA+0x134>)
 8009456:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945c:	4a3e      	ldr	r2, [pc, #248]	@ (8009558 <UART_Start_Receive_DMA+0x138>)
 800945e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009464:	2200      	movs	r2, #0
 8009466:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009468:	f107 0308 	add.w	r3, r7, #8
 800946c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	3304      	adds	r3, #4
 8009478:	4619      	mov	r1, r3
 800947a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	88fb      	ldrh	r3, [r7, #6]
 8009480:	f7fc f942 	bl	8005708 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009484:	2300      	movs	r3, #0
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	613b      	str	r3, [r7, #16]
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	613b      	str	r3, [r7, #16]
 8009498:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	691b      	ldr	r3, [r3, #16]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d019      	beq.n	80094de <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	330c      	adds	r3, #12
 80094b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094b2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80094b4:	e853 3f00 	ldrex	r3, [r3]
 80094b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80094ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80094bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80094c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	330c      	adds	r3, #12
 80094c8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80094ca:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80094cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ce:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80094d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80094d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d1e5      	bne.n	80094aa <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	3314      	adds	r3, #20
 80094e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80094e8:	e853 3f00 	ldrex	r3, [r3]
 80094ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80094ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094f0:	f043 0301 	orr.w	r3, r3, #1
 80094f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	3314      	adds	r3, #20
 80094fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80094fe:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009500:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009502:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009504:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009506:	e841 2300 	strex	r3, r2, [r1]
 800950a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800950c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800950e:	2b00      	cmp	r3, #0
 8009510:	d1e5      	bne.n	80094de <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	3314      	adds	r3, #20
 8009518:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800951a:	69bb      	ldr	r3, [r7, #24]
 800951c:	e853 3f00 	ldrex	r3, [r3]
 8009520:	617b      	str	r3, [r7, #20]
   return(result);
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009528:	653b      	str	r3, [r7, #80]	@ 0x50
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	3314      	adds	r3, #20
 8009530:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009532:	627a      	str	r2, [r7, #36]	@ 0x24
 8009534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009536:	6a39      	ldr	r1, [r7, #32]
 8009538:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800953a:	e841 2300 	strex	r3, r2, [r1]
 800953e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009540:	69fb      	ldr	r3, [r7, #28]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d1e5      	bne.n	8009512 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	3760      	adds	r7, #96	@ 0x60
 800954c:	46bd      	mov	sp, r7
 800954e:	bd80      	pop	{r7, pc}
 8009550:	08009231 	.word	0x08009231
 8009554:	08009357 	.word	0x08009357
 8009558:	0800938d 	.word	0x0800938d

0800955c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b089      	sub	sp, #36	@ 0x24
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	60bb      	str	r3, [r7, #8]
   return(result);
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800957a:	61fb      	str	r3, [r7, #28]
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	330c      	adds	r3, #12
 8009582:	69fa      	ldr	r2, [r7, #28]
 8009584:	61ba      	str	r2, [r7, #24]
 8009586:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009588:	6979      	ldr	r1, [r7, #20]
 800958a:	69ba      	ldr	r2, [r7, #24]
 800958c:	e841 2300 	strex	r3, r2, [r1]
 8009590:	613b      	str	r3, [r7, #16]
   return(result);
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d1e5      	bne.n	8009564 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2220      	movs	r2, #32
 800959c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
}
 80095a0:	bf00      	nop
 80095a2:	3724      	adds	r7, #36	@ 0x24
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b095      	sub	sp, #84	@ 0x54
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	330c      	adds	r3, #12
 80095ba:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095be:	e853 3f00 	ldrex	r3, [r3]
 80095c2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80095c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80095c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80095ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80095d4:	643a      	str	r2, [r7, #64]	@ 0x40
 80095d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095d8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80095da:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80095dc:	e841 2300 	strex	r3, r2, [r1]
 80095e0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80095e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d1e5      	bne.n	80095b4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	3314      	adds	r3, #20
 80095ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095f0:	6a3b      	ldr	r3, [r7, #32]
 80095f2:	e853 3f00 	ldrex	r3, [r3]
 80095f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80095f8:	69fb      	ldr	r3, [r7, #28]
 80095fa:	f023 0301 	bic.w	r3, r3, #1
 80095fe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3314      	adds	r3, #20
 8009606:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009608:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800960a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800960c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800960e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009610:	e841 2300 	strex	r3, r2, [r1]
 8009614:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009618:	2b00      	cmp	r3, #0
 800961a:	d1e5      	bne.n	80095e8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009620:	2b01      	cmp	r3, #1
 8009622:	d119      	bne.n	8009658 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	330c      	adds	r3, #12
 800962a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	e853 3f00 	ldrex	r3, [r3]
 8009632:	60bb      	str	r3, [r7, #8]
   return(result);
 8009634:	68bb      	ldr	r3, [r7, #8]
 8009636:	f023 0310 	bic.w	r3, r3, #16
 800963a:	647b      	str	r3, [r7, #68]	@ 0x44
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	330c      	adds	r3, #12
 8009642:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009644:	61ba      	str	r2, [r7, #24]
 8009646:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009648:	6979      	ldr	r1, [r7, #20]
 800964a:	69ba      	ldr	r2, [r7, #24]
 800964c:	e841 2300 	strex	r3, r2, [r1]
 8009650:	613b      	str	r3, [r7, #16]
   return(result);
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d1e5      	bne.n	8009624 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	2220      	movs	r2, #32
 800965c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009666:	bf00      	nop
 8009668:	3754      	adds	r7, #84	@ 0x54
 800966a:	46bd      	mov	sp, r7
 800966c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009670:	4770      	bx	lr

08009672 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009672:	b580      	push	{r7, lr}
 8009674:	b084      	sub	sp, #16
 8009676:	af00      	add	r7, sp, #0
 8009678:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800967e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	2200      	movs	r2, #0
 8009684:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	2200      	movs	r2, #0
 800968a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800968c:	68f8      	ldr	r0, [r7, #12]
 800968e:	f7ff fdc5 	bl	800921c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009692:	bf00      	nop
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800969a:	b480      	push	{r7}
 800969c:	b085      	sub	sp, #20
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b21      	cmp	r3, #33	@ 0x21
 80096ac:	d13e      	bne.n	800972c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80096b6:	d114      	bne.n	80096e2 <UART_Transmit_IT+0x48>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	691b      	ldr	r3, [r3, #16]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d110      	bne.n	80096e2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	881b      	ldrh	r3, [r3, #0]
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80096d4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a1b      	ldr	r3, [r3, #32]
 80096da:	1c9a      	adds	r2, r3, #2
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	621a      	str	r2, [r3, #32]
 80096e0:	e008      	b.n	80096f4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	1c59      	adds	r1, r3, #1
 80096e8:	687a      	ldr	r2, [r7, #4]
 80096ea:	6211      	str	r1, [r2, #32]
 80096ec:	781a      	ldrb	r2, [r3, #0]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80096f8:	b29b      	uxth	r3, r3
 80096fa:	3b01      	subs	r3, #1
 80096fc:	b29b      	uxth	r3, r3
 80096fe:	687a      	ldr	r2, [r7, #4]
 8009700:	4619      	mov	r1, r3
 8009702:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009704:	2b00      	cmp	r3, #0
 8009706:	d10f      	bne.n	8009728 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	68da      	ldr	r2, [r3, #12]
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009716:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	68da      	ldr	r2, [r3, #12]
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009726:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009728:	2300      	movs	r3, #0
 800972a:	e000      	b.n	800972e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800972c:	2302      	movs	r3, #2
  }
}
 800972e:	4618      	mov	r0, r3
 8009730:	3714      	adds	r7, #20
 8009732:	46bd      	mov	sp, r7
 8009734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009738:	4770      	bx	lr

0800973a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800973a:	b580      	push	{r7, lr}
 800973c:	b082      	sub	sp, #8
 800973e:	af00      	add	r7, sp, #0
 8009740:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	68da      	ldr	r2, [r3, #12]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009750:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2220      	movs	r2, #32
 8009756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f7ff fd40 	bl	80091e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009760:	2300      	movs	r3, #0
}
 8009762:	4618      	mov	r0, r3
 8009764:	3708      	adds	r7, #8
 8009766:	46bd      	mov	sp, r7
 8009768:	bd80      	pop	{r7, pc}

0800976a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800976a:	b580      	push	{r7, lr}
 800976c:	b08c      	sub	sp, #48	@ 0x30
 800976e:	af00      	add	r7, sp, #0
 8009770:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8009778:	b2db      	uxtb	r3, r3
 800977a:	2b22      	cmp	r3, #34	@ 0x22
 800977c:	f040 80ab 	bne.w	80098d6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	689b      	ldr	r3, [r3, #8]
 8009784:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009788:	d117      	bne.n	80097ba <UART_Receive_IT+0x50>
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	691b      	ldr	r3, [r3, #16]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d113      	bne.n	80097ba <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8009792:	2300      	movs	r3, #0
 8009794:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800979a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	685b      	ldr	r3, [r3, #4]
 80097a2:	b29b      	uxth	r3, r3
 80097a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80097ac:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097b2:	1c9a      	adds	r2, r3, #2
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80097b8:	e026      	b.n	8009808 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80097be:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80097c0:	2300      	movs	r3, #0
 80097c2:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	689b      	ldr	r3, [r3, #8]
 80097c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80097cc:	d007      	beq.n	80097de <UART_Receive_IT+0x74>
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	689b      	ldr	r3, [r3, #8]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d10a      	bne.n	80097ec <UART_Receive_IT+0x82>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d106      	bne.n	80097ec <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	685b      	ldr	r3, [r3, #4]
 80097e4:	b2da      	uxtb	r2, r3
 80097e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097e8:	701a      	strb	r2, [r3, #0]
 80097ea:	e008      	b.n	80097fe <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80097f8:	b2da      	uxtb	r2, r3
 80097fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80097fc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009802:	1c5a      	adds	r2, r3, #1
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800980c:	b29b      	uxth	r3, r3
 800980e:	3b01      	subs	r3, #1
 8009810:	b29b      	uxth	r3, r3
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	4619      	mov	r1, r3
 8009816:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009818:	2b00      	cmp	r3, #0
 800981a:	d15a      	bne.n	80098d2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	68da      	ldr	r2, [r3, #12]
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	f022 0220 	bic.w	r2, r2, #32
 800982a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	681b      	ldr	r3, [r3, #0]
 8009830:	68da      	ldr	r2, [r3, #12]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800983a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	695a      	ldr	r2, [r3, #20]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f022 0201 	bic.w	r2, r2, #1
 800984a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2220      	movs	r2, #32
 8009850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009858:	2b01      	cmp	r3, #1
 800985a:	d135      	bne.n	80098c8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2200      	movs	r2, #0
 8009860:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	330c      	adds	r3, #12
 8009868:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	e853 3f00 	ldrex	r3, [r3]
 8009870:	613b      	str	r3, [r7, #16]
   return(result);
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	f023 0310 	bic.w	r3, r3, #16
 8009878:	627b      	str	r3, [r7, #36]	@ 0x24
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	330c      	adds	r3, #12
 8009880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009882:	623a      	str	r2, [r7, #32]
 8009884:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009886:	69f9      	ldr	r1, [r7, #28]
 8009888:	6a3a      	ldr	r2, [r7, #32]
 800988a:	e841 2300 	strex	r3, r2, [r1]
 800988e:	61bb      	str	r3, [r7, #24]
   return(result);
 8009890:	69bb      	ldr	r3, [r7, #24]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1e5      	bne.n	8009862 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f003 0310 	and.w	r3, r3, #16
 80098a0:	2b10      	cmp	r3, #16
 80098a2:	d10a      	bne.n	80098ba <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80098a4:	2300      	movs	r3, #0
 80098a6:	60fb      	str	r3, [r7, #12]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	60fb      	str	r3, [r7, #12]
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	685b      	ldr	r3, [r3, #4]
 80098b6:	60fb      	str	r3, [r7, #12]
 80098b8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098be:	4619      	mov	r1, r3
 80098c0:	6878      	ldr	r0, [r7, #4]
 80098c2:	f7f8 fa15 	bl	8001cf0 <HAL_UARTEx_RxEventCallback>
 80098c6:	e002      	b.n	80098ce <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80098c8:	6878      	ldr	r0, [r7, #4]
 80098ca:	f7ff fc93 	bl	80091f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80098ce:	2300      	movs	r3, #0
 80098d0:	e002      	b.n	80098d8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80098d2:	2300      	movs	r3, #0
 80098d4:	e000      	b.n	80098d8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80098d6:	2302      	movs	r3, #2
  }
}
 80098d8:	4618      	mov	r0, r3
 80098da:	3730      	adds	r7, #48	@ 0x30
 80098dc:	46bd      	mov	sp, r7
 80098de:	bd80      	pop	{r7, pc}

080098e0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80098e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80098e4:	b0c0      	sub	sp, #256	@ 0x100
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80098ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	691b      	ldr	r3, [r3, #16]
 80098f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80098f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098fc:	68d9      	ldr	r1, [r3, #12]
 80098fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009902:	681a      	ldr	r2, [r3, #0]
 8009904:	ea40 0301 	orr.w	r3, r0, r1
 8009908:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800990a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800990e:	689a      	ldr	r2, [r3, #8]
 8009910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	431a      	orrs	r2, r3
 8009918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800991c:	695b      	ldr	r3, [r3, #20]
 800991e:	431a      	orrs	r2, r3
 8009920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	4313      	orrs	r3, r2
 8009928:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800992c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	68db      	ldr	r3, [r3, #12]
 8009934:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009938:	f021 010c 	bic.w	r1, r1, #12
 800993c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009940:	681a      	ldr	r2, [r3, #0]
 8009942:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009946:	430b      	orrs	r3, r1
 8009948:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800994a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	695b      	ldr	r3, [r3, #20]
 8009952:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009956:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800995a:	6999      	ldr	r1, [r3, #24]
 800995c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	ea40 0301 	orr.w	r3, r0, r1
 8009966:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009968:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800996c:	681a      	ldr	r2, [r3, #0]
 800996e:	4b8f      	ldr	r3, [pc, #572]	@ (8009bac <UART_SetConfig+0x2cc>)
 8009970:	429a      	cmp	r2, r3
 8009972:	d005      	beq.n	8009980 <UART_SetConfig+0xa0>
 8009974:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	4b8d      	ldr	r3, [pc, #564]	@ (8009bb0 <UART_SetConfig+0x2d0>)
 800997c:	429a      	cmp	r2, r3
 800997e:	d104      	bne.n	800998a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009980:	f7fd fe22 	bl	80075c8 <HAL_RCC_GetPCLK2Freq>
 8009984:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009988:	e003      	b.n	8009992 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800998a:	f7fd fe09 	bl	80075a0 <HAL_RCC_GetPCLK1Freq>
 800998e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009992:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009996:	69db      	ldr	r3, [r3, #28]
 8009998:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800999c:	f040 810c 	bne.w	8009bb8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80099a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80099a4:	2200      	movs	r2, #0
 80099a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80099aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80099ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80099b2:	4622      	mov	r2, r4
 80099b4:	462b      	mov	r3, r5
 80099b6:	1891      	adds	r1, r2, r2
 80099b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80099ba:	415b      	adcs	r3, r3
 80099bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80099be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80099c2:	4621      	mov	r1, r4
 80099c4:	eb12 0801 	adds.w	r8, r2, r1
 80099c8:	4629      	mov	r1, r5
 80099ca:	eb43 0901 	adc.w	r9, r3, r1
 80099ce:	f04f 0200 	mov.w	r2, #0
 80099d2:	f04f 0300 	mov.w	r3, #0
 80099d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80099da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80099de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80099e2:	4690      	mov	r8, r2
 80099e4:	4699      	mov	r9, r3
 80099e6:	4623      	mov	r3, r4
 80099e8:	eb18 0303 	adds.w	r3, r8, r3
 80099ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80099f0:	462b      	mov	r3, r5
 80099f2:	eb49 0303 	adc.w	r3, r9, r3
 80099f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80099fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8009a06:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8009a0a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009a0e:	460b      	mov	r3, r1
 8009a10:	18db      	adds	r3, r3, r3
 8009a12:	653b      	str	r3, [r7, #80]	@ 0x50
 8009a14:	4613      	mov	r3, r2
 8009a16:	eb42 0303 	adc.w	r3, r2, r3
 8009a1a:	657b      	str	r3, [r7, #84]	@ 0x54
 8009a1c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009a20:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009a24:	f7f6 ffca 	bl	80009bc <__aeabi_uldivmod>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	4b61      	ldr	r3, [pc, #388]	@ (8009bb4 <UART_SetConfig+0x2d4>)
 8009a2e:	fba3 2302 	umull	r2, r3, r3, r2
 8009a32:	095b      	lsrs	r3, r3, #5
 8009a34:	011c      	lsls	r4, r3, #4
 8009a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009a40:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009a44:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009a48:	4642      	mov	r2, r8
 8009a4a:	464b      	mov	r3, r9
 8009a4c:	1891      	adds	r1, r2, r2
 8009a4e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009a50:	415b      	adcs	r3, r3
 8009a52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009a54:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009a58:	4641      	mov	r1, r8
 8009a5a:	eb12 0a01 	adds.w	sl, r2, r1
 8009a5e:	4649      	mov	r1, r9
 8009a60:	eb43 0b01 	adc.w	fp, r3, r1
 8009a64:	f04f 0200 	mov.w	r2, #0
 8009a68:	f04f 0300 	mov.w	r3, #0
 8009a6c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009a70:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009a74:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009a78:	4692      	mov	sl, r2
 8009a7a:	469b      	mov	fp, r3
 8009a7c:	4643      	mov	r3, r8
 8009a7e:	eb1a 0303 	adds.w	r3, sl, r3
 8009a82:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009a86:	464b      	mov	r3, r9
 8009a88:	eb4b 0303 	adc.w	r3, fp, r3
 8009a8c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009a94:	685b      	ldr	r3, [r3, #4]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8009a9c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009aa0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009aa4:	460b      	mov	r3, r1
 8009aa6:	18db      	adds	r3, r3, r3
 8009aa8:	643b      	str	r3, [r7, #64]	@ 0x40
 8009aaa:	4613      	mov	r3, r2
 8009aac:	eb42 0303 	adc.w	r3, r2, r3
 8009ab0:	647b      	str	r3, [r7, #68]	@ 0x44
 8009ab2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009ab6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8009aba:	f7f6 ff7f 	bl	80009bc <__aeabi_uldivmod>
 8009abe:	4602      	mov	r2, r0
 8009ac0:	460b      	mov	r3, r1
 8009ac2:	4611      	mov	r1, r2
 8009ac4:	4b3b      	ldr	r3, [pc, #236]	@ (8009bb4 <UART_SetConfig+0x2d4>)
 8009ac6:	fba3 2301 	umull	r2, r3, r3, r1
 8009aca:	095b      	lsrs	r3, r3, #5
 8009acc:	2264      	movs	r2, #100	@ 0x64
 8009ace:	fb02 f303 	mul.w	r3, r2, r3
 8009ad2:	1acb      	subs	r3, r1, r3
 8009ad4:	00db      	lsls	r3, r3, #3
 8009ad6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8009ada:	4b36      	ldr	r3, [pc, #216]	@ (8009bb4 <UART_SetConfig+0x2d4>)
 8009adc:	fba3 2302 	umull	r2, r3, r3, r2
 8009ae0:	095b      	lsrs	r3, r3, #5
 8009ae2:	005b      	lsls	r3, r3, #1
 8009ae4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8009ae8:	441c      	add	r4, r3
 8009aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009aee:	2200      	movs	r2, #0
 8009af0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009af4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8009af8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009afc:	4642      	mov	r2, r8
 8009afe:	464b      	mov	r3, r9
 8009b00:	1891      	adds	r1, r2, r2
 8009b02:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009b04:	415b      	adcs	r3, r3
 8009b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009b08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009b0c:	4641      	mov	r1, r8
 8009b0e:	1851      	adds	r1, r2, r1
 8009b10:	6339      	str	r1, [r7, #48]	@ 0x30
 8009b12:	4649      	mov	r1, r9
 8009b14:	414b      	adcs	r3, r1
 8009b16:	637b      	str	r3, [r7, #52]	@ 0x34
 8009b18:	f04f 0200 	mov.w	r2, #0
 8009b1c:	f04f 0300 	mov.w	r3, #0
 8009b20:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009b24:	4659      	mov	r1, fp
 8009b26:	00cb      	lsls	r3, r1, #3
 8009b28:	4651      	mov	r1, sl
 8009b2a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009b2e:	4651      	mov	r1, sl
 8009b30:	00ca      	lsls	r2, r1, #3
 8009b32:	4610      	mov	r0, r2
 8009b34:	4619      	mov	r1, r3
 8009b36:	4603      	mov	r3, r0
 8009b38:	4642      	mov	r2, r8
 8009b3a:	189b      	adds	r3, r3, r2
 8009b3c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009b40:	464b      	mov	r3, r9
 8009b42:	460a      	mov	r2, r1
 8009b44:	eb42 0303 	adc.w	r3, r2, r3
 8009b48:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009b50:	685b      	ldr	r3, [r3, #4]
 8009b52:	2200      	movs	r2, #0
 8009b54:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009b58:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009b5c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009b60:	460b      	mov	r3, r1
 8009b62:	18db      	adds	r3, r3, r3
 8009b64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009b66:	4613      	mov	r3, r2
 8009b68:	eb42 0303 	adc.w	r3, r2, r3
 8009b6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009b6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009b72:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009b76:	f7f6 ff21 	bl	80009bc <__aeabi_uldivmod>
 8009b7a:	4602      	mov	r2, r0
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8009bb4 <UART_SetConfig+0x2d4>)
 8009b80:	fba3 1302 	umull	r1, r3, r3, r2
 8009b84:	095b      	lsrs	r3, r3, #5
 8009b86:	2164      	movs	r1, #100	@ 0x64
 8009b88:	fb01 f303 	mul.w	r3, r1, r3
 8009b8c:	1ad3      	subs	r3, r2, r3
 8009b8e:	00db      	lsls	r3, r3, #3
 8009b90:	3332      	adds	r3, #50	@ 0x32
 8009b92:	4a08      	ldr	r2, [pc, #32]	@ (8009bb4 <UART_SetConfig+0x2d4>)
 8009b94:	fba2 2303 	umull	r2, r3, r2, r3
 8009b98:	095b      	lsrs	r3, r3, #5
 8009b9a:	f003 0207 	and.w	r2, r3, #7
 8009b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4422      	add	r2, r4
 8009ba6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ba8:	e106      	b.n	8009db8 <UART_SetConfig+0x4d8>
 8009baa:	bf00      	nop
 8009bac:	40011000 	.word	0x40011000
 8009bb0:	40011400 	.word	0x40011400
 8009bb4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009bb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009bbc:	2200      	movs	r2, #0
 8009bbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8009bc2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8009bc6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8009bca:	4642      	mov	r2, r8
 8009bcc:	464b      	mov	r3, r9
 8009bce:	1891      	adds	r1, r2, r2
 8009bd0:	6239      	str	r1, [r7, #32]
 8009bd2:	415b      	adcs	r3, r3
 8009bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bd6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009bda:	4641      	mov	r1, r8
 8009bdc:	1854      	adds	r4, r2, r1
 8009bde:	4649      	mov	r1, r9
 8009be0:	eb43 0501 	adc.w	r5, r3, r1
 8009be4:	f04f 0200 	mov.w	r2, #0
 8009be8:	f04f 0300 	mov.w	r3, #0
 8009bec:	00eb      	lsls	r3, r5, #3
 8009bee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009bf2:	00e2      	lsls	r2, r4, #3
 8009bf4:	4614      	mov	r4, r2
 8009bf6:	461d      	mov	r5, r3
 8009bf8:	4643      	mov	r3, r8
 8009bfa:	18e3      	adds	r3, r4, r3
 8009bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009c00:	464b      	mov	r3, r9
 8009c02:	eb45 0303 	adc.w	r3, r5, r3
 8009c06:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009c0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009c0e:	685b      	ldr	r3, [r3, #4]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009c16:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8009c1a:	f04f 0200 	mov.w	r2, #0
 8009c1e:	f04f 0300 	mov.w	r3, #0
 8009c22:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009c26:	4629      	mov	r1, r5
 8009c28:	008b      	lsls	r3, r1, #2
 8009c2a:	4621      	mov	r1, r4
 8009c2c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009c30:	4621      	mov	r1, r4
 8009c32:	008a      	lsls	r2, r1, #2
 8009c34:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009c38:	f7f6 fec0 	bl	80009bc <__aeabi_uldivmod>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4b60      	ldr	r3, [pc, #384]	@ (8009dc4 <UART_SetConfig+0x4e4>)
 8009c42:	fba3 2302 	umull	r2, r3, r3, r2
 8009c46:	095b      	lsrs	r3, r3, #5
 8009c48:	011c      	lsls	r4, r3, #4
 8009c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009c54:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009c58:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009c5c:	4642      	mov	r2, r8
 8009c5e:	464b      	mov	r3, r9
 8009c60:	1891      	adds	r1, r2, r2
 8009c62:	61b9      	str	r1, [r7, #24]
 8009c64:	415b      	adcs	r3, r3
 8009c66:	61fb      	str	r3, [r7, #28]
 8009c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c6c:	4641      	mov	r1, r8
 8009c6e:	1851      	adds	r1, r2, r1
 8009c70:	6139      	str	r1, [r7, #16]
 8009c72:	4649      	mov	r1, r9
 8009c74:	414b      	adcs	r3, r1
 8009c76:	617b      	str	r3, [r7, #20]
 8009c78:	f04f 0200 	mov.w	r2, #0
 8009c7c:	f04f 0300 	mov.w	r3, #0
 8009c80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009c84:	4659      	mov	r1, fp
 8009c86:	00cb      	lsls	r3, r1, #3
 8009c88:	4651      	mov	r1, sl
 8009c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c8e:	4651      	mov	r1, sl
 8009c90:	00ca      	lsls	r2, r1, #3
 8009c92:	4610      	mov	r0, r2
 8009c94:	4619      	mov	r1, r3
 8009c96:	4603      	mov	r3, r0
 8009c98:	4642      	mov	r2, r8
 8009c9a:	189b      	adds	r3, r3, r2
 8009c9c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009ca0:	464b      	mov	r3, r9
 8009ca2:	460a      	mov	r2, r1
 8009ca4:	eb42 0303 	adc.w	r3, r2, r3
 8009ca8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8009cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009cb0:	685b      	ldr	r3, [r3, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009cb6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009cb8:	f04f 0200 	mov.w	r2, #0
 8009cbc:	f04f 0300 	mov.w	r3, #0
 8009cc0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8009cc4:	4649      	mov	r1, r9
 8009cc6:	008b      	lsls	r3, r1, #2
 8009cc8:	4641      	mov	r1, r8
 8009cca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009cce:	4641      	mov	r1, r8
 8009cd0:	008a      	lsls	r2, r1, #2
 8009cd2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8009cd6:	f7f6 fe71 	bl	80009bc <__aeabi_uldivmod>
 8009cda:	4602      	mov	r2, r0
 8009cdc:	460b      	mov	r3, r1
 8009cde:	4611      	mov	r1, r2
 8009ce0:	4b38      	ldr	r3, [pc, #224]	@ (8009dc4 <UART_SetConfig+0x4e4>)
 8009ce2:	fba3 2301 	umull	r2, r3, r3, r1
 8009ce6:	095b      	lsrs	r3, r3, #5
 8009ce8:	2264      	movs	r2, #100	@ 0x64
 8009cea:	fb02 f303 	mul.w	r3, r2, r3
 8009cee:	1acb      	subs	r3, r1, r3
 8009cf0:	011b      	lsls	r3, r3, #4
 8009cf2:	3332      	adds	r3, #50	@ 0x32
 8009cf4:	4a33      	ldr	r2, [pc, #204]	@ (8009dc4 <UART_SetConfig+0x4e4>)
 8009cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8009cfa:	095b      	lsrs	r3, r3, #5
 8009cfc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009d00:	441c      	add	r4, r3
 8009d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009d06:	2200      	movs	r2, #0
 8009d08:	673b      	str	r3, [r7, #112]	@ 0x70
 8009d0a:	677a      	str	r2, [r7, #116]	@ 0x74
 8009d0c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009d10:	4642      	mov	r2, r8
 8009d12:	464b      	mov	r3, r9
 8009d14:	1891      	adds	r1, r2, r2
 8009d16:	60b9      	str	r1, [r7, #8]
 8009d18:	415b      	adcs	r3, r3
 8009d1a:	60fb      	str	r3, [r7, #12]
 8009d1c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d20:	4641      	mov	r1, r8
 8009d22:	1851      	adds	r1, r2, r1
 8009d24:	6039      	str	r1, [r7, #0]
 8009d26:	4649      	mov	r1, r9
 8009d28:	414b      	adcs	r3, r1
 8009d2a:	607b      	str	r3, [r7, #4]
 8009d2c:	f04f 0200 	mov.w	r2, #0
 8009d30:	f04f 0300 	mov.w	r3, #0
 8009d34:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009d38:	4659      	mov	r1, fp
 8009d3a:	00cb      	lsls	r3, r1, #3
 8009d3c:	4651      	mov	r1, sl
 8009d3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d42:	4651      	mov	r1, sl
 8009d44:	00ca      	lsls	r2, r1, #3
 8009d46:	4610      	mov	r0, r2
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4603      	mov	r3, r0
 8009d4c:	4642      	mov	r2, r8
 8009d4e:	189b      	adds	r3, r3, r2
 8009d50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009d52:	464b      	mov	r3, r9
 8009d54:	460a      	mov	r2, r1
 8009d56:	eb42 0303 	adc.w	r3, r2, r3
 8009d5a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2200      	movs	r2, #0
 8009d64:	663b      	str	r3, [r7, #96]	@ 0x60
 8009d66:	667a      	str	r2, [r7, #100]	@ 0x64
 8009d68:	f04f 0200 	mov.w	r2, #0
 8009d6c:	f04f 0300 	mov.w	r3, #0
 8009d70:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009d74:	4649      	mov	r1, r9
 8009d76:	008b      	lsls	r3, r1, #2
 8009d78:	4641      	mov	r1, r8
 8009d7a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d7e:	4641      	mov	r1, r8
 8009d80:	008a      	lsls	r2, r1, #2
 8009d82:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009d86:	f7f6 fe19 	bl	80009bc <__aeabi_uldivmod>
 8009d8a:	4602      	mov	r2, r0
 8009d8c:	460b      	mov	r3, r1
 8009d8e:	4b0d      	ldr	r3, [pc, #52]	@ (8009dc4 <UART_SetConfig+0x4e4>)
 8009d90:	fba3 1302 	umull	r1, r3, r3, r2
 8009d94:	095b      	lsrs	r3, r3, #5
 8009d96:	2164      	movs	r1, #100	@ 0x64
 8009d98:	fb01 f303 	mul.w	r3, r1, r3
 8009d9c:	1ad3      	subs	r3, r2, r3
 8009d9e:	011b      	lsls	r3, r3, #4
 8009da0:	3332      	adds	r3, #50	@ 0x32
 8009da2:	4a08      	ldr	r2, [pc, #32]	@ (8009dc4 <UART_SetConfig+0x4e4>)
 8009da4:	fba2 2303 	umull	r2, r3, r2, r3
 8009da8:	095b      	lsrs	r3, r3, #5
 8009daa:	f003 020f 	and.w	r2, r3, #15
 8009dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4422      	add	r2, r4
 8009db6:	609a      	str	r2, [r3, #8]
}
 8009db8:	bf00      	nop
 8009dba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8009dbe:	46bd      	mov	sp, r7
 8009dc0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009dc4:	51eb851f 	.word	0x51eb851f

08009dc8 <__NVIC_SetPriority>:
{
 8009dc8:	b480      	push	{r7}
 8009dca:	b083      	sub	sp, #12
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	4603      	mov	r3, r0
 8009dd0:	6039      	str	r1, [r7, #0]
 8009dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	db0a      	blt.n	8009df2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	b2da      	uxtb	r2, r3
 8009de0:	490c      	ldr	r1, [pc, #48]	@ (8009e14 <__NVIC_SetPriority+0x4c>)
 8009de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009de6:	0112      	lsls	r2, r2, #4
 8009de8:	b2d2      	uxtb	r2, r2
 8009dea:	440b      	add	r3, r1
 8009dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009df0:	e00a      	b.n	8009e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	b2da      	uxtb	r2, r3
 8009df6:	4908      	ldr	r1, [pc, #32]	@ (8009e18 <__NVIC_SetPriority+0x50>)
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	f003 030f 	and.w	r3, r3, #15
 8009dfe:	3b04      	subs	r3, #4
 8009e00:	0112      	lsls	r2, r2, #4
 8009e02:	b2d2      	uxtb	r2, r2
 8009e04:	440b      	add	r3, r1
 8009e06:	761a      	strb	r2, [r3, #24]
}
 8009e08:	bf00      	nop
 8009e0a:	370c      	adds	r7, #12
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e12:	4770      	bx	lr
 8009e14:	e000e100 	.word	0xe000e100
 8009e18:	e000ed00 	.word	0xe000ed00

08009e1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e1c:	b580      	push	{r7, lr}
 8009e1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e20:	2100      	movs	r1, #0
 8009e22:	f06f 0004 	mvn.w	r0, #4
 8009e26:	f7ff ffcf 	bl	8009dc8 <__NVIC_SetPriority>
#endif
}
 8009e2a:	bf00      	nop
 8009e2c:	bd80      	pop	{r7, pc}
	...

08009e30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e30:	b480      	push	{r7}
 8009e32:	b083      	sub	sp, #12
 8009e34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e36:	f3ef 8305 	mrs	r3, IPSR
 8009e3a:	603b      	str	r3, [r7, #0]
  return(result);
 8009e3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d003      	beq.n	8009e4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e42:	f06f 0305 	mvn.w	r3, #5
 8009e46:	607b      	str	r3, [r7, #4]
 8009e48:	e00c      	b.n	8009e64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8009e74 <osKernelInitialize+0x44>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d105      	bne.n	8009e5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009e52:	4b08      	ldr	r3, [pc, #32]	@ (8009e74 <osKernelInitialize+0x44>)
 8009e54:	2201      	movs	r2, #1
 8009e56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009e58:	2300      	movs	r3, #0
 8009e5a:	607b      	str	r3, [r7, #4]
 8009e5c:	e002      	b.n	8009e64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009e62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009e64:	687b      	ldr	r3, [r7, #4]
}
 8009e66:	4618      	mov	r0, r3
 8009e68:	370c      	adds	r7, #12
 8009e6a:	46bd      	mov	sp, r7
 8009e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e70:	4770      	bx	lr
 8009e72:	bf00      	nop
 8009e74:	20000b4c 	.word	0x20000b4c

08009e78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b082      	sub	sp, #8
 8009e7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e7e:	f3ef 8305 	mrs	r3, IPSR
 8009e82:	603b      	str	r3, [r7, #0]
  return(result);
 8009e84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d003      	beq.n	8009e92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009e8a:	f06f 0305 	mvn.w	r3, #5
 8009e8e:	607b      	str	r3, [r7, #4]
 8009e90:	e010      	b.n	8009eb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009e92:	4b0b      	ldr	r3, [pc, #44]	@ (8009ec0 <osKernelStart+0x48>)
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d109      	bne.n	8009eae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009e9a:	f7ff ffbf 	bl	8009e1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009e9e:	4b08      	ldr	r3, [pc, #32]	@ (8009ec0 <osKernelStart+0x48>)
 8009ea0:	2202      	movs	r2, #2
 8009ea2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ea4:	f001 f892 	bl	800afcc <vTaskStartScheduler>
      stat = osOK;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	607b      	str	r3, [r7, #4]
 8009eac:	e002      	b.n	8009eb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009eae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009eb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009eb4:	687b      	ldr	r3, [r7, #4]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3708      	adds	r7, #8
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}
 8009ebe:	bf00      	nop
 8009ec0:	20000b4c 	.word	0x20000b4c

08009ec4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b08e      	sub	sp, #56	@ 0x38
 8009ec8:	af04      	add	r7, sp, #16
 8009eca:	60f8      	str	r0, [r7, #12]
 8009ecc:	60b9      	str	r1, [r7, #8]
 8009ece:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ed4:	f3ef 8305 	mrs	r3, IPSR
 8009ed8:	617b      	str	r3, [r7, #20]
  return(result);
 8009eda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d17e      	bne.n	8009fde <osThreadNew+0x11a>
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d07b      	beq.n	8009fde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009ee6:	2380      	movs	r3, #128	@ 0x80
 8009ee8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009eea:	2318      	movs	r3, #24
 8009eec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009eee:	2300      	movs	r3, #0
 8009ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009ef6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d045      	beq.n	8009f8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d002      	beq.n	8009f0c <osThreadNew+0x48>
        name = attr->name;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	699b      	ldr	r3, [r3, #24]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d002      	beq.n	8009f1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	699b      	ldr	r3, [r3, #24]
 8009f18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f1a:	69fb      	ldr	r3, [r7, #28]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d008      	beq.n	8009f32 <osThreadNew+0x6e>
 8009f20:	69fb      	ldr	r3, [r7, #28]
 8009f22:	2b38      	cmp	r3, #56	@ 0x38
 8009f24:	d805      	bhi.n	8009f32 <osThreadNew+0x6e>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d001      	beq.n	8009f36 <osThreadNew+0x72>
        return (NULL);
 8009f32:	2300      	movs	r3, #0
 8009f34:	e054      	b.n	8009fe0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	695b      	ldr	r3, [r3, #20]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d003      	beq.n	8009f46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	695b      	ldr	r3, [r3, #20]
 8009f42:	089b      	lsrs	r3, r3, #2
 8009f44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d00e      	beq.n	8009f6c <osThreadNew+0xa8>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68db      	ldr	r3, [r3, #12]
 8009f52:	2ba7      	cmp	r3, #167	@ 0xa7
 8009f54:	d90a      	bls.n	8009f6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d006      	beq.n	8009f6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	695b      	ldr	r3, [r3, #20]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d002      	beq.n	8009f6c <osThreadNew+0xa8>
        mem = 1;
 8009f66:	2301      	movs	r3, #1
 8009f68:	61bb      	str	r3, [r7, #24]
 8009f6a:	e010      	b.n	8009f8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	689b      	ldr	r3, [r3, #8]
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d10c      	bne.n	8009f8e <osThreadNew+0xca>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	68db      	ldr	r3, [r3, #12]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d108      	bne.n	8009f8e <osThreadNew+0xca>
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	691b      	ldr	r3, [r3, #16]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	d104      	bne.n	8009f8e <osThreadNew+0xca>
          mem = 0;
 8009f84:	2300      	movs	r3, #0
 8009f86:	61bb      	str	r3, [r7, #24]
 8009f88:	e001      	b.n	8009f8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009f8e:	69bb      	ldr	r3, [r7, #24]
 8009f90:	2b01      	cmp	r3, #1
 8009f92:	d110      	bne.n	8009fb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009f9c:	9202      	str	r2, [sp, #8]
 8009f9e:	9301      	str	r3, [sp, #4]
 8009fa0:	69fb      	ldr	r3, [r7, #28]
 8009fa2:	9300      	str	r3, [sp, #0]
 8009fa4:	68bb      	ldr	r3, [r7, #8]
 8009fa6:	6a3a      	ldr	r2, [r7, #32]
 8009fa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f000 fe1a 	bl	800abe4 <xTaskCreateStatic>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	613b      	str	r3, [r7, #16]
 8009fb4:	e013      	b.n	8009fde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009fb6:	69bb      	ldr	r3, [r7, #24]
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d110      	bne.n	8009fde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009fbc:	6a3b      	ldr	r3, [r7, #32]
 8009fbe:	b29a      	uxth	r2, r3
 8009fc0:	f107 0310 	add.w	r3, r7, #16
 8009fc4:	9301      	str	r3, [sp, #4]
 8009fc6:	69fb      	ldr	r3, [r7, #28]
 8009fc8:	9300      	str	r3, [sp, #0]
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009fce:	68f8      	ldr	r0, [r7, #12]
 8009fd0:	f000 fe68 	bl	800aca4 <xTaskCreate>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d001      	beq.n	8009fde <osThreadNew+0x11a>
            hTask = NULL;
 8009fda:	2300      	movs	r3, #0
 8009fdc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009fde:	693b      	ldr	r3, [r7, #16]
}
 8009fe0:	4618      	mov	r0, r3
 8009fe2:	3728      	adds	r7, #40	@ 0x28
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	bd80      	pop	{r7, pc}

08009fe8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009fe8:	b580      	push	{r7, lr}
 8009fea:	b084      	sub	sp, #16
 8009fec:	af00      	add	r7, sp, #0
 8009fee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ff0:	f3ef 8305 	mrs	r3, IPSR
 8009ff4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009ff6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d003      	beq.n	800a004 <osDelay+0x1c>
    stat = osErrorISR;
 8009ffc:	f06f 0305 	mvn.w	r3, #5
 800a000:	60fb      	str	r3, [r7, #12]
 800a002:	e007      	b.n	800a014 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a004:	2300      	movs	r3, #0
 800a006:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d002      	beq.n	800a014 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 ffa6 	bl	800af60 <vTaskDelay>
    }
  }

  return (stat);
 800a014:	68fb      	ldr	r3, [r7, #12]
}
 800a016:	4618      	mov	r0, r3
 800a018:	3710      	adds	r7, #16
 800a01a:	46bd      	mov	sp, r7
 800a01c:	bd80      	pop	{r7, pc}
	...

0800a020 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	60f8      	str	r0, [r7, #12]
 800a028:	60b9      	str	r1, [r7, #8]
 800a02a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	4a07      	ldr	r2, [pc, #28]	@ (800a04c <vApplicationGetIdleTaskMemory+0x2c>)
 800a030:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	4a06      	ldr	r2, [pc, #24]	@ (800a050 <vApplicationGetIdleTaskMemory+0x30>)
 800a036:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	2280      	movs	r2, #128	@ 0x80
 800a03c:	601a      	str	r2, [r3, #0]
}
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a048:	4770      	bx	lr
 800a04a:	bf00      	nop
 800a04c:	20000b50 	.word	0x20000b50
 800a050:	20000bf8 	.word	0x20000bf8

0800a054 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a054:	b480      	push	{r7}
 800a056:	b085      	sub	sp, #20
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	60b9      	str	r1, [r7, #8]
 800a05e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	4a07      	ldr	r2, [pc, #28]	@ (800a080 <vApplicationGetTimerTaskMemory+0x2c>)
 800a064:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a066:	68bb      	ldr	r3, [r7, #8]
 800a068:	4a06      	ldr	r2, [pc, #24]	@ (800a084 <vApplicationGetTimerTaskMemory+0x30>)
 800a06a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a072:	601a      	str	r2, [r3, #0]
}
 800a074:	bf00      	nop
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	20000df8 	.word	0x20000df8
 800a084:	20000ea0 	.word	0x20000ea0

0800a088 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a088:	b480      	push	{r7}
 800a08a:	b083      	sub	sp, #12
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	f103 0208 	add.w	r2, r3, #8
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a0a0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	f103 0208 	add.w	r2, r3, #8
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	f103 0208 	add.w	r2, r3, #8
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a0bc:	bf00      	nop
 800a0be:	370c      	adds	r7, #12
 800a0c0:	46bd      	mov	sp, r7
 800a0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c6:	4770      	bx	lr

0800a0c8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a0c8:	b480      	push	{r7}
 800a0ca:	b083      	sub	sp, #12
 800a0cc:	af00      	add	r7, sp, #0
 800a0ce:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a0d6:	bf00      	nop
 800a0d8:	370c      	adds	r7, #12
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr

0800a0e2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a0e2:	b480      	push	{r7}
 800a0e4:	b085      	sub	sp, #20
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	685b      	ldr	r3, [r3, #4]
 800a0f0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	68fa      	ldr	r2, [r7, #12]
 800a0f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689a      	ldr	r2, [r3, #8]
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	689b      	ldr	r3, [r3, #8]
 800a104:	683a      	ldr	r2, [r7, #0]
 800a106:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	683a      	ldr	r2, [r7, #0]
 800a10c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	687a      	ldr	r2, [r7, #4]
 800a112:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	1c5a      	adds	r2, r3, #1
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	601a      	str	r2, [r3, #0]
}
 800a11e:	bf00      	nop
 800a120:	3714      	adds	r7, #20
 800a122:	46bd      	mov	sp, r7
 800a124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a128:	4770      	bx	lr

0800a12a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a12a:	b480      	push	{r7}
 800a12c:	b085      	sub	sp, #20
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a140:	d103      	bne.n	800a14a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	691b      	ldr	r3, [r3, #16]
 800a146:	60fb      	str	r3, [r7, #12]
 800a148:	e00c      	b.n	800a164 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	3308      	adds	r3, #8
 800a14e:	60fb      	str	r3, [r7, #12]
 800a150:	e002      	b.n	800a158 <vListInsert+0x2e>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	60fb      	str	r3, [r7, #12]
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	429a      	cmp	r2, r3
 800a162:	d2f6      	bcs.n	800a152 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	685a      	ldr	r2, [r3, #4]
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	683a      	ldr	r2, [r7, #0]
 800a172:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a174:	683b      	ldr	r3, [r7, #0]
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	683a      	ldr	r2, [r7, #0]
 800a17e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	687a      	ldr	r2, [r7, #4]
 800a184:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	1c5a      	adds	r2, r3, #1
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	601a      	str	r2, [r3, #0]
}
 800a190:	bf00      	nop
 800a192:	3714      	adds	r7, #20
 800a194:	46bd      	mov	sp, r7
 800a196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19a:	4770      	bx	lr

0800a19c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a19c:	b480      	push	{r7}
 800a19e:	b085      	sub	sp, #20
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	691b      	ldr	r3, [r3, #16]
 800a1a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	685b      	ldr	r3, [r3, #4]
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	6892      	ldr	r2, [r2, #8]
 800a1b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	689b      	ldr	r3, [r3, #8]
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	6852      	ldr	r2, [r2, #4]
 800a1bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	687a      	ldr	r2, [r7, #4]
 800a1c4:	429a      	cmp	r2, r3
 800a1c6:	d103      	bne.n	800a1d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	689a      	ldr	r2, [r3, #8]
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	2200      	movs	r2, #0
 800a1d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	1e5a      	subs	r2, r3, #1
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
}
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	3714      	adds	r7, #20
 800a1e8:	46bd      	mov	sp, r7
 800a1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ee:	4770      	bx	lr

0800a1f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a1f0:	b580      	push	{r7, lr}
 800a1f2:	b084      	sub	sp, #16
 800a1f4:	af00      	add	r7, sp, #0
 800a1f6:	6078      	str	r0, [r7, #4]
 800a1f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2b00      	cmp	r3, #0
 800a202:	d10b      	bne.n	800a21c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a204:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a208:	f383 8811 	msr	BASEPRI, r3
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	f3bf 8f4f 	dsb	sy
 800a214:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a216:	bf00      	nop
 800a218:	bf00      	nop
 800a21a:	e7fd      	b.n	800a218 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a21c:	f002 fa84 	bl	800c728 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a228:	68f9      	ldr	r1, [r7, #12]
 800a22a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a22c:	fb01 f303 	mul.w	r3, r1, r3
 800a230:	441a      	add	r2, r3
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681a      	ldr	r2, [r3, #0]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a24c:	3b01      	subs	r3, #1
 800a24e:	68f9      	ldr	r1, [r7, #12]
 800a250:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a252:	fb01 f303 	mul.w	r3, r1, r3
 800a256:	441a      	add	r2, r3
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	22ff      	movs	r2, #255	@ 0xff
 800a260:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	22ff      	movs	r2, #255	@ 0xff
 800a268:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d114      	bne.n	800a29c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	691b      	ldr	r3, [r3, #16]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d01a      	beq.n	800a2b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	3310      	adds	r3, #16
 800a27e:	4618      	mov	r0, r3
 800a280:	f001 fa3c 	bl	800b6fc <xTaskRemoveFromEventList>
 800a284:	4603      	mov	r3, r0
 800a286:	2b00      	cmp	r3, #0
 800a288:	d012      	beq.n	800a2b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a28a:	4b0d      	ldr	r3, [pc, #52]	@ (800a2c0 <xQueueGenericReset+0xd0>)
 800a28c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a290:	601a      	str	r2, [r3, #0]
 800a292:	f3bf 8f4f 	dsb	sy
 800a296:	f3bf 8f6f 	isb	sy
 800a29a:	e009      	b.n	800a2b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	3310      	adds	r3, #16
 800a2a0:	4618      	mov	r0, r3
 800a2a2:	f7ff fef1 	bl	800a088 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	3324      	adds	r3, #36	@ 0x24
 800a2aa:	4618      	mov	r0, r3
 800a2ac:	f7ff feec 	bl	800a088 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a2b0:	f002 fa6c 	bl	800c78c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a2b4:	2301      	movs	r3, #1
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	3710      	adds	r7, #16
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	bd80      	pop	{r7, pc}
 800a2be:	bf00      	nop
 800a2c0:	e000ed04 	.word	0xe000ed04

0800a2c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a2c4:	b580      	push	{r7, lr}
 800a2c6:	b08e      	sub	sp, #56	@ 0x38
 800a2c8:	af02      	add	r7, sp, #8
 800a2ca:	60f8      	str	r0, [r7, #12]
 800a2cc:	60b9      	str	r1, [r7, #8]
 800a2ce:	607a      	str	r2, [r7, #4]
 800a2d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d10b      	bne.n	800a2f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a2d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2dc:	f383 8811 	msr	BASEPRI, r3
 800a2e0:	f3bf 8f6f 	isb	sy
 800a2e4:	f3bf 8f4f 	dsb	sy
 800a2e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a2ea:	bf00      	nop
 800a2ec:	bf00      	nop
 800a2ee:	e7fd      	b.n	800a2ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10b      	bne.n	800a30e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2fa:	f383 8811 	msr	BASEPRI, r3
 800a2fe:	f3bf 8f6f 	isb	sy
 800a302:	f3bf 8f4f 	dsb	sy
 800a306:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a308:	bf00      	nop
 800a30a:	bf00      	nop
 800a30c:	e7fd      	b.n	800a30a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <xQueueGenericCreateStatic+0x56>
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d001      	beq.n	800a31e <xQueueGenericCreateStatic+0x5a>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e000      	b.n	800a320 <xQueueGenericCreateStatic+0x5c>
 800a31e:	2300      	movs	r3, #0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d10b      	bne.n	800a33c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a328:	f383 8811 	msr	BASEPRI, r3
 800a32c:	f3bf 8f6f 	isb	sy
 800a330:	f3bf 8f4f 	dsb	sy
 800a334:	623b      	str	r3, [r7, #32]
}
 800a336:	bf00      	nop
 800a338:	bf00      	nop
 800a33a:	e7fd      	b.n	800a338 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d102      	bne.n	800a348 <xQueueGenericCreateStatic+0x84>
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d101      	bne.n	800a34c <xQueueGenericCreateStatic+0x88>
 800a348:	2301      	movs	r3, #1
 800a34a:	e000      	b.n	800a34e <xQueueGenericCreateStatic+0x8a>
 800a34c:	2300      	movs	r3, #0
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d10b      	bne.n	800a36a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a352:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a356:	f383 8811 	msr	BASEPRI, r3
 800a35a:	f3bf 8f6f 	isb	sy
 800a35e:	f3bf 8f4f 	dsb	sy
 800a362:	61fb      	str	r3, [r7, #28]
}
 800a364:	bf00      	nop
 800a366:	bf00      	nop
 800a368:	e7fd      	b.n	800a366 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a36a:	2350      	movs	r3, #80	@ 0x50
 800a36c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a36e:	697b      	ldr	r3, [r7, #20]
 800a370:	2b50      	cmp	r3, #80	@ 0x50
 800a372:	d00b      	beq.n	800a38c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a378:	f383 8811 	msr	BASEPRI, r3
 800a37c:	f3bf 8f6f 	isb	sy
 800a380:	f3bf 8f4f 	dsb	sy
 800a384:	61bb      	str	r3, [r7, #24]
}
 800a386:	bf00      	nop
 800a388:	bf00      	nop
 800a38a:	e7fd      	b.n	800a388 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a38c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a394:	2b00      	cmp	r3, #0
 800a396:	d00d      	beq.n	800a3b4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a39a:	2201      	movs	r2, #1
 800a39c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a3a0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a3a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a3a6:	9300      	str	r3, [sp, #0]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	687a      	ldr	r2, [r7, #4]
 800a3ac:	68b9      	ldr	r1, [r7, #8]
 800a3ae:	68f8      	ldr	r0, [r7, #12]
 800a3b0:	f000 f805 	bl	800a3be <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a3b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	3730      	adds	r7, #48	@ 0x30
 800a3ba:	46bd      	mov	sp, r7
 800a3bc:	bd80      	pop	{r7, pc}

0800a3be <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a3be:	b580      	push	{r7, lr}
 800a3c0:	b084      	sub	sp, #16
 800a3c2:	af00      	add	r7, sp, #0
 800a3c4:	60f8      	str	r0, [r7, #12]
 800a3c6:	60b9      	str	r1, [r7, #8]
 800a3c8:	607a      	str	r2, [r7, #4]
 800a3ca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	2b00      	cmp	r3, #0
 800a3d0:	d103      	bne.n	800a3da <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a3d2:	69bb      	ldr	r3, [r7, #24]
 800a3d4:	69ba      	ldr	r2, [r7, #24]
 800a3d6:	601a      	str	r2, [r3, #0]
 800a3d8:	e002      	b.n	800a3e0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a3da:	69bb      	ldr	r3, [r7, #24]
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a3e6:	69bb      	ldr	r3, [r7, #24]
 800a3e8:	68ba      	ldr	r2, [r7, #8]
 800a3ea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a3ec:	2101      	movs	r1, #1
 800a3ee:	69b8      	ldr	r0, [r7, #24]
 800a3f0:	f7ff fefe 	bl	800a1f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a3f4:	69bb      	ldr	r3, [r7, #24]
 800a3f6:	78fa      	ldrb	r2, [r7, #3]
 800a3f8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a3fc:	bf00      	nop
 800a3fe:	3710      	adds	r7, #16
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}

0800a404 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a404:	b580      	push	{r7, lr}
 800a406:	b08e      	sub	sp, #56	@ 0x38
 800a408:	af00      	add	r7, sp, #0
 800a40a:	60f8      	str	r0, [r7, #12]
 800a40c:	60b9      	str	r1, [r7, #8]
 800a40e:	607a      	str	r2, [r7, #4]
 800a410:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a412:	2300      	movs	r3, #0
 800a414:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d10b      	bne.n	800a438 <xQueueGenericSend+0x34>
	__asm volatile
 800a420:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a424:	f383 8811 	msr	BASEPRI, r3
 800a428:	f3bf 8f6f 	isb	sy
 800a42c:	f3bf 8f4f 	dsb	sy
 800a430:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a432:	bf00      	nop
 800a434:	bf00      	nop
 800a436:	e7fd      	b.n	800a434 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d103      	bne.n	800a446 <xQueueGenericSend+0x42>
 800a43e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a440:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a442:	2b00      	cmp	r3, #0
 800a444:	d101      	bne.n	800a44a <xQueueGenericSend+0x46>
 800a446:	2301      	movs	r3, #1
 800a448:	e000      	b.n	800a44c <xQueueGenericSend+0x48>
 800a44a:	2300      	movs	r3, #0
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10b      	bne.n	800a468 <xQueueGenericSend+0x64>
	__asm volatile
 800a450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a454:	f383 8811 	msr	BASEPRI, r3
 800a458:	f3bf 8f6f 	isb	sy
 800a45c:	f3bf 8f4f 	dsb	sy
 800a460:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a462:	bf00      	nop
 800a464:	bf00      	nop
 800a466:	e7fd      	b.n	800a464 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a468:	683b      	ldr	r3, [r7, #0]
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d103      	bne.n	800a476 <xQueueGenericSend+0x72>
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a472:	2b01      	cmp	r3, #1
 800a474:	d101      	bne.n	800a47a <xQueueGenericSend+0x76>
 800a476:	2301      	movs	r3, #1
 800a478:	e000      	b.n	800a47c <xQueueGenericSend+0x78>
 800a47a:	2300      	movs	r3, #0
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10b      	bne.n	800a498 <xQueueGenericSend+0x94>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	623b      	str	r3, [r7, #32]
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a498:	f001 faf6 	bl	800ba88 <xTaskGetSchedulerState>
 800a49c:	4603      	mov	r3, r0
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	d102      	bne.n	800a4a8 <xQueueGenericSend+0xa4>
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d101      	bne.n	800a4ac <xQueueGenericSend+0xa8>
 800a4a8:	2301      	movs	r3, #1
 800a4aa:	e000      	b.n	800a4ae <xQueueGenericSend+0xaa>
 800a4ac:	2300      	movs	r3, #0
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d10b      	bne.n	800a4ca <xQueueGenericSend+0xc6>
	__asm volatile
 800a4b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b6:	f383 8811 	msr	BASEPRI, r3
 800a4ba:	f3bf 8f6f 	isb	sy
 800a4be:	f3bf 8f4f 	dsb	sy
 800a4c2:	61fb      	str	r3, [r7, #28]
}
 800a4c4:	bf00      	nop
 800a4c6:	bf00      	nop
 800a4c8:	e7fd      	b.n	800a4c6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4ca:	f002 f92d 	bl	800c728 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a4d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d6:	429a      	cmp	r2, r3
 800a4d8:	d302      	bcc.n	800a4e0 <xQueueGenericSend+0xdc>
 800a4da:	683b      	ldr	r3, [r7, #0]
 800a4dc:	2b02      	cmp	r3, #2
 800a4de:	d129      	bne.n	800a534 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	68b9      	ldr	r1, [r7, #8]
 800a4e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a4e6:	f000 fa0f 	bl	800a908 <prvCopyDataToQueue>
 800a4ea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a4ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d010      	beq.n	800a516 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a4f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4f6:	3324      	adds	r3, #36	@ 0x24
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	f001 f8ff 	bl	800b6fc <xTaskRemoveFromEventList>
 800a4fe:	4603      	mov	r3, r0
 800a500:	2b00      	cmp	r3, #0
 800a502:	d013      	beq.n	800a52c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a504:	4b3f      	ldr	r3, [pc, #252]	@ (800a604 <xQueueGenericSend+0x200>)
 800a506:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	f3bf 8f6f 	isb	sy
 800a514:	e00a      	b.n	800a52c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d007      	beq.n	800a52c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a51c:	4b39      	ldr	r3, [pc, #228]	@ (800a604 <xQueueGenericSend+0x200>)
 800a51e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	f3bf 8f4f 	dsb	sy
 800a528:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a52c:	f002 f92e 	bl	800c78c <vPortExitCritical>
				return pdPASS;
 800a530:	2301      	movs	r3, #1
 800a532:	e063      	b.n	800a5fc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d103      	bne.n	800a542 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a53a:	f002 f927 	bl	800c78c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a53e:	2300      	movs	r3, #0
 800a540:	e05c      	b.n	800a5fc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a542:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a544:	2b00      	cmp	r3, #0
 800a546:	d106      	bne.n	800a556 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a548:	f107 0314 	add.w	r3, r7, #20
 800a54c:	4618      	mov	r0, r3
 800a54e:	f001 f939 	bl	800b7c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a552:	2301      	movs	r3, #1
 800a554:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a556:	f002 f919 	bl	800c78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a55a:	f000 fda7 	bl	800b0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a55e:	f002 f8e3 	bl	800c728 <vPortEnterCritical>
 800a562:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a564:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a568:	b25b      	sxtb	r3, r3
 800a56a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a56e:	d103      	bne.n	800a578 <xQueueGenericSend+0x174>
 800a570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a572:	2200      	movs	r2, #0
 800a574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a57a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a57e:	b25b      	sxtb	r3, r3
 800a580:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a584:	d103      	bne.n	800a58e <xQueueGenericSend+0x18a>
 800a586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a588:	2200      	movs	r2, #0
 800a58a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a58e:	f002 f8fd 	bl	800c78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a592:	1d3a      	adds	r2, r7, #4
 800a594:	f107 0314 	add.w	r3, r7, #20
 800a598:	4611      	mov	r1, r2
 800a59a:	4618      	mov	r0, r3
 800a59c:	f001 f928 	bl	800b7f0 <xTaskCheckForTimeOut>
 800a5a0:	4603      	mov	r3, r0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d124      	bne.n	800a5f0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a5a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5a8:	f000 faa6 	bl	800aaf8 <prvIsQueueFull>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d018      	beq.n	800a5e4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	3310      	adds	r3, #16
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	4611      	mov	r1, r2
 800a5ba:	4618      	mov	r0, r3
 800a5bc:	f001 f84c 	bl	800b658 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a5c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5c2:	f000 fa31 	bl	800aa28 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a5c6:	f000 fd7f 	bl	800b0c8 <xTaskResumeAll>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f47f af7c 	bne.w	800a4ca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a5d2:	4b0c      	ldr	r3, [pc, #48]	@ (800a604 <xQueueGenericSend+0x200>)
 800a5d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a5d8:	601a      	str	r2, [r3, #0]
 800a5da:	f3bf 8f4f 	dsb	sy
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	e772      	b.n	800a4ca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a5e4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5e6:	f000 fa1f 	bl	800aa28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5ea:	f000 fd6d 	bl	800b0c8 <xTaskResumeAll>
 800a5ee:	e76c      	b.n	800a4ca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a5f0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a5f2:	f000 fa19 	bl	800aa28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5f6:	f000 fd67 	bl	800b0c8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a5fa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a5fc:	4618      	mov	r0, r3
 800a5fe:	3738      	adds	r7, #56	@ 0x38
 800a600:	46bd      	mov	sp, r7
 800a602:	bd80      	pop	{r7, pc}
 800a604:	e000ed04 	.word	0xe000ed04

0800a608 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b090      	sub	sp, #64	@ 0x40
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	607a      	str	r2, [r7, #4]
 800a614:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a61a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d10b      	bne.n	800a638 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a624:	f383 8811 	msr	BASEPRI, r3
 800a628:	f3bf 8f6f 	isb	sy
 800a62c:	f3bf 8f4f 	dsb	sy
 800a630:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a632:	bf00      	nop
 800a634:	bf00      	nop
 800a636:	e7fd      	b.n	800a634 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d103      	bne.n	800a646 <xQueueGenericSendFromISR+0x3e>
 800a63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a640:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a642:	2b00      	cmp	r3, #0
 800a644:	d101      	bne.n	800a64a <xQueueGenericSendFromISR+0x42>
 800a646:	2301      	movs	r3, #1
 800a648:	e000      	b.n	800a64c <xQueueGenericSendFromISR+0x44>
 800a64a:	2300      	movs	r3, #0
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d10b      	bne.n	800a668 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a650:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a654:	f383 8811 	msr	BASEPRI, r3
 800a658:	f3bf 8f6f 	isb	sy
 800a65c:	f3bf 8f4f 	dsb	sy
 800a660:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a662:	bf00      	nop
 800a664:	bf00      	nop
 800a666:	e7fd      	b.n	800a664 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d103      	bne.n	800a676 <xQueueGenericSendFromISR+0x6e>
 800a66e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a670:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a672:	2b01      	cmp	r3, #1
 800a674:	d101      	bne.n	800a67a <xQueueGenericSendFromISR+0x72>
 800a676:	2301      	movs	r3, #1
 800a678:	e000      	b.n	800a67c <xQueueGenericSendFromISR+0x74>
 800a67a:	2300      	movs	r3, #0
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d10b      	bne.n	800a698 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a684:	f383 8811 	msr	BASEPRI, r3
 800a688:	f3bf 8f6f 	isb	sy
 800a68c:	f3bf 8f4f 	dsb	sy
 800a690:	623b      	str	r3, [r7, #32]
}
 800a692:	bf00      	nop
 800a694:	bf00      	nop
 800a696:	e7fd      	b.n	800a694 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a698:	f002 f926 	bl	800c8e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a69c:	f3ef 8211 	mrs	r2, BASEPRI
 800a6a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6a4:	f383 8811 	msr	BASEPRI, r3
 800a6a8:	f3bf 8f6f 	isb	sy
 800a6ac:	f3bf 8f4f 	dsb	sy
 800a6b0:	61fa      	str	r2, [r7, #28]
 800a6b2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a6b4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a6b6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a6b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a6bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a6c0:	429a      	cmp	r2, r3
 800a6c2:	d302      	bcc.n	800a6ca <xQueueGenericSendFromISR+0xc2>
 800a6c4:	683b      	ldr	r3, [r7, #0]
 800a6c6:	2b02      	cmp	r3, #2
 800a6c8:	d12f      	bne.n	800a72a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a6ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a6d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a6da:	683a      	ldr	r2, [r7, #0]
 800a6dc:	68b9      	ldr	r1, [r7, #8]
 800a6de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a6e0:	f000 f912 	bl	800a908 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a6e4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a6e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6ec:	d112      	bne.n	800a714 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a6ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d016      	beq.n	800a724 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a6f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6f8:	3324      	adds	r3, #36	@ 0x24
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 fffe 	bl	800b6fc <xTaskRemoveFromEventList>
 800a700:	4603      	mov	r3, r0
 800a702:	2b00      	cmp	r3, #0
 800a704:	d00e      	beq.n	800a724 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00b      	beq.n	800a724 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	2201      	movs	r2, #1
 800a710:	601a      	str	r2, [r3, #0]
 800a712:	e007      	b.n	800a724 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a714:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a718:	3301      	adds	r3, #1
 800a71a:	b2db      	uxtb	r3, r3
 800a71c:	b25a      	sxtb	r2, r3
 800a71e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a720:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a724:	2301      	movs	r3, #1
 800a726:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a728:	e001      	b.n	800a72e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a72a:	2300      	movs	r3, #0
 800a72c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a72e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a730:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a738:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a73a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	3740      	adds	r7, #64	@ 0x40
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}

0800a744 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08c      	sub	sp, #48	@ 0x30
 800a748:	af00      	add	r7, sp, #0
 800a74a:	60f8      	str	r0, [r7, #12]
 800a74c:	60b9      	str	r1, [r7, #8]
 800a74e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a750:	2300      	movs	r3, #0
 800a752:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	d10b      	bne.n	800a776 <xQueueReceive+0x32>
	__asm volatile
 800a75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a762:	f383 8811 	msr	BASEPRI, r3
 800a766:	f3bf 8f6f 	isb	sy
 800a76a:	f3bf 8f4f 	dsb	sy
 800a76e:	623b      	str	r3, [r7, #32]
}
 800a770:	bf00      	nop
 800a772:	bf00      	nop
 800a774:	e7fd      	b.n	800a772 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a776:	68bb      	ldr	r3, [r7, #8]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d103      	bne.n	800a784 <xQueueReceive+0x40>
 800a77c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a780:	2b00      	cmp	r3, #0
 800a782:	d101      	bne.n	800a788 <xQueueReceive+0x44>
 800a784:	2301      	movs	r3, #1
 800a786:	e000      	b.n	800a78a <xQueueReceive+0x46>
 800a788:	2300      	movs	r3, #0
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d10b      	bne.n	800a7a6 <xQueueReceive+0x62>
	__asm volatile
 800a78e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a792:	f383 8811 	msr	BASEPRI, r3
 800a796:	f3bf 8f6f 	isb	sy
 800a79a:	f3bf 8f4f 	dsb	sy
 800a79e:	61fb      	str	r3, [r7, #28]
}
 800a7a0:	bf00      	nop
 800a7a2:	bf00      	nop
 800a7a4:	e7fd      	b.n	800a7a2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a7a6:	f001 f96f 	bl	800ba88 <xTaskGetSchedulerState>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d102      	bne.n	800a7b6 <xQueueReceive+0x72>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <xQueueReceive+0x76>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e000      	b.n	800a7bc <xQueueReceive+0x78>
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d10b      	bne.n	800a7d8 <xQueueReceive+0x94>
	__asm volatile
 800a7c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7c4:	f383 8811 	msr	BASEPRI, r3
 800a7c8:	f3bf 8f6f 	isb	sy
 800a7cc:	f3bf 8f4f 	dsb	sy
 800a7d0:	61bb      	str	r3, [r7, #24]
}
 800a7d2:	bf00      	nop
 800a7d4:	bf00      	nop
 800a7d6:	e7fd      	b.n	800a7d4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7d8:	f001 ffa6 	bl	800c728 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7e0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a7e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d01f      	beq.n	800a828 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a7e8:	68b9      	ldr	r1, [r7, #8]
 800a7ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7ec:	f000 f8f6 	bl	800a9dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a7f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7f2:	1e5a      	subs	r2, r3, #1
 800a7f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fa:	691b      	ldr	r3, [r3, #16]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d00f      	beq.n	800a820 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a802:	3310      	adds	r3, #16
 800a804:	4618      	mov	r0, r3
 800a806:	f000 ff79 	bl	800b6fc <xTaskRemoveFromEventList>
 800a80a:	4603      	mov	r3, r0
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d007      	beq.n	800a820 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a810:	4b3c      	ldr	r3, [pc, #240]	@ (800a904 <xQueueReceive+0x1c0>)
 800a812:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a816:	601a      	str	r2, [r3, #0]
 800a818:	f3bf 8f4f 	dsb	sy
 800a81c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a820:	f001 ffb4 	bl	800c78c <vPortExitCritical>
				return pdPASS;
 800a824:	2301      	movs	r3, #1
 800a826:	e069      	b.n	800a8fc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d103      	bne.n	800a836 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a82e:	f001 ffad 	bl	800c78c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a832:	2300      	movs	r3, #0
 800a834:	e062      	b.n	800a8fc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d106      	bne.n	800a84a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a83c:	f107 0310 	add.w	r3, r7, #16
 800a840:	4618      	mov	r0, r3
 800a842:	f000 ffbf 	bl	800b7c4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a846:	2301      	movs	r3, #1
 800a848:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a84a:	f001 ff9f 	bl	800c78c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a84e:	f000 fc2d 	bl	800b0ac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a852:	f001 ff69 	bl	800c728 <vPortEnterCritical>
 800a856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a858:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a85c:	b25b      	sxtb	r3, r3
 800a85e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a862:	d103      	bne.n	800a86c <xQueueReceive+0x128>
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	2200      	movs	r2, #0
 800a868:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a86c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a872:	b25b      	sxtb	r3, r3
 800a874:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a878:	d103      	bne.n	800a882 <xQueueReceive+0x13e>
 800a87a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a87c:	2200      	movs	r2, #0
 800a87e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a882:	f001 ff83 	bl	800c78c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a886:	1d3a      	adds	r2, r7, #4
 800a888:	f107 0310 	add.w	r3, r7, #16
 800a88c:	4611      	mov	r1, r2
 800a88e:	4618      	mov	r0, r3
 800a890:	f000 ffae 	bl	800b7f0 <xTaskCheckForTimeOut>
 800a894:	4603      	mov	r3, r0
 800a896:	2b00      	cmp	r3, #0
 800a898:	d123      	bne.n	800a8e2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a89a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a89c:	f000 f916 	bl	800aacc <prvIsQueueEmpty>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d017      	beq.n	800a8d6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8a8:	3324      	adds	r3, #36	@ 0x24
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	4611      	mov	r1, r2
 800a8ae:	4618      	mov	r0, r3
 800a8b0:	f000 fed2 	bl	800b658 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8b6:	f000 f8b7 	bl	800aa28 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8ba:	f000 fc05 	bl	800b0c8 <xTaskResumeAll>
 800a8be:	4603      	mov	r3, r0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d189      	bne.n	800a7d8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a8c4:	4b0f      	ldr	r3, [pc, #60]	@ (800a904 <xQueueReceive+0x1c0>)
 800a8c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8ca:	601a      	str	r2, [r3, #0]
 800a8cc:	f3bf 8f4f 	dsb	sy
 800a8d0:	f3bf 8f6f 	isb	sy
 800a8d4:	e780      	b.n	800a7d8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a8d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8d8:	f000 f8a6 	bl	800aa28 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a8dc:	f000 fbf4 	bl	800b0c8 <xTaskResumeAll>
 800a8e0:	e77a      	b.n	800a7d8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a8e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8e4:	f000 f8a0 	bl	800aa28 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a8e8:	f000 fbee 	bl	800b0c8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a8ee:	f000 f8ed 	bl	800aacc <prvIsQueueEmpty>
 800a8f2:	4603      	mov	r3, r0
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f43f af6f 	beq.w	800a7d8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a8fa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a8fc:	4618      	mov	r0, r3
 800a8fe:	3730      	adds	r7, #48	@ 0x30
 800a900:	46bd      	mov	sp, r7
 800a902:	bd80      	pop	{r7, pc}
 800a904:	e000ed04 	.word	0xe000ed04

0800a908 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a914:	2300      	movs	r3, #0
 800a916:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a922:	2b00      	cmp	r3, #0
 800a924:	d10d      	bne.n	800a942 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d14d      	bne.n	800a9ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	689b      	ldr	r3, [r3, #8]
 800a932:	4618      	mov	r0, r3
 800a934:	f001 f8c6 	bl	800bac4 <xTaskPriorityDisinherit>
 800a938:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	609a      	str	r2, [r3, #8]
 800a940:	e043      	b.n	800a9ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d119      	bne.n	800a97c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	6858      	ldr	r0, [r3, #4]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a950:	461a      	mov	r2, r3
 800a952:	68b9      	ldr	r1, [r7, #8]
 800a954:	f002 fa7c 	bl	800ce50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	685a      	ldr	r2, [r3, #4]
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a960:	441a      	add	r2, r3
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	685a      	ldr	r2, [r3, #4]
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	429a      	cmp	r2, r3
 800a970:	d32b      	bcc.n	800a9ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681a      	ldr	r2, [r3, #0]
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	605a      	str	r2, [r3, #4]
 800a97a:	e026      	b.n	800a9ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	68d8      	ldr	r0, [r3, #12]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a984:	461a      	mov	r2, r3
 800a986:	68b9      	ldr	r1, [r7, #8]
 800a988:	f002 fa62 	bl	800ce50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	68da      	ldr	r2, [r3, #12]
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a994:	425b      	negs	r3, r3
 800a996:	441a      	add	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	68da      	ldr	r2, [r3, #12]
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	429a      	cmp	r2, r3
 800a9a6:	d207      	bcs.n	800a9b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	689a      	ldr	r2, [r3, #8]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9b0:	425b      	negs	r3, r3
 800a9b2:	441a      	add	r2, r3
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2b02      	cmp	r3, #2
 800a9bc:	d105      	bne.n	800a9ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d002      	beq.n	800a9ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a9c4:	693b      	ldr	r3, [r7, #16]
 800a9c6:	3b01      	subs	r3, #1
 800a9c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a9ca:	693b      	ldr	r3, [r7, #16]
 800a9cc:	1c5a      	adds	r2, r3, #1
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800a9d2:	697b      	ldr	r3, [r7, #20]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3718      	adds	r7, #24
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}

0800a9dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a9dc:	b580      	push	{r7, lr}
 800a9de:	b082      	sub	sp, #8
 800a9e0:	af00      	add	r7, sp, #0
 800a9e2:	6078      	str	r0, [r7, #4]
 800a9e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d018      	beq.n	800aa20 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	68da      	ldr	r2, [r3, #12]
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9f6:	441a      	add	r2, r3
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	68da      	ldr	r2, [r3, #12]
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	429a      	cmp	r2, r3
 800aa06:	d303      	bcc.n	800aa10 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	68d9      	ldr	r1, [r3, #12]
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa18:	461a      	mov	r2, r3
 800aa1a:	6838      	ldr	r0, [r7, #0]
 800aa1c:	f002 fa18 	bl	800ce50 <memcpy>
	}
}
 800aa20:	bf00      	nop
 800aa22:	3708      	adds	r7, #8
 800aa24:	46bd      	mov	sp, r7
 800aa26:	bd80      	pop	{r7, pc}

0800aa28 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aa30:	f001 fe7a 	bl	800c728 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aa3a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa3c:	e011      	b.n	800aa62 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d012      	beq.n	800aa6c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	3324      	adds	r3, #36	@ 0x24
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f000 fe56 	bl	800b6fc <xTaskRemoveFromEventList>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aa56:	f000 ff2f 	bl	800b8b8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aa5a:	7bfb      	ldrb	r3, [r7, #15]
 800aa5c:	3b01      	subs	r3, #1
 800aa5e:	b2db      	uxtb	r3, r3
 800aa60:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aa62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dce9      	bgt.n	800aa3e <prvUnlockQueue+0x16>
 800aa6a:	e000      	b.n	800aa6e <prvUnlockQueue+0x46>
					break;
 800aa6c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	22ff      	movs	r2, #255	@ 0xff
 800aa72:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800aa76:	f001 fe89 	bl	800c78c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800aa7a:	f001 fe55 	bl	800c728 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800aa84:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aa86:	e011      	b.n	800aaac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	691b      	ldr	r3, [r3, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d012      	beq.n	800aab6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	3310      	adds	r3, #16
 800aa94:	4618      	mov	r0, r3
 800aa96:	f000 fe31 	bl	800b6fc <xTaskRemoveFromEventList>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800aaa0:	f000 ff0a 	bl	800b8b8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800aaa4:	7bbb      	ldrb	r3, [r7, #14]
 800aaa6:	3b01      	subs	r3, #1
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800aaac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	dce9      	bgt.n	800aa88 <prvUnlockQueue+0x60>
 800aab4:	e000      	b.n	800aab8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800aab6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	22ff      	movs	r2, #255	@ 0xff
 800aabc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800aac0:	f001 fe64 	bl	800c78c <vPortExitCritical>
}
 800aac4:	bf00      	nop
 800aac6:	3710      	adds	r7, #16
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}

0800aacc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aad4:	f001 fe28 	bl	800c728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aad8:	687b      	ldr	r3, [r7, #4]
 800aada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d102      	bne.n	800aae6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800aae0:	2301      	movs	r3, #1
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	e001      	b.n	800aaea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800aae6:	2300      	movs	r3, #0
 800aae8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aaea:	f001 fe4f 	bl	800c78c <vPortExitCritical>

	return xReturn;
 800aaee:	68fb      	ldr	r3, [r7, #12]
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3710      	adds	r7, #16
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	bd80      	pop	{r7, pc}

0800aaf8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b084      	sub	sp, #16
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab00:	f001 fe12 	bl	800c728 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d102      	bne.n	800ab16 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab10:	2301      	movs	r3, #1
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	e001      	b.n	800ab1a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ab16:	2300      	movs	r3, #0
 800ab18:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab1a:	f001 fe37 	bl	800c78c <vPortExitCritical>

	return xReturn;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3710      	adds	r7, #16
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800ab28:	b480      	push	{r7}
 800ab2a:	b085      	sub	sp, #20
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab32:	2300      	movs	r3, #0
 800ab34:	60fb      	str	r3, [r7, #12]
 800ab36:	e014      	b.n	800ab62 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ab38:	4a0f      	ldr	r2, [pc, #60]	@ (800ab78 <vQueueAddToRegistry+0x50>)
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d10b      	bne.n	800ab5c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ab44:	490c      	ldr	r1, [pc, #48]	@ (800ab78 <vQueueAddToRegistry+0x50>)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	683a      	ldr	r2, [r7, #0]
 800ab4a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ab4e:	4a0a      	ldr	r2, [pc, #40]	@ (800ab78 <vQueueAddToRegistry+0x50>)
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	00db      	lsls	r3, r3, #3
 800ab54:	4413      	add	r3, r2
 800ab56:	687a      	ldr	r2, [r7, #4]
 800ab58:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ab5a:	e006      	b.n	800ab6a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	3301      	adds	r3, #1
 800ab60:	60fb      	str	r3, [r7, #12]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	2b07      	cmp	r3, #7
 800ab66:	d9e7      	bls.n	800ab38 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ab68:	bf00      	nop
 800ab6a:	bf00      	nop
 800ab6c:	3714      	adds	r7, #20
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	200012a0 	.word	0x200012a0

0800ab7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b086      	sub	sp, #24
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	60f8      	str	r0, [r7, #12]
 800ab84:	60b9      	str	r1, [r7, #8]
 800ab86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ab8c:	f001 fdcc 	bl	800c728 <vPortEnterCritical>
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab96:	b25b      	sxtb	r3, r3
 800ab98:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab9c:	d103      	bne.n	800aba6 <vQueueWaitForMessageRestricted+0x2a>
 800ab9e:	697b      	ldr	r3, [r7, #20]
 800aba0:	2200      	movs	r2, #0
 800aba2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800abac:	b25b      	sxtb	r3, r3
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abb2:	d103      	bne.n	800abbc <vQueueWaitForMessageRestricted+0x40>
 800abb4:	697b      	ldr	r3, [r7, #20]
 800abb6:	2200      	movs	r2, #0
 800abb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abbc:	f001 fde6 	bl	800c78c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d106      	bne.n	800abd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	3324      	adds	r3, #36	@ 0x24
 800abcc:	687a      	ldr	r2, [r7, #4]
 800abce:	68b9      	ldr	r1, [r7, #8]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f000 fd67 	bl	800b6a4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800abd6:	6978      	ldr	r0, [r7, #20]
 800abd8:	f7ff ff26 	bl	800aa28 <prvUnlockQueue>
	}
 800abdc:	bf00      	nop
 800abde:	3718      	adds	r7, #24
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b08e      	sub	sp, #56	@ 0x38
 800abe8:	af04      	add	r7, sp, #16
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
 800abf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800abf2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10b      	bne.n	800ac10 <xTaskCreateStatic+0x2c>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	623b      	str	r3, [r7, #32]
}
 800ac0a:	bf00      	nop
 800ac0c:	bf00      	nop
 800ac0e:	e7fd      	b.n	800ac0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d10b      	bne.n	800ac2e <xTaskCreateStatic+0x4a>
	__asm volatile
 800ac16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac1a:	f383 8811 	msr	BASEPRI, r3
 800ac1e:	f3bf 8f6f 	isb	sy
 800ac22:	f3bf 8f4f 	dsb	sy
 800ac26:	61fb      	str	r3, [r7, #28]
}
 800ac28:	bf00      	nop
 800ac2a:	bf00      	nop
 800ac2c:	e7fd      	b.n	800ac2a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ac2e:	23a8      	movs	r3, #168	@ 0xa8
 800ac30:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ac32:	693b      	ldr	r3, [r7, #16]
 800ac34:	2ba8      	cmp	r3, #168	@ 0xa8
 800ac36:	d00b      	beq.n	800ac50 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ac38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac3c:	f383 8811 	msr	BASEPRI, r3
 800ac40:	f3bf 8f6f 	isb	sy
 800ac44:	f3bf 8f4f 	dsb	sy
 800ac48:	61bb      	str	r3, [r7, #24]
}
 800ac4a:	bf00      	nop
 800ac4c:	bf00      	nop
 800ac4e:	e7fd      	b.n	800ac4c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ac50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ac52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d01e      	beq.n	800ac96 <xTaskCreateStatic+0xb2>
 800ac58:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d01b      	beq.n	800ac96 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac60:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ac62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac64:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ac66:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ac68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac6a:	2202      	movs	r2, #2
 800ac6c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ac70:	2300      	movs	r3, #0
 800ac72:	9303      	str	r3, [sp, #12]
 800ac74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac76:	9302      	str	r3, [sp, #8]
 800ac78:	f107 0314 	add.w	r3, r7, #20
 800ac7c:	9301      	str	r3, [sp, #4]
 800ac7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ac80:	9300      	str	r3, [sp, #0]
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	687a      	ldr	r2, [r7, #4]
 800ac86:	68b9      	ldr	r1, [r7, #8]
 800ac88:	68f8      	ldr	r0, [r7, #12]
 800ac8a:	f000 f851 	bl	800ad30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ac8e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ac90:	f000 f8f6 	bl	800ae80 <prvAddNewTaskToReadyList>
 800ac94:	e001      	b.n	800ac9a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ac96:	2300      	movs	r3, #0
 800ac98:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ac9a:	697b      	ldr	r3, [r7, #20]
	}
 800ac9c:	4618      	mov	r0, r3
 800ac9e:	3728      	adds	r7, #40	@ 0x28
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}

0800aca4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b08c      	sub	sp, #48	@ 0x30
 800aca8:	af04      	add	r7, sp, #16
 800acaa:	60f8      	str	r0, [r7, #12]
 800acac:	60b9      	str	r1, [r7, #8]
 800acae:	603b      	str	r3, [r7, #0]
 800acb0:	4613      	mov	r3, r2
 800acb2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800acb4:	88fb      	ldrh	r3, [r7, #6]
 800acb6:	009b      	lsls	r3, r3, #2
 800acb8:	4618      	mov	r0, r3
 800acba:	f001 fe57 	bl	800c96c <pvPortMalloc>
 800acbe:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800acc0:	697b      	ldr	r3, [r7, #20]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d00e      	beq.n	800ace4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800acc6:	20a8      	movs	r0, #168	@ 0xa8
 800acc8:	f001 fe50 	bl	800c96c <pvPortMalloc>
 800accc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800acce:	69fb      	ldr	r3, [r7, #28]
 800acd0:	2b00      	cmp	r3, #0
 800acd2:	d003      	beq.n	800acdc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800acd4:	69fb      	ldr	r3, [r7, #28]
 800acd6:	697a      	ldr	r2, [r7, #20]
 800acd8:	631a      	str	r2, [r3, #48]	@ 0x30
 800acda:	e005      	b.n	800ace8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800acdc:	6978      	ldr	r0, [r7, #20]
 800acde:	f001 ff13 	bl	800cb08 <vPortFree>
 800ace2:	e001      	b.n	800ace8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ace4:	2300      	movs	r3, #0
 800ace6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ace8:	69fb      	ldr	r3, [r7, #28]
 800acea:	2b00      	cmp	r3, #0
 800acec:	d017      	beq.n	800ad1e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800acee:	69fb      	ldr	r3, [r7, #28]
 800acf0:	2200      	movs	r2, #0
 800acf2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800acf6:	88fa      	ldrh	r2, [r7, #6]
 800acf8:	2300      	movs	r3, #0
 800acfa:	9303      	str	r3, [sp, #12]
 800acfc:	69fb      	ldr	r3, [r7, #28]
 800acfe:	9302      	str	r3, [sp, #8]
 800ad00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad02:	9301      	str	r3, [sp, #4]
 800ad04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	68b9      	ldr	r1, [r7, #8]
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 f80f 	bl	800ad30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad12:	69f8      	ldr	r0, [r7, #28]
 800ad14:	f000 f8b4 	bl	800ae80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ad18:	2301      	movs	r3, #1
 800ad1a:	61bb      	str	r3, [r7, #24]
 800ad1c:	e002      	b.n	800ad24 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ad1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ad22:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ad24:	69bb      	ldr	r3, [r7, #24]
	}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3720      	adds	r7, #32
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}
	...

0800ad30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	607a      	str	r2, [r7, #4]
 800ad3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ad3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad40:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	009b      	lsls	r3, r3, #2
 800ad46:	461a      	mov	r2, r3
 800ad48:	21a5      	movs	r1, #165	@ 0xa5
 800ad4a:	f001 fffd 	bl	800cd48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ad4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ad58:	3b01      	subs	r3, #1
 800ad5a:	009b      	lsls	r3, r3, #2
 800ad5c:	4413      	add	r3, r2
 800ad5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ad60:	69bb      	ldr	r3, [r7, #24]
 800ad62:	f023 0307 	bic.w	r3, r3, #7
 800ad66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ad68:	69bb      	ldr	r3, [r7, #24]
 800ad6a:	f003 0307 	and.w	r3, r3, #7
 800ad6e:	2b00      	cmp	r3, #0
 800ad70:	d00b      	beq.n	800ad8a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800ad72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad76:	f383 8811 	msr	BASEPRI, r3
 800ad7a:	f3bf 8f6f 	isb	sy
 800ad7e:	f3bf 8f4f 	dsb	sy
 800ad82:	617b      	str	r3, [r7, #20]
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop
 800ad88:	e7fd      	b.n	800ad86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ad8a:	68bb      	ldr	r3, [r7, #8]
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	d01f      	beq.n	800add0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ad90:	2300      	movs	r3, #0
 800ad92:	61fb      	str	r3, [r7, #28]
 800ad94:	e012      	b.n	800adbc <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ad96:	68ba      	ldr	r2, [r7, #8]
 800ad98:	69fb      	ldr	r3, [r7, #28]
 800ad9a:	4413      	add	r3, r2
 800ad9c:	7819      	ldrb	r1, [r3, #0]
 800ad9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ada0:	69fb      	ldr	r3, [r7, #28]
 800ada2:	4413      	add	r3, r2
 800ada4:	3334      	adds	r3, #52	@ 0x34
 800ada6:	460a      	mov	r2, r1
 800ada8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800adaa:	68ba      	ldr	r2, [r7, #8]
 800adac:	69fb      	ldr	r3, [r7, #28]
 800adae:	4413      	add	r3, r2
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d006      	beq.n	800adc4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800adb6:	69fb      	ldr	r3, [r7, #28]
 800adb8:	3301      	adds	r3, #1
 800adba:	61fb      	str	r3, [r7, #28]
 800adbc:	69fb      	ldr	r3, [r7, #28]
 800adbe:	2b0f      	cmp	r3, #15
 800adc0:	d9e9      	bls.n	800ad96 <prvInitialiseNewTask+0x66>
 800adc2:	e000      	b.n	800adc6 <prvInitialiseNewTask+0x96>
			{
				break;
 800adc4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800adc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adc8:	2200      	movs	r2, #0
 800adca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800adce:	e003      	b.n	800add8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	2200      	movs	r2, #0
 800add4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adda:	2b37      	cmp	r3, #55	@ 0x37
 800addc:	d901      	bls.n	800ade2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800adde:	2337      	movs	r3, #55	@ 0x37
 800ade0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ade2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ade4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ade6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ade8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800adec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800adee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf0:	2200      	movs	r2, #0
 800adf2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800adf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adf6:	3304      	adds	r3, #4
 800adf8:	4618      	mov	r0, r3
 800adfa:	f7ff f965 	bl	800a0c8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800adfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae00:	3318      	adds	r3, #24
 800ae02:	4618      	mov	r0, r3
 800ae04:	f7ff f960 	bl	800a0c8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae0c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae10:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800ae14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae16:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ae18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae1c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ae1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae20:	2200      	movs	r2, #0
 800ae22:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ae26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ae2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae30:	3354      	adds	r3, #84	@ 0x54
 800ae32:	224c      	movs	r2, #76	@ 0x4c
 800ae34:	2100      	movs	r1, #0
 800ae36:	4618      	mov	r0, r3
 800ae38:	f001 ff86 	bl	800cd48 <memset>
 800ae3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae3e:	4a0d      	ldr	r2, [pc, #52]	@ (800ae74 <prvInitialiseNewTask+0x144>)
 800ae40:	659a      	str	r2, [r3, #88]	@ 0x58
 800ae42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae44:	4a0c      	ldr	r2, [pc, #48]	@ (800ae78 <prvInitialiseNewTask+0x148>)
 800ae46:	65da      	str	r2, [r3, #92]	@ 0x5c
 800ae48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ae7c <prvInitialiseNewTask+0x14c>)
 800ae4c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ae4e:	683a      	ldr	r2, [r7, #0]
 800ae50:	68f9      	ldr	r1, [r7, #12]
 800ae52:	69b8      	ldr	r0, [r7, #24]
 800ae54:	f001 fb36 	bl	800c4c4 <pxPortInitialiseStack>
 800ae58:	4602      	mov	r2, r0
 800ae5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d002      	beq.n	800ae6a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ae64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ae6a:	bf00      	nop
 800ae6c:	3720      	adds	r7, #32
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}
 800ae72:	bf00      	nop
 800ae74:	20005534 	.word	0x20005534
 800ae78:	2000559c 	.word	0x2000559c
 800ae7c:	20005604 	.word	0x20005604

0800ae80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ae80:	b580      	push	{r7, lr}
 800ae82:	b082      	sub	sp, #8
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ae88:	f001 fc4e 	bl	800c728 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ae8c:	4b2d      	ldr	r3, [pc, #180]	@ (800af44 <prvAddNewTaskToReadyList+0xc4>)
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	3301      	adds	r3, #1
 800ae92:	4a2c      	ldr	r2, [pc, #176]	@ (800af44 <prvAddNewTaskToReadyList+0xc4>)
 800ae94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ae96:	4b2c      	ldr	r3, [pc, #176]	@ (800af48 <prvAddNewTaskToReadyList+0xc8>)
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d109      	bne.n	800aeb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ae9e:	4a2a      	ldr	r2, [pc, #168]	@ (800af48 <prvAddNewTaskToReadyList+0xc8>)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800aea4:	4b27      	ldr	r3, [pc, #156]	@ (800af44 <prvAddNewTaskToReadyList+0xc4>)
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d110      	bne.n	800aece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aeac:	f000 fd28 	bl	800b900 <prvInitialiseTaskLists>
 800aeb0:	e00d      	b.n	800aece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aeb2:	4b26      	ldr	r3, [pc, #152]	@ (800af4c <prvAddNewTaskToReadyList+0xcc>)
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	2b00      	cmp	r3, #0
 800aeb8:	d109      	bne.n	800aece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800aeba:	4b23      	ldr	r3, [pc, #140]	@ (800af48 <prvAddNewTaskToReadyList+0xc8>)
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aec4:	429a      	cmp	r2, r3
 800aec6:	d802      	bhi.n	800aece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800aec8:	4a1f      	ldr	r2, [pc, #124]	@ (800af48 <prvAddNewTaskToReadyList+0xc8>)
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800aece:	4b20      	ldr	r3, [pc, #128]	@ (800af50 <prvAddNewTaskToReadyList+0xd0>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	3301      	adds	r3, #1
 800aed4:	4a1e      	ldr	r2, [pc, #120]	@ (800af50 <prvAddNewTaskToReadyList+0xd0>)
 800aed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800aed8:	4b1d      	ldr	r3, [pc, #116]	@ (800af50 <prvAddNewTaskToReadyList+0xd0>)
 800aeda:	681a      	ldr	r2, [r3, #0]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aee4:	4b1b      	ldr	r3, [pc, #108]	@ (800af54 <prvAddNewTaskToReadyList+0xd4>)
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	429a      	cmp	r2, r3
 800aeea:	d903      	bls.n	800aef4 <prvAddNewTaskToReadyList+0x74>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aef0:	4a18      	ldr	r2, [pc, #96]	@ (800af54 <prvAddNewTaskToReadyList+0xd4>)
 800aef2:	6013      	str	r3, [r2, #0]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800aef8:	4613      	mov	r3, r2
 800aefa:	009b      	lsls	r3, r3, #2
 800aefc:	4413      	add	r3, r2
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	4a15      	ldr	r2, [pc, #84]	@ (800af58 <prvAddNewTaskToReadyList+0xd8>)
 800af02:	441a      	add	r2, r3
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	3304      	adds	r3, #4
 800af08:	4619      	mov	r1, r3
 800af0a:	4610      	mov	r0, r2
 800af0c:	f7ff f8e9 	bl	800a0e2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af10:	f001 fc3c 	bl	800c78c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800af14:	4b0d      	ldr	r3, [pc, #52]	@ (800af4c <prvAddNewTaskToReadyList+0xcc>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d00e      	beq.n	800af3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800af1c:	4b0a      	ldr	r3, [pc, #40]	@ (800af48 <prvAddNewTaskToReadyList+0xc8>)
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af26:	429a      	cmp	r2, r3
 800af28:	d207      	bcs.n	800af3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800af2a:	4b0c      	ldr	r3, [pc, #48]	@ (800af5c <prvAddNewTaskToReadyList+0xdc>)
 800af2c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800af30:	601a      	str	r2, [r3, #0]
 800af32:	f3bf 8f4f 	dsb	sy
 800af36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800af3a:	bf00      	nop
 800af3c:	3708      	adds	r7, #8
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200017b4 	.word	0x200017b4
 800af48:	200012e0 	.word	0x200012e0
 800af4c:	200017c0 	.word	0x200017c0
 800af50:	200017d0 	.word	0x200017d0
 800af54:	200017bc 	.word	0x200017bc
 800af58:	200012e4 	.word	0x200012e4
 800af5c:	e000ed04 	.word	0xe000ed04

0800af60 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800af60:	b580      	push	{r7, lr}
 800af62:	b084      	sub	sp, #16
 800af64:	af00      	add	r7, sp, #0
 800af66:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800af68:	2300      	movs	r3, #0
 800af6a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d018      	beq.n	800afa4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800af72:	4b14      	ldr	r3, [pc, #80]	@ (800afc4 <vTaskDelay+0x64>)
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	2b00      	cmp	r3, #0
 800af78:	d00b      	beq.n	800af92 <vTaskDelay+0x32>
	__asm volatile
 800af7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af7e:	f383 8811 	msr	BASEPRI, r3
 800af82:	f3bf 8f6f 	isb	sy
 800af86:	f3bf 8f4f 	dsb	sy
 800af8a:	60bb      	str	r3, [r7, #8]
}
 800af8c:	bf00      	nop
 800af8e:	bf00      	nop
 800af90:	e7fd      	b.n	800af8e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800af92:	f000 f88b 	bl	800b0ac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800af96:	2100      	movs	r1, #0
 800af98:	6878      	ldr	r0, [r7, #4]
 800af9a:	f000 fee5 	bl	800bd68 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800af9e:	f000 f893 	bl	800b0c8 <xTaskResumeAll>
 800afa2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d107      	bne.n	800afba <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800afaa:	4b07      	ldr	r3, [pc, #28]	@ (800afc8 <vTaskDelay+0x68>)
 800afac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afb0:	601a      	str	r2, [r3, #0]
 800afb2:	f3bf 8f4f 	dsb	sy
 800afb6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800afba:	bf00      	nop
 800afbc:	3710      	adds	r7, #16
 800afbe:	46bd      	mov	sp, r7
 800afc0:	bd80      	pop	{r7, pc}
 800afc2:	bf00      	nop
 800afc4:	200017dc 	.word	0x200017dc
 800afc8:	e000ed04 	.word	0xe000ed04

0800afcc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b08a      	sub	sp, #40	@ 0x28
 800afd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800afd2:	2300      	movs	r3, #0
 800afd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800afd6:	2300      	movs	r3, #0
 800afd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800afda:	463a      	mov	r2, r7
 800afdc:	1d39      	adds	r1, r7, #4
 800afde:	f107 0308 	add.w	r3, r7, #8
 800afe2:	4618      	mov	r0, r3
 800afe4:	f7ff f81c 	bl	800a020 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800afe8:	6839      	ldr	r1, [r7, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	9202      	str	r2, [sp, #8]
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	2300      	movs	r3, #0
 800aff4:	9300      	str	r3, [sp, #0]
 800aff6:	2300      	movs	r3, #0
 800aff8:	460a      	mov	r2, r1
 800affa:	4924      	ldr	r1, [pc, #144]	@ (800b08c <vTaskStartScheduler+0xc0>)
 800affc:	4824      	ldr	r0, [pc, #144]	@ (800b090 <vTaskStartScheduler+0xc4>)
 800affe:	f7ff fdf1 	bl	800abe4 <xTaskCreateStatic>
 800b002:	4603      	mov	r3, r0
 800b004:	4a23      	ldr	r2, [pc, #140]	@ (800b094 <vTaskStartScheduler+0xc8>)
 800b006:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b008:	4b22      	ldr	r3, [pc, #136]	@ (800b094 <vTaskStartScheduler+0xc8>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d002      	beq.n	800b016 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b010:	2301      	movs	r3, #1
 800b012:	617b      	str	r3, [r7, #20]
 800b014:	e001      	b.n	800b01a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b016:	2300      	movs	r3, #0
 800b018:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b01a:	697b      	ldr	r3, [r7, #20]
 800b01c:	2b01      	cmp	r3, #1
 800b01e:	d102      	bne.n	800b026 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b020:	f000 fef6 	bl	800be10 <xTimerCreateTimerTask>
 800b024:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	2b01      	cmp	r3, #1
 800b02a:	d11b      	bne.n	800b064 <vTaskStartScheduler+0x98>
	__asm volatile
 800b02c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b030:	f383 8811 	msr	BASEPRI, r3
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	f3bf 8f4f 	dsb	sy
 800b03c:	613b      	str	r3, [r7, #16]
}
 800b03e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b040:	4b15      	ldr	r3, [pc, #84]	@ (800b098 <vTaskStartScheduler+0xcc>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	3354      	adds	r3, #84	@ 0x54
 800b046:	4a15      	ldr	r2, [pc, #84]	@ (800b09c <vTaskStartScheduler+0xd0>)
 800b048:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b04a:	4b15      	ldr	r3, [pc, #84]	@ (800b0a0 <vTaskStartScheduler+0xd4>)
 800b04c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b050:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b052:	4b14      	ldr	r3, [pc, #80]	@ (800b0a4 <vTaskStartScheduler+0xd8>)
 800b054:	2201      	movs	r2, #1
 800b056:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b058:	4b13      	ldr	r3, [pc, #76]	@ (800b0a8 <vTaskStartScheduler+0xdc>)
 800b05a:	2200      	movs	r2, #0
 800b05c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b05e:	f001 fabf 	bl	800c5e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b062:	e00f      	b.n	800b084 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b06a:	d10b      	bne.n	800b084 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b06c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b070:	f383 8811 	msr	BASEPRI, r3
 800b074:	f3bf 8f6f 	isb	sy
 800b078:	f3bf 8f4f 	dsb	sy
 800b07c:	60fb      	str	r3, [r7, #12]
}
 800b07e:	bf00      	nop
 800b080:	bf00      	nop
 800b082:	e7fd      	b.n	800b080 <vTaskStartScheduler+0xb4>
}
 800b084:	bf00      	nop
 800b086:	3718      	adds	r7, #24
 800b088:	46bd      	mov	sp, r7
 800b08a:	bd80      	pop	{r7, pc}
 800b08c:	0800cf6c 	.word	0x0800cf6c
 800b090:	0800b8d1 	.word	0x0800b8d1
 800b094:	200017d8 	.word	0x200017d8
 800b098:	200012e0 	.word	0x200012e0
 800b09c:	2000002c 	.word	0x2000002c
 800b0a0:	200017d4 	.word	0x200017d4
 800b0a4:	200017c0 	.word	0x200017c0
 800b0a8:	200017b8 	.word	0x200017b8

0800b0ac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b0ac:	b480      	push	{r7}
 800b0ae:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b0b0:	4b04      	ldr	r3, [pc, #16]	@ (800b0c4 <vTaskSuspendAll+0x18>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	3301      	adds	r3, #1
 800b0b6:	4a03      	ldr	r2, [pc, #12]	@ (800b0c4 <vTaskSuspendAll+0x18>)
 800b0b8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b0ba:	bf00      	nop
 800b0bc:	46bd      	mov	sp, r7
 800b0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c2:	4770      	bx	lr
 800b0c4:	200017dc 	.word	0x200017dc

0800b0c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b0d2:	2300      	movs	r3, #0
 800b0d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b0d6:	4b42      	ldr	r3, [pc, #264]	@ (800b1e0 <xTaskResumeAll+0x118>)
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10b      	bne.n	800b0f6 <xTaskResumeAll+0x2e>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	603b      	str	r3, [r7, #0]
}
 800b0f0:	bf00      	nop
 800b0f2:	bf00      	nop
 800b0f4:	e7fd      	b.n	800b0f2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b0f6:	f001 fb17 	bl	800c728 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b0fa:	4b39      	ldr	r3, [pc, #228]	@ (800b1e0 <xTaskResumeAll+0x118>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	3b01      	subs	r3, #1
 800b100:	4a37      	ldr	r2, [pc, #220]	@ (800b1e0 <xTaskResumeAll+0x118>)
 800b102:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b104:	4b36      	ldr	r3, [pc, #216]	@ (800b1e0 <xTaskResumeAll+0x118>)
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d162      	bne.n	800b1d2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b10c:	4b35      	ldr	r3, [pc, #212]	@ (800b1e4 <xTaskResumeAll+0x11c>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	2b00      	cmp	r3, #0
 800b112:	d05e      	beq.n	800b1d2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b114:	e02f      	b.n	800b176 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b116:	4b34      	ldr	r3, [pc, #208]	@ (800b1e8 <xTaskResumeAll+0x120>)
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	68db      	ldr	r3, [r3, #12]
 800b11c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	3318      	adds	r3, #24
 800b122:	4618      	mov	r0, r3
 800b124:	f7ff f83a 	bl	800a19c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	3304      	adds	r3, #4
 800b12c:	4618      	mov	r0, r3
 800b12e:	f7ff f835 	bl	800a19c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b136:	4b2d      	ldr	r3, [pc, #180]	@ (800b1ec <xTaskResumeAll+0x124>)
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d903      	bls.n	800b146 <xTaskResumeAll+0x7e>
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b142:	4a2a      	ldr	r2, [pc, #168]	@ (800b1ec <xTaskResumeAll+0x124>)
 800b144:	6013      	str	r3, [r2, #0]
 800b146:	68fb      	ldr	r3, [r7, #12]
 800b148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b14a:	4613      	mov	r3, r2
 800b14c:	009b      	lsls	r3, r3, #2
 800b14e:	4413      	add	r3, r2
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	4a27      	ldr	r2, [pc, #156]	@ (800b1f0 <xTaskResumeAll+0x128>)
 800b154:	441a      	add	r2, r3
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	3304      	adds	r3, #4
 800b15a:	4619      	mov	r1, r3
 800b15c:	4610      	mov	r0, r2
 800b15e:	f7fe ffc0 	bl	800a0e2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b166:	4b23      	ldr	r3, [pc, #140]	@ (800b1f4 <xTaskResumeAll+0x12c>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d302      	bcc.n	800b176 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b170:	4b21      	ldr	r3, [pc, #132]	@ (800b1f8 <xTaskResumeAll+0x130>)
 800b172:	2201      	movs	r2, #1
 800b174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b176:	4b1c      	ldr	r3, [pc, #112]	@ (800b1e8 <xTaskResumeAll+0x120>)
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d1cb      	bne.n	800b116 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b184:	f000 fc60 	bl	800ba48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b188:	4b1c      	ldr	r3, [pc, #112]	@ (800b1fc <xTaskResumeAll+0x134>)
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d010      	beq.n	800b1b6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b194:	f000 f940 	bl	800b418 <xTaskIncrementTick>
 800b198:	4603      	mov	r3, r0
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d002      	beq.n	800b1a4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b19e:	4b16      	ldr	r3, [pc, #88]	@ (800b1f8 <xTaskResumeAll+0x130>)
 800b1a0:	2201      	movs	r2, #1
 800b1a2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	3b01      	subs	r3, #1
 800b1a8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d1f1      	bne.n	800b194 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b1b0:	4b12      	ldr	r3, [pc, #72]	@ (800b1fc <xTaskResumeAll+0x134>)
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b1b6:	4b10      	ldr	r3, [pc, #64]	@ (800b1f8 <xTaskResumeAll+0x130>)
 800b1b8:	681b      	ldr	r3, [r3, #0]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d009      	beq.n	800b1d2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800b200 <xTaskResumeAll+0x138>)
 800b1c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1c8:	601a      	str	r2, [r3, #0]
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b1d2:	f001 fadb 	bl	800c78c <vPortExitCritical>

	return xAlreadyYielded;
 800b1d6:	68bb      	ldr	r3, [r7, #8]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	200017dc 	.word	0x200017dc
 800b1e4:	200017b4 	.word	0x200017b4
 800b1e8:	20001774 	.word	0x20001774
 800b1ec:	200017bc 	.word	0x200017bc
 800b1f0:	200012e4 	.word	0x200012e4
 800b1f4:	200012e0 	.word	0x200012e0
 800b1f8:	200017c8 	.word	0x200017c8
 800b1fc:	200017c4 	.word	0x200017c4
 800b200:	e000ed04 	.word	0xe000ed04

0800b204 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b20a:	4b05      	ldr	r3, [pc, #20]	@ (800b220 <xTaskGetTickCount+0x1c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b210:	687b      	ldr	r3, [r7, #4]
}
 800b212:	4618      	mov	r0, r3
 800b214:	370c      	adds	r7, #12
 800b216:	46bd      	mov	sp, r7
 800b218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21c:	4770      	bx	lr
 800b21e:	bf00      	nop
 800b220:	200017b8 	.word	0x200017b8

0800b224 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b224:	b480      	push	{r7}
 800b226:	b085      	sub	sp, #20
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d102      	bne.n	800b238 <pcTaskGetName+0x14>
 800b232:	4b0e      	ldr	r3, [pc, #56]	@ (800b26c <pcTaskGetName+0x48>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	e000      	b.n	800b23a <pcTaskGetName+0x16>
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d10b      	bne.n	800b25a <pcTaskGetName+0x36>
	__asm volatile
 800b242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b246:	f383 8811 	msr	BASEPRI, r3
 800b24a:	f3bf 8f6f 	isb	sy
 800b24e:	f3bf 8f4f 	dsb	sy
 800b252:	60bb      	str	r3, [r7, #8]
}
 800b254:	bf00      	nop
 800b256:	bf00      	nop
 800b258:	e7fd      	b.n	800b256 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	3334      	adds	r3, #52	@ 0x34
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3714      	adds	r7, #20
 800b262:	46bd      	mov	sp, r7
 800b264:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b268:	4770      	bx	lr
 800b26a:	bf00      	nop
 800b26c:	200012e0 	.word	0x200012e0

0800b270 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800b270:	b480      	push	{r7}
 800b272:	b08b      	sub	sp, #44	@ 0x2c
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800b27a:	2300      	movs	r3, #0
 800b27c:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d05b      	beq.n	800b33e <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	61bb      	str	r3, [r7, #24]
 800b28a:	69bb      	ldr	r3, [r7, #24]
 800b28c:	685b      	ldr	r3, [r3, #4]
 800b28e:	685a      	ldr	r2, [r3, #4]
 800b290:	69bb      	ldr	r3, [r7, #24]
 800b292:	605a      	str	r2, [r3, #4]
 800b294:	69bb      	ldr	r3, [r7, #24]
 800b296:	685a      	ldr	r2, [r3, #4]
 800b298:	69bb      	ldr	r3, [r7, #24]
 800b29a:	3308      	adds	r3, #8
 800b29c:	429a      	cmp	r2, r3
 800b29e:	d104      	bne.n	800b2aa <prvSearchForNameWithinSingleList+0x3a>
 800b2a0:	69bb      	ldr	r3, [r7, #24]
 800b2a2:	685b      	ldr	r3, [r3, #4]
 800b2a4:	685a      	ldr	r2, [r3, #4]
 800b2a6:	69bb      	ldr	r3, [r7, #24]
 800b2a8:	605a      	str	r2, [r3, #4]
 800b2aa:	69bb      	ldr	r3, [r7, #24]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	68db      	ldr	r3, [r3, #12]
 800b2b0:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	613b      	str	r3, [r7, #16]
 800b2b6:	693b      	ldr	r3, [r7, #16]
 800b2b8:	685b      	ldr	r3, [r3, #4]
 800b2ba:	685a      	ldr	r2, [r3, #4]
 800b2bc:	693b      	ldr	r3, [r7, #16]
 800b2be:	605a      	str	r2, [r3, #4]
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	685a      	ldr	r2, [r3, #4]
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	3308      	adds	r3, #8
 800b2c8:	429a      	cmp	r2, r3
 800b2ca:	d104      	bne.n	800b2d6 <prvSearchForNameWithinSingleList+0x66>
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	685b      	ldr	r3, [r3, #4]
 800b2d0:	685a      	ldr	r2, [r3, #4]
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	605a      	str	r2, [r3, #4]
 800b2d6:	693b      	ldr	r3, [r7, #16]
 800b2d8:	685b      	ldr	r3, [r3, #4]
 800b2da:	68db      	ldr	r3, [r3, #12]
 800b2dc:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800b2de:	2300      	movs	r3, #0
 800b2e0:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	623b      	str	r3, [r7, #32]
 800b2e6:	e01c      	b.n	800b322 <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	6a3b      	ldr	r3, [r7, #32]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	3334      	adds	r3, #52	@ 0x34
 800b2f0:	781b      	ldrb	r3, [r3, #0]
 800b2f2:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800b2f4:	683a      	ldr	r2, [r7, #0]
 800b2f6:	6a3b      	ldr	r3, [r7, #32]
 800b2f8:	4413      	add	r3, r2
 800b2fa:	781b      	ldrb	r3, [r3, #0]
 800b2fc:	7afa      	ldrb	r2, [r7, #11]
 800b2fe:	429a      	cmp	r2, r3
 800b300:	d002      	beq.n	800b308 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800b302:	2301      	movs	r3, #1
 800b304:	61fb      	str	r3, [r7, #28]
 800b306:	e006      	b.n	800b316 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800b308:	7afb      	ldrb	r3, [r7, #11]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d103      	bne.n	800b316 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800b312:	2301      	movs	r3, #1
 800b314:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d106      	bne.n	800b32a <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b31c:	6a3b      	ldr	r3, [r7, #32]
 800b31e:	3301      	adds	r3, #1
 800b320:	623b      	str	r3, [r7, #32]
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	2b0f      	cmp	r3, #15
 800b326:	d9df      	bls.n	800b2e8 <prvSearchForNameWithinSingleList+0x78>
 800b328:	e000      	b.n	800b32c <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800b32a:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800b32c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d104      	bne.n	800b33c <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800b332:	68fa      	ldr	r2, [r7, #12]
 800b334:	697b      	ldr	r3, [r7, #20]
 800b336:	429a      	cmp	r2, r3
 800b338:	d1bb      	bne.n	800b2b2 <prvSearchForNameWithinSingleList+0x42>
 800b33a:	e000      	b.n	800b33e <prvSearchForNameWithinSingleList+0xce>
					break;
 800b33c:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800b33e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b340:	4618      	mov	r0, r3
 800b342:	372c      	adds	r7, #44	@ 0x2c
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr

0800b34c <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b086      	sub	sp, #24
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800b354:	2338      	movs	r3, #56	@ 0x38
 800b356:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800b358:	6878      	ldr	r0, [r7, #4]
 800b35a:	f7f4 ff39 	bl	80001d0 <strlen>
 800b35e:	4603      	mov	r3, r0
 800b360:	2b0f      	cmp	r3, #15
 800b362:	d90b      	bls.n	800b37c <xTaskGetHandle+0x30>
	__asm volatile
 800b364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b368:	f383 8811 	msr	BASEPRI, r3
 800b36c:	f3bf 8f6f 	isb	sy
 800b370:	f3bf 8f4f 	dsb	sy
 800b374:	60fb      	str	r3, [r7, #12]
}
 800b376:	bf00      	nop
 800b378:	bf00      	nop
 800b37a:	e7fd      	b.n	800b378 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800b37c:	f7ff fe96 	bl	800b0ac <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800b380:	697b      	ldr	r3, [r7, #20]
 800b382:	3b01      	subs	r3, #1
 800b384:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800b386:	697a      	ldr	r2, [r7, #20]
 800b388:	4613      	mov	r3, r2
 800b38a:	009b      	lsls	r3, r3, #2
 800b38c:	4413      	add	r3, r2
 800b38e:	009b      	lsls	r3, r3, #2
 800b390:	4a1c      	ldr	r2, [pc, #112]	@ (800b404 <xTaskGetHandle+0xb8>)
 800b392:	4413      	add	r3, r2
 800b394:	6879      	ldr	r1, [r7, #4]
 800b396:	4618      	mov	r0, r3
 800b398:	f7ff ff6a 	bl	800b270 <prvSearchForNameWithinSingleList>
 800b39c:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800b39e:	693b      	ldr	r3, [r7, #16]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d103      	bne.n	800b3ac <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3a4:	697b      	ldr	r3, [r7, #20]
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d1ea      	bne.n	800b380 <xTaskGetHandle+0x34>
 800b3aa:	e000      	b.n	800b3ae <xTaskGetHandle+0x62>
					break;
 800b3ac:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800b3ae:	693b      	ldr	r3, [r7, #16]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d106      	bne.n	800b3c2 <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800b3b4:	4b14      	ldr	r3, [pc, #80]	@ (800b408 <xTaskGetHandle+0xbc>)
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	6879      	ldr	r1, [r7, #4]
 800b3ba:	4618      	mov	r0, r3
 800b3bc:	f7ff ff58 	bl	800b270 <prvSearchForNameWithinSingleList>
 800b3c0:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800b3c2:	693b      	ldr	r3, [r7, #16]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d106      	bne.n	800b3d6 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800b3c8:	4b10      	ldr	r3, [pc, #64]	@ (800b40c <xTaskGetHandle+0xc0>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6879      	ldr	r1, [r7, #4]
 800b3ce:	4618      	mov	r0, r3
 800b3d0:	f7ff ff4e 	bl	800b270 <prvSearchForNameWithinSingleList>
 800b3d4:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800b3d6:	693b      	ldr	r3, [r7, #16]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d104      	bne.n	800b3e6 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800b3dc:	6879      	ldr	r1, [r7, #4]
 800b3de:	480c      	ldr	r0, [pc, #48]	@ (800b410 <xTaskGetHandle+0xc4>)
 800b3e0:	f7ff ff46 	bl	800b270 <prvSearchForNameWithinSingleList>
 800b3e4:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d104      	bne.n	800b3f6 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	4809      	ldr	r0, [pc, #36]	@ (800b414 <xTaskGetHandle+0xc8>)
 800b3f0:	f7ff ff3e 	bl	800b270 <prvSearchForNameWithinSingleList>
 800b3f4:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800b3f6:	f7ff fe67 	bl	800b0c8 <xTaskResumeAll>

		return pxTCB;
 800b3fa:	693b      	ldr	r3, [r7, #16]
	}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	200012e4 	.word	0x200012e4
 800b408:	2000176c 	.word	0x2000176c
 800b40c:	20001770 	.word	0x20001770
 800b410:	200017a0 	.word	0x200017a0
 800b414:	20001788 	.word	0x20001788

0800b418 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b418:	b580      	push	{r7, lr}
 800b41a:	b086      	sub	sp, #24
 800b41c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b41e:	2300      	movs	r3, #0
 800b420:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b422:	4b4f      	ldr	r3, [pc, #316]	@ (800b560 <xTaskIncrementTick+0x148>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	2b00      	cmp	r3, #0
 800b428:	f040 8090 	bne.w	800b54c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b42c:	4b4d      	ldr	r3, [pc, #308]	@ (800b564 <xTaskIncrementTick+0x14c>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b434:	4a4b      	ldr	r2, [pc, #300]	@ (800b564 <xTaskIncrementTick+0x14c>)
 800b436:	693b      	ldr	r3, [r7, #16]
 800b438:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b43a:	693b      	ldr	r3, [r7, #16]
 800b43c:	2b00      	cmp	r3, #0
 800b43e:	d121      	bne.n	800b484 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b440:	4b49      	ldr	r3, [pc, #292]	@ (800b568 <xTaskIncrementTick+0x150>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d00b      	beq.n	800b462 <xTaskIncrementTick+0x4a>
	__asm volatile
 800b44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b44e:	f383 8811 	msr	BASEPRI, r3
 800b452:	f3bf 8f6f 	isb	sy
 800b456:	f3bf 8f4f 	dsb	sy
 800b45a:	603b      	str	r3, [r7, #0]
}
 800b45c:	bf00      	nop
 800b45e:	bf00      	nop
 800b460:	e7fd      	b.n	800b45e <xTaskIncrementTick+0x46>
 800b462:	4b41      	ldr	r3, [pc, #260]	@ (800b568 <xTaskIncrementTick+0x150>)
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	60fb      	str	r3, [r7, #12]
 800b468:	4b40      	ldr	r3, [pc, #256]	@ (800b56c <xTaskIncrementTick+0x154>)
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	4a3e      	ldr	r2, [pc, #248]	@ (800b568 <xTaskIncrementTick+0x150>)
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	4a3e      	ldr	r2, [pc, #248]	@ (800b56c <xTaskIncrementTick+0x154>)
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	6013      	str	r3, [r2, #0]
 800b476:	4b3e      	ldr	r3, [pc, #248]	@ (800b570 <xTaskIncrementTick+0x158>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	3301      	adds	r3, #1
 800b47c:	4a3c      	ldr	r2, [pc, #240]	@ (800b570 <xTaskIncrementTick+0x158>)
 800b47e:	6013      	str	r3, [r2, #0]
 800b480:	f000 fae2 	bl	800ba48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b484:	4b3b      	ldr	r3, [pc, #236]	@ (800b574 <xTaskIncrementTick+0x15c>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	693a      	ldr	r2, [r7, #16]
 800b48a:	429a      	cmp	r2, r3
 800b48c:	d349      	bcc.n	800b522 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b48e:	4b36      	ldr	r3, [pc, #216]	@ (800b568 <xTaskIncrementTick+0x150>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d104      	bne.n	800b4a2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b498:	4b36      	ldr	r3, [pc, #216]	@ (800b574 <xTaskIncrementTick+0x15c>)
 800b49a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b49e:	601a      	str	r2, [r3, #0]
					break;
 800b4a0:	e03f      	b.n	800b522 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4a2:	4b31      	ldr	r3, [pc, #196]	@ (800b568 <xTaskIncrementTick+0x150>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	68db      	ldr	r3, [r3, #12]
 800b4a8:	68db      	ldr	r3, [r3, #12]
 800b4aa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b4b2:	693a      	ldr	r2, [r7, #16]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d203      	bcs.n	800b4c2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b4ba:	4a2e      	ldr	r2, [pc, #184]	@ (800b574 <xTaskIncrementTick+0x15c>)
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b4c0:	e02f      	b.n	800b522 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	3304      	adds	r3, #4
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	f7fe fe68 	bl	800a19c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d004      	beq.n	800b4de <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	3318      	adds	r3, #24
 800b4d8:	4618      	mov	r0, r3
 800b4da:	f7fe fe5f 	bl	800a19c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e2:	4b25      	ldr	r3, [pc, #148]	@ (800b578 <xTaskIncrementTick+0x160>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d903      	bls.n	800b4f2 <xTaskIncrementTick+0xda>
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ee:	4a22      	ldr	r2, [pc, #136]	@ (800b578 <xTaskIncrementTick+0x160>)
 800b4f0:	6013      	str	r3, [r2, #0]
 800b4f2:	68bb      	ldr	r3, [r7, #8]
 800b4f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4f6:	4613      	mov	r3, r2
 800b4f8:	009b      	lsls	r3, r3, #2
 800b4fa:	4413      	add	r3, r2
 800b4fc:	009b      	lsls	r3, r3, #2
 800b4fe:	4a1f      	ldr	r2, [pc, #124]	@ (800b57c <xTaskIncrementTick+0x164>)
 800b500:	441a      	add	r2, r3
 800b502:	68bb      	ldr	r3, [r7, #8]
 800b504:	3304      	adds	r3, #4
 800b506:	4619      	mov	r1, r3
 800b508:	4610      	mov	r0, r2
 800b50a:	f7fe fdea 	bl	800a0e2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b512:	4b1b      	ldr	r3, [pc, #108]	@ (800b580 <xTaskIncrementTick+0x168>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b518:	429a      	cmp	r2, r3
 800b51a:	d3b8      	bcc.n	800b48e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b51c:	2301      	movs	r3, #1
 800b51e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b520:	e7b5      	b.n	800b48e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b522:	4b17      	ldr	r3, [pc, #92]	@ (800b580 <xTaskIncrementTick+0x168>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b528:	4914      	ldr	r1, [pc, #80]	@ (800b57c <xTaskIncrementTick+0x164>)
 800b52a:	4613      	mov	r3, r2
 800b52c:	009b      	lsls	r3, r3, #2
 800b52e:	4413      	add	r3, r2
 800b530:	009b      	lsls	r3, r3, #2
 800b532:	440b      	add	r3, r1
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	2b01      	cmp	r3, #1
 800b538:	d901      	bls.n	800b53e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b53a:	2301      	movs	r3, #1
 800b53c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b53e:	4b11      	ldr	r3, [pc, #68]	@ (800b584 <xTaskIncrementTick+0x16c>)
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d007      	beq.n	800b556 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b546:	2301      	movs	r3, #1
 800b548:	617b      	str	r3, [r7, #20]
 800b54a:	e004      	b.n	800b556 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b54c:	4b0e      	ldr	r3, [pc, #56]	@ (800b588 <xTaskIncrementTick+0x170>)
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	3301      	adds	r3, #1
 800b552:	4a0d      	ldr	r2, [pc, #52]	@ (800b588 <xTaskIncrementTick+0x170>)
 800b554:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b556:	697b      	ldr	r3, [r7, #20]
}
 800b558:	4618      	mov	r0, r3
 800b55a:	3718      	adds	r7, #24
 800b55c:	46bd      	mov	sp, r7
 800b55e:	bd80      	pop	{r7, pc}
 800b560:	200017dc 	.word	0x200017dc
 800b564:	200017b8 	.word	0x200017b8
 800b568:	2000176c 	.word	0x2000176c
 800b56c:	20001770 	.word	0x20001770
 800b570:	200017cc 	.word	0x200017cc
 800b574:	200017d4 	.word	0x200017d4
 800b578:	200017bc 	.word	0x200017bc
 800b57c:	200012e4 	.word	0x200012e4
 800b580:	200012e0 	.word	0x200012e0
 800b584:	200017c8 	.word	0x200017c8
 800b588:	200017c4 	.word	0x200017c4

0800b58c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b58c:	b480      	push	{r7}
 800b58e:	b085      	sub	sp, #20
 800b590:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b592:	4b2b      	ldr	r3, [pc, #172]	@ (800b640 <vTaskSwitchContext+0xb4>)
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d003      	beq.n	800b5a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b59a:	4b2a      	ldr	r3, [pc, #168]	@ (800b644 <vTaskSwitchContext+0xb8>)
 800b59c:	2201      	movs	r2, #1
 800b59e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b5a0:	e047      	b.n	800b632 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b5a2:	4b28      	ldr	r3, [pc, #160]	@ (800b644 <vTaskSwitchContext+0xb8>)
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5a8:	4b27      	ldr	r3, [pc, #156]	@ (800b648 <vTaskSwitchContext+0xbc>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	60fb      	str	r3, [r7, #12]
 800b5ae:	e011      	b.n	800b5d4 <vTaskSwitchContext+0x48>
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d10b      	bne.n	800b5ce <vTaskSwitchContext+0x42>
	__asm volatile
 800b5b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ba:	f383 8811 	msr	BASEPRI, r3
 800b5be:	f3bf 8f6f 	isb	sy
 800b5c2:	f3bf 8f4f 	dsb	sy
 800b5c6:	607b      	str	r3, [r7, #4]
}
 800b5c8:	bf00      	nop
 800b5ca:	bf00      	nop
 800b5cc:	e7fd      	b.n	800b5ca <vTaskSwitchContext+0x3e>
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	3b01      	subs	r3, #1
 800b5d2:	60fb      	str	r3, [r7, #12]
 800b5d4:	491d      	ldr	r1, [pc, #116]	@ (800b64c <vTaskSwitchContext+0xc0>)
 800b5d6:	68fa      	ldr	r2, [r7, #12]
 800b5d8:	4613      	mov	r3, r2
 800b5da:	009b      	lsls	r3, r3, #2
 800b5dc:	4413      	add	r3, r2
 800b5de:	009b      	lsls	r3, r3, #2
 800b5e0:	440b      	add	r3, r1
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d0e3      	beq.n	800b5b0 <vTaskSwitchContext+0x24>
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	009b      	lsls	r3, r3, #2
 800b5ee:	4413      	add	r3, r2
 800b5f0:	009b      	lsls	r3, r3, #2
 800b5f2:	4a16      	ldr	r2, [pc, #88]	@ (800b64c <vTaskSwitchContext+0xc0>)
 800b5f4:	4413      	add	r3, r2
 800b5f6:	60bb      	str	r3, [r7, #8]
 800b5f8:	68bb      	ldr	r3, [r7, #8]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	685a      	ldr	r2, [r3, #4]
 800b5fe:	68bb      	ldr	r3, [r7, #8]
 800b600:	605a      	str	r2, [r3, #4]
 800b602:	68bb      	ldr	r3, [r7, #8]
 800b604:	685a      	ldr	r2, [r3, #4]
 800b606:	68bb      	ldr	r3, [r7, #8]
 800b608:	3308      	adds	r3, #8
 800b60a:	429a      	cmp	r2, r3
 800b60c:	d104      	bne.n	800b618 <vTaskSwitchContext+0x8c>
 800b60e:	68bb      	ldr	r3, [r7, #8]
 800b610:	685b      	ldr	r3, [r3, #4]
 800b612:	685a      	ldr	r2, [r3, #4]
 800b614:	68bb      	ldr	r3, [r7, #8]
 800b616:	605a      	str	r2, [r3, #4]
 800b618:	68bb      	ldr	r3, [r7, #8]
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	4a0c      	ldr	r2, [pc, #48]	@ (800b650 <vTaskSwitchContext+0xc4>)
 800b620:	6013      	str	r3, [r2, #0]
 800b622:	4a09      	ldr	r2, [pc, #36]	@ (800b648 <vTaskSwitchContext+0xbc>)
 800b624:	68fb      	ldr	r3, [r7, #12]
 800b626:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b628:	4b09      	ldr	r3, [pc, #36]	@ (800b650 <vTaskSwitchContext+0xc4>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	3354      	adds	r3, #84	@ 0x54
 800b62e:	4a09      	ldr	r2, [pc, #36]	@ (800b654 <vTaskSwitchContext+0xc8>)
 800b630:	6013      	str	r3, [r2, #0]
}
 800b632:	bf00      	nop
 800b634:	3714      	adds	r7, #20
 800b636:	46bd      	mov	sp, r7
 800b638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b63c:	4770      	bx	lr
 800b63e:	bf00      	nop
 800b640:	200017dc 	.word	0x200017dc
 800b644:	200017c8 	.word	0x200017c8
 800b648:	200017bc 	.word	0x200017bc
 800b64c:	200012e4 	.word	0x200012e4
 800b650:	200012e0 	.word	0x200012e0
 800b654:	2000002c 	.word	0x2000002c

0800b658 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b658:	b580      	push	{r7, lr}
 800b65a:	b084      	sub	sp, #16
 800b65c:	af00      	add	r7, sp, #0
 800b65e:	6078      	str	r0, [r7, #4]
 800b660:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b00      	cmp	r3, #0
 800b666:	d10b      	bne.n	800b680 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b66c:	f383 8811 	msr	BASEPRI, r3
 800b670:	f3bf 8f6f 	isb	sy
 800b674:	f3bf 8f4f 	dsb	sy
 800b678:	60fb      	str	r3, [r7, #12]
}
 800b67a:	bf00      	nop
 800b67c:	bf00      	nop
 800b67e:	e7fd      	b.n	800b67c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b680:	4b07      	ldr	r3, [pc, #28]	@ (800b6a0 <vTaskPlaceOnEventList+0x48>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	3318      	adds	r3, #24
 800b686:	4619      	mov	r1, r3
 800b688:	6878      	ldr	r0, [r7, #4]
 800b68a:	f7fe fd4e 	bl	800a12a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b68e:	2101      	movs	r1, #1
 800b690:	6838      	ldr	r0, [r7, #0]
 800b692:	f000 fb69 	bl	800bd68 <prvAddCurrentTaskToDelayedList>
}
 800b696:	bf00      	nop
 800b698:	3710      	adds	r7, #16
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	200012e0 	.word	0x200012e0

0800b6a4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b086      	sub	sp, #24
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10b      	bne.n	800b6ce <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	617b      	str	r3, [r7, #20]
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	e7fd      	b.n	800b6ca <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6ce:	4b0a      	ldr	r3, [pc, #40]	@ (800b6f8 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	3318      	adds	r3, #24
 800b6d4:	4619      	mov	r1, r3
 800b6d6:	68f8      	ldr	r0, [r7, #12]
 800b6d8:	f7fe fd03 	bl	800a0e2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d002      	beq.n	800b6e8 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b6e2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6e6:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	68b8      	ldr	r0, [r7, #8]
 800b6ec:	f000 fb3c 	bl	800bd68 <prvAddCurrentTaskToDelayedList>
	}
 800b6f0:	bf00      	nop
 800b6f2:	3718      	adds	r7, #24
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}
 800b6f8:	200012e0 	.word	0x200012e0

0800b6fc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	68db      	ldr	r3, [r3, #12]
 800b708:	68db      	ldr	r3, [r3, #12]
 800b70a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b70c:	693b      	ldr	r3, [r7, #16]
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d10b      	bne.n	800b72a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b716:	f383 8811 	msr	BASEPRI, r3
 800b71a:	f3bf 8f6f 	isb	sy
 800b71e:	f3bf 8f4f 	dsb	sy
 800b722:	60fb      	str	r3, [r7, #12]
}
 800b724:	bf00      	nop
 800b726:	bf00      	nop
 800b728:	e7fd      	b.n	800b726 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b72a:	693b      	ldr	r3, [r7, #16]
 800b72c:	3318      	adds	r3, #24
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fd34 	bl	800a19c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b734:	4b1d      	ldr	r3, [pc, #116]	@ (800b7ac <xTaskRemoveFromEventList+0xb0>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d11d      	bne.n	800b778 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b73c:	693b      	ldr	r3, [r7, #16]
 800b73e:	3304      	adds	r3, #4
 800b740:	4618      	mov	r0, r3
 800b742:	f7fe fd2b 	bl	800a19c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b74a:	4b19      	ldr	r3, [pc, #100]	@ (800b7b0 <xTaskRemoveFromEventList+0xb4>)
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	429a      	cmp	r2, r3
 800b750:	d903      	bls.n	800b75a <xTaskRemoveFromEventList+0x5e>
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b756:	4a16      	ldr	r2, [pc, #88]	@ (800b7b0 <xTaskRemoveFromEventList+0xb4>)
 800b758:	6013      	str	r3, [r2, #0]
 800b75a:	693b      	ldr	r3, [r7, #16]
 800b75c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75e:	4613      	mov	r3, r2
 800b760:	009b      	lsls	r3, r3, #2
 800b762:	4413      	add	r3, r2
 800b764:	009b      	lsls	r3, r3, #2
 800b766:	4a13      	ldr	r2, [pc, #76]	@ (800b7b4 <xTaskRemoveFromEventList+0xb8>)
 800b768:	441a      	add	r2, r3
 800b76a:	693b      	ldr	r3, [r7, #16]
 800b76c:	3304      	adds	r3, #4
 800b76e:	4619      	mov	r1, r3
 800b770:	4610      	mov	r0, r2
 800b772:	f7fe fcb6 	bl	800a0e2 <vListInsertEnd>
 800b776:	e005      	b.n	800b784 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	3318      	adds	r3, #24
 800b77c:	4619      	mov	r1, r3
 800b77e:	480e      	ldr	r0, [pc, #56]	@ (800b7b8 <xTaskRemoveFromEventList+0xbc>)
 800b780:	f7fe fcaf 	bl	800a0e2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b788:	4b0c      	ldr	r3, [pc, #48]	@ (800b7bc <xTaskRemoveFromEventList+0xc0>)
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b78e:	429a      	cmp	r2, r3
 800b790:	d905      	bls.n	800b79e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b792:	2301      	movs	r3, #1
 800b794:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b796:	4b0a      	ldr	r3, [pc, #40]	@ (800b7c0 <xTaskRemoveFromEventList+0xc4>)
 800b798:	2201      	movs	r2, #1
 800b79a:	601a      	str	r2, [r3, #0]
 800b79c:	e001      	b.n	800b7a2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b79e:	2300      	movs	r3, #0
 800b7a0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b7a2:	697b      	ldr	r3, [r7, #20]
}
 800b7a4:	4618      	mov	r0, r3
 800b7a6:	3718      	adds	r7, #24
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	bd80      	pop	{r7, pc}
 800b7ac:	200017dc 	.word	0x200017dc
 800b7b0:	200017bc 	.word	0x200017bc
 800b7b4:	200012e4 	.word	0x200012e4
 800b7b8:	20001774 	.word	0x20001774
 800b7bc:	200012e0 	.word	0x200012e0
 800b7c0:	200017c8 	.word	0x200017c8

0800b7c4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b083      	sub	sp, #12
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7cc:	4b06      	ldr	r3, [pc, #24]	@ (800b7e8 <vTaskInternalSetTimeOutState+0x24>)
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7d4:	4b05      	ldr	r3, [pc, #20]	@ (800b7ec <vTaskInternalSetTimeOutState+0x28>)
 800b7d6:	681a      	ldr	r2, [r3, #0]
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	605a      	str	r2, [r3, #4]
}
 800b7dc:	bf00      	nop
 800b7de:	370c      	adds	r7, #12
 800b7e0:	46bd      	mov	sp, r7
 800b7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e6:	4770      	bx	lr
 800b7e8:	200017cc 	.word	0x200017cc
 800b7ec:	200017b8 	.word	0x200017b8

0800b7f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b088      	sub	sp, #32
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
 800b7f8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d10b      	bne.n	800b818 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b804:	f383 8811 	msr	BASEPRI, r3
 800b808:	f3bf 8f6f 	isb	sy
 800b80c:	f3bf 8f4f 	dsb	sy
 800b810:	613b      	str	r3, [r7, #16]
}
 800b812:	bf00      	nop
 800b814:	bf00      	nop
 800b816:	e7fd      	b.n	800b814 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b818:	683b      	ldr	r3, [r7, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d10b      	bne.n	800b836 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b822:	f383 8811 	msr	BASEPRI, r3
 800b826:	f3bf 8f6f 	isb	sy
 800b82a:	f3bf 8f4f 	dsb	sy
 800b82e:	60fb      	str	r3, [r7, #12]
}
 800b830:	bf00      	nop
 800b832:	bf00      	nop
 800b834:	e7fd      	b.n	800b832 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b836:	f000 ff77 	bl	800c728 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b83a:	4b1d      	ldr	r3, [pc, #116]	@ (800b8b0 <xTaskCheckForTimeOut+0xc0>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	69ba      	ldr	r2, [r7, #24]
 800b846:	1ad3      	subs	r3, r2, r3
 800b848:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b84a:	683b      	ldr	r3, [r7, #0]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b852:	d102      	bne.n	800b85a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b854:	2300      	movs	r3, #0
 800b856:	61fb      	str	r3, [r7, #28]
 800b858:	e023      	b.n	800b8a2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	4b15      	ldr	r3, [pc, #84]	@ (800b8b4 <xTaskCheckForTimeOut+0xc4>)
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	429a      	cmp	r2, r3
 800b864:	d007      	beq.n	800b876 <xTaskCheckForTimeOut+0x86>
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	69ba      	ldr	r2, [r7, #24]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	d302      	bcc.n	800b876 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b870:	2301      	movs	r3, #1
 800b872:	61fb      	str	r3, [r7, #28]
 800b874:	e015      	b.n	800b8a2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	697a      	ldr	r2, [r7, #20]
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d20b      	bcs.n	800b898 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b880:	683b      	ldr	r3, [r7, #0]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	1ad2      	subs	r2, r2, r3
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f7ff ff99 	bl	800b7c4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b892:	2300      	movs	r3, #0
 800b894:	61fb      	str	r3, [r7, #28]
 800b896:	e004      	b.n	800b8a2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	2200      	movs	r2, #0
 800b89c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b89e:	2301      	movs	r3, #1
 800b8a0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b8a2:	f000 ff73 	bl	800c78c <vPortExitCritical>

	return xReturn;
 800b8a6:	69fb      	ldr	r3, [r7, #28]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3720      	adds	r7, #32
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}
 800b8b0:	200017b8 	.word	0x200017b8
 800b8b4:	200017cc 	.word	0x200017cc

0800b8b8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b8b8:	b480      	push	{r7}
 800b8ba:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b8bc:	4b03      	ldr	r3, [pc, #12]	@ (800b8cc <vTaskMissedYield+0x14>)
 800b8be:	2201      	movs	r2, #1
 800b8c0:	601a      	str	r2, [r3, #0]
}
 800b8c2:	bf00      	nop
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr
 800b8cc:	200017c8 	.word	0x200017c8

0800b8d0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8d8:	f000 f852 	bl	800b980 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8dc:	4b06      	ldr	r3, [pc, #24]	@ (800b8f8 <prvIdleTask+0x28>)
 800b8de:	681b      	ldr	r3, [r3, #0]
 800b8e0:	2b01      	cmp	r3, #1
 800b8e2:	d9f9      	bls.n	800b8d8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8e4:	4b05      	ldr	r3, [pc, #20]	@ (800b8fc <prvIdleTask+0x2c>)
 800b8e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8ea:	601a      	str	r2, [r3, #0]
 800b8ec:	f3bf 8f4f 	dsb	sy
 800b8f0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8f4:	e7f0      	b.n	800b8d8 <prvIdleTask+0x8>
 800b8f6:	bf00      	nop
 800b8f8:	200012e4 	.word	0x200012e4
 800b8fc:	e000ed04 	.word	0xe000ed04

0800b900 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b082      	sub	sp, #8
 800b904:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b906:	2300      	movs	r3, #0
 800b908:	607b      	str	r3, [r7, #4]
 800b90a:	e00c      	b.n	800b926 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b90c:	687a      	ldr	r2, [r7, #4]
 800b90e:	4613      	mov	r3, r2
 800b910:	009b      	lsls	r3, r3, #2
 800b912:	4413      	add	r3, r2
 800b914:	009b      	lsls	r3, r3, #2
 800b916:	4a12      	ldr	r2, [pc, #72]	@ (800b960 <prvInitialiseTaskLists+0x60>)
 800b918:	4413      	add	r3, r2
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe fbb4 	bl	800a088 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	3301      	adds	r3, #1
 800b924:	607b      	str	r3, [r7, #4]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2b37      	cmp	r3, #55	@ 0x37
 800b92a:	d9ef      	bls.n	800b90c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b92c:	480d      	ldr	r0, [pc, #52]	@ (800b964 <prvInitialiseTaskLists+0x64>)
 800b92e:	f7fe fbab 	bl	800a088 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b932:	480d      	ldr	r0, [pc, #52]	@ (800b968 <prvInitialiseTaskLists+0x68>)
 800b934:	f7fe fba8 	bl	800a088 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b938:	480c      	ldr	r0, [pc, #48]	@ (800b96c <prvInitialiseTaskLists+0x6c>)
 800b93a:	f7fe fba5 	bl	800a088 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b93e:	480c      	ldr	r0, [pc, #48]	@ (800b970 <prvInitialiseTaskLists+0x70>)
 800b940:	f7fe fba2 	bl	800a088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b944:	480b      	ldr	r0, [pc, #44]	@ (800b974 <prvInitialiseTaskLists+0x74>)
 800b946:	f7fe fb9f 	bl	800a088 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b94a:	4b0b      	ldr	r3, [pc, #44]	@ (800b978 <prvInitialiseTaskLists+0x78>)
 800b94c:	4a05      	ldr	r2, [pc, #20]	@ (800b964 <prvInitialiseTaskLists+0x64>)
 800b94e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b950:	4b0a      	ldr	r3, [pc, #40]	@ (800b97c <prvInitialiseTaskLists+0x7c>)
 800b952:	4a05      	ldr	r2, [pc, #20]	@ (800b968 <prvInitialiseTaskLists+0x68>)
 800b954:	601a      	str	r2, [r3, #0]
}
 800b956:	bf00      	nop
 800b958:	3708      	adds	r7, #8
 800b95a:	46bd      	mov	sp, r7
 800b95c:	bd80      	pop	{r7, pc}
 800b95e:	bf00      	nop
 800b960:	200012e4 	.word	0x200012e4
 800b964:	20001744 	.word	0x20001744
 800b968:	20001758 	.word	0x20001758
 800b96c:	20001774 	.word	0x20001774
 800b970:	20001788 	.word	0x20001788
 800b974:	200017a0 	.word	0x200017a0
 800b978:	2000176c 	.word	0x2000176c
 800b97c:	20001770 	.word	0x20001770

0800b980 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b980:	b580      	push	{r7, lr}
 800b982:	b082      	sub	sp, #8
 800b984:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b986:	e019      	b.n	800b9bc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b988:	f000 fece 	bl	800c728 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b98c:	4b10      	ldr	r3, [pc, #64]	@ (800b9d0 <prvCheckTasksWaitingTermination+0x50>)
 800b98e:	68db      	ldr	r3, [r3, #12]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3304      	adds	r3, #4
 800b998:	4618      	mov	r0, r3
 800b99a:	f7fe fbff 	bl	800a19c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b99e:	4b0d      	ldr	r3, [pc, #52]	@ (800b9d4 <prvCheckTasksWaitingTermination+0x54>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	4a0b      	ldr	r2, [pc, #44]	@ (800b9d4 <prvCheckTasksWaitingTermination+0x54>)
 800b9a6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b9a8:	4b0b      	ldr	r3, [pc, #44]	@ (800b9d8 <prvCheckTasksWaitingTermination+0x58>)
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	3b01      	subs	r3, #1
 800b9ae:	4a0a      	ldr	r2, [pc, #40]	@ (800b9d8 <prvCheckTasksWaitingTermination+0x58>)
 800b9b0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b9b2:	f000 feeb 	bl	800c78c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 f810 	bl	800b9dc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b9bc:	4b06      	ldr	r3, [pc, #24]	@ (800b9d8 <prvCheckTasksWaitingTermination+0x58>)
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	2b00      	cmp	r3, #0
 800b9c2:	d1e1      	bne.n	800b988 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9c4:	bf00      	nop
 800b9c6:	bf00      	nop
 800b9c8:	3708      	adds	r7, #8
 800b9ca:	46bd      	mov	sp, r7
 800b9cc:	bd80      	pop	{r7, pc}
 800b9ce:	bf00      	nop
 800b9d0:	20001788 	.word	0x20001788
 800b9d4:	200017b4 	.word	0x200017b4
 800b9d8:	2000179c 	.word	0x2000179c

0800b9dc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b084      	sub	sp, #16
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	3354      	adds	r3, #84	@ 0x54
 800b9e8:	4618      	mov	r0, r3
 800b9ea:	f001 f9b5 	bl	800cd58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d108      	bne.n	800ba0a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	f001 f883 	bl	800cb08 <vPortFree>
				vPortFree( pxTCB );
 800ba02:	6878      	ldr	r0, [r7, #4]
 800ba04:	f001 f880 	bl	800cb08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ba08:	e019      	b.n	800ba3e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba10:	2b01      	cmp	r3, #1
 800ba12:	d103      	bne.n	800ba1c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ba14:	6878      	ldr	r0, [r7, #4]
 800ba16:	f001 f877 	bl	800cb08 <vPortFree>
	}
 800ba1a:	e010      	b.n	800ba3e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d00b      	beq.n	800ba3e <prvDeleteTCB+0x62>
	__asm volatile
 800ba26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba2a:	f383 8811 	msr	BASEPRI, r3
 800ba2e:	f3bf 8f6f 	isb	sy
 800ba32:	f3bf 8f4f 	dsb	sy
 800ba36:	60fb      	str	r3, [r7, #12]
}
 800ba38:	bf00      	nop
 800ba3a:	bf00      	nop
 800ba3c:	e7fd      	b.n	800ba3a <prvDeleteTCB+0x5e>
	}
 800ba3e:	bf00      	nop
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba4e:	4b0c      	ldr	r3, [pc, #48]	@ (800ba80 <prvResetNextTaskUnblockTime+0x38>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d104      	bne.n	800ba62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba58:	4b0a      	ldr	r3, [pc, #40]	@ (800ba84 <prvResetNextTaskUnblockTime+0x3c>)
 800ba5a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba60:	e008      	b.n	800ba74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba62:	4b07      	ldr	r3, [pc, #28]	@ (800ba80 <prvResetNextTaskUnblockTime+0x38>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	68db      	ldr	r3, [r3, #12]
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	4a04      	ldr	r2, [pc, #16]	@ (800ba84 <prvResetNextTaskUnblockTime+0x3c>)
 800ba72:	6013      	str	r3, [r2, #0]
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr
 800ba80:	2000176c 	.word	0x2000176c
 800ba84:	200017d4 	.word	0x200017d4

0800ba88 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba88:	b480      	push	{r7}
 800ba8a:	b083      	sub	sp, #12
 800ba8c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba8e:	4b0b      	ldr	r3, [pc, #44]	@ (800babc <xTaskGetSchedulerState+0x34>)
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d102      	bne.n	800ba9c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba96:	2301      	movs	r3, #1
 800ba98:	607b      	str	r3, [r7, #4]
 800ba9a:	e008      	b.n	800baae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba9c:	4b08      	ldr	r3, [pc, #32]	@ (800bac0 <xTaskGetSchedulerState+0x38>)
 800ba9e:	681b      	ldr	r3, [r3, #0]
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	d102      	bne.n	800baaa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800baa4:	2302      	movs	r3, #2
 800baa6:	607b      	str	r3, [r7, #4]
 800baa8:	e001      	b.n	800baae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800baaa:	2300      	movs	r3, #0
 800baac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800baae:	687b      	ldr	r3, [r7, #4]
	}
 800bab0:	4618      	mov	r0, r3
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr
 800babc:	200017c0 	.word	0x200017c0
 800bac0:	200017dc 	.word	0x200017dc

0800bac4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b086      	sub	sp, #24
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d058      	beq.n	800bb8c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bada:	4b2f      	ldr	r3, [pc, #188]	@ (800bb98 <xTaskPriorityDisinherit+0xd4>)
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	693a      	ldr	r2, [r7, #16]
 800bae0:	429a      	cmp	r2, r3
 800bae2:	d00b      	beq.n	800bafc <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bae8:	f383 8811 	msr	BASEPRI, r3
 800baec:	f3bf 8f6f 	isb	sy
 800baf0:	f3bf 8f4f 	dsb	sy
 800baf4:	60fb      	str	r3, [r7, #12]
}
 800baf6:	bf00      	nop
 800baf8:	bf00      	nop
 800bafa:	e7fd      	b.n	800baf8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bafc:	693b      	ldr	r3, [r7, #16]
 800bafe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d10b      	bne.n	800bb1c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb08:	f383 8811 	msr	BASEPRI, r3
 800bb0c:	f3bf 8f6f 	isb	sy
 800bb10:	f3bf 8f4f 	dsb	sy
 800bb14:	60bb      	str	r3, [r7, #8]
}
 800bb16:	bf00      	nop
 800bb18:	bf00      	nop
 800bb1a:	e7fd      	b.n	800bb18 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb20:	1e5a      	subs	r2, r3, #1
 800bb22:	693b      	ldr	r3, [r7, #16]
 800bb24:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bb26:	693b      	ldr	r3, [r7, #16]
 800bb28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb2a:	693b      	ldr	r3, [r7, #16]
 800bb2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb2e:	429a      	cmp	r2, r3
 800bb30:	d02c      	beq.n	800bb8c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bb32:	693b      	ldr	r3, [r7, #16]
 800bb34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d128      	bne.n	800bb8c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bb3a:	693b      	ldr	r3, [r7, #16]
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	4618      	mov	r0, r3
 800bb40:	f7fe fb2c 	bl	800a19c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bb44:	693b      	ldr	r3, [r7, #16]
 800bb46:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb48:	693b      	ldr	r3, [r7, #16]
 800bb4a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb4c:	693b      	ldr	r3, [r7, #16]
 800bb4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb50:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bb54:	693b      	ldr	r3, [r7, #16]
 800bb56:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bb58:	693b      	ldr	r3, [r7, #16]
 800bb5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb5c:	4b0f      	ldr	r3, [pc, #60]	@ (800bb9c <xTaskPriorityDisinherit+0xd8>)
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d903      	bls.n	800bb6c <xTaskPriorityDisinherit+0xa8>
 800bb64:	693b      	ldr	r3, [r7, #16]
 800bb66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb68:	4a0c      	ldr	r2, [pc, #48]	@ (800bb9c <xTaskPriorityDisinherit+0xd8>)
 800bb6a:	6013      	str	r3, [r2, #0]
 800bb6c:	693b      	ldr	r3, [r7, #16]
 800bb6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb70:	4613      	mov	r3, r2
 800bb72:	009b      	lsls	r3, r3, #2
 800bb74:	4413      	add	r3, r2
 800bb76:	009b      	lsls	r3, r3, #2
 800bb78:	4a09      	ldr	r2, [pc, #36]	@ (800bba0 <xTaskPriorityDisinherit+0xdc>)
 800bb7a:	441a      	add	r2, r3
 800bb7c:	693b      	ldr	r3, [r7, #16]
 800bb7e:	3304      	adds	r3, #4
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	f7fe faad 	bl	800a0e2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb8c:	697b      	ldr	r3, [r7, #20]
	}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3718      	adds	r7, #24
 800bb92:	46bd      	mov	sp, r7
 800bb94:	bd80      	pop	{r7, pc}
 800bb96:	bf00      	nop
 800bb98:	200012e0 	.word	0x200012e0
 800bb9c:	200017bc 	.word	0x200017bc
 800bba0:	200012e4 	.word	0x200012e4

0800bba4 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800bbae:	f000 fdbb 	bl	800c728 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800bbb2:	4b20      	ldr	r3, [pc, #128]	@ (800bc34 <ulTaskNotifyTake+0x90>)
 800bbb4:	681b      	ldr	r3, [r3, #0]
 800bbb6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d113      	bne.n	800bbe6 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800bbbe:	4b1d      	ldr	r3, [pc, #116]	@ (800bc34 <ulTaskNotifyTake+0x90>)
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800bbc8:	683b      	ldr	r3, [r7, #0]
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d00b      	beq.n	800bbe6 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bbce:	2101      	movs	r1, #1
 800bbd0:	6838      	ldr	r0, [r7, #0]
 800bbd2:	f000 f8c9 	bl	800bd68 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800bbd6:	4b18      	ldr	r3, [pc, #96]	@ (800bc38 <ulTaskNotifyTake+0x94>)
 800bbd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bbdc:	601a      	str	r2, [r3, #0]
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800bbe6:	f000 fdd1 	bl	800c78c <vPortExitCritical>

		taskENTER_CRITICAL();
 800bbea:	f000 fd9d 	bl	800c728 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800bbee:	4b11      	ldr	r3, [pc, #68]	@ (800bc34 <ulTaskNotifyTake+0x90>)
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bbf6:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800bbf8:	68fb      	ldr	r3, [r7, #12]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d00e      	beq.n	800bc1c <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d005      	beq.n	800bc10 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800bc04:	4b0b      	ldr	r3, [pc, #44]	@ (800bc34 <ulTaskNotifyTake+0x90>)
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800bc0e:	e005      	b.n	800bc1c <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800bc10:	4b08      	ldr	r3, [pc, #32]	@ (800bc34 <ulTaskNotifyTake+0x90>)
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	68fa      	ldr	r2, [r7, #12]
 800bc16:	3a01      	subs	r2, #1
 800bc18:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800bc1c:	4b05      	ldr	r3, [pc, #20]	@ (800bc34 <ulTaskNotifyTake+0x90>)
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	2200      	movs	r2, #0
 800bc22:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800bc26:	f000 fdb1 	bl	800c78c <vPortExitCritical>

		return ulReturn;
 800bc2a:	68fb      	ldr	r3, [r7, #12]
	}
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	3710      	adds	r7, #16
 800bc30:	46bd      	mov	sp, r7
 800bc32:	bd80      	pop	{r7, pc}
 800bc34:	200012e0 	.word	0x200012e0
 800bc38:	e000ed04 	.word	0xe000ed04

0800bc3c <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b08a      	sub	sp, #40	@ 0x28
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	2b00      	cmp	r3, #0
 800bc4a:	d10b      	bne.n	800bc64 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800bc4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc50:	f383 8811 	msr	BASEPRI, r3
 800bc54:	f3bf 8f6f 	isb	sy
 800bc58:	f3bf 8f4f 	dsb	sy
 800bc5c:	61bb      	str	r3, [r7, #24]
}
 800bc5e:	bf00      	nop
 800bc60:	bf00      	nop
 800bc62:	e7fd      	b.n	800bc60 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bc64:	f000 fe40 	bl	800c8e8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800bc6c:	f3ef 8211 	mrs	r2, BASEPRI
 800bc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	617a      	str	r2, [r7, #20]
 800bc82:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800bc84:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bc86:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc8a:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800bc8e:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800bc90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc92:	2202      	movs	r2, #2
 800bc94:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800bc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800bc9e:	1c5a      	adds	r2, r3, #1
 800bca0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800bca6:	7ffb      	ldrb	r3, [r7, #31]
 800bca8:	2b01      	cmp	r3, #1
 800bcaa:	d147      	bne.n	800bd3c <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800bcac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bcb0:	2b00      	cmp	r3, #0
 800bcb2:	d00b      	beq.n	800bccc <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800bcb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcb8:	f383 8811 	msr	BASEPRI, r3
 800bcbc:	f3bf 8f6f 	isb	sy
 800bcc0:	f3bf 8f4f 	dsb	sy
 800bcc4:	60fb      	str	r3, [r7, #12]
}
 800bcc6:	bf00      	nop
 800bcc8:	bf00      	nop
 800bcca:	e7fd      	b.n	800bcc8 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bccc:	4b20      	ldr	r3, [pc, #128]	@ (800bd50 <vTaskNotifyGiveFromISR+0x114>)
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d11d      	bne.n	800bd10 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bcd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcd6:	3304      	adds	r3, #4
 800bcd8:	4618      	mov	r0, r3
 800bcda:	f7fe fa5f 	bl	800a19c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800bcde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bce2:	4b1c      	ldr	r3, [pc, #112]	@ (800bd54 <vTaskNotifyGiveFromISR+0x118>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	429a      	cmp	r2, r3
 800bce8:	d903      	bls.n	800bcf2 <vTaskNotifyGiveFromISR+0xb6>
 800bcea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcee:	4a19      	ldr	r2, [pc, #100]	@ (800bd54 <vTaskNotifyGiveFromISR+0x118>)
 800bcf0:	6013      	str	r3, [r2, #0]
 800bcf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bcf6:	4613      	mov	r3, r2
 800bcf8:	009b      	lsls	r3, r3, #2
 800bcfa:	4413      	add	r3, r2
 800bcfc:	009b      	lsls	r3, r3, #2
 800bcfe:	4a16      	ldr	r2, [pc, #88]	@ (800bd58 <vTaskNotifyGiveFromISR+0x11c>)
 800bd00:	441a      	add	r2, r3
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	3304      	adds	r3, #4
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f7fe f9ea 	bl	800a0e2 <vListInsertEnd>
 800bd0e:	e005      	b.n	800bd1c <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800bd10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd12:	3318      	adds	r3, #24
 800bd14:	4619      	mov	r1, r3
 800bd16:	4811      	ldr	r0, [pc, #68]	@ (800bd5c <vTaskNotifyGiveFromISR+0x120>)
 800bd18:	f7fe f9e3 	bl	800a0e2 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bd1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd20:	4b0f      	ldr	r3, [pc, #60]	@ (800bd60 <vTaskNotifyGiveFromISR+0x124>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d908      	bls.n	800bd3c <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d002      	beq.n	800bd36 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800bd30:	683b      	ldr	r3, [r7, #0]
 800bd32:	2201      	movs	r2, #1
 800bd34:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800bd36:	4b0b      	ldr	r3, [pc, #44]	@ (800bd64 <vTaskNotifyGiveFromISR+0x128>)
 800bd38:	2201      	movs	r2, #1
 800bd3a:	601a      	str	r2, [r3, #0]
 800bd3c:	6a3b      	ldr	r3, [r7, #32]
 800bd3e:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	f383 8811 	msr	BASEPRI, r3
}
 800bd46:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800bd48:	bf00      	nop
 800bd4a:	3728      	adds	r7, #40	@ 0x28
 800bd4c:	46bd      	mov	sp, r7
 800bd4e:	bd80      	pop	{r7, pc}
 800bd50:	200017dc 	.word	0x200017dc
 800bd54:	200017bc 	.word	0x200017bc
 800bd58:	200012e4 	.word	0x200012e4
 800bd5c:	20001774 	.word	0x20001774
 800bd60:	200012e0 	.word	0x200012e0
 800bd64:	200017c8 	.word	0x200017c8

0800bd68 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
 800bd70:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd72:	4b21      	ldr	r3, [pc, #132]	@ (800bdf8 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd78:	4b20      	ldr	r3, [pc, #128]	@ (800bdfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bd7a:	681b      	ldr	r3, [r3, #0]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7fe fa0c 	bl	800a19c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bd8a:	d10a      	bne.n	800bda2 <prvAddCurrentTaskToDelayedList+0x3a>
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d007      	beq.n	800bda2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bd92:	4b1a      	ldr	r3, [pc, #104]	@ (800bdfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	3304      	adds	r3, #4
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4819      	ldr	r0, [pc, #100]	@ (800be00 <prvAddCurrentTaskToDelayedList+0x98>)
 800bd9c:	f7fe f9a1 	bl	800a0e2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bda0:	e026      	b.n	800bdf0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bda2:	68fa      	ldr	r2, [r7, #12]
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4413      	add	r3, r2
 800bda8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdaa:	4b14      	ldr	r3, [pc, #80]	@ (800bdfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	68ba      	ldr	r2, [r7, #8]
 800bdb0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdb2:	68ba      	ldr	r2, [r7, #8]
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d209      	bcs.n	800bdce <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdba:	4b12      	ldr	r3, [pc, #72]	@ (800be04 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	4b0f      	ldr	r3, [pc, #60]	@ (800bdfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	3304      	adds	r3, #4
 800bdc4:	4619      	mov	r1, r3
 800bdc6:	4610      	mov	r0, r2
 800bdc8:	f7fe f9af 	bl	800a12a <vListInsert>
}
 800bdcc:	e010      	b.n	800bdf0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdce:	4b0e      	ldr	r3, [pc, #56]	@ (800be08 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bdd0:	681a      	ldr	r2, [r3, #0]
 800bdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800bdfc <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	3304      	adds	r3, #4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4610      	mov	r0, r2
 800bddc:	f7fe f9a5 	bl	800a12a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bde0:	4b0a      	ldr	r3, [pc, #40]	@ (800be0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	68ba      	ldr	r2, [r7, #8]
 800bde6:	429a      	cmp	r2, r3
 800bde8:	d202      	bcs.n	800bdf0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bdea:	4a08      	ldr	r2, [pc, #32]	@ (800be0c <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdec:	68bb      	ldr	r3, [r7, #8]
 800bdee:	6013      	str	r3, [r2, #0]
}
 800bdf0:	bf00      	nop
 800bdf2:	3710      	adds	r7, #16
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	200017b8 	.word	0x200017b8
 800bdfc:	200012e0 	.word	0x200012e0
 800be00:	200017a0 	.word	0x200017a0
 800be04:	20001770 	.word	0x20001770
 800be08:	2000176c 	.word	0x2000176c
 800be0c:	200017d4 	.word	0x200017d4

0800be10 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be10:	b580      	push	{r7, lr}
 800be12:	b08a      	sub	sp, #40	@ 0x28
 800be14:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be16:	2300      	movs	r3, #0
 800be18:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be1a:	f000 fb13 	bl	800c444 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be1e:	4b1d      	ldr	r3, [pc, #116]	@ (800be94 <xTimerCreateTimerTask+0x84>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d021      	beq.n	800be6a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be26:	2300      	movs	r3, #0
 800be28:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be2a:	2300      	movs	r3, #0
 800be2c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be2e:	1d3a      	adds	r2, r7, #4
 800be30:	f107 0108 	add.w	r1, r7, #8
 800be34:	f107 030c 	add.w	r3, r7, #12
 800be38:	4618      	mov	r0, r3
 800be3a:	f7fe f90b 	bl	800a054 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be3e:	6879      	ldr	r1, [r7, #4]
 800be40:	68bb      	ldr	r3, [r7, #8]
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	9202      	str	r2, [sp, #8]
 800be46:	9301      	str	r3, [sp, #4]
 800be48:	2302      	movs	r3, #2
 800be4a:	9300      	str	r3, [sp, #0]
 800be4c:	2300      	movs	r3, #0
 800be4e:	460a      	mov	r2, r1
 800be50:	4911      	ldr	r1, [pc, #68]	@ (800be98 <xTimerCreateTimerTask+0x88>)
 800be52:	4812      	ldr	r0, [pc, #72]	@ (800be9c <xTimerCreateTimerTask+0x8c>)
 800be54:	f7fe fec6 	bl	800abe4 <xTaskCreateStatic>
 800be58:	4603      	mov	r3, r0
 800be5a:	4a11      	ldr	r2, [pc, #68]	@ (800bea0 <xTimerCreateTimerTask+0x90>)
 800be5c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be5e:	4b10      	ldr	r3, [pc, #64]	@ (800bea0 <xTimerCreateTimerTask+0x90>)
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d001      	beq.n	800be6a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be66:	2301      	movs	r3, #1
 800be68:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be6a:	697b      	ldr	r3, [r7, #20]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d10b      	bne.n	800be88 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	613b      	str	r3, [r7, #16]
}
 800be82:	bf00      	nop
 800be84:	bf00      	nop
 800be86:	e7fd      	b.n	800be84 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800be88:	697b      	ldr	r3, [r7, #20]
}
 800be8a:	4618      	mov	r0, r3
 800be8c:	3718      	adds	r7, #24
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
 800be92:	bf00      	nop
 800be94:	20001810 	.word	0x20001810
 800be98:	0800cf74 	.word	0x0800cf74
 800be9c:	0800bfdd 	.word	0x0800bfdd
 800bea0:	20001814 	.word	0x20001814

0800bea4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b08a      	sub	sp, #40	@ 0x28
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
 800beb0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800beb2:	2300      	movs	r3, #0
 800beb4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d10b      	bne.n	800bed4 <xTimerGenericCommand+0x30>
	__asm volatile
 800bebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bec0:	f383 8811 	msr	BASEPRI, r3
 800bec4:	f3bf 8f6f 	isb	sy
 800bec8:	f3bf 8f4f 	dsb	sy
 800becc:	623b      	str	r3, [r7, #32]
}
 800bece:	bf00      	nop
 800bed0:	bf00      	nop
 800bed2:	e7fd      	b.n	800bed0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bed4:	4b19      	ldr	r3, [pc, #100]	@ (800bf3c <xTimerGenericCommand+0x98>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d02a      	beq.n	800bf32 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bedc:	68bb      	ldr	r3, [r7, #8]
 800bede:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bee8:	68bb      	ldr	r3, [r7, #8]
 800beea:	2b05      	cmp	r3, #5
 800beec:	dc18      	bgt.n	800bf20 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800beee:	f7ff fdcb 	bl	800ba88 <xTaskGetSchedulerState>
 800bef2:	4603      	mov	r3, r0
 800bef4:	2b02      	cmp	r3, #2
 800bef6:	d109      	bne.n	800bf0c <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bef8:	4b10      	ldr	r3, [pc, #64]	@ (800bf3c <xTimerGenericCommand+0x98>)
 800befa:	6818      	ldr	r0, [r3, #0]
 800befc:	f107 0110 	add.w	r1, r7, #16
 800bf00:	2300      	movs	r3, #0
 800bf02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf04:	f7fe fa7e 	bl	800a404 <xQueueGenericSend>
 800bf08:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf0a:	e012      	b.n	800bf32 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf3c <xTimerGenericCommand+0x98>)
 800bf0e:	6818      	ldr	r0, [r3, #0]
 800bf10:	f107 0110 	add.w	r1, r7, #16
 800bf14:	2300      	movs	r3, #0
 800bf16:	2200      	movs	r2, #0
 800bf18:	f7fe fa74 	bl	800a404 <xQueueGenericSend>
 800bf1c:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf1e:	e008      	b.n	800bf32 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf20:	4b06      	ldr	r3, [pc, #24]	@ (800bf3c <xTimerGenericCommand+0x98>)
 800bf22:	6818      	ldr	r0, [r3, #0]
 800bf24:	f107 0110 	add.w	r1, r7, #16
 800bf28:	2300      	movs	r3, #0
 800bf2a:	683a      	ldr	r2, [r7, #0]
 800bf2c:	f7fe fb6c 	bl	800a608 <xQueueGenericSendFromISR>
 800bf30:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3728      	adds	r7, #40	@ 0x28
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}
 800bf3c:	20001810 	.word	0x20001810

0800bf40 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b088      	sub	sp, #32
 800bf44:	af02      	add	r7, sp, #8
 800bf46:	6078      	str	r0, [r7, #4]
 800bf48:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf4a:	4b23      	ldr	r3, [pc, #140]	@ (800bfd8 <prvProcessExpiredTimer+0x98>)
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	68db      	ldr	r3, [r3, #12]
 800bf50:	68db      	ldr	r3, [r3, #12]
 800bf52:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf54:	697b      	ldr	r3, [r7, #20]
 800bf56:	3304      	adds	r3, #4
 800bf58:	4618      	mov	r0, r3
 800bf5a:	f7fe f91f 	bl	800a19c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf64:	f003 0304 	and.w	r3, r3, #4
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d023      	beq.n	800bfb4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	699a      	ldr	r2, [r3, #24]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	18d1      	adds	r1, r2, r3
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	6978      	ldr	r0, [r7, #20]
 800bf7a:	f000 f8d5 	bl	800c128 <prvInsertTimerInActiveList>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d020      	beq.n	800bfc6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf84:	2300      	movs	r3, #0
 800bf86:	9300      	str	r3, [sp, #0]
 800bf88:	2300      	movs	r3, #0
 800bf8a:	687a      	ldr	r2, [r7, #4]
 800bf8c:	2100      	movs	r1, #0
 800bf8e:	6978      	ldr	r0, [r7, #20]
 800bf90:	f7ff ff88 	bl	800bea4 <xTimerGenericCommand>
 800bf94:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d114      	bne.n	800bfc6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bf9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfa0:	f383 8811 	msr	BASEPRI, r3
 800bfa4:	f3bf 8f6f 	isb	sy
 800bfa8:	f3bf 8f4f 	dsb	sy
 800bfac:	60fb      	str	r3, [r7, #12]
}
 800bfae:	bf00      	nop
 800bfb0:	bf00      	nop
 800bfb2:	e7fd      	b.n	800bfb0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfba:	f023 0301 	bic.w	r3, r3, #1
 800bfbe:	b2da      	uxtb	r2, r3
 800bfc0:	697b      	ldr	r3, [r7, #20]
 800bfc2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfc6:	697b      	ldr	r3, [r7, #20]
 800bfc8:	6a1b      	ldr	r3, [r3, #32]
 800bfca:	6978      	ldr	r0, [r7, #20]
 800bfcc:	4798      	blx	r3
}
 800bfce:	bf00      	nop
 800bfd0:	3718      	adds	r7, #24
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	20001808 	.word	0x20001808

0800bfdc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b084      	sub	sp, #16
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bfe4:	f107 0308 	add.w	r3, r7, #8
 800bfe8:	4618      	mov	r0, r3
 800bfea:	f000 f859 	bl	800c0a0 <prvGetNextExpireTime>
 800bfee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	4619      	mov	r1, r3
 800bff4:	68f8      	ldr	r0, [r7, #12]
 800bff6:	f000 f805 	bl	800c004 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bffa:	f000 f8d7 	bl	800c1ac <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bffe:	bf00      	nop
 800c000:	e7f0      	b.n	800bfe4 <prvTimerTask+0x8>
	...

0800c004 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c00e:	f7ff f84d 	bl	800b0ac <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c012:	f107 0308 	add.w	r3, r7, #8
 800c016:	4618      	mov	r0, r3
 800c018:	f000 f866 	bl	800c0e8 <prvSampleTimeNow>
 800c01c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c01e:	68bb      	ldr	r3, [r7, #8]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d130      	bne.n	800c086 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d10a      	bne.n	800c040 <prvProcessTimerOrBlockTask+0x3c>
 800c02a:	687a      	ldr	r2, [r7, #4]
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d806      	bhi.n	800c040 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c032:	f7ff f849 	bl	800b0c8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c036:	68f9      	ldr	r1, [r7, #12]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f7ff ff81 	bl	800bf40 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c03e:	e024      	b.n	800c08a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c040:	683b      	ldr	r3, [r7, #0]
 800c042:	2b00      	cmp	r3, #0
 800c044:	d008      	beq.n	800c058 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c046:	4b13      	ldr	r3, [pc, #76]	@ (800c094 <prvProcessTimerOrBlockTask+0x90>)
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d101      	bne.n	800c054 <prvProcessTimerOrBlockTask+0x50>
 800c050:	2301      	movs	r3, #1
 800c052:	e000      	b.n	800c056 <prvProcessTimerOrBlockTask+0x52>
 800c054:	2300      	movs	r3, #0
 800c056:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c058:	4b0f      	ldr	r3, [pc, #60]	@ (800c098 <prvProcessTimerOrBlockTask+0x94>)
 800c05a:	6818      	ldr	r0, [r3, #0]
 800c05c:	687a      	ldr	r2, [r7, #4]
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	1ad3      	subs	r3, r2, r3
 800c062:	683a      	ldr	r2, [r7, #0]
 800c064:	4619      	mov	r1, r3
 800c066:	f7fe fd89 	bl	800ab7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c06a:	f7ff f82d 	bl	800b0c8 <xTaskResumeAll>
 800c06e:	4603      	mov	r3, r0
 800c070:	2b00      	cmp	r3, #0
 800c072:	d10a      	bne.n	800c08a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c074:	4b09      	ldr	r3, [pc, #36]	@ (800c09c <prvProcessTimerOrBlockTask+0x98>)
 800c076:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c07a:	601a      	str	r2, [r3, #0]
 800c07c:	f3bf 8f4f 	dsb	sy
 800c080:	f3bf 8f6f 	isb	sy
}
 800c084:	e001      	b.n	800c08a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c086:	f7ff f81f 	bl	800b0c8 <xTaskResumeAll>
}
 800c08a:	bf00      	nop
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}
 800c092:	bf00      	nop
 800c094:	2000180c 	.word	0x2000180c
 800c098:	20001810 	.word	0x20001810
 800c09c:	e000ed04 	.word	0xe000ed04

0800c0a0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b085      	sub	sp, #20
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0a8:	4b0e      	ldr	r3, [pc, #56]	@ (800c0e4 <prvGetNextExpireTime+0x44>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d101      	bne.n	800c0b6 <prvGetNextExpireTime+0x16>
 800c0b2:	2201      	movs	r2, #1
 800c0b4:	e000      	b.n	800c0b8 <prvGetNextExpireTime+0x18>
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	681b      	ldr	r3, [r3, #0]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d105      	bne.n	800c0d0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0c4:	4b07      	ldr	r3, [pc, #28]	@ (800c0e4 <prvGetNextExpireTime+0x44>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	68db      	ldr	r3, [r3, #12]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	60fb      	str	r3, [r7, #12]
 800c0ce:	e001      	b.n	800c0d4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0d0:	2300      	movs	r3, #0
 800c0d2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0d4:	68fb      	ldr	r3, [r7, #12]
}
 800c0d6:	4618      	mov	r0, r3
 800c0d8:	3714      	adds	r7, #20
 800c0da:	46bd      	mov	sp, r7
 800c0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e0:	4770      	bx	lr
 800c0e2:	bf00      	nop
 800c0e4:	20001808 	.word	0x20001808

0800c0e8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c0f0:	f7ff f888 	bl	800b204 <xTaskGetTickCount>
 800c0f4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c0f6:	4b0b      	ldr	r3, [pc, #44]	@ (800c124 <prvSampleTimeNow+0x3c>)
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	68fa      	ldr	r2, [r7, #12]
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d205      	bcs.n	800c10c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c100:	f000 f93a 	bl	800c378 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	2201      	movs	r2, #1
 800c108:	601a      	str	r2, [r3, #0]
 800c10a:	e002      	b.n	800c112 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	2200      	movs	r2, #0
 800c110:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c112:	4a04      	ldr	r2, [pc, #16]	@ (800c124 <prvSampleTimeNow+0x3c>)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c118:	68fb      	ldr	r3, [r7, #12]
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	3710      	adds	r7, #16
 800c11e:	46bd      	mov	sp, r7
 800c120:	bd80      	pop	{r7, pc}
 800c122:	bf00      	nop
 800c124:	20001818 	.word	0x20001818

0800c128 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c128:	b580      	push	{r7, lr}
 800c12a:	b086      	sub	sp, #24
 800c12c:	af00      	add	r7, sp, #0
 800c12e:	60f8      	str	r0, [r7, #12]
 800c130:	60b9      	str	r1, [r7, #8]
 800c132:	607a      	str	r2, [r7, #4]
 800c134:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c136:	2300      	movs	r3, #0
 800c138:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	68fa      	ldr	r2, [r7, #12]
 800c144:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c146:	68ba      	ldr	r2, [r7, #8]
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	429a      	cmp	r2, r3
 800c14c:	d812      	bhi.n	800c174 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c14e:	687a      	ldr	r2, [r7, #4]
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	1ad2      	subs	r2, r2, r3
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	699b      	ldr	r3, [r3, #24]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d302      	bcc.n	800c162 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c15c:	2301      	movs	r3, #1
 800c15e:	617b      	str	r3, [r7, #20]
 800c160:	e01b      	b.n	800c19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c162:	4b10      	ldr	r3, [pc, #64]	@ (800c1a4 <prvInsertTimerInActiveList+0x7c>)
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	3304      	adds	r3, #4
 800c16a:	4619      	mov	r1, r3
 800c16c:	4610      	mov	r0, r2
 800c16e:	f7fd ffdc 	bl	800a12a <vListInsert>
 800c172:	e012      	b.n	800c19a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	683b      	ldr	r3, [r7, #0]
 800c178:	429a      	cmp	r2, r3
 800c17a:	d206      	bcs.n	800c18a <prvInsertTimerInActiveList+0x62>
 800c17c:	68ba      	ldr	r2, [r7, #8]
 800c17e:	683b      	ldr	r3, [r7, #0]
 800c180:	429a      	cmp	r2, r3
 800c182:	d302      	bcc.n	800c18a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c184:	2301      	movs	r3, #1
 800c186:	617b      	str	r3, [r7, #20]
 800c188:	e007      	b.n	800c19a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c18a:	4b07      	ldr	r3, [pc, #28]	@ (800c1a8 <prvInsertTimerInActiveList+0x80>)
 800c18c:	681a      	ldr	r2, [r3, #0]
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	3304      	adds	r3, #4
 800c192:	4619      	mov	r1, r3
 800c194:	4610      	mov	r0, r2
 800c196:	f7fd ffc8 	bl	800a12a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c19a:	697b      	ldr	r3, [r7, #20]
}
 800c19c:	4618      	mov	r0, r3
 800c19e:	3718      	adds	r7, #24
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	bd80      	pop	{r7, pc}
 800c1a4:	2000180c 	.word	0x2000180c
 800c1a8:	20001808 	.word	0x20001808

0800c1ac <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b08e      	sub	sp, #56	@ 0x38
 800c1b0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1b2:	e0ce      	b.n	800c352 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	da19      	bge.n	800c1ee <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1ba:	1d3b      	adds	r3, r7, #4
 800c1bc:	3304      	adds	r3, #4
 800c1be:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d10b      	bne.n	800c1de <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ca:	f383 8811 	msr	BASEPRI, r3
 800c1ce:	f3bf 8f6f 	isb	sy
 800c1d2:	f3bf 8f4f 	dsb	sy
 800c1d6:	61fb      	str	r3, [r7, #28]
}
 800c1d8:	bf00      	nop
 800c1da:	bf00      	nop
 800c1dc:	e7fd      	b.n	800c1da <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1e4:	6850      	ldr	r0, [r2, #4]
 800c1e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1e8:	6892      	ldr	r2, [r2, #8]
 800c1ea:	4611      	mov	r1, r2
 800c1ec:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	f2c0 80ae 	blt.w	800c352 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c1fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1fc:	695b      	ldr	r3, [r3, #20]
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d004      	beq.n	800c20c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c204:	3304      	adds	r3, #4
 800c206:	4618      	mov	r0, r3
 800c208:	f7fd ffc8 	bl	800a19c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c20c:	463b      	mov	r3, r7
 800c20e:	4618      	mov	r0, r3
 800c210:	f7ff ff6a 	bl	800c0e8 <prvSampleTimeNow>
 800c214:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2b09      	cmp	r3, #9
 800c21a:	f200 8097 	bhi.w	800c34c <prvProcessReceivedCommands+0x1a0>
 800c21e:	a201      	add	r2, pc, #4	@ (adr r2, 800c224 <prvProcessReceivedCommands+0x78>)
 800c220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c224:	0800c24d 	.word	0x0800c24d
 800c228:	0800c24d 	.word	0x0800c24d
 800c22c:	0800c24d 	.word	0x0800c24d
 800c230:	0800c2c3 	.word	0x0800c2c3
 800c234:	0800c2d7 	.word	0x0800c2d7
 800c238:	0800c323 	.word	0x0800c323
 800c23c:	0800c24d 	.word	0x0800c24d
 800c240:	0800c24d 	.word	0x0800c24d
 800c244:	0800c2c3 	.word	0x0800c2c3
 800c248:	0800c2d7 	.word	0x0800c2d7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c24c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c24e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c252:	f043 0301 	orr.w	r3, r3, #1
 800c256:	b2da      	uxtb	r2, r3
 800c258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c25a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c25e:	68ba      	ldr	r2, [r7, #8]
 800c260:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c262:	699b      	ldr	r3, [r3, #24]
 800c264:	18d1      	adds	r1, r2, r3
 800c266:	68bb      	ldr	r3, [r7, #8]
 800c268:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c26a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c26c:	f7ff ff5c 	bl	800c128 <prvInsertTimerInActiveList>
 800c270:	4603      	mov	r3, r0
 800c272:	2b00      	cmp	r3, #0
 800c274:	d06c      	beq.n	800c350 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c276:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c278:	6a1b      	ldr	r3, [r3, #32]
 800c27a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c27c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c27e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c284:	f003 0304 	and.w	r3, r3, #4
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d061      	beq.n	800c350 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c290:	699b      	ldr	r3, [r3, #24]
 800c292:	441a      	add	r2, r3
 800c294:	2300      	movs	r3, #0
 800c296:	9300      	str	r3, [sp, #0]
 800c298:	2300      	movs	r3, #0
 800c29a:	2100      	movs	r1, #0
 800c29c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c29e:	f7ff fe01 	bl	800bea4 <xTimerGenericCommand>
 800c2a2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2a4:	6a3b      	ldr	r3, [r7, #32]
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d152      	bne.n	800c350 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c2aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	61bb      	str	r3, [r7, #24]
}
 800c2bc:	bf00      	nop
 800c2be:	bf00      	nop
 800c2c0:	e7fd      	b.n	800c2be <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2c4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2c8:	f023 0301 	bic.w	r3, r3, #1
 800c2cc:	b2da      	uxtb	r2, r3
 800c2ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c2d4:	e03d      	b.n	800c352 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2dc:	f043 0301 	orr.w	r3, r3, #1
 800c2e0:	b2da      	uxtb	r2, r3
 800c2e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c2e8:	68ba      	ldr	r2, [r7, #8]
 800c2ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2ec:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f0:	699b      	ldr	r3, [r3, #24]
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d10b      	bne.n	800c30e <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c2f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2fa:	f383 8811 	msr	BASEPRI, r3
 800c2fe:	f3bf 8f6f 	isb	sy
 800c302:	f3bf 8f4f 	dsb	sy
 800c306:	617b      	str	r3, [r7, #20]
}
 800c308:	bf00      	nop
 800c30a:	bf00      	nop
 800c30c:	e7fd      	b.n	800c30a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c30e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c310:	699a      	ldr	r2, [r3, #24]
 800c312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c314:	18d1      	adds	r1, r2, r3
 800c316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c31a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c31c:	f7ff ff04 	bl	800c128 <prvInsertTimerInActiveList>
					break;
 800c320:	e017      	b.n	800c352 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c324:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c328:	f003 0302 	and.w	r3, r3, #2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d103      	bne.n	800c338 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c330:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c332:	f000 fbe9 	bl	800cb08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c336:	e00c      	b.n	800c352 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c33e:	f023 0301 	bic.w	r3, r3, #1
 800c342:	b2da      	uxtb	r2, r3
 800c344:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c346:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c34a:	e002      	b.n	800c352 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c34c:	bf00      	nop
 800c34e:	e000      	b.n	800c352 <prvProcessReceivedCommands+0x1a6>
					break;
 800c350:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c352:	4b08      	ldr	r3, [pc, #32]	@ (800c374 <prvProcessReceivedCommands+0x1c8>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	1d39      	adds	r1, r7, #4
 800c358:	2200      	movs	r2, #0
 800c35a:	4618      	mov	r0, r3
 800c35c:	f7fe f9f2 	bl	800a744 <xQueueReceive>
 800c360:	4603      	mov	r3, r0
 800c362:	2b00      	cmp	r3, #0
 800c364:	f47f af26 	bne.w	800c1b4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c368:	bf00      	nop
 800c36a:	bf00      	nop
 800c36c:	3730      	adds	r7, #48	@ 0x30
 800c36e:	46bd      	mov	sp, r7
 800c370:	bd80      	pop	{r7, pc}
 800c372:	bf00      	nop
 800c374:	20001810 	.word	0x20001810

0800c378 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b088      	sub	sp, #32
 800c37c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c37e:	e049      	b.n	800c414 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c380:	4b2e      	ldr	r3, [pc, #184]	@ (800c43c <prvSwitchTimerLists+0xc4>)
 800c382:	681b      	ldr	r3, [r3, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c38a:	4b2c      	ldr	r3, [pc, #176]	@ (800c43c <prvSwitchTimerLists+0xc4>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	68db      	ldr	r3, [r3, #12]
 800c390:	68db      	ldr	r3, [r3, #12]
 800c392:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c394:	68fb      	ldr	r3, [r7, #12]
 800c396:	3304      	adds	r3, #4
 800c398:	4618      	mov	r0, r3
 800c39a:	f7fd feff 	bl	800a19c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	6a1b      	ldr	r3, [r3, #32]
 800c3a2:	68f8      	ldr	r0, [r7, #12]
 800c3a4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3ac:	f003 0304 	and.w	r3, r3, #4
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d02f      	beq.n	800c414 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	693a      	ldr	r2, [r7, #16]
 800c3ba:	4413      	add	r3, r2
 800c3bc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3be:	68ba      	ldr	r2, [r7, #8]
 800c3c0:	693b      	ldr	r3, [r7, #16]
 800c3c2:	429a      	cmp	r2, r3
 800c3c4:	d90e      	bls.n	800c3e4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	68ba      	ldr	r2, [r7, #8]
 800c3ca:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	68fa      	ldr	r2, [r7, #12]
 800c3d0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3d2:	4b1a      	ldr	r3, [pc, #104]	@ (800c43c <prvSwitchTimerLists+0xc4>)
 800c3d4:	681a      	ldr	r2, [r3, #0]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	3304      	adds	r3, #4
 800c3da:	4619      	mov	r1, r3
 800c3dc:	4610      	mov	r0, r2
 800c3de:	f7fd fea4 	bl	800a12a <vListInsert>
 800c3e2:	e017      	b.n	800c414 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	9300      	str	r3, [sp, #0]
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	693a      	ldr	r2, [r7, #16]
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	68f8      	ldr	r0, [r7, #12]
 800c3f0:	f7ff fd58 	bl	800bea4 <xTimerGenericCommand>
 800c3f4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d10b      	bne.n	800c414 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c3fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	603b      	str	r3, [r7, #0]
}
 800c40e:	bf00      	nop
 800c410:	bf00      	nop
 800c412:	e7fd      	b.n	800c410 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c414:	4b09      	ldr	r3, [pc, #36]	@ (800c43c <prvSwitchTimerLists+0xc4>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d1b0      	bne.n	800c380 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c41e:	4b07      	ldr	r3, [pc, #28]	@ (800c43c <prvSwitchTimerLists+0xc4>)
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c424:	4b06      	ldr	r3, [pc, #24]	@ (800c440 <prvSwitchTimerLists+0xc8>)
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	4a04      	ldr	r2, [pc, #16]	@ (800c43c <prvSwitchTimerLists+0xc4>)
 800c42a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c42c:	4a04      	ldr	r2, [pc, #16]	@ (800c440 <prvSwitchTimerLists+0xc8>)
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	6013      	str	r3, [r2, #0]
}
 800c432:	bf00      	nop
 800c434:	3718      	adds	r7, #24
 800c436:	46bd      	mov	sp, r7
 800c438:	bd80      	pop	{r7, pc}
 800c43a:	bf00      	nop
 800c43c:	20001808 	.word	0x20001808
 800c440:	2000180c 	.word	0x2000180c

0800c444 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c444:	b580      	push	{r7, lr}
 800c446:	b082      	sub	sp, #8
 800c448:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c44a:	f000 f96d 	bl	800c728 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c44e:	4b15      	ldr	r3, [pc, #84]	@ (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d120      	bne.n	800c498 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c456:	4814      	ldr	r0, [pc, #80]	@ (800c4a8 <prvCheckForValidListAndQueue+0x64>)
 800c458:	f7fd fe16 	bl	800a088 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c45c:	4813      	ldr	r0, [pc, #76]	@ (800c4ac <prvCheckForValidListAndQueue+0x68>)
 800c45e:	f7fd fe13 	bl	800a088 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c462:	4b13      	ldr	r3, [pc, #76]	@ (800c4b0 <prvCheckForValidListAndQueue+0x6c>)
 800c464:	4a10      	ldr	r2, [pc, #64]	@ (800c4a8 <prvCheckForValidListAndQueue+0x64>)
 800c466:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c468:	4b12      	ldr	r3, [pc, #72]	@ (800c4b4 <prvCheckForValidListAndQueue+0x70>)
 800c46a:	4a10      	ldr	r2, [pc, #64]	@ (800c4ac <prvCheckForValidListAndQueue+0x68>)
 800c46c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c46e:	2300      	movs	r3, #0
 800c470:	9300      	str	r3, [sp, #0]
 800c472:	4b11      	ldr	r3, [pc, #68]	@ (800c4b8 <prvCheckForValidListAndQueue+0x74>)
 800c474:	4a11      	ldr	r2, [pc, #68]	@ (800c4bc <prvCheckForValidListAndQueue+0x78>)
 800c476:	2110      	movs	r1, #16
 800c478:	200a      	movs	r0, #10
 800c47a:	f7fd ff23 	bl	800a2c4 <xQueueGenericCreateStatic>
 800c47e:	4603      	mov	r3, r0
 800c480:	4a08      	ldr	r2, [pc, #32]	@ (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c482:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c484:	4b07      	ldr	r3, [pc, #28]	@ (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d005      	beq.n	800c498 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c48c:	4b05      	ldr	r3, [pc, #20]	@ (800c4a4 <prvCheckForValidListAndQueue+0x60>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	490b      	ldr	r1, [pc, #44]	@ (800c4c0 <prvCheckForValidListAndQueue+0x7c>)
 800c492:	4618      	mov	r0, r3
 800c494:	f7fe fb48 	bl	800ab28 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c498:	f000 f978 	bl	800c78c <vPortExitCritical>
}
 800c49c:	bf00      	nop
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bd80      	pop	{r7, pc}
 800c4a2:	bf00      	nop
 800c4a4:	20001810 	.word	0x20001810
 800c4a8:	200017e0 	.word	0x200017e0
 800c4ac:	200017f4 	.word	0x200017f4
 800c4b0:	20001808 	.word	0x20001808
 800c4b4:	2000180c 	.word	0x2000180c
 800c4b8:	200018bc 	.word	0x200018bc
 800c4bc:	2000181c 	.word	0x2000181c
 800c4c0:	0800cf7c 	.word	0x0800cf7c

0800c4c4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4c4:	b480      	push	{r7}
 800c4c6:	b085      	sub	sp, #20
 800c4c8:	af00      	add	r7, sp, #0
 800c4ca:	60f8      	str	r0, [r7, #12]
 800c4cc:	60b9      	str	r1, [r7, #8]
 800c4ce:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	3b04      	subs	r3, #4
 800c4d4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c4dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	3b04      	subs	r3, #4
 800c4e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4e4:	68bb      	ldr	r3, [r7, #8]
 800c4e6:	f023 0201 	bic.w	r2, r3, #1
 800c4ea:	68fb      	ldr	r3, [r7, #12]
 800c4ec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	3b04      	subs	r3, #4
 800c4f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c4f4:	4a0c      	ldr	r2, [pc, #48]	@ (800c528 <pxPortInitialiseStack+0x64>)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	3b14      	subs	r3, #20
 800c4fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c500:	687a      	ldr	r2, [r7, #4]
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3b04      	subs	r3, #4
 800c50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	f06f 0202 	mvn.w	r2, #2
 800c512:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	3b20      	subs	r3, #32
 800c518:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c51a:	68fb      	ldr	r3, [r7, #12]
}
 800c51c:	4618      	mov	r0, r3
 800c51e:	3714      	adds	r7, #20
 800c520:	46bd      	mov	sp, r7
 800c522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c526:	4770      	bx	lr
 800c528:	0800c52d 	.word	0x0800c52d

0800c52c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c52c:	b480      	push	{r7}
 800c52e:	b085      	sub	sp, #20
 800c530:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c532:	2300      	movs	r3, #0
 800c534:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c536:	4b13      	ldr	r3, [pc, #76]	@ (800c584 <prvTaskExitError+0x58>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c53e:	d00b      	beq.n	800c558 <prvTaskExitError+0x2c>
	__asm volatile
 800c540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c544:	f383 8811 	msr	BASEPRI, r3
 800c548:	f3bf 8f6f 	isb	sy
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	60fb      	str	r3, [r7, #12]
}
 800c552:	bf00      	nop
 800c554:	bf00      	nop
 800c556:	e7fd      	b.n	800c554 <prvTaskExitError+0x28>
	__asm volatile
 800c558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55c:	f383 8811 	msr	BASEPRI, r3
 800c560:	f3bf 8f6f 	isb	sy
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	60bb      	str	r3, [r7, #8]
}
 800c56a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c56c:	bf00      	nop
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0fc      	beq.n	800c56e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c574:	bf00      	nop
 800c576:	bf00      	nop
 800c578:	3714      	adds	r7, #20
 800c57a:	46bd      	mov	sp, r7
 800c57c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c580:	4770      	bx	lr
 800c582:	bf00      	nop
 800c584:	20000028 	.word	0x20000028
	...

0800c590 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c590:	4b07      	ldr	r3, [pc, #28]	@ (800c5b0 <pxCurrentTCBConst2>)
 800c592:	6819      	ldr	r1, [r3, #0]
 800c594:	6808      	ldr	r0, [r1, #0]
 800c596:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c59a:	f380 8809 	msr	PSP, r0
 800c59e:	f3bf 8f6f 	isb	sy
 800c5a2:	f04f 0000 	mov.w	r0, #0
 800c5a6:	f380 8811 	msr	BASEPRI, r0
 800c5aa:	4770      	bx	lr
 800c5ac:	f3af 8000 	nop.w

0800c5b0 <pxCurrentTCBConst2>:
 800c5b0:	200012e0 	.word	0x200012e0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5b4:	bf00      	nop
 800c5b6:	bf00      	nop

0800c5b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5b8:	4808      	ldr	r0, [pc, #32]	@ (800c5dc <prvPortStartFirstTask+0x24>)
 800c5ba:	6800      	ldr	r0, [r0, #0]
 800c5bc:	6800      	ldr	r0, [r0, #0]
 800c5be:	f380 8808 	msr	MSP, r0
 800c5c2:	f04f 0000 	mov.w	r0, #0
 800c5c6:	f380 8814 	msr	CONTROL, r0
 800c5ca:	b662      	cpsie	i
 800c5cc:	b661      	cpsie	f
 800c5ce:	f3bf 8f4f 	dsb	sy
 800c5d2:	f3bf 8f6f 	isb	sy
 800c5d6:	df00      	svc	0
 800c5d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5da:	bf00      	nop
 800c5dc:	e000ed08 	.word	0xe000ed08

0800c5e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5e0:	b580      	push	{r7, lr}
 800c5e2:	b086      	sub	sp, #24
 800c5e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5e6:	4b47      	ldr	r3, [pc, #284]	@ (800c704 <xPortStartScheduler+0x124>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	4a47      	ldr	r2, [pc, #284]	@ (800c708 <xPortStartScheduler+0x128>)
 800c5ec:	4293      	cmp	r3, r2
 800c5ee:	d10b      	bne.n	800c608 <xPortStartScheduler+0x28>
	__asm volatile
 800c5f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5f4:	f383 8811 	msr	BASEPRI, r3
 800c5f8:	f3bf 8f6f 	isb	sy
 800c5fc:	f3bf 8f4f 	dsb	sy
 800c600:	613b      	str	r3, [r7, #16]
}
 800c602:	bf00      	nop
 800c604:	bf00      	nop
 800c606:	e7fd      	b.n	800c604 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c608:	4b3e      	ldr	r3, [pc, #248]	@ (800c704 <xPortStartScheduler+0x124>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a3f      	ldr	r2, [pc, #252]	@ (800c70c <xPortStartScheduler+0x12c>)
 800c60e:	4293      	cmp	r3, r2
 800c610:	d10b      	bne.n	800c62a <xPortStartScheduler+0x4a>
	__asm volatile
 800c612:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c616:	f383 8811 	msr	BASEPRI, r3
 800c61a:	f3bf 8f6f 	isb	sy
 800c61e:	f3bf 8f4f 	dsb	sy
 800c622:	60fb      	str	r3, [r7, #12]
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	e7fd      	b.n	800c626 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c62a:	4b39      	ldr	r3, [pc, #228]	@ (800c710 <xPortStartScheduler+0x130>)
 800c62c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	781b      	ldrb	r3, [r3, #0]
 800c632:	b2db      	uxtb	r3, r3
 800c634:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c636:	697b      	ldr	r3, [r7, #20]
 800c638:	22ff      	movs	r2, #255	@ 0xff
 800c63a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	781b      	ldrb	r3, [r3, #0]
 800c640:	b2db      	uxtb	r3, r3
 800c642:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c644:	78fb      	ldrb	r3, [r7, #3]
 800c646:	b2db      	uxtb	r3, r3
 800c648:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c64c:	b2da      	uxtb	r2, r3
 800c64e:	4b31      	ldr	r3, [pc, #196]	@ (800c714 <xPortStartScheduler+0x134>)
 800c650:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c652:	4b31      	ldr	r3, [pc, #196]	@ (800c718 <xPortStartScheduler+0x138>)
 800c654:	2207      	movs	r2, #7
 800c656:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c658:	e009      	b.n	800c66e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c65a:	4b2f      	ldr	r3, [pc, #188]	@ (800c718 <xPortStartScheduler+0x138>)
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	3b01      	subs	r3, #1
 800c660:	4a2d      	ldr	r2, [pc, #180]	@ (800c718 <xPortStartScheduler+0x138>)
 800c662:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c664:	78fb      	ldrb	r3, [r7, #3]
 800c666:	b2db      	uxtb	r3, r3
 800c668:	005b      	lsls	r3, r3, #1
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c66e:	78fb      	ldrb	r3, [r7, #3]
 800c670:	b2db      	uxtb	r3, r3
 800c672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c676:	2b80      	cmp	r3, #128	@ 0x80
 800c678:	d0ef      	beq.n	800c65a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c67a:	4b27      	ldr	r3, [pc, #156]	@ (800c718 <xPortStartScheduler+0x138>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f1c3 0307 	rsb	r3, r3, #7
 800c682:	2b04      	cmp	r3, #4
 800c684:	d00b      	beq.n	800c69e <xPortStartScheduler+0xbe>
	__asm volatile
 800c686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c68a:	f383 8811 	msr	BASEPRI, r3
 800c68e:	f3bf 8f6f 	isb	sy
 800c692:	f3bf 8f4f 	dsb	sy
 800c696:	60bb      	str	r3, [r7, #8]
}
 800c698:	bf00      	nop
 800c69a:	bf00      	nop
 800c69c:	e7fd      	b.n	800c69a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c69e:	4b1e      	ldr	r3, [pc, #120]	@ (800c718 <xPortStartScheduler+0x138>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	021b      	lsls	r3, r3, #8
 800c6a4:	4a1c      	ldr	r2, [pc, #112]	@ (800c718 <xPortStartScheduler+0x138>)
 800c6a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6a8:	4b1b      	ldr	r3, [pc, #108]	@ (800c718 <xPortStartScheduler+0x138>)
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c6b0:	4a19      	ldr	r2, [pc, #100]	@ (800c718 <xPortStartScheduler+0x138>)
 800c6b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	697b      	ldr	r3, [r7, #20]
 800c6ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6bc:	4b17      	ldr	r3, [pc, #92]	@ (800c71c <xPortStartScheduler+0x13c>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4a16      	ldr	r2, [pc, #88]	@ (800c71c <xPortStartScheduler+0x13c>)
 800c6c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c6c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6c8:	4b14      	ldr	r3, [pc, #80]	@ (800c71c <xPortStartScheduler+0x13c>)
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	4a13      	ldr	r2, [pc, #76]	@ (800c71c <xPortStartScheduler+0x13c>)
 800c6ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c6d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6d4:	f000 f8da 	bl	800c88c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6d8:	4b11      	ldr	r3, [pc, #68]	@ (800c720 <xPortStartScheduler+0x140>)
 800c6da:	2200      	movs	r2, #0
 800c6dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6de:	f000 f8f9 	bl	800c8d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6e2:	4b10      	ldr	r3, [pc, #64]	@ (800c724 <xPortStartScheduler+0x144>)
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	4a0f      	ldr	r2, [pc, #60]	@ (800c724 <xPortStartScheduler+0x144>)
 800c6e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c6ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6ee:	f7ff ff63 	bl	800c5b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c6f2:	f7fe ff4b 	bl	800b58c <vTaskSwitchContext>
	prvTaskExitError();
 800c6f6:	f7ff ff19 	bl	800c52c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c6fa:	2300      	movs	r3, #0
}
 800c6fc:	4618      	mov	r0, r3
 800c6fe:	3718      	adds	r7, #24
 800c700:	46bd      	mov	sp, r7
 800c702:	bd80      	pop	{r7, pc}
 800c704:	e000ed00 	.word	0xe000ed00
 800c708:	410fc271 	.word	0x410fc271
 800c70c:	410fc270 	.word	0x410fc270
 800c710:	e000e400 	.word	0xe000e400
 800c714:	2000190c 	.word	0x2000190c
 800c718:	20001910 	.word	0x20001910
 800c71c:	e000ed20 	.word	0xe000ed20
 800c720:	20000028 	.word	0x20000028
 800c724:	e000ef34 	.word	0xe000ef34

0800c728 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c728:	b480      	push	{r7}
 800c72a:	b083      	sub	sp, #12
 800c72c:	af00      	add	r7, sp, #0
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	607b      	str	r3, [r7, #4]
}
 800c740:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c742:	4b10      	ldr	r3, [pc, #64]	@ (800c784 <vPortEnterCritical+0x5c>)
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	3301      	adds	r3, #1
 800c748:	4a0e      	ldr	r2, [pc, #56]	@ (800c784 <vPortEnterCritical+0x5c>)
 800c74a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c74c:	4b0d      	ldr	r3, [pc, #52]	@ (800c784 <vPortEnterCritical+0x5c>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	2b01      	cmp	r3, #1
 800c752:	d110      	bne.n	800c776 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c754:	4b0c      	ldr	r3, [pc, #48]	@ (800c788 <vPortEnterCritical+0x60>)
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	b2db      	uxtb	r3, r3
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00b      	beq.n	800c776 <vPortEnterCritical+0x4e>
	__asm volatile
 800c75e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c762:	f383 8811 	msr	BASEPRI, r3
 800c766:	f3bf 8f6f 	isb	sy
 800c76a:	f3bf 8f4f 	dsb	sy
 800c76e:	603b      	str	r3, [r7, #0]
}
 800c770:	bf00      	nop
 800c772:	bf00      	nop
 800c774:	e7fd      	b.n	800c772 <vPortEnterCritical+0x4a>
	}
}
 800c776:	bf00      	nop
 800c778:	370c      	adds	r7, #12
 800c77a:	46bd      	mov	sp, r7
 800c77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c780:	4770      	bx	lr
 800c782:	bf00      	nop
 800c784:	20000028 	.word	0x20000028
 800c788:	e000ed04 	.word	0xe000ed04

0800c78c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c792:	4b12      	ldr	r3, [pc, #72]	@ (800c7dc <vPortExitCritical+0x50>)
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d10b      	bne.n	800c7b2 <vPortExitCritical+0x26>
	__asm volatile
 800c79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79e:	f383 8811 	msr	BASEPRI, r3
 800c7a2:	f3bf 8f6f 	isb	sy
 800c7a6:	f3bf 8f4f 	dsb	sy
 800c7aa:	607b      	str	r3, [r7, #4]
}
 800c7ac:	bf00      	nop
 800c7ae:	bf00      	nop
 800c7b0:	e7fd      	b.n	800c7ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c7b2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7dc <vPortExitCritical+0x50>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	3b01      	subs	r3, #1
 800c7b8:	4a08      	ldr	r2, [pc, #32]	@ (800c7dc <vPortExitCritical+0x50>)
 800c7ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7bc:	4b07      	ldr	r3, [pc, #28]	@ (800c7dc <vPortExitCritical+0x50>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d105      	bne.n	800c7d0 <vPortExitCritical+0x44>
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	f383 8811 	msr	BASEPRI, r3
}
 800c7ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7d0:	bf00      	nop
 800c7d2:	370c      	adds	r7, #12
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr
 800c7dc:	20000028 	.word	0x20000028

0800c7e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7e0:	f3ef 8009 	mrs	r0, PSP
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	4b15      	ldr	r3, [pc, #84]	@ (800c840 <pxCurrentTCBConst>)
 800c7ea:	681a      	ldr	r2, [r3, #0]
 800c7ec:	f01e 0f10 	tst.w	lr, #16
 800c7f0:	bf08      	it	eq
 800c7f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c7f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7fa:	6010      	str	r0, [r2, #0]
 800c7fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c800:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c804:	f380 8811 	msr	BASEPRI, r0
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	f3bf 8f6f 	isb	sy
 800c810:	f7fe febc 	bl	800b58c <vTaskSwitchContext>
 800c814:	f04f 0000 	mov.w	r0, #0
 800c818:	f380 8811 	msr	BASEPRI, r0
 800c81c:	bc09      	pop	{r0, r3}
 800c81e:	6819      	ldr	r1, [r3, #0]
 800c820:	6808      	ldr	r0, [r1, #0]
 800c822:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c826:	f01e 0f10 	tst.w	lr, #16
 800c82a:	bf08      	it	eq
 800c82c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c830:	f380 8809 	msr	PSP, r0
 800c834:	f3bf 8f6f 	isb	sy
 800c838:	4770      	bx	lr
 800c83a:	bf00      	nop
 800c83c:	f3af 8000 	nop.w

0800c840 <pxCurrentTCBConst>:
 800c840:	200012e0 	.word	0x200012e0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c844:	bf00      	nop
 800c846:	bf00      	nop

0800c848 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c848:	b580      	push	{r7, lr}
 800c84a:	b082      	sub	sp, #8
 800c84c:	af00      	add	r7, sp, #0
	__asm volatile
 800c84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c852:	f383 8811 	msr	BASEPRI, r3
 800c856:	f3bf 8f6f 	isb	sy
 800c85a:	f3bf 8f4f 	dsb	sy
 800c85e:	607b      	str	r3, [r7, #4]
}
 800c860:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c862:	f7fe fdd9 	bl	800b418 <xTaskIncrementTick>
 800c866:	4603      	mov	r3, r0
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d003      	beq.n	800c874 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c86c:	4b06      	ldr	r3, [pc, #24]	@ (800c888 <xPortSysTickHandler+0x40>)
 800c86e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c872:	601a      	str	r2, [r3, #0]
 800c874:	2300      	movs	r3, #0
 800c876:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c878:	683b      	ldr	r3, [r7, #0]
 800c87a:	f383 8811 	msr	BASEPRI, r3
}
 800c87e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c880:	bf00      	nop
 800c882:	3708      	adds	r7, #8
 800c884:	46bd      	mov	sp, r7
 800c886:	bd80      	pop	{r7, pc}
 800c888:	e000ed04 	.word	0xe000ed04

0800c88c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c88c:	b480      	push	{r7}
 800c88e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c890:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c0 <vPortSetupTimerInterrupt+0x34>)
 800c892:	2200      	movs	r2, #0
 800c894:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c896:	4b0b      	ldr	r3, [pc, #44]	@ (800c8c4 <vPortSetupTimerInterrupt+0x38>)
 800c898:	2200      	movs	r2, #0
 800c89a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c89c:	4b0a      	ldr	r3, [pc, #40]	@ (800c8c8 <vPortSetupTimerInterrupt+0x3c>)
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	4a0a      	ldr	r2, [pc, #40]	@ (800c8cc <vPortSetupTimerInterrupt+0x40>)
 800c8a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8a6:	099b      	lsrs	r3, r3, #6
 800c8a8:	4a09      	ldr	r2, [pc, #36]	@ (800c8d0 <vPortSetupTimerInterrupt+0x44>)
 800c8aa:	3b01      	subs	r3, #1
 800c8ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8ae:	4b04      	ldr	r3, [pc, #16]	@ (800c8c0 <vPortSetupTimerInterrupt+0x34>)
 800c8b0:	2207      	movs	r2, #7
 800c8b2:	601a      	str	r2, [r3, #0]
}
 800c8b4:	bf00      	nop
 800c8b6:	46bd      	mov	sp, r7
 800c8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8bc:	4770      	bx	lr
 800c8be:	bf00      	nop
 800c8c0:	e000e010 	.word	0xe000e010
 800c8c4:	e000e018 	.word	0xe000e018
 800c8c8:	2000001c 	.word	0x2000001c
 800c8cc:	10624dd3 	.word	0x10624dd3
 800c8d0:	e000e014 	.word	0xe000e014

0800c8d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c8e4 <vPortEnableVFP+0x10>
 800c8d8:	6801      	ldr	r1, [r0, #0]
 800c8da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c8de:	6001      	str	r1, [r0, #0]
 800c8e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8e2:	bf00      	nop
 800c8e4:	e000ed88 	.word	0xe000ed88

0800c8e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8e8:	b480      	push	{r7}
 800c8ea:	b085      	sub	sp, #20
 800c8ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8ee:	f3ef 8305 	mrs	r3, IPSR
 800c8f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2b0f      	cmp	r3, #15
 800c8f8:	d915      	bls.n	800c926 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c8fa:	4a18      	ldr	r2, [pc, #96]	@ (800c95c <vPortValidateInterruptPriority+0x74>)
 800c8fc:	68fb      	ldr	r3, [r7, #12]
 800c8fe:	4413      	add	r3, r2
 800c900:	781b      	ldrb	r3, [r3, #0]
 800c902:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c904:	4b16      	ldr	r3, [pc, #88]	@ (800c960 <vPortValidateInterruptPriority+0x78>)
 800c906:	781b      	ldrb	r3, [r3, #0]
 800c908:	7afa      	ldrb	r2, [r7, #11]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d20b      	bcs.n	800c926 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c90e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c912:	f383 8811 	msr	BASEPRI, r3
 800c916:	f3bf 8f6f 	isb	sy
 800c91a:	f3bf 8f4f 	dsb	sy
 800c91e:	607b      	str	r3, [r7, #4]
}
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	e7fd      	b.n	800c922 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c926:	4b0f      	ldr	r3, [pc, #60]	@ (800c964 <vPortValidateInterruptPriority+0x7c>)
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c92e:	4b0e      	ldr	r3, [pc, #56]	@ (800c968 <vPortValidateInterruptPriority+0x80>)
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	429a      	cmp	r2, r3
 800c934:	d90b      	bls.n	800c94e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	603b      	str	r3, [r7, #0]
}
 800c948:	bf00      	nop
 800c94a:	bf00      	nop
 800c94c:	e7fd      	b.n	800c94a <vPortValidateInterruptPriority+0x62>
	}
 800c94e:	bf00      	nop
 800c950:	3714      	adds	r7, #20
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr
 800c95a:	bf00      	nop
 800c95c:	e000e3f0 	.word	0xe000e3f0
 800c960:	2000190c 	.word	0x2000190c
 800c964:	e000ed0c 	.word	0xe000ed0c
 800c968:	20001910 	.word	0x20001910

0800c96c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b08a      	sub	sp, #40	@ 0x28
 800c970:	af00      	add	r7, sp, #0
 800c972:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c974:	2300      	movs	r3, #0
 800c976:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c978:	f7fe fb98 	bl	800b0ac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c97c:	4b5c      	ldr	r3, [pc, #368]	@ (800caf0 <pvPortMalloc+0x184>)
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	2b00      	cmp	r3, #0
 800c982:	d101      	bne.n	800c988 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c984:	f000 f924 	bl	800cbd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c988:	4b5a      	ldr	r3, [pc, #360]	@ (800caf4 <pvPortMalloc+0x188>)
 800c98a:	681a      	ldr	r2, [r3, #0]
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	4013      	ands	r3, r2
 800c990:	2b00      	cmp	r3, #0
 800c992:	f040 8095 	bne.w	800cac0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d01e      	beq.n	800c9da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c99c:	2208      	movs	r2, #8
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	f003 0307 	and.w	r3, r3, #7
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d015      	beq.n	800c9da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f023 0307 	bic.w	r3, r3, #7
 800c9b4:	3308      	adds	r3, #8
 800c9b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f003 0307 	and.w	r3, r3, #7
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d00b      	beq.n	800c9da <pvPortMalloc+0x6e>
	__asm volatile
 800c9c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	617b      	str	r3, [r7, #20]
}
 800c9d4:	bf00      	nop
 800c9d6:	bf00      	nop
 800c9d8:	e7fd      	b.n	800c9d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d06f      	beq.n	800cac0 <pvPortMalloc+0x154>
 800c9e0:	4b45      	ldr	r3, [pc, #276]	@ (800caf8 <pvPortMalloc+0x18c>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	687a      	ldr	r2, [r7, #4]
 800c9e6:	429a      	cmp	r2, r3
 800c9e8:	d86a      	bhi.n	800cac0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9ea:	4b44      	ldr	r3, [pc, #272]	@ (800cafc <pvPortMalloc+0x190>)
 800c9ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9ee:	4b43      	ldr	r3, [pc, #268]	@ (800cafc <pvPortMalloc+0x190>)
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c9f4:	e004      	b.n	800ca00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c9fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca02:	685b      	ldr	r3, [r3, #4]
 800ca04:	687a      	ldr	r2, [r7, #4]
 800ca06:	429a      	cmp	r2, r3
 800ca08:	d903      	bls.n	800ca12 <pvPortMalloc+0xa6>
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d1f1      	bne.n	800c9f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca12:	4b37      	ldr	r3, [pc, #220]	@ (800caf0 <pvPortMalloc+0x184>)
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d051      	beq.n	800cac0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca1c:	6a3b      	ldr	r3, [r7, #32]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	2208      	movs	r2, #8
 800ca22:	4413      	add	r3, r2
 800ca24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca28:	681a      	ldr	r2, [r3, #0]
 800ca2a:	6a3b      	ldr	r3, [r7, #32]
 800ca2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca30:	685a      	ldr	r2, [r3, #4]
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	1ad2      	subs	r2, r2, r3
 800ca36:	2308      	movs	r3, #8
 800ca38:	005b      	lsls	r3, r3, #1
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d920      	bls.n	800ca80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	4413      	add	r3, r2
 800ca44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	f003 0307 	and.w	r3, r3, #7
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	d00b      	beq.n	800ca68 <pvPortMalloc+0xfc>
	__asm volatile
 800ca50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca54:	f383 8811 	msr	BASEPRI, r3
 800ca58:	f3bf 8f6f 	isb	sy
 800ca5c:	f3bf 8f4f 	dsb	sy
 800ca60:	613b      	str	r3, [r7, #16]
}
 800ca62:	bf00      	nop
 800ca64:	bf00      	nop
 800ca66:	e7fd      	b.n	800ca64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	1ad2      	subs	r2, r2, r3
 800ca70:	69bb      	ldr	r3, [r7, #24]
 800ca72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca7a:	69b8      	ldr	r0, [r7, #24]
 800ca7c:	f000 f90a 	bl	800cc94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca80:	4b1d      	ldr	r3, [pc, #116]	@ (800caf8 <pvPortMalloc+0x18c>)
 800ca82:	681a      	ldr	r2, [r3, #0]
 800ca84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	1ad3      	subs	r3, r2, r3
 800ca8a:	4a1b      	ldr	r2, [pc, #108]	@ (800caf8 <pvPortMalloc+0x18c>)
 800ca8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca8e:	4b1a      	ldr	r3, [pc, #104]	@ (800caf8 <pvPortMalloc+0x18c>)
 800ca90:	681a      	ldr	r2, [r3, #0]
 800ca92:	4b1b      	ldr	r3, [pc, #108]	@ (800cb00 <pvPortMalloc+0x194>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d203      	bcs.n	800caa2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ca9a:	4b17      	ldr	r3, [pc, #92]	@ (800caf8 <pvPortMalloc+0x18c>)
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	4a18      	ldr	r2, [pc, #96]	@ (800cb00 <pvPortMalloc+0x194>)
 800caa0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800caa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caa4:	685a      	ldr	r2, [r3, #4]
 800caa6:	4b13      	ldr	r3, [pc, #76]	@ (800caf4 <pvPortMalloc+0x188>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	431a      	orrs	r2, r3
 800caac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800caae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab2:	2200      	movs	r2, #0
 800cab4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cab6:	4b13      	ldr	r3, [pc, #76]	@ (800cb04 <pvPortMalloc+0x198>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	3301      	adds	r3, #1
 800cabc:	4a11      	ldr	r2, [pc, #68]	@ (800cb04 <pvPortMalloc+0x198>)
 800cabe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cac0:	f7fe fb02 	bl	800b0c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cac4:	69fb      	ldr	r3, [r7, #28]
 800cac6:	f003 0307 	and.w	r3, r3, #7
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d00b      	beq.n	800cae6 <pvPortMalloc+0x17a>
	__asm volatile
 800cace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cad2:	f383 8811 	msr	BASEPRI, r3
 800cad6:	f3bf 8f6f 	isb	sy
 800cada:	f3bf 8f4f 	dsb	sy
 800cade:	60fb      	str	r3, [r7, #12]
}
 800cae0:	bf00      	nop
 800cae2:	bf00      	nop
 800cae4:	e7fd      	b.n	800cae2 <pvPortMalloc+0x176>
	return pvReturn;
 800cae6:	69fb      	ldr	r3, [r7, #28]
}
 800cae8:	4618      	mov	r0, r3
 800caea:	3728      	adds	r7, #40	@ 0x28
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	2000551c 	.word	0x2000551c
 800caf4:	20005530 	.word	0x20005530
 800caf8:	20005520 	.word	0x20005520
 800cafc:	20005514 	.word	0x20005514
 800cb00:	20005524 	.word	0x20005524
 800cb04:	20005528 	.word	0x20005528

0800cb08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b086      	sub	sp, #24
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d04f      	beq.n	800cbba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb1a:	2308      	movs	r3, #8
 800cb1c:	425b      	negs	r3, r3
 800cb1e:	697a      	ldr	r2, [r7, #20]
 800cb20:	4413      	add	r3, r2
 800cb22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb24:	697b      	ldr	r3, [r7, #20]
 800cb26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb28:	693b      	ldr	r3, [r7, #16]
 800cb2a:	685a      	ldr	r2, [r3, #4]
 800cb2c:	4b25      	ldr	r3, [pc, #148]	@ (800cbc4 <vPortFree+0xbc>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	4013      	ands	r3, r2
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	d10b      	bne.n	800cb4e <vPortFree+0x46>
	__asm volatile
 800cb36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	60fb      	str	r3, [r7, #12]
}
 800cb48:	bf00      	nop
 800cb4a:	bf00      	nop
 800cb4c:	e7fd      	b.n	800cb4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb4e:	693b      	ldr	r3, [r7, #16]
 800cb50:	681b      	ldr	r3, [r3, #0]
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	d00b      	beq.n	800cb6e <vPortFree+0x66>
	__asm volatile
 800cb56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb5a:	f383 8811 	msr	BASEPRI, r3
 800cb5e:	f3bf 8f6f 	isb	sy
 800cb62:	f3bf 8f4f 	dsb	sy
 800cb66:	60bb      	str	r3, [r7, #8]
}
 800cb68:	bf00      	nop
 800cb6a:	bf00      	nop
 800cb6c:	e7fd      	b.n	800cb6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb6e:	693b      	ldr	r3, [r7, #16]
 800cb70:	685a      	ldr	r2, [r3, #4]
 800cb72:	4b14      	ldr	r3, [pc, #80]	@ (800cbc4 <vPortFree+0xbc>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	4013      	ands	r3, r2
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d01e      	beq.n	800cbba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb7c:	693b      	ldr	r3, [r7, #16]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d11a      	bne.n	800cbba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb84:	693b      	ldr	r3, [r7, #16]
 800cb86:	685a      	ldr	r2, [r3, #4]
 800cb88:	4b0e      	ldr	r3, [pc, #56]	@ (800cbc4 <vPortFree+0xbc>)
 800cb8a:	681b      	ldr	r3, [r3, #0]
 800cb8c:	43db      	mvns	r3, r3
 800cb8e:	401a      	ands	r2, r3
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cb94:	f7fe fa8a 	bl	800b0ac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cb98:	693b      	ldr	r3, [r7, #16]
 800cb9a:	685a      	ldr	r2, [r3, #4]
 800cb9c:	4b0a      	ldr	r3, [pc, #40]	@ (800cbc8 <vPortFree+0xc0>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	4413      	add	r3, r2
 800cba2:	4a09      	ldr	r2, [pc, #36]	@ (800cbc8 <vPortFree+0xc0>)
 800cba4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cba6:	6938      	ldr	r0, [r7, #16]
 800cba8:	f000 f874 	bl	800cc94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cbac:	4b07      	ldr	r3, [pc, #28]	@ (800cbcc <vPortFree+0xc4>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	3301      	adds	r3, #1
 800cbb2:	4a06      	ldr	r2, [pc, #24]	@ (800cbcc <vPortFree+0xc4>)
 800cbb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cbb6:	f7fe fa87 	bl	800b0c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbba:	bf00      	nop
 800cbbc:	3718      	adds	r7, #24
 800cbbe:	46bd      	mov	sp, r7
 800cbc0:	bd80      	pop	{r7, pc}
 800cbc2:	bf00      	nop
 800cbc4:	20005530 	.word	0x20005530
 800cbc8:	20005520 	.word	0x20005520
 800cbcc:	2000552c 	.word	0x2000552c

0800cbd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b085      	sub	sp, #20
 800cbd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cbda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbdc:	4b27      	ldr	r3, [pc, #156]	@ (800cc7c <prvHeapInit+0xac>)
 800cbde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbe0:	68fb      	ldr	r3, [r7, #12]
 800cbe2:	f003 0307 	and.w	r3, r3, #7
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d00c      	beq.n	800cc04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	3307      	adds	r3, #7
 800cbee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f023 0307 	bic.w	r3, r3, #7
 800cbf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cbf8:	68ba      	ldr	r2, [r7, #8]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	1ad3      	subs	r3, r2, r3
 800cbfe:	4a1f      	ldr	r2, [pc, #124]	@ (800cc7c <prvHeapInit+0xac>)
 800cc00:	4413      	add	r3, r2
 800cc02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc08:	4a1d      	ldr	r2, [pc, #116]	@ (800cc80 <prvHeapInit+0xb0>)
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc0e:	4b1c      	ldr	r3, [pc, #112]	@ (800cc80 <prvHeapInit+0xb0>)
 800cc10:	2200      	movs	r2, #0
 800cc12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	68ba      	ldr	r2, [r7, #8]
 800cc18:	4413      	add	r3, r2
 800cc1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc1c:	2208      	movs	r2, #8
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	1a9b      	subs	r3, r3, r2
 800cc22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc24:	68fb      	ldr	r3, [r7, #12]
 800cc26:	f023 0307 	bic.w	r3, r3, #7
 800cc2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc2c:	68fb      	ldr	r3, [r7, #12]
 800cc2e:	4a15      	ldr	r2, [pc, #84]	@ (800cc84 <prvHeapInit+0xb4>)
 800cc30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc32:	4b14      	ldr	r3, [pc, #80]	@ (800cc84 <prvHeapInit+0xb4>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	2200      	movs	r2, #0
 800cc38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc3a:	4b12      	ldr	r3, [pc, #72]	@ (800cc84 <prvHeapInit+0xb4>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc46:	683b      	ldr	r3, [r7, #0]
 800cc48:	68fa      	ldr	r2, [r7, #12]
 800cc4a:	1ad2      	subs	r2, r2, r3
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc50:	4b0c      	ldr	r3, [pc, #48]	@ (800cc84 <prvHeapInit+0xb4>)
 800cc52:	681a      	ldr	r2, [r3, #0]
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	685b      	ldr	r3, [r3, #4]
 800cc5c:	4a0a      	ldr	r2, [pc, #40]	@ (800cc88 <prvHeapInit+0xb8>)
 800cc5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc60:	683b      	ldr	r3, [r7, #0]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	4a09      	ldr	r2, [pc, #36]	@ (800cc8c <prvHeapInit+0xbc>)
 800cc66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc68:	4b09      	ldr	r3, [pc, #36]	@ (800cc90 <prvHeapInit+0xc0>)
 800cc6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cc6e:	601a      	str	r2, [r3, #0]
}
 800cc70:	bf00      	nop
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc7a:	4770      	bx	lr
 800cc7c:	20001914 	.word	0x20001914
 800cc80:	20005514 	.word	0x20005514
 800cc84:	2000551c 	.word	0x2000551c
 800cc88:	20005524 	.word	0x20005524
 800cc8c:	20005520 	.word	0x20005520
 800cc90:	20005530 	.word	0x20005530

0800cc94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cc94:	b480      	push	{r7}
 800cc96:	b085      	sub	sp, #20
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc9c:	4b28      	ldr	r3, [pc, #160]	@ (800cd40 <prvInsertBlockIntoFreeList+0xac>)
 800cc9e:	60fb      	str	r3, [r7, #12]
 800cca0:	e002      	b.n	800cca8 <prvInsertBlockIntoFreeList+0x14>
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	60fb      	str	r3, [r7, #12]
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	687a      	ldr	r2, [r7, #4]
 800ccae:	429a      	cmp	r2, r3
 800ccb0:	d8f7      	bhi.n	800cca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccb6:	68fb      	ldr	r3, [r7, #12]
 800ccb8:	685b      	ldr	r3, [r3, #4]
 800ccba:	68ba      	ldr	r2, [r7, #8]
 800ccbc:	4413      	add	r3, r2
 800ccbe:	687a      	ldr	r2, [r7, #4]
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d108      	bne.n	800ccd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	685a      	ldr	r2, [r3, #4]
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	685b      	ldr	r3, [r3, #4]
 800cccc:	441a      	add	r2, r3
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccda:	687b      	ldr	r3, [r7, #4]
 800ccdc:	685b      	ldr	r3, [r3, #4]
 800ccde:	68ba      	ldr	r2, [r7, #8]
 800cce0:	441a      	add	r2, r3
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681b      	ldr	r3, [r3, #0]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d118      	bne.n	800cd1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	4b15      	ldr	r3, [pc, #84]	@ (800cd44 <prvInsertBlockIntoFreeList+0xb0>)
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	429a      	cmp	r2, r3
 800ccf4:	d00d      	beq.n	800cd12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	685a      	ldr	r2, [r3, #4]
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	685b      	ldr	r3, [r3, #4]
 800cd00:	441a      	add	r2, r3
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	681a      	ldr	r2, [r3, #0]
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	601a      	str	r2, [r3, #0]
 800cd10:	e008      	b.n	800cd24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd12:	4b0c      	ldr	r3, [pc, #48]	@ (800cd44 <prvInsertBlockIntoFreeList+0xb0>)
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	601a      	str	r2, [r3, #0]
 800cd1a:	e003      	b.n	800cd24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	681a      	ldr	r2, [r3, #0]
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d002      	beq.n	800cd32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd32:	bf00      	nop
 800cd34:	3714      	adds	r7, #20
 800cd36:	46bd      	mov	sp, r7
 800cd38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd3c:	4770      	bx	lr
 800cd3e:	bf00      	nop
 800cd40:	20005514 	.word	0x20005514
 800cd44:	2000551c 	.word	0x2000551c

0800cd48 <memset>:
 800cd48:	4402      	add	r2, r0
 800cd4a:	4603      	mov	r3, r0
 800cd4c:	4293      	cmp	r3, r2
 800cd4e:	d100      	bne.n	800cd52 <memset+0xa>
 800cd50:	4770      	bx	lr
 800cd52:	f803 1b01 	strb.w	r1, [r3], #1
 800cd56:	e7f9      	b.n	800cd4c <memset+0x4>

0800cd58 <_reclaim_reent>:
 800cd58:	4b29      	ldr	r3, [pc, #164]	@ (800ce00 <_reclaim_reent+0xa8>)
 800cd5a:	681b      	ldr	r3, [r3, #0]
 800cd5c:	4283      	cmp	r3, r0
 800cd5e:	b570      	push	{r4, r5, r6, lr}
 800cd60:	4604      	mov	r4, r0
 800cd62:	d04b      	beq.n	800cdfc <_reclaim_reent+0xa4>
 800cd64:	69c3      	ldr	r3, [r0, #28]
 800cd66:	b1ab      	cbz	r3, 800cd94 <_reclaim_reent+0x3c>
 800cd68:	68db      	ldr	r3, [r3, #12]
 800cd6a:	b16b      	cbz	r3, 800cd88 <_reclaim_reent+0x30>
 800cd6c:	2500      	movs	r5, #0
 800cd6e:	69e3      	ldr	r3, [r4, #28]
 800cd70:	68db      	ldr	r3, [r3, #12]
 800cd72:	5959      	ldr	r1, [r3, r5]
 800cd74:	2900      	cmp	r1, #0
 800cd76:	d13b      	bne.n	800cdf0 <_reclaim_reent+0x98>
 800cd78:	3504      	adds	r5, #4
 800cd7a:	2d80      	cmp	r5, #128	@ 0x80
 800cd7c:	d1f7      	bne.n	800cd6e <_reclaim_reent+0x16>
 800cd7e:	69e3      	ldr	r3, [r4, #28]
 800cd80:	4620      	mov	r0, r4
 800cd82:	68d9      	ldr	r1, [r3, #12]
 800cd84:	f000 f872 	bl	800ce6c <_free_r>
 800cd88:	69e3      	ldr	r3, [r4, #28]
 800cd8a:	6819      	ldr	r1, [r3, #0]
 800cd8c:	b111      	cbz	r1, 800cd94 <_reclaim_reent+0x3c>
 800cd8e:	4620      	mov	r0, r4
 800cd90:	f000 f86c 	bl	800ce6c <_free_r>
 800cd94:	6961      	ldr	r1, [r4, #20]
 800cd96:	b111      	cbz	r1, 800cd9e <_reclaim_reent+0x46>
 800cd98:	4620      	mov	r0, r4
 800cd9a:	f000 f867 	bl	800ce6c <_free_r>
 800cd9e:	69e1      	ldr	r1, [r4, #28]
 800cda0:	b111      	cbz	r1, 800cda8 <_reclaim_reent+0x50>
 800cda2:	4620      	mov	r0, r4
 800cda4:	f000 f862 	bl	800ce6c <_free_r>
 800cda8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cdaa:	b111      	cbz	r1, 800cdb2 <_reclaim_reent+0x5a>
 800cdac:	4620      	mov	r0, r4
 800cdae:	f000 f85d 	bl	800ce6c <_free_r>
 800cdb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cdb4:	b111      	cbz	r1, 800cdbc <_reclaim_reent+0x64>
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f000 f858 	bl	800ce6c <_free_r>
 800cdbc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cdbe:	b111      	cbz	r1, 800cdc6 <_reclaim_reent+0x6e>
 800cdc0:	4620      	mov	r0, r4
 800cdc2:	f000 f853 	bl	800ce6c <_free_r>
 800cdc6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cdc8:	b111      	cbz	r1, 800cdd0 <_reclaim_reent+0x78>
 800cdca:	4620      	mov	r0, r4
 800cdcc:	f000 f84e 	bl	800ce6c <_free_r>
 800cdd0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cdd2:	b111      	cbz	r1, 800cdda <_reclaim_reent+0x82>
 800cdd4:	4620      	mov	r0, r4
 800cdd6:	f000 f849 	bl	800ce6c <_free_r>
 800cdda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cddc:	b111      	cbz	r1, 800cde4 <_reclaim_reent+0x8c>
 800cdde:	4620      	mov	r0, r4
 800cde0:	f000 f844 	bl	800ce6c <_free_r>
 800cde4:	6a23      	ldr	r3, [r4, #32]
 800cde6:	b14b      	cbz	r3, 800cdfc <_reclaim_reent+0xa4>
 800cde8:	4620      	mov	r0, r4
 800cdea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cdee:	4718      	bx	r3
 800cdf0:	680e      	ldr	r6, [r1, #0]
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f000 f83a 	bl	800ce6c <_free_r>
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	e7bb      	b.n	800cd74 <_reclaim_reent+0x1c>
 800cdfc:	bd70      	pop	{r4, r5, r6, pc}
 800cdfe:	bf00      	nop
 800ce00:	2000002c 	.word	0x2000002c

0800ce04 <__libc_init_array>:
 800ce04:	b570      	push	{r4, r5, r6, lr}
 800ce06:	4d0d      	ldr	r5, [pc, #52]	@ (800ce3c <__libc_init_array+0x38>)
 800ce08:	4c0d      	ldr	r4, [pc, #52]	@ (800ce40 <__libc_init_array+0x3c>)
 800ce0a:	1b64      	subs	r4, r4, r5
 800ce0c:	10a4      	asrs	r4, r4, #2
 800ce0e:	2600      	movs	r6, #0
 800ce10:	42a6      	cmp	r6, r4
 800ce12:	d109      	bne.n	800ce28 <__libc_init_array+0x24>
 800ce14:	4d0b      	ldr	r5, [pc, #44]	@ (800ce44 <__libc_init_array+0x40>)
 800ce16:	4c0c      	ldr	r4, [pc, #48]	@ (800ce48 <__libc_init_array+0x44>)
 800ce18:	f000 f87e 	bl	800cf18 <_init>
 800ce1c:	1b64      	subs	r4, r4, r5
 800ce1e:	10a4      	asrs	r4, r4, #2
 800ce20:	2600      	movs	r6, #0
 800ce22:	42a6      	cmp	r6, r4
 800ce24:	d105      	bne.n	800ce32 <__libc_init_array+0x2e>
 800ce26:	bd70      	pop	{r4, r5, r6, pc}
 800ce28:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce2c:	4798      	blx	r3
 800ce2e:	3601      	adds	r6, #1
 800ce30:	e7ee      	b.n	800ce10 <__libc_init_array+0xc>
 800ce32:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce36:	4798      	blx	r3
 800ce38:	3601      	adds	r6, #1
 800ce3a:	e7f2      	b.n	800ce22 <__libc_init_array+0x1e>
 800ce3c:	0800d048 	.word	0x0800d048
 800ce40:	0800d048 	.word	0x0800d048
 800ce44:	0800d048 	.word	0x0800d048
 800ce48:	0800d04c 	.word	0x0800d04c

0800ce4c <__retarget_lock_acquire_recursive>:
 800ce4c:	4770      	bx	lr

0800ce4e <__retarget_lock_release_recursive>:
 800ce4e:	4770      	bx	lr

0800ce50 <memcpy>:
 800ce50:	440a      	add	r2, r1
 800ce52:	4291      	cmp	r1, r2
 800ce54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ce58:	d100      	bne.n	800ce5c <memcpy+0xc>
 800ce5a:	4770      	bx	lr
 800ce5c:	b510      	push	{r4, lr}
 800ce5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce66:	4291      	cmp	r1, r2
 800ce68:	d1f9      	bne.n	800ce5e <memcpy+0xe>
 800ce6a:	bd10      	pop	{r4, pc}

0800ce6c <_free_r>:
 800ce6c:	b538      	push	{r3, r4, r5, lr}
 800ce6e:	4605      	mov	r5, r0
 800ce70:	2900      	cmp	r1, #0
 800ce72:	d041      	beq.n	800cef8 <_free_r+0x8c>
 800ce74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce78:	1f0c      	subs	r4, r1, #4
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	bfb8      	it	lt
 800ce7e:	18e4      	addlt	r4, r4, r3
 800ce80:	f000 f83e 	bl	800cf00 <__malloc_lock>
 800ce84:	4a1d      	ldr	r2, [pc, #116]	@ (800cefc <_free_r+0x90>)
 800ce86:	6813      	ldr	r3, [r2, #0]
 800ce88:	b933      	cbnz	r3, 800ce98 <_free_r+0x2c>
 800ce8a:	6063      	str	r3, [r4, #4]
 800ce8c:	6014      	str	r4, [r2, #0]
 800ce8e:	4628      	mov	r0, r5
 800ce90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce94:	f000 b83a 	b.w	800cf0c <__malloc_unlock>
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	d908      	bls.n	800ceae <_free_r+0x42>
 800ce9c:	6820      	ldr	r0, [r4, #0]
 800ce9e:	1821      	adds	r1, r4, r0
 800cea0:	428b      	cmp	r3, r1
 800cea2:	bf01      	itttt	eq
 800cea4:	6819      	ldreq	r1, [r3, #0]
 800cea6:	685b      	ldreq	r3, [r3, #4]
 800cea8:	1809      	addeq	r1, r1, r0
 800ceaa:	6021      	streq	r1, [r4, #0]
 800ceac:	e7ed      	b.n	800ce8a <_free_r+0x1e>
 800ceae:	461a      	mov	r2, r3
 800ceb0:	685b      	ldr	r3, [r3, #4]
 800ceb2:	b10b      	cbz	r3, 800ceb8 <_free_r+0x4c>
 800ceb4:	42a3      	cmp	r3, r4
 800ceb6:	d9fa      	bls.n	800ceae <_free_r+0x42>
 800ceb8:	6811      	ldr	r1, [r2, #0]
 800ceba:	1850      	adds	r0, r2, r1
 800cebc:	42a0      	cmp	r0, r4
 800cebe:	d10b      	bne.n	800ced8 <_free_r+0x6c>
 800cec0:	6820      	ldr	r0, [r4, #0]
 800cec2:	4401      	add	r1, r0
 800cec4:	1850      	adds	r0, r2, r1
 800cec6:	4283      	cmp	r3, r0
 800cec8:	6011      	str	r1, [r2, #0]
 800ceca:	d1e0      	bne.n	800ce8e <_free_r+0x22>
 800cecc:	6818      	ldr	r0, [r3, #0]
 800cece:	685b      	ldr	r3, [r3, #4]
 800ced0:	6053      	str	r3, [r2, #4]
 800ced2:	4408      	add	r0, r1
 800ced4:	6010      	str	r0, [r2, #0]
 800ced6:	e7da      	b.n	800ce8e <_free_r+0x22>
 800ced8:	d902      	bls.n	800cee0 <_free_r+0x74>
 800ceda:	230c      	movs	r3, #12
 800cedc:	602b      	str	r3, [r5, #0]
 800cede:	e7d6      	b.n	800ce8e <_free_r+0x22>
 800cee0:	6820      	ldr	r0, [r4, #0]
 800cee2:	1821      	adds	r1, r4, r0
 800cee4:	428b      	cmp	r3, r1
 800cee6:	bf04      	itt	eq
 800cee8:	6819      	ldreq	r1, [r3, #0]
 800ceea:	685b      	ldreq	r3, [r3, #4]
 800ceec:	6063      	str	r3, [r4, #4]
 800ceee:	bf04      	itt	eq
 800cef0:	1809      	addeq	r1, r1, r0
 800cef2:	6021      	streq	r1, [r4, #0]
 800cef4:	6054      	str	r4, [r2, #4]
 800cef6:	e7ca      	b.n	800ce8e <_free_r+0x22>
 800cef8:	bd38      	pop	{r3, r4, r5, pc}
 800cefa:	bf00      	nop
 800cefc:	20005670 	.word	0x20005670

0800cf00 <__malloc_lock>:
 800cf00:	4801      	ldr	r0, [pc, #4]	@ (800cf08 <__malloc_lock+0x8>)
 800cf02:	f7ff bfa3 	b.w	800ce4c <__retarget_lock_acquire_recursive>
 800cf06:	bf00      	nop
 800cf08:	2000566c 	.word	0x2000566c

0800cf0c <__malloc_unlock>:
 800cf0c:	4801      	ldr	r0, [pc, #4]	@ (800cf14 <__malloc_unlock+0x8>)
 800cf0e:	f7ff bf9e 	b.w	800ce4e <__retarget_lock_release_recursive>
 800cf12:	bf00      	nop
 800cf14:	2000566c 	.word	0x2000566c

0800cf18 <_init>:
 800cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1a:	bf00      	nop
 800cf1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf1e:	bc08      	pop	{r3}
 800cf20:	469e      	mov	lr, r3
 800cf22:	4770      	bx	lr

0800cf24 <_fini>:
 800cf24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf26:	bf00      	nop
 800cf28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cf2a:	bc08      	pop	{r3}
 800cf2c:	469e      	mov	lr, r3
 800cf2e:	4770      	bx	lr
