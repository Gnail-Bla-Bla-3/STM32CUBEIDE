
Custom PWM Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ea0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08009030  08009030  0000a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800912c  0800912c  0000b060  2**0
                  CONTENTS
  4 .ARM          00000008  0800912c  0800912c  0000a12c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009134  08009134  0000b060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009134  08009134  0000a134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009138  08009138  0000a138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800913c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b060  2**0
                  CONTENTS
 10 .bss          000050ec  20000060  20000060  0000b060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000514c  2000514c  0000b060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001f1a5  00000000  00000000  0000b090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d04  00000000  00000000  0002a235  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b28  00000000  00000000  0002df40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000155d  00000000  00000000  0002fa68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00003b7c  00000000  00000000  00030fc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dfb6  00000000  00000000  00034b41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dc4a4  00000000  00000000  00052af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ef9b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007808  00000000  00000000  0012efe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  001367e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009018 	.word	0x08009018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009018 	.word	0x08009018

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 ffb2 	bl	800242c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f85a 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004cc:	f000 fcda 	bl	8000e84 <MX_GPIO_Init>
  MX_DMA_Init();
 80004d0:	f000 fc8a 	bl	8000de8 <MX_DMA_Init>
  MX_CAN1_Init();
 80004d4:	f000 f8c0 	bl	8000658 <MX_CAN1_Init>
  MX_CAN2_Init();
 80004d8:	f000 f8f4 	bl	80006c4 <MX_CAN2_Init>
  MX_SPI1_Init();
 80004dc:	f000 f956 	bl	800078c <MX_SPI1_Init>
  MX_TIM4_Init();
 80004e0:	f000 fa32 	bl	8000948 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80004e4:	f000 fc00 	bl	8000ce8 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80004e8:	f000 fc54 	bl	8000d94 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80004ec:	f000 f984 	bl	80007f8 <MX_TIM1_Init>
  MX_TIM8_Init();
 80004f0:	f000 fb10 	bl	8000b14 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80004f4:	f000 fc22 	bl	8000d3c <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80004f8:	f000 fba8 	bl	8000c4c <MX_TIM10_Init>
  MX_I2C3_Init();
 80004fc:	f000 f918 	bl	8000730 <MX_I2C3_Init>
  MX_TIM5_Init();
 8000500:	f000 fa98 	bl	8000a34 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000504:	f005 fef2 	bl	80062ec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8000508:	4a11      	ldr	r2, [pc, #68]	@ (8000550 <main+0x90>)
 800050a:	2100      	movs	r1, #0
 800050c:	4811      	ldr	r0, [pc, #68]	@ (8000554 <main+0x94>)
 800050e:	f005 ff37 	bl	8006380 <osThreadNew>
 8000512:	4603      	mov	r3, r0
 8000514:	4a10      	ldr	r2, [pc, #64]	@ (8000558 <main+0x98>)
 8000516:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8000518:	4a10      	ldr	r2, [pc, #64]	@ (800055c <main+0x9c>)
 800051a:	2100      	movs	r1, #0
 800051c:	4810      	ldr	r0, [pc, #64]	@ (8000560 <main+0xa0>)
 800051e:	f005 ff2f 	bl	8006380 <osThreadNew>
 8000522:	4603      	mov	r3, r0
 8000524:	4a0f      	ldr	r2, [pc, #60]	@ (8000564 <main+0xa4>)
 8000526:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8000528:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <main+0xa8>)
 800052a:	2100      	movs	r1, #0
 800052c:	480f      	ldr	r0, [pc, #60]	@ (800056c <main+0xac>)
 800052e:	f005 ff27 	bl	8006380 <osThreadNew>
 8000532:	4603      	mov	r3, r0
 8000534:	4a0e      	ldr	r2, [pc, #56]	@ (8000570 <main+0xb0>)
 8000536:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8000538:	4a0e      	ldr	r2, [pc, #56]	@ (8000574 <main+0xb4>)
 800053a:	2100      	movs	r1, #0
 800053c:	480e      	ldr	r0, [pc, #56]	@ (8000578 <main+0xb8>)
 800053e:	f005 ff1f 	bl	8006380 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0d      	ldr	r2, [pc, #52]	@ (800057c <main+0xbc>)
 8000546:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000548:	f005 fef4 	bl	8006334 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800054c:	bf00      	nop
 800054e:	e7fd      	b.n	800054c <main+0x8c>
 8000550:	0800907c 	.word	0x0800907c
 8000554:	08001079 	.word	0x08001079
 8000558:	20000598 	.word	0x20000598
 800055c:	080090a0 	.word	0x080090a0
 8000560:	08001089 	.word	0x08001089
 8000564:	2000059c 	.word	0x2000059c
 8000568:	080090c4 	.word	0x080090c4
 800056c:	08001135 	.word	0x08001135
 8000570:	200005a0 	.word	0x200005a0
 8000574:	080090e8 	.word	0x080090e8
 8000578:	08001145 	.word	0x08001145
 800057c:	200005a4 	.word	0x200005a4

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	@ 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0320 	add.w	r3, r7, #32
 800058a:	2230      	movs	r2, #48	@ 0x30
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f008 fc5a 	bl	8008e48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	f107 030c 	add.w	r3, r7, #12
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
 80005a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
 80005a8:	4b29      	ldr	r3, [pc, #164]	@ (8000650 <SystemClock_Config+0xd0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005ac:	4a28      	ldr	r2, [pc, #160]	@ (8000650 <SystemClock_Config+0xd0>)
 80005ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80005b4:	4b26      	ldr	r3, [pc, #152]	@ (8000650 <SystemClock_Config+0xd0>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c0:	2300      	movs	r3, #0
 80005c2:	607b      	str	r3, [r7, #4]
 80005c4:	4b23      	ldr	r3, [pc, #140]	@ (8000654 <SystemClock_Config+0xd4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a22      	ldr	r2, [pc, #136]	@ (8000654 <SystemClock_Config+0xd4>)
 80005ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ce:	6013      	str	r3, [r2, #0]
 80005d0:	4b20      	ldr	r3, [pc, #128]	@ (8000654 <SystemClock_Config+0xd4>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005dc:	2301      	movs	r3, #1
 80005de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e6:	2302      	movs	r3, #2
 80005e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80005f0:	2306      	movs	r3, #6
 80005f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005f4:	23a8      	movs	r3, #168	@ 0xa8
 80005f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f8:	2302      	movs	r3, #2
 80005fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005fc:	2304      	movs	r3, #4
 80005fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000600:	f107 0320 	add.w	r3, r7, #32
 8000604:	4618      	mov	r0, r3
 8000606:	f003 fa63 	bl	8003ad0 <HAL_RCC_OscConfig>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d001      	beq.n	8000614 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000610:	f000 fda0 	bl	8001154 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000614:	230f      	movs	r3, #15
 8000616:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000618:	2302      	movs	r3, #2
 800061a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000620:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000626:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800062a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800062c:	f107 030c 	add.w	r3, r7, #12
 8000630:	2105      	movs	r1, #5
 8000632:	4618      	mov	r0, r3
 8000634:	f003 fcc4 	bl	8003fc0 <HAL_RCC_ClockConfig>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800063e:	f000 fd89 	bl	8001154 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000642:	f003 fda3 	bl	800418c <HAL_RCC_EnableCSS>
}
 8000646:	bf00      	nop
 8000648:	3750      	adds	r7, #80	@ 0x50
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40023800 	.word	0x40023800
 8000654:	40007000 	.word	0x40007000

08000658 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 800065c:	4b17      	ldr	r3, [pc, #92]	@ (80006bc <MX_CAN1_Init+0x64>)
 800065e:	4a18      	ldr	r2, [pc, #96]	@ (80006c0 <MX_CAN1_Init+0x68>)
 8000660:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000662:	4b16      	ldr	r3, [pc, #88]	@ (80006bc <MX_CAN1_Init+0x64>)
 8000664:	2203      	movs	r2, #3
 8000666:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000668:	4b14      	ldr	r3, [pc, #80]	@ (80006bc <MX_CAN1_Init+0x64>)
 800066a:	2200      	movs	r2, #0
 800066c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800066e:	4b13      	ldr	r3, [pc, #76]	@ (80006bc <MX_CAN1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000674:	4b11      	ldr	r3, [pc, #68]	@ (80006bc <MX_CAN1_Init+0x64>)
 8000676:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800067a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 800067c:	4b0f      	ldr	r3, [pc, #60]	@ (80006bc <MX_CAN1_Init+0x64>)
 800067e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000682:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000684:	4b0d      	ldr	r3, [pc, #52]	@ (80006bc <MX_CAN1_Init+0x64>)
 8000686:	2200      	movs	r2, #0
 8000688:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800068a:	4b0c      	ldr	r3, [pc, #48]	@ (80006bc <MX_CAN1_Init+0x64>)
 800068c:	2200      	movs	r2, #0
 800068e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000690:	4b0a      	ldr	r3, [pc, #40]	@ (80006bc <MX_CAN1_Init+0x64>)
 8000692:	2200      	movs	r2, #0
 8000694:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000696:	4b09      	ldr	r3, [pc, #36]	@ (80006bc <MX_CAN1_Init+0x64>)
 8000698:	2200      	movs	r2, #0
 800069a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 800069c:	4b07      	ldr	r3, [pc, #28]	@ (80006bc <MX_CAN1_Init+0x64>)
 800069e:	2200      	movs	r2, #0
 80006a0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80006a2:	4b06      	ldr	r3, [pc, #24]	@ (80006bc <MX_CAN1_Init+0x64>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80006a8:	4804      	ldr	r0, [pc, #16]	@ (80006bc <MX_CAN1_Init+0x64>)
 80006aa:	f001 ff31 	bl	8002510 <HAL_CAN_Init>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80006b4:	f000 fd4e 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80006b8:	bf00      	nop
 80006ba:	bd80      	pop	{r7, pc}
 80006bc:	2000007c 	.word	0x2000007c
 80006c0:	40006400 	.word	0x40006400

080006c4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 80006c8:	4b17      	ldr	r3, [pc, #92]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006ca:	4a18      	ldr	r2, [pc, #96]	@ (800072c <MX_CAN2_Init+0x68>)
 80006cc:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 80006ce:	4b16      	ldr	r3, [pc, #88]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006d0:	2203      	movs	r2, #3
 80006d2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 80006d4:	4b14      	ldr	r3, [pc, #80]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80006da:	4b13      	ldr	r3, [pc, #76]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006dc:	2200      	movs	r2, #0
 80006de:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 80006e0:	4b11      	ldr	r3, [pc, #68]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006e2:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80006e6:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 80006e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006ea:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80006ee:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 80006f0:	4b0d      	ldr	r3, [pc, #52]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 80006f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 80006fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000728 <MX_CAN2_Init+0x64>)
 80006fe:	2200      	movs	r2, #0
 8000700:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000702:	4b09      	ldr	r3, [pc, #36]	@ (8000728 <MX_CAN2_Init+0x64>)
 8000704:	2200      	movs	r2, #0
 8000706:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000708:	4b07      	ldr	r3, [pc, #28]	@ (8000728 <MX_CAN2_Init+0x64>)
 800070a:	2200      	movs	r2, #0
 800070c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 800070e:	4b06      	ldr	r3, [pc, #24]	@ (8000728 <MX_CAN2_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000714:	4804      	ldr	r0, [pc, #16]	@ (8000728 <MX_CAN2_Init+0x64>)
 8000716:	f001 fefb 	bl	8002510 <HAL_CAN_Init>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000720:	f000 fd18 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000724:	bf00      	nop
 8000726:	bd80      	pop	{r7, pc}
 8000728:	200000a4 	.word	0x200000a4
 800072c:	40006800 	.word	0x40006800

08000730 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000734:	4b12      	ldr	r3, [pc, #72]	@ (8000780 <MX_I2C3_Init+0x50>)
 8000736:	4a13      	ldr	r2, [pc, #76]	@ (8000784 <MX_I2C3_Init+0x54>)
 8000738:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 800073a:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <MX_I2C3_Init+0x50>)
 800073c:	4a12      	ldr	r2, [pc, #72]	@ (8000788 <MX_I2C3_Init+0x58>)
 800073e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000740:	4b0f      	ldr	r3, [pc, #60]	@ (8000780 <MX_I2C3_Init+0x50>)
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000746:	4b0e      	ldr	r3, [pc, #56]	@ (8000780 <MX_I2C3_Init+0x50>)
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800074c:	4b0c      	ldr	r3, [pc, #48]	@ (8000780 <MX_I2C3_Init+0x50>)
 800074e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000752:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000754:	4b0a      	ldr	r3, [pc, #40]	@ (8000780 <MX_I2C3_Init+0x50>)
 8000756:	2200      	movs	r2, #0
 8000758:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800075a:	4b09      	ldr	r3, [pc, #36]	@ (8000780 <MX_I2C3_Init+0x50>)
 800075c:	2200      	movs	r2, #0
 800075e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000760:	4b07      	ldr	r3, [pc, #28]	@ (8000780 <MX_I2C3_Init+0x50>)
 8000762:	2200      	movs	r2, #0
 8000764:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000766:	4b06      	ldr	r3, [pc, #24]	@ (8000780 <MX_I2C3_Init+0x50>)
 8000768:	2200      	movs	r2, #0
 800076a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800076c:	4804      	ldr	r0, [pc, #16]	@ (8000780 <MX_I2C3_Init+0x50>)
 800076e:	f003 f86b 	bl	8003848 <HAL_I2C_Init>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000778:	f000 fcec 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}
 8000780:	200000cc 	.word	0x200000cc
 8000784:	40005c00 	.word	0x40005c00
 8000788:	00061a80 	.word	0x00061a80

0800078c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000790:	4b17      	ldr	r3, [pc, #92]	@ (80007f0 <MX_SPI1_Init+0x64>)
 8000792:	4a18      	ldr	r2, [pc, #96]	@ (80007f4 <MX_SPI1_Init+0x68>)
 8000794:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000796:	4b16      	ldr	r3, [pc, #88]	@ (80007f0 <MX_SPI1_Init+0x64>)
 8000798:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800079c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800079e:	4b14      	ldr	r3, [pc, #80]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007a4:	4b12      	ldr	r3, [pc, #72]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80007aa:	4b11      	ldr	r3, [pc, #68]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007ac:	2202      	movs	r2, #2
 80007ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 80007b0:	4b0f      	ldr	r3, [pc, #60]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007b2:	2201      	movs	r2, #1
 80007b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007b6:	4b0e      	ldr	r3, [pc, #56]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80007be:	4b0c      	ldr	r3, [pc, #48]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007c0:	2238      	movs	r2, #56	@ 0x38
 80007c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007c4:	4b0a      	ldr	r3, [pc, #40]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007ca:	4b09      	ldr	r3, [pc, #36]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d0:	4b07      	ldr	r3, [pc, #28]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007d6:	4b06      	ldr	r3, [pc, #24]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007d8:	220a      	movs	r2, #10
 80007da:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007dc:	4804      	ldr	r0, [pc, #16]	@ (80007f0 <MX_SPI1_Init+0x64>)
 80007de:	f003 fdf6 	bl	80043ce <HAL_SPI_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007e8:	f000 fcb4 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	20000120 	.word	0x20000120
 80007f4:	40013000 	.word	0x40013000

080007f8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b092      	sub	sp, #72	@ 0x48
 80007fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007fe:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000808:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
 8000818:	615a      	str	r2, [r3, #20]
 800081a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800081c:	1d3b      	adds	r3, r7, #4
 800081e:	2220      	movs	r2, #32
 8000820:	2100      	movs	r1, #0
 8000822:	4618      	mov	r0, r3
 8000824:	f008 fb10 	bl	8008e48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000828:	4b45      	ldr	r3, [pc, #276]	@ (8000940 <MX_TIM1_Init+0x148>)
 800082a:	4a46      	ldr	r2, [pc, #280]	@ (8000944 <MX_TIM1_Init+0x14c>)
 800082c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 800082e:	4b44      	ldr	r3, [pc, #272]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000830:	f240 124f 	movw	r2, #335	@ 0x14f
 8000834:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000836:	4b42      	ldr	r3, [pc, #264]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 800083c:	4b40      	ldr	r3, [pc, #256]	@ (8000940 <MX_TIM1_Init+0x148>)
 800083e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000842:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000844:	4b3e      	ldr	r3, [pc, #248]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800084a:	4b3d      	ldr	r3, [pc, #244]	@ (8000940 <MX_TIM1_Init+0x148>)
 800084c:	2200      	movs	r2, #0
 800084e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b3b      	ldr	r3, [pc, #236]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000856:	483a      	ldr	r0, [pc, #232]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000858:	f003 fefa 	bl	8004650 <HAL_TIM_PWM_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000862:	f000 fc77 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000866:	2300      	movs	r3, #0
 8000868:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800086a:	2300      	movs	r3, #0
 800086c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800086e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000872:	4619      	mov	r1, r3
 8000874:	4832      	ldr	r0, [pc, #200]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000876:	f004 fd19 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000880:	f000 fc68 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000884:	2360      	movs	r3, #96	@ 0x60
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800088c:	2300      	movs	r3, #0
 800088e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000890:	2300      	movs	r3, #0
 8000892:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000894:	2300      	movs	r3, #0
 8000896:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000898:	2300      	movs	r3, #0
 800089a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800089c:	2300      	movs	r3, #0
 800089e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008a4:	2200      	movs	r2, #0
 80008a6:	4619      	mov	r1, r3
 80008a8:	4825      	ldr	r0, [pc, #148]	@ (8000940 <MX_TIM1_Init+0x148>)
 80008aa:	f004 f859 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80008b4:	f000 fc4e 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008bc:	2204      	movs	r2, #4
 80008be:	4619      	mov	r1, r3
 80008c0:	481f      	ldr	r0, [pc, #124]	@ (8000940 <MX_TIM1_Init+0x148>)
 80008c2:	f004 f84d 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 80008cc:	f000 fc42 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d4:	2208      	movs	r2, #8
 80008d6:	4619      	mov	r1, r3
 80008d8:	4819      	ldr	r0, [pc, #100]	@ (8000940 <MX_TIM1_Init+0x148>)
 80008da:	f004 f841 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80008e4:	f000 fc36 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80008e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ec:	220c      	movs	r2, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	4813      	ldr	r0, [pc, #76]	@ (8000940 <MX_TIM1_Init+0x148>)
 80008f2:	f004 f835 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80008fc:	f000 fc2a 	bl	8001154 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000900:	2300      	movs	r3, #0
 8000902:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000908:	2300      	movs	r3, #0
 800090a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800090c:	2300      	movs	r3, #0
 800090e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000914:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000918:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800091a:	2300      	movs	r3, #0
 800091c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800091e:	1d3b      	adds	r3, r7, #4
 8000920:	4619      	mov	r1, r3
 8000922:	4807      	ldr	r0, [pc, #28]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000924:	f004 fd3e 	bl	80053a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 800092e:	f000 fc11 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000932:	4803      	ldr	r0, [pc, #12]	@ (8000940 <MX_TIM1_Init+0x148>)
 8000934:	f001 f9bc 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 8000938:	bf00      	nop
 800093a:	3748      	adds	r7, #72	@ 0x48
 800093c:	46bd      	mov	sp, r7
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000178 	.word	0x20000178
 8000944:	40010000 	.word	0x40010000

08000948 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b08e      	sub	sp, #56	@ 0x38
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800094e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	605a      	str	r2, [r3, #4]
 8000958:	609a      	str	r2, [r3, #8]
 800095a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095c:	f107 0320 	add.w	r3, r7, #32
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000966:	1d3b      	adds	r3, r7, #4
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]
 8000974:	615a      	str	r2, [r3, #20]
 8000976:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000978:	4b2c      	ldr	r3, [pc, #176]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 800097a:	4a2d      	ldr	r2, [pc, #180]	@ (8000a30 <MX_TIM4_Init+0xe8>)
 800097c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 800097e:	4b2b      	ldr	r3, [pc, #172]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 8000980:	2253      	movs	r2, #83	@ 0x53
 8000982:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000984:	4b29      	ldr	r3, [pc, #164]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 8000986:	2200      	movs	r2, #0
 8000988:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 800098a:	4b28      	ldr	r3, [pc, #160]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 800098c:	22f9      	movs	r2, #249	@ 0xf9
 800098e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000990:	4b26      	ldr	r3, [pc, #152]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 8000992:	2200      	movs	r2, #0
 8000994:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000996:	4b25      	ldr	r3, [pc, #148]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 8000998:	2280      	movs	r2, #128	@ 0x80
 800099a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800099c:	4823      	ldr	r0, [pc, #140]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 800099e:	f003 fd9f 	bl	80044e0 <HAL_TIM_Base_Init>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80009a8:	f000 fbd4 	bl	8001154 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009b6:	4619      	mov	r1, r3
 80009b8:	481c      	ldr	r0, [pc, #112]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 80009ba:	f004 f893 	bl	8004ae4 <HAL_TIM_ConfigClockSource>
 80009be:	4603      	mov	r3, r0
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d001      	beq.n	80009c8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009c4:	f000 fbc6 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009c8:	4818      	ldr	r0, [pc, #96]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 80009ca:	f003 fe41 	bl	8004650 <HAL_TIM_PWM_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009d4:	f000 fbbe 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d8:	2300      	movs	r3, #0
 80009da:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009dc:	2300      	movs	r3, #0
 80009de:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009e0:	f107 0320 	add.w	r3, r7, #32
 80009e4:	4619      	mov	r1, r3
 80009e6:	4811      	ldr	r0, [pc, #68]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 80009e8:	f004 fc60 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009f2:	f000 fbaf 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009f6:	2360      	movs	r3, #96	@ 0x60
 80009f8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80009fa:	f642 1303 	movw	r3, #10499	@ 0x2903
 80009fe:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a00:	2300      	movs	r3, #0
 8000a02:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a08:	1d3b      	adds	r3, r7, #4
 8000a0a:	2208      	movs	r2, #8
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4807      	ldr	r0, [pc, #28]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 8000a10:	f003 ffa6 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000a1a:	f000 fb9b 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a1e:	4803      	ldr	r0, [pc, #12]	@ (8000a2c <MX_TIM4_Init+0xe4>)
 8000a20:	f001 f946 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 8000a24:	bf00      	nop
 8000a26:	3738      	adds	r7, #56	@ 0x38
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	200001c0 	.word	0x200001c0
 8000a30:	40000800 	.word	0x40000800

08000a34 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b08a      	sub	sp, #40	@ 0x28
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2200      	movs	r2, #0
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	2200      	movs	r2, #0
 8000a48:	601a      	str	r2, [r3, #0]
 8000a4a:	605a      	str	r2, [r3, #4]
 8000a4c:	609a      	str	r2, [r3, #8]
 8000a4e:	60da      	str	r2, [r3, #12]
 8000a50:	611a      	str	r2, [r3, #16]
 8000a52:	615a      	str	r2, [r3, #20]
 8000a54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000a56:	4b2d      	ldr	r3, [pc, #180]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a58:	4a2d      	ldr	r2, [pc, #180]	@ (8000b10 <MX_TIM5_Init+0xdc>)
 8000a5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000a5c:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a5e:	2253      	movs	r2, #83	@ 0x53
 8000a60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a62:	4b2a      	ldr	r3, [pc, #168]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8000a68:	4b28      	ldr	r3, [pc, #160]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a6a:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000a6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a70:	4b26      	ldr	r3, [pc, #152]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b25      	ldr	r3, [pc, #148]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000a7c:	4823      	ldr	r0, [pc, #140]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a7e:	f003 fde7 	bl	8004650 <HAL_TIM_PWM_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000a88:	f000 fb64 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a90:	2300      	movs	r3, #0
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000a94:	f107 0320 	add.w	r3, r7, #32
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481c      	ldr	r0, [pc, #112]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000a9c:	f004 fc06 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000aa6:	f000 fb55 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000aaa:	2360      	movs	r3, #96	@ 0x60
 8000aac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4812      	ldr	r0, [pc, #72]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000ac2:	f003 ff4d 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000acc:	f000 fb42 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ad0:	1d3b      	adds	r3, r7, #4
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	480d      	ldr	r0, [pc, #52]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000ad8:	f003 ff42 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ae2:	f000 fb37 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ae6:	1d3b      	adds	r3, r7, #4
 8000ae8:	2208      	movs	r2, #8
 8000aea:	4619      	mov	r1, r3
 8000aec:	4807      	ldr	r0, [pc, #28]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000aee:	f003 ff37 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000af8:	f000 fb2c 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000afc:	4803      	ldr	r0, [pc, #12]	@ (8000b0c <MX_TIM5_Init+0xd8>)
 8000afe:	f001 f8d7 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 8000b02:	bf00      	nop
 8000b04:	3728      	adds	r7, #40	@ 0x28
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000208 	.word	0x20000208
 8000b10:	40000c00 	.word	0x40000c00

08000b14 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b092      	sub	sp, #72	@ 0x48
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b1a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
 8000b32:	611a      	str	r2, [r3, #16]
 8000b34:	615a      	str	r2, [r3, #20]
 8000b36:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000b38:	1d3b      	adds	r3, r7, #4
 8000b3a:	2220      	movs	r2, #32
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f008 f982 	bl	8008e48 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000b44:	4b3f      	ldr	r3, [pc, #252]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b46:	4a40      	ldr	r2, [pc, #256]	@ (8000c48 <MX_TIM8_Init+0x134>)
 8000b48:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 335;
 8000b4a:	4b3e      	ldr	r3, [pc, #248]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b4c:	f240 124f 	movw	r2, #335	@ 0x14f
 8000b50:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b52:	4b3c      	ldr	r3, [pc, #240]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000b58:	4b3a      	ldr	r3, [pc, #232]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b5a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b5e:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b60:	4b38      	ldr	r3, [pc, #224]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000b66:	4b37      	ldr	r3, [pc, #220]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b6c:	4b35      	ldr	r3, [pc, #212]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b6e:	2280      	movs	r2, #128	@ 0x80
 8000b70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000b72:	4834      	ldr	r0, [pc, #208]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b74:	f003 fd6c 	bl	8004650 <HAL_TIM_PWM_Init>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000b7e:	f000 fae9 	bl	8001154 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b82:	2300      	movs	r3, #0
 8000b84:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b86:	2300      	movs	r3, #0
 8000b88:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000b8a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000b8e:	4619      	mov	r1, r3
 8000b90:	482c      	ldr	r0, [pc, #176]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000b92:	f004 fb8b 	bl	80052ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8000b9c:	f000 fada 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ba0:	2360      	movs	r3, #96	@ 0x60
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	4619      	mov	r1, r3
 8000bc4:	481f      	ldr	r0, [pc, #124]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000bc6:	f003 fecb 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8000bd0:	f000 fac0 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000bd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd8:	2204      	movs	r2, #4
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4819      	ldr	r0, [pc, #100]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000bde:	f003 febf 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 8000be8:	f000 fab4 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000bec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf0:	2208      	movs	r2, #8
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000bf6:	f003 feb3 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000c00:	f000 faa8 	bl	8001154 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c04:	2300      	movs	r3, #0
 8000c06:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c1c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8000c22:	1d3b      	adds	r3, r7, #4
 8000c24:	4619      	mov	r1, r3
 8000c26:	4807      	ldr	r0, [pc, #28]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000c28:	f004 fbbc 	bl	80053a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 8000c32:	f000 fa8f 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8000c36:	4803      	ldr	r0, [pc, #12]	@ (8000c44 <MX_TIM8_Init+0x130>)
 8000c38:	f001 f83a 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 8000c3c:	bf00      	nop
 8000c3e:	3748      	adds	r7, #72	@ 0x48
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	20000250 	.word	0x20000250
 8000c48:	40010400 	.word	0x40010400

08000c4c <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b088      	sub	sp, #32
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c52:	1d3b      	adds	r3, r7, #4
 8000c54:	2200      	movs	r2, #0
 8000c56:	601a      	str	r2, [r3, #0]
 8000c58:	605a      	str	r2, [r3, #4]
 8000c5a:	609a      	str	r2, [r3, #8]
 8000c5c:	60da      	str	r2, [r3, #12]
 8000c5e:	611a      	str	r2, [r3, #16]
 8000c60:	615a      	str	r2, [r3, #20]
 8000c62:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000c64:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c66:	4a1f      	ldr	r2, [pc, #124]	@ (8000ce4 <MX_TIM10_Init+0x98>)
 8000c68:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8000c6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c70:	4b1b      	ldr	r3, [pc, #108]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8000c76:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c78:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000c7c:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c7e:	4b18      	ldr	r3, [pc, #96]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c84:	4b16      	ldr	r3, [pc, #88]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000c8a:	4815      	ldr	r0, [pc, #84]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c8c:	f003 fc28 	bl	80044e0 <HAL_TIM_Base_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8000c96:	f000 fa5d 	bl	8001154 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8000c9a:	4811      	ldr	r0, [pc, #68]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000c9c:	f003 fcd8 	bl	8004650 <HAL_TIM_PWM_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 8000ca6:	f000 fa55 	bl	8001154 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000caa:	2360      	movs	r3, #96	@ 0x60
 8000cac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cba:	1d3b      	adds	r3, r7, #4
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000cc2:	f003 fe4d 	bl	8004960 <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8000ccc:	f000 fa42 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <MX_TIM10_Init+0x94>)
 8000cd2:	f000 ffed 	bl	8001cb0 <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3720      	adds	r7, #32
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20000298 	.word	0x20000298
 8000ce4:	40014400 	.word	0x40014400

08000ce8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cec:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000cee:	4a12      	ldr	r2, [pc, #72]	@ (8000d38 <MX_USART1_UART_Init+0x50>)
 8000cf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cf2:	4b10      	ldr	r3, [pc, #64]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000cf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000cf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d00:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d06:	4b0b      	ldr	r3, [pc, #44]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000d0e:	220c      	movs	r2, #12
 8000d10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d12:	4b08      	ldr	r3, [pc, #32]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d18:	4b06      	ldr	r3, [pc, #24]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d1e:	4805      	ldr	r0, [pc, #20]	@ (8000d34 <MX_USART1_UART_Init+0x4c>)
 8000d20:	f004 fb92 	bl	8005448 <HAL_UART_Init>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d2a:	f000 fa13 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	200002e0 	.word	0x200002e0
 8000d38:	40011000 	.word	0x40011000

08000d3c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <MX_USART3_UART_Init+0x50>)
 8000d44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d48:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <MX_USART3_UART_Init+0x54>)
 8000d4a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d52:	4b0d      	ldr	r3, [pc, #52]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8000d58:	4b0b      	ldr	r3, [pc, #44]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d60:	4b09      	ldr	r3, [pc, #36]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d62:	220c      	movs	r2, #12
 8000d64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d66:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d6c:	4b06      	ldr	r3, [pc, #24]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000d72:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_USART3_UART_Init+0x4c>)
 8000d74:	f004 fb68 	bl	8005448 <HAL_UART_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d7e:	f000 f9e9 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20000328 	.word	0x20000328
 8000d8c:	40004800 	.word	0x40004800
 8000d90:	000186a0 	.word	0x000186a0

08000d94 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8000d98:	4b11      	ldr	r3, [pc, #68]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000d9a:	4a12      	ldr	r2, [pc, #72]	@ (8000de4 <MX_USART6_UART_Init+0x50>)
 8000d9c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8000d9e:	4b10      	ldr	r3, [pc, #64]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000da0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000da4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8000da6:	4b0e      	ldr	r3, [pc, #56]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8000db2:	4b0b      	ldr	r3, [pc, #44]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8000db8:	4b09      	ldr	r3, [pc, #36]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000dba:	220c      	movs	r2, #12
 8000dbc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dbe:	4b08      	ldr	r3, [pc, #32]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dc4:	4b06      	ldr	r3, [pc, #24]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8000dca:	4805      	ldr	r0, [pc, #20]	@ (8000de0 <MX_USART6_UART_Init+0x4c>)
 8000dcc:	f004 fb3c 	bl	8005448 <HAL_UART_Init>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8000dd6:	f000 f9bd 	bl	8001154 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8000dda:	bf00      	nop
 8000ddc:	bd80      	pop	{r7, pc}
 8000dde:	bf00      	nop
 8000de0:	20000370 	.word	0x20000370
 8000de4:	40011400 	.word	0x40011400

08000de8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b082      	sub	sp, #8
 8000dec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000dee:	2300      	movs	r3, #0
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	4b23      	ldr	r3, [pc, #140]	@ (8000e80 <MX_DMA_Init+0x98>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df6:	4a22      	ldr	r2, [pc, #136]	@ (8000e80 <MX_DMA_Init+0x98>)
 8000df8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dfe:	4b20      	ldr	r3, [pc, #128]	@ (8000e80 <MX_DMA_Init+0x98>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e06:	607b      	str	r3, [r7, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	603b      	str	r3, [r7, #0]
 8000e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e80 <MX_DMA_Init+0x98>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	4a1b      	ldr	r2, [pc, #108]	@ (8000e80 <MX_DMA_Init+0x98>)
 8000e14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e1a:	4b19      	ldr	r3, [pc, #100]	@ (8000e80 <MX_DMA_Init+0x98>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e22:	603b      	str	r3, [r7, #0]
 8000e24:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000e26:	2200      	movs	r2, #0
 8000e28:	2105      	movs	r1, #5
 8000e2a:	200c      	movs	r0, #12
 8000e2c:	f001 ff7f 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000e30:	200c      	movs	r0, #12
 8000e32:	f001 ff98 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000e36:	2200      	movs	r2, #0
 8000e38:	2105      	movs	r1, #5
 8000e3a:	2039      	movs	r0, #57	@ 0x39
 8000e3c:	f001 ff77 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000e40:	2039      	movs	r0, #57	@ 0x39
 8000e42:	f001 ff90 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000e46:	2200      	movs	r2, #0
 8000e48:	2105      	movs	r1, #5
 8000e4a:	203a      	movs	r0, #58	@ 0x3a
 8000e4c:	f001 ff6f 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000e50:	203a      	movs	r0, #58	@ 0x3a
 8000e52:	f001 ff88 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000e56:	2200      	movs	r2, #0
 8000e58:	2105      	movs	r1, #5
 8000e5a:	2045      	movs	r0, #69	@ 0x45
 8000e5c:	f001 ff67 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000e60:	2045      	movs	r0, #69	@ 0x45
 8000e62:	f001 ff80 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000e66:	2200      	movs	r2, #0
 8000e68:	2105      	movs	r1, #5
 8000e6a:	2046      	movs	r0, #70	@ 0x46
 8000e6c:	f001 ff5f 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000e70:	2046      	movs	r0, #70	@ 0x46
 8000e72:	f001 ff78 	bl	8002d66 <HAL_NVIC_EnableIRQ>

}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	40023800 	.word	0x40023800

08000e84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08e      	sub	sp, #56	@ 0x38
 8000e88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8e:	2200      	movs	r2, #0
 8000e90:	601a      	str	r2, [r3, #0]
 8000e92:	605a      	str	r2, [r3, #4]
 8000e94:	609a      	str	r2, [r3, #8]
 8000e96:	60da      	str	r2, [r3, #12]
 8000e98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	623b      	str	r3, [r7, #32]
 8000e9e:	4b71      	ldr	r3, [pc, #452]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ea2:	4a70      	ldr	r2, [pc, #448]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eaa:	4b6e      	ldr	r3, [pc, #440]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	623b      	str	r3, [r7, #32]
 8000eb4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	61fb      	str	r3, [r7, #28]
 8000eba:	4b6a      	ldr	r3, [pc, #424]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a69      	ldr	r2, [pc, #420]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ec0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b67      	ldr	r3, [pc, #412]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000ece:	61fb      	str	r3, [r7, #28]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	61bb      	str	r3, [r7, #24]
 8000ed6:	4b63      	ldr	r3, [pc, #396]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	4a62      	ldr	r2, [pc, #392]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ee2:	4b60      	ldr	r3, [pc, #384]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	61bb      	str	r3, [r7, #24]
 8000eec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	617b      	str	r3, [r7, #20]
 8000ef2:	4b5c      	ldr	r3, [pc, #368]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	4a5b      	ldr	r2, [pc, #364]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000ef8:	f043 0308 	orr.w	r3, r3, #8
 8000efc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000efe:	4b59      	ldr	r3, [pc, #356]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f02:	f003 0308 	and.w	r3, r3, #8
 8000f06:	617b      	str	r3, [r7, #20]
 8000f08:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	4b55      	ldr	r3, [pc, #340]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	4a54      	ldr	r2, [pc, #336]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f14:	f043 0304 	orr.w	r3, r3, #4
 8000f18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f1a:	4b52      	ldr	r3, [pc, #328]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1e:	f003 0304 	and.w	r3, r3, #4
 8000f22:	613b      	str	r3, [r7, #16]
 8000f24:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b4e      	ldr	r3, [pc, #312]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a4d      	ldr	r2, [pc, #308]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b4b      	ldr	r3, [pc, #300]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f42:	2300      	movs	r3, #0
 8000f44:	60bb      	str	r3, [r7, #8]
 8000f46:	4b47      	ldr	r3, [pc, #284]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	4a46      	ldr	r2, [pc, #280]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f52:	4b44      	ldr	r3, [pc, #272]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f5a:	60bb      	str	r3, [r7, #8]
 8000f5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b40      	ldr	r3, [pc, #256]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	4a3f      	ldr	r2, [pc, #252]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f68:	f043 0320 	orr.w	r3, r3, #32
 8000f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f6e:	4b3d      	ldr	r3, [pc, #244]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f72:	f003 0320 	and.w	r3, r3, #32
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b39      	ldr	r3, [pc, #228]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	4a38      	ldr	r2, [pc, #224]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f84:	f043 0310 	orr.w	r3, r3, #16
 8000f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f8a:	4b36      	ldr	r3, [pc, #216]	@ (8001064 <MX_GPIO_Init+0x1e0>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	f003 0310 	and.w	r3, r3, #16
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2140      	movs	r1, #64	@ 0x40
 8000f9a:	4833      	ldr	r0, [pc, #204]	@ (8001068 <MX_GPIO_Init+0x1e4>)
 8000f9c:	f002 fc16 	bl	80037cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	2110      	movs	r1, #16
 8000fa4:	4831      	ldr	r0, [pc, #196]	@ (800106c <MX_GPIO_Init+0x1e8>)
 8000fa6:	f002 fc11 	bl	80037cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	2101      	movs	r1, #1
 8000fae:	4830      	ldr	r0, [pc, #192]	@ (8001070 <MX_GPIO_Init+0x1ec>)
 8000fb0:	f002 fc0c 	bl	80037cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000fb4:	2340      	movs	r3, #64	@ 0x40
 8000fb6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fc4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fc8:	4619      	mov	r1, r3
 8000fca:	4827      	ldr	r0, [pc, #156]	@ (8001068 <MX_GPIO_Init+0x1e4>)
 8000fcc:	f002 fa62 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000fd0:	2308      	movs	r3, #8
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000fd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4820      	ldr	r0, [pc, #128]	@ (8001068 <MX_GPIO_Init+0x1e4>)
 8000fe6:	f002 fa55 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000fea:	2310      	movs	r3, #16
 8000fec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ffe:	4619      	mov	r1, r3
 8001000:	481a      	ldr	r0, [pc, #104]	@ (800106c <MX_GPIO_Init+0x1e8>)
 8001002:	f002 fa47 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8001006:	2330      	movs	r3, #48	@ 0x30
 8001008:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800100e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001014:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001018:	4619      	mov	r1, r3
 800101a:	4816      	ldr	r0, [pc, #88]	@ (8001074 <MX_GPIO_Init+0x1f0>)
 800101c:	f002 fa3a 	bl	8003494 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001020:	2301      	movs	r3, #1
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001024:	2301      	movs	r3, #1
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	2300      	movs	r3, #0
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800102c:	2300      	movs	r3, #0
 800102e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001034:	4619      	mov	r1, r3
 8001036:	480e      	ldr	r0, [pc, #56]	@ (8001070 <MX_GPIO_Init+0x1ec>)
 8001038:	f002 fa2c 	bl	8003494 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 800103c:	2200      	movs	r2, #0
 800103e:	2105      	movs	r1, #5
 8001040:	2009      	movs	r0, #9
 8001042:	f001 fe74 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8001046:	2009      	movs	r0, #9
 8001048:	f001 fe8d 	bl	8002d66 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2105      	movs	r1, #5
 8001050:	200a      	movs	r0, #10
 8001052:	f001 fe6c 	bl	8002d2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001056:	200a      	movs	r0, #10
 8001058:	f001 fe85 	bl	8002d66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800105c:	bf00      	nop
 800105e:	3738      	adds	r7, #56	@ 0x38
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40021800 	.word	0x40021800
 800106c:	40020000 	.word	0x40020000
 8001070:	40020400 	.word	0x40020400
 8001074:	40020800 	.word	0x40020800

08001078 <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b082      	sub	sp, #8
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  osDelay(1);
 8001080:	2001      	movs	r0, #1
 8001082:	f005 fa0f 	bl	80064a4 <osDelay>
 8001086:	e7fb      	b.n	8001080 <TaskMain+0x8>

08001088 <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 8001088:	b5f0      	push	{r4, r5, r6, r7, lr}
 800108a:	b0c7      	sub	sp, #284	@ 0x11c
 800108c:	af44      	add	r7, sp, #272	@ 0x110
 800108e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
  /* Infinite loop */
  HAL_TIM_Base_Start(&htim1);
 8001090:	4823      	ldr	r0, [pc, #140]	@ (8001120 <TaskChassis+0x98>)
 8001092:	f003 fa75 	bl	8004580 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8001096:	4823      	ldr	r0, [pc, #140]	@ (8001124 <TaskChassis+0x9c>)
 8001098:	f003 fa72 	bl	8004580 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 800109c:	4822      	ldr	r0, [pc, #136]	@ (8001128 <TaskChassis+0xa0>)
 800109e:	f003 fa6f 	bl	8004580 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80010a2:	4822      	ldr	r0, [pc, #136]	@ (800112c <TaskChassis+0xa4>)
 80010a4:	f003 fa6c 	bl	8004580 <HAL_TIM_Base_Start>

  PWMInit (htim1, htim4, htim5, htim8);
 80010a8:	4e1d      	ldr	r6, [pc, #116]	@ (8001120 <TaskChassis+0x98>)
 80010aa:	4a20      	ldr	r2, [pc, #128]	@ (800112c <TaskChassis+0xa4>)
 80010ac:	ab32      	add	r3, sp, #200	@ 0xc8
 80010ae:	4611      	mov	r1, r2
 80010b0:	2248      	movs	r2, #72	@ 0x48
 80010b2:	4618      	mov	r0, r3
 80010b4:	f007 ff4c 	bl	8008f50 <memcpy>
 80010b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001128 <TaskChassis+0xa0>)
 80010ba:	ab20      	add	r3, sp, #128	@ 0x80
 80010bc:	4611      	mov	r1, r2
 80010be:	2248      	movs	r2, #72	@ 0x48
 80010c0:	4618      	mov	r0, r3
 80010c2:	f007 ff45 	bl	8008f50 <memcpy>
 80010c6:	4a17      	ldr	r2, [pc, #92]	@ (8001124 <TaskChassis+0x9c>)
 80010c8:	ab0e      	add	r3, sp, #56	@ 0x38
 80010ca:	4611      	mov	r1, r2
 80010cc:	2248      	movs	r2, #72	@ 0x48
 80010ce:	4618      	mov	r0, r3
 80010d0:	f007 ff3e 	bl	8008f50 <memcpy>
 80010d4:	466d      	mov	r5, sp
 80010d6:	f106 0410 	add.w	r4, r6, #16
 80010da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80010ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80010f2:	f000 f835 	bl	8001160 <PWMInit>
		iVal++;
	}
	float realVal = iVal/1000;
    */
	// (TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency)
	PWMOutput(LED, 2, 500);
 80010f6:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80010fa:	2102      	movs	r1, #2
 80010fc:	2001      	movs	r0, #1
 80010fe:	f000 fa4f 	bl	80015a0 <PWMOutput>

	// (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val)
	PWMInitialize(LED, FR, 2, 0.9);
 8001102:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 8001130 <TaskChassis+0xa8>
 8001106:	2202      	movs	r2, #2
 8001108:	2101      	movs	r1, #1
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f94a 	bl	80013a4 <PWMInitialize>
	// (*tim5).Instance->CCR2=value;

	// htim5.Init.Period = 1000;

	// htim5.Instance->CCR2=400;
	PWMTimerStarter();
 8001110:	f000 fa78 	bl	8001604 <PWMTimerStarter>

    osDelay(5);
 8001114:	2005      	movs	r0, #5
 8001116:	f005 f9c5 	bl	80064a4 <osDelay>
	PWMOutput(LED, 2, 500);
 800111a:	bf00      	nop
 800111c:	e7eb      	b.n	80010f6 <TaskChassis+0x6e>
 800111e:	bf00      	nop
 8001120:	20000178 	.word	0x20000178
 8001124:	200001c0 	.word	0x200001c0
 8001128:	20000208 	.word	0x20000208
 800112c:	20000250 	.word	0x20000250
 8001130:	3f666666 	.word	0x3f666666

08001134 <imu_temp_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_temp_control_task */
__weak void imu_temp_control_task(void *argument)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_temp_control_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800113c:	2001      	movs	r0, #1
 800113e:	f005 f9b1 	bl	80064a4 <osDelay>
 8001142:	e7fb      	b.n	800113c <imu_temp_control_task+0x8>

08001144 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800114c:	2001      	movs	r0, #1
 800114e:	f005 f9a9 	bl	80064a4 <osDelay>
 8001152:	e7fb      	b.n	800114c <TaskTurret+0x8>

08001154 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001158:	b672      	cpsid	i
}
 800115a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800115c:	bf00      	nop
 800115e:	e7fd      	b.n	800115c <Error_Handler+0x8>

08001160 <PWMInit>:
int32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef htim1, TIM_HandleTypeDef htim4, TIM_HandleTypeDef htim5, TIM_HandleTypeDef htim8) {
 8001160:	b084      	sub	sp, #16
 8001162:	b490      	push	{r4, r7}
 8001164:	af00      	add	r7, sp, #0
 8001166:	f107 0408 	add.w	r4, r7, #8
 800116a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	tim1 = &htim1;
 800116e:	4b0a      	ldr	r3, [pc, #40]	@ (8001198 <PWMInit+0x38>)
 8001170:	f107 0208 	add.w	r2, r7, #8
 8001174:	601a      	str	r2, [r3, #0]
	tim4 = &htim4;
 8001176:	4a09      	ldr	r2, [pc, #36]	@ (800119c <PWMInit+0x3c>)
 8001178:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800117c:	6013      	str	r3, [r2, #0]
	tim5 = &htim5;
 800117e:	4a08      	ldr	r2, [pc, #32]	@ (80011a0 <PWMInit+0x40>)
 8001180:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001184:	6013      	str	r3, [r2, #0]
	tim8 = &htim8;
 8001186:	4a07      	ldr	r2, [pc, #28]	@ (80011a4 <PWMInit+0x44>)
 8001188:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 800118c:	6013      	str	r3, [r2, #0]
		PWMS[i].frequency = 0;
		PWMS[i].period = 0;
		PWMS[i].subPeriod = 0;
	}
	*/
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc90      	pop	{r4, r7}
 8001194:	b004      	add	sp, #16
 8001196:	4770      	bx	lr
 8001198:	200005a8 	.word	0x200005a8
 800119c:	200005ac 	.word	0x200005ac
 80011a0:	200005b0 	.word	0x200005b0
 80011a4:	200005b4 	.word	0x200005b4

080011a8 <calculateOutputPeriodToGetFrequency>:

int32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, int16_t desiredFrequency) {
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	460a      	mov	r2, r1
 80011b2:	71fb      	strb	r3, [r7, #7]
 80011b4:	4613      	mov	r3, r2
 80011b6:	80bb      	strh	r3, [r7, #4]
	int32_t finalVal = 0;
 80011b8:	2300      	movs	r3, #0
 80011ba:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d03c      	beq.n	800123c <calculateOutputPeriodToGetFrequency+0x94>
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	dc55      	bgt.n	8001272 <calculateOutputPeriodToGetFrequency+0xca>
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d002      	beq.n	80011d0 <calculateOutputPeriodToGetFrequency+0x28>
 80011ca:	2b01      	cmp	r3, #1
 80011cc:	d01b      	beq.n	8001206 <calculateOutputPeriodToGetFrequency+0x5e>
 80011ce:	e050      	b.n	8001272 <calculateOutputPeriodToGetFrequency+0xca>
	case 0:
		finalVal = (1/(desiredFrequency))/PWMPre;
 80011d0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80011d4:	461a      	mov	r2, r3
 80011d6:	3201      	adds	r2, #1
 80011d8:	2a02      	cmp	r2, #2
 80011da:	bf94      	ite	ls
 80011dc:	2201      	movls	r2, #1
 80011de:	2200      	movhi	r2, #0
 80011e0:	b2d2      	uxtb	r2, r2
 80011e2:	b252      	sxtb	r2, r2
 80011e4:	2a00      	cmp	r2, #0
 80011e6:	bf14      	ite	ne
 80011e8:	461b      	movne	r3, r3
 80011ea:	2300      	moveq	r3, #0
 80011ec:	ee07 3a90 	vmov	s15, r3
 80011f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011f4:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001280 <calculateOutputPeriodToGetFrequency+0xd8>
 80011f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80011fc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001200:	ee17 3a90 	vmov	r3, s15
 8001204:	60fb      	str	r3, [r7, #12]
	case 1:
		finalVal = (1/(desiredFrequency))/LEDPre;
 8001206:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800120a:	461a      	mov	r2, r3
 800120c:	3201      	adds	r2, #1
 800120e:	2a02      	cmp	r2, #2
 8001210:	bf94      	ite	ls
 8001212:	2201      	movls	r2, #1
 8001214:	2200      	movhi	r2, #0
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	b252      	sxtb	r2, r2
 800121a:	2a00      	cmp	r2, #0
 800121c:	bf14      	ite	ne
 800121e:	461b      	movne	r3, r3
 8001220:	2300      	moveq	r3, #0
 8001222:	ee07 3a90 	vmov	s15, r3
 8001226:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800122a:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001284 <calculateOutputPeriodToGetFrequency+0xdc>
 800122e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001232:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001236:	ee17 3a90 	vmov	r3, s15
 800123a:	60fb      	str	r3, [r7, #12]
	case 2:
		finalVal = (1/(desiredFrequency))/buzzerPre;
 800123c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001240:	461a      	mov	r2, r3
 8001242:	3201      	adds	r2, #1
 8001244:	2a02      	cmp	r2, #2
 8001246:	bf94      	ite	ls
 8001248:	2201      	movls	r2, #1
 800124a:	2200      	movhi	r2, #0
 800124c:	b2d2      	uxtb	r2, r2
 800124e:	b252      	sxtb	r2, r2
 8001250:	2a00      	cmp	r2, #0
 8001252:	bf14      	ite	ne
 8001254:	461b      	movne	r3, r3
 8001256:	2300      	moveq	r3, #0
 8001258:	ee07 3a90 	vmov	s15, r3
 800125c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001260:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001284 <calculateOutputPeriodToGetFrequency+0xdc>
 8001264:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001268:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800126c:	ee17 3a90 	vmov	r3, s15
 8001270:	60fb      	str	r3, [r7, #12]
	default:
	}
	return finalVal;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	360637bd 	.word	0x360637bd
 8001284:	358637bd 	.word	0x358637bd

08001288 <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8001288:	b480      	push	{r7}
 800128a:	b085      	sub	sp, #20
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	ed87 0a00 	vstr	s0, [r7]
	// int32_t val = (int32_t)((maxVal)*ratioVal);
	uint32_t val = 500;
 8001294:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001298:	60fb      	str	r3, [r7, #12]

	if (val > maxVal) {
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d902      	bls.n	80012a8 <safeOutputPeriodValueCalculator+0x20>
		val = maxVal;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	e004      	b.n	80012b2 <safeOutputPeriodValueCalculator+0x2a>
	} else if (val < 1) {
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <safeOutputPeriodValueCalculator+0x2a>
		val = 1;
 80012ae:	2301      	movs	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
	}
	// val--;
	return val;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3714      	adds	r7, #20
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b084      	sub	sp, #16
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	4603      	mov	r3, r0
 80012c8:	ed87 0a00 	vstr	s0, [r7]
 80012cc:	71fb      	strb	r3, [r7, #7]
 80012ce:	460b      	mov	r3, r1
 80012d0:	71bb      	strb	r3, [r7, #6]
 80012d2:	4613      	mov	r3, r2
 80012d4:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b02      	cmp	r3, #2
 80012de:	d043      	beq.n	8001368 <calculateOutputPeriodValue+0xa8>
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	dc58      	bgt.n	8001396 <calculateOutputPeriodValue+0xd6>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d002      	beq.n	80012ee <calculateOutputPeriodValue+0x2e>
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d01b      	beq.n	8001324 <calculateOutputPeriodValue+0x64>
 80012ec:	e053      	b.n	8001396 <calculateOutputPeriodValue+0xd6>
		case 0:
			if (microsecondOrFullrange == MS) {
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d10a      	bne.n	800130a <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 80012f4:	edd7 7a00 	vldr	s15, [r7]
 80012f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fc:	ee17 2a90 	vmov	r2, s15
 8001300:	2302      	movs	r3, #2
 8001302:	fbb2 f3f3 	udiv	r3, r2, r3
 8001306:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// PWMS[position-1].period = returnVal;
			break;
 8001308:	e045      	b.n	8001396 <calculateOutputPeriodValue+0xd6>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 800130a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800130e:	3b01      	subs	r3, #1
 8001310:	4a23      	ldr	r2, [pc, #140]	@ (80013a0 <calculateOutputPeriodValue+0xe0>)
 8001312:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001316:	ed97 0a00 	vldr	s0, [r7]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ffb4 	bl	8001288 <safeOutputPeriodValueCalculator>
 8001320:	60f8      	str	r0, [r7, #12]
			break;
 8001322:	e038      	b.n	8001396 <calculateOutputPeriodValue+0xd6>
		case 1:
			if (microsecondOrFullrange == MS) {
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d10a      	bne.n	8001340 <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 800132a:	edd7 7a00 	vldr	s15, [r7]
 800132e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001332:	ee17 2a90 	vmov	r2, s15
 8001336:	2301      	movs	r3, #1
 8001338:	fbb2 f3f3 	udiv	r3, r2, r3
 800133c:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = (uint32_t)(period[position+6]*val); // safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 800133e:	e02a      	b.n	8001396 <calculateOutputPeriodValue+0xd6>
				returnVal = (uint32_t)(period[position+6]*val); // safeOutputPeriodValueCalculator(period[position+6], val);
 8001340:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001344:	3306      	adds	r3, #6
 8001346:	4a16      	ldr	r2, [pc, #88]	@ (80013a0 <calculateOutputPeriodValue+0xe0>)
 8001348:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134c:	ee07 3a90 	vmov	s15, r3
 8001350:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001354:	edd7 7a00 	vldr	s15, [r7]
 8001358:	ee67 7a27 	vmul.f32	s15, s14, s15
 800135c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001360:	ee17 3a90 	vmov	r3, s15
 8001364:	60fb      	str	r3, [r7, #12]
			break;
 8001366:	e016      	b.n	8001396 <calculateOutputPeriodValue+0xd6>
		case 2:
			if (microsecondOrFullrange == MS) {
 8001368:	79bb      	ldrb	r3, [r7, #6]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10a      	bne.n	8001384 <calculateOutputPeriodValue+0xc4>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 800136e:	edd7 7a00 	vldr	s15, [r7]
 8001372:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001376:	ee17 2a90 	vmov	r2, s15
 800137a:	2301      	movs	r3, #1
 800137c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001380:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			break;
 8001382:	e007      	b.n	8001394 <calculateOutputPeriodValue+0xd4>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8001384:	4b06      	ldr	r3, [pc, #24]	@ (80013a0 <calculateOutputPeriodValue+0xe0>)
 8001386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001388:	ed97 0a00 	vldr	s0, [r7]
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff7b 	bl	8001288 <safeOutputPeriodValueCalculator>
 8001392:	60f8      	str	r0, [r7, #12]
			break;
 8001394:	bf00      	nop
		default:
	}
	return returnVal;
 8001396:	68fb      	ldr	r3, [r7, #12]
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200005f0 	.word	0x200005f0

080013a4 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	ed87 0a00 	vstr	s0, [r7]
 80013b0:	71fb      	strb	r3, [r7, #7]
 80013b2:	460b      	mov	r3, r1
 80013b4:	71bb      	strb	r3, [r7, #6]
 80013b6:	4613      	mov	r3, r2
 80013b8:	717b      	strb	r3, [r7, #5]
	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 80013ba:	f997 2005 	ldrsb.w	r2, [r7, #5]
 80013be:	79b9      	ldrb	r1, [r7, #6]
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	ed97 0a00 	vldr	s0, [r7]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff ff7a 	bl	80012c0 <calculateOutputPeriodValue>
 80013cc:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 80013ce:	79fb      	ldrb	r3, [r7, #7]
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d076      	beq.n	80014c2 <PWMInitialize+0x11e>
 80013d4:	2b02      	cmp	r3, #2
 80013d6:	dc7d      	bgt.n	80014d4 <PWMInitialize+0x130>
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d002      	beq.n	80013e2 <PWMInitialize+0x3e>
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d04a      	beq.n	8001476 <PWMInitialize+0xd2>
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	default:
	}
}
 80013e0:	e078      	b.n	80014d4 <PWMInitialize+0x130>
		switch (position) {
 80013e2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	2b06      	cmp	r3, #6
 80013ea:	d83b      	bhi.n	8001464 <PWMInitialize+0xc0>
 80013ec:	a201      	add	r2, pc, #4	@ (adr r2, 80013f4 <PWMInitialize+0x50>)
 80013ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013f2:	bf00      	nop
 80013f4:	08001411 	.word	0x08001411
 80013f8:	0800141d 	.word	0x0800141d
 80013fc:	08001429 	.word	0x08001429
 8001400:	08001435 	.word	0x08001435
 8001404:	08001441 	.word	0x08001441
 8001408:	0800144d 	.word	0x0800144d
 800140c:	08001459 	.word	0x08001459
			(*tim1).Instance->CCR1=value;
 8001410:	4b32      	ldr	r3, [pc, #200]	@ (80014dc <PWMInitialize+0x138>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800141a:	e024      	b.n	8001466 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 800141c:	4b2f      	ldr	r3, [pc, #188]	@ (80014dc <PWMInitialize+0x138>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001426:	e01e      	b.n	8001466 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8001428:	4b2c      	ldr	r3, [pc, #176]	@ (80014dc <PWMInitialize+0x138>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001432:	e018      	b.n	8001466 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8001434:	4b29      	ldr	r3, [pc, #164]	@ (80014dc <PWMInitialize+0x138>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68fa      	ldr	r2, [r7, #12]
 800143c:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 800143e:	e012      	b.n	8001466 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8001440:	4b27      	ldr	r3, [pc, #156]	@ (80014e0 <PWMInitialize+0x13c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68fa      	ldr	r2, [r7, #12]
 8001448:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800144a:	e00c      	b.n	8001466 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 800144c:	4b24      	ldr	r3, [pc, #144]	@ (80014e0 <PWMInitialize+0x13c>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001456:	e006      	b.n	8001466 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8001458:	4b21      	ldr	r3, [pc, #132]	@ (80014e0 <PWMInitialize+0x13c>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	68fa      	ldr	r2, [r7, #12]
 8001460:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001462:	e000      	b.n	8001466 <PWMInitialize+0xc2>
			break;
 8001464:	bf00      	nop
		subPeriod[position-1] = value;
 8001466:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800146a:	3b01      	subs	r3, #1
 800146c:	68fa      	ldr	r2, [r7, #12]
 800146e:	491d      	ldr	r1, [pc, #116]	@ (80014e4 <PWMInitialize+0x140>)
 8001470:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001474:	e02e      	b.n	80014d4 <PWMInitialize+0x130>
		switch (position) {
 8001476:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800147a:	2b03      	cmp	r3, #3
 800147c:	d012      	beq.n	80014a4 <PWMInitialize+0x100>
 800147e:	2b03      	cmp	r3, #3
 8001480:	dc16      	bgt.n	80014b0 <PWMInitialize+0x10c>
 8001482:	2b01      	cmp	r3, #1
 8001484:	d002      	beq.n	800148c <PWMInitialize+0xe8>
 8001486:	2b02      	cmp	r3, #2
 8001488:	d006      	beq.n	8001498 <PWMInitialize+0xf4>
			break;
 800148a:	e011      	b.n	80014b0 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 800148c:	4b16      	ldr	r3, [pc, #88]	@ (80014e8 <PWMInitialize+0x144>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	68fa      	ldr	r2, [r7, #12]
 8001494:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001496:	e00c      	b.n	80014b2 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8001498:	4b13      	ldr	r3, [pc, #76]	@ (80014e8 <PWMInitialize+0x144>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68fa      	ldr	r2, [r7, #12]
 80014a0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80014a2:	e006      	b.n	80014b2 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 80014a4:	4b10      	ldr	r3, [pc, #64]	@ (80014e8 <PWMInitialize+0x144>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80014ae:	e000      	b.n	80014b2 <PWMInitialize+0x10e>
			break;
 80014b0:	bf00      	nop
		subPeriod[position+6] = value;
 80014b2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014b6:	3306      	adds	r3, #6
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	490a      	ldr	r1, [pc, #40]	@ (80014e4 <PWMInitialize+0x140>)
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 80014c0:	e008      	b.n	80014d4 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 80014c2:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <PWMInitialize+0x148>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	68fa      	ldr	r2, [r7, #12]
 80014ca:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	4a05      	ldr	r2, [pc, #20]	@ (80014e4 <PWMInitialize+0x140>)
 80014d0:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 80014d2:	bf00      	nop
}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	200005a8 	.word	0x200005a8
 80014e0:	200005b4 	.word	0x200005b4
 80014e4:	200005c4 	.word	0x200005c4
 80014e8:	200005b0 	.word	0x200005b0
 80014ec:	200005ac 	.word	0x200005ac

080014f0 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
 80014fa:	460b      	mov	r3, r1
 80014fc:	71bb      	strb	r3, [r7, #6]
 80014fe:	4613      	mov	r3, r2
 8001500:	80bb      	strh	r3, [r7, #4]
	int32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8001502:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001506:	79fb      	ldrb	r3, [r7, #7]
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fe4c 	bl	80011a8 <calculateOutputPeriodToGetFrequency>
 8001510:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b02      	cmp	r3, #2
 8001516:	d02c      	beq.n	8001572 <initializePeriod+0x82>
 8001518:	2b02      	cmp	r3, #2
 800151a:	dc32      	bgt.n	8001582 <initializePeriod+0x92>
 800151c:	2b00      	cmp	r3, #0
 800151e:	d002      	beq.n	8001526 <initializePeriod+0x36>
 8001520:	2b01      	cmp	r3, #1
 8001522:	d01a      	beq.n	800155a <initializePeriod+0x6a>
	case 2:
		(*tim4).Init.Period = calculatedPeriod-1;
		period[10] = calculatedPeriod;
	default:
	}
}
 8001524:	e02d      	b.n	8001582 <initializePeriod+0x92>
		if (Position < 5 && Position > 0) {
 8001526:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800152a:	2b04      	cmp	r3, #4
 800152c:	dc09      	bgt.n	8001542 <initializePeriod+0x52>
 800152e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001532:	2b00      	cmp	r3, #0
 8001534:	dd05      	ble.n	8001542 <initializePeriod+0x52>
			(*tim1).Init.Period = calculatedPeriod-1;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	1e5a      	subs	r2, r3, #1
 800153a:	4b14      	ldr	r3, [pc, #80]	@ (800158c <initializePeriod+0x9c>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	60da      	str	r2, [r3, #12]
 8001540:	e004      	b.n	800154c <initializePeriod+0x5c>
			(*tim8).Init.Period = calculatedPeriod-1;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	1e5a      	subs	r2, r3, #1
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <initializePeriod+0xa0>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	60da      	str	r2, [r3, #12]
		period[Position-1] = calculatedPeriod;
 800154c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001550:	3b01      	subs	r3, #1
 8001552:	4910      	ldr	r1, [pc, #64]	@ (8001594 <initializePeriod+0xa4>)
 8001554:	68fa      	ldr	r2, [r7, #12]
 8001556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		(*tim5).Init.Period = calculatedPeriod-1;
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	1e5a      	subs	r2, r3, #1
 800155e:	4b0e      	ldr	r3, [pc, #56]	@ (8001598 <initializePeriod+0xa8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	60da      	str	r2, [r3, #12]
		period[Position+6] = calculatedPeriod;
 8001564:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001568:	3306      	adds	r3, #6
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <initializePeriod+0xa4>)
 800156c:	68fa      	ldr	r2, [r7, #12]
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		(*tim4).Init.Period = calculatedPeriod-1;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	1e5a      	subs	r2, r3, #1
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <initializePeriod+0xac>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60da      	str	r2, [r3, #12]
		period[10] = calculatedPeriod;
 800157c:	4a05      	ldr	r2, [pc, #20]	@ (8001594 <initializePeriod+0xa4>)
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001582:	bf00      	nop
 8001584:	3710      	adds	r7, #16
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
 800158a:	bf00      	nop
 800158c:	200005a8 	.word	0x200005a8
 8001590:	200005b4 	.word	0x200005b4
 8001594:	200005f0 	.word	0x200005f0
 8001598:	200005b0 	.word	0x200005b0
 800159c:	200005ac 	.word	0x200005ac

080015a0 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency) {
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	71fb      	strb	r3, [r7, #7]
 80015aa:	460b      	mov	r3, r1
 80015ac:	71bb      	strb	r3, [r7, #6]
 80015ae:	4613      	mov	r3, r2
 80015b0:	80bb      	strh	r3, [r7, #4]

	initializePeriod(Type, Position, desiredFrequency);
 80015b2:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80015b6:	f997 1006 	ldrsb.w	r1, [r7, #6]
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff97 	bl	80014f0 <initializePeriod>


	switch (Type) {
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b02      	cmp	r3, #2
 80015c6:	d012      	beq.n	80015ee <PWMOutput+0x4e>
 80015c8:	2b02      	cmp	r3, #2
 80015ca:	dc13      	bgt.n	80015f4 <PWMOutput+0x54>
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d002      	beq.n	80015d6 <PWMOutput+0x36>
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d006      	beq.n	80015e2 <PWMOutput+0x42>
		whichPWMisOn[Position+6] = 1;
	case 2:

		whichPWMisOn[10] = 1;
	default:
		break;
 80015d4:	e00e      	b.n	80015f4 <PWMOutput+0x54>
		whichPWMisOn[Position-1] = 1;
 80015d6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015da:	3b01      	subs	r3, #1
 80015dc:	4a08      	ldr	r2, [pc, #32]	@ (8001600 <PWMOutput+0x60>)
 80015de:	2101      	movs	r1, #1
 80015e0:	54d1      	strb	r1, [r2, r3]
		whichPWMisOn[Position+6] = 1;
 80015e2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80015e6:	3306      	adds	r3, #6
 80015e8:	4a05      	ldr	r2, [pc, #20]	@ (8001600 <PWMOutput+0x60>)
 80015ea:	2101      	movs	r1, #1
 80015ec:	54d1      	strb	r1, [r2, r3]
		whichPWMisOn[10] = 1;
 80015ee:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <PWMOutput+0x60>)
 80015f0:	2201      	movs	r2, #1
 80015f2:	729a      	strb	r2, [r3, #10]
		break;
 80015f4:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	200005b8 	.word	0x200005b8

08001604 <PWMTimerStarter>:



void PWMTimerStarter() {
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	e107      	b.n	8001820 <PWMTimerStarter+0x21c>
		switch (i) {
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b0a      	cmp	r3, #10
 8001614:	f200 8101 	bhi.w	800181a <PWMTimerStarter+0x216>
 8001618:	a201      	add	r2, pc, #4	@ (adr r2, 8001620 <PWMTimerStarter+0x1c>)
 800161a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161e:	bf00      	nop
 8001620:	0800164d 	.word	0x0800164d
 8001624:	08001677 	.word	0x08001677
 8001628:	080016a1 	.word	0x080016a1
 800162c:	080016cb 	.word	0x080016cb
 8001630:	080016f5 	.word	0x080016f5
 8001634:	0800171f 	.word	0x0800171f
 8001638:	08001749 	.word	0x08001749
 800163c:	08001773 	.word	0x08001773
 8001640:	0800179d 	.word	0x0800179d
 8001644:	080017c7 	.word	0x080017c7
 8001648:	080017f1 	.word	0x080017f1
		case 0:
			if (whichPWMisOn[i] == 1) {
 800164c:	4a79      	ldr	r2, [pc, #484]	@ (8001834 <PWMTimerStarter+0x230>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4413      	add	r3, r2
 8001652:	f993 3000 	ldrsb.w	r3, [r3]
 8001656:	2b01      	cmp	r3, #1
 8001658:	d106      	bne.n	8001668 <PWMTimerStarter+0x64>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 800165a:	4b77      	ldr	r3, [pc, #476]	@ (8001838 <PWMTimerStarter+0x234>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2100      	movs	r1, #0
 8001660:	4618      	mov	r0, r3
 8001662:	f003 f845 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8001666:	e0d8      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8001668:	4b73      	ldr	r3, [pc, #460]	@ (8001838 <PWMTimerStarter+0x234>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2100      	movs	r1, #0
 800166e:	4618      	mov	r0, r3
 8001670:	f003 f906 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 8001674:	e0d1      	b.n	800181a <PWMTimerStarter+0x216>
		case 1:
			if (whichPWMisOn[i] == 1) {
 8001676:	4a6f      	ldr	r2, [pc, #444]	@ (8001834 <PWMTimerStarter+0x230>)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	4413      	add	r3, r2
 800167c:	f993 3000 	ldrsb.w	r3, [r3]
 8001680:	2b01      	cmp	r3, #1
 8001682:	d106      	bne.n	8001692 <PWMTimerStarter+0x8e>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8001684:	4b6c      	ldr	r3, [pc, #432]	@ (8001838 <PWMTimerStarter+0x234>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2104      	movs	r1, #4
 800168a:	4618      	mov	r0, r3
 800168c:	f003 f830 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8001690:	e0c3      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8001692:	4b69      	ldr	r3, [pc, #420]	@ (8001838 <PWMTimerStarter+0x234>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2104      	movs	r1, #4
 8001698:	4618      	mov	r0, r3
 800169a:	f003 f8f1 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 800169e:	e0bc      	b.n	800181a <PWMTimerStarter+0x216>
		case 2:
			if (whichPWMisOn[i] == 1) {
 80016a0:	4a64      	ldr	r2, [pc, #400]	@ (8001834 <PWMTimerStarter+0x230>)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4413      	add	r3, r2
 80016a6:	f993 3000 	ldrsb.w	r3, [r3]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d106      	bne.n	80016bc <PWMTimerStarter+0xb8>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 80016ae:	4b62      	ldr	r3, [pc, #392]	@ (8001838 <PWMTimerStarter+0x234>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2108      	movs	r1, #8
 80016b4:	4618      	mov	r0, r3
 80016b6:	f003 f81b 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 80016ba:	e0ae      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 80016bc:	4b5e      	ldr	r3, [pc, #376]	@ (8001838 <PWMTimerStarter+0x234>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	2108      	movs	r1, #8
 80016c2:	4618      	mov	r0, r3
 80016c4:	f003 f8dc 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 80016c8:	e0a7      	b.n	800181a <PWMTimerStarter+0x216>
		case 3:
			if (whichPWMisOn[i] == 1) {
 80016ca:	4a5a      	ldr	r2, [pc, #360]	@ (8001834 <PWMTimerStarter+0x230>)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	4413      	add	r3, r2
 80016d0:	f993 3000 	ldrsb.w	r3, [r3]
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d106      	bne.n	80016e6 <PWMTimerStarter+0xe2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 80016d8:	4b57      	ldr	r3, [pc, #348]	@ (8001838 <PWMTimerStarter+0x234>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	210c      	movs	r1, #12
 80016de:	4618      	mov	r0, r3
 80016e0:	f003 f806 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 80016e4:	e099      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 80016e6:	4b54      	ldr	r3, [pc, #336]	@ (8001838 <PWMTimerStarter+0x234>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	210c      	movs	r1, #12
 80016ec:	4618      	mov	r0, r3
 80016ee:	f003 f8c7 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 80016f2:	e092      	b.n	800181a <PWMTimerStarter+0x216>
		case 4:
			if (whichPWMisOn[i] == 1) {
 80016f4:	4a4f      	ldr	r2, [pc, #316]	@ (8001834 <PWMTimerStarter+0x230>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4413      	add	r3, r2
 80016fa:	f993 3000 	ldrsb.w	r3, [r3]
 80016fe:	2b01      	cmp	r3, #1
 8001700:	d106      	bne.n	8001710 <PWMTimerStarter+0x10c>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8001702:	4b4e      	ldr	r3, [pc, #312]	@ (800183c <PWMTimerStarter+0x238>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f002 fff1 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 800170e:	e084      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8001710:	4b4a      	ldr	r3, [pc, #296]	@ (800183c <PWMTimerStarter+0x238>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2100      	movs	r1, #0
 8001716:	4618      	mov	r0, r3
 8001718:	f003 f8b2 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 800171c:	e07d      	b.n	800181a <PWMTimerStarter+0x216>
		case 5:
			if (whichPWMisOn[i] == 1) {
 800171e:	4a45      	ldr	r2, [pc, #276]	@ (8001834 <PWMTimerStarter+0x230>)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	4413      	add	r3, r2
 8001724:	f993 3000 	ldrsb.w	r3, [r3]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d106      	bne.n	800173a <PWMTimerStarter+0x136>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 800172c:	4b43      	ldr	r3, [pc, #268]	@ (800183c <PWMTimerStarter+0x238>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	2104      	movs	r1, #4
 8001732:	4618      	mov	r0, r3
 8001734:	f002 ffdc 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8001738:	e06f      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 800173a:	4b40      	ldr	r3, [pc, #256]	@ (800183c <PWMTimerStarter+0x238>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	2104      	movs	r1, #4
 8001740:	4618      	mov	r0, r3
 8001742:	f003 f89d 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 8001746:	e068      	b.n	800181a <PWMTimerStarter+0x216>
		case 6:
			if (whichPWMisOn[i] == 1) {
 8001748:	4a3a      	ldr	r2, [pc, #232]	@ (8001834 <PWMTimerStarter+0x230>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4413      	add	r3, r2
 800174e:	f993 3000 	ldrsb.w	r3, [r3]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d106      	bne.n	8001764 <PWMTimerStarter+0x160>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8001756:	4b39      	ldr	r3, [pc, #228]	@ (800183c <PWMTimerStarter+0x238>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	2108      	movs	r1, #8
 800175c:	4618      	mov	r0, r3
 800175e:	f002 ffc7 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8001762:	e05a      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8001764:	4b35      	ldr	r3, [pc, #212]	@ (800183c <PWMTimerStarter+0x238>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	2108      	movs	r1, #8
 800176a:	4618      	mov	r0, r3
 800176c:	f003 f888 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 8001770:	e053      	b.n	800181a <PWMTimerStarter+0x216>
		case 7:
			if (whichPWMisOn[i] == 1) {
 8001772:	4a30      	ldr	r2, [pc, #192]	@ (8001834 <PWMTimerStarter+0x230>)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4413      	add	r3, r2
 8001778:	f993 3000 	ldrsb.w	r3, [r3]
 800177c:	2b01      	cmp	r3, #1
 800177e:	d106      	bne.n	800178e <PWMTimerStarter+0x18a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8001780:	4b2f      	ldr	r3, [pc, #188]	@ (8001840 <PWMTimerStarter+0x23c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2100      	movs	r1, #0
 8001786:	4618      	mov	r0, r3
 8001788:	f002 ffb2 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 800178c:	e045      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 800178e:	4b2c      	ldr	r3, [pc, #176]	@ (8001840 <PWMTimerStarter+0x23c>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2100      	movs	r1, #0
 8001794:	4618      	mov	r0, r3
 8001796:	f003 f873 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 800179a:	e03e      	b.n	800181a <PWMTimerStarter+0x216>
		case 8:
			if (whichPWMisOn[i] == 1) {
 800179c:	4a25      	ldr	r2, [pc, #148]	@ (8001834 <PWMTimerStarter+0x230>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4413      	add	r3, r2
 80017a2:	f993 3000 	ldrsb.w	r3, [r3]
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d106      	bne.n	80017b8 <PWMTimerStarter+0x1b4>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 80017aa:	4b25      	ldr	r3, [pc, #148]	@ (8001840 <PWMTimerStarter+0x23c>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2104      	movs	r1, #4
 80017b0:	4618      	mov	r0, r3
 80017b2:	f002 ff9d 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
			}
			break;
 80017b6:	e030      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 80017b8:	4b21      	ldr	r3, [pc, #132]	@ (8001840 <PWMTimerStarter+0x23c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2104      	movs	r1, #4
 80017be:	4618      	mov	r0, r3
 80017c0:	f003 f85e 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 80017c4:	e029      	b.n	800181a <PWMTimerStarter+0x216>
		case 9:
			if (whichPWMisOn[i] == 1) {
 80017c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001834 <PWMTimerStarter+0x230>)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	f993 3000 	ldrsb.w	r3, [r3]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d106      	bne.n	80017e2 <PWMTimerStarter+0x1de>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 80017d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001840 <PWMTimerStarter+0x23c>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2108      	movs	r1, #8
 80017da:	4618      	mov	r0, r3
 80017dc:	f002 ff88 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			break;
 80017e0:	e01b      	b.n	800181a <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 80017e2:	4b17      	ldr	r3, [pc, #92]	@ (8001840 <PWMTimerStarter+0x23c>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	2108      	movs	r1, #8
 80017e8:	4618      	mov	r0, r3
 80017ea:	f003 f849 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 80017ee:	e014      	b.n	800181a <PWMTimerStarter+0x216>
		case 10:
			if (whichPWMisOn[i] == 1) {
 80017f0:	4a10      	ldr	r2, [pc, #64]	@ (8001834 <PWMTimerStarter+0x230>)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	f993 3000 	ldrsb.w	r3, [r3]
 80017fa:	2b01      	cmp	r3, #1
 80017fc:	d106      	bne.n	800180c <PWMTimerStarter+0x208>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 80017fe:	4b11      	ldr	r3, [pc, #68]	@ (8001844 <PWMTimerStarter+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2108      	movs	r1, #8
 8001804:	4618      	mov	r0, r3
 8001806:	f002 ff73 	bl	80046f0 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			break;
 800180a:	e005      	b.n	8001818 <PWMTimerStarter+0x214>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 800180c:	4b0d      	ldr	r3, [pc, #52]	@ (8001844 <PWMTimerStarter+0x240>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	2108      	movs	r1, #8
 8001812:	4618      	mov	r0, r3
 8001814:	f003 f834 	bl	8004880 <HAL_TIM_PWM_Stop>
			break;
 8001818:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	3301      	adds	r3, #1
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b0a      	cmp	r3, #10
 8001824:	f77f aef4 	ble.w	8001610 <PWMTimerStarter+0xc>
		}
	}
}
 8001828:	bf00      	nop
 800182a:	bf00      	nop
 800182c:	3708      	adds	r7, #8
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	200005b8 	.word	0x200005b8
 8001838:	200005a8 	.word	0x200005a8
 800183c:	200005b4 	.word	0x200005b4
 8001840:	200005b0 	.word	0x200005b0
 8001844:	200005ac 	.word	0x200005ac

08001848 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	607b      	str	r3, [r7, #4]
 8001852:	4b12      	ldr	r3, [pc, #72]	@ (800189c <HAL_MspInit+0x54>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001856:	4a11      	ldr	r2, [pc, #68]	@ (800189c <HAL_MspInit+0x54>)
 8001858:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800185c:	6453      	str	r3, [r2, #68]	@ 0x44
 800185e:	4b0f      	ldr	r3, [pc, #60]	@ (800189c <HAL_MspInit+0x54>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001862:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001866:	607b      	str	r3, [r7, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
 800186e:	4b0b      	ldr	r3, [pc, #44]	@ (800189c <HAL_MspInit+0x54>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	4a0a      	ldr	r2, [pc, #40]	@ (800189c <HAL_MspInit+0x54>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001878:	6413      	str	r3, [r2, #64]	@ 0x40
 800187a:	4b08      	ldr	r3, [pc, #32]	@ (800189c <HAL_MspInit+0x54>)
 800187c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800187e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001886:	2200      	movs	r2, #0
 8001888:	210f      	movs	r1, #15
 800188a:	f06f 0001 	mvn.w	r0, #1
 800188e:	f001 fa4e 	bl	8002d2e <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800

080018a0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b08c      	sub	sp, #48	@ 0x30
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a8:	f107 031c 	add.w	r3, r7, #28
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
 80018b2:	609a      	str	r2, [r3, #8]
 80018b4:	60da      	str	r2, [r3, #12]
 80018b6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a4a      	ldr	r2, [pc, #296]	@ (80019e8 <HAL_CAN_MspInit+0x148>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d13d      	bne.n	800193e <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80018c2:	4b4a      	ldr	r3, [pc, #296]	@ (80019ec <HAL_CAN_MspInit+0x14c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3301      	adds	r3, #1
 80018c8:	4a48      	ldr	r2, [pc, #288]	@ (80019ec <HAL_CAN_MspInit+0x14c>)
 80018ca:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80018cc:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_CAN_MspInit+0x14c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b01      	cmp	r3, #1
 80018d2:	d10d      	bne.n	80018f0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
 80018d8:	4b45      	ldr	r3, [pc, #276]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	4a44      	ldr	r2, [pc, #272]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 80018de:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80018e2:	6413      	str	r3, [r2, #64]	@ 0x40
 80018e4:	4b42      	ldr	r3, [pc, #264]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 80018e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	61bb      	str	r3, [r7, #24]
 80018ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	4b3e      	ldr	r3, [pc, #248]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 80018f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f8:	4a3d      	ldr	r2, [pc, #244]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 80018fa:	f043 0308 	orr.w	r3, r3, #8
 80018fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001900:	4b3b      	ldr	r3, [pc, #236]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 8001902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001904:	f003 0308 	and.w	r3, r3, #8
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800190c:	2303      	movs	r3, #3
 800190e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001910:	2302      	movs	r3, #2
 8001912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001914:	2300      	movs	r3, #0
 8001916:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001918:	2303      	movs	r3, #3
 800191a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800191c:	2309      	movs	r3, #9
 800191e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001920:	f107 031c 	add.w	r3, r7, #28
 8001924:	4619      	mov	r1, r3
 8001926:	4833      	ldr	r0, [pc, #204]	@ (80019f4 <HAL_CAN_MspInit+0x154>)
 8001928:	f001 fdb4 	bl	8003494 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800192c:	2200      	movs	r2, #0
 800192e:	2105      	movs	r1, #5
 8001930:	2014      	movs	r0, #20
 8001932:	f001 f9fc 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001936:	2014      	movs	r0, #20
 8001938:	f001 fa15 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800193c:	e04f      	b.n	80019de <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a2d      	ldr	r2, [pc, #180]	@ (80019f8 <HAL_CAN_MspInit+0x158>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d14a      	bne.n	80019de <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001948:	2300      	movs	r3, #0
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	4b28      	ldr	r3, [pc, #160]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 800194e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001950:	4a27      	ldr	r2, [pc, #156]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 8001952:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001956:	6413      	str	r3, [r2, #64]	@ 0x40
 8001958:	4b25      	ldr	r3, [pc, #148]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 800195a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800195c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001960:	613b      	str	r3, [r7, #16]
 8001962:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001964:	4b21      	ldr	r3, [pc, #132]	@ (80019ec <HAL_CAN_MspInit+0x14c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	3301      	adds	r3, #1
 800196a:	4a20      	ldr	r2, [pc, #128]	@ (80019ec <HAL_CAN_MspInit+0x14c>)
 800196c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800196e:	4b1f      	ldr	r3, [pc, #124]	@ (80019ec <HAL_CAN_MspInit+0x14c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10d      	bne.n	8001992 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b1d      	ldr	r3, [pc, #116]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800197e:	4a1c      	ldr	r2, [pc, #112]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 8001980:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001984:	6413      	str	r3, [r2, #64]	@ 0x40
 8001986:	4b1a      	ldr	r3, [pc, #104]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a15      	ldr	r2, [pc, #84]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <HAL_CAN_MspInit+0x150>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80019ae:	2360      	movs	r3, #96	@ 0x60
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 80019be:	2309      	movs	r3, #9
 80019c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	480c      	ldr	r0, [pc, #48]	@ (80019fc <HAL_CAN_MspInit+0x15c>)
 80019ca:	f001 fd63 	bl	8003494 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80019ce:	2200      	movs	r2, #0
 80019d0:	2105      	movs	r1, #5
 80019d2:	2040      	movs	r0, #64	@ 0x40
 80019d4:	f001 f9ab 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80019d8:	2040      	movs	r0, #64	@ 0x40
 80019da:	f001 f9c4 	bl	8002d66 <HAL_NVIC_EnableIRQ>
}
 80019de:	bf00      	nop
 80019e0:	3730      	adds	r7, #48	@ 0x30
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	40006400 	.word	0x40006400
 80019ec:	2000061c 	.word	0x2000061c
 80019f0:	40023800 	.word	0x40023800
 80019f4:	40020c00 	.word	0x40020c00
 80019f8:	40006800 	.word	0x40006800
 80019fc:	40020400 	.word	0x40020400

08001a00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08a      	sub	sp, #40	@ 0x28
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0314 	add.w	r3, r7, #20
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a29      	ldr	r2, [pc, #164]	@ (8001ac4 <HAL_I2C_MspInit+0xc4>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d14b      	bne.n	8001aba <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	613b      	str	r3, [r7, #16]
 8001a26:	4b28      	ldr	r3, [pc, #160]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2a:	4a27      	ldr	r2, [pc, #156]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001a2c:	f043 0304 	orr.w	r3, r3, #4
 8001a30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a32:	4b25      	ldr	r3, [pc, #148]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a36:	f003 0304 	and.w	r3, r3, #4
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	2300      	movs	r3, #0
 8001a40:	60fb      	str	r3, [r7, #12]
 8001a42:	4b21      	ldr	r3, [pc, #132]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a46:	4a20      	ldr	r2, [pc, #128]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001a48:	f043 0301 	orr.w	r3, r3, #1
 8001a4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	60fb      	str	r3, [r7, #12]
 8001a58:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a5a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a60:	2312      	movs	r3, #18
 8001a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a64:	2300      	movs	r3, #0
 8001a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a70:	f107 0314 	add.w	r3, r7, #20
 8001a74:	4619      	mov	r1, r3
 8001a76:	4815      	ldr	r0, [pc, #84]	@ (8001acc <HAL_I2C_MspInit+0xcc>)
 8001a78:	f001 fd0c 	bl	8003494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001a7c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a82:	2312      	movs	r3, #18
 8001a84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a86:	2300      	movs	r3, #0
 8001a88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001a8e:	2304      	movs	r3, #4
 8001a90:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0314 	add.w	r3, r7, #20
 8001a96:	4619      	mov	r1, r3
 8001a98:	480d      	ldr	r0, [pc, #52]	@ (8001ad0 <HAL_I2C_MspInit+0xd0>)
 8001a9a:	f001 fcfb 	bl	8003494 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	4b09      	ldr	r3, [pc, #36]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa6:	4a08      	ldr	r2, [pc, #32]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001aa8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_I2C_MspInit+0xc8>)
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001aba:	bf00      	nop
 8001abc:	3728      	adds	r7, #40	@ 0x28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40005c00 	.word	0x40005c00
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020800 	.word	0x40020800
 8001ad0:	40020000 	.word	0x40020000

08001ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	@ 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a28      	ldr	r2, [pc, #160]	@ (8001b94 <HAL_SPI_MspInit+0xc0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d149      	bne.n	8001b8a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b27      	ldr	r3, [pc, #156]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afe:	4a26      	ldr	r2, [pc, #152]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b00:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b04:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b06:	4b24      	ldr	r3, [pc, #144]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b0a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b20      	ldr	r3, [pc, #128]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b22:	4b1d      	ldr	r3, [pc, #116]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b2e:	2300      	movs	r3, #0
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b36:	4a18      	ldr	r2, [pc, #96]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b38:	f043 0301 	orr.w	r3, r3, #1
 8001b3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b3e:	4b16      	ldr	r3, [pc, #88]	@ (8001b98 <HAL_SPI_MspInit+0xc4>)
 8001b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b42:	f003 0301 	and.w	r3, r3, #1
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8001b4a:	2318      	movs	r3, #24
 8001b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b4e:	2302      	movs	r3, #2
 8001b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b56:	2303      	movs	r3, #3
 8001b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b5a:	2305      	movs	r3, #5
 8001b5c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b5e:	f107 0314 	add.w	r3, r7, #20
 8001b62:	4619      	mov	r1, r3
 8001b64:	480d      	ldr	r0, [pc, #52]	@ (8001b9c <HAL_SPI_MspInit+0xc8>)
 8001b66:	f001 fc95 	bl	8003494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001b6a:	2380      	movs	r3, #128	@ 0x80
 8001b6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b7a:	2305      	movs	r3, #5
 8001b7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b7e:	f107 0314 	add.w	r3, r7, #20
 8001b82:	4619      	mov	r1, r3
 8001b84:	4806      	ldr	r0, [pc, #24]	@ (8001ba0 <HAL_SPI_MspInit+0xcc>)
 8001b86:	f001 fc85 	bl	8003494 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b8a:	bf00      	nop
 8001b8c:	3728      	adds	r7, #40	@ 0x28
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40013000 	.word	0x40013000
 8001b98:	40023800 	.word	0x40023800
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	40020000 	.word	0x40020000

08001ba4 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a1f      	ldr	r2, [pc, #124]	@ (8001c30 <HAL_TIM_PWM_MspInit+0x8c>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d10e      	bne.n	8001bd4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	4b1e      	ldr	r3, [pc, #120]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bbe:	4a1d      	ldr	r2, [pc, #116]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bc6:	4b1b      	ldr	r3, [pc, #108]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	617b      	str	r3, [r7, #20]
 8001bd0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8001bd2:	e026      	b.n	8001c22 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a17      	ldr	r2, [pc, #92]	@ (8001c38 <HAL_TIM_PWM_MspInit+0x94>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d10e      	bne.n	8001bfc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	613b      	str	r3, [r7, #16]
 8001be2:	4b14      	ldr	r3, [pc, #80]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001be6:	4a13      	ldr	r2, [pc, #76]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001be8:	f043 0308 	orr.w	r3, r3, #8
 8001bec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bee:	4b11      	ldr	r3, [pc, #68]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bf2:	f003 0308 	and.w	r3, r3, #8
 8001bf6:	613b      	str	r3, [r7, #16]
 8001bf8:	693b      	ldr	r3, [r7, #16]
}
 8001bfa:	e012      	b.n	8001c22 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a0e      	ldr	r2, [pc, #56]	@ (8001c3c <HAL_TIM_PWM_MspInit+0x98>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d10d      	bne.n	8001c22 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
 8001c0a:	4b0a      	ldr	r3, [pc, #40]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c0e:	4a09      	ldr	r2, [pc, #36]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001c10:	f043 0302 	orr.w	r3, r3, #2
 8001c14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c16:	4b07      	ldr	r3, [pc, #28]	@ (8001c34 <HAL_TIM_PWM_MspInit+0x90>)
 8001c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c1a:	f003 0302 	and.w	r3, r3, #2
 8001c1e:	60fb      	str	r3, [r7, #12]
 8001c20:	68fb      	ldr	r3, [r7, #12]
}
 8001c22:	bf00      	nop
 8001c24:	371c      	adds	r7, #28
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	40010000 	.word	0x40010000
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40000c00 	.word	0x40000c00
 8001c3c:	40010400 	.word	0x40010400

08001c40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b085      	sub	sp, #20
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	4a15      	ldr	r2, [pc, #84]	@ (8001ca4 <HAL_TIM_Base_MspInit+0x64>)
 8001c4e:	4293      	cmp	r3, r2
 8001c50:	d10e      	bne.n	8001c70 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001c52:	2300      	movs	r3, #0
 8001c54:	60fb      	str	r3, [r7, #12]
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x68>)
 8001c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c5a:	4a13      	ldr	r2, [pc, #76]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x68>)
 8001c5c:	f043 0304 	orr.w	r3, r3, #4
 8001c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c62:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x68>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c66:	f003 0304 	and.w	r3, r3, #4
 8001c6a:	60fb      	str	r3, [r7, #12]
 8001c6c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001c6e:	e012      	b.n	8001c96 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0d      	ldr	r2, [pc, #52]	@ (8001cac <HAL_TIM_Base_MspInit+0x6c>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d10d      	bne.n	8001c96 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x68>)
 8001c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c82:	4a09      	ldr	r2, [pc, #36]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x68>)
 8001c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c8a:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <HAL_TIM_Base_MspInit+0x68>)
 8001c8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
}
 8001c96:	bf00      	nop
 8001c98:	3714      	adds	r7, #20
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr
 8001ca2:	bf00      	nop
 8001ca4:	40000800 	.word	0x40000800
 8001ca8:	40023800 	.word	0x40023800
 8001cac:	40014400 	.word	0x40014400

08001cb0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b08e      	sub	sp, #56	@ 0x38
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	601a      	str	r2, [r3, #0]
 8001cc0:	605a      	str	r2, [r3, #4]
 8001cc2:	609a      	str	r2, [r3, #8]
 8001cc4:	60da      	str	r2, [r3, #12]
 8001cc6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a6a      	ldr	r2, [pc, #424]	@ (8001e78 <HAL_TIM_MspPostInit+0x1c8>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d11f      	bne.n	8001d12 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	4b69      	ldr	r3, [pc, #420]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cda:	4a68      	ldr	r2, [pc, #416]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001cdc:	f043 0310 	orr.w	r3, r3, #16
 8001ce0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ce2:	4b66      	ldr	r3, [pc, #408]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce6:	f003 0310 	and.w	r3, r3, #16
 8001cea:	623b      	str	r3, [r7, #32]
 8001cec:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8001cee:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d00:	2301      	movs	r3, #1
 8001d02:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d08:	4619      	mov	r1, r3
 8001d0a:	485d      	ldr	r0, [pc, #372]	@ (8001e80 <HAL_TIM_MspPostInit+0x1d0>)
 8001d0c:	f001 fbc2 	bl	8003494 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001d10:	e0ae      	b.n	8001e70 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a5b      	ldr	r2, [pc, #364]	@ (8001e84 <HAL_TIM_MspPostInit+0x1d4>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d11f      	bne.n	8001d5c <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	61fb      	str	r3, [r7, #28]
 8001d20:	4b56      	ldr	r3, [pc, #344]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001d22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d24:	4a55      	ldr	r2, [pc, #340]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001d26:	f043 0308 	orr.w	r3, r3, #8
 8001d2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2c:	4b53      	ldr	r3, [pc, #332]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d30:	f003 0308 	and.w	r3, r3, #8
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001d38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d3e:	2302      	movs	r3, #2
 8001d40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d42:	2300      	movs	r3, #0
 8001d44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001d4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d52:	4619      	mov	r1, r3
 8001d54:	484c      	ldr	r0, [pc, #304]	@ (8001e88 <HAL_TIM_MspPostInit+0x1d8>)
 8001d56:	f001 fb9d 	bl	8003494 <HAL_GPIO_Init>
}
 8001d5a:	e089      	b.n	8001e70 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a4a      	ldr	r2, [pc, #296]	@ (8001e8c <HAL_TIM_MspPostInit+0x1dc>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d11f      	bne.n	8001da6 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	61bb      	str	r3, [r7, #24]
 8001d6a:	4b44      	ldr	r3, [pc, #272]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d6e:	4a43      	ldr	r2, [pc, #268]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001d70:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d76:	4b41      	ldr	r3, [pc, #260]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d7e:	61bb      	str	r3, [r7, #24]
 8001d80:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 8001d82:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001d86:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d88:	2302      	movs	r3, #2
 8001d8a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001d94:	2302      	movs	r3, #2
 8001d96:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	483c      	ldr	r0, [pc, #240]	@ (8001e90 <HAL_TIM_MspPostInit+0x1e0>)
 8001da0:	f001 fb78 	bl	8003494 <HAL_GPIO_Init>
}
 8001da4:	e064      	b.n	8001e70 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a3a      	ldr	r2, [pc, #232]	@ (8001e94 <HAL_TIM_MspPostInit+0x1e4>)
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d13c      	bne.n	8001e2a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	4b31      	ldr	r3, [pc, #196]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db8:	4a30      	ldr	r2, [pc, #192]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001dba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001dbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dc0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001dc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001dc8:	617b      	str	r3, [r7, #20]
 8001dca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001dcc:	2300      	movs	r3, #0
 8001dce:	613b      	str	r3, [r7, #16]
 8001dd0:	4b2a      	ldr	r3, [pc, #168]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dd4:	4a29      	ldr	r2, [pc, #164]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ddc:	4b27      	ldr	r3, [pc, #156]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8001de8:	23c0      	movs	r3, #192	@ 0xc0
 8001dea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dec:	2302      	movs	r3, #2
 8001dee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df4:	2300      	movs	r3, #0
 8001df6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001df8:	2303      	movs	r3, #3
 8001dfa:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	4825      	ldr	r0, [pc, #148]	@ (8001e98 <HAL_TIM_MspPostInit+0x1e8>)
 8001e04:	f001 fb46 	bl	8003494 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e08:	2340      	movs	r3, #64	@ 0x40
 8001e0a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e10:	2300      	movs	r3, #0
 8001e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e14:	2300      	movs	r3, #0
 8001e16:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e20:	4619      	mov	r1, r3
 8001e22:	481e      	ldr	r0, [pc, #120]	@ (8001e9c <HAL_TIM_MspPostInit+0x1ec>)
 8001e24:	f001 fb36 	bl	8003494 <HAL_GPIO_Init>
}
 8001e28:	e022      	b.n	8001e70 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea0 <HAL_TIM_MspPostInit+0x1f0>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d11d      	bne.n	8001e70 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001e34:	2300      	movs	r3, #0
 8001e36:	60fb      	str	r3, [r7, #12]
 8001e38:	4b10      	ldr	r3, [pc, #64]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001e3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e3c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001e3e:	f043 0320 	orr.w	r3, r3, #32
 8001e42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e44:	4b0d      	ldr	r3, [pc, #52]	@ (8001e7c <HAL_TIM_MspPostInit+0x1cc>)
 8001e46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	60fb      	str	r3, [r7, #12]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001e50:	2340      	movs	r3, #64	@ 0x40
 8001e52:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e54:	2302      	movs	r3, #2
 8001e56:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e60:	2303      	movs	r3, #3
 8001e62:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001e68:	4619      	mov	r1, r3
 8001e6a:	480e      	ldr	r0, [pc, #56]	@ (8001ea4 <HAL_TIM_MspPostInit+0x1f4>)
 8001e6c:	f001 fb12 	bl	8003494 <HAL_GPIO_Init>
}
 8001e70:	bf00      	nop
 8001e72:	3738      	adds	r7, #56	@ 0x38
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40010000 	.word	0x40010000
 8001e7c:	40023800 	.word	0x40023800
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40000800 	.word	0x40000800
 8001e88:	40020c00 	.word	0x40020c00
 8001e8c:	40000c00 	.word	0x40000c00
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40010400 	.word	0x40010400
 8001e98:	40022000 	.word	0x40022000
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40014400 	.word	0x40014400
 8001ea4:	40021400 	.word	0x40021400

08001ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b08e      	sub	sp, #56	@ 0x38
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a90      	ldr	r2, [pc, #576]	@ (8002108 <HAL_UART_MspInit+0x260>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	f040 80b2 	bne.w	8002030 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ecc:	2300      	movs	r3, #0
 8001ece:	623b      	str	r3, [r7, #32]
 8001ed0:	4b8e      	ldr	r3, [pc, #568]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001ed2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed4:	4a8d      	ldr	r2, [pc, #564]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001ed6:	f043 0310 	orr.w	r3, r3, #16
 8001eda:	6453      	str	r3, [r2, #68]	@ 0x44
 8001edc:	4b8b      	ldr	r3, [pc, #556]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee0:	f003 0310 	and.w	r3, r3, #16
 8001ee4:	623b      	str	r3, [r7, #32]
 8001ee6:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ee8:	2300      	movs	r3, #0
 8001eea:	61fb      	str	r3, [r7, #28]
 8001eec:	4b87      	ldr	r3, [pc, #540]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ef0:	4a86      	ldr	r2, [pc, #536]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ef8:	4b84      	ldr	r3, [pc, #528]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efc:	f003 0302 	and.w	r3, r3, #2
 8001f00:	61fb      	str	r3, [r7, #28]
 8001f02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f04:	2300      	movs	r3, #0
 8001f06:	61bb      	str	r3, [r7, #24]
 8001f08:	4b80      	ldr	r3, [pc, #512]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0c:	4a7f      	ldr	r2, [pc, #508]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001f0e:	f043 0301 	orr.w	r3, r3, #1
 8001f12:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f14:	4b7d      	ldr	r3, [pc, #500]	@ (800210c <HAL_UART_MspInit+0x264>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f18:	f003 0301 	and.w	r3, r3, #1
 8001f1c:	61bb      	str	r3, [r7, #24]
 8001f1e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001f20:	2380      	movs	r3, #128	@ 0x80
 8001f22:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f24:	2302      	movs	r3, #2
 8001f26:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2c:	2303      	movs	r3, #3
 8001f2e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f30:	2307      	movs	r3, #7
 8001f32:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f38:	4619      	mov	r1, r3
 8001f3a:	4875      	ldr	r0, [pc, #468]	@ (8002110 <HAL_UART_MspInit+0x268>)
 8001f3c:	f001 faaa 	bl	8003494 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f40:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f46:	2302      	movs	r3, #2
 8001f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001f52:	2307      	movs	r3, #7
 8001f54:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	486d      	ldr	r0, [pc, #436]	@ (8002114 <HAL_UART_MspInit+0x26c>)
 8001f5e:	f001 fa99 	bl	8003494 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8001f62:	4b6d      	ldr	r3, [pc, #436]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f64:	4a6d      	ldr	r2, [pc, #436]	@ (800211c <HAL_UART_MspInit+0x274>)
 8001f66:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8001f68:	4b6b      	ldr	r3, [pc, #428]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f6a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001f6e:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f70:	4b69      	ldr	r3, [pc, #420]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f72:	2240      	movs	r2, #64	@ 0x40
 8001f74:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f76:	4b68      	ldr	r3, [pc, #416]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f7c:	4b66      	ldr	r3, [pc, #408]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001f82:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f84:	4b64      	ldr	r3, [pc, #400]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f8a:	4b63      	ldr	r3, [pc, #396]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f90:	4b61      	ldr	r3, [pc, #388]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001f96:	4b60      	ldr	r3, [pc, #384]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001f98:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001f9c:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f9e:	4b5e      	ldr	r3, [pc, #376]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001fa4:	485c      	ldr	r0, [pc, #368]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001fa6:	f000 fef9 	bl	8002d9c <HAL_DMA_Init>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8001fb0:	f7ff f8d0 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a58      	ldr	r2, [pc, #352]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001fb8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001fba:	4a57      	ldr	r2, [pc, #348]	@ (8002118 <HAL_UART_MspInit+0x270>)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8001fc0:	4b57      	ldr	r3, [pc, #348]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001fc2:	4a58      	ldr	r2, [pc, #352]	@ (8002124 <HAL_UART_MspInit+0x27c>)
 8001fc4:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8001fc6:	4b56      	ldr	r3, [pc, #344]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001fc8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001fcc:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001fce:	4b54      	ldr	r3, [pc, #336]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001fd4:	4b52      	ldr	r3, [pc, #328]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001fda:	4b51      	ldr	r3, [pc, #324]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001fdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fe0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001fe2:	4b4f      	ldr	r3, [pc, #316]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001fe8:	4b4d      	ldr	r3, [pc, #308]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8001fee:	4b4c      	ldr	r3, [pc, #304]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ff4:	4b4a      	ldr	r3, [pc, #296]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001ff6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001ffa:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ffc:	4b48      	ldr	r3, [pc, #288]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002002:	4847      	ldr	r0, [pc, #284]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8002004:	f000 feca 	bl	8002d9c <HAL_DMA_Init>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d001      	beq.n	8002012 <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 800200e:	f7ff f8a1 	bl	8001154 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	4a42      	ldr	r2, [pc, #264]	@ (8002120 <HAL_UART_MspInit+0x278>)
 8002016:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002018:	4a41      	ldr	r2, [pc, #260]	@ (8002120 <HAL_UART_MspInit+0x278>)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800201e:	2200      	movs	r2, #0
 8002020:	2105      	movs	r1, #5
 8002022:	2025      	movs	r0, #37	@ 0x25
 8002024:	f000 fe83 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002028:	2025      	movs	r0, #37	@ 0x25
 800202a:	f000 fe9c 	bl	8002d66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800202e:	e11c      	b.n	800226a <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a3c      	ldr	r2, [pc, #240]	@ (8002128 <HAL_UART_MspInit+0x280>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d17e      	bne.n	8002138 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
 800203e:	4b33      	ldr	r3, [pc, #204]	@ (800210c <HAL_UART_MspInit+0x264>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	4a32      	ldr	r2, [pc, #200]	@ (800210c <HAL_UART_MspInit+0x264>)
 8002044:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002048:	6413      	str	r3, [r2, #64]	@ 0x40
 800204a:	4b30      	ldr	r3, [pc, #192]	@ (800210c <HAL_UART_MspInit+0x264>)
 800204c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800204e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002056:	2300      	movs	r3, #0
 8002058:	613b      	str	r3, [r7, #16]
 800205a:	4b2c      	ldr	r3, [pc, #176]	@ (800210c <HAL_UART_MspInit+0x264>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	4a2b      	ldr	r2, [pc, #172]	@ (800210c <HAL_UART_MspInit+0x264>)
 8002060:	f043 0304 	orr.w	r3, r3, #4
 8002064:	6313      	str	r3, [r2, #48]	@ 0x30
 8002066:	4b29      	ldr	r3, [pc, #164]	@ (800210c <HAL_UART_MspInit+0x264>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	613b      	str	r3, [r7, #16]
 8002070:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8002072:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002078:	2302      	movs	r3, #2
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800207c:	2300      	movs	r3, #0
 800207e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002080:	2303      	movs	r3, #3
 8002082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002084:	2307      	movs	r3, #7
 8002086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800208c:	4619      	mov	r1, r3
 800208e:	4827      	ldr	r0, [pc, #156]	@ (800212c <HAL_UART_MspInit+0x284>)
 8002090:	f001 fa00 	bl	8003494 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002094:	4b26      	ldr	r3, [pc, #152]	@ (8002130 <HAL_UART_MspInit+0x288>)
 8002096:	4a27      	ldr	r2, [pc, #156]	@ (8002134 <HAL_UART_MspInit+0x28c>)
 8002098:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800209a:	4b25      	ldr	r3, [pc, #148]	@ (8002130 <HAL_UART_MspInit+0x288>)
 800209c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80020a0:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80020a2:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80020a8:	4b21      	ldr	r3, [pc, #132]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80020ae:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020b0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020b4:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80020b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80020bc:	4b1c      	ldr	r3, [pc, #112]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020be:	2200      	movs	r2, #0
 80020c0:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80020c2:	4b1b      	ldr	r3, [pc, #108]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80020c8:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80020ca:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020cc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80020d0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80020d2:	4b17      	ldr	r3, [pc, #92]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80020d8:	4815      	ldr	r0, [pc, #84]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020da:	f000 fe5f 	bl	8002d9c <HAL_DMA_Init>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80020e4:	f7ff f836 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a11      	ldr	r2, [pc, #68]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020ec:	63da      	str	r2, [r3, #60]	@ 0x3c
 80020ee:	4a10      	ldr	r2, [pc, #64]	@ (8002130 <HAL_UART_MspInit+0x288>)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80020f4:	2200      	movs	r2, #0
 80020f6:	2105      	movs	r1, #5
 80020f8:	2027      	movs	r0, #39	@ 0x27
 80020fa:	f000 fe18 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020fe:	2027      	movs	r0, #39	@ 0x27
 8002100:	f000 fe31 	bl	8002d66 <HAL_NVIC_EnableIRQ>
}
 8002104:	e0b1      	b.n	800226a <HAL_UART_MspInit+0x3c2>
 8002106:	bf00      	nop
 8002108:	40011000 	.word	0x40011000
 800210c:	40023800 	.word	0x40023800
 8002110:	40020400 	.word	0x40020400
 8002114:	40020000 	.word	0x40020000
 8002118:	200003b8 	.word	0x200003b8
 800211c:	400264b8 	.word	0x400264b8
 8002120:	20000418 	.word	0x20000418
 8002124:	40026440 	.word	0x40026440
 8002128:	40004800 	.word	0x40004800
 800212c:	40020800 	.word	0x40020800
 8002130:	20000478 	.word	0x20000478
 8002134:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a4d      	ldr	r2, [pc, #308]	@ (8002274 <HAL_UART_MspInit+0x3cc>)
 800213e:	4293      	cmp	r3, r2
 8002140:	f040 8093 	bne.w	800226a <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002144:	2300      	movs	r3, #0
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	4b4b      	ldr	r3, [pc, #300]	@ (8002278 <HAL_UART_MspInit+0x3d0>)
 800214a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800214c:	4a4a      	ldr	r2, [pc, #296]	@ (8002278 <HAL_UART_MspInit+0x3d0>)
 800214e:	f043 0320 	orr.w	r3, r3, #32
 8002152:	6453      	str	r3, [r2, #68]	@ 0x44
 8002154:	4b48      	ldr	r3, [pc, #288]	@ (8002278 <HAL_UART_MspInit+0x3d0>)
 8002156:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002158:	f003 0320 	and.w	r3, r3, #32
 800215c:	60fb      	str	r3, [r7, #12]
 800215e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002160:	2300      	movs	r3, #0
 8002162:	60bb      	str	r3, [r7, #8]
 8002164:	4b44      	ldr	r3, [pc, #272]	@ (8002278 <HAL_UART_MspInit+0x3d0>)
 8002166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002168:	4a43      	ldr	r2, [pc, #268]	@ (8002278 <HAL_UART_MspInit+0x3d0>)
 800216a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800216e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002170:	4b41      	ldr	r3, [pc, #260]	@ (8002278 <HAL_UART_MspInit+0x3d0>)
 8002172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002174:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002178:	60bb      	str	r3, [r7, #8]
 800217a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800217c:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002180:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002182:	2302      	movs	r3, #2
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800218e:	2308      	movs	r3, #8
 8002190:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002196:	4619      	mov	r1, r3
 8002198:	4838      	ldr	r0, [pc, #224]	@ (800227c <HAL_UART_MspInit+0x3d4>)
 800219a:	f001 f97b 	bl	8003494 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 800219e:	4b38      	ldr	r3, [pc, #224]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021a0:	4a38      	ldr	r2, [pc, #224]	@ (8002284 <HAL_UART_MspInit+0x3dc>)
 80021a2:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80021a4:	4b36      	ldr	r3, [pc, #216]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021a6:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80021aa:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021ac:	4b34      	ldr	r3, [pc, #208]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021b2:	4b33      	ldr	r3, [pc, #204]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80021b8:	4b31      	ldr	r3, [pc, #196]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021ba:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021be:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021c0:	4b2f      	ldr	r3, [pc, #188]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021c6:	4b2e      	ldr	r3, [pc, #184]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80021cc:	4b2c      	ldr	r3, [pc, #176]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80021d2:	4b2b      	ldr	r3, [pc, #172]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80021d8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021da:	4b29      	ldr	r3, [pc, #164]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021dc:	2200      	movs	r2, #0
 80021de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80021e0:	4827      	ldr	r0, [pc, #156]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021e2:	f000 fddb 	bl	8002d9c <HAL_DMA_Init>
 80021e6:	4603      	mov	r3, r0
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d001      	beq.n	80021f0 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80021ec:	f7fe ffb2 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a23      	ldr	r2, [pc, #140]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021f6:	4a22      	ldr	r2, [pc, #136]	@ (8002280 <HAL_UART_MspInit+0x3d8>)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80021fc:	4b22      	ldr	r3, [pc, #136]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 80021fe:	4a23      	ldr	r2, [pc, #140]	@ (800228c <HAL_UART_MspInit+0x3e4>)
 8002200:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002202:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002204:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002208:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800220a:	4b1f      	ldr	r3, [pc, #124]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 800220c:	2240      	movs	r2, #64	@ 0x40
 800220e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002210:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002212:	2200      	movs	r2, #0
 8002214:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002216:	4b1c      	ldr	r3, [pc, #112]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002218:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800221c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800221e:	4b1a      	ldr	r3, [pc, #104]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002220:	2200      	movs	r2, #0
 8002222:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002224:	4b18      	ldr	r3, [pc, #96]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002226:	2200      	movs	r2, #0
 8002228:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800222a:	4b17      	ldr	r3, [pc, #92]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 800222c:	2200      	movs	r2, #0
 800222e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002230:	4b15      	ldr	r3, [pc, #84]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002232:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002236:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002238:	4b13      	ldr	r3, [pc, #76]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800223e:	4812      	ldr	r0, [pc, #72]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002240:	f000 fdac 	bl	8002d9c <HAL_DMA_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 800224a:	f7fe ff83 	bl	8001154 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a0d      	ldr	r2, [pc, #52]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002252:	639a      	str	r2, [r3, #56]	@ 0x38
 8002254:	4a0c      	ldr	r2, [pc, #48]	@ (8002288 <HAL_UART_MspInit+0x3e0>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2105      	movs	r1, #5
 800225e:	2047      	movs	r0, #71	@ 0x47
 8002260:	f000 fd65 	bl	8002d2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002264:	2047      	movs	r0, #71	@ 0x47
 8002266:	f000 fd7e 	bl	8002d66 <HAL_NVIC_EnableIRQ>
}
 800226a:	bf00      	nop
 800226c:	3738      	adds	r7, #56	@ 0x38
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40011400 	.word	0x40011400
 8002278:	40023800 	.word	0x40023800
 800227c:	40021800 	.word	0x40021800
 8002280:	200004d8 	.word	0x200004d8
 8002284:	40026428 	.word	0x40026428
 8002288:	20000538 	.word	0x20000538
 800228c:	400264a0 	.word	0x400264a0

08002290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002294:	f002 f880 	bl	8004398 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002298:	bf00      	nop
 800229a:	e7fd      	b.n	8002298 <NMI_Handler+0x8>

0800229c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a0:	bf00      	nop
 80022a2:	e7fd      	b.n	80022a0 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	bf00      	nop
 80022aa:	e7fd      	b.n	80022a8 <MemManage_Handler+0x4>

080022ac <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022b0:	bf00      	nop
 80022b2:	e7fd      	b.n	80022b0 <BusFault_Handler+0x4>

080022b4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b8:	bf00      	nop
 80022ba:	e7fd      	b.n	80022b8 <UsageFault_Handler+0x4>

080022bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr

080022ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022ca:	b580      	push	{r7, lr}
 80022cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022ce:	f000 f8ff 	bl	80024d0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80022d2:	f005 fd3d 	bl	8007d50 <xTaskGetSchedulerState>
 80022d6:	4603      	mov	r3, r0
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d001      	beq.n	80022e0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80022dc:	f006 fb34 	bl	8008948 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e0:	bf00      	nop
 80022e2:	bd80      	pop	{r7, pc}

080022e4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80022e8:	2008      	movs	r0, #8
 80022ea:	f001 fa89 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80022f6:	2010      	movs	r0, #16
 80022f8:	f001 fa82 	bl	8003800 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002304:	4802      	ldr	r0, [pc, #8]	@ (8002310 <DMA1_Stream1_IRQHandler+0x10>)
 8002306:	f000 fe89 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800230a:	bf00      	nop
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	20000478 	.word	0x20000478

08002314 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002318:	4802      	ldr	r0, [pc, #8]	@ (8002324 <CAN1_RX0_IRQHandler+0x10>)
 800231a:	f000 f9f4 	bl	8002706 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800231e:	bf00      	nop
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	2000007c 	.word	0x2000007c

08002328 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800232c:	4802      	ldr	r0, [pc, #8]	@ (8002338 <USART1_IRQHandler+0x10>)
 800232e:	f003 f8db 	bl	80054e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002332:	bf00      	nop
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	200002e0 	.word	0x200002e0

0800233c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002340:	4802      	ldr	r0, [pc, #8]	@ (800234c <DMA2_Stream1_IRQHandler+0x10>)
 8002342:	f000 fe6b 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	200004d8 	.word	0x200004d8

08002350 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002354:	4802      	ldr	r0, [pc, #8]	@ (8002360 <DMA2_Stream2_IRQHandler+0x10>)
 8002356:	f000 fe61 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800235a:	bf00      	nop
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	20000418 	.word	0x20000418

08002364 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002368:	4802      	ldr	r0, [pc, #8]	@ (8002374 <CAN2_RX0_IRQHandler+0x10>)
 800236a:	f000 f9cc 	bl	8002706 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	200000a4 	.word	0x200000a4

08002378 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 800237c:	4802      	ldr	r0, [pc, #8]	@ (8002388 <DMA2_Stream6_IRQHandler+0x10>)
 800237e:	f000 fe4d 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	20000538 	.word	0x20000538

0800238c <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002390:	4802      	ldr	r0, [pc, #8]	@ (800239c <DMA2_Stream7_IRQHandler+0x10>)
 8002392:	f000 fe43 	bl	800301c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	200003b8 	.word	0x200003b8

080023a0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80023a4:	4802      	ldr	r0, [pc, #8]	@ (80023b0 <USART6_IRQHandler+0x10>)
 80023a6:	f003 f89f 	bl	80054e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80023aa:	bf00      	nop
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000370 	.word	0x20000370

080023b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023b8:	4b06      	ldr	r3, [pc, #24]	@ (80023d4 <SystemInit+0x20>)
 80023ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023be:	4a05      	ldr	r2, [pc, #20]	@ (80023d4 <SystemInit+0x20>)
 80023c0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023c4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023c8:	bf00      	nop
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	e000ed00 	.word	0xe000ed00

080023d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80023d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002410 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80023dc:	f7ff ffea 	bl	80023b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023e0:	480c      	ldr	r0, [pc, #48]	@ (8002414 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80023e2:	490d      	ldr	r1, [pc, #52]	@ (8002418 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80023e4:	4a0d      	ldr	r2, [pc, #52]	@ (800241c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80023e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023e8:	e002      	b.n	80023f0 <LoopCopyDataInit>

080023ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ee:	3304      	adds	r3, #4

080023f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023f4:	d3f9      	bcc.n	80023ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80023f8:	4c0a      	ldr	r4, [pc, #40]	@ (8002424 <LoopFillZerobss+0x22>)
  movs r3, #0
 80023fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023fc:	e001      	b.n	8002402 <LoopFillZerobss>

080023fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002400:	3204      	adds	r2, #4

08002402 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002402:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002404:	d3fb      	bcc.n	80023fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002406:	f006 fd7d 	bl	8008f04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800240a:	f7fe f859 	bl	80004c0 <main>
  bx  lr    
 800240e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002410:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002414:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002418:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 800241c:	0800913c 	.word	0x0800913c
  ldr r2, =_sbss
 8002420:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002424:	2000514c 	.word	0x2000514c

08002428 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002428:	e7fe      	b.n	8002428 <ADC_IRQHandler>
	...

0800242c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002430:	4b0e      	ldr	r3, [pc, #56]	@ (800246c <HAL_Init+0x40>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a0d      	ldr	r2, [pc, #52]	@ (800246c <HAL_Init+0x40>)
 8002436:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800243a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800243c:	4b0b      	ldr	r3, [pc, #44]	@ (800246c <HAL_Init+0x40>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0a      	ldr	r2, [pc, #40]	@ (800246c <HAL_Init+0x40>)
 8002442:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002446:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002448:	4b08      	ldr	r3, [pc, #32]	@ (800246c <HAL_Init+0x40>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a07      	ldr	r2, [pc, #28]	@ (800246c <HAL_Init+0x40>)
 800244e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002452:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002454:	2003      	movs	r0, #3
 8002456:	f000 fc5f 	bl	8002d18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800245a:	200f      	movs	r0, #15
 800245c:	f000 f808 	bl	8002470 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002460:	f7ff f9f2 	bl	8001848 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	40023c00 	.word	0x40023c00

08002470 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002478:	4b12      	ldr	r3, [pc, #72]	@ (80024c4 <HAL_InitTick+0x54>)
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	4b12      	ldr	r3, [pc, #72]	@ (80024c8 <HAL_InitTick+0x58>)
 800247e:	781b      	ldrb	r3, [r3, #0]
 8002480:	4619      	mov	r1, r3
 8002482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002486:	fbb3 f3f1 	udiv	r3, r3, r1
 800248a:	fbb2 f3f3 	udiv	r3, r2, r3
 800248e:	4618      	mov	r0, r3
 8002490:	f000 fc77 	bl	8002d82 <HAL_SYSTICK_Config>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e00e      	b.n	80024bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b0f      	cmp	r3, #15
 80024a2:	d80a      	bhi.n	80024ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024a4:	2200      	movs	r2, #0
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80024ac:	f000 fc3f 	bl	8002d2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024b0:	4a06      	ldr	r2, [pc, #24]	@ (80024cc <HAL_InitTick+0x5c>)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
 80024b8:	e000      	b.n	80024bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3708      	adds	r7, #8
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20000000 	.word	0x20000000
 80024c8:	20000008 	.word	0x20000008
 80024cc:	20000004 	.word	0x20000004

080024d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024d4:	4b06      	ldr	r3, [pc, #24]	@ (80024f0 <HAL_IncTick+0x20>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <HAL_IncTick+0x24>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4413      	add	r3, r2
 80024e0:	4a04      	ldr	r2, [pc, #16]	@ (80024f4 <HAL_IncTick+0x24>)
 80024e2:	6013      	str	r3, [r2, #0]
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	20000008 	.word	0x20000008
 80024f4:	20000620 	.word	0x20000620

080024f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  return uwTick;
 80024fc:	4b03      	ldr	r3, [pc, #12]	@ (800250c <HAL_GetTick+0x14>)
 80024fe:	681b      	ldr	r3, [r3, #0]
}
 8002500:	4618      	mov	r0, r3
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	20000620 	.word	0x20000620

08002510 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d101      	bne.n	8002522 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e0ed      	b.n	80026fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002528:	b2db      	uxtb	r3, r3
 800252a:	2b00      	cmp	r3, #0
 800252c:	d102      	bne.n	8002534 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800252e:	6878      	ldr	r0, [r7, #4]
 8002530:	f7ff f9b6 	bl	80018a0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f042 0201 	orr.w	r2, r2, #1
 8002542:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002544:	f7ff ffd8 	bl	80024f8 <HAL_GetTick>
 8002548:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800254a:	e012      	b.n	8002572 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800254c:	f7ff ffd4 	bl	80024f8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b0a      	cmp	r3, #10
 8002558:	d90b      	bls.n	8002572 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800255e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2205      	movs	r2, #5
 800256a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e0c5      	b.n	80026fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0301 	and.w	r3, r3, #1
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0e5      	beq.n	800254c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0202 	bic.w	r2, r2, #2
 800258e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002590:	f7ff ffb2 	bl	80024f8 <HAL_GetTick>
 8002594:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002596:	e012      	b.n	80025be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002598:	f7ff ffae 	bl	80024f8 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	1ad3      	subs	r3, r2, r3
 80025a2:	2b0a      	cmp	r3, #10
 80025a4:	d90b      	bls.n	80025be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025aa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2205      	movs	r2, #5
 80025b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e09f      	b.n	80026fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0302 	and.w	r3, r3, #2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1e5      	bne.n	8002598 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	7e1b      	ldrb	r3, [r3, #24]
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d108      	bne.n	80025e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80025e2:	601a      	str	r2, [r3, #0]
 80025e4:	e007      	b.n	80025f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80025f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	7e5b      	ldrb	r3, [r3, #25]
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d108      	bne.n	8002610 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	681a      	ldr	r2, [r3, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800260c:	601a      	str	r2, [r3, #0]
 800260e:	e007      	b.n	8002620 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	681a      	ldr	r2, [r3, #0]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800261e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	7e9b      	ldrb	r3, [r3, #26]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d108      	bne.n	800263a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	681a      	ldr	r2, [r3, #0]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 0220 	orr.w	r2, r2, #32
 8002636:	601a      	str	r2, [r3, #0]
 8002638:	e007      	b.n	800264a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681a      	ldr	r2, [r3, #0]
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f022 0220 	bic.w	r2, r2, #32
 8002648:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	7edb      	ldrb	r3, [r3, #27]
 800264e:	2b01      	cmp	r3, #1
 8002650:	d108      	bne.n	8002664 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f022 0210 	bic.w	r2, r2, #16
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e007      	b.n	8002674 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	681a      	ldr	r2, [r3, #0]
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f042 0210 	orr.w	r2, r2, #16
 8002672:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	7f1b      	ldrb	r3, [r3, #28]
 8002678:	2b01      	cmp	r3, #1
 800267a:	d108      	bne.n	800268e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 0208 	orr.w	r2, r2, #8
 800268a:	601a      	str	r2, [r3, #0]
 800268c:	e007      	b.n	800269e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0208 	bic.w	r2, r2, #8
 800269c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	7f5b      	ldrb	r3, [r3, #29]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d108      	bne.n	80026b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f042 0204 	orr.w	r2, r2, #4
 80026b4:	601a      	str	r2, [r3, #0]
 80026b6:	e007      	b.n	80026c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f022 0204 	bic.w	r2, r2, #4
 80026c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689a      	ldr	r2, [r3, #8]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	431a      	orrs	r2, r3
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	691b      	ldr	r3, [r3, #16]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	695b      	ldr	r3, [r3, #20]
 80026dc:	ea42 0103 	orr.w	r1, r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	1e5a      	subs	r2, r3, #1
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	430a      	orrs	r2, r1
 80026ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b08a      	sub	sp, #40	@ 0x28
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	695b      	ldr	r3, [r3, #20]
 8002718:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002742:	6a3b      	ldr	r3, [r7, #32]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d07c      	beq.n	8002846 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	f003 0301 	and.w	r3, r3, #1
 8002752:	2b00      	cmp	r3, #0
 8002754:	d023      	beq.n	800279e <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2201      	movs	r2, #1
 800275c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	f003 0302 	and.w	r3, r3, #2
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f983 	bl	8002a74 <HAL_CAN_TxMailbox0CompleteCallback>
 800276e:	e016      	b.n	800279e <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	f003 0304 	and.w	r3, r3, #4
 8002776:	2b00      	cmp	r3, #0
 8002778:	d004      	beq.n	8002784 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800277a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002780:	627b      	str	r3, [r7, #36]	@ 0x24
 8002782:	e00c      	b.n	800279e <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002784:	69bb      	ldr	r3, [r7, #24]
 8002786:	f003 0308 	and.w	r3, r3, #8
 800278a:	2b00      	cmp	r3, #0
 800278c:	d004      	beq.n	8002798 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
 8002796:	e002      	b.n	800279e <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002798:	6878      	ldr	r0, [r7, #4]
 800279a:	f000 f989 	bl	8002ab0 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d024      	beq.n	80027f2 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80027b2:	69bb      	ldr	r3, [r7, #24]
 80027b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f963 	bl	8002a88 <HAL_CAN_TxMailbox1CompleteCallback>
 80027c2:	e016      	b.n	80027f2 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80027c4:	69bb      	ldr	r3, [r7, #24]
 80027c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d004      	beq.n	80027d8 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80027ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d0:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80027d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027d6:	e00c      	b.n	80027f2 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d004      	beq.n	80027ec <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80027e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80027ea:	e002      	b.n	80027f2 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f000 f969 	bl	8002ac4 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d024      	beq.n	8002846 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002804:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f943 	bl	8002a9c <HAL_CAN_TxMailbox2CompleteCallback>
 8002816:	e016      	b.n	8002846 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002818:	69bb      	ldr	r3, [r7, #24]
 800281a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002824:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002828:	627b      	str	r3, [r7, #36]	@ 0x24
 800282a:	e00c      	b.n	8002846 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d004      	beq.n	8002840 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002838:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800283c:	627b      	str	r3, [r7, #36]	@ 0x24
 800283e:	e002      	b.n	8002846 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f949 	bl	8002ad8 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	f003 0308 	and.w	r3, r3, #8
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00c      	beq.n	800286a <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0310 	and.w	r3, r3, #16
 8002856:	2b00      	cmp	r3, #0
 8002858:	d007      	beq.n	800286a <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002860:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	2210      	movs	r2, #16
 8002868:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800286a:	6a3b      	ldr	r3, [r7, #32]
 800286c:	f003 0304 	and.w	r3, r3, #4
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00b      	beq.n	800288c <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	f003 0308 	and.w	r3, r3, #8
 800287a:	2b00      	cmp	r3, #0
 800287c:	d006      	beq.n	800288c <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2208      	movs	r2, #8
 8002884:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f93a 	bl	8002b00 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800288c:	6a3b      	ldr	r3, [r7, #32]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b00      	cmp	r3, #0
 8002894:	d009      	beq.n	80028aa <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	f003 0303 	and.w	r3, r3, #3
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f921 	bl	8002aec <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d00c      	beq.n	80028ce <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	f003 0310 	and.w	r3, r3, #16
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d007      	beq.n	80028ce <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2210      	movs	r2, #16
 80028cc:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80028ce:	6a3b      	ldr	r3, [r7, #32]
 80028d0:	f003 0320 	and.w	r3, r3, #32
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00b      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2208      	movs	r2, #8
 80028e8:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80028ea:	6878      	ldr	r0, [r7, #4]
 80028ec:	f000 f91c 	bl	8002b28 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	f003 0310 	and.w	r3, r3, #16
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d009      	beq.n	800290e <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	f003 0303 	and.w	r3, r3, #3
 8002904:	2b00      	cmp	r3, #0
 8002906:	d002      	beq.n	800290e <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	f000 f903 	bl	8002b14 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800290e:	6a3b      	ldr	r3, [r7, #32]
 8002910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00b      	beq.n	8002930 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	f003 0310 	and.w	r3, r3, #16
 800291e:	2b00      	cmp	r3, #0
 8002920:	d006      	beq.n	8002930 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	2210      	movs	r2, #16
 8002928:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 f906 	bl	8002b3c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002930:	6a3b      	ldr	r3, [r7, #32]
 8002932:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800293a:	69fb      	ldr	r3, [r7, #28]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d006      	beq.n	8002952 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	2208      	movs	r2, #8
 800294a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f8ff 	bl	8002b50 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002952:	6a3b      	ldr	r3, [r7, #32]
 8002954:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d07b      	beq.n	8002a54 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	f003 0304 	and.w	r3, r3, #4
 8002962:	2b00      	cmp	r3, #0
 8002964:	d072      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002966:	6a3b      	ldr	r3, [r7, #32]
 8002968:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800296c:	2b00      	cmp	r3, #0
 800296e:	d008      	beq.n	8002982 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800297a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800297c:	f043 0301 	orr.w	r3, r3, #1
 8002980:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002982:	6a3b      	ldr	r3, [r7, #32]
 8002984:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002998:	f043 0302 	orr.w	r3, r3, #2
 800299c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800299e:	6a3b      	ldr	r3, [r7, #32]
 80029a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d003      	beq.n	80029ba <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80029b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029b4:	f043 0304 	orr.w	r3, r3, #4
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d043      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d03e      	beq.n	8002a4c <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80029d4:	2b60      	cmp	r3, #96	@ 0x60
 80029d6:	d02b      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x32a>
 80029d8:	2b60      	cmp	r3, #96	@ 0x60
 80029da:	d82e      	bhi.n	8002a3a <HAL_CAN_IRQHandler+0x334>
 80029dc:	2b50      	cmp	r3, #80	@ 0x50
 80029de:	d022      	beq.n	8002a26 <HAL_CAN_IRQHandler+0x320>
 80029e0:	2b50      	cmp	r3, #80	@ 0x50
 80029e2:	d82a      	bhi.n	8002a3a <HAL_CAN_IRQHandler+0x334>
 80029e4:	2b40      	cmp	r3, #64	@ 0x40
 80029e6:	d019      	beq.n	8002a1c <HAL_CAN_IRQHandler+0x316>
 80029e8:	2b40      	cmp	r3, #64	@ 0x40
 80029ea:	d826      	bhi.n	8002a3a <HAL_CAN_IRQHandler+0x334>
 80029ec:	2b30      	cmp	r3, #48	@ 0x30
 80029ee:	d010      	beq.n	8002a12 <HAL_CAN_IRQHandler+0x30c>
 80029f0:	2b30      	cmp	r3, #48	@ 0x30
 80029f2:	d822      	bhi.n	8002a3a <HAL_CAN_IRQHandler+0x334>
 80029f4:	2b10      	cmp	r3, #16
 80029f6:	d002      	beq.n	80029fe <HAL_CAN_IRQHandler+0x2f8>
 80029f8:	2b20      	cmp	r3, #32
 80029fa:	d005      	beq.n	8002a08 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80029fc:	e01d      	b.n	8002a3a <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80029fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a00:	f043 0308 	orr.w	r3, r3, #8
 8002a04:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a06:	e019      	b.n	8002a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0a:	f043 0310 	orr.w	r3, r3, #16
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a10:	e014      	b.n	8002a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a14:	f043 0320 	orr.w	r3, r3, #32
 8002a18:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a1a:	e00f      	b.n	8002a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a1e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a22:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a24:	e00a      	b.n	8002a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a2c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a2e:	e005      	b.n	8002a3c <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a36:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002a38:	e000      	b.n	8002a3c <HAL_CAN_IRQHandler+0x336>
            break;
 8002a3a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	699a      	ldr	r2, [r3, #24]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002a4a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	2204      	movs	r2, #4
 8002a52:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d008      	beq.n	8002a6c <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a60:	431a      	orrs	r2, r3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f87c 	bl	8002b64 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002a6c:	bf00      	nop
 8002a6e:	3728      	adds	r7, #40	@ 0x28
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}

08002a74 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a74:	b480      	push	{r7}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002a7c:	bf00      	nop
 8002a7e:	370c      	adds	r7, #12
 8002a80:	46bd      	mov	sp, r7
 8002a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a86:	4770      	bx	lr

08002a88 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002a90:	bf00      	nop
 8002a92:	370c      	adds	r7, #12
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr

08002a9c <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002aa4:	bf00      	nop
 8002aa6:	370c      	adds	r7, #12
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aae:	4770      	bx	lr

08002ab0 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr

08002ac4 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	b083      	sub	sp, #12
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002acc:	bf00      	nop
 8002ace:	370c      	adds	r7, #12
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr

08002ad8 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr

08002b14 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002b1c:	bf00      	nop
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002b28:	b480      	push	{r7}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002b30:	bf00      	nop
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b083      	sub	sp, #12
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr

08002b64 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	f003 0307 	and.w	r3, r3, #7
 8002b86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002b8a:	68db      	ldr	r3, [r3, #12]
 8002b8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b8e:	68ba      	ldr	r2, [r7, #8]
 8002b90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b94:	4013      	ands	r3, r2
 8002b96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ba0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ba4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ba8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002baa:	4a04      	ldr	r2, [pc, #16]	@ (8002bbc <__NVIC_SetPriorityGrouping+0x44>)
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	60d3      	str	r3, [r2, #12]
}
 8002bb0:	bf00      	nop
 8002bb2:	3714      	adds	r7, #20
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bc4:	4b04      	ldr	r3, [pc, #16]	@ (8002bd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	0a1b      	lsrs	r3, r3, #8
 8002bca:	f003 0307 	and.w	r3, r3, #7
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	e000ed00 	.word	0xe000ed00

08002bdc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	4603      	mov	r3, r0
 8002be4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002be6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	db0b      	blt.n	8002c06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bee:	79fb      	ldrb	r3, [r7, #7]
 8002bf0:	f003 021f 	and.w	r2, r3, #31
 8002bf4:	4907      	ldr	r1, [pc, #28]	@ (8002c14 <__NVIC_EnableIRQ+0x38>)
 8002bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfa:	095b      	lsrs	r3, r3, #5
 8002bfc:	2001      	movs	r0, #1
 8002bfe:	fa00 f202 	lsl.w	r2, r0, r2
 8002c02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c06:	bf00      	nop
 8002c08:	370c      	adds	r7, #12
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c10:	4770      	bx	lr
 8002c12:	bf00      	nop
 8002c14:	e000e100 	.word	0xe000e100

08002c18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	db0a      	blt.n	8002c42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	b2da      	uxtb	r2, r3
 8002c30:	490c      	ldr	r1, [pc, #48]	@ (8002c64 <__NVIC_SetPriority+0x4c>)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	0112      	lsls	r2, r2, #4
 8002c38:	b2d2      	uxtb	r2, r2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c40:	e00a      	b.n	8002c58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	b2da      	uxtb	r2, r3
 8002c46:	4908      	ldr	r1, [pc, #32]	@ (8002c68 <__NVIC_SetPriority+0x50>)
 8002c48:	79fb      	ldrb	r3, [r7, #7]
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	3b04      	subs	r3, #4
 8002c50:	0112      	lsls	r2, r2, #4
 8002c52:	b2d2      	uxtb	r2, r2
 8002c54:	440b      	add	r3, r1
 8002c56:	761a      	strb	r2, [r3, #24]
}
 8002c58:	bf00      	nop
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr
 8002c64:	e000e100 	.word	0xe000e100
 8002c68:	e000ed00 	.word	0xe000ed00

08002c6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b089      	sub	sp, #36	@ 0x24
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	60f8      	str	r0, [r7, #12]
 8002c74:	60b9      	str	r1, [r7, #8]
 8002c76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	f1c3 0307 	rsb	r3, r3, #7
 8002c86:	2b04      	cmp	r3, #4
 8002c88:	bf28      	it	cs
 8002c8a:	2304      	movcs	r3, #4
 8002c8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3304      	adds	r3, #4
 8002c92:	2b06      	cmp	r3, #6
 8002c94:	d902      	bls.n	8002c9c <NVIC_EncodePriority+0x30>
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	3b03      	subs	r3, #3
 8002c9a:	e000      	b.n	8002c9e <NVIC_EncodePriority+0x32>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ca4:	69bb      	ldr	r3, [r7, #24]
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43da      	mvns	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	401a      	ands	r2, r3
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	fa01 f303 	lsl.w	r3, r1, r3
 8002cbe:	43d9      	mvns	r1, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cc4:	4313      	orrs	r3, r2
         );
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	3724      	adds	r7, #36	@ 0x24
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr
	...

08002cd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b082      	sub	sp, #8
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	3b01      	subs	r3, #1
 8002ce0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ce4:	d301      	bcc.n	8002cea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e00f      	b.n	8002d0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cea:	4a0a      	ldr	r2, [pc, #40]	@ (8002d14 <SysTick_Config+0x40>)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	3b01      	subs	r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cf2:	210f      	movs	r1, #15
 8002cf4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cf8:	f7ff ff8e 	bl	8002c18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cfc:	4b05      	ldr	r3, [pc, #20]	@ (8002d14 <SysTick_Config+0x40>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d02:	4b04      	ldr	r3, [pc, #16]	@ (8002d14 <SysTick_Config+0x40>)
 8002d04:	2207      	movs	r2, #7
 8002d06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	3708      	adds	r7, #8
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bd80      	pop	{r7, pc}
 8002d12:	bf00      	nop
 8002d14:	e000e010 	.word	0xe000e010

08002d18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff29 	bl	8002b78 <__NVIC_SetPriorityGrouping>
}
 8002d26:	bf00      	nop
 8002d28:	3708      	adds	r7, #8
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d2e:	b580      	push	{r7, lr}
 8002d30:	b086      	sub	sp, #24
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	4603      	mov	r3, r0
 8002d36:	60b9      	str	r1, [r7, #8]
 8002d38:	607a      	str	r2, [r7, #4]
 8002d3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d40:	f7ff ff3e 	bl	8002bc0 <__NVIC_GetPriorityGrouping>
 8002d44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68b9      	ldr	r1, [r7, #8]
 8002d4a:	6978      	ldr	r0, [r7, #20]
 8002d4c:	f7ff ff8e 	bl	8002c6c <NVIC_EncodePriority>
 8002d50:	4602      	mov	r2, r0
 8002d52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d56:	4611      	mov	r1, r2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff5d 	bl	8002c18 <__NVIC_SetPriority>
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}

08002d66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d66:	b580      	push	{r7, lr}
 8002d68:	b082      	sub	sp, #8
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff31 	bl	8002bdc <__NVIC_EnableIRQ>
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b082      	sub	sp, #8
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ffa2 	bl	8002cd4 <SysTick_Config>
 8002d90:	4603      	mov	r3, r0
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
	...

08002d9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002da4:	2300      	movs	r3, #0
 8002da6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002da8:	f7ff fba6 	bl	80024f8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d101      	bne.n	8002db8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e099      	b.n	8002eec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dd8:	e00f      	b.n	8002dfa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dda:	f7ff fb8d 	bl	80024f8 <HAL_GetTick>
 8002dde:	4602      	mov	r2, r0
 8002de0:	693b      	ldr	r3, [r7, #16]
 8002de2:	1ad3      	subs	r3, r2, r3
 8002de4:	2b05      	cmp	r3, #5
 8002de6:	d908      	bls.n	8002dfa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2220      	movs	r2, #32
 8002dec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2203      	movs	r2, #3
 8002df2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e078      	b.n	8002eec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1e8      	bne.n	8002dda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e10:	697a      	ldr	r2, [r7, #20]
 8002e12:	4b38      	ldr	r3, [pc, #224]	@ (8002ef4 <HAL_DMA_Init+0x158>)
 8002e14:	4013      	ands	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e26:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e3e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e50:	2b04      	cmp	r3, #4
 8002e52:	d107      	bne.n	8002e64 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
 8002e72:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0307 	bic.w	r3, r3, #7
 8002e7a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d117      	bne.n	8002ebe <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e92:	697a      	ldr	r2, [r7, #20]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d00e      	beq.n	8002ebe <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f000 fa7b 	bl	800339c <DMA_CheckFifoParam>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d008      	beq.n	8002ebe <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2240      	movs	r2, #64	@ 0x40
 8002eb0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2201      	movs	r2, #1
 8002eb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e016      	b.n	8002eec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	697a      	ldr	r2, [r7, #20]
 8002ec4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002ec6:	6878      	ldr	r0, [r7, #4]
 8002ec8:	f000 fa32 	bl	8003330 <DMA_CalcBaseAndBitshift>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed4:	223f      	movs	r2, #63	@ 0x3f
 8002ed6:	409a      	lsls	r2, r3
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3718      	adds	r7, #24
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	f010803f 	.word	0xf010803f

08002ef8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002f06:	f7ff faf7 	bl	80024f8 <HAL_GetTick>
 8002f0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d008      	beq.n	8002f2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2280      	movs	r2, #128	@ 0x80
 8002f1c:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e052      	b.n	8002fd0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0216 	bic.w	r2, r2, #22
 8002f38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	695a      	ldr	r2, [r3, #20]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d103      	bne.n	8002f5a <HAL_DMA_Abort+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d007      	beq.n	8002f6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0208 	bic.w	r2, r2, #8
 8002f68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 0201 	bic.w	r2, r2, #1
 8002f78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f7a:	e013      	b.n	8002fa4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f7c:	f7ff fabc 	bl	80024f8 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b05      	cmp	r3, #5
 8002f88:	d90c      	bls.n	8002fa4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2220      	movs	r2, #32
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2203      	movs	r2, #3
 8002f94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002fa0:	2303      	movs	r3, #3
 8002fa2:	e015      	b.n	8002fd0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d1e4      	bne.n	8002f7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb6:	223f      	movs	r2, #63	@ 0x3f
 8002fb8:	409a      	lsls	r2, r3
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002fce:	2300      	movs	r3, #0
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d004      	beq.n	8002ff6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2280      	movs	r2, #128	@ 0x80
 8002ff0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e00c      	b.n	8003010 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2205      	movs	r2, #5
 8002ffa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800300e:	2300      	movs	r3, #0
}
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b086      	sub	sp, #24
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003024:	2300      	movs	r3, #0
 8003026:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003028:	4b8e      	ldr	r3, [pc, #568]	@ (8003264 <HAL_DMA_IRQHandler+0x248>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a8e      	ldr	r2, [pc, #568]	@ (8003268 <HAL_DMA_IRQHandler+0x24c>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0a9b      	lsrs	r3, r3, #10
 8003034:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800303a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003046:	2208      	movs	r2, #8
 8003048:	409a      	lsls	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4013      	ands	r3, r2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d01a      	beq.n	8003088 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d013      	beq.n	8003088 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f022 0204 	bic.w	r2, r2, #4
 800306e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003074:	2208      	movs	r2, #8
 8003076:	409a      	lsls	r2, r3
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003080:	f043 0201 	orr.w	r2, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800308c:	2201      	movs	r2, #1
 800308e:	409a      	lsls	r2, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	4013      	ands	r3, r2
 8003094:	2b00      	cmp	r3, #0
 8003096:	d012      	beq.n	80030be <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	2201      	movs	r2, #1
 80030ac:	409a      	lsls	r2, r3
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030b6:	f043 0202 	orr.w	r2, r3, #2
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	2204      	movs	r2, #4
 80030c4:	409a      	lsls	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4013      	ands	r3, r2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d012      	beq.n	80030f4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d00b      	beq.n	80030f4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030e0:	2204      	movs	r2, #4
 80030e2:	409a      	lsls	r2, r3
 80030e4:	693b      	ldr	r3, [r7, #16]
 80030e6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ec:	f043 0204 	orr.w	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f8:	2210      	movs	r2, #16
 80030fa:	409a      	lsls	r2, r3
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d043      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d03c      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003116:	2210      	movs	r2, #16
 8003118:	409a      	lsls	r2, r3
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d018      	beq.n	800315e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d108      	bne.n	800314c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313e:	2b00      	cmp	r3, #0
 8003140:	d024      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	4798      	blx	r3
 800314a:	e01f      	b.n	800318c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003150:	2b00      	cmp	r3, #0
 8003152:	d01b      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4798      	blx	r3
 800315c:	e016      	b.n	800318c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d107      	bne.n	800317c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0208 	bic.w	r2, r2, #8
 800317a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003190:	2220      	movs	r2, #32
 8003192:	409a      	lsls	r2, r3
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4013      	ands	r3, r2
 8003198:	2b00      	cmp	r3, #0
 800319a:	f000 808f 	beq.w	80032bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 0310 	and.w	r3, r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 8087 	beq.w	80032bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80031b2:	2220      	movs	r2, #32
 80031b4:	409a      	lsls	r2, r3
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b05      	cmp	r3, #5
 80031c4:	d136      	bne.n	8003234 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0216 	bic.w	r2, r2, #22
 80031d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	695a      	ldr	r2, [r3, #20]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80031e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d103      	bne.n	80031f6 <HAL_DMA_IRQHandler+0x1da>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d007      	beq.n	8003206 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0208 	bic.w	r2, r2, #8
 8003204:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800320a:	223f      	movs	r2, #63	@ 0x3f
 800320c:	409a      	lsls	r2, r3
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003226:	2b00      	cmp	r3, #0
 8003228:	d07e      	beq.n	8003328 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	4798      	blx	r3
        }
        return;
 8003232:	e079      	b.n	8003328 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d01d      	beq.n	800327e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10d      	bne.n	800326c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003254:	2b00      	cmp	r3, #0
 8003256:	d031      	beq.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800325c:	6878      	ldr	r0, [r7, #4]
 800325e:	4798      	blx	r3
 8003260:	e02c      	b.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
 8003262:	bf00      	nop
 8003264:	20000000 	.word	0x20000000
 8003268:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003270:	2b00      	cmp	r3, #0
 8003272:	d023      	beq.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003278:	6878      	ldr	r0, [r7, #4]
 800327a:	4798      	blx	r3
 800327c:	e01e      	b.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10f      	bne.n	80032ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f022 0210 	bic.w	r2, r2, #16
 800329a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2201      	movs	r2, #1
 80032a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2200      	movs	r2, #0
 80032a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d032      	beq.n	800332a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032c8:	f003 0301 	and.w	r3, r3, #1
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d022      	beq.n	8003316 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2205      	movs	r2, #5
 80032d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	681a      	ldr	r2, [r3, #0]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f022 0201 	bic.w	r2, r2, #1
 80032e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60bb      	str	r3, [r7, #8]
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d307      	bcc.n	8003304 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f2      	bne.n	80032e8 <HAL_DMA_IRQHandler+0x2cc>
 8003302:	e000      	b.n	8003306 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003304:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800331a:	2b00      	cmp	r3, #0
 800331c:	d005      	beq.n	800332a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	4798      	blx	r3
 8003326:	e000      	b.n	800332a <HAL_DMA_IRQHandler+0x30e>
        return;
 8003328:	bf00      	nop
    }
  }
}
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003330:	b480      	push	{r7}
 8003332:	b085      	sub	sp, #20
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	b2db      	uxtb	r3, r3
 800333e:	3b10      	subs	r3, #16
 8003340:	4a14      	ldr	r2, [pc, #80]	@ (8003394 <DMA_CalcBaseAndBitshift+0x64>)
 8003342:	fba2 2303 	umull	r2, r3, r2, r3
 8003346:	091b      	lsrs	r3, r3, #4
 8003348:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800334a:	4a13      	ldr	r2, [pc, #76]	@ (8003398 <DMA_CalcBaseAndBitshift+0x68>)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	4413      	add	r3, r2
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2b03      	cmp	r3, #3
 800335c:	d909      	bls.n	8003372 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003366:	f023 0303 	bic.w	r3, r3, #3
 800336a:	1d1a      	adds	r2, r3, #4
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003370:	e007      	b.n	8003382 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800337a:	f023 0303 	bic.w	r3, r3, #3
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003386:	4618      	mov	r0, r3
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	aaaaaaab 	.word	0xaaaaaaab
 8003398:	08009124 	.word	0x08009124

0800339c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033a4:	2300      	movs	r3, #0
 80033a6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033ac:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	699b      	ldr	r3, [r3, #24]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d11f      	bne.n	80033f6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b03      	cmp	r3, #3
 80033ba:	d856      	bhi.n	800346a <DMA_CheckFifoParam+0xce>
 80033bc:	a201      	add	r2, pc, #4	@ (adr r2, 80033c4 <DMA_CheckFifoParam+0x28>)
 80033be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c2:	bf00      	nop
 80033c4:	080033d5 	.word	0x080033d5
 80033c8:	080033e7 	.word	0x080033e7
 80033cc:	080033d5 	.word	0x080033d5
 80033d0:	0800346b 	.word	0x0800346b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d046      	beq.n	800346e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033e4:	e043      	b.n	800346e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80033ee:	d140      	bne.n	8003472 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80033f4:	e03d      	b.n	8003472 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	699b      	ldr	r3, [r3, #24]
 80033fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033fe:	d121      	bne.n	8003444 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	2b03      	cmp	r3, #3
 8003404:	d837      	bhi.n	8003476 <DMA_CheckFifoParam+0xda>
 8003406:	a201      	add	r2, pc, #4	@ (adr r2, 800340c <DMA_CheckFifoParam+0x70>)
 8003408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800340c:	0800341d 	.word	0x0800341d
 8003410:	08003423 	.word	0x08003423
 8003414:	0800341d 	.word	0x0800341d
 8003418:	08003435 	.word	0x08003435
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	73fb      	strb	r3, [r7, #15]
      break;
 8003420:	e030      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003426:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d025      	beq.n	800347a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800342e:	2301      	movs	r3, #1
 8003430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003432:	e022      	b.n	800347a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003438:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800343c:	d11f      	bne.n	800347e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003442:	e01c      	b.n	800347e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	2b02      	cmp	r3, #2
 8003448:	d903      	bls.n	8003452 <DMA_CheckFifoParam+0xb6>
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	2b03      	cmp	r3, #3
 800344e:	d003      	beq.n	8003458 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003450:	e018      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	73fb      	strb	r3, [r7, #15]
      break;
 8003456:	e015      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00e      	beq.n	8003482 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	e00b      	b.n	8003482 <DMA_CheckFifoParam+0xe6>
      break;
 800346a:	bf00      	nop
 800346c:	e00a      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      break;
 800346e:	bf00      	nop
 8003470:	e008      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      break;
 8003472:	bf00      	nop
 8003474:	e006      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      break;
 8003476:	bf00      	nop
 8003478:	e004      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      break;
 800347a:	bf00      	nop
 800347c:	e002      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      break;   
 800347e:	bf00      	nop
 8003480:	e000      	b.n	8003484 <DMA_CheckFifoParam+0xe8>
      break;
 8003482:	bf00      	nop
    }
  } 
  
  return status; 
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3714      	adds	r7, #20
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop

08003494 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003494:	b480      	push	{r7}
 8003496:	b089      	sub	sp, #36	@ 0x24
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800349e:	2300      	movs	r3, #0
 80034a0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034a2:	2300      	movs	r3, #0
 80034a4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034a6:	2300      	movs	r3, #0
 80034a8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
 80034ae:	e16b      	b.n	8003788 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034b0:	2201      	movs	r2, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	697a      	ldr	r2, [r7, #20]
 80034c0:	4013      	ands	r3, r2
 80034c2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034c4:	693a      	ldr	r2, [r7, #16]
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	f040 815a 	bne.w	8003782 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d005      	beq.n	80034e6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034e2:	2b02      	cmp	r3, #2
 80034e4:	d130      	bne.n	8003548 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	fa02 f303 	lsl.w	r3, r2, r3
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68da      	ldr	r2, [r3, #12]
 8003502:	69fb      	ldr	r3, [r7, #28]
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	fa02 f303 	lsl.w	r3, r2, r3
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	4313      	orrs	r3, r2
 800350e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800351c:	2201      	movs	r2, #1
 800351e:	69fb      	ldr	r3, [r7, #28]
 8003520:	fa02 f303 	lsl.w	r3, r2, r3
 8003524:	43db      	mvns	r3, r3
 8003526:	69ba      	ldr	r2, [r7, #24]
 8003528:	4013      	ands	r3, r2
 800352a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	091b      	lsrs	r3, r3, #4
 8003532:	f003 0201 	and.w	r2, r3, #1
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	fa02 f303 	lsl.w	r3, r2, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4313      	orrs	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	69ba      	ldr	r2, [r7, #24]
 8003546:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0303 	and.w	r3, r3, #3
 8003550:	2b03      	cmp	r3, #3
 8003552:	d017      	beq.n	8003584 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	689a      	ldr	r2, [r3, #8]
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	005b      	lsls	r3, r3, #1
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b02      	cmp	r3, #2
 800358e:	d123      	bne.n	80035d8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	08da      	lsrs	r2, r3, #3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	3208      	adds	r2, #8
 8003598:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800359c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	f003 0307 	and.w	r3, r3, #7
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	220f      	movs	r2, #15
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	691a      	ldr	r2, [r3, #16]
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f003 0307 	and.w	r3, r3, #7
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	fa02 f303 	lsl.w	r3, r2, r3
 80035c4:	69ba      	ldr	r2, [r7, #24]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035ca:	69fb      	ldr	r3, [r7, #28]
 80035cc:	08da      	lsrs	r2, r3, #3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3208      	adds	r2, #8
 80035d2:	69b9      	ldr	r1, [r7, #24]
 80035d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	2203      	movs	r2, #3
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f003 0203 	and.w	r2, r3, #3
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	005b      	lsls	r3, r3, #1
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	69ba      	ldr	r2, [r7, #24]
 800360a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003614:	2b00      	cmp	r3, #0
 8003616:	f000 80b4 	beq.w	8003782 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	60fb      	str	r3, [r7, #12]
 800361e:	4b60      	ldr	r3, [pc, #384]	@ (80037a0 <HAL_GPIO_Init+0x30c>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003622:	4a5f      	ldr	r2, [pc, #380]	@ (80037a0 <HAL_GPIO_Init+0x30c>)
 8003624:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003628:	6453      	str	r3, [r2, #68]	@ 0x44
 800362a:	4b5d      	ldr	r3, [pc, #372]	@ (80037a0 <HAL_GPIO_Init+0x30c>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800362e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003632:	60fb      	str	r3, [r7, #12]
 8003634:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003636:	4a5b      	ldr	r2, [pc, #364]	@ (80037a4 <HAL_GPIO_Init+0x310>)
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	089b      	lsrs	r3, r3, #2
 800363c:	3302      	adds	r3, #2
 800363e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003642:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	f003 0303 	and.w	r3, r3, #3
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	220f      	movs	r2, #15
 800364e:	fa02 f303 	lsl.w	r3, r2, r3
 8003652:	43db      	mvns	r3, r3
 8003654:	69ba      	ldr	r2, [r7, #24]
 8003656:	4013      	ands	r3, r2
 8003658:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a52      	ldr	r2, [pc, #328]	@ (80037a8 <HAL_GPIO_Init+0x314>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d02b      	beq.n	80036ba <HAL_GPIO_Init+0x226>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a51      	ldr	r2, [pc, #324]	@ (80037ac <HAL_GPIO_Init+0x318>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d025      	beq.n	80036b6 <HAL_GPIO_Init+0x222>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a50      	ldr	r2, [pc, #320]	@ (80037b0 <HAL_GPIO_Init+0x31c>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d01f      	beq.n	80036b2 <HAL_GPIO_Init+0x21e>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a4f      	ldr	r2, [pc, #316]	@ (80037b4 <HAL_GPIO_Init+0x320>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d019      	beq.n	80036ae <HAL_GPIO_Init+0x21a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a4e      	ldr	r2, [pc, #312]	@ (80037b8 <HAL_GPIO_Init+0x324>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d013      	beq.n	80036aa <HAL_GPIO_Init+0x216>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a4d      	ldr	r2, [pc, #308]	@ (80037bc <HAL_GPIO_Init+0x328>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d00d      	beq.n	80036a6 <HAL_GPIO_Init+0x212>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a4c      	ldr	r2, [pc, #304]	@ (80037c0 <HAL_GPIO_Init+0x32c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d007      	beq.n	80036a2 <HAL_GPIO_Init+0x20e>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a4b      	ldr	r2, [pc, #300]	@ (80037c4 <HAL_GPIO_Init+0x330>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d101      	bne.n	800369e <HAL_GPIO_Init+0x20a>
 800369a:	2307      	movs	r3, #7
 800369c:	e00e      	b.n	80036bc <HAL_GPIO_Init+0x228>
 800369e:	2308      	movs	r3, #8
 80036a0:	e00c      	b.n	80036bc <HAL_GPIO_Init+0x228>
 80036a2:	2306      	movs	r3, #6
 80036a4:	e00a      	b.n	80036bc <HAL_GPIO_Init+0x228>
 80036a6:	2305      	movs	r3, #5
 80036a8:	e008      	b.n	80036bc <HAL_GPIO_Init+0x228>
 80036aa:	2304      	movs	r3, #4
 80036ac:	e006      	b.n	80036bc <HAL_GPIO_Init+0x228>
 80036ae:	2303      	movs	r3, #3
 80036b0:	e004      	b.n	80036bc <HAL_GPIO_Init+0x228>
 80036b2:	2302      	movs	r3, #2
 80036b4:	e002      	b.n	80036bc <HAL_GPIO_Init+0x228>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <HAL_GPIO_Init+0x228>
 80036ba:	2300      	movs	r3, #0
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	f002 0203 	and.w	r2, r2, #3
 80036c2:	0092      	lsls	r2, r2, #2
 80036c4:	4093      	lsls	r3, r2
 80036c6:	69ba      	ldr	r2, [r7, #24]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036cc:	4935      	ldr	r1, [pc, #212]	@ (80037a4 <HAL_GPIO_Init+0x310>)
 80036ce:	69fb      	ldr	r3, [r7, #28]
 80036d0:	089b      	lsrs	r3, r3, #2
 80036d2:	3302      	adds	r3, #2
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036da:	4b3b      	ldr	r3, [pc, #236]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	43db      	mvns	r3, r3
 80036e4:	69ba      	ldr	r2, [r7, #24]
 80036e6:	4013      	ands	r3, r2
 80036e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d003      	beq.n	80036fe <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	4313      	orrs	r3, r2
 80036fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80036fe:	4a32      	ldr	r2, [pc, #200]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 8003700:	69bb      	ldr	r3, [r7, #24]
 8003702:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003704:	4b30      	ldr	r3, [pc, #192]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 8003706:	68db      	ldr	r3, [r3, #12]
 8003708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	43db      	mvns	r3, r3
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	4013      	ands	r3, r2
 8003712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d003      	beq.n	8003728 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003720:	69ba      	ldr	r2, [r7, #24]
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	4313      	orrs	r3, r2
 8003726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003728:	4a27      	ldr	r2, [pc, #156]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800372e:	4b26      	ldr	r3, [pc, #152]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 8003730:	685b      	ldr	r3, [r3, #4]
 8003732:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	43db      	mvns	r3, r3
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	4013      	ands	r3, r2
 800373c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003746:	2b00      	cmp	r3, #0
 8003748:	d003      	beq.n	8003752 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800374a:	69ba      	ldr	r2, [r7, #24]
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	4313      	orrs	r3, r2
 8003750:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003752:	4a1d      	ldr	r2, [pc, #116]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 8003754:	69bb      	ldr	r3, [r7, #24]
 8003756:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003758:	4b1b      	ldr	r3, [pc, #108]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	43db      	mvns	r3, r3
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	4013      	ands	r3, r2
 8003766:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003770:	2b00      	cmp	r3, #0
 8003772:	d003      	beq.n	800377c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003774:	69ba      	ldr	r2, [r7, #24]
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	4313      	orrs	r3, r2
 800377a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800377c:	4a12      	ldr	r2, [pc, #72]	@ (80037c8 <HAL_GPIO_Init+0x334>)
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	3301      	adds	r3, #1
 8003786:	61fb      	str	r3, [r7, #28]
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	2b0f      	cmp	r3, #15
 800378c:	f67f ae90 	bls.w	80034b0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003790:	bf00      	nop
 8003792:	bf00      	nop
 8003794:	3724      	adds	r7, #36	@ 0x24
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	40023800 	.word	0x40023800
 80037a4:	40013800 	.word	0x40013800
 80037a8:	40020000 	.word	0x40020000
 80037ac:	40020400 	.word	0x40020400
 80037b0:	40020800 	.word	0x40020800
 80037b4:	40020c00 	.word	0x40020c00
 80037b8:	40021000 	.word	0x40021000
 80037bc:	40021400 	.word	0x40021400
 80037c0:	40021800 	.word	0x40021800
 80037c4:	40021c00 	.word	0x40021c00
 80037c8:	40013c00 	.word	0x40013c00

080037cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	807b      	strh	r3, [r7, #2]
 80037d8:	4613      	mov	r3, r2
 80037da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037dc:	787b      	ldrb	r3, [r7, #1]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d003      	beq.n	80037ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037e2:	887a      	ldrh	r2, [r7, #2]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037e8:	e003      	b.n	80037f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037ea:	887b      	ldrh	r3, [r7, #2]
 80037ec:	041a      	lsls	r2, r3, #16
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	619a      	str	r2, [r3, #24]
}
 80037f2:	bf00      	nop
 80037f4:	370c      	adds	r7, #12
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
	...

08003800 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	4603      	mov	r3, r0
 8003808:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800380a:	4b08      	ldr	r3, [pc, #32]	@ (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800380c:	695a      	ldr	r2, [r3, #20]
 800380e:	88fb      	ldrh	r3, [r7, #6]
 8003810:	4013      	ands	r3, r2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d006      	beq.n	8003824 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003816:	4a05      	ldr	r2, [pc, #20]	@ (800382c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003818:	88fb      	ldrh	r3, [r7, #6]
 800381a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800381c:	88fb      	ldrh	r3, [r7, #6]
 800381e:	4618      	mov	r0, r3
 8003820:	f000 f806 	bl	8003830 <HAL_GPIO_EXTI_Callback>
  }
}
 8003824:	bf00      	nop
 8003826:	3708      	adds	r7, #8
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}
 800382c:	40013c00 	.word	0x40013c00

08003830 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	4603      	mov	r3, r0
 8003838:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800383a:	bf00      	nop
 800383c:	370c      	adds	r7, #12
 800383e:	46bd      	mov	sp, r7
 8003840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003844:	4770      	bx	lr
	...

08003848 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e12b      	b.n	8003ab2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d106      	bne.n	8003874 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7fe f8c6 	bl	8001a00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	2224      	movs	r2, #36	@ 0x24
 8003878:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	681a      	ldr	r2, [r3, #0]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0201 	bic.w	r2, r2, #1
 800388a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	681a      	ldr	r2, [r3, #0]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800389a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80038aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038ac:	f000 fd4c 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 80038b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	4a81      	ldr	r2, [pc, #516]	@ (8003abc <HAL_I2C_Init+0x274>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d807      	bhi.n	80038cc <HAL_I2C_Init+0x84>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4a80      	ldr	r2, [pc, #512]	@ (8003ac0 <HAL_I2C_Init+0x278>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	bf94      	ite	ls
 80038c4:	2301      	movls	r3, #1
 80038c6:	2300      	movhi	r3, #0
 80038c8:	b2db      	uxtb	r3, r3
 80038ca:	e006      	b.n	80038da <HAL_I2C_Init+0x92>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	4a7d      	ldr	r2, [pc, #500]	@ (8003ac4 <HAL_I2C_Init+0x27c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	bf94      	ite	ls
 80038d4:	2301      	movls	r3, #1
 80038d6:	2300      	movhi	r3, #0
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e0e7      	b.n	8003ab2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4a78      	ldr	r2, [pc, #480]	@ (8003ac8 <HAL_I2C_Init+0x280>)
 80038e6:	fba2 2303 	umull	r2, r3, r2, r3
 80038ea:	0c9b      	lsrs	r3, r3, #18
 80038ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	430a      	orrs	r2, r1
 8003900:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6a1b      	ldr	r3, [r3, #32]
 8003908:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	4a6a      	ldr	r2, [pc, #424]	@ (8003abc <HAL_I2C_Init+0x274>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d802      	bhi.n	800391c <HAL_I2C_Init+0xd4>
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	3301      	adds	r3, #1
 800391a:	e009      	b.n	8003930 <HAL_I2C_Init+0xe8>
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003922:	fb02 f303 	mul.w	r3, r2, r3
 8003926:	4a69      	ldr	r2, [pc, #420]	@ (8003acc <HAL_I2C_Init+0x284>)
 8003928:	fba2 2303 	umull	r2, r3, r2, r3
 800392c:	099b      	lsrs	r3, r3, #6
 800392e:	3301      	adds	r3, #1
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	6812      	ldr	r2, [r2, #0]
 8003934:	430b      	orrs	r3, r1
 8003936:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	69db      	ldr	r3, [r3, #28]
 800393e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003942:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	495c      	ldr	r1, [pc, #368]	@ (8003abc <HAL_I2C_Init+0x274>)
 800394c:	428b      	cmp	r3, r1
 800394e:	d819      	bhi.n	8003984 <HAL_I2C_Init+0x13c>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e59      	subs	r1, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	005b      	lsls	r3, r3, #1
 800395a:	fbb1 f3f3 	udiv	r3, r1, r3
 800395e:	1c59      	adds	r1, r3, #1
 8003960:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003964:	400b      	ands	r3, r1
 8003966:	2b00      	cmp	r3, #0
 8003968:	d00a      	beq.n	8003980 <HAL_I2C_Init+0x138>
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1e59      	subs	r1, r3, #1
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	fbb1 f3f3 	udiv	r3, r1, r3
 8003978:	3301      	adds	r3, #1
 800397a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800397e:	e051      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003980:	2304      	movs	r3, #4
 8003982:	e04f      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d111      	bne.n	80039b0 <HAL_I2C_Init+0x168>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	440b      	add	r3, r1
 800399a:	fbb0 f3f3 	udiv	r3, r0, r3
 800399e:	3301      	adds	r3, #1
 80039a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf0c      	ite	eq
 80039a8:	2301      	moveq	r3, #1
 80039aa:	2300      	movne	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	e012      	b.n	80039d6 <HAL_I2C_Init+0x18e>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	1e58      	subs	r0, r3, #1
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6859      	ldr	r1, [r3, #4]
 80039b8:	460b      	mov	r3, r1
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	0099      	lsls	r1, r3, #2
 80039c0:	440b      	add	r3, r1
 80039c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039c6:	3301      	adds	r3, #1
 80039c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	bf0c      	ite	eq
 80039d0:	2301      	moveq	r3, #1
 80039d2:	2300      	movne	r3, #0
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d001      	beq.n	80039de <HAL_I2C_Init+0x196>
 80039da:	2301      	movs	r3, #1
 80039dc:	e022      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10e      	bne.n	8003a04 <HAL_I2C_Init+0x1bc>
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	1e58      	subs	r0, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6859      	ldr	r1, [r3, #4]
 80039ee:	460b      	mov	r3, r1
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	440b      	add	r3, r1
 80039f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003a02:	e00f      	b.n	8003a24 <HAL_I2C_Init+0x1dc>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	1e58      	subs	r0, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6859      	ldr	r1, [r3, #4]
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	009b      	lsls	r3, r3, #2
 8003a10:	440b      	add	r3, r1
 8003a12:	0099      	lsls	r1, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a1a:	3301      	adds	r3, #1
 8003a1c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a20:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	6809      	ldr	r1, [r1, #0]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	69da      	ldr	r2, [r3, #28]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6a1b      	ldr	r3, [r3, #32]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6911      	ldr	r1, [r2, #16]
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	4311      	orrs	r1, r2
 8003a60:	687a      	ldr	r2, [r7, #4]
 8003a62:	6812      	ldr	r2, [r2, #0]
 8003a64:	430b      	orrs	r3, r1
 8003a66:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	695a      	ldr	r2, [r3, #20]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	431a      	orrs	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f042 0201 	orr.w	r2, r2, #1
 8003a92:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2200      	movs	r2, #0
 8003a98:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2220      	movs	r2, #32
 8003a9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2200      	movs	r2, #0
 8003aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3710      	adds	r7, #16
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	000186a0 	.word	0x000186a0
 8003ac0:	001e847f 	.word	0x001e847f
 8003ac4:	003d08ff 	.word	0x003d08ff
 8003ac8:	431bde83 	.word	0x431bde83
 8003acc:	10624dd3 	.word	0x10624dd3

08003ad0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b086      	sub	sp, #24
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d101      	bne.n	8003ae2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	e267      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0301 	and.w	r3, r3, #1
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d075      	beq.n	8003bda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aee:	4b88      	ldr	r3, [pc, #544]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 030c 	and.w	r3, r3, #12
 8003af6:	2b04      	cmp	r3, #4
 8003af8:	d00c      	beq.n	8003b14 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003afa:	4b85      	ldr	r3, [pc, #532]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b02:	2b08      	cmp	r3, #8
 8003b04:	d112      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b06:	4b82      	ldr	r3, [pc, #520]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b12:	d10b      	bne.n	8003b2c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b14:	4b7e      	ldr	r3, [pc, #504]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d05b      	beq.n	8003bd8 <HAL_RCC_OscConfig+0x108>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d157      	bne.n	8003bd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	e242      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b34:	d106      	bne.n	8003b44 <HAL_RCC_OscConfig+0x74>
 8003b36:	4b76      	ldr	r3, [pc, #472]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a75      	ldr	r2, [pc, #468]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b40:	6013      	str	r3, [r2, #0]
 8003b42:	e01d      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b4c:	d10c      	bne.n	8003b68 <HAL_RCC_OscConfig+0x98>
 8003b4e:	4b70      	ldr	r3, [pc, #448]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a6f      	ldr	r2, [pc, #444]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b58:	6013      	str	r3, [r2, #0]
 8003b5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b64:	6013      	str	r3, [r2, #0]
 8003b66:	e00b      	b.n	8003b80 <HAL_RCC_OscConfig+0xb0>
 8003b68:	4b69      	ldr	r3, [pc, #420]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a68      	ldr	r2, [pc, #416]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b72:	6013      	str	r3, [r2, #0]
 8003b74:	4b66      	ldr	r3, [pc, #408]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a65      	ldr	r2, [pc, #404]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003b7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d013      	beq.n	8003bb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b88:	f7fe fcb6 	bl	80024f8 <HAL_GetTick>
 8003b8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b8e:	e008      	b.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b90:	f7fe fcb2 	bl	80024f8 <HAL_GetTick>
 8003b94:	4602      	mov	r2, r0
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	2b64      	cmp	r3, #100	@ 0x64
 8003b9c:	d901      	bls.n	8003ba2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b9e:	2303      	movs	r3, #3
 8003ba0:	e207      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ba2:	4b5b      	ldr	r3, [pc, #364]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d0f0      	beq.n	8003b90 <HAL_RCC_OscConfig+0xc0>
 8003bae:	e014      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bb0:	f7fe fca2 	bl	80024f8 <HAL_GetTick>
 8003bb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bb6:	e008      	b.n	8003bca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bb8:	f7fe fc9e 	bl	80024f8 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	2b64      	cmp	r3, #100	@ 0x64
 8003bc4:	d901      	bls.n	8003bca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	e1f3      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003bca:	4b51      	ldr	r3, [pc, #324]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1f0      	bne.n	8003bb8 <HAL_RCC_OscConfig+0xe8>
 8003bd6:	e000      	b.n	8003bda <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d063      	beq.n	8003cae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003be6:	4b4a      	ldr	r3, [pc, #296]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d00b      	beq.n	8003c0a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bf2:	4b47      	ldr	r3, [pc, #284]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d11c      	bne.n	8003c38 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bfe:	4b44      	ldr	r3, [pc, #272]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d116      	bne.n	8003c38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c0a:	4b41      	ldr	r3, [pc, #260]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0302 	and.w	r3, r3, #2
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d005      	beq.n	8003c22 <HAL_RCC_OscConfig+0x152>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d001      	beq.n	8003c22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c1e:	2301      	movs	r3, #1
 8003c20:	e1c7      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c22:	4b3b      	ldr	r3, [pc, #236]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	00db      	lsls	r3, r3, #3
 8003c30:	4937      	ldr	r1, [pc, #220]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c36:	e03a      	b.n	8003cae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d020      	beq.n	8003c82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c40:	4b34      	ldr	r3, [pc, #208]	@ (8003d14 <HAL_RCC_OscConfig+0x244>)
 8003c42:	2201      	movs	r2, #1
 8003c44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c46:	f7fe fc57 	bl	80024f8 <HAL_GetTick>
 8003c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c4c:	e008      	b.n	8003c60 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c4e:	f7fe fc53 	bl	80024f8 <HAL_GetTick>
 8003c52:	4602      	mov	r2, r0
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d901      	bls.n	8003c60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e1a8      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c60:	4b2b      	ldr	r3, [pc, #172]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f003 0302 	and.w	r3, r3, #2
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0f0      	beq.n	8003c4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c6c:	4b28      	ldr	r3, [pc, #160]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	691b      	ldr	r3, [r3, #16]
 8003c78:	00db      	lsls	r3, r3, #3
 8003c7a:	4925      	ldr	r1, [pc, #148]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	600b      	str	r3, [r1, #0]
 8003c80:	e015      	b.n	8003cae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c82:	4b24      	ldr	r3, [pc, #144]	@ (8003d14 <HAL_RCC_OscConfig+0x244>)
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe fc36 	bl	80024f8 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c90:	f7fe fc32 	bl	80024f8 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b02      	cmp	r3, #2
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e187      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d1f0      	bne.n	8003c90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d036      	beq.n	8003d28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	695b      	ldr	r3, [r3, #20]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d016      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003cc2:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <HAL_RCC_OscConfig+0x248>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cc8:	f7fe fc16 	bl	80024f8 <HAL_GetTick>
 8003ccc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003cce:	e008      	b.n	8003ce2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cd0:	f7fe fc12 	bl	80024f8 <HAL_GetTick>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	2b02      	cmp	r3, #2
 8003cdc:	d901      	bls.n	8003ce2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e167      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8003d10 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d0f0      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x200>
 8003cee:	e01b      	b.n	8003d28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cf0:	4b09      	ldr	r3, [pc, #36]	@ (8003d18 <HAL_RCC_OscConfig+0x248>)
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cf6:	f7fe fbff 	bl	80024f8 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cfc:	e00e      	b.n	8003d1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003cfe:	f7fe fbfb 	bl	80024f8 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d907      	bls.n	8003d1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e150      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
 8003d10:	40023800 	.word	0x40023800
 8003d14:	42470000 	.word	0x42470000
 8003d18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d1c:	4b88      	ldr	r3, [pc, #544]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1ea      	bne.n	8003cfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8097 	beq.w	8003e64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d36:	2300      	movs	r3, #0
 8003d38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d3a:	4b81      	ldr	r3, [pc, #516]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d10f      	bne.n	8003d66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	60bb      	str	r3, [r7, #8]
 8003d4a:	4b7d      	ldr	r3, [pc, #500]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d4e:	4a7c      	ldr	r2, [pc, #496]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d54:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d56:	4b7a      	ldr	r3, [pc, #488]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003d58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d5e:	60bb      	str	r3, [r7, #8]
 8003d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d62:	2301      	movs	r3, #1
 8003d64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d66:	4b77      	ldr	r3, [pc, #476]	@ (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d118      	bne.n	8003da4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d72:	4b74      	ldr	r3, [pc, #464]	@ (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a73      	ldr	r2, [pc, #460]	@ (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d7e:	f7fe fbbb 	bl	80024f8 <HAL_GetTick>
 8003d82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d84:	e008      	b.n	8003d98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d86:	f7fe fbb7 	bl	80024f8 <HAL_GetTick>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	693b      	ldr	r3, [r7, #16]
 8003d8e:	1ad3      	subs	r3, r2, r3
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d901      	bls.n	8003d98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e10c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d98:	4b6a      	ldr	r3, [pc, #424]	@ (8003f44 <HAL_RCC_OscConfig+0x474>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d0f0      	beq.n	8003d86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	2b01      	cmp	r3, #1
 8003daa:	d106      	bne.n	8003dba <HAL_RCC_OscConfig+0x2ea>
 8003dac:	4b64      	ldr	r3, [pc, #400]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db0:	4a63      	ldr	r2, [pc, #396]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003db2:	f043 0301 	orr.w	r3, r3, #1
 8003db6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db8:	e01c      	b.n	8003df4 <HAL_RCC_OscConfig+0x324>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	d10c      	bne.n	8003ddc <HAL_RCC_OscConfig+0x30c>
 8003dc2:	4b5f      	ldr	r3, [pc, #380]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dc6:	4a5e      	ldr	r2, [pc, #376]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dc8:	f043 0304 	orr.w	r3, r3, #4
 8003dcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dce:	4b5c      	ldr	r3, [pc, #368]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dd2:	4a5b      	ldr	r2, [pc, #364]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dd4:	f043 0301 	orr.w	r3, r3, #1
 8003dd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8003dda:	e00b      	b.n	8003df4 <HAL_RCC_OscConfig+0x324>
 8003ddc:	4b58      	ldr	r3, [pc, #352]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de0:	4a57      	ldr	r2, [pc, #348]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003de2:	f023 0301 	bic.w	r3, r3, #1
 8003de6:	6713      	str	r3, [r2, #112]	@ 0x70
 8003de8:	4b55      	ldr	r3, [pc, #340]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003dec:	4a54      	ldr	r2, [pc, #336]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003dee:	f023 0304 	bic.w	r3, r3, #4
 8003df2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d015      	beq.n	8003e28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dfc:	f7fe fb7c 	bl	80024f8 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e02:	e00a      	b.n	8003e1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e04:	f7fe fb78 	bl	80024f8 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d901      	bls.n	8003e1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e16:	2303      	movs	r3, #3
 8003e18:	e0cb      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e1a:	4b49      	ldr	r3, [pc, #292]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d0ee      	beq.n	8003e04 <HAL_RCC_OscConfig+0x334>
 8003e26:	e014      	b.n	8003e52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e28:	f7fe fb66 	bl	80024f8 <HAL_GetTick>
 8003e2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e2e:	e00a      	b.n	8003e46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e30:	f7fe fb62 	bl	80024f8 <HAL_GetTick>
 8003e34:	4602      	mov	r2, r0
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e0b5      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e46:	4b3e      	ldr	r3, [pc, #248]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e4a:	f003 0302 	and.w	r3, r3, #2
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d1ee      	bne.n	8003e30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003e52:	7dfb      	ldrb	r3, [r7, #23]
 8003e54:	2b01      	cmp	r3, #1
 8003e56:	d105      	bne.n	8003e64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e58:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e5c:	4a38      	ldr	r2, [pc, #224]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80a1 	beq.w	8003fb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e6e:	4b34      	ldr	r3, [pc, #208]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 030c 	and.w	r3, r3, #12
 8003e76:	2b08      	cmp	r3, #8
 8003e78:	d05c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	699b      	ldr	r3, [r3, #24]
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d141      	bne.n	8003f06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b31      	ldr	r3, [pc, #196]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003e84:	2200      	movs	r2, #0
 8003e86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e88:	f7fe fb36 	bl	80024f8 <HAL_GetTick>
 8003e8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e90:	f7fe fb32 	bl	80024f8 <HAL_GetTick>
 8003e94:	4602      	mov	r2, r0
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b02      	cmp	r3, #2
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e087      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ea2:	4b27      	ldr	r3, [pc, #156]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1f0      	bne.n	8003e90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	69da      	ldr	r2, [r3, #28]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	431a      	orrs	r2, r3
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ebc:	019b      	lsls	r3, r3, #6
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec4:	085b      	lsrs	r3, r3, #1
 8003ec6:	3b01      	subs	r3, #1
 8003ec8:	041b      	lsls	r3, r3, #16
 8003eca:	431a      	orrs	r2, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ed0:	061b      	lsls	r3, r3, #24
 8003ed2:	491b      	ldr	r1, [pc, #108]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ed8:	4b1b      	ldr	r3, [pc, #108]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003eda:	2201      	movs	r2, #1
 8003edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ede:	f7fe fb0b 	bl	80024f8 <HAL_GetTick>
 8003ee2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ee4:	e008      	b.n	8003ef8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee6:	f7fe fb07 	bl	80024f8 <HAL_GetTick>
 8003eea:	4602      	mov	r2, r0
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d901      	bls.n	8003ef8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ef4:	2303      	movs	r3, #3
 8003ef6:	e05c      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ef8:	4b11      	ldr	r3, [pc, #68]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d0f0      	beq.n	8003ee6 <HAL_RCC_OscConfig+0x416>
 8003f04:	e054      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f06:	4b10      	ldr	r3, [pc, #64]	@ (8003f48 <HAL_RCC_OscConfig+0x478>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe faf4 	bl	80024f8 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f14:	f7fe faf0 	bl	80024f8 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e045      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f26:	4b06      	ldr	r3, [pc, #24]	@ (8003f40 <HAL_RCC_OscConfig+0x470>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x444>
 8003f32:	e03d      	b.n	8003fb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d107      	bne.n	8003f4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e038      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40007000 	.word	0x40007000
 8003f48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f4c:	4b1b      	ldr	r3, [pc, #108]	@ (8003fbc <HAL_RCC_OscConfig+0x4ec>)
 8003f4e:	685b      	ldr	r3, [r3, #4]
 8003f50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	699b      	ldr	r3, [r3, #24]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d028      	beq.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d121      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d11a      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d111      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f92:	085b      	lsrs	r3, r3, #1
 8003f94:	3b01      	subs	r3, #1
 8003f96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d107      	bne.n	8003fac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d001      	beq.n	8003fb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003fac:	2301      	movs	r3, #1
 8003fae:	e000      	b.n	8003fb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003fb0:	2300      	movs	r3, #0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	3718      	adds	r7, #24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd80      	pop	{r7, pc}
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800

08003fc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b084      	sub	sp, #16
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d101      	bne.n	8003fd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e0cc      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003fd4:	4b68      	ldr	r3, [pc, #416]	@ (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f003 0307 	and.w	r3, r3, #7
 8003fdc:	683a      	ldr	r2, [r7, #0]
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d90c      	bls.n	8003ffc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fe2:	4b65      	ldr	r3, [pc, #404]	@ (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fea:	4b63      	ldr	r3, [pc, #396]	@ (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0307 	and.w	r3, r3, #7
 8003ff2:	683a      	ldr	r2, [r7, #0]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d001      	beq.n	8003ffc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0b8      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d020      	beq.n	800404a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f003 0304 	and.w	r3, r3, #4
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004014:	4b59      	ldr	r3, [pc, #356]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	4a58      	ldr	r2, [pc, #352]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800401e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f003 0308 	and.w	r3, r3, #8
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800402c:	4b53      	ldr	r3, [pc, #332]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800402e:	689b      	ldr	r3, [r3, #8]
 8004030:	4a52      	ldr	r2, [pc, #328]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004036:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004038:	4b50      	ldr	r3, [pc, #320]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	494d      	ldr	r1, [pc, #308]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d044      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	2b01      	cmp	r3, #1
 800405c:	d107      	bne.n	800406e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800405e:	4b47      	ldr	r3, [pc, #284]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d119      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e07f      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d003      	beq.n	800407e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800407a:	2b03      	cmp	r3, #3
 800407c:	d107      	bne.n	800408e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800407e:	4b3f      	ldr	r3, [pc, #252]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d109      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e06f      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800408e:	4b3b      	ldr	r3, [pc, #236]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b00      	cmp	r3, #0
 8004098:	d101      	bne.n	800409e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e067      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800409e:	4b37      	ldr	r3, [pc, #220]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f023 0203 	bic.w	r2, r3, #3
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	4934      	ldr	r1, [pc, #208]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 80040ac:	4313      	orrs	r3, r2
 80040ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80040b0:	f7fe fa22 	bl	80024f8 <HAL_GetTick>
 80040b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040b6:	e00a      	b.n	80040ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040b8:	f7fe fa1e 	bl	80024f8 <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d901      	bls.n	80040ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80040ca:	2303      	movs	r3, #3
 80040cc:	e04f      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ce:	4b2b      	ldr	r3, [pc, #172]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f003 020c 	and.w	r2, r3, #12
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1eb      	bne.n	80040b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80040e0:	4b25      	ldr	r3, [pc, #148]	@ (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d20c      	bcs.n	8004108 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ee:	4b22      	ldr	r3, [pc, #136]	@ (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 80040f0:	683a      	ldr	r2, [r7, #0]
 80040f2:	b2d2      	uxtb	r2, r2
 80040f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040f6:	4b20      	ldr	r3, [pc, #128]	@ (8004178 <HAL_RCC_ClockConfig+0x1b8>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0307 	and.w	r3, r3, #7
 80040fe:	683a      	ldr	r2, [r7, #0]
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e032      	b.n	800416e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0304 	and.w	r3, r3, #4
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004114:	4b19      	ldr	r3, [pc, #100]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	4916      	ldr	r1, [pc, #88]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004122:	4313      	orrs	r3, r2
 8004124:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d009      	beq.n	8004146 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004132:	4b12      	ldr	r3, [pc, #72]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004134:	689b      	ldr	r3, [r3, #8]
 8004136:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	691b      	ldr	r3, [r3, #16]
 800413e:	00db      	lsls	r3, r3, #3
 8004140:	490e      	ldr	r1, [pc, #56]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 8004142:	4313      	orrs	r3, r2
 8004144:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004146:	f000 f82d 	bl	80041a4 <HAL_RCC_GetSysClockFreq>
 800414a:	4602      	mov	r2, r0
 800414c:	4b0b      	ldr	r3, [pc, #44]	@ (800417c <HAL_RCC_ClockConfig+0x1bc>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	091b      	lsrs	r3, r3, #4
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	490a      	ldr	r1, [pc, #40]	@ (8004180 <HAL_RCC_ClockConfig+0x1c0>)
 8004158:	5ccb      	ldrb	r3, [r1, r3]
 800415a:	fa22 f303 	lsr.w	r3, r2, r3
 800415e:	4a09      	ldr	r2, [pc, #36]	@ (8004184 <HAL_RCC_ClockConfig+0x1c4>)
 8004160:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004162:	4b09      	ldr	r3, [pc, #36]	@ (8004188 <HAL_RCC_ClockConfig+0x1c8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4618      	mov	r0, r3
 8004168:	f7fe f982 	bl	8002470 <HAL_InitTick>

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3710      	adds	r7, #16
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
 8004176:	bf00      	nop
 8004178:	40023c00 	.word	0x40023c00
 800417c:	40023800 	.word	0x40023800
 8004180:	0800910c 	.word	0x0800910c
 8004184:	20000000 	.word	0x20000000
 8004188:	20000004 	.word	0x20000004

0800418c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800418c:	b480      	push	{r7}
 800418e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004190:	4b03      	ldr	r3, [pc, #12]	@ (80041a0 <HAL_RCC_EnableCSS+0x14>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]
}
 8004196:	bf00      	nop
 8004198:	46bd      	mov	sp, r7
 800419a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419e:	4770      	bx	lr
 80041a0:	4247004c 	.word	0x4247004c

080041a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041a8:	b090      	sub	sp, #64	@ 0x40
 80041aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041ac:	2300      	movs	r3, #0
 80041ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80041b0:	2300      	movs	r3, #0
 80041b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80041b4:	2300      	movs	r3, #0
 80041b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80041b8:	2300      	movs	r3, #0
 80041ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041bc:	4b59      	ldr	r3, [pc, #356]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x180>)
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f003 030c 	and.w	r3, r3, #12
 80041c4:	2b08      	cmp	r3, #8
 80041c6:	d00d      	beq.n	80041e4 <HAL_RCC_GetSysClockFreq+0x40>
 80041c8:	2b08      	cmp	r3, #8
 80041ca:	f200 80a1 	bhi.w	8004310 <HAL_RCC_GetSysClockFreq+0x16c>
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d002      	beq.n	80041d8 <HAL_RCC_GetSysClockFreq+0x34>
 80041d2:	2b04      	cmp	r3, #4
 80041d4:	d003      	beq.n	80041de <HAL_RCC_GetSysClockFreq+0x3a>
 80041d6:	e09b      	b.n	8004310 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80041d8:	4b53      	ldr	r3, [pc, #332]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x184>)
 80041da:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80041dc:	e09b      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80041de:	4b53      	ldr	r3, [pc, #332]	@ (800432c <HAL_RCC_GetSysClockFreq+0x188>)
 80041e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80041e2:	e098      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80041e4:	4b4f      	ldr	r3, [pc, #316]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x180>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80041ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80041ee:	4b4d      	ldr	r3, [pc, #308]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x180>)
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d028      	beq.n	800424c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041fa:	4b4a      	ldr	r3, [pc, #296]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x180>)
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	099b      	lsrs	r3, r3, #6
 8004200:	2200      	movs	r2, #0
 8004202:	623b      	str	r3, [r7, #32]
 8004204:	627a      	str	r2, [r7, #36]	@ 0x24
 8004206:	6a3b      	ldr	r3, [r7, #32]
 8004208:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800420c:	2100      	movs	r1, #0
 800420e:	4b47      	ldr	r3, [pc, #284]	@ (800432c <HAL_RCC_GetSysClockFreq+0x188>)
 8004210:	fb03 f201 	mul.w	r2, r3, r1
 8004214:	2300      	movs	r3, #0
 8004216:	fb00 f303 	mul.w	r3, r0, r3
 800421a:	4413      	add	r3, r2
 800421c:	4a43      	ldr	r2, [pc, #268]	@ (800432c <HAL_RCC_GetSysClockFreq+0x188>)
 800421e:	fba0 1202 	umull	r1, r2, r0, r2
 8004222:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004224:	460a      	mov	r2, r1
 8004226:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004228:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800422a:	4413      	add	r3, r2
 800422c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800422e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004230:	2200      	movs	r2, #0
 8004232:	61bb      	str	r3, [r7, #24]
 8004234:	61fa      	str	r2, [r7, #28]
 8004236:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800423a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800423e:	f7fb ffc7 	bl	80001d0 <__aeabi_uldivmod>
 8004242:	4602      	mov	r2, r0
 8004244:	460b      	mov	r3, r1
 8004246:	4613      	mov	r3, r2
 8004248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800424a:	e053      	b.n	80042f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424c:	4b35      	ldr	r3, [pc, #212]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x180>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	099b      	lsrs	r3, r3, #6
 8004252:	2200      	movs	r2, #0
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	617a      	str	r2, [r7, #20]
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800425e:	f04f 0b00 	mov.w	fp, #0
 8004262:	4652      	mov	r2, sl
 8004264:	465b      	mov	r3, fp
 8004266:	f04f 0000 	mov.w	r0, #0
 800426a:	f04f 0100 	mov.w	r1, #0
 800426e:	0159      	lsls	r1, r3, #5
 8004270:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004274:	0150      	lsls	r0, r2, #5
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	ebb2 080a 	subs.w	r8, r2, sl
 800427e:	eb63 090b 	sbc.w	r9, r3, fp
 8004282:	f04f 0200 	mov.w	r2, #0
 8004286:	f04f 0300 	mov.w	r3, #0
 800428a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800428e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004292:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004296:	ebb2 0408 	subs.w	r4, r2, r8
 800429a:	eb63 0509 	sbc.w	r5, r3, r9
 800429e:	f04f 0200 	mov.w	r2, #0
 80042a2:	f04f 0300 	mov.w	r3, #0
 80042a6:	00eb      	lsls	r3, r5, #3
 80042a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042ac:	00e2      	lsls	r2, r4, #3
 80042ae:	4614      	mov	r4, r2
 80042b0:	461d      	mov	r5, r3
 80042b2:	eb14 030a 	adds.w	r3, r4, sl
 80042b6:	603b      	str	r3, [r7, #0]
 80042b8:	eb45 030b 	adc.w	r3, r5, fp
 80042bc:	607b      	str	r3, [r7, #4]
 80042be:	f04f 0200 	mov.w	r2, #0
 80042c2:	f04f 0300 	mov.w	r3, #0
 80042c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042ca:	4629      	mov	r1, r5
 80042cc:	028b      	lsls	r3, r1, #10
 80042ce:	4621      	mov	r1, r4
 80042d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80042d4:	4621      	mov	r1, r4
 80042d6:	028a      	lsls	r2, r1, #10
 80042d8:	4610      	mov	r0, r2
 80042da:	4619      	mov	r1, r3
 80042dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042de:	2200      	movs	r2, #0
 80042e0:	60bb      	str	r3, [r7, #8]
 80042e2:	60fa      	str	r2, [r7, #12]
 80042e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042e8:	f7fb ff72 	bl	80001d0 <__aeabi_uldivmod>
 80042ec:	4602      	mov	r2, r0
 80042ee:	460b      	mov	r3, r1
 80042f0:	4613      	mov	r3, r2
 80042f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80042f4:	4b0b      	ldr	r3, [pc, #44]	@ (8004324 <HAL_RCC_GetSysClockFreq+0x180>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	3301      	adds	r3, #1
 8004300:	005b      	lsls	r3, r3, #1
 8004302:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004304:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004306:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004308:	fbb2 f3f3 	udiv	r3, r2, r3
 800430c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800430e:	e002      	b.n	8004316 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004310:	4b05      	ldr	r3, [pc, #20]	@ (8004328 <HAL_RCC_GetSysClockFreq+0x184>)
 8004312:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004314:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004316:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004318:	4618      	mov	r0, r3
 800431a:	3740      	adds	r7, #64	@ 0x40
 800431c:	46bd      	mov	sp, r7
 800431e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004322:	bf00      	nop
 8004324:	40023800 	.word	0x40023800
 8004328:	00f42400 	.word	0x00f42400
 800432c:	00b71b00 	.word	0x00b71b00

08004330 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004330:	b480      	push	{r7}
 8004332:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004334:	4b03      	ldr	r3, [pc, #12]	@ (8004344 <HAL_RCC_GetHCLKFreq+0x14>)
 8004336:	681b      	ldr	r3, [r3, #0]
}
 8004338:	4618      	mov	r0, r3
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	20000000 	.word	0x20000000

08004348 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800434c:	f7ff fff0 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004350:	4602      	mov	r2, r0
 8004352:	4b05      	ldr	r3, [pc, #20]	@ (8004368 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	0a9b      	lsrs	r3, r3, #10
 8004358:	f003 0307 	and.w	r3, r3, #7
 800435c:	4903      	ldr	r1, [pc, #12]	@ (800436c <HAL_RCC_GetPCLK1Freq+0x24>)
 800435e:	5ccb      	ldrb	r3, [r1, r3]
 8004360:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004364:	4618      	mov	r0, r3
 8004366:	bd80      	pop	{r7, pc}
 8004368:	40023800 	.word	0x40023800
 800436c:	0800911c 	.word	0x0800911c

08004370 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004374:	f7ff ffdc 	bl	8004330 <HAL_RCC_GetHCLKFreq>
 8004378:	4602      	mov	r2, r0
 800437a:	4b05      	ldr	r3, [pc, #20]	@ (8004390 <HAL_RCC_GetPCLK2Freq+0x20>)
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	0b5b      	lsrs	r3, r3, #13
 8004380:	f003 0307 	and.w	r3, r3, #7
 8004384:	4903      	ldr	r1, [pc, #12]	@ (8004394 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004386:	5ccb      	ldrb	r3, [r1, r3]
 8004388:	fa22 f303 	lsr.w	r3, r2, r3
}
 800438c:	4618      	mov	r0, r3
 800438e:	bd80      	pop	{r7, pc}
 8004390:	40023800 	.word	0x40023800
 8004394:	0800911c 	.word	0x0800911c

08004398 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 800439c:	4b06      	ldr	r3, [pc, #24]	@ (80043b8 <HAL_RCC_NMI_IRQHandler+0x20>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043a4:	2b80      	cmp	r3, #128	@ 0x80
 80043a6:	d104      	bne.n	80043b2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80043a8:	f000 f80a 	bl	80043c0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80043ac:	4b03      	ldr	r3, [pc, #12]	@ (80043bc <HAL_RCC_NMI_IRQHandler+0x24>)
 80043ae:	2280      	movs	r2, #128	@ 0x80
 80043b0:	701a      	strb	r2, [r3, #0]
  }
}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40023800 	.word	0x40023800
 80043bc:	4002380e 	.word	0x4002380e

080043c0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80043c4:	bf00      	nop
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr

080043ce <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80043ce:	b580      	push	{r7, lr}
 80043d0:	b082      	sub	sp, #8
 80043d2:	af00      	add	r7, sp, #0
 80043d4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d101      	bne.n	80043e0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	e07b      	b.n	80044d8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d108      	bne.n	80043fa <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	685b      	ldr	r3, [r3, #4]
 80043ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80043f0:	d009      	beq.n	8004406 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	61da      	str	r2, [r3, #28]
 80043f8:	e005      	b.n	8004406 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d106      	bne.n	8004426 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2200      	movs	r2, #0
 800441c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f7fd fb57 	bl	8001ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2202      	movs	r2, #2
 800442a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800443c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800444e:	431a      	orrs	r2, r3
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004458:	431a      	orrs	r2, r3
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	f003 0302 	and.w	r3, r3, #2
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	f003 0301 	and.w	r3, r3, #1
 800446c:	431a      	orrs	r2, r3
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004476:	431a      	orrs	r2, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	69db      	ldr	r3, [r3, #28]
 800447c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a1b      	ldr	r3, [r3, #32]
 8004486:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800448a:	ea42 0103 	orr.w	r1, r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	430a      	orrs	r2, r1
 800449c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	0c1b      	lsrs	r3, r3, #16
 80044a4:	f003 0104 	and.w	r1, r3, #4
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ac:	f003 0210 	and.w	r2, r3, #16
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	430a      	orrs	r2, r1
 80044b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	69da      	ldr	r2, [r3, #28]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80044c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2201      	movs	r2, #1
 80044d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3708      	adds	r7, #8
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e041      	b.n	8004576 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d106      	bne.n	800450c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7fd fb9a 	bl	8001c40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2202      	movs	r2, #2
 8004510:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	3304      	adds	r3, #4
 800451c:	4619      	mov	r1, r3
 800451e:	4610      	mov	r0, r2
 8004520:	f000 fba8 	bl	8004c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004574:	2300      	movs	r3, #0
}
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
	...

08004580 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004580:	b480      	push	{r7}
 8004582:	b085      	sub	sp, #20
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d001      	beq.n	8004598 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004594:	2301      	movs	r3, #1
 8004596:	e046      	b.n	8004626 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2202      	movs	r2, #2
 800459c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a23      	ldr	r2, [pc, #140]	@ (8004634 <HAL_TIM_Base_Start+0xb4>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d022      	beq.n	80045f0 <HAL_TIM_Base_Start+0x70>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045b2:	d01d      	beq.n	80045f0 <HAL_TIM_Base_Start+0x70>
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	4a1f      	ldr	r2, [pc, #124]	@ (8004638 <HAL_TIM_Base_Start+0xb8>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d018      	beq.n	80045f0 <HAL_TIM_Base_Start+0x70>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4a1e      	ldr	r2, [pc, #120]	@ (800463c <HAL_TIM_Base_Start+0xbc>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d013      	beq.n	80045f0 <HAL_TIM_Base_Start+0x70>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4a1c      	ldr	r2, [pc, #112]	@ (8004640 <HAL_TIM_Base_Start+0xc0>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d00e      	beq.n	80045f0 <HAL_TIM_Base_Start+0x70>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a1b      	ldr	r2, [pc, #108]	@ (8004644 <HAL_TIM_Base_Start+0xc4>)
 80045d8:	4293      	cmp	r3, r2
 80045da:	d009      	beq.n	80045f0 <HAL_TIM_Base_Start+0x70>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a19      	ldr	r2, [pc, #100]	@ (8004648 <HAL_TIM_Base_Start+0xc8>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d004      	beq.n	80045f0 <HAL_TIM_Base_Start+0x70>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a18      	ldr	r2, [pc, #96]	@ (800464c <HAL_TIM_Base_Start+0xcc>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d111      	bne.n	8004614 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f003 0307 	and.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d010      	beq.n	8004624 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f042 0201 	orr.w	r2, r2, #1
 8004610:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004612:	e007      	b.n	8004624 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f042 0201 	orr.w	r2, r2, #1
 8004622:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004624:	2300      	movs	r3, #0
}
 8004626:	4618      	mov	r0, r3
 8004628:	3714      	adds	r7, #20
 800462a:	46bd      	mov	sp, r7
 800462c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40010000 	.word	0x40010000
 8004638:	40000400 	.word	0x40000400
 800463c:	40000800 	.word	0x40000800
 8004640:	40000c00 	.word	0x40000c00
 8004644:	40010400 	.word	0x40010400
 8004648:	40014000 	.word	0x40014000
 800464c:	40001800 	.word	0x40001800

08004650 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b082      	sub	sp, #8
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e041      	b.n	80046e6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004668:	b2db      	uxtb	r3, r3
 800466a:	2b00      	cmp	r3, #0
 800466c:	d106      	bne.n	800467c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7fd fa94 	bl	8001ba4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2202      	movs	r2, #2
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3304      	adds	r3, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4610      	mov	r0, r2
 8004690:	f000 faf0 	bl	8004c74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2201      	movs	r2, #1
 8004698:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2201      	movs	r2, #1
 80046a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2201      	movs	r2, #1
 80046a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2201      	movs	r2, #1
 80046b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
	...

080046f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
 80046f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d109      	bne.n	8004714 <HAL_TIM_PWM_Start+0x24>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b01      	cmp	r3, #1
 800470a:	bf14      	ite	ne
 800470c:	2301      	movne	r3, #1
 800470e:	2300      	moveq	r3, #0
 8004710:	b2db      	uxtb	r3, r3
 8004712:	e022      	b.n	800475a <HAL_TIM_PWM_Start+0x6a>
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b04      	cmp	r3, #4
 8004718:	d109      	bne.n	800472e <HAL_TIM_PWM_Start+0x3e>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b01      	cmp	r3, #1
 8004724:	bf14      	ite	ne
 8004726:	2301      	movne	r3, #1
 8004728:	2300      	moveq	r3, #0
 800472a:	b2db      	uxtb	r3, r3
 800472c:	e015      	b.n	800475a <HAL_TIM_PWM_Start+0x6a>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	2b08      	cmp	r3, #8
 8004732:	d109      	bne.n	8004748 <HAL_TIM_PWM_Start+0x58>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b01      	cmp	r3, #1
 800473e:	bf14      	ite	ne
 8004740:	2301      	movne	r3, #1
 8004742:	2300      	moveq	r3, #0
 8004744:	b2db      	uxtb	r3, r3
 8004746:	e008      	b.n	800475a <HAL_TIM_PWM_Start+0x6a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800474e:	b2db      	uxtb	r3, r3
 8004750:	2b01      	cmp	r3, #1
 8004752:	bf14      	ite	ne
 8004754:	2301      	movne	r3, #1
 8004756:	2300      	moveq	r3, #0
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d001      	beq.n	8004762 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e07c      	b.n	800485c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d104      	bne.n	8004772 <HAL_TIM_PWM_Start+0x82>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2202      	movs	r2, #2
 800476c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004770:	e013      	b.n	800479a <HAL_TIM_PWM_Start+0xaa>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b04      	cmp	r3, #4
 8004776:	d104      	bne.n	8004782 <HAL_TIM_PWM_Start+0x92>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2202      	movs	r2, #2
 800477c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004780:	e00b      	b.n	800479a <HAL_TIM_PWM_Start+0xaa>
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b08      	cmp	r3, #8
 8004786:	d104      	bne.n	8004792 <HAL_TIM_PWM_Start+0xa2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004790:	e003      	b.n	800479a <HAL_TIM_PWM_Start+0xaa>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2202      	movs	r2, #2
 8004796:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	2201      	movs	r2, #1
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f000 fd5c 	bl	8005260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a2d      	ldr	r2, [pc, #180]	@ (8004864 <HAL_TIM_PWM_Start+0x174>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d004      	beq.n	80047bc <HAL_TIM_PWM_Start+0xcc>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a2c      	ldr	r2, [pc, #176]	@ (8004868 <HAL_TIM_PWM_Start+0x178>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d101      	bne.n	80047c0 <HAL_TIM_PWM_Start+0xd0>
 80047bc:	2301      	movs	r3, #1
 80047be:	e000      	b.n	80047c2 <HAL_TIM_PWM_Start+0xd2>
 80047c0:	2300      	movs	r3, #0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047d4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a22      	ldr	r2, [pc, #136]	@ (8004864 <HAL_TIM_PWM_Start+0x174>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d022      	beq.n	8004826 <HAL_TIM_PWM_Start+0x136>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047e8:	d01d      	beq.n	8004826 <HAL_TIM_PWM_Start+0x136>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a1f      	ldr	r2, [pc, #124]	@ (800486c <HAL_TIM_PWM_Start+0x17c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d018      	beq.n	8004826 <HAL_TIM_PWM_Start+0x136>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a1d      	ldr	r2, [pc, #116]	@ (8004870 <HAL_TIM_PWM_Start+0x180>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d013      	beq.n	8004826 <HAL_TIM_PWM_Start+0x136>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a1c      	ldr	r2, [pc, #112]	@ (8004874 <HAL_TIM_PWM_Start+0x184>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d00e      	beq.n	8004826 <HAL_TIM_PWM_Start+0x136>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a16      	ldr	r2, [pc, #88]	@ (8004868 <HAL_TIM_PWM_Start+0x178>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d009      	beq.n	8004826 <HAL_TIM_PWM_Start+0x136>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a18      	ldr	r2, [pc, #96]	@ (8004878 <HAL_TIM_PWM_Start+0x188>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d004      	beq.n	8004826 <HAL_TIM_PWM_Start+0x136>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a16      	ldr	r2, [pc, #88]	@ (800487c <HAL_TIM_PWM_Start+0x18c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d111      	bne.n	800484a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	689b      	ldr	r3, [r3, #8]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2b06      	cmp	r3, #6
 8004836:	d010      	beq.n	800485a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0201 	orr.w	r2, r2, #1
 8004846:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004848:	e007      	b.n	800485a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f042 0201 	orr.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800485a:	2300      	movs	r3, #0
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40010000 	.word	0x40010000
 8004868:	40010400 	.word	0x40010400
 800486c:	40000400 	.word	0x40000400
 8004870:	40000800 	.word	0x40000800
 8004874:	40000c00 	.word	0x40000c00
 8004878:	40014000 	.word	0x40014000
 800487c:	40001800 	.word	0x40001800

08004880 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b082      	sub	sp, #8
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2200      	movs	r2, #0
 8004890:	6839      	ldr	r1, [r7, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f000 fce4 	bl	8005260 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a2e      	ldr	r2, [pc, #184]	@ (8004958 <HAL_TIM_PWM_Stop+0xd8>)
 800489e:	4293      	cmp	r3, r2
 80048a0:	d004      	beq.n	80048ac <HAL_TIM_PWM_Stop+0x2c>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4a2d      	ldr	r2, [pc, #180]	@ (800495c <HAL_TIM_PWM_Stop+0xdc>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d101      	bne.n	80048b0 <HAL_TIM_PWM_Stop+0x30>
 80048ac:	2301      	movs	r3, #1
 80048ae:	e000      	b.n	80048b2 <HAL_TIM_PWM_Stop+0x32>
 80048b0:	2300      	movs	r3, #0
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d017      	beq.n	80048e6 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a1a      	ldr	r2, [r3, #32]
 80048bc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048c0:	4013      	ands	r3, r2
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d10f      	bne.n	80048e6 <HAL_TIM_PWM_Stop+0x66>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a1a      	ldr	r2, [r3, #32]
 80048cc:	f240 4344 	movw	r3, #1092	@ 0x444
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d107      	bne.n	80048e6 <HAL_TIM_PWM_Stop+0x66>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80048e4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	6a1a      	ldr	r2, [r3, #32]
 80048ec:	f241 1311 	movw	r3, #4369	@ 0x1111
 80048f0:	4013      	ands	r3, r2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10f      	bne.n	8004916 <HAL_TIM_PWM_Stop+0x96>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	6a1a      	ldr	r2, [r3, #32]
 80048fc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004900:	4013      	ands	r3, r2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d107      	bne.n	8004916 <HAL_TIM_PWM_Stop+0x96>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	681a      	ldr	r2, [r3, #0]
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f022 0201 	bic.w	r2, r2, #1
 8004914:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d104      	bne.n	8004926 <HAL_TIM_PWM_Stop+0xa6>
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004924:	e013      	b.n	800494e <HAL_TIM_PWM_Stop+0xce>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b04      	cmp	r3, #4
 800492a:	d104      	bne.n	8004936 <HAL_TIM_PWM_Stop+0xb6>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004934:	e00b      	b.n	800494e <HAL_TIM_PWM_Stop+0xce>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	2b08      	cmp	r3, #8
 800493a:	d104      	bne.n	8004946 <HAL_TIM_PWM_Stop+0xc6>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004944:	e003      	b.n	800494e <HAL_TIM_PWM_Stop+0xce>
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3708      	adds	r7, #8
 8004954:	46bd      	mov	sp, r7
 8004956:	bd80      	pop	{r7, pc}
 8004958:	40010000 	.word	0x40010000
 800495c:	40010400 	.word	0x40010400

08004960 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b086      	sub	sp, #24
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800497a:	2302      	movs	r3, #2
 800497c:	e0ae      	b.n	8004adc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	f200 809f 	bhi.w	8004acc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800498e:	a201      	add	r2, pc, #4	@ (adr r2, 8004994 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004990:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004994:	080049c9 	.word	0x080049c9
 8004998:	08004acd 	.word	0x08004acd
 800499c:	08004acd 	.word	0x08004acd
 80049a0:	08004acd 	.word	0x08004acd
 80049a4:	08004a09 	.word	0x08004a09
 80049a8:	08004acd 	.word	0x08004acd
 80049ac:	08004acd 	.word	0x08004acd
 80049b0:	08004acd 	.word	0x08004acd
 80049b4:	08004a4b 	.word	0x08004a4b
 80049b8:	08004acd 	.word	0x08004acd
 80049bc:	08004acd 	.word	0x08004acd
 80049c0:	08004acd 	.word	0x08004acd
 80049c4:	08004a8b 	.word	0x08004a8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 f9fc 	bl	8004dcc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0208 	orr.w	r2, r2, #8
 80049e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f022 0204 	bic.w	r2, r2, #4
 80049f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6999      	ldr	r1, [r3, #24]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	691a      	ldr	r2, [r3, #16]
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	619a      	str	r2, [r3, #24]
      break;
 8004a06:	e064      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	4618      	mov	r0, r3
 8004a10:	f000 fa4c 	bl	8004eac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004a22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699a      	ldr	r2, [r3, #24]
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004a32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	6999      	ldr	r1, [r3, #24]
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	021a      	lsls	r2, r3, #8
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	619a      	str	r2, [r3, #24]
      break;
 8004a48:	e043      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 faa1 	bl	8004f98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0208 	orr.w	r2, r2, #8
 8004a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f022 0204 	bic.w	r2, r2, #4
 8004a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69d9      	ldr	r1, [r3, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	691a      	ldr	r2, [r3, #16]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	61da      	str	r2, [r3, #28]
      break;
 8004a88:	e023      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68b9      	ldr	r1, [r7, #8]
 8004a90:	4618      	mov	r0, r3
 8004a92:	f000 faf5 	bl	8005080 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	69da      	ldr	r2, [r3, #28]
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004aa4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	69da      	ldr	r2, [r3, #28]
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ab4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	69d9      	ldr	r1, [r3, #28]
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	021a      	lsls	r2, r3, #8
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	61da      	str	r2, [r3, #28]
      break;
 8004aca:	e002      	b.n	8004ad2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	75fb      	strb	r3, [r7, #23]
      break;
 8004ad0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3718      	adds	r7, #24
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}

08004ae4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aee:	2300      	movs	r3, #0
 8004af0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d101      	bne.n	8004b00 <HAL_TIM_ConfigClockSource+0x1c>
 8004afc:	2302      	movs	r3, #2
 8004afe:	e0b4      	b.n	8004c6a <HAL_TIM_ConfigClockSource+0x186>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2202      	movs	r2, #2
 8004b0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b18:	68bb      	ldr	r3, [r7, #8]
 8004b1a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004b1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004b26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b38:	d03e      	beq.n	8004bb8 <HAL_TIM_ConfigClockSource+0xd4>
 8004b3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004b3e:	f200 8087 	bhi.w	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b46:	f000 8086 	beq.w	8004c56 <HAL_TIM_ConfigClockSource+0x172>
 8004b4a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b4e:	d87f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b50:	2b70      	cmp	r3, #112	@ 0x70
 8004b52:	d01a      	beq.n	8004b8a <HAL_TIM_ConfigClockSource+0xa6>
 8004b54:	2b70      	cmp	r3, #112	@ 0x70
 8004b56:	d87b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b58:	2b60      	cmp	r3, #96	@ 0x60
 8004b5a:	d050      	beq.n	8004bfe <HAL_TIM_ConfigClockSource+0x11a>
 8004b5c:	2b60      	cmp	r3, #96	@ 0x60
 8004b5e:	d877      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b60:	2b50      	cmp	r3, #80	@ 0x50
 8004b62:	d03c      	beq.n	8004bde <HAL_TIM_ConfigClockSource+0xfa>
 8004b64:	2b50      	cmp	r3, #80	@ 0x50
 8004b66:	d873      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b68:	2b40      	cmp	r3, #64	@ 0x40
 8004b6a:	d058      	beq.n	8004c1e <HAL_TIM_ConfigClockSource+0x13a>
 8004b6c:	2b40      	cmp	r3, #64	@ 0x40
 8004b6e:	d86f      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b70:	2b30      	cmp	r3, #48	@ 0x30
 8004b72:	d064      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b74:	2b30      	cmp	r3, #48	@ 0x30
 8004b76:	d86b      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b78:	2b20      	cmp	r3, #32
 8004b7a:	d060      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b7c:	2b20      	cmp	r3, #32
 8004b7e:	d867      	bhi.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d05c      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b84:	2b10      	cmp	r3, #16
 8004b86:	d05a      	beq.n	8004c3e <HAL_TIM_ConfigClockSource+0x15a>
 8004b88:	e062      	b.n	8004c50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b9a:	f000 fb41 	bl	8005220 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004bac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68ba      	ldr	r2, [r7, #8]
 8004bb4:	609a      	str	r2, [r3, #8]
      break;
 8004bb6:	e04f      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004bc8:	f000 fb2a 	bl	8005220 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689a      	ldr	r2, [r3, #8]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bda:	609a      	str	r2, [r3, #8]
      break;
 8004bdc:	e03c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bea:	461a      	mov	r2, r3
 8004bec:	f000 fa9e 	bl	800512c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	2150      	movs	r1, #80	@ 0x50
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f000 faf7 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004bfc:	e02c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	f000 fabd 	bl	800518a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2160      	movs	r1, #96	@ 0x60
 8004c16:	4618      	mov	r0, r3
 8004c18:	f000 fae7 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004c1c:	e01c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004c26:	683b      	ldr	r3, [r7, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	f000 fa7e 	bl	800512c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	2140      	movs	r1, #64	@ 0x40
 8004c36:	4618      	mov	r0, r3
 8004c38:	f000 fad7 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004c3c:	e00c      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4619      	mov	r1, r3
 8004c48:	4610      	mov	r0, r2
 8004c4a:	f000 face 	bl	80051ea <TIM_ITRx_SetConfig>
      break;
 8004c4e:	e003      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	73fb      	strb	r3, [r7, #15]
      break;
 8004c54:	e000      	b.n	8004c58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004c56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3710      	adds	r7, #16
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
	...

08004c74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	4a46      	ldr	r2, [pc, #280]	@ (8004da0 <TIM_Base_SetConfig+0x12c>)
 8004c88:	4293      	cmp	r3, r2
 8004c8a:	d013      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c92:	d00f      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	4a43      	ldr	r2, [pc, #268]	@ (8004da4 <TIM_Base_SetConfig+0x130>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d00b      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a42      	ldr	r2, [pc, #264]	@ (8004da8 <TIM_Base_SetConfig+0x134>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d007      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	4a41      	ldr	r2, [pc, #260]	@ (8004dac <TIM_Base_SetConfig+0x138>)
 8004ca8:	4293      	cmp	r3, r2
 8004caa:	d003      	beq.n	8004cb4 <TIM_Base_SetConfig+0x40>
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	4a40      	ldr	r2, [pc, #256]	@ (8004db0 <TIM_Base_SetConfig+0x13c>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d108      	bne.n	8004cc6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004cba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cbc:	683b      	ldr	r3, [r7, #0]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a35      	ldr	r2, [pc, #212]	@ (8004da0 <TIM_Base_SetConfig+0x12c>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d02b      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004cd4:	d027      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a32      	ldr	r2, [pc, #200]	@ (8004da4 <TIM_Base_SetConfig+0x130>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d023      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	4a31      	ldr	r2, [pc, #196]	@ (8004da8 <TIM_Base_SetConfig+0x134>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d01f      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	4a30      	ldr	r2, [pc, #192]	@ (8004dac <TIM_Base_SetConfig+0x138>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d01b      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a2f      	ldr	r2, [pc, #188]	@ (8004db0 <TIM_Base_SetConfig+0x13c>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d017      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a2e      	ldr	r2, [pc, #184]	@ (8004db4 <TIM_Base_SetConfig+0x140>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	4a2d      	ldr	r2, [pc, #180]	@ (8004db8 <TIM_Base_SetConfig+0x144>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d00f      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a2c      	ldr	r2, [pc, #176]	@ (8004dbc <TIM_Base_SetConfig+0x148>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <TIM_Base_SetConfig+0x14c>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a2a      	ldr	r2, [pc, #168]	@ (8004dc4 <TIM_Base_SetConfig+0x150>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_Base_SetConfig+0xb2>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a29      	ldr	r2, [pc, #164]	@ (8004dc8 <TIM_Base_SetConfig+0x154>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d108      	bne.n	8004d38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a10      	ldr	r2, [pc, #64]	@ (8004da0 <TIM_Base_SetConfig+0x12c>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0xf8>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a12      	ldr	r2, [pc, #72]	@ (8004db0 <TIM_Base_SetConfig+0x13c>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d103      	bne.n	8004d74 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	691a      	ldr	r2, [r3, #16]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	2201      	movs	r2, #1
 8004d78:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	691b      	ldr	r3, [r3, #16]
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	691b      	ldr	r3, [r3, #16]
 8004d8a:	f023 0201 	bic.w	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	611a      	str	r2, [r3, #16]
  }
}
 8004d92:	bf00      	nop
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop
 8004da0:	40010000 	.word	0x40010000
 8004da4:	40000400 	.word	0x40000400
 8004da8:	40000800 	.word	0x40000800
 8004dac:	40000c00 	.word	0x40000c00
 8004db0:	40010400 	.word	0x40010400
 8004db4:	40014000 	.word	0x40014000
 8004db8:	40014400 	.word	0x40014400
 8004dbc:	40014800 	.word	0x40014800
 8004dc0:	40001800 	.word	0x40001800
 8004dc4:	40001c00 	.word	0x40001c00
 8004dc8:	40002000 	.word	0x40002000

08004dcc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a1b      	ldr	r3, [r3, #32]
 8004de0:	f023 0201 	bic.w	r2, r3, #1
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f023 0303 	bic.w	r3, r3, #3
 8004e02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	68fa      	ldr	r2, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	f023 0302 	bic.w	r3, r3, #2
 8004e14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	4a20      	ldr	r2, [pc, #128]	@ (8004ea4 <TIM_OC1_SetConfig+0xd8>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d003      	beq.n	8004e30 <TIM_OC1_SetConfig+0x64>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ea8 <TIM_OC1_SetConfig+0xdc>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d10c      	bne.n	8004e4a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	f023 0308 	bic.w	r3, r3, #8
 8004e36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	68db      	ldr	r3, [r3, #12]
 8004e3c:	697a      	ldr	r2, [r7, #20]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 0304 	bic.w	r3, r3, #4
 8004e48:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a15      	ldr	r2, [pc, #84]	@ (8004ea4 <TIM_OC1_SetConfig+0xd8>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d003      	beq.n	8004e5a <TIM_OC1_SetConfig+0x8e>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a14      	ldr	r2, [pc, #80]	@ (8004ea8 <TIM_OC1_SetConfig+0xdc>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d111      	bne.n	8004e7e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004e68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	699b      	ldr	r3, [r3, #24]
 8004e78:	693a      	ldr	r2, [r7, #16]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	621a      	str	r2, [r3, #32]
}
 8004e98:	bf00      	nop
 8004e9a:	371c      	adds	r7, #28
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40010400 	.word	0x40010400

08004eac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a1b      	ldr	r3, [r3, #32]
 8004ec0:	f023 0210 	bic.w	r2, r3, #16
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004eda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ee2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	021b      	lsls	r3, r3, #8
 8004eea:	68fa      	ldr	r2, [r7, #12]
 8004eec:	4313      	orrs	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	f023 0320 	bic.w	r3, r3, #32
 8004ef6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	011b      	lsls	r3, r3, #4
 8004efe:	697a      	ldr	r2, [r7, #20]
 8004f00:	4313      	orrs	r3, r2
 8004f02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a22      	ldr	r2, [pc, #136]	@ (8004f90 <TIM_OC2_SetConfig+0xe4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d003      	beq.n	8004f14 <TIM_OC2_SetConfig+0x68>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a21      	ldr	r2, [pc, #132]	@ (8004f94 <TIM_OC2_SetConfig+0xe8>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d10d      	bne.n	8004f30 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f14:	697b      	ldr	r3, [r7, #20]
 8004f16:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	011b      	lsls	r3, r3, #4
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f2e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	4a17      	ldr	r2, [pc, #92]	@ (8004f90 <TIM_OC2_SetConfig+0xe4>)
 8004f34:	4293      	cmp	r3, r2
 8004f36:	d003      	beq.n	8004f40 <TIM_OC2_SetConfig+0x94>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a16      	ldr	r2, [pc, #88]	@ (8004f94 <TIM_OC2_SetConfig+0xe8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d113      	bne.n	8004f68 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004f46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004f4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	695b      	ldr	r3, [r3, #20]
 8004f54:	009b      	lsls	r3, r3, #2
 8004f56:	693a      	ldr	r2, [r7, #16]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	699b      	ldr	r3, [r3, #24]
 8004f60:	009b      	lsls	r3, r3, #2
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	697a      	ldr	r2, [r7, #20]
 8004f80:	621a      	str	r2, [r3, #32]
}
 8004f82:	bf00      	nop
 8004f84:	371c      	adds	r7, #28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
 8004f8e:	bf00      	nop
 8004f90:	40010000 	.word	0x40010000
 8004f94:	40010400 	.word	0x40010400

08004f98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b087      	sub	sp, #28
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
 8004fa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6a1b      	ldr	r3, [r3, #32]
 8004fa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	685b      	ldr	r3, [r3, #4]
 8004fb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	69db      	ldr	r3, [r3, #28]
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0303 	bic.w	r3, r3, #3
 8004fce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	68fa      	ldr	r2, [r7, #12]
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004fe0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	021b      	lsls	r3, r3, #8
 8004fe8:	697a      	ldr	r2, [r7, #20]
 8004fea:	4313      	orrs	r3, r2
 8004fec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4a21      	ldr	r2, [pc, #132]	@ (8005078 <TIM_OC3_SetConfig+0xe0>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d003      	beq.n	8004ffe <TIM_OC3_SetConfig+0x66>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a20      	ldr	r2, [pc, #128]	@ (800507c <TIM_OC3_SetConfig+0xe4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10d      	bne.n	800501a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a16      	ldr	r2, [pc, #88]	@ (8005078 <TIM_OC3_SetConfig+0xe0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d003      	beq.n	800502a <TIM_OC3_SetConfig+0x92>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a15      	ldr	r2, [pc, #84]	@ (800507c <TIM_OC3_SetConfig+0xe4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d113      	bne.n	8005052 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005030:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005032:	693b      	ldr	r3, [r7, #16]
 8005034:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005038:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	693a      	ldr	r2, [r7, #16]
 8005042:	4313      	orrs	r3, r2
 8005044:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4313      	orrs	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	621a      	str	r2, [r3, #32]
}
 800506c:	bf00      	nop
 800506e:	371c      	adds	r7, #28
 8005070:	46bd      	mov	sp, r7
 8005072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005076:	4770      	bx	lr
 8005078:	40010000 	.word	0x40010000
 800507c:	40010400 	.word	0x40010400

08005080 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005080:	b480      	push	{r7}
 8005082:	b087      	sub	sp, #28
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	69db      	ldr	r3, [r3, #28]
 80050a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	021b      	lsls	r3, r3, #8
 80050be:	68fa      	ldr	r2, [r7, #12]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80050ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	031b      	lsls	r3, r3, #12
 80050d2:	693a      	ldr	r2, [r7, #16]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	4a12      	ldr	r2, [pc, #72]	@ (8005124 <TIM_OC4_SetConfig+0xa4>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d003      	beq.n	80050e8 <TIM_OC4_SetConfig+0x68>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	4a11      	ldr	r2, [pc, #68]	@ (8005128 <TIM_OC4_SetConfig+0xa8>)
 80050e4:	4293      	cmp	r3, r2
 80050e6:	d109      	bne.n	80050fc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050e8:	697b      	ldr	r3, [r7, #20]
 80050ea:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80050ee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	695b      	ldr	r3, [r3, #20]
 80050f4:	019b      	lsls	r3, r3, #6
 80050f6:	697a      	ldr	r2, [r7, #20]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	697a      	ldr	r2, [r7, #20]
 8005100:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	68fa      	ldr	r2, [r7, #12]
 8005106:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	685a      	ldr	r2, [r3, #4]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	693a      	ldr	r2, [r7, #16]
 8005114:	621a      	str	r2, [r3, #32]
}
 8005116:	bf00      	nop
 8005118:	371c      	adds	r7, #28
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	40010000 	.word	0x40010000
 8005128:	40010400 	.word	0x40010400

0800512c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	60f8      	str	r0, [r7, #12]
 8005134:	60b9      	str	r1, [r7, #8]
 8005136:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	6a1b      	ldr	r3, [r3, #32]
 800513c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0201 	bic.w	r2, r3, #1
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	011b      	lsls	r3, r3, #4
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	4313      	orrs	r3, r2
 8005160:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	f023 030a 	bic.w	r3, r3, #10
 8005168:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	4313      	orrs	r3, r2
 8005170:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	697a      	ldr	r2, [r7, #20]
 800517c:	621a      	str	r2, [r3, #32]
}
 800517e:	bf00      	nop
 8005180:	371c      	adds	r7, #28
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr

0800518a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800518a:	b480      	push	{r7}
 800518c:	b087      	sub	sp, #28
 800518e:	af00      	add	r7, sp, #0
 8005190:	60f8      	str	r0, [r7, #12]
 8005192:	60b9      	str	r1, [r7, #8]
 8005194:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6a1b      	ldr	r3, [r3, #32]
 800519a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6a1b      	ldr	r3, [r3, #32]
 80051a0:	f023 0210 	bic.w	r2, r3, #16
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80051b4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	031b      	lsls	r3, r3, #12
 80051ba:	693a      	ldr	r2, [r7, #16]
 80051bc:	4313      	orrs	r3, r2
 80051be:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80051c6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051c8:	68bb      	ldr	r3, [r7, #8]
 80051ca:	011b      	lsls	r3, r3, #4
 80051cc:	697a      	ldr	r2, [r7, #20]
 80051ce:	4313      	orrs	r3, r2
 80051d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	697a      	ldr	r2, [r7, #20]
 80051dc:	621a      	str	r2, [r3, #32]
}
 80051de:	bf00      	nop
 80051e0:	371c      	adds	r7, #28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e8:	4770      	bx	lr

080051ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ea:	b480      	push	{r7}
 80051ec:	b085      	sub	sp, #20
 80051ee:	af00      	add	r7, sp, #0
 80051f0:	6078      	str	r0, [r7, #4]
 80051f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005200:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005202:	683a      	ldr	r2, [r7, #0]
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	f043 0307 	orr.w	r3, r3, #7
 800520c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	68fa      	ldr	r2, [r7, #12]
 8005212:	609a      	str	r2, [r3, #8]
}
 8005214:	bf00      	nop
 8005216:	3714      	adds	r7, #20
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005220:	b480      	push	{r7}
 8005222:	b087      	sub	sp, #28
 8005224:	af00      	add	r7, sp, #0
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	607a      	str	r2, [r7, #4]
 800522c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	689b      	ldr	r3, [r3, #8]
 8005232:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800523a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	021a      	lsls	r2, r3, #8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	431a      	orrs	r2, r3
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4313      	orrs	r3, r2
 8005248:	697a      	ldr	r2, [r7, #20]
 800524a:	4313      	orrs	r3, r2
 800524c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	697a      	ldr	r2, [r7, #20]
 8005252:	609a      	str	r2, [r3, #8]
}
 8005254:	bf00      	nop
 8005256:	371c      	adds	r7, #28
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005260:	b480      	push	{r7}
 8005262:	b087      	sub	sp, #28
 8005264:	af00      	add	r7, sp, #0
 8005266:	60f8      	str	r0, [r7, #12]
 8005268:	60b9      	str	r1, [r7, #8]
 800526a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	f003 031f 	and.w	r3, r3, #31
 8005272:	2201      	movs	r2, #1
 8005274:	fa02 f303 	lsl.w	r3, r2, r3
 8005278:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6a1a      	ldr	r2, [r3, #32]
 800527e:	697b      	ldr	r3, [r7, #20]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a1a      	ldr	r2, [r3, #32]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	f003 031f 	and.w	r3, r3, #31
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	431a      	orrs	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	621a      	str	r2, [r3, #32]
}
 800529e:	bf00      	nop
 80052a0:	371c      	adds	r7, #28
 80052a2:	46bd      	mov	sp, r7
 80052a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a8:	4770      	bx	lr
	...

080052ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e05a      	b.n	800537a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	4a21      	ldr	r2, [pc, #132]	@ (8005388 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d022      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005310:	d01d      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a1d      	ldr	r2, [pc, #116]	@ (800538c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d018      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a1b      	ldr	r2, [pc, #108]	@ (8005390 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d013      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	4a1a      	ldr	r2, [pc, #104]	@ (8005394 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800532c:	4293      	cmp	r3, r2
 800532e:	d00e      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a18      	ldr	r2, [pc, #96]	@ (8005398 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d009      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	4a17      	ldr	r2, [pc, #92]	@ (800539c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d004      	beq.n	800534e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	4a15      	ldr	r2, [pc, #84]	@ (80053a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d10c      	bne.n	8005368 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005354:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	4313      	orrs	r3, r2
 800535e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005378:	2300      	movs	r3, #0
}
 800537a:	4618      	mov	r0, r3
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
 8005386:	bf00      	nop
 8005388:	40010000 	.word	0x40010000
 800538c:	40000400 	.word	0x40000400
 8005390:	40000800 	.word	0x40000800
 8005394:	40000c00 	.word	0x40000c00
 8005398:	40010400 	.word	0x40010400
 800539c:	40014000 	.word	0x40014000
 80053a0:	40001800 	.word	0x40001800

080053a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b085      	sub	sp, #20
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80053ae:	2300      	movs	r3, #0
 80053b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d101      	bne.n	80053c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80053bc:	2302      	movs	r3, #2
 80053be:	e03d      	b.n	800543c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	4313      	orrs	r3, r2
 80053e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	4313      	orrs	r3, r2
 80053f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	4313      	orrs	r3, r2
 800540c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	695b      	ldr	r3, [r3, #20]
 8005418:	4313      	orrs	r3, r2
 800541a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	69db      	ldr	r3, [r3, #28]
 8005426:	4313      	orrs	r3, r2
 8005428:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68fa      	ldr	r2, [r7, #12]
 8005430:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800543a:	2300      	movs	r3, #0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3714      	adds	r7, #20
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d101      	bne.n	800545a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	e042      	b.n	80054e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d106      	bne.n	8005474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f7fc fd1a 	bl	8001ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2224      	movs	r2, #36	@ 0x24
 8005478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68da      	ldr	r2, [r3, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800548a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800548c:	6878      	ldr	r0, [r7, #4]
 800548e:	f000 fc85 	bl	8005d9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	691a      	ldr	r2, [r3, #16]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80054a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	695a      	ldr	r2, [r3, #20]
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80054b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68da      	ldr	r2, [r3, #12]
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80054c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2220      	movs	r2, #32
 80054cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2220      	movs	r2, #32
 80054d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2200      	movs	r2, #0
 80054dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}

080054e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b0ba      	sub	sp, #232	@ 0xe8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	68db      	ldr	r3, [r3, #12]
 8005500:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800550e:	2300      	movs	r3, #0
 8005510:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005514:	2300      	movs	r3, #0
 8005516:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800551a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800551e:	f003 030f 	and.w	r3, r3, #15
 8005522:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d10f      	bne.n	800554e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800552e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d009      	beq.n	800554e <HAL_UART_IRQHandler+0x66>
 800553a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800553e:	f003 0320 	and.w	r3, r3, #32
 8005542:	2b00      	cmp	r3, #0
 8005544:	d003      	beq.n	800554e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 fb69 	bl	8005c1e <UART_Receive_IT>
      return;
 800554c:	e25b      	b.n	8005a06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800554e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005552:	2b00      	cmp	r3, #0
 8005554:	f000 80de 	beq.w	8005714 <HAL_UART_IRQHandler+0x22c>
 8005558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800555c:	f003 0301 	and.w	r3, r3, #1
 8005560:	2b00      	cmp	r3, #0
 8005562:	d106      	bne.n	8005572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005568:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800556c:	2b00      	cmp	r3, #0
 800556e:	f000 80d1 	beq.w	8005714 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005576:	f003 0301 	and.w	r3, r3, #1
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00b      	beq.n	8005596 <HAL_UART_IRQHandler+0xae>
 800557e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005586:	2b00      	cmp	r3, #0
 8005588:	d005      	beq.n	8005596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800558e:	f043 0201 	orr.w	r2, r3, #1
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800559a:	f003 0304 	and.w	r3, r3, #4
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d00b      	beq.n	80055ba <HAL_UART_IRQHandler+0xd2>
 80055a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055a6:	f003 0301 	and.w	r3, r3, #1
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d005      	beq.n	80055ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055b2:	f043 0202 	orr.w	r2, r3, #2
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <HAL_UART_IRQHandler+0xf6>
 80055c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055ca:	f003 0301 	and.w	r3, r3, #1
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d005      	beq.n	80055de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055e2:	f003 0308 	and.w	r3, r3, #8
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d011      	beq.n	800560e <HAL_UART_IRQHandler+0x126>
 80055ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055ee:	f003 0320 	and.w	r3, r3, #32
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d105      	bne.n	8005602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80055f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d005      	beq.n	800560e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005606:	f043 0208 	orr.w	r2, r3, #8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 81f2 	beq.w	80059fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800561c:	f003 0320 	and.w	r3, r3, #32
 8005620:	2b00      	cmp	r3, #0
 8005622:	d008      	beq.n	8005636 <HAL_UART_IRQHandler+0x14e>
 8005624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005628:	f003 0320 	and.w	r3, r3, #32
 800562c:	2b00      	cmp	r3, #0
 800562e:	d002      	beq.n	8005636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 faf4 	bl	8005c1e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005640:	2b40      	cmp	r3, #64	@ 0x40
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005652:	f003 0308 	and.w	r3, r3, #8
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <HAL_UART_IRQHandler+0x17a>
 800565a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800565e:	2b00      	cmp	r3, #0
 8005660:	d04f      	beq.n	8005702 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005662:	6878      	ldr	r0, [r7, #4]
 8005664:	f000 f9fc 	bl	8005a60 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005672:	2b40      	cmp	r3, #64	@ 0x40
 8005674:	d141      	bne.n	80056fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	3314      	adds	r3, #20
 800567c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005680:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800568c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	3314      	adds	r3, #20
 800569e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056b2:	e841 2300 	strex	r3, r2, [r1]
 80056b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1d9      	bne.n	8005676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d013      	beq.n	80056f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ce:	4a7e      	ldr	r2, [pc, #504]	@ (80058c8 <HAL_UART_IRQHandler+0x3e0>)
 80056d0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7fd fc7e 	bl	8002fd8 <HAL_DMA_Abort_IT>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d016      	beq.n	8005710 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80056ec:	4610      	mov	r0, r2
 80056ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f0:	e00e      	b.n	8005710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f99e 	bl	8005a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056f8:	e00a      	b.n	8005710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f99a 	bl	8005a34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005700:	e006      	b.n	8005710 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f000 f996 	bl	8005a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800570e:	e175      	b.n	80059fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	bf00      	nop
    return;
 8005712:	e173      	b.n	80059fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005718:	2b01      	cmp	r3, #1
 800571a:	f040 814f 	bne.w	80059bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800571e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005722:	f003 0310 	and.w	r3, r3, #16
 8005726:	2b00      	cmp	r3, #0
 8005728:	f000 8148 	beq.w	80059bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800572c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005730:	f003 0310 	and.w	r3, r3, #16
 8005734:	2b00      	cmp	r3, #0
 8005736:	f000 8141 	beq.w	80059bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800573a:	2300      	movs	r3, #0
 800573c:	60bb      	str	r3, [r7, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	60bb      	str	r3, [r7, #8]
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	60bb      	str	r3, [r7, #8]
 800574e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575a:	2b40      	cmp	r3, #64	@ 0x40
 800575c:	f040 80b6 	bne.w	80058cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800576c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005770:	2b00      	cmp	r3, #0
 8005772:	f000 8145 	beq.w	8005a00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800577a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800577e:	429a      	cmp	r2, r3
 8005780:	f080 813e 	bcs.w	8005a00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800578a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005790:	69db      	ldr	r3, [r3, #28]
 8005792:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005796:	f000 8088 	beq.w	80058aa <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	330c      	adds	r3, #12
 80057a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057b8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	330c      	adds	r3, #12
 80057c2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057d2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057de:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1d9      	bne.n	800579a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	3314      	adds	r3, #20
 80057ec:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ee:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80057f0:	e853 3f00 	ldrex	r3, [r3]
 80057f4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80057f6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80057f8:	f023 0301 	bic.w	r3, r3, #1
 80057fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	3314      	adds	r3, #20
 8005806:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800580a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800580e:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005810:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005812:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005816:	e841 2300 	strex	r3, r2, [r1]
 800581a:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800581c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800581e:	2b00      	cmp	r3, #0
 8005820:	d1e1      	bne.n	80057e6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3314      	adds	r3, #20
 8005828:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800582c:	e853 3f00 	ldrex	r3, [r3]
 8005830:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005832:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005838:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	3314      	adds	r3, #20
 8005842:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005846:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005848:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800584c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800584e:	e841 2300 	strex	r3, r2, [r1]
 8005852:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005854:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005856:	2b00      	cmp	r3, #0
 8005858:	d1e3      	bne.n	8005822 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2220      	movs	r2, #32
 800585e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	330c      	adds	r3, #12
 800586e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005870:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005872:	e853 3f00 	ldrex	r3, [r3]
 8005876:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005878:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800587a:	f023 0310 	bic.w	r3, r3, #16
 800587e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	330c      	adds	r3, #12
 8005888:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800588c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800588e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005892:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800589a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e3      	bne.n	8005868 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7fd fb27 	bl	8002ef8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2202      	movs	r2, #2
 80058ae:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058b8:	b29b      	uxth	r3, r3
 80058ba:	1ad3      	subs	r3, r2, r3
 80058bc:	b29b      	uxth	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 f8c1 	bl	8005a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058c6:	e09b      	b.n	8005a00 <HAL_UART_IRQHandler+0x518>
 80058c8:	08005b27 	.word	0x08005b27
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058e0:	b29b      	uxth	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	f000 808e 	beq.w	8005a04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80058e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	f000 8089 	beq.w	8005a04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	330c      	adds	r3, #12
 80058f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fc:	e853 3f00 	ldrex	r3, [r3]
 8005900:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005902:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005904:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005908:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	330c      	adds	r3, #12
 8005912:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005916:	647a      	str	r2, [r7, #68]	@ 0x44
 8005918:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800591a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800591c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800591e:	e841 2300 	strex	r3, r2, [r1]
 8005922:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005924:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005926:	2b00      	cmp	r3, #0
 8005928:	d1e3      	bne.n	80058f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	3314      	adds	r3, #20
 8005930:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005934:	e853 3f00 	ldrex	r3, [r3]
 8005938:	623b      	str	r3, [r7, #32]
   return(result);
 800593a:	6a3b      	ldr	r3, [r7, #32]
 800593c:	f023 0301 	bic.w	r3, r3, #1
 8005940:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	3314      	adds	r3, #20
 800594a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800594e:	633a      	str	r2, [r7, #48]	@ 0x30
 8005950:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005952:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005954:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005956:	e841 2300 	strex	r3, r2, [r1]
 800595a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	2b00      	cmp	r3, #0
 8005960:	d1e3      	bne.n	800592a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2220      	movs	r2, #32
 8005966:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	330c      	adds	r3, #12
 8005976:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	e853 3f00 	ldrex	r3, [r3]
 800597e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f023 0310 	bic.w	r3, r3, #16
 8005986:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	330c      	adds	r3, #12
 8005990:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005994:	61fa      	str	r2, [r7, #28]
 8005996:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005998:	69b9      	ldr	r1, [r7, #24]
 800599a:	69fa      	ldr	r2, [r7, #28]
 800599c:	e841 2300 	strex	r3, r2, [r1]
 80059a0:	617b      	str	r3, [r7, #20]
   return(result);
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1e3      	bne.n	8005970 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2202      	movs	r2, #2
 80059ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059b2:	4619      	mov	r1, r3
 80059b4:	6878      	ldr	r0, [r7, #4]
 80059b6:	f000 f847 	bl	8005a48 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059ba:	e023      	b.n	8005a04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d009      	beq.n	80059dc <HAL_UART_IRQHandler+0x4f4>
 80059c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d003      	beq.n	80059dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f8ba 	bl	8005b4e <UART_Transmit_IT>
    return;
 80059da:	e014      	b.n	8005a06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00e      	beq.n	8005a06 <HAL_UART_IRQHandler+0x51e>
 80059e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 f8fa 	bl	8005bee <UART_EndTransmit_IT>
    return;
 80059fa:	e004      	b.n	8005a06 <HAL_UART_IRQHandler+0x51e>
    return;
 80059fc:	bf00      	nop
 80059fe:	e002      	b.n	8005a06 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a00:	bf00      	nop
 8005a02:	e000      	b.n	8005a06 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a04:	bf00      	nop
  }
}
 8005a06:	37e8      	adds	r7, #232	@ 0xe8
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a14:	bf00      	nop
 8005a16:	370c      	adds	r7, #12
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr

08005a20 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b083      	sub	sp, #12
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005a28:	bf00      	nop
 8005a2a:	370c      	adds	r7, #12
 8005a2c:	46bd      	mov	sp, r7
 8005a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a32:	4770      	bx	lr

08005a34 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a34:	b480      	push	{r7}
 8005a36:	b083      	sub	sp, #12
 8005a38:	af00      	add	r7, sp, #0
 8005a3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a3c:	bf00      	nop
 8005a3e:	370c      	adds	r7, #12
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr

08005a48 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b083      	sub	sp, #12
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b095      	sub	sp, #84	@ 0x54
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	330c      	adds	r3, #12
 8005a6e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a72:	e853 3f00 	ldrex	r3, [r3]
 8005a76:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a7e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a88:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a8c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a8e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a90:	e841 2300 	strex	r3, r2, [r1]
 8005a94:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1e5      	bne.n	8005a68 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	3314      	adds	r3, #20
 8005aa2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	e853 3f00 	ldrex	r3, [r3]
 8005aaa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aac:	69fb      	ldr	r3, [r7, #28]
 8005aae:	f023 0301 	bic.w	r3, r3, #1
 8005ab2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	3314      	adds	r3, #20
 8005aba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005abc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005abe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ac4:	e841 2300 	strex	r3, r2, [r1]
 8005ac8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d1e5      	bne.n	8005a9c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	d119      	bne.n	8005b0c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	330c      	adds	r3, #12
 8005ade:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	e853 3f00 	ldrex	r3, [r3]
 8005ae6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	f023 0310 	bic.w	r3, r3, #16
 8005aee:	647b      	str	r3, [r7, #68]	@ 0x44
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	330c      	adds	r3, #12
 8005af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005af8:	61ba      	str	r2, [r7, #24]
 8005afa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afc:	6979      	ldr	r1, [r7, #20]
 8005afe:	69ba      	ldr	r2, [r7, #24]
 8005b00:	e841 2300 	strex	r3, r2, [r1]
 8005b04:	613b      	str	r3, [r7, #16]
   return(result);
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d1e5      	bne.n	8005ad8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b1a:	bf00      	nop
 8005b1c:	3754      	adds	r7, #84	@ 0x54
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b084      	sub	sp, #16
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b32:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2200      	movs	r2, #0
 8005b38:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b40:	68f8      	ldr	r0, [r7, #12]
 8005b42:	f7ff ff77 	bl	8005a34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b46:	bf00      	nop
 8005b48:	3710      	adds	r7, #16
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}

08005b4e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b085      	sub	sp, #20
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b21      	cmp	r3, #33	@ 0x21
 8005b60:	d13e      	bne.n	8005be0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6a:	d114      	bne.n	8005b96 <UART_Transmit_IT+0x48>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d110      	bne.n	8005b96 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	6a1b      	ldr	r3, [r3, #32]
 8005b78:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	881b      	ldrh	r3, [r3, #0]
 8005b7e:	461a      	mov	r2, r3
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b88:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	1c9a      	adds	r2, r3, #2
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	621a      	str	r2, [r3, #32]
 8005b94:	e008      	b.n	8005ba8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6a1b      	ldr	r3, [r3, #32]
 8005b9a:	1c59      	adds	r1, r3, #1
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	6211      	str	r1, [r2, #32]
 8005ba0:	781a      	ldrb	r2, [r3, #0]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005bac:	b29b      	uxth	r3, r3
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	b29b      	uxth	r3, r3
 8005bb2:	687a      	ldr	r2, [r7, #4]
 8005bb4:	4619      	mov	r1, r3
 8005bb6:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10f      	bne.n	8005bdc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005bca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68da      	ldr	r2, [r3, #12]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bda:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e000      	b.n	8005be2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr

08005bee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005bee:	b580      	push	{r7, lr}
 8005bf0:	b082      	sub	sp, #8
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c04:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f7ff fefc 	bl	8005a0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3708      	adds	r7, #8
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c1e:	b580      	push	{r7, lr}
 8005c20:	b08c      	sub	sp, #48	@ 0x30
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b22      	cmp	r3, #34	@ 0x22
 8005c30:	f040 80ae 	bne.w	8005d90 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c3c:	d117      	bne.n	8005c6e <UART_Receive_IT+0x50>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	691b      	ldr	r3, [r3, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d113      	bne.n	8005c6e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c5c:	b29a      	uxth	r2, r3
 8005c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c60:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c66:	1c9a      	adds	r2, r3, #2
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c6c:	e026      	b.n	8005cbc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c72:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005c74:	2300      	movs	r3, #0
 8005c76:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c80:	d007      	beq.n	8005c92 <UART_Receive_IT+0x74>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10a      	bne.n	8005ca0 <UART_Receive_IT+0x82>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	b2da      	uxtb	r2, r3
 8005c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c9c:	701a      	strb	r2, [r3, #0]
 8005c9e:	e008      	b.n	8005cb2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685b      	ldr	r3, [r3, #4]
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005cac:	b2da      	uxtb	r2, r3
 8005cae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cb0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cb6:	1c5a      	adds	r2, r3, #1
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005cc0:	b29b      	uxth	r3, r3
 8005cc2:	3b01      	subs	r3, #1
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	687a      	ldr	r2, [r7, #4]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d15d      	bne.n	8005d8c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68da      	ldr	r2, [r3, #12]
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f022 0220 	bic.w	r2, r2, #32
 8005cde:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	68da      	ldr	r2, [r3, #12]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	695a      	ldr	r2, [r3, #20]
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f022 0201 	bic.w	r2, r2, #1
 8005cfe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2220      	movs	r2, #32
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d135      	bne.n	8005d82 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2200      	movs	r2, #0
 8005d1a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	330c      	adds	r3, #12
 8005d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	e853 3f00 	ldrex	r3, [r3]
 8005d2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	f023 0310 	bic.w	r3, r3, #16
 8005d32:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	330c      	adds	r3, #12
 8005d3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d3c:	623a      	str	r2, [r7, #32]
 8005d3e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d40:	69f9      	ldr	r1, [r7, #28]
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	e841 2300 	strex	r3, r2, [r1]
 8005d48:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d1e5      	bne.n	8005d1c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f003 0310 	and.w	r3, r3, #16
 8005d5a:	2b10      	cmp	r3, #16
 8005d5c:	d10a      	bne.n	8005d74 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d5e:	2300      	movs	r3, #0
 8005d60:	60fb      	str	r3, [r7, #12]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7ff fe64 	bl	8005a48 <HAL_UARTEx_RxEventCallback>
 8005d80:	e002      	b.n	8005d88 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f7ff fe4c 	bl	8005a20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	e002      	b.n	8005d92 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d90:	2302      	movs	r3, #2
  }
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3730      	adds	r7, #48	@ 0x30
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
	...

08005d9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005da0:	b0c0      	sub	sp, #256	@ 0x100
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	691b      	ldr	r3, [r3, #16]
 8005db0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005db8:	68d9      	ldr	r1, [r3, #12]
 8005dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	ea40 0301 	orr.w	r3, r0, r1
 8005dc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005dc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	431a      	orrs	r2, r3
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dd8:	695b      	ldr	r3, [r3, #20]
 8005dda:	431a      	orrs	r2, r3
 8005ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005de0:	69db      	ldr	r3, [r3, #28]
 8005de2:	4313      	orrs	r3, r2
 8005de4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	68db      	ldr	r3, [r3, #12]
 8005df0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005df4:	f021 010c 	bic.w	r1, r1, #12
 8005df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005e02:	430b      	orrs	r3, r1
 8005e04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	695b      	ldr	r3, [r3, #20]
 8005e0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e16:	6999      	ldr	r1, [r3, #24]
 8005e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	ea40 0301 	orr.w	r3, r0, r1
 8005e22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	4b8f      	ldr	r3, [pc, #572]	@ (8006068 <UART_SetConfig+0x2cc>)
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d005      	beq.n	8005e3c <UART_SetConfig+0xa0>
 8005e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b8d      	ldr	r3, [pc, #564]	@ (800606c <UART_SetConfig+0x2d0>)
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d104      	bne.n	8005e46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e3c:	f7fe fa98 	bl	8004370 <HAL_RCC_GetPCLK2Freq>
 8005e40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005e44:	e003      	b.n	8005e4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e46:	f7fe fa7f 	bl	8004348 <HAL_RCC_GetPCLK1Freq>
 8005e4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e52:	69db      	ldr	r3, [r3, #28]
 8005e54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e58:	f040 810c 	bne.w	8006074 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e60:	2200      	movs	r2, #0
 8005e62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005e66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005e6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005e6e:	4622      	mov	r2, r4
 8005e70:	462b      	mov	r3, r5
 8005e72:	1891      	adds	r1, r2, r2
 8005e74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005e76:	415b      	adcs	r3, r3
 8005e78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005e7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005e7e:	4621      	mov	r1, r4
 8005e80:	eb12 0801 	adds.w	r8, r2, r1
 8005e84:	4629      	mov	r1, r5
 8005e86:	eb43 0901 	adc.w	r9, r3, r1
 8005e8a:	f04f 0200 	mov.w	r2, #0
 8005e8e:	f04f 0300 	mov.w	r3, #0
 8005e92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e9e:	4690      	mov	r8, r2
 8005ea0:	4699      	mov	r9, r3
 8005ea2:	4623      	mov	r3, r4
 8005ea4:	eb18 0303 	adds.w	r3, r8, r3
 8005ea8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005eac:	462b      	mov	r3, r5
 8005eae:	eb49 0303 	adc.w	r3, r9, r3
 8005eb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005ec2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ec6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005eca:	460b      	mov	r3, r1
 8005ecc:	18db      	adds	r3, r3, r3
 8005ece:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	eb42 0303 	adc.w	r3, r2, r3
 8005ed6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005ed8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005edc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ee0:	f7fa f976 	bl	80001d0 <__aeabi_uldivmod>
 8005ee4:	4602      	mov	r2, r0
 8005ee6:	460b      	mov	r3, r1
 8005ee8:	4b61      	ldr	r3, [pc, #388]	@ (8006070 <UART_SetConfig+0x2d4>)
 8005eea:	fba3 2302 	umull	r2, r3, r3, r2
 8005eee:	095b      	lsrs	r3, r3, #5
 8005ef0:	011c      	lsls	r4, r3, #4
 8005ef2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005efc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005f00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005f04:	4642      	mov	r2, r8
 8005f06:	464b      	mov	r3, r9
 8005f08:	1891      	adds	r1, r2, r2
 8005f0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005f0c:	415b      	adcs	r3, r3
 8005f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005f10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005f14:	4641      	mov	r1, r8
 8005f16:	eb12 0a01 	adds.w	sl, r2, r1
 8005f1a:	4649      	mov	r1, r9
 8005f1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005f20:	f04f 0200 	mov.w	r2, #0
 8005f24:	f04f 0300 	mov.w	r3, #0
 8005f28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f34:	4692      	mov	sl, r2
 8005f36:	469b      	mov	fp, r3
 8005f38:	4643      	mov	r3, r8
 8005f3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005f3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005f42:	464b      	mov	r3, r9
 8005f44:	eb4b 0303 	adc.w	r3, fp, r3
 8005f48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005f4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005f58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005f5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005f60:	460b      	mov	r3, r1
 8005f62:	18db      	adds	r3, r3, r3
 8005f64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f66:	4613      	mov	r3, r2
 8005f68:	eb42 0303 	adc.w	r3, r2, r3
 8005f6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005f72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005f76:	f7fa f92b 	bl	80001d0 <__aeabi_uldivmod>
 8005f7a:	4602      	mov	r2, r0
 8005f7c:	460b      	mov	r3, r1
 8005f7e:	4611      	mov	r1, r2
 8005f80:	4b3b      	ldr	r3, [pc, #236]	@ (8006070 <UART_SetConfig+0x2d4>)
 8005f82:	fba3 2301 	umull	r2, r3, r3, r1
 8005f86:	095b      	lsrs	r3, r3, #5
 8005f88:	2264      	movs	r2, #100	@ 0x64
 8005f8a:	fb02 f303 	mul.w	r3, r2, r3
 8005f8e:	1acb      	subs	r3, r1, r3
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005f96:	4b36      	ldr	r3, [pc, #216]	@ (8006070 <UART_SetConfig+0x2d4>)
 8005f98:	fba3 2302 	umull	r2, r3, r3, r2
 8005f9c:	095b      	lsrs	r3, r3, #5
 8005f9e:	005b      	lsls	r3, r3, #1
 8005fa0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005fa4:	441c      	add	r4, r3
 8005fa6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005faa:	2200      	movs	r2, #0
 8005fac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005fb0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005fb4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005fb8:	4642      	mov	r2, r8
 8005fba:	464b      	mov	r3, r9
 8005fbc:	1891      	adds	r1, r2, r2
 8005fbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005fc0:	415b      	adcs	r3, r3
 8005fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005fc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005fc8:	4641      	mov	r1, r8
 8005fca:	1851      	adds	r1, r2, r1
 8005fcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005fce:	4649      	mov	r1, r9
 8005fd0:	414b      	adcs	r3, r1
 8005fd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fd4:	f04f 0200 	mov.w	r2, #0
 8005fd8:	f04f 0300 	mov.w	r3, #0
 8005fdc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005fe0:	4659      	mov	r1, fp
 8005fe2:	00cb      	lsls	r3, r1, #3
 8005fe4:	4651      	mov	r1, sl
 8005fe6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fea:	4651      	mov	r1, sl
 8005fec:	00ca      	lsls	r2, r1, #3
 8005fee:	4610      	mov	r0, r2
 8005ff0:	4619      	mov	r1, r3
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	4642      	mov	r2, r8
 8005ff6:	189b      	adds	r3, r3, r2
 8005ff8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005ffc:	464b      	mov	r3, r9
 8005ffe:	460a      	mov	r2, r1
 8006000:	eb42 0303 	adc.w	r3, r2, r3
 8006004:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	2200      	movs	r2, #0
 8006010:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006014:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006018:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800601c:	460b      	mov	r3, r1
 800601e:	18db      	adds	r3, r3, r3
 8006020:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006022:	4613      	mov	r3, r2
 8006024:	eb42 0303 	adc.w	r3, r2, r3
 8006028:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800602a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800602e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006032:	f7fa f8cd 	bl	80001d0 <__aeabi_uldivmod>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4b0d      	ldr	r3, [pc, #52]	@ (8006070 <UART_SetConfig+0x2d4>)
 800603c:	fba3 1302 	umull	r1, r3, r3, r2
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	2164      	movs	r1, #100	@ 0x64
 8006044:	fb01 f303 	mul.w	r3, r1, r3
 8006048:	1ad3      	subs	r3, r2, r3
 800604a:	00db      	lsls	r3, r3, #3
 800604c:	3332      	adds	r3, #50	@ 0x32
 800604e:	4a08      	ldr	r2, [pc, #32]	@ (8006070 <UART_SetConfig+0x2d4>)
 8006050:	fba2 2303 	umull	r2, r3, r2, r3
 8006054:	095b      	lsrs	r3, r3, #5
 8006056:	f003 0207 	and.w	r2, r3, #7
 800605a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4422      	add	r2, r4
 8006062:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006064:	e106      	b.n	8006274 <UART_SetConfig+0x4d8>
 8006066:	bf00      	nop
 8006068:	40011000 	.word	0x40011000
 800606c:	40011400 	.word	0x40011400
 8006070:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006074:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006078:	2200      	movs	r2, #0
 800607a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800607e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006082:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006086:	4642      	mov	r2, r8
 8006088:	464b      	mov	r3, r9
 800608a:	1891      	adds	r1, r2, r2
 800608c:	6239      	str	r1, [r7, #32]
 800608e:	415b      	adcs	r3, r3
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
 8006092:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006096:	4641      	mov	r1, r8
 8006098:	1854      	adds	r4, r2, r1
 800609a:	4649      	mov	r1, r9
 800609c:	eb43 0501 	adc.w	r5, r3, r1
 80060a0:	f04f 0200 	mov.w	r2, #0
 80060a4:	f04f 0300 	mov.w	r3, #0
 80060a8:	00eb      	lsls	r3, r5, #3
 80060aa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80060ae:	00e2      	lsls	r2, r4, #3
 80060b0:	4614      	mov	r4, r2
 80060b2:	461d      	mov	r5, r3
 80060b4:	4643      	mov	r3, r8
 80060b6:	18e3      	adds	r3, r4, r3
 80060b8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80060bc:	464b      	mov	r3, r9
 80060be:	eb45 0303 	adc.w	r3, r5, r3
 80060c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80060c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80060d2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80060d6:	f04f 0200 	mov.w	r2, #0
 80060da:	f04f 0300 	mov.w	r3, #0
 80060de:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80060e2:	4629      	mov	r1, r5
 80060e4:	008b      	lsls	r3, r1, #2
 80060e6:	4621      	mov	r1, r4
 80060e8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060ec:	4621      	mov	r1, r4
 80060ee:	008a      	lsls	r2, r1, #2
 80060f0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80060f4:	f7fa f86c 	bl	80001d0 <__aeabi_uldivmod>
 80060f8:	4602      	mov	r2, r0
 80060fa:	460b      	mov	r3, r1
 80060fc:	4b60      	ldr	r3, [pc, #384]	@ (8006280 <UART_SetConfig+0x4e4>)
 80060fe:	fba3 2302 	umull	r2, r3, r3, r2
 8006102:	095b      	lsrs	r3, r3, #5
 8006104:	011c      	lsls	r4, r3, #4
 8006106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800610a:	2200      	movs	r2, #0
 800610c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006110:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006114:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006118:	4642      	mov	r2, r8
 800611a:	464b      	mov	r3, r9
 800611c:	1891      	adds	r1, r2, r2
 800611e:	61b9      	str	r1, [r7, #24]
 8006120:	415b      	adcs	r3, r3
 8006122:	61fb      	str	r3, [r7, #28]
 8006124:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006128:	4641      	mov	r1, r8
 800612a:	1851      	adds	r1, r2, r1
 800612c:	6139      	str	r1, [r7, #16]
 800612e:	4649      	mov	r1, r9
 8006130:	414b      	adcs	r3, r1
 8006132:	617b      	str	r3, [r7, #20]
 8006134:	f04f 0200 	mov.w	r2, #0
 8006138:	f04f 0300 	mov.w	r3, #0
 800613c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006140:	4659      	mov	r1, fp
 8006142:	00cb      	lsls	r3, r1, #3
 8006144:	4651      	mov	r1, sl
 8006146:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800614a:	4651      	mov	r1, sl
 800614c:	00ca      	lsls	r2, r1, #3
 800614e:	4610      	mov	r0, r2
 8006150:	4619      	mov	r1, r3
 8006152:	4603      	mov	r3, r0
 8006154:	4642      	mov	r2, r8
 8006156:	189b      	adds	r3, r3, r2
 8006158:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800615c:	464b      	mov	r3, r9
 800615e:	460a      	mov	r2, r1
 8006160:	eb42 0303 	adc.w	r3, r2, r3
 8006164:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006172:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006180:	4649      	mov	r1, r9
 8006182:	008b      	lsls	r3, r1, #2
 8006184:	4641      	mov	r1, r8
 8006186:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800618a:	4641      	mov	r1, r8
 800618c:	008a      	lsls	r2, r1, #2
 800618e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006192:	f7fa f81d 	bl	80001d0 <__aeabi_uldivmod>
 8006196:	4602      	mov	r2, r0
 8006198:	460b      	mov	r3, r1
 800619a:	4611      	mov	r1, r2
 800619c:	4b38      	ldr	r3, [pc, #224]	@ (8006280 <UART_SetConfig+0x4e4>)
 800619e:	fba3 2301 	umull	r2, r3, r3, r1
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	2264      	movs	r2, #100	@ 0x64
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	1acb      	subs	r3, r1, r3
 80061ac:	011b      	lsls	r3, r3, #4
 80061ae:	3332      	adds	r3, #50	@ 0x32
 80061b0:	4a33      	ldr	r2, [pc, #204]	@ (8006280 <UART_SetConfig+0x4e4>)
 80061b2:	fba2 2303 	umull	r2, r3, r2, r3
 80061b6:	095b      	lsrs	r3, r3, #5
 80061b8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80061bc:	441c      	add	r4, r3
 80061be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061c2:	2200      	movs	r2, #0
 80061c4:	673b      	str	r3, [r7, #112]	@ 0x70
 80061c6:	677a      	str	r2, [r7, #116]	@ 0x74
 80061c8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80061cc:	4642      	mov	r2, r8
 80061ce:	464b      	mov	r3, r9
 80061d0:	1891      	adds	r1, r2, r2
 80061d2:	60b9      	str	r1, [r7, #8]
 80061d4:	415b      	adcs	r3, r3
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061dc:	4641      	mov	r1, r8
 80061de:	1851      	adds	r1, r2, r1
 80061e0:	6039      	str	r1, [r7, #0]
 80061e2:	4649      	mov	r1, r9
 80061e4:	414b      	adcs	r3, r1
 80061e6:	607b      	str	r3, [r7, #4]
 80061e8:	f04f 0200 	mov.w	r2, #0
 80061ec:	f04f 0300 	mov.w	r3, #0
 80061f0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061f4:	4659      	mov	r1, fp
 80061f6:	00cb      	lsls	r3, r1, #3
 80061f8:	4651      	mov	r1, sl
 80061fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061fe:	4651      	mov	r1, sl
 8006200:	00ca      	lsls	r2, r1, #3
 8006202:	4610      	mov	r0, r2
 8006204:	4619      	mov	r1, r3
 8006206:	4603      	mov	r3, r0
 8006208:	4642      	mov	r2, r8
 800620a:	189b      	adds	r3, r3, r2
 800620c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800620e:	464b      	mov	r3, r9
 8006210:	460a      	mov	r2, r1
 8006212:	eb42 0303 	adc.w	r3, r2, r3
 8006216:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800621c:	685b      	ldr	r3, [r3, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	663b      	str	r3, [r7, #96]	@ 0x60
 8006222:	667a      	str	r2, [r7, #100]	@ 0x64
 8006224:	f04f 0200 	mov.w	r2, #0
 8006228:	f04f 0300 	mov.w	r3, #0
 800622c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006230:	4649      	mov	r1, r9
 8006232:	008b      	lsls	r3, r1, #2
 8006234:	4641      	mov	r1, r8
 8006236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800623a:	4641      	mov	r1, r8
 800623c:	008a      	lsls	r2, r1, #2
 800623e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006242:	f7f9 ffc5 	bl	80001d0 <__aeabi_uldivmod>
 8006246:	4602      	mov	r2, r0
 8006248:	460b      	mov	r3, r1
 800624a:	4b0d      	ldr	r3, [pc, #52]	@ (8006280 <UART_SetConfig+0x4e4>)
 800624c:	fba3 1302 	umull	r1, r3, r3, r2
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	2164      	movs	r1, #100	@ 0x64
 8006254:	fb01 f303 	mul.w	r3, r1, r3
 8006258:	1ad3      	subs	r3, r2, r3
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	3332      	adds	r3, #50	@ 0x32
 800625e:	4a08      	ldr	r2, [pc, #32]	@ (8006280 <UART_SetConfig+0x4e4>)
 8006260:	fba2 2303 	umull	r2, r3, r2, r3
 8006264:	095b      	lsrs	r3, r3, #5
 8006266:	f003 020f 	and.w	r2, r3, #15
 800626a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4422      	add	r2, r4
 8006272:	609a      	str	r2, [r3, #8]
}
 8006274:	bf00      	nop
 8006276:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800627a:	46bd      	mov	sp, r7
 800627c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006280:	51eb851f 	.word	0x51eb851f

08006284 <__NVIC_SetPriority>:
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006294:	2b00      	cmp	r3, #0
 8006296:	db0a      	blt.n	80062ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	490c      	ldr	r1, [pc, #48]	@ (80062d0 <__NVIC_SetPriority+0x4c>)
 800629e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a2:	0112      	lsls	r2, r2, #4
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	440b      	add	r3, r1
 80062a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80062ac:	e00a      	b.n	80062c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	4908      	ldr	r1, [pc, #32]	@ (80062d4 <__NVIC_SetPriority+0x50>)
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	3b04      	subs	r3, #4
 80062bc:	0112      	lsls	r2, r2, #4
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	440b      	add	r3, r1
 80062c2:	761a      	strb	r2, [r3, #24]
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	e000e100 	.word	0xe000e100
 80062d4:	e000ed00 	.word	0xe000ed00

080062d8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80062d8:	b580      	push	{r7, lr}
 80062da:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80062dc:	2100      	movs	r1, #0
 80062de:	f06f 0004 	mvn.w	r0, #4
 80062e2:	f7ff ffcf 	bl	8006284 <__NVIC_SetPriority>
#endif
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80062f2:	f3ef 8305 	mrs	r3, IPSR
 80062f6:	603b      	str	r3, [r7, #0]
  return(result);
 80062f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d003      	beq.n	8006306 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80062fe:	f06f 0305 	mvn.w	r3, #5
 8006302:	607b      	str	r3, [r7, #4]
 8006304:	e00c      	b.n	8006320 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006306:	4b0a      	ldr	r3, [pc, #40]	@ (8006330 <osKernelInitialize+0x44>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d105      	bne.n	800631a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800630e:	4b08      	ldr	r3, [pc, #32]	@ (8006330 <osKernelInitialize+0x44>)
 8006310:	2201      	movs	r2, #1
 8006312:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006314:	2300      	movs	r3, #0
 8006316:	607b      	str	r3, [r7, #4]
 8006318:	e002      	b.n	8006320 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800631a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800631e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006320:	687b      	ldr	r3, [r7, #4]
}
 8006322:	4618      	mov	r0, r3
 8006324:	370c      	adds	r7, #12
 8006326:	46bd      	mov	sp, r7
 8006328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800632c:	4770      	bx	lr
 800632e:	bf00      	nop
 8006330:	20000624 	.word	0x20000624

08006334 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800633a:	f3ef 8305 	mrs	r3, IPSR
 800633e:	603b      	str	r3, [r7, #0]
  return(result);
 8006340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <osKernelStart+0x1a>
    stat = osErrorISR;
 8006346:	f06f 0305 	mvn.w	r3, #5
 800634a:	607b      	str	r3, [r7, #4]
 800634c:	e010      	b.n	8006370 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800634e:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <osKernelStart+0x48>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d109      	bne.n	800636a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006356:	f7ff ffbf 	bl	80062d8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800635a:	4b08      	ldr	r3, [pc, #32]	@ (800637c <osKernelStart+0x48>)
 800635c:	2202      	movs	r2, #2
 800635e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006360:	f001 f892 	bl	8007488 <vTaskStartScheduler>
      stat = osOK;
 8006364:	2300      	movs	r3, #0
 8006366:	607b      	str	r3, [r7, #4]
 8006368:	e002      	b.n	8006370 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800636a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800636e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006370:	687b      	ldr	r3, [r7, #4]
}
 8006372:	4618      	mov	r0, r3
 8006374:	3708      	adds	r7, #8
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
 800637a:	bf00      	nop
 800637c:	20000624 	.word	0x20000624

08006380 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006380:	b580      	push	{r7, lr}
 8006382:	b08e      	sub	sp, #56	@ 0x38
 8006384:	af04      	add	r7, sp, #16
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800638c:	2300      	movs	r3, #0
 800638e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006390:	f3ef 8305 	mrs	r3, IPSR
 8006394:	617b      	str	r3, [r7, #20]
  return(result);
 8006396:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006398:	2b00      	cmp	r3, #0
 800639a:	d17e      	bne.n	800649a <osThreadNew+0x11a>
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d07b      	beq.n	800649a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80063a2:	2380      	movs	r3, #128	@ 0x80
 80063a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80063a6:	2318      	movs	r3, #24
 80063a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80063aa:	2300      	movs	r3, #0
 80063ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80063b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d045      	beq.n	8006446 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <osThreadNew+0x48>
        name = attr->name;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d002      	beq.n	80063d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	699b      	ldr	r3, [r3, #24]
 80063d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80063d6:	69fb      	ldr	r3, [r7, #28]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d008      	beq.n	80063ee <osThreadNew+0x6e>
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	2b38      	cmp	r3, #56	@ 0x38
 80063e0:	d805      	bhi.n	80063ee <osThreadNew+0x6e>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d001      	beq.n	80063f2 <osThreadNew+0x72>
        return (NULL);
 80063ee:	2300      	movs	r3, #0
 80063f0:	e054      	b.n	800649c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	689b      	ldr	r3, [r3, #8]
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00e      	beq.n	8006428 <osThreadNew+0xa8>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2ba7      	cmp	r3, #167	@ 0xa7
 8006410:	d90a      	bls.n	8006428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8006416:	2b00      	cmp	r3, #0
 8006418:	d006      	beq.n	8006428 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	695b      	ldr	r3, [r3, #20]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <osThreadNew+0xa8>
        mem = 1;
 8006422:	2301      	movs	r3, #1
 8006424:	61bb      	str	r3, [r7, #24]
 8006426:	e010      	b.n	800644a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10c      	bne.n	800644a <osThreadNew+0xca>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d108      	bne.n	800644a <osThreadNew+0xca>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	691b      	ldr	r3, [r3, #16]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d104      	bne.n	800644a <osThreadNew+0xca>
          mem = 0;
 8006440:	2300      	movs	r3, #0
 8006442:	61bb      	str	r3, [r7, #24]
 8006444:	e001      	b.n	800644a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8006446:	2300      	movs	r3, #0
 8006448:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800644a:	69bb      	ldr	r3, [r7, #24]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d110      	bne.n	8006472 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8006454:	687a      	ldr	r2, [r7, #4]
 8006456:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8006458:	9202      	str	r2, [sp, #8]
 800645a:	9301      	str	r3, [sp, #4]
 800645c:	69fb      	ldr	r3, [r7, #28]
 800645e:	9300      	str	r3, [sp, #0]
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	6a3a      	ldr	r2, [r7, #32]
 8006464:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006466:	68f8      	ldr	r0, [r7, #12]
 8006468:	f000 fe1a 	bl	80070a0 <xTaskCreateStatic>
 800646c:	4603      	mov	r3, r0
 800646e:	613b      	str	r3, [r7, #16]
 8006470:	e013      	b.n	800649a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d110      	bne.n	800649a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8006478:	6a3b      	ldr	r3, [r7, #32]
 800647a:	b29a      	uxth	r2, r3
 800647c:	f107 0310 	add.w	r3, r7, #16
 8006480:	9301      	str	r3, [sp, #4]
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	9300      	str	r3, [sp, #0]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800648a:	68f8      	ldr	r0, [r7, #12]
 800648c:	f000 fe68 	bl	8007160 <xTaskCreate>
 8006490:	4603      	mov	r3, r0
 8006492:	2b01      	cmp	r3, #1
 8006494:	d001      	beq.n	800649a <osThreadNew+0x11a>
            hTask = NULL;
 8006496:	2300      	movs	r3, #0
 8006498:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800649a:	693b      	ldr	r3, [r7, #16]
}
 800649c:	4618      	mov	r0, r3
 800649e:	3728      	adds	r7, #40	@ 0x28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80064ac:	f3ef 8305 	mrs	r3, IPSR
 80064b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80064b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d003      	beq.n	80064c0 <osDelay+0x1c>
    stat = osErrorISR;
 80064b8:	f06f 0305 	mvn.w	r3, #5
 80064bc:	60fb      	str	r3, [r7, #12]
 80064be:	e007      	b.n	80064d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d002      	beq.n	80064d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 ffa6 	bl	800741c <vTaskDelay>
    }
  }

  return (stat);
 80064d0:	68fb      	ldr	r3, [r7, #12]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3710      	adds	r7, #16
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
	...

080064dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	60b9      	str	r1, [r7, #8]
 80064e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4a07      	ldr	r2, [pc, #28]	@ (8006508 <vApplicationGetIdleTaskMemory+0x2c>)
 80064ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	4a06      	ldr	r2, [pc, #24]	@ (800650c <vApplicationGetIdleTaskMemory+0x30>)
 80064f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2280      	movs	r2, #128	@ 0x80
 80064f8:	601a      	str	r2, [r3, #0]
}
 80064fa:	bf00      	nop
 80064fc:	3714      	adds	r7, #20
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr
 8006506:	bf00      	nop
 8006508:	20000628 	.word	0x20000628
 800650c:	200006d0 	.word	0x200006d0

08006510 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8006510:	b480      	push	{r7}
 8006512:	b085      	sub	sp, #20
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	4a07      	ldr	r2, [pc, #28]	@ (800653c <vApplicationGetTimerTaskMemory+0x2c>)
 8006520:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	4a06      	ldr	r2, [pc, #24]	@ (8006540 <vApplicationGetTimerTaskMemory+0x30>)
 8006526:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800652e:	601a      	str	r2, [r3, #0]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr
 800653c:	200008d0 	.word	0x200008d0
 8006540:	20000978 	.word	0x20000978

08006544 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8006544:	b480      	push	{r7}
 8006546:	b083      	sub	sp, #12
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f103 0208 	add.w	r2, r3, #8
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800655c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f103 0208 	add.w	r2, r3, #8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	f103 0208 	add.w	r2, r3, #8
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006592:	bf00      	nop
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800659e:	b480      	push	{r7}
 80065a0:	b085      	sub	sp, #20
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	6078      	str	r0, [r7, #4]
 80065a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	685b      	ldr	r3, [r3, #4]
 80065ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80065ae:	683b      	ldr	r3, [r7, #0]
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	689a      	ldr	r2, [r3, #8]
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	683a      	ldr	r2, [r7, #0]
 80065c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	1c5a      	adds	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	3714      	adds	r7, #20
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80065e6:	b480      	push	{r7}
 80065e8:	b085      	sub	sp, #20
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065fc:	d103      	bne.n	8006606 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	691b      	ldr	r3, [r3, #16]
 8006602:	60fb      	str	r3, [r7, #12]
 8006604:	e00c      	b.n	8006620 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3308      	adds	r3, #8
 800660a:	60fb      	str	r3, [r7, #12]
 800660c:	e002      	b.n	8006614 <vListInsert+0x2e>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	685b      	ldr	r3, [r3, #4]
 8006612:	60fb      	str	r3, [r7, #12]
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	685b      	ldr	r3, [r3, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68ba      	ldr	r2, [r7, #8]
 800661c:	429a      	cmp	r2, r3
 800661e:	d2f6      	bcs.n	800660e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	685a      	ldr	r2, [r3, #4]
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	683a      	ldr	r2, [r7, #0]
 800662e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	68fa      	ldr	r2, [r7, #12]
 8006634:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	683a      	ldr	r2, [r7, #0]
 800663a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800663c:	683b      	ldr	r3, [r7, #0]
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	1c5a      	adds	r2, r3, #1
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	bf00      	nop
 800664e:	3714      	adds	r7, #20
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	691b      	ldr	r3, [r3, #16]
 8006664:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	687a      	ldr	r2, [r7, #4]
 800666c:	6892      	ldr	r2, [r2, #8]
 800666e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	687a      	ldr	r2, [r7, #4]
 8006676:	6852      	ldr	r2, [r2, #4]
 8006678:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	687a      	ldr	r2, [r7, #4]
 8006680:	429a      	cmp	r2, r3
 8006682:	d103      	bne.n	800668c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	689a      	ldr	r2, [r3, #8]
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	1e5a      	subs	r2, r3, #1
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	681b      	ldr	r3, [r3, #0]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3714      	adds	r7, #20
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b084      	sub	sp, #16
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
 80066b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d10b      	bne.n	80066d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80066c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066c4:	f383 8811 	msr	BASEPRI, r3
 80066c8:	f3bf 8f6f 	isb	sy
 80066cc:	f3bf 8f4f 	dsb	sy
 80066d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80066d2:	bf00      	nop
 80066d4:	bf00      	nop
 80066d6:	e7fd      	b.n	80066d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80066d8:	f002 f8a6 	bl	8008828 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066e4:	68f9      	ldr	r1, [r7, #12]
 80066e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80066e8:	fb01 f303 	mul.w	r3, r1, r3
 80066ec:	441a      	add	r2, r3
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681a      	ldr	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006708:	3b01      	subs	r3, #1
 800670a:	68f9      	ldr	r1, [r7, #12]
 800670c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800670e:	fb01 f303 	mul.w	r3, r1, r3
 8006712:	441a      	add	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	22ff      	movs	r2, #255	@ 0xff
 800671c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	22ff      	movs	r2, #255	@ 0xff
 8006724:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d114      	bne.n	8006758 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d01a      	beq.n	800676c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3310      	adds	r3, #16
 800673a:	4618      	mov	r0, r3
 800673c:	f001 f942 	bl	80079c4 <xTaskRemoveFromEventList>
 8006740:	4603      	mov	r3, r0
 8006742:	2b00      	cmp	r3, #0
 8006744:	d012      	beq.n	800676c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006746:	4b0d      	ldr	r3, [pc, #52]	@ (800677c <xQueueGenericReset+0xd0>)
 8006748:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800674c:	601a      	str	r2, [r3, #0]
 800674e:	f3bf 8f4f 	dsb	sy
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	e009      	b.n	800676c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3310      	adds	r3, #16
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fef1 	bl	8006544 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3324      	adds	r3, #36	@ 0x24
 8006766:	4618      	mov	r0, r3
 8006768:	f7ff feec 	bl	8006544 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800676c:	f002 f88e 	bl	800888c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006770:	2301      	movs	r3, #1
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	e000ed04 	.word	0xe000ed04

08006780 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006780:	b580      	push	{r7, lr}
 8006782:	b08e      	sub	sp, #56	@ 0x38
 8006784:	af02      	add	r7, sp, #8
 8006786:	60f8      	str	r0, [r7, #12]
 8006788:	60b9      	str	r1, [r7, #8]
 800678a:	607a      	str	r2, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d10b      	bne.n	80067ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006798:	f383 8811 	msr	BASEPRI, r3
 800679c:	f3bf 8f6f 	isb	sy
 80067a0:	f3bf 8f4f 	dsb	sy
 80067a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80067a6:	bf00      	nop
 80067a8:	bf00      	nop
 80067aa:	e7fd      	b.n	80067a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d10b      	bne.n	80067ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80067b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067b6:	f383 8811 	msr	BASEPRI, r3
 80067ba:	f3bf 8f6f 	isb	sy
 80067be:	f3bf 8f4f 	dsb	sy
 80067c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80067c4:	bf00      	nop
 80067c6:	bf00      	nop
 80067c8:	e7fd      	b.n	80067c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d002      	beq.n	80067d6 <xQueueGenericCreateStatic+0x56>
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d001      	beq.n	80067da <xQueueGenericCreateStatic+0x5a>
 80067d6:	2301      	movs	r3, #1
 80067d8:	e000      	b.n	80067dc <xQueueGenericCreateStatic+0x5c>
 80067da:	2300      	movs	r3, #0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10b      	bne.n	80067f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	623b      	str	r3, [r7, #32]
}
 80067f2:	bf00      	nop
 80067f4:	bf00      	nop
 80067f6:	e7fd      	b.n	80067f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <xQueueGenericCreateStatic+0x84>
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d101      	bne.n	8006808 <xQueueGenericCreateStatic+0x88>
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <xQueueGenericCreateStatic+0x8a>
 8006808:	2300      	movs	r3, #0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800680e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006812:	f383 8811 	msr	BASEPRI, r3
 8006816:	f3bf 8f6f 	isb	sy
 800681a:	f3bf 8f4f 	dsb	sy
 800681e:	61fb      	str	r3, [r7, #28]
}
 8006820:	bf00      	nop
 8006822:	bf00      	nop
 8006824:	e7fd      	b.n	8006822 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006826:	2350      	movs	r3, #80	@ 0x50
 8006828:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2b50      	cmp	r3, #80	@ 0x50
 800682e:	d00b      	beq.n	8006848 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	61bb      	str	r3, [r7, #24]
}
 8006842:	bf00      	nop
 8006844:	bf00      	nop
 8006846:	e7fd      	b.n	8006844 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006848:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800684e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00d      	beq.n	8006870 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006856:	2201      	movs	r2, #1
 8006858:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800685c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006860:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006862:	9300      	str	r3, [sp, #0]
 8006864:	4613      	mov	r3, r2
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f805 	bl	800687a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006872:	4618      	mov	r0, r3
 8006874:	3730      	adds	r7, #48	@ 0x30
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}

0800687a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800687a:	b580      	push	{r7, lr}
 800687c:	b084      	sub	sp, #16
 800687e:	af00      	add	r7, sp, #0
 8006880:	60f8      	str	r0, [r7, #12]
 8006882:	60b9      	str	r1, [r7, #8]
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800688e:	69bb      	ldr	r3, [r7, #24]
 8006890:	69ba      	ldr	r2, [r7, #24]
 8006892:	601a      	str	r2, [r3, #0]
 8006894:	e002      	b.n	800689c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006896:	69bb      	ldr	r3, [r7, #24]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800689c:	69bb      	ldr	r3, [r7, #24]
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80068a2:	69bb      	ldr	r3, [r7, #24]
 80068a4:	68ba      	ldr	r2, [r7, #8]
 80068a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80068a8:	2101      	movs	r1, #1
 80068aa:	69b8      	ldr	r0, [r7, #24]
 80068ac:	f7ff fefe 	bl	80066ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80068b0:	69bb      	ldr	r3, [r7, #24]
 80068b2:	78fa      	ldrb	r2, [r7, #3]
 80068b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80068b8:	bf00      	nop
 80068ba:	3710      	adds	r7, #16
 80068bc:	46bd      	mov	sp, r7
 80068be:	bd80      	pop	{r7, pc}

080068c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b08e      	sub	sp, #56	@ 0x38
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
 80068cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068ce:	2300      	movs	r3, #0
 80068d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80068d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d10b      	bne.n	80068f4 <xQueueGenericSend+0x34>
	__asm volatile
 80068dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e0:	f383 8811 	msr	BASEPRI, r3
 80068e4:	f3bf 8f6f 	isb	sy
 80068e8:	f3bf 8f4f 	dsb	sy
 80068ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80068ee:	bf00      	nop
 80068f0:	bf00      	nop
 80068f2:	e7fd      	b.n	80068f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d103      	bne.n	8006902 <xQueueGenericSend+0x42>
 80068fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <xQueueGenericSend+0x46>
 8006902:	2301      	movs	r3, #1
 8006904:	e000      	b.n	8006908 <xQueueGenericSend+0x48>
 8006906:	2300      	movs	r3, #0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d10b      	bne.n	8006924 <xQueueGenericSend+0x64>
	__asm volatile
 800690c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006910:	f383 8811 	msr	BASEPRI, r3
 8006914:	f3bf 8f6f 	isb	sy
 8006918:	f3bf 8f4f 	dsb	sy
 800691c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800691e:	bf00      	nop
 8006920:	bf00      	nop
 8006922:	e7fd      	b.n	8006920 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d103      	bne.n	8006932 <xQueueGenericSend+0x72>
 800692a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800692c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800692e:	2b01      	cmp	r3, #1
 8006930:	d101      	bne.n	8006936 <xQueueGenericSend+0x76>
 8006932:	2301      	movs	r3, #1
 8006934:	e000      	b.n	8006938 <xQueueGenericSend+0x78>
 8006936:	2300      	movs	r3, #0
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10b      	bne.n	8006954 <xQueueGenericSend+0x94>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	623b      	str	r3, [r7, #32]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006954:	f001 f9fc 	bl	8007d50 <xTaskGetSchedulerState>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d102      	bne.n	8006964 <xQueueGenericSend+0xa4>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <xQueueGenericSend+0xa8>
 8006964:	2301      	movs	r3, #1
 8006966:	e000      	b.n	800696a <xQueueGenericSend+0xaa>
 8006968:	2300      	movs	r3, #0
 800696a:	2b00      	cmp	r3, #0
 800696c:	d10b      	bne.n	8006986 <xQueueGenericSend+0xc6>
	__asm volatile
 800696e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006972:	f383 8811 	msr	BASEPRI, r3
 8006976:	f3bf 8f6f 	isb	sy
 800697a:	f3bf 8f4f 	dsb	sy
 800697e:	61fb      	str	r3, [r7, #28]
}
 8006980:	bf00      	nop
 8006982:	bf00      	nop
 8006984:	e7fd      	b.n	8006982 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006986:	f001 ff4f 	bl	8008828 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800698a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800698c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800698e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006992:	429a      	cmp	r2, r3
 8006994:	d302      	bcc.n	800699c <xQueueGenericSend+0xdc>
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	2b02      	cmp	r3, #2
 800699a:	d129      	bne.n	80069f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800699c:	683a      	ldr	r2, [r7, #0]
 800699e:	68b9      	ldr	r1, [r7, #8]
 80069a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80069a2:	f000 fa0f 	bl	8006dc4 <prvCopyDataToQueue>
 80069a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d010      	beq.n	80069d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	3324      	adds	r3, #36	@ 0x24
 80069b4:	4618      	mov	r0, r3
 80069b6:	f001 f805 	bl	80079c4 <xTaskRemoveFromEventList>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d013      	beq.n	80069e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069c0:	4b3f      	ldr	r3, [pc, #252]	@ (8006ac0 <xQueueGenericSend+0x200>)
 80069c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069c6:	601a      	str	r2, [r3, #0]
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	f3bf 8f6f 	isb	sy
 80069d0:	e00a      	b.n	80069e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d007      	beq.n	80069e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069d8:	4b39      	ldr	r3, [pc, #228]	@ (8006ac0 <xQueueGenericSend+0x200>)
 80069da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069de:	601a      	str	r2, [r3, #0]
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80069e8:	f001 ff50 	bl	800888c <vPortExitCritical>
				return pdPASS;
 80069ec:	2301      	movs	r3, #1
 80069ee:	e063      	b.n	8006ab8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80069f6:	f001 ff49 	bl	800888c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80069fa:	2300      	movs	r3, #0
 80069fc:	e05c      	b.n	8006ab8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80069fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a04:	f107 0314 	add.w	r3, r7, #20
 8006a08:	4618      	mov	r0, r3
 8006a0a:	f001 f83f 	bl	8007a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a12:	f001 ff3b 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a16:	f000 fda7 	bl	8007568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a1a:	f001 ff05 	bl	8008828 <vPortEnterCritical>
 8006a1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a20:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006a24:	b25b      	sxtb	r3, r3
 8006a26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a2a:	d103      	bne.n	8006a34 <xQueueGenericSend+0x174>
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	2200      	movs	r2, #0
 8006a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a36:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006a3a:	b25b      	sxtb	r3, r3
 8006a3c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006a40:	d103      	bne.n	8006a4a <xQueueGenericSend+0x18a>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	2200      	movs	r2, #0
 8006a46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006a4a:	f001 ff1f 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a4e:	1d3a      	adds	r2, r7, #4
 8006a50:	f107 0314 	add.w	r3, r7, #20
 8006a54:	4611      	mov	r1, r2
 8006a56:	4618      	mov	r0, r3
 8006a58:	f001 f82e 	bl	8007ab8 <xTaskCheckForTimeOut>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d124      	bne.n	8006aac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a62:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a64:	f000 faa6 	bl	8006fb4 <prvIsQueueFull>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d018      	beq.n	8006aa0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a70:	3310      	adds	r3, #16
 8006a72:	687a      	ldr	r2, [r7, #4]
 8006a74:	4611      	mov	r1, r2
 8006a76:	4618      	mov	r0, r3
 8006a78:	f000 ff52 	bl	8007920 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a7e:	f000 fa31 	bl	8006ee4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a82:	f000 fd7f 	bl	8007584 <xTaskResumeAll>
 8006a86:	4603      	mov	r3, r0
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	f47f af7c 	bne.w	8006986 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <xQueueGenericSend+0x200>)
 8006a90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a94:	601a      	str	r2, [r3, #0]
 8006a96:	f3bf 8f4f 	dsb	sy
 8006a9a:	f3bf 8f6f 	isb	sy
 8006a9e:	e772      	b.n	8006986 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006aa0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aa2:	f000 fa1f 	bl	8006ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006aa6:	f000 fd6d 	bl	8007584 <xTaskResumeAll>
 8006aaa:	e76c      	b.n	8006986 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006aac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006aae:	f000 fa19 	bl	8006ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ab2:	f000 fd67 	bl	8007584 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ab6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3738      	adds	r7, #56	@ 0x38
 8006abc:	46bd      	mov	sp, r7
 8006abe:	bd80      	pop	{r7, pc}
 8006ac0:	e000ed04 	.word	0xe000ed04

08006ac4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b090      	sub	sp, #64	@ 0x40
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	607a      	str	r2, [r7, #4]
 8006ad0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d10b      	bne.n	8006af4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006adc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae0:	f383 8811 	msr	BASEPRI, r3
 8006ae4:	f3bf 8f6f 	isb	sy
 8006ae8:	f3bf 8f4f 	dsb	sy
 8006aec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006aee:	bf00      	nop
 8006af0:	bf00      	nop
 8006af2:	e7fd      	b.n	8006af0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d103      	bne.n	8006b02 <xQueueGenericSendFromISR+0x3e>
 8006afa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <xQueueGenericSendFromISR+0x42>
 8006b02:	2301      	movs	r3, #1
 8006b04:	e000      	b.n	8006b08 <xQueueGenericSendFromISR+0x44>
 8006b06:	2300      	movs	r3, #0
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d10b      	bne.n	8006b24 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d103      	bne.n	8006b32 <xQueueGenericSendFromISR+0x6e>
 8006b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b2e:	2b01      	cmp	r3, #1
 8006b30:	d101      	bne.n	8006b36 <xQueueGenericSendFromISR+0x72>
 8006b32:	2301      	movs	r3, #1
 8006b34:	e000      	b.n	8006b38 <xQueueGenericSendFromISR+0x74>
 8006b36:	2300      	movs	r3, #0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d10b      	bne.n	8006b54 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8006b3c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b40:	f383 8811 	msr	BASEPRI, r3
 8006b44:	f3bf 8f6f 	isb	sy
 8006b48:	f3bf 8f4f 	dsb	sy
 8006b4c:	623b      	str	r3, [r7, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	bf00      	nop
 8006b52:	e7fd      	b.n	8006b50 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b54:	f001 ff48 	bl	80089e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b58:	f3ef 8211 	mrs	r2, BASEPRI
 8006b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b60:	f383 8811 	msr	BASEPRI, r3
 8006b64:	f3bf 8f6f 	isb	sy
 8006b68:	f3bf 8f4f 	dsb	sy
 8006b6c:	61fa      	str	r2, [r7, #28]
 8006b6e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b70:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b72:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d302      	bcc.n	8006b86 <xQueueGenericSendFromISR+0xc2>
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b02      	cmp	r3, #2
 8006b84:	d12f      	bne.n	8006be6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b88:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006b8c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006b90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006b96:	683a      	ldr	r2, [r7, #0]
 8006b98:	68b9      	ldr	r1, [r7, #8]
 8006b9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006b9c:	f000 f912 	bl	8006dc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006ba0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006ba8:	d112      	bne.n	8006bd0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006baa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d016      	beq.n	8006be0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bb4:	3324      	adds	r3, #36	@ 0x24
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 ff04 	bl	80079c4 <xTaskRemoveFromEventList>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00e      	beq.n	8006be0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00b      	beq.n	8006be0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]
 8006bce:	e007      	b.n	8006be0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006bd0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006bd4:	3301      	adds	r3, #1
 8006bd6:	b2db      	uxtb	r3, r3
 8006bd8:	b25a      	sxtb	r2, r3
 8006bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006be0:	2301      	movs	r3, #1
 8006be2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006be4:	e001      	b.n	8006bea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006be6:	2300      	movs	r3, #0
 8006be8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006bec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006bf4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006bf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3740      	adds	r7, #64	@ 0x40
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b08c      	sub	sp, #48	@ 0x30
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	60f8      	str	r0, [r7, #12]
 8006c08:	60b9      	str	r1, [r7, #8]
 8006c0a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10b      	bne.n	8006c32 <xQueueReceive+0x32>
	__asm volatile
 8006c1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1e:	f383 8811 	msr	BASEPRI, r3
 8006c22:	f3bf 8f6f 	isb	sy
 8006c26:	f3bf 8f4f 	dsb	sy
 8006c2a:	623b      	str	r3, [r7, #32]
}
 8006c2c:	bf00      	nop
 8006c2e:	bf00      	nop
 8006c30:	e7fd      	b.n	8006c2e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d103      	bne.n	8006c40 <xQueueReceive+0x40>
 8006c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <xQueueReceive+0x44>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e000      	b.n	8006c46 <xQueueReceive+0x46>
 8006c44:	2300      	movs	r3, #0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d10b      	bne.n	8006c62 <xQueueReceive+0x62>
	__asm volatile
 8006c4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c4e:	f383 8811 	msr	BASEPRI, r3
 8006c52:	f3bf 8f6f 	isb	sy
 8006c56:	f3bf 8f4f 	dsb	sy
 8006c5a:	61fb      	str	r3, [r7, #28]
}
 8006c5c:	bf00      	nop
 8006c5e:	bf00      	nop
 8006c60:	e7fd      	b.n	8006c5e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006c62:	f001 f875 	bl	8007d50 <xTaskGetSchedulerState>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d102      	bne.n	8006c72 <xQueueReceive+0x72>
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d101      	bne.n	8006c76 <xQueueReceive+0x76>
 8006c72:	2301      	movs	r3, #1
 8006c74:	e000      	b.n	8006c78 <xQueueReceive+0x78>
 8006c76:	2300      	movs	r3, #0
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d10b      	bne.n	8006c94 <xQueueReceive+0x94>
	__asm volatile
 8006c7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c80:	f383 8811 	msr	BASEPRI, r3
 8006c84:	f3bf 8f6f 	isb	sy
 8006c88:	f3bf 8f4f 	dsb	sy
 8006c8c:	61bb      	str	r3, [r7, #24]
}
 8006c8e:	bf00      	nop
 8006c90:	bf00      	nop
 8006c92:	e7fd      	b.n	8006c90 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006c94:	f001 fdc8 	bl	8008828 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c9c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d01f      	beq.n	8006ce4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ca4:	68b9      	ldr	r1, [r7, #8]
 8006ca6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ca8:	f000 f8f6 	bl	8006e98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cae:	1e5a      	subs	r2, r3, #1
 8006cb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d00f      	beq.n	8006cdc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cbe:	3310      	adds	r3, #16
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f000 fe7f 	bl	80079c4 <xTaskRemoveFromEventList>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d007      	beq.n	8006cdc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006ccc:	4b3c      	ldr	r3, [pc, #240]	@ (8006dc0 <xQueueReceive+0x1c0>)
 8006cce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	f3bf 8f4f 	dsb	sy
 8006cd8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006cdc:	f001 fdd6 	bl	800888c <vPortExitCritical>
				return pdPASS;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e069      	b.n	8006db8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d103      	bne.n	8006cf2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006cea:	f001 fdcf 	bl	800888c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006cee:	2300      	movs	r3, #0
 8006cf0:	e062      	b.n	8006db8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d106      	bne.n	8006d06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006cf8:	f107 0310 	add.w	r3, r7, #16
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f000 fec5 	bl	8007a8c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006d02:	2301      	movs	r3, #1
 8006d04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006d06:	f001 fdc1 	bl	800888c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006d0a:	f000 fc2d 	bl	8007568 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006d0e:	f001 fd8b 	bl	8008828 <vPortEnterCritical>
 8006d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d18:	b25b      	sxtb	r3, r3
 8006d1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d1e:	d103      	bne.n	8006d28 <xQueueReceive+0x128>
 8006d20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d22:	2200      	movs	r2, #0
 8006d24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006d2e:	b25b      	sxtb	r3, r3
 8006d30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006d34:	d103      	bne.n	8006d3e <xQueueReceive+0x13e>
 8006d36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d38:	2200      	movs	r2, #0
 8006d3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006d3e:	f001 fda5 	bl	800888c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006d42:	1d3a      	adds	r2, r7, #4
 8006d44:	f107 0310 	add.w	r3, r7, #16
 8006d48:	4611      	mov	r1, r2
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f000 feb4 	bl	8007ab8 <xTaskCheckForTimeOut>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d123      	bne.n	8006d9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006d56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d58:	f000 f916 	bl	8006f88 <prvIsQueueEmpty>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d017      	beq.n	8006d92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d64:	3324      	adds	r3, #36	@ 0x24
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4611      	mov	r1, r2
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	f000 fdd8 	bl	8007920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006d70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d72:	f000 f8b7 	bl	8006ee4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006d76:	f000 fc05 	bl	8007584 <xTaskResumeAll>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d189      	bne.n	8006c94 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8006d80:	4b0f      	ldr	r3, [pc, #60]	@ (8006dc0 <xQueueReceive+0x1c0>)
 8006d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d86:	601a      	str	r2, [r3, #0]
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	f3bf 8f6f 	isb	sy
 8006d90:	e780      	b.n	8006c94 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006d92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d94:	f000 f8a6 	bl	8006ee4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006d98:	f000 fbf4 	bl	8007584 <xTaskResumeAll>
 8006d9c:	e77a      	b.n	8006c94 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006d9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006da0:	f000 f8a0 	bl	8006ee4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006da4:	f000 fbee 	bl	8007584 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006da8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006daa:	f000 f8ed 	bl	8006f88 <prvIsQueueEmpty>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	f43f af6f 	beq.w	8006c94 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006db6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3730      	adds	r7, #48	@ 0x30
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	bd80      	pop	{r7, pc}
 8006dc0:	e000ed04 	.word	0xe000ed04

08006dc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b086      	sub	sp, #24
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d14d      	bne.n	8006e86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	689b      	ldr	r3, [r3, #8]
 8006dee:	4618      	mov	r0, r3
 8006df0:	f000 ffcc 	bl	8007d8c <xTaskPriorityDisinherit>
 8006df4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	2200      	movs	r2, #0
 8006dfa:	609a      	str	r2, [r3, #8]
 8006dfc:	e043      	b.n	8006e86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d119      	bne.n	8006e38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6858      	ldr	r0, [r3, #4]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	f002 f89e 	bl	8008f50 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	685a      	ldr	r2, [r3, #4]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1c:	441a      	add	r2, r3
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	685a      	ldr	r2, [r3, #4]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	689b      	ldr	r3, [r3, #8]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d32b      	bcc.n	8006e86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	605a      	str	r2, [r3, #4]
 8006e36:	e026      	b.n	8006e86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	68d8      	ldr	r0, [r3, #12]
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e40:	461a      	mov	r2, r3
 8006e42:	68b9      	ldr	r1, [r7, #8]
 8006e44:	f002 f884 	bl	8008f50 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	68da      	ldr	r2, [r3, #12]
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e50:	425b      	negs	r3, r3
 8006e52:	441a      	add	r2, r3
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	68da      	ldr	r2, [r3, #12]
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d207      	bcs.n	8006e74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	689a      	ldr	r2, [r3, #8]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e6c:	425b      	negs	r3, r3
 8006e6e:	441a      	add	r2, r3
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b02      	cmp	r3, #2
 8006e78:	d105      	bne.n	8006e86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e7a:	693b      	ldr	r3, [r7, #16]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d002      	beq.n	8006e86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	3b01      	subs	r3, #1
 8006e84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	1c5a      	adds	r2, r3, #1
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006e8e:	697b      	ldr	r3, [r7, #20]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d018      	beq.n	8006edc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	68da      	ldr	r2, [r3, #12]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006eb2:	441a      	add	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	68da      	ldr	r2, [r3, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d303      	bcc.n	8006ecc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681a      	ldr	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	68d9      	ldr	r1, [r3, #12]
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	6838      	ldr	r0, [r7, #0]
 8006ed8:	f002 f83a 	bl	8008f50 <memcpy>
	}
}
 8006edc:	bf00      	nop
 8006ede:	3708      	adds	r7, #8
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006eec:	f001 fc9c 	bl	8008828 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ef6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006ef8:	e011      	b.n	8006f1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d012      	beq.n	8006f28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	3324      	adds	r3, #36	@ 0x24
 8006f06:	4618      	mov	r0, r3
 8006f08:	f000 fd5c 	bl	80079c4 <xTaskRemoveFromEventList>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006f12:	f000 fe35 	bl	8007b80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006f16:	7bfb      	ldrb	r3, [r7, #15]
 8006f18:	3b01      	subs	r3, #1
 8006f1a:	b2db      	uxtb	r3, r3
 8006f1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	dce9      	bgt.n	8006efa <prvUnlockQueue+0x16>
 8006f26:	e000      	b.n	8006f2a <prvUnlockQueue+0x46>
					break;
 8006f28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	22ff      	movs	r2, #255	@ 0xff
 8006f2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006f32:	f001 fcab 	bl	800888c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006f36:	f001 fc77 	bl	8008828 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006f40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f42:	e011      	b.n	8006f68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d012      	beq.n	8006f72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	3310      	adds	r3, #16
 8006f50:	4618      	mov	r0, r3
 8006f52:	f000 fd37 	bl	80079c4 <xTaskRemoveFromEventList>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d001      	beq.n	8006f60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006f5c:	f000 fe10 	bl	8007b80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006f60:	7bbb      	ldrb	r3, [r7, #14]
 8006f62:	3b01      	subs	r3, #1
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006f68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	dce9      	bgt.n	8006f44 <prvUnlockQueue+0x60>
 8006f70:	e000      	b.n	8006f74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006f72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	22ff      	movs	r2, #255	@ 0xff
 8006f78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006f7c:	f001 fc86 	bl	800888c <vPortExitCritical>
}
 8006f80:	bf00      	nop
 8006f82:	3710      	adds	r7, #16
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd80      	pop	{r7, pc}

08006f88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b084      	sub	sp, #16
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f90:	f001 fc4a 	bl	8008828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d102      	bne.n	8006fa2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f9c:	2301      	movs	r3, #1
 8006f9e:	60fb      	str	r3, [r7, #12]
 8006fa0:	e001      	b.n	8006fa6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fa6:	f001 fc71 	bl	800888c <vPortExitCritical>

	return xReturn;
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3710      	adds	r7, #16
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006fbc:	f001 fc34 	bl	8008828 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d102      	bne.n	8006fd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006fcc:	2301      	movs	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	e001      	b.n	8006fd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006fd6:	f001 fc59 	bl	800888c <vPortExitCritical>

	return xReturn;
 8006fda:	68fb      	ldr	r3, [r7, #12]
}
 8006fdc:	4618      	mov	r0, r3
 8006fde:	3710      	adds	r7, #16
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	bd80      	pop	{r7, pc}

08006fe4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e014      	b.n	800701e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006ff4:	4a0f      	ldr	r2, [pc, #60]	@ (8007034 <vQueueAddToRegistry+0x50>)
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d10b      	bne.n	8007018 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007000:	490c      	ldr	r1, [pc, #48]	@ (8007034 <vQueueAddToRegistry+0x50>)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	683a      	ldr	r2, [r7, #0]
 8007006:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800700a:	4a0a      	ldr	r2, [pc, #40]	@ (8007034 <vQueueAddToRegistry+0x50>)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	00db      	lsls	r3, r3, #3
 8007010:	4413      	add	r3, r2
 8007012:	687a      	ldr	r2, [r7, #4]
 8007014:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007016:	e006      	b.n	8007026 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	3301      	adds	r3, #1
 800701c:	60fb      	str	r3, [r7, #12]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2b07      	cmp	r3, #7
 8007022:	d9e7      	bls.n	8006ff4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007024:	bf00      	nop
 8007026:	bf00      	nop
 8007028:	3714      	adds	r7, #20
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000d78 	.word	0x20000d78

08007038 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007038:	b580      	push	{r7, lr}
 800703a:	b086      	sub	sp, #24
 800703c:	af00      	add	r7, sp, #0
 800703e:	60f8      	str	r0, [r7, #12]
 8007040:	60b9      	str	r1, [r7, #8]
 8007042:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007048:	f001 fbee 	bl	8008828 <vPortEnterCritical>
 800704c:	697b      	ldr	r3, [r7, #20]
 800704e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007052:	b25b      	sxtb	r3, r3
 8007054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007058:	d103      	bne.n	8007062 <vQueueWaitForMessageRestricted+0x2a>
 800705a:	697b      	ldr	r3, [r7, #20]
 800705c:	2200      	movs	r2, #0
 800705e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007068:	b25b      	sxtb	r3, r3
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800706e:	d103      	bne.n	8007078 <vQueueWaitForMessageRestricted+0x40>
 8007070:	697b      	ldr	r3, [r7, #20]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007078:	f001 fc08 	bl	800888c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800707c:	697b      	ldr	r3, [r7, #20]
 800707e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007080:	2b00      	cmp	r3, #0
 8007082:	d106      	bne.n	8007092 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	3324      	adds	r3, #36	@ 0x24
 8007088:	687a      	ldr	r2, [r7, #4]
 800708a:	68b9      	ldr	r1, [r7, #8]
 800708c:	4618      	mov	r0, r3
 800708e:	f000 fc6d 	bl	800796c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007092:	6978      	ldr	r0, [r7, #20]
 8007094:	f7ff ff26 	bl	8006ee4 <prvUnlockQueue>
	}
 8007098:	bf00      	nop
 800709a:	3718      	adds	r7, #24
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08e      	sub	sp, #56	@ 0x38
 80070a4:	af04      	add	r7, sp, #16
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80070ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d10b      	bne.n	80070cc <xTaskCreateStatic+0x2c>
	__asm volatile
 80070b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b8:	f383 8811 	msr	BASEPRI, r3
 80070bc:	f3bf 8f6f 	isb	sy
 80070c0:	f3bf 8f4f 	dsb	sy
 80070c4:	623b      	str	r3, [r7, #32]
}
 80070c6:	bf00      	nop
 80070c8:	bf00      	nop
 80070ca:	e7fd      	b.n	80070c8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80070cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d10b      	bne.n	80070ea <xTaskCreateStatic+0x4a>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	61fb      	str	r3, [r7, #28]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80070ea:	23a8      	movs	r3, #168	@ 0xa8
 80070ec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2ba8      	cmp	r3, #168	@ 0xa8
 80070f2:	d00b      	beq.n	800710c <xTaskCreateStatic+0x6c>
	__asm volatile
 80070f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	61bb      	str	r3, [r7, #24]
}
 8007106:	bf00      	nop
 8007108:	bf00      	nop
 800710a:	e7fd      	b.n	8007108 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800710c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800710e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007110:	2b00      	cmp	r3, #0
 8007112:	d01e      	beq.n	8007152 <xTaskCreateStatic+0xb2>
 8007114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007116:	2b00      	cmp	r3, #0
 8007118:	d01b      	beq.n	8007152 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800711a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800711c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800711e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007120:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007122:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007126:	2202      	movs	r2, #2
 8007128:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800712c:	2300      	movs	r3, #0
 800712e:	9303      	str	r3, [sp, #12]
 8007130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007132:	9302      	str	r3, [sp, #8]
 8007134:	f107 0314 	add.w	r3, r7, #20
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800713c:	9300      	str	r3, [sp, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	687a      	ldr	r2, [r7, #4]
 8007142:	68b9      	ldr	r1, [r7, #8]
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 f851 	bl	80071ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800714a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800714c:	f000 f8f6 	bl	800733c <prvAddNewTaskToReadyList>
 8007150:	e001      	b.n	8007156 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007152:	2300      	movs	r3, #0
 8007154:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007156:	697b      	ldr	r3, [r7, #20]
	}
 8007158:	4618      	mov	r0, r3
 800715a:	3728      	adds	r7, #40	@ 0x28
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007160:	b580      	push	{r7, lr}
 8007162:	b08c      	sub	sp, #48	@ 0x30
 8007164:	af04      	add	r7, sp, #16
 8007166:	60f8      	str	r0, [r7, #12]
 8007168:	60b9      	str	r1, [r7, #8]
 800716a:	603b      	str	r3, [r7, #0]
 800716c:	4613      	mov	r3, r2
 800716e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	009b      	lsls	r3, r3, #2
 8007174:	4618      	mov	r0, r3
 8007176:	f001 fc79 	bl	8008a6c <pvPortMalloc>
 800717a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00e      	beq.n	80071a0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007182:	20a8      	movs	r0, #168	@ 0xa8
 8007184:	f001 fc72 	bl	8008a6c <pvPortMalloc>
 8007188:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800718a:	69fb      	ldr	r3, [r7, #28]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d003      	beq.n	8007198 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007190:	69fb      	ldr	r3, [r7, #28]
 8007192:	697a      	ldr	r2, [r7, #20]
 8007194:	631a      	str	r2, [r3, #48]	@ 0x30
 8007196:	e005      	b.n	80071a4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007198:	6978      	ldr	r0, [r7, #20]
 800719a:	f001 fd35 	bl	8008c08 <vPortFree>
 800719e:	e001      	b.n	80071a4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80071a0:	2300      	movs	r3, #0
 80071a2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80071a4:	69fb      	ldr	r3, [r7, #28]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d017      	beq.n	80071da <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80071aa:	69fb      	ldr	r3, [r7, #28]
 80071ac:	2200      	movs	r2, #0
 80071ae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80071b2:	88fa      	ldrh	r2, [r7, #6]
 80071b4:	2300      	movs	r3, #0
 80071b6:	9303      	str	r3, [sp, #12]
 80071b8:	69fb      	ldr	r3, [r7, #28]
 80071ba:	9302      	str	r3, [sp, #8]
 80071bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071be:	9301      	str	r3, [sp, #4]
 80071c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071c2:	9300      	str	r3, [sp, #0]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	68b9      	ldr	r1, [r7, #8]
 80071c8:	68f8      	ldr	r0, [r7, #12]
 80071ca:	f000 f80f 	bl	80071ec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80071ce:	69f8      	ldr	r0, [r7, #28]
 80071d0:	f000 f8b4 	bl	800733c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80071d4:	2301      	movs	r3, #1
 80071d6:	61bb      	str	r3, [r7, #24]
 80071d8:	e002      	b.n	80071e0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80071da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071de:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80071e0:	69bb      	ldr	r3, [r7, #24]
	}
 80071e2:	4618      	mov	r0, r3
 80071e4:	3720      	adds	r7, #32
 80071e6:	46bd      	mov	sp, r7
 80071e8:	bd80      	pop	{r7, pc}
	...

080071ec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b088      	sub	sp, #32
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	60f8      	str	r0, [r7, #12]
 80071f4:	60b9      	str	r1, [r7, #8]
 80071f6:	607a      	str	r2, [r7, #4]
 80071f8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80071fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	009b      	lsls	r3, r3, #2
 8007202:	461a      	mov	r2, r3
 8007204:	21a5      	movs	r1, #165	@ 0xa5
 8007206:	f001 fe1f 	bl	8008e48 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800720a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800720c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007214:	3b01      	subs	r3, #1
 8007216:	009b      	lsls	r3, r3, #2
 8007218:	4413      	add	r3, r2
 800721a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800721c:	69bb      	ldr	r3, [r7, #24]
 800721e:	f023 0307 	bic.w	r3, r3, #7
 8007222:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007224:	69bb      	ldr	r3, [r7, #24]
 8007226:	f003 0307 	and.w	r3, r3, #7
 800722a:	2b00      	cmp	r3, #0
 800722c:	d00b      	beq.n	8007246 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	617b      	str	r3, [r7, #20]
}
 8007240:	bf00      	nop
 8007242:	bf00      	nop
 8007244:	e7fd      	b.n	8007242 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d01f      	beq.n	800728c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800724c:	2300      	movs	r3, #0
 800724e:	61fb      	str	r3, [r7, #28]
 8007250:	e012      	b.n	8007278 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	69fb      	ldr	r3, [r7, #28]
 8007256:	4413      	add	r3, r2
 8007258:	7819      	ldrb	r1, [r3, #0]
 800725a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800725c:	69fb      	ldr	r3, [r7, #28]
 800725e:	4413      	add	r3, r2
 8007260:	3334      	adds	r3, #52	@ 0x34
 8007262:	460a      	mov	r2, r1
 8007264:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007266:	68ba      	ldr	r2, [r7, #8]
 8007268:	69fb      	ldr	r3, [r7, #28]
 800726a:	4413      	add	r3, r2
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d006      	beq.n	8007280 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007272:	69fb      	ldr	r3, [r7, #28]
 8007274:	3301      	adds	r3, #1
 8007276:	61fb      	str	r3, [r7, #28]
 8007278:	69fb      	ldr	r3, [r7, #28]
 800727a:	2b0f      	cmp	r3, #15
 800727c:	d9e9      	bls.n	8007252 <prvInitialiseNewTask+0x66>
 800727e:	e000      	b.n	8007282 <prvInitialiseNewTask+0x96>
			{
				break;
 8007280:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007282:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800728a:	e003      	b.n	8007294 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800728c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800728e:	2200      	movs	r2, #0
 8007290:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007296:	2b37      	cmp	r3, #55	@ 0x37
 8007298:	d901      	bls.n	800729e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800729a:	2337      	movs	r3, #55	@ 0x37
 800729c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80072a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80072a8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80072aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ac:	2200      	movs	r2, #0
 80072ae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80072b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072b2:	3304      	adds	r3, #4
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7ff f965 	bl	8006584 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80072ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072bc:	3318      	adds	r3, #24
 80072be:	4618      	mov	r0, r3
 80072c0:	f7ff f960 	bl	8006584 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80072c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072c8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80072cc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80072d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80072d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80072d8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80072da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072dc:	2200      	movs	r2, #0
 80072de:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80072e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072e4:	2200      	movs	r2, #0
 80072e6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80072ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072ec:	3354      	adds	r3, #84	@ 0x54
 80072ee:	224c      	movs	r2, #76	@ 0x4c
 80072f0:	2100      	movs	r1, #0
 80072f2:	4618      	mov	r0, r3
 80072f4:	f001 fda8 	bl	8008e48 <memset>
 80072f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072fa:	4a0d      	ldr	r2, [pc, #52]	@ (8007330 <prvInitialiseNewTask+0x144>)
 80072fc:	659a      	str	r2, [r3, #88]	@ 0x58
 80072fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007300:	4a0c      	ldr	r2, [pc, #48]	@ (8007334 <prvInitialiseNewTask+0x148>)
 8007302:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007306:	4a0c      	ldr	r2, [pc, #48]	@ (8007338 <prvInitialiseNewTask+0x14c>)
 8007308:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	68f9      	ldr	r1, [r7, #12]
 800730e:	69b8      	ldr	r0, [r7, #24]
 8007310:	f001 f95a 	bl	80085c8 <pxPortInitialiseStack>
 8007314:	4602      	mov	r2, r0
 8007316:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007318:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800731a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800731c:	2b00      	cmp	r3, #0
 800731e:	d002      	beq.n	8007326 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007322:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007324:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007326:	bf00      	nop
 8007328:	3720      	adds	r7, #32
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	2000500c 	.word	0x2000500c
 8007334:	20005074 	.word	0x20005074
 8007338:	200050dc 	.word	0x200050dc

0800733c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800733c:	b580      	push	{r7, lr}
 800733e:	b082      	sub	sp, #8
 8007340:	af00      	add	r7, sp, #0
 8007342:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007344:	f001 fa70 	bl	8008828 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007348:	4b2d      	ldr	r3, [pc, #180]	@ (8007400 <prvAddNewTaskToReadyList+0xc4>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	3301      	adds	r3, #1
 800734e:	4a2c      	ldr	r2, [pc, #176]	@ (8007400 <prvAddNewTaskToReadyList+0xc4>)
 8007350:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007352:	4b2c      	ldr	r3, [pc, #176]	@ (8007404 <prvAddNewTaskToReadyList+0xc8>)
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d109      	bne.n	800736e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800735a:	4a2a      	ldr	r2, [pc, #168]	@ (8007404 <prvAddNewTaskToReadyList+0xc8>)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007360:	4b27      	ldr	r3, [pc, #156]	@ (8007400 <prvAddNewTaskToReadyList+0xc4>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b01      	cmp	r3, #1
 8007366:	d110      	bne.n	800738a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007368:	f000 fc2e 	bl	8007bc8 <prvInitialiseTaskLists>
 800736c:	e00d      	b.n	800738a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800736e:	4b26      	ldr	r3, [pc, #152]	@ (8007408 <prvAddNewTaskToReadyList+0xcc>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d109      	bne.n	800738a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007376:	4b23      	ldr	r3, [pc, #140]	@ (8007404 <prvAddNewTaskToReadyList+0xc8>)
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007380:	429a      	cmp	r2, r3
 8007382:	d802      	bhi.n	800738a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007384:	4a1f      	ldr	r2, [pc, #124]	@ (8007404 <prvAddNewTaskToReadyList+0xc8>)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800738a:	4b20      	ldr	r3, [pc, #128]	@ (800740c <prvAddNewTaskToReadyList+0xd0>)
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	3301      	adds	r3, #1
 8007390:	4a1e      	ldr	r2, [pc, #120]	@ (800740c <prvAddNewTaskToReadyList+0xd0>)
 8007392:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007394:	4b1d      	ldr	r3, [pc, #116]	@ (800740c <prvAddNewTaskToReadyList+0xd0>)
 8007396:	681a      	ldr	r2, [r3, #0]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073a0:	4b1b      	ldr	r3, [pc, #108]	@ (8007410 <prvAddNewTaskToReadyList+0xd4>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	429a      	cmp	r2, r3
 80073a6:	d903      	bls.n	80073b0 <prvAddNewTaskToReadyList+0x74>
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073ac:	4a18      	ldr	r2, [pc, #96]	@ (8007410 <prvAddNewTaskToReadyList+0xd4>)
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	4a15      	ldr	r2, [pc, #84]	@ (8007414 <prvAddNewTaskToReadyList+0xd8>)
 80073be:	441a      	add	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	3304      	adds	r3, #4
 80073c4:	4619      	mov	r1, r3
 80073c6:	4610      	mov	r0, r2
 80073c8:	f7ff f8e9 	bl	800659e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80073cc:	f001 fa5e 	bl	800888c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80073d0:	4b0d      	ldr	r3, [pc, #52]	@ (8007408 <prvAddNewTaskToReadyList+0xcc>)
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d00e      	beq.n	80073f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80073d8:	4b0a      	ldr	r3, [pc, #40]	@ (8007404 <prvAddNewTaskToReadyList+0xc8>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073e2:	429a      	cmp	r2, r3
 80073e4:	d207      	bcs.n	80073f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80073e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007418 <prvAddNewTaskToReadyList+0xdc>)
 80073e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073ec:	601a      	str	r2, [r3, #0]
 80073ee:	f3bf 8f4f 	dsb	sy
 80073f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80073f6:	bf00      	nop
 80073f8:	3708      	adds	r7, #8
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	2000128c 	.word	0x2000128c
 8007404:	20000db8 	.word	0x20000db8
 8007408:	20001298 	.word	0x20001298
 800740c:	200012a8 	.word	0x200012a8
 8007410:	20001294 	.word	0x20001294
 8007414:	20000dbc 	.word	0x20000dbc
 8007418:	e000ed04 	.word	0xe000ed04

0800741c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800741c:	b580      	push	{r7, lr}
 800741e:	b084      	sub	sp, #16
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007424:	2300      	movs	r3, #0
 8007426:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d018      	beq.n	8007460 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800742e:	4b14      	ldr	r3, [pc, #80]	@ (8007480 <vTaskDelay+0x64>)
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d00b      	beq.n	800744e <vTaskDelay+0x32>
	__asm volatile
 8007436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800743a:	f383 8811 	msr	BASEPRI, r3
 800743e:	f3bf 8f6f 	isb	sy
 8007442:	f3bf 8f4f 	dsb	sy
 8007446:	60bb      	str	r3, [r7, #8]
}
 8007448:	bf00      	nop
 800744a:	bf00      	nop
 800744c:	e7fd      	b.n	800744a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800744e:	f000 f88b 	bl	8007568 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007452:	2100      	movs	r1, #0
 8007454:	6878      	ldr	r0, [r7, #4]
 8007456:	f000 fd09 	bl	8007e6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800745a:	f000 f893 	bl	8007584 <xTaskResumeAll>
 800745e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d107      	bne.n	8007476 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8007466:	4b07      	ldr	r3, [pc, #28]	@ (8007484 <vTaskDelay+0x68>)
 8007468:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	f3bf 8f4f 	dsb	sy
 8007472:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007476:	bf00      	nop
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	200012b4 	.word	0x200012b4
 8007484:	e000ed04 	.word	0xe000ed04

08007488 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	@ 0x28
 800748c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800748e:	2300      	movs	r3, #0
 8007490:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007492:	2300      	movs	r3, #0
 8007494:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007496:	463a      	mov	r2, r7
 8007498:	1d39      	adds	r1, r7, #4
 800749a:	f107 0308 	add.w	r3, r7, #8
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff f81c 	bl	80064dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80074a4:	6839      	ldr	r1, [r7, #0]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	9202      	str	r2, [sp, #8]
 80074ac:	9301      	str	r3, [sp, #4]
 80074ae:	2300      	movs	r3, #0
 80074b0:	9300      	str	r3, [sp, #0]
 80074b2:	2300      	movs	r3, #0
 80074b4:	460a      	mov	r2, r1
 80074b6:	4924      	ldr	r1, [pc, #144]	@ (8007548 <vTaskStartScheduler+0xc0>)
 80074b8:	4824      	ldr	r0, [pc, #144]	@ (800754c <vTaskStartScheduler+0xc4>)
 80074ba:	f7ff fdf1 	bl	80070a0 <xTaskCreateStatic>
 80074be:	4603      	mov	r3, r0
 80074c0:	4a23      	ldr	r2, [pc, #140]	@ (8007550 <vTaskStartScheduler+0xc8>)
 80074c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80074c4:	4b22      	ldr	r3, [pc, #136]	@ (8007550 <vTaskStartScheduler+0xc8>)
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80074cc:	2301      	movs	r3, #1
 80074ce:	617b      	str	r3, [r7, #20]
 80074d0:	e001      	b.n	80074d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80074d2:	2300      	movs	r3, #0
 80074d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80074d6:	697b      	ldr	r3, [r7, #20]
 80074d8:	2b01      	cmp	r3, #1
 80074da:	d102      	bne.n	80074e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80074dc:	f000 fd1a 	bl	8007f14 <xTimerCreateTimerTask>
 80074e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b01      	cmp	r3, #1
 80074e6:	d11b      	bne.n	8007520 <vTaskStartScheduler+0x98>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	613b      	str	r3, [r7, #16]
}
 80074fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80074fc:	4b15      	ldr	r3, [pc, #84]	@ (8007554 <vTaskStartScheduler+0xcc>)
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	3354      	adds	r3, #84	@ 0x54
 8007502:	4a15      	ldr	r2, [pc, #84]	@ (8007558 <vTaskStartScheduler+0xd0>)
 8007504:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007506:	4b15      	ldr	r3, [pc, #84]	@ (800755c <vTaskStartScheduler+0xd4>)
 8007508:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800750c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800750e:	4b14      	ldr	r3, [pc, #80]	@ (8007560 <vTaskStartScheduler+0xd8>)
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007514:	4b13      	ldr	r3, [pc, #76]	@ (8007564 <vTaskStartScheduler+0xdc>)
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800751a:	f001 f8e1 	bl	80086e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800751e:	e00f      	b.n	8007540 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007520:	697b      	ldr	r3, [r7, #20]
 8007522:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007526:	d10b      	bne.n	8007540 <vTaskStartScheduler+0xb8>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	60fb      	str	r3, [r7, #12]
}
 800753a:	bf00      	nop
 800753c:	bf00      	nop
 800753e:	e7fd      	b.n	800753c <vTaskStartScheduler+0xb4>
}
 8007540:	bf00      	nop
 8007542:	3718      	adds	r7, #24
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}
 8007548:	08009064 	.word	0x08009064
 800754c:	08007b99 	.word	0x08007b99
 8007550:	200012b0 	.word	0x200012b0
 8007554:	20000db8 	.word	0x20000db8
 8007558:	20000010 	.word	0x20000010
 800755c:	200012ac 	.word	0x200012ac
 8007560:	20001298 	.word	0x20001298
 8007564:	20001290 	.word	0x20001290

08007568 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800756c:	4b04      	ldr	r3, [pc, #16]	@ (8007580 <vTaskSuspendAll+0x18>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	4a03      	ldr	r2, [pc, #12]	@ (8007580 <vTaskSuspendAll+0x18>)
 8007574:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007576:	bf00      	nop
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr
 8007580:	200012b4 	.word	0x200012b4

08007584 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800758a:	2300      	movs	r3, #0
 800758c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800758e:	2300      	movs	r3, #0
 8007590:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007592:	4b42      	ldr	r3, [pc, #264]	@ (800769c <xTaskResumeAll+0x118>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10b      	bne.n	80075b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800759a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800759e:	f383 8811 	msr	BASEPRI, r3
 80075a2:	f3bf 8f6f 	isb	sy
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	603b      	str	r3, [r7, #0]
}
 80075ac:	bf00      	nop
 80075ae:	bf00      	nop
 80075b0:	e7fd      	b.n	80075ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80075b2:	f001 f939 	bl	8008828 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80075b6:	4b39      	ldr	r3, [pc, #228]	@ (800769c <xTaskResumeAll+0x118>)
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	4a37      	ldr	r2, [pc, #220]	@ (800769c <xTaskResumeAll+0x118>)
 80075be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c0:	4b36      	ldr	r3, [pc, #216]	@ (800769c <xTaskResumeAll+0x118>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d162      	bne.n	800768e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80075c8:	4b35      	ldr	r3, [pc, #212]	@ (80076a0 <xTaskResumeAll+0x11c>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d05e      	beq.n	800768e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80075d0:	e02f      	b.n	8007632 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075d2:	4b34      	ldr	r3, [pc, #208]	@ (80076a4 <xTaskResumeAll+0x120>)
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3318      	adds	r3, #24
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff f83a 	bl	8006658 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	3304      	adds	r3, #4
 80075e8:	4618      	mov	r0, r3
 80075ea:	f7ff f835 	bl	8006658 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80075f2:	4b2d      	ldr	r3, [pc, #180]	@ (80076a8 <xTaskResumeAll+0x124>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d903      	bls.n	8007602 <xTaskResumeAll+0x7e>
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075fe:	4a2a      	ldr	r2, [pc, #168]	@ (80076a8 <xTaskResumeAll+0x124>)
 8007600:	6013      	str	r3, [r2, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007606:	4613      	mov	r3, r2
 8007608:	009b      	lsls	r3, r3, #2
 800760a:	4413      	add	r3, r2
 800760c:	009b      	lsls	r3, r3, #2
 800760e:	4a27      	ldr	r2, [pc, #156]	@ (80076ac <xTaskResumeAll+0x128>)
 8007610:	441a      	add	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	3304      	adds	r3, #4
 8007616:	4619      	mov	r1, r3
 8007618:	4610      	mov	r0, r2
 800761a:	f7fe ffc0 	bl	800659e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007622:	4b23      	ldr	r3, [pc, #140]	@ (80076b0 <xTaskResumeAll+0x12c>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007628:	429a      	cmp	r2, r3
 800762a:	d302      	bcc.n	8007632 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800762c:	4b21      	ldr	r3, [pc, #132]	@ (80076b4 <xTaskResumeAll+0x130>)
 800762e:	2201      	movs	r2, #1
 8007630:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007632:	4b1c      	ldr	r3, [pc, #112]	@ (80076a4 <xTaskResumeAll+0x120>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1cb      	bne.n	80075d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007640:	f000 fb66 	bl	8007d10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007644:	4b1c      	ldr	r3, [pc, #112]	@ (80076b8 <xTaskResumeAll+0x134>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	2b00      	cmp	r3, #0
 800764e:	d010      	beq.n	8007672 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007650:	f000 f846 	bl	80076e0 <xTaskIncrementTick>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d002      	beq.n	8007660 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800765a:	4b16      	ldr	r3, [pc, #88]	@ (80076b4 <xTaskResumeAll+0x130>)
 800765c:	2201      	movs	r2, #1
 800765e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	3b01      	subs	r3, #1
 8007664:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1f1      	bne.n	8007650 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800766c:	4b12      	ldr	r3, [pc, #72]	@ (80076b8 <xTaskResumeAll+0x134>)
 800766e:	2200      	movs	r2, #0
 8007670:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007672:	4b10      	ldr	r3, [pc, #64]	@ (80076b4 <xTaskResumeAll+0x130>)
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d009      	beq.n	800768e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800767a:	2301      	movs	r3, #1
 800767c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800767e:	4b0f      	ldr	r3, [pc, #60]	@ (80076bc <xTaskResumeAll+0x138>)
 8007680:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007684:	601a      	str	r2, [r3, #0]
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800768e:	f001 f8fd 	bl	800888c <vPortExitCritical>

	return xAlreadyYielded;
 8007692:	68bb      	ldr	r3, [r7, #8]
}
 8007694:	4618      	mov	r0, r3
 8007696:	3710      	adds	r7, #16
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	200012b4 	.word	0x200012b4
 80076a0:	2000128c 	.word	0x2000128c
 80076a4:	2000124c 	.word	0x2000124c
 80076a8:	20001294 	.word	0x20001294
 80076ac:	20000dbc 	.word	0x20000dbc
 80076b0:	20000db8 	.word	0x20000db8
 80076b4:	200012a0 	.word	0x200012a0
 80076b8:	2000129c 	.word	0x2000129c
 80076bc:	e000ed04 	.word	0xe000ed04

080076c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80076c6:	4b05      	ldr	r3, [pc, #20]	@ (80076dc <xTaskGetTickCount+0x1c>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80076cc:	687b      	ldr	r3, [r7, #4]
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	370c      	adds	r7, #12
 80076d2:	46bd      	mov	sp, r7
 80076d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	20001290 	.word	0x20001290

080076e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80076e0:	b580      	push	{r7, lr}
 80076e2:	b086      	sub	sp, #24
 80076e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80076e6:	2300      	movs	r3, #0
 80076e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80076ea:	4b4f      	ldr	r3, [pc, #316]	@ (8007828 <xTaskIncrementTick+0x148>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	f040 8090 	bne.w	8007814 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80076f4:	4b4d      	ldr	r3, [pc, #308]	@ (800782c <xTaskIncrementTick+0x14c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	3301      	adds	r3, #1
 80076fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80076fc:	4a4b      	ldr	r2, [pc, #300]	@ (800782c <xTaskIncrementTick+0x14c>)
 80076fe:	693b      	ldr	r3, [r7, #16]
 8007700:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d121      	bne.n	800774c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007708:	4b49      	ldr	r3, [pc, #292]	@ (8007830 <xTaskIncrementTick+0x150>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00b      	beq.n	800772a <xTaskIncrementTick+0x4a>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	603b      	str	r3, [r7, #0]
}
 8007724:	bf00      	nop
 8007726:	bf00      	nop
 8007728:	e7fd      	b.n	8007726 <xTaskIncrementTick+0x46>
 800772a:	4b41      	ldr	r3, [pc, #260]	@ (8007830 <xTaskIncrementTick+0x150>)
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	60fb      	str	r3, [r7, #12]
 8007730:	4b40      	ldr	r3, [pc, #256]	@ (8007834 <xTaskIncrementTick+0x154>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4a3e      	ldr	r2, [pc, #248]	@ (8007830 <xTaskIncrementTick+0x150>)
 8007736:	6013      	str	r3, [r2, #0]
 8007738:	4a3e      	ldr	r2, [pc, #248]	@ (8007834 <xTaskIncrementTick+0x154>)
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6013      	str	r3, [r2, #0]
 800773e:	4b3e      	ldr	r3, [pc, #248]	@ (8007838 <xTaskIncrementTick+0x158>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	3301      	adds	r3, #1
 8007744:	4a3c      	ldr	r2, [pc, #240]	@ (8007838 <xTaskIncrementTick+0x158>)
 8007746:	6013      	str	r3, [r2, #0]
 8007748:	f000 fae2 	bl	8007d10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800774c:	4b3b      	ldr	r3, [pc, #236]	@ (800783c <xTaskIncrementTick+0x15c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	693a      	ldr	r2, [r7, #16]
 8007752:	429a      	cmp	r2, r3
 8007754:	d349      	bcc.n	80077ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007756:	4b36      	ldr	r3, [pc, #216]	@ (8007830 <xTaskIncrementTick+0x150>)
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d104      	bne.n	800776a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007760:	4b36      	ldr	r3, [pc, #216]	@ (800783c <xTaskIncrementTick+0x15c>)
 8007762:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007766:	601a      	str	r2, [r3, #0]
					break;
 8007768:	e03f      	b.n	80077ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800776a:	4b31      	ldr	r3, [pc, #196]	@ (8007830 <xTaskIncrementTick+0x150>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	68db      	ldr	r3, [r3, #12]
 8007772:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007774:	68bb      	ldr	r3, [r7, #8]
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800777a:	693a      	ldr	r2, [r7, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	429a      	cmp	r2, r3
 8007780:	d203      	bcs.n	800778a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007782:	4a2e      	ldr	r2, [pc, #184]	@ (800783c <xTaskIncrementTick+0x15c>)
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007788:	e02f      	b.n	80077ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	3304      	adds	r3, #4
 800778e:	4618      	mov	r0, r3
 8007790:	f7fe ff62 	bl	8006658 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d004      	beq.n	80077a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800779c:	68bb      	ldr	r3, [r7, #8]
 800779e:	3318      	adds	r3, #24
 80077a0:	4618      	mov	r0, r3
 80077a2:	f7fe ff59 	bl	8006658 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077aa:	4b25      	ldr	r3, [pc, #148]	@ (8007840 <xTaskIncrementTick+0x160>)
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d903      	bls.n	80077ba <xTaskIncrementTick+0xda>
 80077b2:	68bb      	ldr	r3, [r7, #8]
 80077b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077b6:	4a22      	ldr	r2, [pc, #136]	@ (8007840 <xTaskIncrementTick+0x160>)
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077be:	4613      	mov	r3, r2
 80077c0:	009b      	lsls	r3, r3, #2
 80077c2:	4413      	add	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4a1f      	ldr	r2, [pc, #124]	@ (8007844 <xTaskIncrementTick+0x164>)
 80077c8:	441a      	add	r2, r3
 80077ca:	68bb      	ldr	r3, [r7, #8]
 80077cc:	3304      	adds	r3, #4
 80077ce:	4619      	mov	r1, r3
 80077d0:	4610      	mov	r0, r2
 80077d2:	f7fe fee4 	bl	800659e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077da:	4b1b      	ldr	r3, [pc, #108]	@ (8007848 <xTaskIncrementTick+0x168>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d3b8      	bcc.n	8007756 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80077e4:	2301      	movs	r3, #1
 80077e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80077e8:	e7b5      	b.n	8007756 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80077ea:	4b17      	ldr	r3, [pc, #92]	@ (8007848 <xTaskIncrementTick+0x168>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80077f0:	4914      	ldr	r1, [pc, #80]	@ (8007844 <xTaskIncrementTick+0x164>)
 80077f2:	4613      	mov	r3, r2
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	009b      	lsls	r3, r3, #2
 80077fa:	440b      	add	r3, r1
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2b01      	cmp	r3, #1
 8007800:	d901      	bls.n	8007806 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007802:	2301      	movs	r3, #1
 8007804:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007806:	4b11      	ldr	r3, [pc, #68]	@ (800784c <xTaskIncrementTick+0x16c>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d007      	beq.n	800781e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800780e:	2301      	movs	r3, #1
 8007810:	617b      	str	r3, [r7, #20]
 8007812:	e004      	b.n	800781e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007814:	4b0e      	ldr	r3, [pc, #56]	@ (8007850 <xTaskIncrementTick+0x170>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	3301      	adds	r3, #1
 800781a:	4a0d      	ldr	r2, [pc, #52]	@ (8007850 <xTaskIncrementTick+0x170>)
 800781c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800781e:	697b      	ldr	r3, [r7, #20]
}
 8007820:	4618      	mov	r0, r3
 8007822:	3718      	adds	r7, #24
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	200012b4 	.word	0x200012b4
 800782c:	20001290 	.word	0x20001290
 8007830:	20001244 	.word	0x20001244
 8007834:	20001248 	.word	0x20001248
 8007838:	200012a4 	.word	0x200012a4
 800783c:	200012ac 	.word	0x200012ac
 8007840:	20001294 	.word	0x20001294
 8007844:	20000dbc 	.word	0x20000dbc
 8007848:	20000db8 	.word	0x20000db8
 800784c:	200012a0 	.word	0x200012a0
 8007850:	2000129c 	.word	0x2000129c

08007854 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007854:	b480      	push	{r7}
 8007856:	b085      	sub	sp, #20
 8007858:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800785a:	4b2b      	ldr	r3, [pc, #172]	@ (8007908 <vTaskSwitchContext+0xb4>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d003      	beq.n	800786a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007862:	4b2a      	ldr	r3, [pc, #168]	@ (800790c <vTaskSwitchContext+0xb8>)
 8007864:	2201      	movs	r2, #1
 8007866:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007868:	e047      	b.n	80078fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800786a:	4b28      	ldr	r3, [pc, #160]	@ (800790c <vTaskSwitchContext+0xb8>)
 800786c:	2200      	movs	r2, #0
 800786e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007870:	4b27      	ldr	r3, [pc, #156]	@ (8007910 <vTaskSwitchContext+0xbc>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	60fb      	str	r3, [r7, #12]
 8007876:	e011      	b.n	800789c <vTaskSwitchContext+0x48>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d10b      	bne.n	8007896 <vTaskSwitchContext+0x42>
	__asm volatile
 800787e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007882:	f383 8811 	msr	BASEPRI, r3
 8007886:	f3bf 8f6f 	isb	sy
 800788a:	f3bf 8f4f 	dsb	sy
 800788e:	607b      	str	r3, [r7, #4]
}
 8007890:	bf00      	nop
 8007892:	bf00      	nop
 8007894:	e7fd      	b.n	8007892 <vTaskSwitchContext+0x3e>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	3b01      	subs	r3, #1
 800789a:	60fb      	str	r3, [r7, #12]
 800789c:	491d      	ldr	r1, [pc, #116]	@ (8007914 <vTaskSwitchContext+0xc0>)
 800789e:	68fa      	ldr	r2, [r7, #12]
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	440b      	add	r3, r1
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d0e3      	beq.n	8007878 <vTaskSwitchContext+0x24>
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	4613      	mov	r3, r2
 80078b4:	009b      	lsls	r3, r3, #2
 80078b6:	4413      	add	r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4a16      	ldr	r2, [pc, #88]	@ (8007914 <vTaskSwitchContext+0xc0>)
 80078bc:	4413      	add	r3, r2
 80078be:	60bb      	str	r3, [r7, #8]
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	685b      	ldr	r3, [r3, #4]
 80078c4:	685a      	ldr	r2, [r3, #4]
 80078c6:	68bb      	ldr	r3, [r7, #8]
 80078c8:	605a      	str	r2, [r3, #4]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	3308      	adds	r3, #8
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d104      	bne.n	80078e0 <vTaskSwitchContext+0x8c>
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	685b      	ldr	r3, [r3, #4]
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	68bb      	ldr	r3, [r7, #8]
 80078de:	605a      	str	r2, [r3, #4]
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	68db      	ldr	r3, [r3, #12]
 80078e6:	4a0c      	ldr	r2, [pc, #48]	@ (8007918 <vTaskSwitchContext+0xc4>)
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	4a09      	ldr	r2, [pc, #36]	@ (8007910 <vTaskSwitchContext+0xbc>)
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80078f0:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <vTaskSwitchContext+0xc4>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	3354      	adds	r3, #84	@ 0x54
 80078f6:	4a09      	ldr	r2, [pc, #36]	@ (800791c <vTaskSwitchContext+0xc8>)
 80078f8:	6013      	str	r3, [r2, #0]
}
 80078fa:	bf00      	nop
 80078fc:	3714      	adds	r7, #20
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	200012b4 	.word	0x200012b4
 800790c:	200012a0 	.word	0x200012a0
 8007910:	20001294 	.word	0x20001294
 8007914:	20000dbc 	.word	0x20000dbc
 8007918:	20000db8 	.word	0x20000db8
 800791c:	20000010 	.word	0x20000010

08007920 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b084      	sub	sp, #16
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
 8007928:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d10b      	bne.n	8007948 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007930:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007934:	f383 8811 	msr	BASEPRI, r3
 8007938:	f3bf 8f6f 	isb	sy
 800793c:	f3bf 8f4f 	dsb	sy
 8007940:	60fb      	str	r3, [r7, #12]
}
 8007942:	bf00      	nop
 8007944:	bf00      	nop
 8007946:	e7fd      	b.n	8007944 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007948:	4b07      	ldr	r3, [pc, #28]	@ (8007968 <vTaskPlaceOnEventList+0x48>)
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	3318      	adds	r3, #24
 800794e:	4619      	mov	r1, r3
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7fe fe48 	bl	80065e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007956:	2101      	movs	r1, #1
 8007958:	6838      	ldr	r0, [r7, #0]
 800795a:	f000 fa87 	bl	8007e6c <prvAddCurrentTaskToDelayedList>
}
 800795e:	bf00      	nop
 8007960:	3710      	adds	r7, #16
 8007962:	46bd      	mov	sp, r7
 8007964:	bd80      	pop	{r7, pc}
 8007966:	bf00      	nop
 8007968:	20000db8 	.word	0x20000db8

0800796c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800796c:	b580      	push	{r7, lr}
 800796e:	b086      	sub	sp, #24
 8007970:	af00      	add	r7, sp, #0
 8007972:	60f8      	str	r0, [r7, #12]
 8007974:	60b9      	str	r1, [r7, #8]
 8007976:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d10b      	bne.n	8007996 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800797e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007982:	f383 8811 	msr	BASEPRI, r3
 8007986:	f3bf 8f6f 	isb	sy
 800798a:	f3bf 8f4f 	dsb	sy
 800798e:	617b      	str	r3, [r7, #20]
}
 8007990:	bf00      	nop
 8007992:	bf00      	nop
 8007994:	e7fd      	b.n	8007992 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007996:	4b0a      	ldr	r3, [pc, #40]	@ (80079c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	3318      	adds	r3, #24
 800799c:	4619      	mov	r1, r3
 800799e:	68f8      	ldr	r0, [r7, #12]
 80079a0:	f7fe fdfd 	bl	800659e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80079aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80079ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80079b0:	6879      	ldr	r1, [r7, #4]
 80079b2:	68b8      	ldr	r0, [r7, #8]
 80079b4:	f000 fa5a 	bl	8007e6c <prvAddCurrentTaskToDelayedList>
	}
 80079b8:	bf00      	nop
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000db8 	.word	0x20000db8

080079c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d10b      	bne.n	80079f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80079da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079de:	f383 8811 	msr	BASEPRI, r3
 80079e2:	f3bf 8f6f 	isb	sy
 80079e6:	f3bf 8f4f 	dsb	sy
 80079ea:	60fb      	str	r3, [r7, #12]
}
 80079ec:	bf00      	nop
 80079ee:	bf00      	nop
 80079f0:	e7fd      	b.n	80079ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	3318      	adds	r3, #24
 80079f6:	4618      	mov	r0, r3
 80079f8:	f7fe fe2e 	bl	8006658 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079fc:	4b1d      	ldr	r3, [pc, #116]	@ (8007a74 <xTaskRemoveFromEventList+0xb0>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d11d      	bne.n	8007a40 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	3304      	adds	r3, #4
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f7fe fe25 	bl	8006658 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007a0e:	693b      	ldr	r3, [r7, #16]
 8007a10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a12:	4b19      	ldr	r3, [pc, #100]	@ (8007a78 <xTaskRemoveFromEventList+0xb4>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	429a      	cmp	r2, r3
 8007a18:	d903      	bls.n	8007a22 <xTaskRemoveFromEventList+0x5e>
 8007a1a:	693b      	ldr	r3, [r7, #16]
 8007a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a1e:	4a16      	ldr	r2, [pc, #88]	@ (8007a78 <xTaskRemoveFromEventList+0xb4>)
 8007a20:	6013      	str	r3, [r2, #0]
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a26:	4613      	mov	r3, r2
 8007a28:	009b      	lsls	r3, r3, #2
 8007a2a:	4413      	add	r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	4a13      	ldr	r2, [pc, #76]	@ (8007a7c <xTaskRemoveFromEventList+0xb8>)
 8007a30:	441a      	add	r2, r3
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	3304      	adds	r3, #4
 8007a36:	4619      	mov	r1, r3
 8007a38:	4610      	mov	r0, r2
 8007a3a:	f7fe fdb0 	bl	800659e <vListInsertEnd>
 8007a3e:	e005      	b.n	8007a4c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	3318      	adds	r3, #24
 8007a44:	4619      	mov	r1, r3
 8007a46:	480e      	ldr	r0, [pc, #56]	@ (8007a80 <xTaskRemoveFromEventList+0xbc>)
 8007a48:	f7fe fda9 	bl	800659e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a4c:	693b      	ldr	r3, [r7, #16]
 8007a4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a50:	4b0c      	ldr	r3, [pc, #48]	@ (8007a84 <xTaskRemoveFromEventList+0xc0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a56:	429a      	cmp	r2, r3
 8007a58:	d905      	bls.n	8007a66 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007a5e:	4b0a      	ldr	r3, [pc, #40]	@ (8007a88 <xTaskRemoveFromEventList+0xc4>)
 8007a60:	2201      	movs	r2, #1
 8007a62:	601a      	str	r2, [r3, #0]
 8007a64:	e001      	b.n	8007a6a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007a66:	2300      	movs	r3, #0
 8007a68:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007a6a:	697b      	ldr	r3, [r7, #20]
}
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	3718      	adds	r7, #24
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}
 8007a74:	200012b4 	.word	0x200012b4
 8007a78:	20001294 	.word	0x20001294
 8007a7c:	20000dbc 	.word	0x20000dbc
 8007a80:	2000124c 	.word	0x2000124c
 8007a84:	20000db8 	.word	0x20000db8
 8007a88:	200012a0 	.word	0x200012a0

08007a8c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007a94:	4b06      	ldr	r3, [pc, #24]	@ (8007ab0 <vTaskInternalSetTimeOutState+0x24>)
 8007a96:	681a      	ldr	r2, [r3, #0]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007a9c:	4b05      	ldr	r3, [pc, #20]	@ (8007ab4 <vTaskInternalSetTimeOutState+0x28>)
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	605a      	str	r2, [r3, #4]
}
 8007aa4:	bf00      	nop
 8007aa6:	370c      	adds	r7, #12
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aae:	4770      	bx	lr
 8007ab0:	200012a4 	.word	0x200012a4
 8007ab4:	20001290 	.word	0x20001290

08007ab8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b088      	sub	sp, #32
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d10b      	bne.n	8007ae0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8007ac8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007acc:	f383 8811 	msr	BASEPRI, r3
 8007ad0:	f3bf 8f6f 	isb	sy
 8007ad4:	f3bf 8f4f 	dsb	sy
 8007ad8:	613b      	str	r3, [r7, #16]
}
 8007ada:	bf00      	nop
 8007adc:	bf00      	nop
 8007ade:	e7fd      	b.n	8007adc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d10b      	bne.n	8007afe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aea:	f383 8811 	msr	BASEPRI, r3
 8007aee:	f3bf 8f6f 	isb	sy
 8007af2:	f3bf 8f4f 	dsb	sy
 8007af6:	60fb      	str	r3, [r7, #12]
}
 8007af8:	bf00      	nop
 8007afa:	bf00      	nop
 8007afc:	e7fd      	b.n	8007afa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007afe:	f000 fe93 	bl	8008828 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007b02:	4b1d      	ldr	r3, [pc, #116]	@ (8007b78 <xTaskCheckForTimeOut+0xc0>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	69ba      	ldr	r2, [r7, #24]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b1a:	d102      	bne.n	8007b22 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	61fb      	str	r3, [r7, #28]
 8007b20:	e023      	b.n	8007b6a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4b15      	ldr	r3, [pc, #84]	@ (8007b7c <xTaskCheckForTimeOut+0xc4>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d007      	beq.n	8007b3e <xTaskCheckForTimeOut+0x86>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	69ba      	ldr	r2, [r7, #24]
 8007b34:	429a      	cmp	r2, r3
 8007b36:	d302      	bcc.n	8007b3e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	61fb      	str	r3, [r7, #28]
 8007b3c:	e015      	b.n	8007b6a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d20b      	bcs.n	8007b60 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	697b      	ldr	r3, [r7, #20]
 8007b4e:	1ad2      	subs	r2, r2, r3
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007b54:	6878      	ldr	r0, [r7, #4]
 8007b56:	f7ff ff99 	bl	8007a8c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	61fb      	str	r3, [r7, #28]
 8007b5e:	e004      	b.n	8007b6a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007b60:	683b      	ldr	r3, [r7, #0]
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007b66:	2301      	movs	r3, #1
 8007b68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007b6a:	f000 fe8f 	bl	800888c <vPortExitCritical>

	return xReturn;
 8007b6e:	69fb      	ldr	r3, [r7, #28]
}
 8007b70:	4618      	mov	r0, r3
 8007b72:	3720      	adds	r7, #32
 8007b74:	46bd      	mov	sp, r7
 8007b76:	bd80      	pop	{r7, pc}
 8007b78:	20001290 	.word	0x20001290
 8007b7c:	200012a4 	.word	0x200012a4

08007b80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007b84:	4b03      	ldr	r3, [pc, #12]	@ (8007b94 <vTaskMissedYield+0x14>)
 8007b86:	2201      	movs	r2, #1
 8007b88:	601a      	str	r2, [r3, #0]
}
 8007b8a:	bf00      	nop
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr
 8007b94:	200012a0 	.word	0x200012a0

08007b98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007ba0:	f000 f852 	bl	8007c48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007ba4:	4b06      	ldr	r3, [pc, #24]	@ (8007bc0 <prvIdleTask+0x28>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d9f9      	bls.n	8007ba0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007bac:	4b05      	ldr	r3, [pc, #20]	@ (8007bc4 <prvIdleTask+0x2c>)
 8007bae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	f3bf 8f4f 	dsb	sy
 8007bb8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007bbc:	e7f0      	b.n	8007ba0 <prvIdleTask+0x8>
 8007bbe:	bf00      	nop
 8007bc0:	20000dbc 	.word	0x20000dbc
 8007bc4:	e000ed04 	.word	0xe000ed04

08007bc8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b082      	sub	sp, #8
 8007bcc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007bce:	2300      	movs	r3, #0
 8007bd0:	607b      	str	r3, [r7, #4]
 8007bd2:	e00c      	b.n	8007bee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	4613      	mov	r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	4413      	add	r3, r2
 8007bdc:	009b      	lsls	r3, r3, #2
 8007bde:	4a12      	ldr	r2, [pc, #72]	@ (8007c28 <prvInitialiseTaskLists+0x60>)
 8007be0:	4413      	add	r3, r2
 8007be2:	4618      	mov	r0, r3
 8007be4:	f7fe fcae 	bl	8006544 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	3301      	adds	r3, #1
 8007bec:	607b      	str	r3, [r7, #4]
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2b37      	cmp	r3, #55	@ 0x37
 8007bf2:	d9ef      	bls.n	8007bd4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007bf4:	480d      	ldr	r0, [pc, #52]	@ (8007c2c <prvInitialiseTaskLists+0x64>)
 8007bf6:	f7fe fca5 	bl	8006544 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007bfa:	480d      	ldr	r0, [pc, #52]	@ (8007c30 <prvInitialiseTaskLists+0x68>)
 8007bfc:	f7fe fca2 	bl	8006544 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007c00:	480c      	ldr	r0, [pc, #48]	@ (8007c34 <prvInitialiseTaskLists+0x6c>)
 8007c02:	f7fe fc9f 	bl	8006544 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007c06:	480c      	ldr	r0, [pc, #48]	@ (8007c38 <prvInitialiseTaskLists+0x70>)
 8007c08:	f7fe fc9c 	bl	8006544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007c0c:	480b      	ldr	r0, [pc, #44]	@ (8007c3c <prvInitialiseTaskLists+0x74>)
 8007c0e:	f7fe fc99 	bl	8006544 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007c12:	4b0b      	ldr	r3, [pc, #44]	@ (8007c40 <prvInitialiseTaskLists+0x78>)
 8007c14:	4a05      	ldr	r2, [pc, #20]	@ (8007c2c <prvInitialiseTaskLists+0x64>)
 8007c16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007c18:	4b0a      	ldr	r3, [pc, #40]	@ (8007c44 <prvInitialiseTaskLists+0x7c>)
 8007c1a:	4a05      	ldr	r2, [pc, #20]	@ (8007c30 <prvInitialiseTaskLists+0x68>)
 8007c1c:	601a      	str	r2, [r3, #0]
}
 8007c1e:	bf00      	nop
 8007c20:	3708      	adds	r7, #8
 8007c22:	46bd      	mov	sp, r7
 8007c24:	bd80      	pop	{r7, pc}
 8007c26:	bf00      	nop
 8007c28:	20000dbc 	.word	0x20000dbc
 8007c2c:	2000121c 	.word	0x2000121c
 8007c30:	20001230 	.word	0x20001230
 8007c34:	2000124c 	.word	0x2000124c
 8007c38:	20001260 	.word	0x20001260
 8007c3c:	20001278 	.word	0x20001278
 8007c40:	20001244 	.word	0x20001244
 8007c44:	20001248 	.word	0x20001248

08007c48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007c48:	b580      	push	{r7, lr}
 8007c4a:	b082      	sub	sp, #8
 8007c4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c4e:	e019      	b.n	8007c84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007c50:	f000 fdea 	bl	8008828 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007c54:	4b10      	ldr	r3, [pc, #64]	@ (8007c98 <prvCheckTasksWaitingTermination+0x50>)
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	68db      	ldr	r3, [r3, #12]
 8007c5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	3304      	adds	r3, #4
 8007c60:	4618      	mov	r0, r3
 8007c62:	f7fe fcf9 	bl	8006658 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007c66:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <prvCheckTasksWaitingTermination+0x54>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	3b01      	subs	r3, #1
 8007c6c:	4a0b      	ldr	r2, [pc, #44]	@ (8007c9c <prvCheckTasksWaitingTermination+0x54>)
 8007c6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007c70:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	3b01      	subs	r3, #1
 8007c76:	4a0a      	ldr	r2, [pc, #40]	@ (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007c7a:	f000 fe07 	bl	800888c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f810 	bl	8007ca4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007c84:	4b06      	ldr	r3, [pc, #24]	@ (8007ca0 <prvCheckTasksWaitingTermination+0x58>)
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d1e1      	bne.n	8007c50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007c8c:	bf00      	nop
 8007c8e:	bf00      	nop
 8007c90:	3708      	adds	r7, #8
 8007c92:	46bd      	mov	sp, r7
 8007c94:	bd80      	pop	{r7, pc}
 8007c96:	bf00      	nop
 8007c98:	20001260 	.word	0x20001260
 8007c9c:	2000128c 	.word	0x2000128c
 8007ca0:	20001274 	.word	0x20001274

08007ca4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	3354      	adds	r3, #84	@ 0x54
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	f001 f8d1 	bl	8008e58 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d108      	bne.n	8007cd2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	f000 ff9f 	bl	8008c08 <vPortFree>
				vPortFree( pxTCB );
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f000 ff9c 	bl	8008c08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007cd0:	e019      	b.n	8007d06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d103      	bne.n	8007ce4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	f000 ff93 	bl	8008c08 <vPortFree>
	}
 8007ce2:	e010      	b.n	8007d06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d00b      	beq.n	8007d06 <prvDeleteTCB+0x62>
	__asm volatile
 8007cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cf2:	f383 8811 	msr	BASEPRI, r3
 8007cf6:	f3bf 8f6f 	isb	sy
 8007cfa:	f3bf 8f4f 	dsb	sy
 8007cfe:	60fb      	str	r3, [r7, #12]
}
 8007d00:	bf00      	nop
 8007d02:	bf00      	nop
 8007d04:	e7fd      	b.n	8007d02 <prvDeleteTCB+0x5e>
	}
 8007d06:	bf00      	nop
 8007d08:	3710      	adds	r7, #16
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}
	...

08007d10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007d10:	b480      	push	{r7}
 8007d12:	b083      	sub	sp, #12
 8007d14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d16:	4b0c      	ldr	r3, [pc, #48]	@ (8007d48 <prvResetNextTaskUnblockTime+0x38>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d104      	bne.n	8007d2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007d20:	4b0a      	ldr	r3, [pc, #40]	@ (8007d4c <prvResetNextTaskUnblockTime+0x3c>)
 8007d22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007d26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007d28:	e008      	b.n	8007d3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d2a:	4b07      	ldr	r3, [pc, #28]	@ (8007d48 <prvResetNextTaskUnblockTime+0x38>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	68db      	ldr	r3, [r3, #12]
 8007d30:	68db      	ldr	r3, [r3, #12]
 8007d32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	4a04      	ldr	r2, [pc, #16]	@ (8007d4c <prvResetNextTaskUnblockTime+0x3c>)
 8007d3a:	6013      	str	r3, [r2, #0]
}
 8007d3c:	bf00      	nop
 8007d3e:	370c      	adds	r7, #12
 8007d40:	46bd      	mov	sp, r7
 8007d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d46:	4770      	bx	lr
 8007d48:	20001244 	.word	0x20001244
 8007d4c:	200012ac 	.word	0x200012ac

08007d50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007d56:	4b0b      	ldr	r3, [pc, #44]	@ (8007d84 <xTaskGetSchedulerState+0x34>)
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d102      	bne.n	8007d64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	607b      	str	r3, [r7, #4]
 8007d62:	e008      	b.n	8007d76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d64:	4b08      	ldr	r3, [pc, #32]	@ (8007d88 <xTaskGetSchedulerState+0x38>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d102      	bne.n	8007d72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007d6c:	2302      	movs	r3, #2
 8007d6e:	607b      	str	r3, [r7, #4]
 8007d70:	e001      	b.n	8007d76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007d72:	2300      	movs	r3, #0
 8007d74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007d76:	687b      	ldr	r3, [r7, #4]
	}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	370c      	adds	r7, #12
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	20001298 	.word	0x20001298
 8007d88:	200012b4 	.word	0x200012b4

08007d8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d98:	2300      	movs	r3, #0
 8007d9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d058      	beq.n	8007e54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007da2:	4b2f      	ldr	r3, [pc, #188]	@ (8007e60 <xTaskPriorityDisinherit+0xd4>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	693a      	ldr	r2, [r7, #16]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d00b      	beq.n	8007dc4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007dac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db0:	f383 8811 	msr	BASEPRI, r3
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	f3bf 8f4f 	dsb	sy
 8007dbc:	60fb      	str	r3, [r7, #12]
}
 8007dbe:	bf00      	nop
 8007dc0:	bf00      	nop
 8007dc2:	e7fd      	b.n	8007dc0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10b      	bne.n	8007de4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	60bb      	str	r3, [r7, #8]
}
 8007dde:	bf00      	nop
 8007de0:	bf00      	nop
 8007de2:	e7fd      	b.n	8007de0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007de8:	1e5a      	subs	r2, r3, #1
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d02c      	beq.n	8007e54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d128      	bne.n	8007e54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3304      	adds	r3, #4
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7fe fc26 	bl	8006658 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007e0c:	693b      	ldr	r3, [r7, #16]
 8007e0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007e20:	693b      	ldr	r3, [r7, #16]
 8007e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e24:	4b0f      	ldr	r3, [pc, #60]	@ (8007e64 <xTaskPriorityDisinherit+0xd8>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	429a      	cmp	r2, r3
 8007e2a:	d903      	bls.n	8007e34 <xTaskPriorityDisinherit+0xa8>
 8007e2c:	693b      	ldr	r3, [r7, #16]
 8007e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e30:	4a0c      	ldr	r2, [pc, #48]	@ (8007e64 <xTaskPriorityDisinherit+0xd8>)
 8007e32:	6013      	str	r3, [r2, #0]
 8007e34:	693b      	ldr	r3, [r7, #16]
 8007e36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007e38:	4613      	mov	r3, r2
 8007e3a:	009b      	lsls	r3, r3, #2
 8007e3c:	4413      	add	r3, r2
 8007e3e:	009b      	lsls	r3, r3, #2
 8007e40:	4a09      	ldr	r2, [pc, #36]	@ (8007e68 <xTaskPriorityDisinherit+0xdc>)
 8007e42:	441a      	add	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	3304      	adds	r3, #4
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f7fe fba7 	bl	800659e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e50:	2301      	movs	r3, #1
 8007e52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e54:	697b      	ldr	r3, [r7, #20]
	}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3718      	adds	r7, #24
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
 8007e5e:	bf00      	nop
 8007e60:	20000db8 	.word	0x20000db8
 8007e64:	20001294 	.word	0x20001294
 8007e68:	20000dbc 	.word	0x20000dbc

08007e6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007e76:	4b21      	ldr	r3, [pc, #132]	@ (8007efc <prvAddCurrentTaskToDelayedList+0x90>)
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007e7c:	4b20      	ldr	r3, [pc, #128]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3304      	adds	r3, #4
 8007e82:	4618      	mov	r0, r3
 8007e84:	f7fe fbe8 	bl	8006658 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007e8e:	d10a      	bne.n	8007ea6 <prvAddCurrentTaskToDelayedList+0x3a>
 8007e90:	683b      	ldr	r3, [r7, #0]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d007      	beq.n	8007ea6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007e96:	4b1a      	ldr	r3, [pc, #104]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	4619      	mov	r1, r3
 8007e9e:	4819      	ldr	r0, [pc, #100]	@ (8007f04 <prvAddCurrentTaskToDelayedList+0x98>)
 8007ea0:	f7fe fb7d 	bl	800659e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007ea4:	e026      	b.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	4413      	add	r3, r2
 8007eac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007eae:	4b14      	ldr	r3, [pc, #80]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007eb6:	68ba      	ldr	r2, [r7, #8]
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d209      	bcs.n	8007ed2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ebe:	4b12      	ldr	r3, [pc, #72]	@ (8007f08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007ec0:	681a      	ldr	r2, [r3, #0]
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4619      	mov	r1, r3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	f7fe fb8b 	bl	80065e6 <vListInsert>
}
 8007ed0:	e010      	b.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8007f0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ed4:	681a      	ldr	r2, [r3, #0]
 8007ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8007f00 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	3304      	adds	r3, #4
 8007edc:	4619      	mov	r1, r3
 8007ede:	4610      	mov	r0, r2
 8007ee0:	f7fe fb81 	bl	80065e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007ee4:	4b0a      	ldr	r3, [pc, #40]	@ (8007f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	68ba      	ldr	r2, [r7, #8]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d202      	bcs.n	8007ef4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007eee:	4a08      	ldr	r2, [pc, #32]	@ (8007f10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	6013      	str	r3, [r2, #0]
}
 8007ef4:	bf00      	nop
 8007ef6:	3710      	adds	r7, #16
 8007ef8:	46bd      	mov	sp, r7
 8007efa:	bd80      	pop	{r7, pc}
 8007efc:	20001290 	.word	0x20001290
 8007f00:	20000db8 	.word	0x20000db8
 8007f04:	20001278 	.word	0x20001278
 8007f08:	20001248 	.word	0x20001248
 8007f0c:	20001244 	.word	0x20001244
 8007f10:	200012ac 	.word	0x200012ac

08007f14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007f14:	b580      	push	{r7, lr}
 8007f16:	b08a      	sub	sp, #40	@ 0x28
 8007f18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007f1e:	f000 fb13 	bl	8008548 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007f22:	4b1d      	ldr	r3, [pc, #116]	@ (8007f98 <xTimerCreateTimerTask+0x84>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d021      	beq.n	8007f6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007f32:	1d3a      	adds	r2, r7, #4
 8007f34:	f107 0108 	add.w	r1, r7, #8
 8007f38:	f107 030c 	add.w	r3, r7, #12
 8007f3c:	4618      	mov	r0, r3
 8007f3e:	f7fe fae7 	bl	8006510 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007f42:	6879      	ldr	r1, [r7, #4]
 8007f44:	68bb      	ldr	r3, [r7, #8]
 8007f46:	68fa      	ldr	r2, [r7, #12]
 8007f48:	9202      	str	r2, [sp, #8]
 8007f4a:	9301      	str	r3, [sp, #4]
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	9300      	str	r3, [sp, #0]
 8007f50:	2300      	movs	r3, #0
 8007f52:	460a      	mov	r2, r1
 8007f54:	4911      	ldr	r1, [pc, #68]	@ (8007f9c <xTimerCreateTimerTask+0x88>)
 8007f56:	4812      	ldr	r0, [pc, #72]	@ (8007fa0 <xTimerCreateTimerTask+0x8c>)
 8007f58:	f7ff f8a2 	bl	80070a0 <xTaskCreateStatic>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	4a11      	ldr	r2, [pc, #68]	@ (8007fa4 <xTimerCreateTimerTask+0x90>)
 8007f60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007f62:	4b10      	ldr	r3, [pc, #64]	@ (8007fa4 <xTimerCreateTimerTask+0x90>)
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	2b00      	cmp	r3, #0
 8007f68:	d001      	beq.n	8007f6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10b      	bne.n	8007f8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f78:	f383 8811 	msr	BASEPRI, r3
 8007f7c:	f3bf 8f6f 	isb	sy
 8007f80:	f3bf 8f4f 	dsb	sy
 8007f84:	613b      	str	r3, [r7, #16]
}
 8007f86:	bf00      	nop
 8007f88:	bf00      	nop
 8007f8a:	e7fd      	b.n	8007f88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007f8c:	697b      	ldr	r3, [r7, #20]
}
 8007f8e:	4618      	mov	r0, r3
 8007f90:	3718      	adds	r7, #24
 8007f92:	46bd      	mov	sp, r7
 8007f94:	bd80      	pop	{r7, pc}
 8007f96:	bf00      	nop
 8007f98:	200012e8 	.word	0x200012e8
 8007f9c:	0800906c 	.word	0x0800906c
 8007fa0:	080080e1 	.word	0x080080e1
 8007fa4:	200012ec 	.word	0x200012ec

08007fa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b08a      	sub	sp, #40	@ 0x28
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	60f8      	str	r0, [r7, #12]
 8007fb0:	60b9      	str	r1, [r7, #8]
 8007fb2:	607a      	str	r2, [r7, #4]
 8007fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d10b      	bne.n	8007fd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fc4:	f383 8811 	msr	BASEPRI, r3
 8007fc8:	f3bf 8f6f 	isb	sy
 8007fcc:	f3bf 8f4f 	dsb	sy
 8007fd0:	623b      	str	r3, [r7, #32]
}
 8007fd2:	bf00      	nop
 8007fd4:	bf00      	nop
 8007fd6:	e7fd      	b.n	8007fd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007fd8:	4b19      	ldr	r3, [pc, #100]	@ (8008040 <xTimerGenericCommand+0x98>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d02a      	beq.n	8008036 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b05      	cmp	r3, #5
 8007ff0:	dc18      	bgt.n	8008024 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007ff2:	f7ff fead 	bl	8007d50 <xTaskGetSchedulerState>
 8007ff6:	4603      	mov	r3, r0
 8007ff8:	2b02      	cmp	r3, #2
 8007ffa:	d109      	bne.n	8008010 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007ffc:	4b10      	ldr	r3, [pc, #64]	@ (8008040 <xTimerGenericCommand+0x98>)
 8007ffe:	6818      	ldr	r0, [r3, #0]
 8008000:	f107 0110 	add.w	r1, r7, #16
 8008004:	2300      	movs	r3, #0
 8008006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008008:	f7fe fc5a 	bl	80068c0 <xQueueGenericSend>
 800800c:	6278      	str	r0, [r7, #36]	@ 0x24
 800800e:	e012      	b.n	8008036 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008010:	4b0b      	ldr	r3, [pc, #44]	@ (8008040 <xTimerGenericCommand+0x98>)
 8008012:	6818      	ldr	r0, [r3, #0]
 8008014:	f107 0110 	add.w	r1, r7, #16
 8008018:	2300      	movs	r3, #0
 800801a:	2200      	movs	r2, #0
 800801c:	f7fe fc50 	bl	80068c0 <xQueueGenericSend>
 8008020:	6278      	str	r0, [r7, #36]	@ 0x24
 8008022:	e008      	b.n	8008036 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008024:	4b06      	ldr	r3, [pc, #24]	@ (8008040 <xTimerGenericCommand+0x98>)
 8008026:	6818      	ldr	r0, [r3, #0]
 8008028:	f107 0110 	add.w	r1, r7, #16
 800802c:	2300      	movs	r3, #0
 800802e:	683a      	ldr	r2, [r7, #0]
 8008030:	f7fe fd48 	bl	8006ac4 <xQueueGenericSendFromISR>
 8008034:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008036:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008038:	4618      	mov	r0, r3
 800803a:	3728      	adds	r7, #40	@ 0x28
 800803c:	46bd      	mov	sp, r7
 800803e:	bd80      	pop	{r7, pc}
 8008040:	200012e8 	.word	0x200012e8

08008044 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af02      	add	r7, sp, #8
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800804e:	4b23      	ldr	r3, [pc, #140]	@ (80080dc <prvProcessExpiredTimer+0x98>)
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	3304      	adds	r3, #4
 800805c:	4618      	mov	r0, r3
 800805e:	f7fe fafb 	bl	8006658 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008068:	f003 0304 	and.w	r3, r3, #4
 800806c:	2b00      	cmp	r3, #0
 800806e:	d023      	beq.n	80080b8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	699a      	ldr	r2, [r3, #24]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	18d1      	adds	r1, r2, r3
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	683a      	ldr	r2, [r7, #0]
 800807c:	6978      	ldr	r0, [r7, #20]
 800807e:	f000 f8d5 	bl	800822c <prvInsertTimerInActiveList>
 8008082:	4603      	mov	r3, r0
 8008084:	2b00      	cmp	r3, #0
 8008086:	d020      	beq.n	80080ca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008088:	2300      	movs	r3, #0
 800808a:	9300      	str	r3, [sp, #0]
 800808c:	2300      	movs	r3, #0
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	2100      	movs	r1, #0
 8008092:	6978      	ldr	r0, [r7, #20]
 8008094:	f7ff ff88 	bl	8007fa8 <xTimerGenericCommand>
 8008098:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800809a:	693b      	ldr	r3, [r7, #16]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d114      	bne.n	80080ca <prvProcessExpiredTimer+0x86>
	__asm volatile
 80080a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080a4:	f383 8811 	msr	BASEPRI, r3
 80080a8:	f3bf 8f6f 	isb	sy
 80080ac:	f3bf 8f4f 	dsb	sy
 80080b0:	60fb      	str	r3, [r7, #12]
}
 80080b2:	bf00      	nop
 80080b4:	bf00      	nop
 80080b6:	e7fd      	b.n	80080b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080be:	f023 0301 	bic.w	r3, r3, #1
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	6a1b      	ldr	r3, [r3, #32]
 80080ce:	6978      	ldr	r0, [r7, #20]
 80080d0:	4798      	blx	r3
}
 80080d2:	bf00      	nop
 80080d4:	3718      	adds	r7, #24
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200012e0 	.word	0x200012e0

080080e0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80080e0:	b580      	push	{r7, lr}
 80080e2:	b084      	sub	sp, #16
 80080e4:	af00      	add	r7, sp, #0
 80080e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80080e8:	f107 0308 	add.w	r3, r7, #8
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 f859 	bl	80081a4 <prvGetNextExpireTime>
 80080f2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4619      	mov	r1, r3
 80080f8:	68f8      	ldr	r0, [r7, #12]
 80080fa:	f000 f805 	bl	8008108 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80080fe:	f000 f8d7 	bl	80082b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008102:	bf00      	nop
 8008104:	e7f0      	b.n	80080e8 <prvTimerTask+0x8>
	...

08008108 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008112:	f7ff fa29 	bl	8007568 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008116:	f107 0308 	add.w	r3, r7, #8
 800811a:	4618      	mov	r0, r3
 800811c:	f000 f866 	bl	80081ec <prvSampleTimeNow>
 8008120:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d130      	bne.n	800818a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d10a      	bne.n	8008144 <prvProcessTimerOrBlockTask+0x3c>
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	429a      	cmp	r2, r3
 8008134:	d806      	bhi.n	8008144 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008136:	f7ff fa25 	bl	8007584 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800813a:	68f9      	ldr	r1, [r7, #12]
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f7ff ff81 	bl	8008044 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008142:	e024      	b.n	800818e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	2b00      	cmp	r3, #0
 8008148:	d008      	beq.n	800815c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800814a:	4b13      	ldr	r3, [pc, #76]	@ (8008198 <prvProcessTimerOrBlockTask+0x90>)
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d101      	bne.n	8008158 <prvProcessTimerOrBlockTask+0x50>
 8008154:	2301      	movs	r3, #1
 8008156:	e000      	b.n	800815a <prvProcessTimerOrBlockTask+0x52>
 8008158:	2300      	movs	r3, #0
 800815a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800815c:	4b0f      	ldr	r3, [pc, #60]	@ (800819c <prvProcessTimerOrBlockTask+0x94>)
 800815e:	6818      	ldr	r0, [r3, #0]
 8008160:	687a      	ldr	r2, [r7, #4]
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	1ad3      	subs	r3, r2, r3
 8008166:	683a      	ldr	r2, [r7, #0]
 8008168:	4619      	mov	r1, r3
 800816a:	f7fe ff65 	bl	8007038 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800816e:	f7ff fa09 	bl	8007584 <xTaskResumeAll>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d10a      	bne.n	800818e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008178:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <prvProcessTimerOrBlockTask+0x98>)
 800817a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	f3bf 8f4f 	dsb	sy
 8008184:	f3bf 8f6f 	isb	sy
}
 8008188:	e001      	b.n	800818e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800818a:	f7ff f9fb 	bl	8007584 <xTaskResumeAll>
}
 800818e:	bf00      	nop
 8008190:	3710      	adds	r7, #16
 8008192:	46bd      	mov	sp, r7
 8008194:	bd80      	pop	{r7, pc}
 8008196:	bf00      	nop
 8008198:	200012e4 	.word	0x200012e4
 800819c:	200012e8 	.word	0x200012e8
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80081a4:	b480      	push	{r7}
 80081a6:	b085      	sub	sp, #20
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80081ac:	4b0e      	ldr	r3, [pc, #56]	@ (80081e8 <prvGetNextExpireTime+0x44>)
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d101      	bne.n	80081ba <prvGetNextExpireTime+0x16>
 80081b6:	2201      	movs	r2, #1
 80081b8:	e000      	b.n	80081bc <prvGetNextExpireTime+0x18>
 80081ba:	2200      	movs	r2, #0
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d105      	bne.n	80081d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80081c8:	4b07      	ldr	r3, [pc, #28]	@ (80081e8 <prvGetNextExpireTime+0x44>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	60fb      	str	r3, [r7, #12]
 80081d2:	e001      	b.n	80081d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80081d4:	2300      	movs	r3, #0
 80081d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80081d8:	68fb      	ldr	r3, [r7, #12]
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3714      	adds	r7, #20
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr
 80081e6:	bf00      	nop
 80081e8:	200012e0 	.word	0x200012e0

080081ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80081f4:	f7ff fa64 	bl	80076c0 <xTaskGetTickCount>
 80081f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80081fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008228 <prvSampleTimeNow+0x3c>)
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	429a      	cmp	r2, r3
 8008202:	d205      	bcs.n	8008210 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008204:	f000 f93a 	bl	800847c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	601a      	str	r2, [r3, #0]
 800820e:	e002      	b.n	8008216 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008216:	4a04      	ldr	r2, [pc, #16]	@ (8008228 <prvSampleTimeNow+0x3c>)
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800821c:	68fb      	ldr	r3, [r7, #12]
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	200012f0 	.word	0x200012f0

0800822c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b086      	sub	sp, #24
 8008230:	af00      	add	r7, sp, #0
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800823a:	2300      	movs	r3, #0
 800823c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	68ba      	ldr	r2, [r7, #8]
 8008242:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	68fa      	ldr	r2, [r7, #12]
 8008248:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	429a      	cmp	r2, r3
 8008250:	d812      	bhi.n	8008278 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	1ad2      	subs	r2, r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	429a      	cmp	r2, r3
 800825e:	d302      	bcc.n	8008266 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008260:	2301      	movs	r3, #1
 8008262:	617b      	str	r3, [r7, #20]
 8008264:	e01b      	b.n	800829e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008266:	4b10      	ldr	r3, [pc, #64]	@ (80082a8 <prvInsertTimerInActiveList+0x7c>)
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3304      	adds	r3, #4
 800826e:	4619      	mov	r1, r3
 8008270:	4610      	mov	r0, r2
 8008272:	f7fe f9b8 	bl	80065e6 <vListInsert>
 8008276:	e012      	b.n	800829e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008278:	687a      	ldr	r2, [r7, #4]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	429a      	cmp	r2, r3
 800827e:	d206      	bcs.n	800828e <prvInsertTimerInActiveList+0x62>
 8008280:	68ba      	ldr	r2, [r7, #8]
 8008282:	683b      	ldr	r3, [r7, #0]
 8008284:	429a      	cmp	r2, r3
 8008286:	d302      	bcc.n	800828e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008288:	2301      	movs	r3, #1
 800828a:	617b      	str	r3, [r7, #20]
 800828c:	e007      	b.n	800829e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800828e:	4b07      	ldr	r3, [pc, #28]	@ (80082ac <prvInsertTimerInActiveList+0x80>)
 8008290:	681a      	ldr	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	3304      	adds	r3, #4
 8008296:	4619      	mov	r1, r3
 8008298:	4610      	mov	r0, r2
 800829a:	f7fe f9a4 	bl	80065e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800829e:	697b      	ldr	r3, [r7, #20]
}
 80082a0:	4618      	mov	r0, r3
 80082a2:	3718      	adds	r7, #24
 80082a4:	46bd      	mov	sp, r7
 80082a6:	bd80      	pop	{r7, pc}
 80082a8:	200012e4 	.word	0x200012e4
 80082ac:	200012e0 	.word	0x200012e0

080082b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b08e      	sub	sp, #56	@ 0x38
 80082b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80082b6:	e0ce      	b.n	8008456 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	da19      	bge.n	80082f2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80082be:	1d3b      	adds	r3, r7, #4
 80082c0:	3304      	adds	r3, #4
 80082c2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80082c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10b      	bne.n	80082e2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	61fb      	str	r3, [r7, #28]
}
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	e7fd      	b.n	80082de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80082e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082e8:	6850      	ldr	r0, [r2, #4]
 80082ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082ec:	6892      	ldr	r2, [r2, #8]
 80082ee:	4611      	mov	r1, r2
 80082f0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f2c0 80ae 	blt.w	8008456 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80082fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008300:	695b      	ldr	r3, [r3, #20]
 8008302:	2b00      	cmp	r3, #0
 8008304:	d004      	beq.n	8008310 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008308:	3304      	adds	r3, #4
 800830a:	4618      	mov	r0, r3
 800830c:	f7fe f9a4 	bl	8006658 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008310:	463b      	mov	r3, r7
 8008312:	4618      	mov	r0, r3
 8008314:	f7ff ff6a 	bl	80081ec <prvSampleTimeNow>
 8008318:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2b09      	cmp	r3, #9
 800831e:	f200 8097 	bhi.w	8008450 <prvProcessReceivedCommands+0x1a0>
 8008322:	a201      	add	r2, pc, #4	@ (adr r2, 8008328 <prvProcessReceivedCommands+0x78>)
 8008324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008328:	08008351 	.word	0x08008351
 800832c:	08008351 	.word	0x08008351
 8008330:	08008351 	.word	0x08008351
 8008334:	080083c7 	.word	0x080083c7
 8008338:	080083db 	.word	0x080083db
 800833c:	08008427 	.word	0x08008427
 8008340:	08008351 	.word	0x08008351
 8008344:	08008351 	.word	0x08008351
 8008348:	080083c7 	.word	0x080083c7
 800834c:	080083db 	.word	0x080083db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008356:	f043 0301 	orr.w	r3, r3, #1
 800835a:	b2da      	uxtb	r2, r3
 800835c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008362:	68ba      	ldr	r2, [r7, #8]
 8008364:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008366:	699b      	ldr	r3, [r3, #24]
 8008368:	18d1      	adds	r1, r2, r3
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800836e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008370:	f7ff ff5c 	bl	800822c <prvInsertTimerInActiveList>
 8008374:	4603      	mov	r3, r0
 8008376:	2b00      	cmp	r3, #0
 8008378:	d06c      	beq.n	8008454 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800837a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008380:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008382:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008384:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008388:	f003 0304 	and.w	r3, r3, #4
 800838c:	2b00      	cmp	r3, #0
 800838e:	d061      	beq.n	8008454 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008390:	68ba      	ldr	r2, [r7, #8]
 8008392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	441a      	add	r2, r3
 8008398:	2300      	movs	r3, #0
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	2300      	movs	r3, #0
 800839e:	2100      	movs	r1, #0
 80083a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a2:	f7ff fe01 	bl	8007fa8 <xTimerGenericCommand>
 80083a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80083a8:	6a3b      	ldr	r3, [r7, #32]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d152      	bne.n	8008454 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80083ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083b2:	f383 8811 	msr	BASEPRI, r3
 80083b6:	f3bf 8f6f 	isb	sy
 80083ba:	f3bf 8f4f 	dsb	sy
 80083be:	61bb      	str	r3, [r7, #24]
}
 80083c0:	bf00      	nop
 80083c2:	bf00      	nop
 80083c4:	e7fd      	b.n	80083c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80083c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083cc:	f023 0301 	bic.w	r3, r3, #1
 80083d0:	b2da      	uxtb	r2, r3
 80083d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80083d8:	e03d      	b.n	8008456 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80083da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80083e0:	f043 0301 	orr.w	r3, r3, #1
 80083e4:	b2da      	uxtb	r2, r3
 80083e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80083ec:	68ba      	ldr	r2, [r7, #8]
 80083ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80083f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f4:	699b      	ldr	r3, [r3, #24]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10b      	bne.n	8008412 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80083fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083fe:	f383 8811 	msr	BASEPRI, r3
 8008402:	f3bf 8f6f 	isb	sy
 8008406:	f3bf 8f4f 	dsb	sy
 800840a:	617b      	str	r3, [r7, #20]
}
 800840c:	bf00      	nop
 800840e:	bf00      	nop
 8008410:	e7fd      	b.n	800840e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008412:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008414:	699a      	ldr	r2, [r3, #24]
 8008416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008418:	18d1      	adds	r1, r2, r3
 800841a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800841c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800841e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008420:	f7ff ff04 	bl	800822c <prvInsertTimerInActiveList>
					break;
 8008424:	e017      	b.n	8008456 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800842c:	f003 0302 	and.w	r3, r3, #2
 8008430:	2b00      	cmp	r3, #0
 8008432:	d103      	bne.n	800843c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008434:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008436:	f000 fbe7 	bl	8008c08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800843a:	e00c      	b.n	8008456 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800843c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800843e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008442:	f023 0301 	bic.w	r3, r3, #1
 8008446:	b2da      	uxtb	r2, r3
 8008448:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800844a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800844e:	e002      	b.n	8008456 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <prvProcessReceivedCommands+0x1a6>
					break;
 8008454:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008456:	4b08      	ldr	r3, [pc, #32]	@ (8008478 <prvProcessReceivedCommands+0x1c8>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	1d39      	adds	r1, r7, #4
 800845c:	2200      	movs	r2, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f7fe fbce 	bl	8006c00 <xQueueReceive>
 8008464:	4603      	mov	r3, r0
 8008466:	2b00      	cmp	r3, #0
 8008468:	f47f af26 	bne.w	80082b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	3730      	adds	r7, #48	@ 0x30
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}
 8008476:	bf00      	nop
 8008478:	200012e8 	.word	0x200012e8

0800847c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b088      	sub	sp, #32
 8008480:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008482:	e049      	b.n	8008518 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008484:	4b2e      	ldr	r3, [pc, #184]	@ (8008540 <prvSwitchTimerLists+0xc4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	68db      	ldr	r3, [r3, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800848e:	4b2c      	ldr	r3, [pc, #176]	@ (8008540 <prvSwitchTimerLists+0xc4>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	68db      	ldr	r3, [r3, #12]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3304      	adds	r3, #4
 800849c:	4618      	mov	r0, r3
 800849e:	f7fe f8db 	bl	8006658 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	6a1b      	ldr	r3, [r3, #32]
 80084a6:	68f8      	ldr	r0, [r7, #12]
 80084a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084b0:	f003 0304 	and.w	r3, r3, #4
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d02f      	beq.n	8008518 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	699b      	ldr	r3, [r3, #24]
 80084bc:	693a      	ldr	r2, [r7, #16]
 80084be:	4413      	add	r3, r2
 80084c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80084c2:	68ba      	ldr	r2, [r7, #8]
 80084c4:	693b      	ldr	r3, [r7, #16]
 80084c6:	429a      	cmp	r2, r3
 80084c8:	d90e      	bls.n	80084e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	68ba      	ldr	r2, [r7, #8]
 80084ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	68fa      	ldr	r2, [r7, #12]
 80084d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80084d6:	4b1a      	ldr	r3, [pc, #104]	@ (8008540 <prvSwitchTimerLists+0xc4>)
 80084d8:	681a      	ldr	r2, [r3, #0]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	3304      	adds	r3, #4
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fe f880 	bl	80065e6 <vListInsert>
 80084e6:	e017      	b.n	8008518 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80084e8:	2300      	movs	r3, #0
 80084ea:	9300      	str	r3, [sp, #0]
 80084ec:	2300      	movs	r3, #0
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	2100      	movs	r1, #0
 80084f2:	68f8      	ldr	r0, [r7, #12]
 80084f4:	f7ff fd58 	bl	8007fa8 <xTimerGenericCommand>
 80084f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d10b      	bne.n	8008518 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008504:	f383 8811 	msr	BASEPRI, r3
 8008508:	f3bf 8f6f 	isb	sy
 800850c:	f3bf 8f4f 	dsb	sy
 8008510:	603b      	str	r3, [r7, #0]
}
 8008512:	bf00      	nop
 8008514:	bf00      	nop
 8008516:	e7fd      	b.n	8008514 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008518:	4b09      	ldr	r3, [pc, #36]	@ (8008540 <prvSwitchTimerLists+0xc4>)
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d1b0      	bne.n	8008484 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008522:	4b07      	ldr	r3, [pc, #28]	@ (8008540 <prvSwitchTimerLists+0xc4>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008528:	4b06      	ldr	r3, [pc, #24]	@ (8008544 <prvSwitchTimerLists+0xc8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a04      	ldr	r2, [pc, #16]	@ (8008540 <prvSwitchTimerLists+0xc4>)
 800852e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008530:	4a04      	ldr	r2, [pc, #16]	@ (8008544 <prvSwitchTimerLists+0xc8>)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	6013      	str	r3, [r2, #0]
}
 8008536:	bf00      	nop
 8008538:	3718      	adds	r7, #24
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	200012e0 	.word	0x200012e0
 8008544:	200012e4 	.word	0x200012e4

08008548 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800854e:	f000 f96b 	bl	8008828 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008552:	4b15      	ldr	r3, [pc, #84]	@ (80085a8 <prvCheckForValidListAndQueue+0x60>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d120      	bne.n	800859c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800855a:	4814      	ldr	r0, [pc, #80]	@ (80085ac <prvCheckForValidListAndQueue+0x64>)
 800855c:	f7fd fff2 	bl	8006544 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008560:	4813      	ldr	r0, [pc, #76]	@ (80085b0 <prvCheckForValidListAndQueue+0x68>)
 8008562:	f7fd ffef 	bl	8006544 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008566:	4b13      	ldr	r3, [pc, #76]	@ (80085b4 <prvCheckForValidListAndQueue+0x6c>)
 8008568:	4a10      	ldr	r2, [pc, #64]	@ (80085ac <prvCheckForValidListAndQueue+0x64>)
 800856a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800856c:	4b12      	ldr	r3, [pc, #72]	@ (80085b8 <prvCheckForValidListAndQueue+0x70>)
 800856e:	4a10      	ldr	r2, [pc, #64]	@ (80085b0 <prvCheckForValidListAndQueue+0x68>)
 8008570:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008572:	2300      	movs	r3, #0
 8008574:	9300      	str	r3, [sp, #0]
 8008576:	4b11      	ldr	r3, [pc, #68]	@ (80085bc <prvCheckForValidListAndQueue+0x74>)
 8008578:	4a11      	ldr	r2, [pc, #68]	@ (80085c0 <prvCheckForValidListAndQueue+0x78>)
 800857a:	2110      	movs	r1, #16
 800857c:	200a      	movs	r0, #10
 800857e:	f7fe f8ff 	bl	8006780 <xQueueGenericCreateStatic>
 8008582:	4603      	mov	r3, r0
 8008584:	4a08      	ldr	r2, [pc, #32]	@ (80085a8 <prvCheckForValidListAndQueue+0x60>)
 8008586:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008588:	4b07      	ldr	r3, [pc, #28]	@ (80085a8 <prvCheckForValidListAndQueue+0x60>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d005      	beq.n	800859c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008590:	4b05      	ldr	r3, [pc, #20]	@ (80085a8 <prvCheckForValidListAndQueue+0x60>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	490b      	ldr	r1, [pc, #44]	@ (80085c4 <prvCheckForValidListAndQueue+0x7c>)
 8008596:	4618      	mov	r0, r3
 8008598:	f7fe fd24 	bl	8006fe4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800859c:	f000 f976 	bl	800888c <vPortExitCritical>
}
 80085a0:	bf00      	nop
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bd80      	pop	{r7, pc}
 80085a6:	bf00      	nop
 80085a8:	200012e8 	.word	0x200012e8
 80085ac:	200012b8 	.word	0x200012b8
 80085b0:	200012cc 	.word	0x200012cc
 80085b4:	200012e0 	.word	0x200012e0
 80085b8:	200012e4 	.word	0x200012e4
 80085bc:	20001394 	.word	0x20001394
 80085c0:	200012f4 	.word	0x200012f4
 80085c4:	08009074 	.word	0x08009074

080085c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80085c8:	b480      	push	{r7}
 80085ca:	b085      	sub	sp, #20
 80085cc:	af00      	add	r7, sp, #0
 80085ce:	60f8      	str	r0, [r7, #12]
 80085d0:	60b9      	str	r1, [r7, #8]
 80085d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	3b04      	subs	r3, #4
 80085d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80085e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	3b04      	subs	r3, #4
 80085e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f023 0201 	bic.w	r2, r3, #1
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	3b04      	subs	r3, #4
 80085f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80085f8:	4a0c      	ldr	r2, [pc, #48]	@ (800862c <pxPortInitialiseStack+0x64>)
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3b14      	subs	r3, #20
 8008602:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	3b04      	subs	r3, #4
 800860e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f06f 0202 	mvn.w	r2, #2
 8008616:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	3b20      	subs	r3, #32
 800861c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800861e:	68fb      	ldr	r3, [r7, #12]
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	08008631 	.word	0x08008631

08008630 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008636:	2300      	movs	r3, #0
 8008638:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800863a:	4b13      	ldr	r3, [pc, #76]	@ (8008688 <prvTaskExitError+0x58>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008642:	d00b      	beq.n	800865c <prvTaskExitError+0x2c>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	60fb      	str	r3, [r7, #12]
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <prvTaskExitError+0x28>
	__asm volatile
 800865c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008660:	f383 8811 	msr	BASEPRI, r3
 8008664:	f3bf 8f6f 	isb	sy
 8008668:	f3bf 8f4f 	dsb	sy
 800866c:	60bb      	str	r3, [r7, #8]
}
 800866e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008670:	bf00      	nop
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0fc      	beq.n	8008672 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop
 8008688:	2000000c 	.word	0x2000000c
 800868c:	00000000 	.word	0x00000000

08008690 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008690:	4b07      	ldr	r3, [pc, #28]	@ (80086b0 <pxCurrentTCBConst2>)
 8008692:	6819      	ldr	r1, [r3, #0]
 8008694:	6808      	ldr	r0, [r1, #0]
 8008696:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800869a:	f380 8809 	msr	PSP, r0
 800869e:	f3bf 8f6f 	isb	sy
 80086a2:	f04f 0000 	mov.w	r0, #0
 80086a6:	f380 8811 	msr	BASEPRI, r0
 80086aa:	4770      	bx	lr
 80086ac:	f3af 8000 	nop.w

080086b0 <pxCurrentTCBConst2>:
 80086b0:	20000db8 	.word	0x20000db8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80086b4:	bf00      	nop
 80086b6:	bf00      	nop

080086b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80086b8:	4808      	ldr	r0, [pc, #32]	@ (80086dc <prvPortStartFirstTask+0x24>)
 80086ba:	6800      	ldr	r0, [r0, #0]
 80086bc:	6800      	ldr	r0, [r0, #0]
 80086be:	f380 8808 	msr	MSP, r0
 80086c2:	f04f 0000 	mov.w	r0, #0
 80086c6:	f380 8814 	msr	CONTROL, r0
 80086ca:	b662      	cpsie	i
 80086cc:	b661      	cpsie	f
 80086ce:	f3bf 8f4f 	dsb	sy
 80086d2:	f3bf 8f6f 	isb	sy
 80086d6:	df00      	svc	0
 80086d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80086da:	bf00      	nop
 80086dc:	e000ed08 	.word	0xe000ed08

080086e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	b086      	sub	sp, #24
 80086e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80086e6:	4b47      	ldr	r3, [pc, #284]	@ (8008804 <xPortStartScheduler+0x124>)
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	4a47      	ldr	r2, [pc, #284]	@ (8008808 <xPortStartScheduler+0x128>)
 80086ec:	4293      	cmp	r3, r2
 80086ee:	d10b      	bne.n	8008708 <xPortStartScheduler+0x28>
	__asm volatile
 80086f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f4:	f383 8811 	msr	BASEPRI, r3
 80086f8:	f3bf 8f6f 	isb	sy
 80086fc:	f3bf 8f4f 	dsb	sy
 8008700:	613b      	str	r3, [r7, #16]
}
 8008702:	bf00      	nop
 8008704:	bf00      	nop
 8008706:	e7fd      	b.n	8008704 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008708:	4b3e      	ldr	r3, [pc, #248]	@ (8008804 <xPortStartScheduler+0x124>)
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a3f      	ldr	r2, [pc, #252]	@ (800880c <xPortStartScheduler+0x12c>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d10b      	bne.n	800872a <xPortStartScheduler+0x4a>
	__asm volatile
 8008712:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008716:	f383 8811 	msr	BASEPRI, r3
 800871a:	f3bf 8f6f 	isb	sy
 800871e:	f3bf 8f4f 	dsb	sy
 8008722:	60fb      	str	r3, [r7, #12]
}
 8008724:	bf00      	nop
 8008726:	bf00      	nop
 8008728:	e7fd      	b.n	8008726 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800872a:	4b39      	ldr	r3, [pc, #228]	@ (8008810 <xPortStartScheduler+0x130>)
 800872c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	781b      	ldrb	r3, [r3, #0]
 8008732:	b2db      	uxtb	r3, r3
 8008734:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	22ff      	movs	r2, #255	@ 0xff
 800873a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	781b      	ldrb	r3, [r3, #0]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008744:	78fb      	ldrb	r3, [r7, #3]
 8008746:	b2db      	uxtb	r3, r3
 8008748:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800874c:	b2da      	uxtb	r2, r3
 800874e:	4b31      	ldr	r3, [pc, #196]	@ (8008814 <xPortStartScheduler+0x134>)
 8008750:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008752:	4b31      	ldr	r3, [pc, #196]	@ (8008818 <xPortStartScheduler+0x138>)
 8008754:	2207      	movs	r2, #7
 8008756:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008758:	e009      	b.n	800876e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800875a:	4b2f      	ldr	r3, [pc, #188]	@ (8008818 <xPortStartScheduler+0x138>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3b01      	subs	r3, #1
 8008760:	4a2d      	ldr	r2, [pc, #180]	@ (8008818 <xPortStartScheduler+0x138>)
 8008762:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008764:	78fb      	ldrb	r3, [r7, #3]
 8008766:	b2db      	uxtb	r3, r3
 8008768:	005b      	lsls	r3, r3, #1
 800876a:	b2db      	uxtb	r3, r3
 800876c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800876e:	78fb      	ldrb	r3, [r7, #3]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008776:	2b80      	cmp	r3, #128	@ 0x80
 8008778:	d0ef      	beq.n	800875a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800877a:	4b27      	ldr	r3, [pc, #156]	@ (8008818 <xPortStartScheduler+0x138>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	f1c3 0307 	rsb	r3, r3, #7
 8008782:	2b04      	cmp	r3, #4
 8008784:	d00b      	beq.n	800879e <xPortStartScheduler+0xbe>
	__asm volatile
 8008786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878a:	f383 8811 	msr	BASEPRI, r3
 800878e:	f3bf 8f6f 	isb	sy
 8008792:	f3bf 8f4f 	dsb	sy
 8008796:	60bb      	str	r3, [r7, #8]
}
 8008798:	bf00      	nop
 800879a:	bf00      	nop
 800879c:	e7fd      	b.n	800879a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800879e:	4b1e      	ldr	r3, [pc, #120]	@ (8008818 <xPortStartScheduler+0x138>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	021b      	lsls	r3, r3, #8
 80087a4:	4a1c      	ldr	r2, [pc, #112]	@ (8008818 <xPortStartScheduler+0x138>)
 80087a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80087a8:	4b1b      	ldr	r3, [pc, #108]	@ (8008818 <xPortStartScheduler+0x138>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80087b0:	4a19      	ldr	r2, [pc, #100]	@ (8008818 <xPortStartScheduler+0x138>)
 80087b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	b2da      	uxtb	r2, r3
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80087bc:	4b17      	ldr	r3, [pc, #92]	@ (800881c <xPortStartScheduler+0x13c>)
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a16      	ldr	r2, [pc, #88]	@ (800881c <xPortStartScheduler+0x13c>)
 80087c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80087c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80087c8:	4b14      	ldr	r3, [pc, #80]	@ (800881c <xPortStartScheduler+0x13c>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a13      	ldr	r2, [pc, #76]	@ (800881c <xPortStartScheduler+0x13c>)
 80087ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80087d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80087d4:	f000 f8da 	bl	800898c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80087d8:	4b11      	ldr	r3, [pc, #68]	@ (8008820 <xPortStartScheduler+0x140>)
 80087da:	2200      	movs	r2, #0
 80087dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80087de:	f000 f8f9 	bl	80089d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80087e2:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <xPortStartScheduler+0x144>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a0f      	ldr	r2, [pc, #60]	@ (8008824 <xPortStartScheduler+0x144>)
 80087e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80087ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80087ee:	f7ff ff63 	bl	80086b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80087f2:	f7ff f82f 	bl	8007854 <vTaskSwitchContext>
	prvTaskExitError();
 80087f6:	f7ff ff1b 	bl	8008630 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80087fa:	2300      	movs	r3, #0
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	e000ed00 	.word	0xe000ed00
 8008808:	410fc271 	.word	0x410fc271
 800880c:	410fc270 	.word	0x410fc270
 8008810:	e000e400 	.word	0xe000e400
 8008814:	200013e4 	.word	0x200013e4
 8008818:	200013e8 	.word	0x200013e8
 800881c:	e000ed20 	.word	0xe000ed20
 8008820:	2000000c 	.word	0x2000000c
 8008824:	e000ef34 	.word	0xe000ef34

08008828 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008828:	b480      	push	{r7}
 800882a:	b083      	sub	sp, #12
 800882c:	af00      	add	r7, sp, #0
	__asm volatile
 800882e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008832:	f383 8811 	msr	BASEPRI, r3
 8008836:	f3bf 8f6f 	isb	sy
 800883a:	f3bf 8f4f 	dsb	sy
 800883e:	607b      	str	r3, [r7, #4]
}
 8008840:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008842:	4b10      	ldr	r3, [pc, #64]	@ (8008884 <vPortEnterCritical+0x5c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	3301      	adds	r3, #1
 8008848:	4a0e      	ldr	r2, [pc, #56]	@ (8008884 <vPortEnterCritical+0x5c>)
 800884a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800884c:	4b0d      	ldr	r3, [pc, #52]	@ (8008884 <vPortEnterCritical+0x5c>)
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2b01      	cmp	r3, #1
 8008852:	d110      	bne.n	8008876 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008854:	4b0c      	ldr	r3, [pc, #48]	@ (8008888 <vPortEnterCritical+0x60>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	b2db      	uxtb	r3, r3
 800885a:	2b00      	cmp	r3, #0
 800885c:	d00b      	beq.n	8008876 <vPortEnterCritical+0x4e>
	__asm volatile
 800885e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008862:	f383 8811 	msr	BASEPRI, r3
 8008866:	f3bf 8f6f 	isb	sy
 800886a:	f3bf 8f4f 	dsb	sy
 800886e:	603b      	str	r3, [r7, #0]
}
 8008870:	bf00      	nop
 8008872:	bf00      	nop
 8008874:	e7fd      	b.n	8008872 <vPortEnterCritical+0x4a>
	}
}
 8008876:	bf00      	nop
 8008878:	370c      	adds	r7, #12
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	2000000c 	.word	0x2000000c
 8008888:	e000ed04 	.word	0xe000ed04

0800888c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008892:	4b12      	ldr	r3, [pc, #72]	@ (80088dc <vPortExitCritical+0x50>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	2b00      	cmp	r3, #0
 8008898:	d10b      	bne.n	80088b2 <vPortExitCritical+0x26>
	__asm volatile
 800889a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800889e:	f383 8811 	msr	BASEPRI, r3
 80088a2:	f3bf 8f6f 	isb	sy
 80088a6:	f3bf 8f4f 	dsb	sy
 80088aa:	607b      	str	r3, [r7, #4]
}
 80088ac:	bf00      	nop
 80088ae:	bf00      	nop
 80088b0:	e7fd      	b.n	80088ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80088b2:	4b0a      	ldr	r3, [pc, #40]	@ (80088dc <vPortExitCritical+0x50>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	3b01      	subs	r3, #1
 80088b8:	4a08      	ldr	r2, [pc, #32]	@ (80088dc <vPortExitCritical+0x50>)
 80088ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80088bc:	4b07      	ldr	r3, [pc, #28]	@ (80088dc <vPortExitCritical+0x50>)
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d105      	bne.n	80088d0 <vPortExitCritical+0x44>
 80088c4:	2300      	movs	r3, #0
 80088c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	f383 8811 	msr	BASEPRI, r3
}
 80088ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80088d0:	bf00      	nop
 80088d2:	370c      	adds	r7, #12
 80088d4:	46bd      	mov	sp, r7
 80088d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088da:	4770      	bx	lr
 80088dc:	2000000c 	.word	0x2000000c

080088e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80088e0:	f3ef 8009 	mrs	r0, PSP
 80088e4:	f3bf 8f6f 	isb	sy
 80088e8:	4b15      	ldr	r3, [pc, #84]	@ (8008940 <pxCurrentTCBConst>)
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	f01e 0f10 	tst.w	lr, #16
 80088f0:	bf08      	it	eq
 80088f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80088f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088fa:	6010      	str	r0, [r2, #0]
 80088fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008900:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008904:	f380 8811 	msr	BASEPRI, r0
 8008908:	f3bf 8f4f 	dsb	sy
 800890c:	f3bf 8f6f 	isb	sy
 8008910:	f7fe ffa0 	bl	8007854 <vTaskSwitchContext>
 8008914:	f04f 0000 	mov.w	r0, #0
 8008918:	f380 8811 	msr	BASEPRI, r0
 800891c:	bc09      	pop	{r0, r3}
 800891e:	6819      	ldr	r1, [r3, #0]
 8008920:	6808      	ldr	r0, [r1, #0]
 8008922:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008926:	f01e 0f10 	tst.w	lr, #16
 800892a:	bf08      	it	eq
 800892c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008930:	f380 8809 	msr	PSP, r0
 8008934:	f3bf 8f6f 	isb	sy
 8008938:	4770      	bx	lr
 800893a:	bf00      	nop
 800893c:	f3af 8000 	nop.w

08008940 <pxCurrentTCBConst>:
 8008940:	20000db8 	.word	0x20000db8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008944:	bf00      	nop
 8008946:	bf00      	nop

08008948 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
	__asm volatile
 800894e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008952:	f383 8811 	msr	BASEPRI, r3
 8008956:	f3bf 8f6f 	isb	sy
 800895a:	f3bf 8f4f 	dsb	sy
 800895e:	607b      	str	r3, [r7, #4]
}
 8008960:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008962:	f7fe febd 	bl	80076e0 <xTaskIncrementTick>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d003      	beq.n	8008974 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800896c:	4b06      	ldr	r3, [pc, #24]	@ (8008988 <xPortSysTickHandler+0x40>)
 800896e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008972:	601a      	str	r2, [r3, #0]
 8008974:	2300      	movs	r3, #0
 8008976:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	f383 8811 	msr	BASEPRI, r3
}
 800897e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008980:	bf00      	nop
 8008982:	3708      	adds	r7, #8
 8008984:	46bd      	mov	sp, r7
 8008986:	bd80      	pop	{r7, pc}
 8008988:	e000ed04 	.word	0xe000ed04

0800898c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800898c:	b480      	push	{r7}
 800898e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008990:	4b0b      	ldr	r3, [pc, #44]	@ (80089c0 <vPortSetupTimerInterrupt+0x34>)
 8008992:	2200      	movs	r2, #0
 8008994:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008996:	4b0b      	ldr	r3, [pc, #44]	@ (80089c4 <vPortSetupTimerInterrupt+0x38>)
 8008998:	2200      	movs	r2, #0
 800899a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800899c:	4b0a      	ldr	r3, [pc, #40]	@ (80089c8 <vPortSetupTimerInterrupt+0x3c>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a0a      	ldr	r2, [pc, #40]	@ (80089cc <vPortSetupTimerInterrupt+0x40>)
 80089a2:	fba2 2303 	umull	r2, r3, r2, r3
 80089a6:	099b      	lsrs	r3, r3, #6
 80089a8:	4a09      	ldr	r2, [pc, #36]	@ (80089d0 <vPortSetupTimerInterrupt+0x44>)
 80089aa:	3b01      	subs	r3, #1
 80089ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80089ae:	4b04      	ldr	r3, [pc, #16]	@ (80089c0 <vPortSetupTimerInterrupt+0x34>)
 80089b0:	2207      	movs	r2, #7
 80089b2:	601a      	str	r2, [r3, #0]
}
 80089b4:	bf00      	nop
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	e000e010 	.word	0xe000e010
 80089c4:	e000e018 	.word	0xe000e018
 80089c8:	20000000 	.word	0x20000000
 80089cc:	10624dd3 	.word	0x10624dd3
 80089d0:	e000e014 	.word	0xe000e014

080089d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80089d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80089e4 <vPortEnableVFP+0x10>
 80089d8:	6801      	ldr	r1, [r0, #0]
 80089da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80089de:	6001      	str	r1, [r0, #0]
 80089e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80089e2:	bf00      	nop
 80089e4:	e000ed88 	.word	0xe000ed88

080089e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80089e8:	b480      	push	{r7}
 80089ea:	b085      	sub	sp, #20
 80089ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80089ee:	f3ef 8305 	mrs	r3, IPSR
 80089f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	2b0f      	cmp	r3, #15
 80089f8:	d915      	bls.n	8008a26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80089fa:	4a18      	ldr	r2, [pc, #96]	@ (8008a5c <vPortValidateInterruptPriority+0x74>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	4413      	add	r3, r2
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008a04:	4b16      	ldr	r3, [pc, #88]	@ (8008a60 <vPortValidateInterruptPriority+0x78>)
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	7afa      	ldrb	r2, [r7, #11]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d20b      	bcs.n	8008a26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008a0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a12:	f383 8811 	msr	BASEPRI, r3
 8008a16:	f3bf 8f6f 	isb	sy
 8008a1a:	f3bf 8f4f 	dsb	sy
 8008a1e:	607b      	str	r3, [r7, #4]
}
 8008a20:	bf00      	nop
 8008a22:	bf00      	nop
 8008a24:	e7fd      	b.n	8008a22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008a26:	4b0f      	ldr	r3, [pc, #60]	@ (8008a64 <vPortValidateInterruptPriority+0x7c>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8008a68 <vPortValidateInterruptPriority+0x80>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d90b      	bls.n	8008a4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a3a:	f383 8811 	msr	BASEPRI, r3
 8008a3e:	f3bf 8f6f 	isb	sy
 8008a42:	f3bf 8f4f 	dsb	sy
 8008a46:	603b      	str	r3, [r7, #0]
}
 8008a48:	bf00      	nop
 8008a4a:	bf00      	nop
 8008a4c:	e7fd      	b.n	8008a4a <vPortValidateInterruptPriority+0x62>
	}
 8008a4e:	bf00      	nop
 8008a50:	3714      	adds	r7, #20
 8008a52:	46bd      	mov	sp, r7
 8008a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a58:	4770      	bx	lr
 8008a5a:	bf00      	nop
 8008a5c:	e000e3f0 	.word	0xe000e3f0
 8008a60:	200013e4 	.word	0x200013e4
 8008a64:	e000ed0c 	.word	0xe000ed0c
 8008a68:	200013e8 	.word	0x200013e8

08008a6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	b08a      	sub	sp, #40	@ 0x28
 8008a70:	af00      	add	r7, sp, #0
 8008a72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008a74:	2300      	movs	r3, #0
 8008a76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008a78:	f7fe fd76 	bl	8007568 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8008bf0 <pvPortMalloc+0x184>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d101      	bne.n	8008a88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008a84:	f000 f924 	bl	8008cd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008a88:	4b5a      	ldr	r3, [pc, #360]	@ (8008bf4 <pvPortMalloc+0x188>)
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	f040 8095 	bne.w	8008bc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d01e      	beq.n	8008ada <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008a9c:	2208      	movs	r2, #8
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	4413      	add	r3, r2
 8008aa2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f003 0307 	and.w	r3, r3, #7
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d015      	beq.n	8008ada <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f023 0307 	bic.w	r3, r3, #7
 8008ab4:	3308      	adds	r3, #8
 8008ab6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f003 0307 	and.w	r3, r3, #7
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00b      	beq.n	8008ada <pvPortMalloc+0x6e>
	__asm volatile
 8008ac2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ac6:	f383 8811 	msr	BASEPRI, r3
 8008aca:	f3bf 8f6f 	isb	sy
 8008ace:	f3bf 8f4f 	dsb	sy
 8008ad2:	617b      	str	r3, [r7, #20]
}
 8008ad4:	bf00      	nop
 8008ad6:	bf00      	nop
 8008ad8:	e7fd      	b.n	8008ad6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d06f      	beq.n	8008bc0 <pvPortMalloc+0x154>
 8008ae0:	4b45      	ldr	r3, [pc, #276]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	687a      	ldr	r2, [r7, #4]
 8008ae6:	429a      	cmp	r2, r3
 8008ae8:	d86a      	bhi.n	8008bc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008aea:	4b44      	ldr	r3, [pc, #272]	@ (8008bfc <pvPortMalloc+0x190>)
 8008aec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008aee:	4b43      	ldr	r3, [pc, #268]	@ (8008bfc <pvPortMalloc+0x190>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008af4:	e004      	b.n	8008b00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008af8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b02:	685b      	ldr	r3, [r3, #4]
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	429a      	cmp	r2, r3
 8008b08:	d903      	bls.n	8008b12 <pvPortMalloc+0xa6>
 8008b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d1f1      	bne.n	8008af6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008b12:	4b37      	ldr	r3, [pc, #220]	@ (8008bf0 <pvPortMalloc+0x184>)
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b18:	429a      	cmp	r2, r3
 8008b1a:	d051      	beq.n	8008bc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	2208      	movs	r2, #8
 8008b22:	4413      	add	r3, r2
 8008b24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b28:	681a      	ldr	r2, [r3, #0]
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008b2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b30:	685a      	ldr	r2, [r3, #4]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	1ad2      	subs	r2, r2, r3
 8008b36:	2308      	movs	r3, #8
 8008b38:	005b      	lsls	r3, r3, #1
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d920      	bls.n	8008b80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4413      	add	r3, r2
 8008b44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	f003 0307 	and.w	r3, r3, #7
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d00b      	beq.n	8008b68 <pvPortMalloc+0xfc>
	__asm volatile
 8008b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b54:	f383 8811 	msr	BASEPRI, r3
 8008b58:	f3bf 8f6f 	isb	sy
 8008b5c:	f3bf 8f4f 	dsb	sy
 8008b60:	613b      	str	r3, [r7, #16]
}
 8008b62:	bf00      	nop
 8008b64:	bf00      	nop
 8008b66:	e7fd      	b.n	8008b64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	685a      	ldr	r2, [r3, #4]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	1ad2      	subs	r2, r2, r3
 8008b70:	69bb      	ldr	r3, [r7, #24]
 8008b72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008b74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b76:	687a      	ldr	r2, [r7, #4]
 8008b78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008b7a:	69b8      	ldr	r0, [r7, #24]
 8008b7c:	f000 f90a 	bl	8008d94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008b80:	4b1d      	ldr	r3, [pc, #116]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008b8e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b90:	681a      	ldr	r2, [r3, #0]
 8008b92:	4b1b      	ldr	r3, [pc, #108]	@ (8008c00 <pvPortMalloc+0x194>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d203      	bcs.n	8008ba2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008b9a:	4b17      	ldr	r3, [pc, #92]	@ (8008bf8 <pvPortMalloc+0x18c>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a18      	ldr	r2, [pc, #96]	@ (8008c00 <pvPortMalloc+0x194>)
 8008ba0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008ba2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ba4:	685a      	ldr	r2, [r3, #4]
 8008ba6:	4b13      	ldr	r3, [pc, #76]	@ (8008bf4 <pvPortMalloc+0x188>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	431a      	orrs	r2, r3
 8008bac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008bb6:	4b13      	ldr	r3, [pc, #76]	@ (8008c04 <pvPortMalloc+0x198>)
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	3301      	adds	r3, #1
 8008bbc:	4a11      	ldr	r2, [pc, #68]	@ (8008c04 <pvPortMalloc+0x198>)
 8008bbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008bc0:	f7fe fce0 	bl	8007584 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008bc4:	69fb      	ldr	r3, [r7, #28]
 8008bc6:	f003 0307 	and.w	r3, r3, #7
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00b      	beq.n	8008be6 <pvPortMalloc+0x17a>
	__asm volatile
 8008bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd2:	f383 8811 	msr	BASEPRI, r3
 8008bd6:	f3bf 8f6f 	isb	sy
 8008bda:	f3bf 8f4f 	dsb	sy
 8008bde:	60fb      	str	r3, [r7, #12]
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	e7fd      	b.n	8008be2 <pvPortMalloc+0x176>
	return pvReturn;
 8008be6:	69fb      	ldr	r3, [r7, #28]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3728      	adds	r7, #40	@ 0x28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}
 8008bf0:	20004ff4 	.word	0x20004ff4
 8008bf4:	20005008 	.word	0x20005008
 8008bf8:	20004ff8 	.word	0x20004ff8
 8008bfc:	20004fec 	.word	0x20004fec
 8008c00:	20004ffc 	.word	0x20004ffc
 8008c04:	20005000 	.word	0x20005000

08008c08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b086      	sub	sp, #24
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	2b00      	cmp	r3, #0
 8008c18:	d04f      	beq.n	8008cba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008c1a:	2308      	movs	r3, #8
 8008c1c:	425b      	negs	r3, r3
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	4413      	add	r3, r2
 8008c22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	4b25      	ldr	r3, [pc, #148]	@ (8008cc4 <vPortFree+0xbc>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4013      	ands	r3, r2
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d10b      	bne.n	8008c4e <vPortFree+0x46>
	__asm volatile
 8008c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c3a:	f383 8811 	msr	BASEPRI, r3
 8008c3e:	f3bf 8f6f 	isb	sy
 8008c42:	f3bf 8f4f 	dsb	sy
 8008c46:	60fb      	str	r3, [r7, #12]
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	e7fd      	b.n	8008c4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <vPortFree+0x66>
	__asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	60bb      	str	r3, [r7, #8]
}
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	685a      	ldr	r2, [r3, #4]
 8008c72:	4b14      	ldr	r3, [pc, #80]	@ (8008cc4 <vPortFree+0xbc>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d01e      	beq.n	8008cba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d11a      	bne.n	8008cba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	685a      	ldr	r2, [r3, #4]
 8008c88:	4b0e      	ldr	r3, [pc, #56]	@ (8008cc4 <vPortFree+0xbc>)
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	43db      	mvns	r3, r3
 8008c8e:	401a      	ands	r2, r3
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008c94:	f7fe fc68 	bl	8007568 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008c98:	693b      	ldr	r3, [r7, #16]
 8008c9a:	685a      	ldr	r2, [r3, #4]
 8008c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008cc8 <vPortFree+0xc0>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	4a09      	ldr	r2, [pc, #36]	@ (8008cc8 <vPortFree+0xc0>)
 8008ca4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008ca6:	6938      	ldr	r0, [r7, #16]
 8008ca8:	f000 f874 	bl	8008d94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008cac:	4b07      	ldr	r3, [pc, #28]	@ (8008ccc <vPortFree+0xc4>)
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	4a06      	ldr	r2, [pc, #24]	@ (8008ccc <vPortFree+0xc4>)
 8008cb4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008cb6:	f7fe fc65 	bl	8007584 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008cba:	bf00      	nop
 8008cbc:	3718      	adds	r7, #24
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	bd80      	pop	{r7, pc}
 8008cc2:	bf00      	nop
 8008cc4:	20005008 	.word	0x20005008
 8008cc8:	20004ff8 	.word	0x20004ff8
 8008ccc:	20005004 	.word	0x20005004

08008cd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008cd0:	b480      	push	{r7}
 8008cd2:	b085      	sub	sp, #20
 8008cd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008cd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008cda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008cdc:	4b27      	ldr	r3, [pc, #156]	@ (8008d7c <prvHeapInit+0xac>)
 8008cde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	f003 0307 	and.w	r3, r3, #7
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d00c      	beq.n	8008d04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	3307      	adds	r3, #7
 8008cee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	f023 0307 	bic.w	r3, r3, #7
 8008cf6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008cf8:	68ba      	ldr	r2, [r7, #8]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	4a1f      	ldr	r2, [pc, #124]	@ (8008d7c <prvHeapInit+0xac>)
 8008d00:	4413      	add	r3, r2
 8008d02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008d08:	4a1d      	ldr	r2, [pc, #116]	@ (8008d80 <prvHeapInit+0xb0>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008d0e:	4b1c      	ldr	r3, [pc, #112]	@ (8008d80 <prvHeapInit+0xb0>)
 8008d10:	2200      	movs	r2, #0
 8008d12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	68ba      	ldr	r2, [r7, #8]
 8008d18:	4413      	add	r3, r2
 8008d1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008d1c:	2208      	movs	r2, #8
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	1a9b      	subs	r3, r3, r2
 8008d22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	f023 0307 	bic.w	r3, r3, #7
 8008d2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4a15      	ldr	r2, [pc, #84]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008d32:	4b14      	ldr	r3, [pc, #80]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	2200      	movs	r2, #0
 8008d38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008d3a:	4b12      	ldr	r3, [pc, #72]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	1ad2      	subs	r2, r2, r3
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008d50:	4b0c      	ldr	r3, [pc, #48]	@ (8008d84 <prvHeapInit+0xb4>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	685b      	ldr	r3, [r3, #4]
 8008d5c:	4a0a      	ldr	r2, [pc, #40]	@ (8008d88 <prvHeapInit+0xb8>)
 8008d5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008d60:	683b      	ldr	r3, [r7, #0]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	4a09      	ldr	r2, [pc, #36]	@ (8008d8c <prvHeapInit+0xbc>)
 8008d66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008d68:	4b09      	ldr	r3, [pc, #36]	@ (8008d90 <prvHeapInit+0xc0>)
 8008d6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008d6e:	601a      	str	r2, [r3, #0]
}
 8008d70:	bf00      	nop
 8008d72:	3714      	adds	r7, #20
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	200013ec 	.word	0x200013ec
 8008d80:	20004fec 	.word	0x20004fec
 8008d84:	20004ff4 	.word	0x20004ff4
 8008d88:	20004ffc 	.word	0x20004ffc
 8008d8c:	20004ff8 	.word	0x20004ff8
 8008d90:	20005008 	.word	0x20005008

08008d94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008d9c:	4b28      	ldr	r3, [pc, #160]	@ (8008e40 <prvInsertBlockIntoFreeList+0xac>)
 8008d9e:	60fb      	str	r3, [r7, #12]
 8008da0:	e002      	b.n	8008da8 <prvInsertBlockIntoFreeList+0x14>
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	60fb      	str	r3, [r7, #12]
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	687a      	ldr	r2, [r7, #4]
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d8f7      	bhi.n	8008da2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	68ba      	ldr	r2, [r7, #8]
 8008dbc:	4413      	add	r3, r2
 8008dbe:	687a      	ldr	r2, [r7, #4]
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d108      	bne.n	8008dd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	685a      	ldr	r2, [r3, #4]
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	685b      	ldr	r3, [r3, #4]
 8008dcc:	441a      	add	r2, r3
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	685b      	ldr	r3, [r3, #4]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	441a      	add	r2, r3
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	429a      	cmp	r2, r3
 8008de8:	d118      	bne.n	8008e1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	4b15      	ldr	r3, [pc, #84]	@ (8008e44 <prvInsertBlockIntoFreeList+0xb0>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d00d      	beq.n	8008e12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	441a      	add	r2, r3
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681a      	ldr	r2, [r3, #0]
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	601a      	str	r2, [r3, #0]
 8008e10:	e008      	b.n	8008e24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008e12:	4b0c      	ldr	r3, [pc, #48]	@ (8008e44 <prvInsertBlockIntoFreeList+0xb0>)
 8008e14:	681a      	ldr	r2, [r3, #0]
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	601a      	str	r2, [r3, #0]
 8008e1a:	e003      	b.n	8008e24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	681a      	ldr	r2, [r3, #0]
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008e24:	68fa      	ldr	r2, [r7, #12]
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d002      	beq.n	8008e32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e32:	bf00      	nop
 8008e34:	3714      	adds	r7, #20
 8008e36:	46bd      	mov	sp, r7
 8008e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e3c:	4770      	bx	lr
 8008e3e:	bf00      	nop
 8008e40:	20004fec 	.word	0x20004fec
 8008e44:	20004ff4 	.word	0x20004ff4

08008e48 <memset>:
 8008e48:	4402      	add	r2, r0
 8008e4a:	4603      	mov	r3, r0
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d100      	bne.n	8008e52 <memset+0xa>
 8008e50:	4770      	bx	lr
 8008e52:	f803 1b01 	strb.w	r1, [r3], #1
 8008e56:	e7f9      	b.n	8008e4c <memset+0x4>

08008e58 <_reclaim_reent>:
 8008e58:	4b29      	ldr	r3, [pc, #164]	@ (8008f00 <_reclaim_reent+0xa8>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4283      	cmp	r3, r0
 8008e5e:	b570      	push	{r4, r5, r6, lr}
 8008e60:	4604      	mov	r4, r0
 8008e62:	d04b      	beq.n	8008efc <_reclaim_reent+0xa4>
 8008e64:	69c3      	ldr	r3, [r0, #28]
 8008e66:	b1ab      	cbz	r3, 8008e94 <_reclaim_reent+0x3c>
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	b16b      	cbz	r3, 8008e88 <_reclaim_reent+0x30>
 8008e6c:	2500      	movs	r5, #0
 8008e6e:	69e3      	ldr	r3, [r4, #28]
 8008e70:	68db      	ldr	r3, [r3, #12]
 8008e72:	5959      	ldr	r1, [r3, r5]
 8008e74:	2900      	cmp	r1, #0
 8008e76:	d13b      	bne.n	8008ef0 <_reclaim_reent+0x98>
 8008e78:	3504      	adds	r5, #4
 8008e7a:	2d80      	cmp	r5, #128	@ 0x80
 8008e7c:	d1f7      	bne.n	8008e6e <_reclaim_reent+0x16>
 8008e7e:	69e3      	ldr	r3, [r4, #28]
 8008e80:	4620      	mov	r0, r4
 8008e82:	68d9      	ldr	r1, [r3, #12]
 8008e84:	f000 f872 	bl	8008f6c <_free_r>
 8008e88:	69e3      	ldr	r3, [r4, #28]
 8008e8a:	6819      	ldr	r1, [r3, #0]
 8008e8c:	b111      	cbz	r1, 8008e94 <_reclaim_reent+0x3c>
 8008e8e:	4620      	mov	r0, r4
 8008e90:	f000 f86c 	bl	8008f6c <_free_r>
 8008e94:	6961      	ldr	r1, [r4, #20]
 8008e96:	b111      	cbz	r1, 8008e9e <_reclaim_reent+0x46>
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f000 f867 	bl	8008f6c <_free_r>
 8008e9e:	69e1      	ldr	r1, [r4, #28]
 8008ea0:	b111      	cbz	r1, 8008ea8 <_reclaim_reent+0x50>
 8008ea2:	4620      	mov	r0, r4
 8008ea4:	f000 f862 	bl	8008f6c <_free_r>
 8008ea8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8008eaa:	b111      	cbz	r1, 8008eb2 <_reclaim_reent+0x5a>
 8008eac:	4620      	mov	r0, r4
 8008eae:	f000 f85d 	bl	8008f6c <_free_r>
 8008eb2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008eb4:	b111      	cbz	r1, 8008ebc <_reclaim_reent+0x64>
 8008eb6:	4620      	mov	r0, r4
 8008eb8:	f000 f858 	bl	8008f6c <_free_r>
 8008ebc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8008ebe:	b111      	cbz	r1, 8008ec6 <_reclaim_reent+0x6e>
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	f000 f853 	bl	8008f6c <_free_r>
 8008ec6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008ec8:	b111      	cbz	r1, 8008ed0 <_reclaim_reent+0x78>
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f000 f84e 	bl	8008f6c <_free_r>
 8008ed0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008ed2:	b111      	cbz	r1, 8008eda <_reclaim_reent+0x82>
 8008ed4:	4620      	mov	r0, r4
 8008ed6:	f000 f849 	bl	8008f6c <_free_r>
 8008eda:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8008edc:	b111      	cbz	r1, 8008ee4 <_reclaim_reent+0x8c>
 8008ede:	4620      	mov	r0, r4
 8008ee0:	f000 f844 	bl	8008f6c <_free_r>
 8008ee4:	6a23      	ldr	r3, [r4, #32]
 8008ee6:	b14b      	cbz	r3, 8008efc <_reclaim_reent+0xa4>
 8008ee8:	4620      	mov	r0, r4
 8008eea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008eee:	4718      	bx	r3
 8008ef0:	680e      	ldr	r6, [r1, #0]
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f000 f83a 	bl	8008f6c <_free_r>
 8008ef8:	4631      	mov	r1, r6
 8008efa:	e7bb      	b.n	8008e74 <_reclaim_reent+0x1c>
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	bf00      	nop
 8008f00:	20000010 	.word	0x20000010

08008f04 <__libc_init_array>:
 8008f04:	b570      	push	{r4, r5, r6, lr}
 8008f06:	4d0d      	ldr	r5, [pc, #52]	@ (8008f3c <__libc_init_array+0x38>)
 8008f08:	4c0d      	ldr	r4, [pc, #52]	@ (8008f40 <__libc_init_array+0x3c>)
 8008f0a:	1b64      	subs	r4, r4, r5
 8008f0c:	10a4      	asrs	r4, r4, #2
 8008f0e:	2600      	movs	r6, #0
 8008f10:	42a6      	cmp	r6, r4
 8008f12:	d109      	bne.n	8008f28 <__libc_init_array+0x24>
 8008f14:	4d0b      	ldr	r5, [pc, #44]	@ (8008f44 <__libc_init_array+0x40>)
 8008f16:	4c0c      	ldr	r4, [pc, #48]	@ (8008f48 <__libc_init_array+0x44>)
 8008f18:	f000 f87e 	bl	8009018 <_init>
 8008f1c:	1b64      	subs	r4, r4, r5
 8008f1e:	10a4      	asrs	r4, r4, #2
 8008f20:	2600      	movs	r6, #0
 8008f22:	42a6      	cmp	r6, r4
 8008f24:	d105      	bne.n	8008f32 <__libc_init_array+0x2e>
 8008f26:	bd70      	pop	{r4, r5, r6, pc}
 8008f28:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f2c:	4798      	blx	r3
 8008f2e:	3601      	adds	r6, #1
 8008f30:	e7ee      	b.n	8008f10 <__libc_init_array+0xc>
 8008f32:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f36:	4798      	blx	r3
 8008f38:	3601      	adds	r6, #1
 8008f3a:	e7f2      	b.n	8008f22 <__libc_init_array+0x1e>
 8008f3c:	08009134 	.word	0x08009134
 8008f40:	08009134 	.word	0x08009134
 8008f44:	08009134 	.word	0x08009134
 8008f48:	08009138 	.word	0x08009138

08008f4c <__retarget_lock_acquire_recursive>:
 8008f4c:	4770      	bx	lr

08008f4e <__retarget_lock_release_recursive>:
 8008f4e:	4770      	bx	lr

08008f50 <memcpy>:
 8008f50:	440a      	add	r2, r1
 8008f52:	4291      	cmp	r1, r2
 8008f54:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008f58:	d100      	bne.n	8008f5c <memcpy+0xc>
 8008f5a:	4770      	bx	lr
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f62:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f66:	4291      	cmp	r1, r2
 8008f68:	d1f9      	bne.n	8008f5e <memcpy+0xe>
 8008f6a:	bd10      	pop	{r4, pc}

08008f6c <_free_r>:
 8008f6c:	b538      	push	{r3, r4, r5, lr}
 8008f6e:	4605      	mov	r5, r0
 8008f70:	2900      	cmp	r1, #0
 8008f72:	d041      	beq.n	8008ff8 <_free_r+0x8c>
 8008f74:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f78:	1f0c      	subs	r4, r1, #4
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	bfb8      	it	lt
 8008f7e:	18e4      	addlt	r4, r4, r3
 8008f80:	f000 f83e 	bl	8009000 <__malloc_lock>
 8008f84:	4a1d      	ldr	r2, [pc, #116]	@ (8008ffc <_free_r+0x90>)
 8008f86:	6813      	ldr	r3, [r2, #0]
 8008f88:	b933      	cbnz	r3, 8008f98 <_free_r+0x2c>
 8008f8a:	6063      	str	r3, [r4, #4]
 8008f8c:	6014      	str	r4, [r2, #0]
 8008f8e:	4628      	mov	r0, r5
 8008f90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008f94:	f000 b83a 	b.w	800900c <__malloc_unlock>
 8008f98:	42a3      	cmp	r3, r4
 8008f9a:	d908      	bls.n	8008fae <_free_r+0x42>
 8008f9c:	6820      	ldr	r0, [r4, #0]
 8008f9e:	1821      	adds	r1, r4, r0
 8008fa0:	428b      	cmp	r3, r1
 8008fa2:	bf01      	itttt	eq
 8008fa4:	6819      	ldreq	r1, [r3, #0]
 8008fa6:	685b      	ldreq	r3, [r3, #4]
 8008fa8:	1809      	addeq	r1, r1, r0
 8008faa:	6021      	streq	r1, [r4, #0]
 8008fac:	e7ed      	b.n	8008f8a <_free_r+0x1e>
 8008fae:	461a      	mov	r2, r3
 8008fb0:	685b      	ldr	r3, [r3, #4]
 8008fb2:	b10b      	cbz	r3, 8008fb8 <_free_r+0x4c>
 8008fb4:	42a3      	cmp	r3, r4
 8008fb6:	d9fa      	bls.n	8008fae <_free_r+0x42>
 8008fb8:	6811      	ldr	r1, [r2, #0]
 8008fba:	1850      	adds	r0, r2, r1
 8008fbc:	42a0      	cmp	r0, r4
 8008fbe:	d10b      	bne.n	8008fd8 <_free_r+0x6c>
 8008fc0:	6820      	ldr	r0, [r4, #0]
 8008fc2:	4401      	add	r1, r0
 8008fc4:	1850      	adds	r0, r2, r1
 8008fc6:	4283      	cmp	r3, r0
 8008fc8:	6011      	str	r1, [r2, #0]
 8008fca:	d1e0      	bne.n	8008f8e <_free_r+0x22>
 8008fcc:	6818      	ldr	r0, [r3, #0]
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	6053      	str	r3, [r2, #4]
 8008fd2:	4408      	add	r0, r1
 8008fd4:	6010      	str	r0, [r2, #0]
 8008fd6:	e7da      	b.n	8008f8e <_free_r+0x22>
 8008fd8:	d902      	bls.n	8008fe0 <_free_r+0x74>
 8008fda:	230c      	movs	r3, #12
 8008fdc:	602b      	str	r3, [r5, #0]
 8008fde:	e7d6      	b.n	8008f8e <_free_r+0x22>
 8008fe0:	6820      	ldr	r0, [r4, #0]
 8008fe2:	1821      	adds	r1, r4, r0
 8008fe4:	428b      	cmp	r3, r1
 8008fe6:	bf04      	itt	eq
 8008fe8:	6819      	ldreq	r1, [r3, #0]
 8008fea:	685b      	ldreq	r3, [r3, #4]
 8008fec:	6063      	str	r3, [r4, #4]
 8008fee:	bf04      	itt	eq
 8008ff0:	1809      	addeq	r1, r1, r0
 8008ff2:	6021      	streq	r1, [r4, #0]
 8008ff4:	6054      	str	r4, [r2, #4]
 8008ff6:	e7ca      	b.n	8008f8e <_free_r+0x22>
 8008ff8:	bd38      	pop	{r3, r4, r5, pc}
 8008ffa:	bf00      	nop
 8008ffc:	20005148 	.word	0x20005148

08009000 <__malloc_lock>:
 8009000:	4801      	ldr	r0, [pc, #4]	@ (8009008 <__malloc_lock+0x8>)
 8009002:	f7ff bfa3 	b.w	8008f4c <__retarget_lock_acquire_recursive>
 8009006:	bf00      	nop
 8009008:	20005144 	.word	0x20005144

0800900c <__malloc_unlock>:
 800900c:	4801      	ldr	r0, [pc, #4]	@ (8009014 <__malloc_unlock+0x8>)
 800900e:	f7ff bf9e 	b.w	8008f4e <__retarget_lock_release_recursive>
 8009012:	bf00      	nop
 8009014:	20005144 	.word	0x20005144

08009018 <_init>:
 8009018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800901a:	bf00      	nop
 800901c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800901e:	bc08      	pop	{r3}
 8009020:	469e      	mov	lr, r3
 8009022:	4770      	bx	lr

08009024 <_fini>:
 8009024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009026:	bf00      	nop
 8009028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902a:	bc08      	pop	{r3}
 800902c:	469e      	mov	lr, r3
 800902e:	4770      	bx	lr
