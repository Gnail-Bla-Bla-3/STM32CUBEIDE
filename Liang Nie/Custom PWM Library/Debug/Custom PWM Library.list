
Custom PWM Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08009ef0  08009ef0  0000aef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fec  08009fec  0000b118  2**0
                  CONTENTS
  4 .ARM          00000008  08009fec  08009fec  0000afec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009ff4  08009ff4  0000b118  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009ff4  08009ff4  0000aff4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009ff8  08009ff8  0000aff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000118  20000000  08009ffc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b118  2**0
                  CONTENTS
 10 .bss          00005448  20000118  20000118  0000b118  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005560  20005560  0000b118  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b118  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020129  00000000  00000000  0000b148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000404c  00000000  00000000  0002b271  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001bb8  00000000  00000000  0002f2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000015c3  00000000  00000000  00030e78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024143  00000000  00000000  0003243b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020027  00000000  00000000  0005657e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ddbdf  00000000  00000000  000765a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00154184  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079b8  00000000  00000000  001541c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0015bb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000118 	.word	0x20000118
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009ed8 	.word	0x08009ed8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000011c 	.word	0x2000011c
 80001cc:	08009ed8 	.word	0x08009ed8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <usart_Init>:
referee_warning_t referee_warning;
dart_info_t dart_info;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 80004c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004c8:	4905      	ldr	r1, [pc, #20]	@ (80004e0 <usart_Init+0x20>)
 80004ca:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <usart_Init+0x24>)
 80004cc:	f005 fd4c 	bl	8005f68 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80004d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004d4:	4904      	ldr	r1, [pc, #16]	@ (80004e8 <usart_Init+0x28>)
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <usart_Init+0x2c>)
 80004d8:	f005 fd46 	bl	8005f68 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	20000134 	.word	0x20000134
 80004e4:	200006ec 	.word	0x200006ec
 80004e8:	20000234 	.word	0x20000234
 80004ec:	2000077c 	.word	0x2000077c

080004f0 <HAL_UARTEx_RxEventCallback>:
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f4:	b09f      	sub	sp, #124	@ 0x7c
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 80004fa:	460b      	mov	r3, r1
 80004fc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	if (huart == &huart6) {
 8000500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000502:	4b81      	ldr	r3, [pc, #516]	@ (8000708 <HAL_UARTEx_RxEventCallback+0x218>)
 8000504:	429a      	cmp	r2, r3
 8000506:	f040 81c9 	bne.w	800089c <HAL_UARTEx_RxEventCallback+0x3ac>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 800050a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800050e:	497f      	ldr	r1, [pc, #508]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000510:	487d      	ldr	r0, [pc, #500]	@ (8000708 <HAL_UARTEx_RxEventCallback+0x218>)
 8000512:	f005 fd29 	bl	8005f68 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 8000516:	4b7d      	ldr	r3, [pc, #500]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	021b      	lsls	r3, r3, #8
 800051c:	b21a      	sxth	r2, r3
 800051e:	4b7b      	ldr	r3, [pc, #492]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000520:	799b      	ldrb	r3, [r3, #6]
 8000522:	b21b      	sxth	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b21b      	sxth	r3, r3
 8000528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 800052c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8000530:	f240 2302 	movw	r3, #514	@ 0x202
 8000534:	429a      	cmp	r2, r3
 8000536:	f000 8153 	beq.w	80007e0 <HAL_UARTEx_RxEventCallback+0x2f0>
 800053a:	f240 2302 	movw	r3, #514	@ 0x202
 800053e:	429a      	cmp	r2, r3
 8000540:	f300 81ab 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000544:	f240 2301 	movw	r3, #513	@ 0x201
 8000548:	429a      	cmp	r2, r3
 800054a:	f000 80e7 	beq.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 800054e:	f240 2301 	movw	r3, #513	@ 0x201
 8000552:	429a      	cmp	r2, r3
 8000554:	f300 81a1 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000558:	f5b2 7f83 	cmp.w	r2, #262	@ 0x106
 800055c:	f280 819d 	bge.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000560:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8000564:	f280 80da 	bge.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 8000568:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 800056c:	f300 8195 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000570:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8000574:	f300 80d2 	bgt.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 8000578:	2a03      	cmp	r2, #3
 800057a:	f000 80cf 	beq.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 800057e:	2a03      	cmp	r2, #3
 8000580:	f300 818b 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000584:	2a01      	cmp	r2, #1
 8000586:	d003      	beq.n	8000590 <HAL_UARTEx_RxEventCallback+0xa0>
 8000588:	2a02      	cmp	r2, #2
 800058a:	f000 80c3 	beq.w	8000714 <HAL_UARTEx_RxEventCallback+0x224>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 800058e:	e184      	b.n	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
		    	game_status.game_type = RxBuff_2[7];
 8000590:	4b5e      	ldr	r3, [pc, #376]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	4a5e      	ldr	r2, [pc, #376]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 8000596:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 8000598:	4b5c      	ldr	r3, [pc, #368]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 800059a:	7a1b      	ldrb	r3, [r3, #8]
 800059c:	4a5c      	ldr	r2, [pc, #368]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 800059e:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 80005a0:	4b5a      	ldr	r3, [pc, #360]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005a2:	7a5b      	ldrb	r3, [r3, #9]
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	4b58      	ldr	r3, [pc, #352]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005aa:	7a9b      	ldrb	r3, [r3, #10]
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4a56      	ldr	r2, [pc, #344]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 80005b6:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 80005b8:	4b54      	ldr	r3, [pc, #336]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005ba:	7adb      	ldrb	r3, [r3, #11]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2200      	movs	r2, #0
 80005c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80005c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	f04f 0100 	mov.w	r1, #0
 80005cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80005ce:	0619      	lsls	r1, r3, #24
 80005d0:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 80005d2:	4b4e      	ldr	r3, [pc, #312]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005d4:	7b1b      	ldrb	r3, [r3, #12]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80005dc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80005de:	f04f 0200 	mov.w	r2, #0
 80005e2:	f04f 0300 	mov.w	r3, #0
 80005e6:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 80005e8:	0433      	lsls	r3, r6, #16
 80005ea:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 80005ec:	ea40 0402 	orr.w	r4, r0, r2
 80005f0:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 80005f4:	4b45      	ldr	r3, [pc, #276]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005f6:	7b5b      	ldrb	r3, [r3, #13]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2200      	movs	r2, #0
 80005fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80005fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8000600:	f04f 0200 	mov.w	r2, #0
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800060a:	020b      	lsls	r3, r1, #8
 800060c:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 800060e:	ea44 0802 	orr.w	r8, r4, r2
 8000612:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 8000616:	4b3d      	ldr	r3, [pc, #244]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000618:	7b9b      	ldrb	r3, [r3, #14]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2200      	movs	r2, #0
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000620:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000622:	f04f 0200 	mov.w	r2, #0
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800062c:	000b      	movs	r3, r1
 800062e:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 8000630:	ea48 0102 	orr.w	r1, r8, r2
 8000634:	6439      	str	r1, [r7, #64]	@ 0x40
 8000636:	ea49 0303 	orr.w	r3, r9, r3
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 800063c:	4b33      	ldr	r3, [pc, #204]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 800063e:	7bdb      	ldrb	r3, [r3, #15]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2200      	movs	r2, #0
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000646:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000648:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800064c:	460b      	mov	r3, r1
 800064e:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8000652:	460b      	mov	r3, r1
 8000654:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 8000658:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800065c:	460b      	mov	r3, r1
 800065e:	ea43 030a 	orr.w	r3, r3, sl
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
 8000664:	4613      	mov	r3, r2
 8000666:	ea43 030b 	orr.w	r3, r3, fp
 800066a:	637b      	str	r3, [r7, #52]	@ 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 800066e:	7c1b      	ldrb	r3, [r3, #16]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2200      	movs	r2, #0
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	f04f 0300 	mov.w	r3, #0
 8000680:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000684:	4629      	mov	r1, r5
 8000686:	040b      	lsls	r3, r1, #16
 8000688:	4621      	mov	r1, r4
 800068a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800068e:	4621      	mov	r1, r4
 8000690:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 8000692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000696:	4621      	mov	r1, r4
 8000698:	4311      	orrs	r1, r2
 800069a:	6239      	str	r1, [r7, #32]
 800069c:	4629      	mov	r1, r5
 800069e:	4319      	orrs	r1, r3
 80006a0:	6279      	str	r1, [r7, #36]	@ 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80006a4:	7c5b      	ldrb	r3, [r3, #17]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2200      	movs	r2, #0
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	61fa      	str	r2, [r7, #28]
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80006ba:	4629      	mov	r1, r5
 80006bc:	020b      	lsls	r3, r1, #8
 80006be:	4621      	mov	r1, r4
 80006c0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80006c4:	4621      	mov	r1, r4
 80006c6:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 80006c8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80006cc:	4621      	mov	r1, r4
 80006ce:	4311      	orrs	r1, r2
 80006d0:	6139      	str	r1, [r7, #16]
 80006d2:	4629      	mov	r1, r5
 80006d4:	4319      	orrs	r1, r3
 80006d6:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80006da:	7c9b      	ldrb	r3, [r3, #18]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	60fa      	str	r2, [r7, #12]
 80006e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80006e8:	4623      	mov	r3, r4
 80006ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006ee:	4602      	mov	r2, r0
 80006f0:	4313      	orrs	r3, r2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	462b      	mov	r3, r5
 80006f6:	460a      	mov	r2, r1
 80006f8:	4313      	orrs	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 80006fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000702:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 8000706:	e0c9      	b.n	800089c <HAL_UARTEx_RxEventCallback+0x3ac>
 8000708:	2000077c 	.word	0x2000077c
 800070c:	20000234 	.word	0x20000234
 8000710:	20000338 	.word	0x20000338
		    	game_status.game_type = RxBuff_2[7];
 8000714:	4b64      	ldr	r3, [pc, #400]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000716:	79da      	ldrb	r2, [r3, #7]
 8000718:	4b64      	ldr	r3, [pc, #400]	@ (80008ac <HAL_UARTEx_RxEventCallback+0x3bc>)
 800071a:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_id = RxBuff_2[7];
 800071c:	4b62      	ldr	r3, [pc, #392]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800071e:	79da      	ldrb	r2, [r3, #7]
 8000720:	4b63      	ldr	r3, [pc, #396]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000722:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 8000724:	4b60      	ldr	r3, [pc, #384]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000726:	7a1a      	ldrb	r2, [r3, #8]
 8000728:	4b61      	ldr	r3, [pc, #388]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800072a:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 800072c:	4b5e      	ldr	r3, [pc, #376]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800072e:	7a5b      	ldrb	r3, [r3, #9]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21a      	sxth	r2, r3
 8000734:	4b5c      	ldr	r3, [pc, #368]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000736:	7a9b      	ldrb	r3, [r3, #10]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b5b      	ldr	r3, [pc, #364]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000742:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 8000744:	4b58      	ldr	r3, [pc, #352]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000746:	7adb      	ldrb	r3, [r3, #11]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b56      	ldr	r3, [pc, #344]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800074e:	7b1b      	ldrb	r3, [r3, #12]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b55      	ldr	r3, [pc, #340]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800075a:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 800075c:	4b52      	ldr	r3, [pc, #328]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800075e:	7b5b      	ldrb	r3, [r3, #13]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21a      	sxth	r2, r3
 8000764:	4b50      	ldr	r3, [pc, #320]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000766:	7b9b      	ldrb	r3, [r3, #14]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b4f      	ldr	r3, [pc, #316]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000772:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8000774:	4b4c      	ldr	r3, [pc, #304]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000776:	7bdb      	ldrb	r3, [r3, #15]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	b21a      	sxth	r2, r3
 800077c:	4b4a      	ldr	r3, [pc, #296]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800077e:	7c1b      	ldrb	r3, [r3, #16]
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21b      	sxth	r3, r3
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b49      	ldr	r3, [pc, #292]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800078a:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 800078c:	4b46      	ldr	r3, [pc, #280]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800078e:	7c5b      	ldrb	r3, [r3, #17]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	4b44      	ldr	r3, [pc, #272]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000796:	7c9b      	ldrb	r3, [r3, #18]
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b43      	ldr	r3, [pc, #268]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007a2:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 80007a4:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007a6:	7cdb      	ldrb	r3, [r3, #19]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2d9      	uxtb	r1, r3
 80007ae:	4a40      	ldr	r2, [pc, #256]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007b0:	7b13      	ldrb	r3, [r2, #12]
 80007b2:	f361 0300 	bfi	r3, r1, #0, #1
 80007b6:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 80007b8:	4b3b      	ldr	r3, [pc, #236]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007ba:	7d1b      	ldrb	r3, [r3, #20]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	b2d9      	uxtb	r1, r3
 80007c2:	4a3b      	ldr	r2, [pc, #236]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007c4:	7b13      	ldrb	r3, [r2, #12]
 80007c6:	f361 0341 	bfi	r3, r1, #1, #1
 80007ca:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 80007cc:	4b36      	ldr	r3, [pc, #216]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007ce:	7d5b      	ldrb	r3, [r3, #21]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2d9      	uxtb	r1, r3
 80007d6:	4a36      	ldr	r2, [pc, #216]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007d8:	7b13      	ldrb	r3, [r2, #12]
 80007da:	f361 0382 	bfi	r3, r1, #2, #1
 80007de:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 80007e0:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007ea:	79db      	ldrb	r3, [r3, #7]
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80007f6:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 80007f8:	4b2b      	ldr	r3, [pc, #172]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007fa:	7a9b      	ldrb	r3, [r3, #10]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800080e:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000812:	7b9b      	ldrb	r3, [r3, #14]
 8000814:	061a      	lsls	r2, r3, #24
 8000816:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000818:	7b5b      	ldrb	r3, [r3, #13]
 800081a:	041b      	lsls	r3, r3, #16
 800081c:	431a      	orrs	r2, r3
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000820:	7b1b      	ldrb	r3, [r3, #12]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	4313      	orrs	r3, r2
 8000826:	4a20      	ldr	r2, [pc, #128]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000828:	7ad2      	ldrb	r2, [r2, #11]
 800082a:	4313      	orrs	r3, r2
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000836:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800083c:	7bdb      	ldrb	r3, [r3, #15]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000844:	7c1b      	ldrb	r3, [r3, #16]
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b21b      	sxth	r3, r3
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000850:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000854:	7c9b      	ldrb	r3, [r3, #18]
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	b21a      	sxth	r2, r3
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800085c:	7c5b      	ldrb	r3, [r3, #17]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	b21b      	sxth	r3, r3
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000868:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800086c:	7d1b      	ldrb	r3, [r3, #20]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21a      	sxth	r2, r3
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000874:	7cdb      	ldrb	r3, [r3, #19]
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000880:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000884:	7d9b      	ldrb	r3, [r3, #22]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b21a      	sxth	r2, r3
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800088c:	7d5b      	ldrb	r3, [r3, #21]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b21b      	sxth	r3, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000898:	81da      	strh	r2, [r3, #14]
		        break;
 800089a:	bf00      	nop
		    }
		}
	}
}
 800089c:	bf00      	nop
 800089e:	377c      	adds	r7, #124	@ 0x7c
 80008a0:	46bd      	mov	sp, r7
 80008a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008a6:	bf00      	nop
 80008a8:	20000234 	.word	0x20000234
 80008ac:	20000338 	.word	0x20000338
 80008b0:	20000358 	.word	0x20000358
 80008b4:	20000348 	.word	0x20000348

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008bc:	f002 fa58 	bl	8002d70 <HAL_Init>

  /* USER CODE BEGIN Init */
  usart_Init();
 80008c0:	f7ff fdfe 	bl	80004c0 <usart_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f85a 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f000 fcf2 	bl	80012b0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008cc:	f000 fc8a 	bl	80011e4 <MX_DMA_Init>
  MX_CAN1_Init();
 80008d0:	f000 f8c0 	bl	8000a54 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008d4:	f000 f8f4 	bl	8000ac0 <MX_CAN2_Init>
  MX_SPI1_Init();
 80008d8:	f000 f956 	bl	8000b88 <MX_SPI1_Init>
  MX_TIM4_Init();
 80008dc:	f000 fa32 	bl	8000d44 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80008e0:	f000 fc00 	bl	80010e4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80008e4:	f000 fc54 	bl	8001190 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80008e8:	f000 f984 	bl	8000bf4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80008ec:	f000 fb10 	bl	8000f10 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80008f0:	f000 fc22 	bl	8001138 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80008f4:	f000 fba8 	bl	8001048 <MX_TIM10_Init>
  MX_I2C3_Init();
 80008f8:	f000 f918 	bl	8000b2c <MX_I2C3_Init>
  MX_TIM5_Init();
 80008fc:	f000 fa98 	bl	8000e30 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000900:	f006 fc50 	bl	80071a4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8000904:	4a11      	ldr	r2, [pc, #68]	@ (800094c <main+0x94>)
 8000906:	2100      	movs	r1, #0
 8000908:	4811      	ldr	r0, [pc, #68]	@ (8000950 <main+0x98>)
 800090a:	f006 fc95 	bl	8007238 <osThreadNew>
 800090e:	4603      	mov	r3, r0
 8000910:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <main+0x9c>)
 8000912:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8000914:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <main+0xa0>)
 8000916:	2100      	movs	r1, #0
 8000918:	4810      	ldr	r0, [pc, #64]	@ (800095c <main+0xa4>)
 800091a:	f006 fc8d 	bl	8007238 <osThreadNew>
 800091e:	4603      	mov	r3, r0
 8000920:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <main+0xa8>)
 8000922:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8000924:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <main+0xac>)
 8000926:	2100      	movs	r1, #0
 8000928:	480f      	ldr	r0, [pc, #60]	@ (8000968 <main+0xb0>)
 800092a:	f006 fc85 	bl	8007238 <osThreadNew>
 800092e:	4603      	mov	r3, r0
 8000930:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <main+0xb4>)
 8000932:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8000934:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <main+0xb8>)
 8000936:	2100      	movs	r1, #0
 8000938:	480e      	ldr	r0, [pc, #56]	@ (8000974 <main+0xbc>)
 800093a:	f006 fc7d 	bl	8007238 <osThreadNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <main+0xc0>)
 8000942:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000944:	f006 fc52 	bl	80071ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <main+0x90>
 800094c:	08009f3c 	.word	0x08009f3c
 8000950:	080014bd 	.word	0x080014bd
 8000954:	200009a4 	.word	0x200009a4
 8000958:	08009f60 	.word	0x08009f60
 800095c:	080014cd 	.word	0x080014cd
 8000960:	200009a8 	.word	0x200009a8
 8000964:	08009f84 	.word	0x08009f84
 8000968:	080017dd 	.word	0x080017dd
 800096c:	200009ac 	.word	0x200009ac
 8000970:	08009fa8 	.word	0x08009fa8
 8000974:	080017ed 	.word	0x080017ed
 8000978:	200009b0 	.word	0x200009b0

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	@ 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2230      	movs	r2, #48	@ 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f009 f9bc 	bl	8009d08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	4a28      	ldr	r2, [pc, #160]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b0:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <SystemClock_Config+0xd4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a22      	ldr	r2, [pc, #136]	@ (8000a50 <SystemClock_Config+0xd4>)
 80009c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <SystemClock_Config+0xd4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80009ec:	2306      	movs	r3, #6
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f0:	23a8      	movs	r3, #168	@ 0xa8
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fda5 	bl	8004550 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a0c:	f000 fef6 	bl	80017fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2302      	movs	r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2105      	movs	r1, #5
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f004 f806 	bl	8004a40 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a3a:	f000 fedf 	bl	80017fc <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a3e:	f004 f8e5 	bl	8004c0c <HAL_RCC_EnableCSS>
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	@ 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <MX_CAN1_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a60:	2203      	movs	r2, #3
 8000a62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a72:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000a76:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a7a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a7e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000aa6:	f002 f9d5 	bl	8002e54 <HAL_CAN_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f000 fea4 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000368 	.word	0x20000368
 8000abc:	40006400 	.word	0x40006400

08000ac0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ac6:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <MX_CAN2_Init+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000acc:	2203      	movs	r2, #3
 8000ace:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ade:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000ae2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ae6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000aea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b12:	f002 f99f 	bl	8002e54 <HAL_CAN_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000b1c:	f000 fe6e 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	20000390 	.word	0x20000390
 8000b28:	40006800 	.word	0x40006800

08000b2c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <MX_I2C3_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_I2C3_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b6a:	f003 fbad 	bl	80042c8 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fe42 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200003b8 	.word	0x200003b8
 8000b80:	40005c00 	.word	0x40005c00
 8000b84:	00061a80 	.word	0x00061a80

08000b88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000b8e:	4a18      	ldr	r2, [pc, #96]	@ (8000bf0 <MX_SPI1_Init+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000b94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bbc:	2238      	movs	r2, #56	@ 0x38
 8000bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bda:	f004 f938 	bl	8004e4e <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be4:	f000 fe0a 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	2000040c 	.word	0x2000040c
 8000bf0:	40013000 	.word	0x40013000

08000bf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b092      	sub	sp, #72	@ 0x48
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f009 f872 	bl	8009d08 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b45      	ldr	r3, [pc, #276]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c26:	4a46      	ldr	r2, [pc, #280]	@ (8000d40 <MX_TIM1_Init+0x14c>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8000c2a:	4b44      	ldr	r3, [pc, #272]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c2c:	f240 124f 	movw	r2, #335	@ 0x14f
 8000c30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b42      	ldr	r3, [pc, #264]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000c38:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b3e      	ldr	r3, [pc, #248]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c46:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c52:	483a      	ldr	r0, [pc, #232]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c54:	f004 fa3c 	bl	80050d0 <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fdcd 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4832      	ldr	r0, [pc, #200]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c72:	f005 f85b 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 fdbe 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	@ 0x60
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4825      	ldr	r0, [pc, #148]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000ca6:	f004 fb9b 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000cb0:	f000 fda4 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481f      	ldr	r0, [pc, #124]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000cbe:	f004 fb8f 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000cc8:	f000 fd98 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4819      	ldr	r0, [pc, #100]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000cd6:	f004 fb83 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ce0:	f000 fd8c 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	220c      	movs	r2, #12
 8000cea:	4619      	mov	r1, r3
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000cee:	f004 fb77 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000cf8:	f000 fd80 	bl	80017fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000d20:	f005 f880 	bl	8005e24 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000d2a:	f000 fd67 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d2e:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000d30:	f001 fc42 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8000d34:	bf00      	nop
 8000d36:	3748      	adds	r7, #72	@ 0x48
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000464 	.word	0x20000464
 8000d40:	40010000 	.word	0x40010000

08000d44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	@ 0x38
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d76:	4a2d      	ldr	r2, [pc, #180]	@ (8000e2c <MX_TIM4_Init+0xe8>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d7c:	2253      	movs	r2, #83	@ 0x53
 8000d7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d88:	22f9      	movs	r2, #249	@ 0xf9
 8000d8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d98:	4823      	ldr	r0, [pc, #140]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d9a:	f004 f8e1 	bl	8004f60 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000da4:	f000 fd2a 	bl	80017fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db2:	4619      	mov	r1, r3
 8000db4:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000db6:	f004 fbd5 	bl	8005564 <HAL_TIM_ConfigClockSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000dc0:	f000 fd1c 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc4:	4818      	ldr	r0, [pc, #96]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000dc6:	f004 f983 	bl	80050d0 <HAL_TIM_PWM_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000dd0:	f000 fd14 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	4619      	mov	r1, r3
 8000de2:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000de4:	f004 ffa2 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000dee:	f000 fd05 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df2:	2360      	movs	r3, #96	@ 0x60
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8000df6:	f642 1303 	movw	r3, #10499	@ 0x2903
 8000dfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2208      	movs	r2, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000e0c:	f004 fae8 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e16:	f000 fcf1 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e1a:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000e1c:	f001 fbcc 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8000e20:	bf00      	nop
 8000e22:	3738      	adds	r7, #56	@ 0x38
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200004ac 	.word	0x200004ac
 8000e2c:	40000800 	.word	0x40000800

08000e30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e54:	4a2d      	ldr	r2, [pc, #180]	@ (8000f0c <MX_TIM5_Init+0xdc>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000e58:	4b2b      	ldr	r3, [pc, #172]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e5a:	2253      	movs	r2, #83	@ 0x53
 8000e5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8000e64:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e66:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000e6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e78:	4823      	ldr	r0, [pc, #140]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e7a:	f004 f929 	bl	80050d0 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000e84:	f000 fcba 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4619      	mov	r1, r3
 8000e96:	481c      	ldr	r0, [pc, #112]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e98:	f004 ff48 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000ea2:	f000 fcab 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	@ 0x60
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000ebe:	f004 fa8f 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000ec8:	f000 fc98 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000ed4:	f004 fa84 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ede:	f000 fc8d 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000eea:	f004 fa79 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000ef4:	f000 fc82 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000efa:	f001 fb5d 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	200004f4 	.word	0x200004f4
 8000f0c:	40000c00 	.word	0x40000c00

08000f10 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b092      	sub	sp, #72	@ 0x48
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2220      	movs	r2, #32
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f008 fee4 	bl	8009d08 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f40:	4b3f      	ldr	r3, [pc, #252]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f42:	4a40      	ldr	r2, [pc, #256]	@ (8001044 <MX_TIM8_Init+0x134>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 335;
 8000f46:	4b3e      	ldr	r3, [pc, #248]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f48:	f240 124f 	movw	r2, #335	@ 0x14f
 8000f4c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000f54:	4b3a      	ldr	r3, [pc, #232]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f62:	4b37      	ldr	r3, [pc, #220]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f68:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f6e:	4834      	ldr	r0, [pc, #208]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f70:	f004 f8ae 	bl	80050d0 <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000f7a:	f000 fc3f 	bl	80017fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482c      	ldr	r0, [pc, #176]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f8e:	f004 fecd 	bl	8005d2c <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 fc30 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	@ 0x60
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481f      	ldr	r0, [pc, #124]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000fc2:	f004 fa0d 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8000fcc:	f000 fc16 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4819      	ldr	r0, [pc, #100]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000fda:	f004 fa01 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 8000fe4:	f000 fc0a 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fec:	2208      	movs	r2, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000ff2:	f004 f9f5 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000ffc:	f000 fbfe 	bl	80017fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4807      	ldr	r0, [pc, #28]	@ (8001040 <MX_TIM8_Init+0x130>)
 8001024:	f004 fefe 	bl	8005e24 <HAL_TIMEx_ConfigBreakDeadTime>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 800102e:	f000 fbe5 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <MX_TIM8_Init+0x130>)
 8001034:	f001 fac0 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 8001038:	bf00      	nop
 800103a:	3748      	adds	r7, #72	@ 0x48
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000053c 	.word	0x2000053c
 8001044:	40010400 	.word	0x40010400

08001048 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <MX_TIM10_Init+0x98>)
 8001064:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_TIM10_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001074:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001078:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_TIM10_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001086:	4815      	ldr	r0, [pc, #84]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001088:	f003 ff6a 	bl	8004f60 <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001092:	f000 fbb3 	bl	80017fc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001096:	4811      	ldr	r0, [pc, #68]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001098:	f004 f81a 	bl	80050d0 <HAL_TIM_PWM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80010a2:	f000 fbab 	bl	80017fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	@ 0x60
 80010a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <MX_TIM10_Init+0x94>)
 80010be:	f004 f98f 	bl	80053e0 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80010c8:	f000 fb98 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010cc:	4803      	ldr	r0, [pc, #12]	@ (80010dc <MX_TIM10_Init+0x94>)
 80010ce:	f001 fa73 	bl	80025b8 <HAL_TIM_MspPostInit>

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	20000584 	.word	0x20000584
 80010e0:	40014400 	.word	0x40014400

080010e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <MX_USART1_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800111c:	f004 fed4 	bl	8005ec8 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001126:	f000 fb69 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200006ec 	.word	0x200006ec
 8001134:	40011000 	.word	0x40011000

08001138 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_USART3_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001144:	4a11      	ldr	r2, [pc, #68]	@ (800118c <MX_USART3_UART_Init+0x54>)
 8001146:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001170:	f004 feaa 	bl	8005ec8 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f000 fb3f 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	20000734 	.word	0x20000734
 8001188:	40004800 	.word	0x40004800
 800118c:	000186a0 	.word	0x000186a0

08001190 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART6_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c8:	f004 fe7e 	bl	8005ec8 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 fb13 	bl	80017fc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	2000077c 	.word	0x2000077c
 80011e0:	40011400 	.word	0x40011400

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b2f      	ldr	r3, [pc, #188]	@ (80012ac <MX_DMA_Init+0xc8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a2e      	ldr	r2, [pc, #184]	@ (80012ac <MX_DMA_Init+0xc8>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b2c      	ldr	r3, [pc, #176]	@ (80012ac <MX_DMA_Init+0xc8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b28      	ldr	r3, [pc, #160]	@ (80012ac <MX_DMA_Init+0xc8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a27      	ldr	r2, [pc, #156]	@ (80012ac <MX_DMA_Init+0xc8>)
 8001210:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b25      	ldr	r3, [pc, #148]	@ (80012ac <MX_DMA_Init+0xc8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	200c      	movs	r0, #12
 8001228:	f002 fa23 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800122c:	200c      	movs	r0, #12
 800122e:	f002 fa3c 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	202f      	movs	r0, #47	@ 0x2f
 8001238:	f002 fa1b 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800123c:	202f      	movs	r0, #47	@ 0x2f
 800123e:	f002 fa34 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	2039      	movs	r0, #57	@ 0x39
 8001248:	f002 fa13 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800124c:	2039      	movs	r0, #57	@ 0x39
 800124e:	f002 fa2c 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	203a      	movs	r0, #58	@ 0x3a
 8001258:	f002 fa0b 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800125c:	203a      	movs	r0, #58	@ 0x3a
 800125e:	f002 fa24 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	203b      	movs	r0, #59	@ 0x3b
 8001268:	f002 fa03 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800126c:	203b      	movs	r0, #59	@ 0x3b
 800126e:	f002 fa1c 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2044      	movs	r0, #68	@ 0x44
 8001278:	f002 f9fb 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800127c:	2044      	movs	r0, #68	@ 0x44
 800127e:	f002 fa14 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2045      	movs	r0, #69	@ 0x45
 8001288:	f002 f9f3 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800128c:	2045      	movs	r0, #69	@ 0x45
 800128e:	f002 fa0c 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001292:	2200      	movs	r2, #0
 8001294:	2105      	movs	r1, #5
 8001296:	2046      	movs	r0, #70	@ 0x46
 8001298:	f002 f9eb 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800129c:	2046      	movs	r0, #70	@ 0x46
 800129e:	f002 fa04 	bl	80036aa <HAL_NVIC_EnableIRQ>

}
 80012a2:	bf00      	nop
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	40023800 	.word	0x40023800

080012b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08e      	sub	sp, #56	@ 0x38
 80012b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]
 80012c0:	609a      	str	r2, [r3, #8]
 80012c2:	60da      	str	r2, [r3, #12]
 80012c4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	623b      	str	r3, [r7, #32]
 80012ca:	4b77      	ldr	r3, [pc, #476]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	4a76      	ldr	r2, [pc, #472]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80012d0:	f043 0302 	orr.w	r3, r3, #2
 80012d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012d6:	4b74      	ldr	r3, [pc, #464]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	623b      	str	r3, [r7, #32]
 80012e0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	61fb      	str	r3, [r7, #28]
 80012e6:	4b70      	ldr	r3, [pc, #448]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	4a6f      	ldr	r2, [pc, #444]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80012ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f2:	4b6d      	ldr	r3, [pc, #436]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012fa:	61fb      	str	r3, [r7, #28]
 80012fc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012fe:	2300      	movs	r3, #0
 8001300:	61bb      	str	r3, [r7, #24]
 8001302:	4b69      	ldr	r3, [pc, #420]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001306:	4a68      	ldr	r2, [pc, #416]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001308:	f043 0301 	orr.w	r3, r3, #1
 800130c:	6313      	str	r3, [r2, #48]	@ 0x30
 800130e:	4b66      	ldr	r3, [pc, #408]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	f003 0301 	and.w	r3, r3, #1
 8001316:	61bb      	str	r3, [r7, #24]
 8001318:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	617b      	str	r3, [r7, #20]
 800131e:	4b62      	ldr	r3, [pc, #392]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001322:	4a61      	ldr	r2, [pc, #388]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001324:	f043 0308 	orr.w	r3, r3, #8
 8001328:	6313      	str	r3, [r2, #48]	@ 0x30
 800132a:	4b5f      	ldr	r3, [pc, #380]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	f003 0308 	and.w	r3, r3, #8
 8001332:	617b      	str	r3, [r7, #20]
 8001334:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b5b      	ldr	r3, [pc, #364]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133e:	4a5a      	ldr	r2, [pc, #360]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	@ 0x30
 8001346:	4b58      	ldr	r3, [pc, #352]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b54      	ldr	r3, [pc, #336]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800135a:	4a53      	ldr	r2, [pc, #332]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 800135c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001360:	6313      	str	r3, [r2, #48]	@ 0x30
 8001362:	4b51      	ldr	r3, [pc, #324]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b4d      	ldr	r3, [pc, #308]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001376:	4a4c      	ldr	r2, [pc, #304]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001378:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800137c:	6313      	str	r3, [r2, #48]	@ 0x30
 800137e:	4b4a      	ldr	r3, [pc, #296]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b46      	ldr	r3, [pc, #280]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a45      	ldr	r2, [pc, #276]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 8001394:	f043 0320 	orr.w	r3, r3, #32
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b43      	ldr	r3, [pc, #268]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0320 	and.w	r3, r3, #32
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	603b      	str	r3, [r7, #0]
 80013aa:	4b3f      	ldr	r3, [pc, #252]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a3e      	ldr	r2, [pc, #248]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80013b0:	f043 0310 	orr.w	r3, r3, #16
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b3c      	ldr	r3, [pc, #240]	@ (80014a8 <MX_GPIO_Init+0x1f8>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0310 	and.w	r3, r3, #16
 80013be:	603b      	str	r3, [r7, #0]
 80013c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	@ 0x40
 80013c6:	4839      	ldr	r0, [pc, #228]	@ (80014ac <MX_GPIO_Init+0x1fc>)
 80013c8:	f002 ff40 	bl	800424c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013cc:	2200      	movs	r2, #0
 80013ce:	2110      	movs	r1, #16
 80013d0:	4837      	ldr	r0, [pc, #220]	@ (80014b0 <MX_GPIO_Init+0x200>)
 80013d2:	f002 ff3b 	bl	800424c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
 80013d8:	2101      	movs	r1, #1
 80013da:	4836      	ldr	r0, [pc, #216]	@ (80014b4 <MX_GPIO_Init+0x204>)
 80013dc:	f002 ff36 	bl	800424c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013e0:	2340      	movs	r3, #64	@ 0x40
 80013e2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013f4:	4619      	mov	r1, r3
 80013f6:	482d      	ldr	r0, [pc, #180]	@ (80014ac <MX_GPIO_Init+0x1fc>)
 80013f8:	f002 fd74 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013fc:	2308      	movs	r3, #8
 80013fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001400:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001404:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800140a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800140e:	4619      	mov	r1, r3
 8001410:	4826      	ldr	r0, [pc, #152]	@ (80014ac <MX_GPIO_Init+0x1fc>)
 8001412:	f002 fd67 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001416:	2301      	movs	r3, #1
 8001418:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800141a:	2300      	movs	r3, #0
 800141c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800141e:	2300      	movs	r3, #0
 8001420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001422:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001426:	4619      	mov	r1, r3
 8001428:	4821      	ldr	r0, [pc, #132]	@ (80014b0 <MX_GPIO_Init+0x200>)
 800142a:	f002 fd5b 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800142e:	2310      	movs	r3, #16
 8001430:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001432:	2301      	movs	r3, #1
 8001434:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001436:	2300      	movs	r3, #0
 8001438:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143a:	2300      	movs	r3, #0
 800143c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001442:	4619      	mov	r1, r3
 8001444:	481a      	ldr	r0, [pc, #104]	@ (80014b0 <MX_GPIO_Init+0x200>)
 8001446:	f002 fd4d 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 800144a:	2330      	movs	r3, #48	@ 0x30
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800144e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001452:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001454:	2300      	movs	r3, #0
 8001456:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800145c:	4619      	mov	r1, r3
 800145e:	4816      	ldr	r0, [pc, #88]	@ (80014b8 <MX_GPIO_Init+0x208>)
 8001460:	f002 fd40 	bl	8003ee4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001464:	2301      	movs	r3, #1
 8001466:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001478:	4619      	mov	r1, r3
 800147a:	480e      	ldr	r0, [pc, #56]	@ (80014b4 <MX_GPIO_Init+0x204>)
 800147c:	f002 fd32 	bl	8003ee4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2105      	movs	r1, #5
 8001484:	2009      	movs	r0, #9
 8001486:	f002 f8f4 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800148a:	2009      	movs	r0, #9
 800148c:	f002 f90d 	bl	80036aa <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2105      	movs	r1, #5
 8001494:	200a      	movs	r0, #10
 8001496:	f002 f8ec 	bl	8003672 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800149a:	200a      	movs	r0, #10
 800149c:	f002 f905 	bl	80036aa <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014a0:	bf00      	nop
 80014a2:	3738      	adds	r7, #56	@ 0x38
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021800 	.word	0x40021800
 80014b0:	40020000 	.word	0x40020000
 80014b4:	40020400 	.word	0x40020400
 80014b8:	40020800 	.word	0x40020800

080014bc <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b082      	sub	sp, #8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  osDelay(1);
 80014c4:	2001      	movs	r0, #1
 80014c6:	f005 ff49 	bl	800735c <osDelay>
 80014ca:	e7fb      	b.n	80014c4 <TaskMain+0x8>

080014cc <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08e      	sub	sp, #56	@ 0x38
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start(&htim4);
  HAL_TIM_Base_Start(&htim5);
  HAL_TIM_Base_Start(&htim8);
  */
  PWMInit(&htim1, &htim4, &htim5, &htim8);
 80014d4:	4bbc      	ldr	r3, [pc, #752]	@ (80017c8 <TaskChassis+0x2fc>)
 80014d6:	4abd      	ldr	r2, [pc, #756]	@ (80017cc <TaskChassis+0x300>)
 80014d8:	49bd      	ldr	r1, [pc, #756]	@ (80017d0 <TaskChassis+0x304>)
 80014da:	48be      	ldr	r0, [pc, #760]	@ (80017d4 <TaskChassis+0x308>)
 80014dc:	f000 f994 	bl	8001808 <PWMInit>


  int16_t speedOfPulse = 100;
 80014e0:	2364      	movs	r3, #100	@ 0x64
 80014e2:	843b      	strh	r3, [r7, #32]
  int16_t negativeComponent = speedOfPulse*(-0.5f);
 80014e4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80014e8:	ee07 3a90 	vmov	s15, r3
 80014ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014f0:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80014f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014fc:	ee17 3a90 	vmov	r3, s15
 8001500:	83fb      	strh	r3, [r7, #30]
  float FancyLEDscaler = (1/(float)speedOfPulse);
 8001502:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001506:	ee07 3a90 	vmov	s15, r3
 800150a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800150e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001512:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001516:	edc7 7a06 	vstr	s15, [r7, #24]

  int8_t iSwapper = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  int16_t iVal = negativeComponent;
 8001520:	8bfb      	ldrh	r3, [r7, #30]
 8001522:	86bb      	strh	r3, [r7, #52]	@ 0x34
  int8_t iSwapper1 = 0;
 8001524:	2300      	movs	r3, #0
 8001526:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  int16_t iVal1 = negativeComponent*-1;
 800152a:	8bfb      	ldrh	r3, [r7, #30]
 800152c:	425b      	negs	r3, r3
 800152e:	b29b      	uxth	r3, r3
 8001530:	863b      	strh	r3, [r7, #48]	@ 0x30
  int8_t iSwapper2 = 1;
 8001532:	2301      	movs	r3, #1
 8001534:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  int16_t iVal2 = negativeComponent*-1;
 8001538:	8bfb      	ldrh	r3, [r7, #30]
 800153a:	425b      	negs	r3, r3
 800153c:	b29b      	uxth	r3, r3
 800153e:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  int16_t MotorCycle = 400;
 8001540:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001544:	857b      	strh	r3, [r7, #42]	@ 0x2a
  */
  // int8_t iSwapper3 = 1;
  // int16_t buzzerVal = 0;
  // int8_t swapper = 0;

  int16_t servoPosition = 1200;
 8001546:	f44f 6396 	mov.w	r3, #1200	@ 0x4b0
 800154a:	853b      	strh	r3, [r7, #40]	@ 0x28

	timeTracker++;
	*/
	// PWMOutput(Buzzer, 1, NeverGonnaGiveYouUpNotes());

	  PWMOutput(Buzzer, 1, CaliforniaGirlsNotes());
 800154c:	f000 fcec 	bl	8001f28 <CaliforniaGirlsNotes>
 8001550:	4603      	mov	r3, r0
 8001552:	461a      	mov	r2, r3
 8001554:	2101      	movs	r1, #1
 8001556:	2002      	movs	r0, #2
 8001558:	f000 fb8c 	bl	8001c74 <PWMOutput>

	if (iVal > speedOfPulse) {
 800155c:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 8001560:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001564:	429a      	cmp	r2, r3
 8001566:	dd07      	ble.n	8001578 <TaskChassis+0xac>
		iVal = speedOfPulse-1;
 8001568:	8c3b      	ldrh	r3, [r7, #32]
 800156a:	3b01      	subs	r3, #1
 800156c:	b29b      	uxth	r3, r3
 800156e:	86bb      	strh	r3, [r7, #52]	@ 0x34
		iSwapper = 1;
 8001570:	2301      	movs	r3, #1
 8001572:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8001576:	e00c      	b.n	8001592 <TaskChassis+0xc6>
	} else if (iVal < negativeComponent) {
 8001578:	f9b7 2034 	ldrsh.w	r2, [r7, #52]	@ 0x34
 800157c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001580:	429a      	cmp	r2, r3
 8001582:	da06      	bge.n	8001592 <TaskChassis+0xc6>
		iVal = negativeComponent+1;
 8001584:	8bfb      	ldrh	r3, [r7, #30]
 8001586:	3301      	adds	r3, #1
 8001588:	b29b      	uxth	r3, r3
 800158a:	86bb      	strh	r3, [r7, #52]	@ 0x34
		iSwapper = 0;
 800158c:	2300      	movs	r3, #0
 800158e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	}
	if (iSwapper == 1) {
 8001592:	f997 3037 	ldrsb.w	r3, [r7, #55]	@ 0x37
 8001596:	2b01      	cmp	r3, #1
 8001598:	d106      	bne.n	80015a8 <TaskChassis+0xdc>
		iVal--;
 800159a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800159e:	b29b      	uxth	r3, r3
 80015a0:	3b01      	subs	r3, #1
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80015a6:	e005      	b.n	80015b4 <TaskChassis+0xe8>
	} else {
		iVal++;
 80015a8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80015ac:	b29b      	uxth	r3, r3
 80015ae:	3301      	adds	r3, #1
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	86bb      	strh	r3, [r7, #52]	@ 0x34
	}


	if (iVal1 > speedOfPulse) {
 80015b4:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80015b8:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80015bc:	429a      	cmp	r2, r3
 80015be:	dd07      	ble.n	80015d0 <TaskChassis+0x104>
		iVal1 = speedOfPulse-1;
 80015c0:	8c3b      	ldrh	r3, [r7, #32]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	863b      	strh	r3, [r7, #48]	@ 0x30
		iSwapper1 = 1;
 80015c8:	2301      	movs	r3, #1
 80015ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015ce:	e00c      	b.n	80015ea <TaskChassis+0x11e>
	} else if (iVal1 < negativeComponent) {
 80015d0:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	@ 0x30
 80015d4:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015d8:	429a      	cmp	r2, r3
 80015da:	da06      	bge.n	80015ea <TaskChassis+0x11e>
		iVal1 = negativeComponent+1;
 80015dc:	8bfb      	ldrh	r3, [r7, #30]
 80015de:	3301      	adds	r3, #1
 80015e0:	b29b      	uxth	r3, r3
 80015e2:	863b      	strh	r3, [r7, #48]	@ 0x30
		iSwapper1 = 0;
 80015e4:	2300      	movs	r3, #0
 80015e6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	}
	if (iSwapper1 == 1) {
 80015ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d106      	bne.n	8001600 <TaskChassis+0x134>
		iVal1--;
 80015f2:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80015f6:	b29b      	uxth	r3, r3
 80015f8:	3b01      	subs	r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	863b      	strh	r3, [r7, #48]	@ 0x30
 80015fe:	e005      	b.n	800160c <TaskChassis+0x140>
	} else {
		iVal1++;
 8001600:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8001604:	b29b      	uxth	r3, r3
 8001606:	3301      	adds	r3, #1
 8001608:	b29b      	uxth	r3, r3
 800160a:	863b      	strh	r3, [r7, #48]	@ 0x30
	}


	if (iVal2 > speedOfPulse) {
 800160c:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 8001610:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001614:	429a      	cmp	r2, r3
 8001616:	dd07      	ble.n	8001628 <TaskChassis+0x15c>
		iVal2 = speedOfPulse-1;
 8001618:	8c3b      	ldrh	r3, [r7, #32]
 800161a:	3b01      	subs	r3, #1
 800161c:	b29b      	uxth	r3, r3
 800161e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		iSwapper2 = 1;
 8001620:	2301      	movs	r3, #1
 8001622:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001626:	e00c      	b.n	8001642 <TaskChassis+0x176>
	} else if (iVal2 < negativeComponent) {
 8001628:	f9b7 202c 	ldrsh.w	r2, [r7, #44]	@ 0x2c
 800162c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001630:	429a      	cmp	r2, r3
 8001632:	da06      	bge.n	8001642 <TaskChassis+0x176>
		iVal2 = negativeComponent+1;
 8001634:	8bfb      	ldrh	r3, [r7, #30]
 8001636:	3301      	adds	r3, #1
 8001638:	b29b      	uxth	r3, r3
 800163a:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		iSwapper2 = 0;
 800163c:	2300      	movs	r3, #0
 800163e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	}
	if (iSwapper2 == 1) {
 8001642:	f997 302f 	ldrsb.w	r3, [r7, #47]	@ 0x2f
 8001646:	2b01      	cmp	r3, #1
 8001648:	d106      	bne.n	8001658 <TaskChassis+0x18c>
		iVal2--;
 800164a:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800164e:	b29b      	uxth	r3, r3
 8001650:	3b01      	subs	r3, #1
 8001652:	b29b      	uxth	r3, r3
 8001654:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001656:	e005      	b.n	8001664 <TaskChassis+0x198>
	} else {
		iVal2++;
 8001658:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800165c:	b29b      	uxth	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	b29b      	uxth	r3, r3
 8001662:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	}

	int16_t Val = iVal;
 8001664:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001666:	84fb      	strh	r3, [r7, #38]	@ 0x26
	if (iVal < 0) {
 8001668:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800166c:	2b00      	cmp	r3, #0
 800166e:	da01      	bge.n	8001674 <TaskChassis+0x1a8>
		Val = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	84fb      	strh	r3, [r7, #38]	@ 0x26
	}
	int16_t Val1 = iVal1;
 8001674:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001676:	84bb      	strh	r3, [r7, #36]	@ 0x24
	if (iVal1 < 0) {
 8001678:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800167c:	2b00      	cmp	r3, #0
 800167e:	da01      	bge.n	8001684 <TaskChassis+0x1b8>
		Val1 = 0;
 8001680:	2300      	movs	r3, #0
 8001682:	84bb      	strh	r3, [r7, #36]	@ 0x24
	}
	int16_t Val2 = iVal2;
 8001684:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001686:	847b      	strh	r3, [r7, #34]	@ 0x22
	if (iVal2 < 0) {
 8001688:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800168c:	2b00      	cmp	r3, #0
 800168e:	da01      	bge.n	8001694 <TaskChassis+0x1c8>
		Val2 = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	847b      	strh	r3, [r7, #34]	@ 0x22
	}



	float realVal = Val * FancyLEDscaler;
 8001694:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001698:	ee07 3a90 	vmov	s15, r3
 800169c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016a0:	ed97 7a06 	vldr	s14, [r7, #24]
 80016a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a8:	edc7 7a05 	vstr	s15, [r7, #20]
	float realVal1 = Val1 * FancyLEDscaler;
 80016ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b8:	ed97 7a06 	vldr	s14, [r7, #24]
 80016bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c0:	edc7 7a04 	vstr	s15, [r7, #16]
	float realVal2 = Val2 * FancyLEDscaler;
 80016c4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80016c8:	ee07 3a90 	vmov	s15, r3
 80016cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016d0:	ed97 7a06 	vldr	s14, [r7, #24]
 80016d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016d8:	edc7 7a03 	vstr	s15, [r7, #12]

	// usart_printf("%d\r\n", iVal);
	// (TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency)

	int8_t KEY = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80016dc:	2101      	movs	r1, #1
 80016de:	483e      	ldr	r0, [pc, #248]	@ (80017d8 <TaskChassis+0x30c>)
 80016e0:	f002 fd9c 	bl	800421c <HAL_GPIO_ReadPin>
 80016e4:	4603      	mov	r3, r0
 80016e6:	72fb      	strb	r3, [r7, #11]
	if (MotorCycle > 1650) {
 80016e8:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80016ec:	f240 6272 	movw	r2, #1650	@ 0x672
 80016f0:	4293      	cmp	r3, r2
 80016f2:	dd03      	ble.n	80016fc <TaskChassis+0x230>
		MotorCycle = 1650;
 80016f4:	f240 6372 	movw	r3, #1650	@ 0x672
 80016f8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80016fa:	e008      	b.n	800170e <TaskChassis+0x242>

	} else if (MotorCycle < 950) {
 80016fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8001700:	f240 32b5 	movw	r2, #949	@ 0x3b5
 8001704:	4293      	cmp	r3, r2
 8001706:	dc02      	bgt.n	800170e <TaskChassis+0x242>
		MotorCycle = 950;
 8001708:	f240 33b6 	movw	r3, #950	@ 0x3b6
 800170c:	857b      	strh	r3, [r7, #42]	@ 0x2a
	}


	if (KEY == 1) {
 800170e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d107      	bne.n	8001726 <TaskChassis+0x25a>
		MotorCycle = MotorCycle - 6;
 8001716:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8001718:	3b06      	subs	r3, #6
 800171a:	b29b      	uxth	r3, r3
 800171c:	857b      	strh	r3, [r7, #42]	@ 0x2a
		servoPosition = 1000;
 800171e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001722:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001724:	e008      	b.n	8001738 <TaskChassis+0x26c>
		// PWMOff(Buzzer, 1);

	} else {
		initializeCaliforniaGirls();
 8001726:	f000 fbe9 	bl	8001efc <initializeCaliforniaGirls>
		MotorCycle = MotorCycle + 6;
 800172a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800172c:	3306      	adds	r3, #6
 800172e:	b29b      	uxth	r3, r3
 8001730:	857b      	strh	r3, [r7, #42]	@ 0x2a
		servoPosition = 2500;
 8001732:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001736:	853b      	strh	r3, [r7, #40]	@ 0x28
	}
	// usart_printf("%d %d\r\n", KEY, MotorCycle);
	// usart_printf("%d %d %d  0\r\n", iVal, iVal1, iVal2);

	// htim4.Instance->CCR3=150;
	PWMOutput(LED, 3, 500);
 8001738:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800173c:	2103      	movs	r1, #3
 800173e:	2001      	movs	r0, #1
 8001740:	f000 fa98 	bl	8001c74 <PWMOutput>
	PWMOutput(LED, 2, 500);
 8001744:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001748:	2102      	movs	r1, #2
 800174a:	2001      	movs	r0, #1
 800174c:	f000 fa92 	bl	8001c74 <PWMOutput>
	PWMOutput(LED, 1, 500);
 8001750:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001754:	2101      	movs	r1, #1
 8001756:	2001      	movs	r0, #1
 8001758:	f000 fa8c 	bl	8001c74 <PWMOutput>
	//(htim1).Init.Period = 999;
	// PWMOutput(Motor, 5, 500);

	PWMOutput(Motor, 1, 50);
 800175c:	2232      	movs	r2, #50	@ 0x32
 800175e:	2101      	movs	r1, #1
 8001760:	2000      	movs	r0, #0
 8001762:	f000 fa87 	bl	8001c74 <PWMOutput>

	//PWMOutput(Buzzer, 1, 90);
	// usart_printf("beanis7\r\n");

	// (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val)
	PWMInitialize(LED, FR, 3, realVal2);
 8001766:	ed97 0a03 	vldr	s0, [r7, #12]
 800176a:	2203      	movs	r2, #3
 800176c:	2101      	movs	r1, #1
 800176e:	2001      	movs	r0, #1
 8001770:	f000 f968 	bl	8001a44 <PWMInitialize>
	PWMInitialize(LED, FR, 2, realVal);
 8001774:	ed97 0a05 	vldr	s0, [r7, #20]
 8001778:	2202      	movs	r2, #2
 800177a:	2101      	movs	r1, #1
 800177c:	2001      	movs	r0, #1
 800177e:	f000 f961 	bl	8001a44 <PWMInitialize>
	PWMInitialize(LED, FR, 1, realVal1);
 8001782:	ed97 0a04 	vldr	s0, [r7, #16]
 8001786:	2201      	movs	r2, #1
 8001788:	2101      	movs	r1, #1
 800178a:	2001      	movs	r0, #1
 800178c:	f000 f95a 	bl	8001a44 <PWMInitialize>
	// (htim1).Instance->CCR1=499;

	// PWMInitialize(Motor, FR, 1, 0.5);
	// PWMInitialize(Motor, MS, 5, MotorCycle);
	PWMInitialize(Motor, MS, 1, servoPosition);
 8001790:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8001794:	ee07 3a90 	vmov	s15, r3
 8001798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800179c:	eeb0 0a67 	vmov.f32	s0, s15
 80017a0:	2201      	movs	r2, #1
 80017a2:	2100      	movs	r1, #0
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f94d 	bl	8001a44 <PWMInitialize>

	PWMInitialize(Buzzer, FR, 1, 0.5);
 80017aa:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80017ae:	2201      	movs	r2, #1
 80017b0:	2101      	movs	r1, #1
 80017b2:	2002      	movs	r0, #2
 80017b4:	f000 f946 	bl	8001a44 <PWMInitialize>
	// (*tim5).Instance->CCR2=value;

	// htim5.Init.Period = 1000;

	// htim5.Instance->CCR2=400;
	mainPrint();
 80017b8:	f000 fa8c 	bl	8001cd4 <mainPrint>

	PWMTimerStarter();
 80017bc:	f000 fa92 	bl	8001ce4 <PWMTimerStarter>

    osDelay(10);
 80017c0:	200a      	movs	r0, #10
 80017c2:	f005 fdcb 	bl	800735c <osDelay>
  {
 80017c6:	e6c1      	b.n	800154c <TaskChassis+0x80>
 80017c8:	2000053c 	.word	0x2000053c
 80017cc:	200004f4 	.word	0x200004f4
 80017d0:	200004ac 	.word	0x200004ac
 80017d4:	20000464 	.word	0x20000464
 80017d8:	40020000 	.word	0x40020000

080017dc <imu_temp_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_temp_control_task */
__weak void imu_temp_control_task(void *argument)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b082      	sub	sp, #8
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_temp_control_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f005 fdb9 	bl	800735c <osDelay>
 80017ea:	e7fb      	b.n	80017e4 <imu_temp_control_task+0x8>

080017ec <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80017f4:	2001      	movs	r0, #1
 80017f6:	f005 fdb1 	bl	800735c <osDelay>
 80017fa:	e7fb      	b.n	80017f4 <TaskTurret+0x8>

080017fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001800:	b672      	cpsid	i
}
 8001802:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001804:	bf00      	nop
 8001806:	e7fd      	b.n	8001804 <Error_Handler+0x8>

08001808 <PWMInit>:
uint32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b084      	sub	sp, #16
 800180c:	af00      	add	r7, sp, #0
 800180e:	60f8      	str	r0, [r7, #12]
 8001810:	60b9      	str	r1, [r7, #8]
 8001812:	607a      	str	r2, [r7, #4]
 8001814:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8001816:	4a12      	ldr	r2, [pc, #72]	@ (8001860 <PWMInit+0x58>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 800181c:	4a11      	ldr	r2, [pc, #68]	@ (8001864 <PWMInit+0x5c>)
 800181e:	68bb      	ldr	r3, [r7, #8]
 8001820:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 8001822:	4a11      	ldr	r2, [pc, #68]	@ (8001868 <PWMInit+0x60>)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8001828:	4a10      	ldr	r2, [pc, #64]	@ (800186c <PWMInit+0x64>)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 800182e:	4b0c      	ldr	r3, [pc, #48]	@ (8001860 <PWMInit+0x58>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4618      	mov	r0, r3
 8001834:	f003 fbe4 	bl	8005000 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8001838:	4b0a      	ldr	r3, [pc, #40]	@ (8001864 <PWMInit+0x5c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f003 fbdf 	bl	8005000 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 8001842:	4b09      	ldr	r3, [pc, #36]	@ (8001868 <PWMInit+0x60>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f003 fbda 	bl	8005000 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <PWMInit+0x64>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4618      	mov	r0, r3
 8001852:	f003 fbd5 	bl	8005000 <HAL_TIM_Base_Start>
}
 8001856:	bf00      	nop
 8001858:	3710      	adds	r7, #16
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200009b4 	.word	0x200009b4
 8001864:	200009b8 	.word	0x200009b8
 8001868:	200009bc 	.word	0x200009bc
 800186c:	200009c0 	.word	0x200009c0

08001870 <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 8001870:	b480      	push	{r7}
 8001872:	b085      	sub	sp, #20
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	6039      	str	r1, [r7, #0]
 800187a:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 800187c:	2300      	movs	r3, #0
 800187e:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b02      	cmp	r3, #2
 8001884:	d02c      	beq.n	80018e0 <calculateOutputPeriodToGetFrequency+0x70>
 8001886:	2b02      	cmp	r3, #2
 8001888:	dc3d      	bgt.n	8001906 <calculateOutputPeriodToGetFrequency+0x96>
 800188a:	2b00      	cmp	r3, #0
 800188c:	d002      	beq.n	8001894 <calculateOutputPeriodToGetFrequency+0x24>
 800188e:	2b01      	cmp	r3, #1
 8001890:	d013      	beq.n	80018ba <calculateOutputPeriodToGetFrequency+0x4a>
 8001892:	e038      	b.n	8001906 <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	ee07 3a90 	vmov	s15, r3
 800189a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800189e:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001914 <calculateOutputPeriodToGetFrequency+0xa4>
 80018a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b2:	ee17 3a90 	vmov	r3, s15
 80018b6:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80018b8:	e025      	b.n	8001906 <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018c4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001918 <calculateOutputPeriodToGetFrequency+0xa8>
 80018c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018cc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018d0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80018de:	e012      	b.n	8001906 <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018ea:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001918 <calculateOutputPeriodToGetFrequency+0xa8>
 80018ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80018f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80018f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018fe:	ee17 3a90 	vmov	r3, s15
 8001902:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8001904:	bf00      	nop
	}

	return finalVal;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	360637bd 	.word	0x360637bd
 8001918:	358637bd 	.word	0x358637bd

0800191c <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
 8001924:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001932:	edd7 7a00 	vldr	s15, [r7]
 8001936:	ee67 7a27 	vmul.f32	s15, s14, s15
 800193a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800193e:	ee17 3a90 	vmov	r3, s15
 8001942:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	68fa      	ldr	r2, [r7, #12]
 8001948:	429a      	cmp	r2, r3
 800194a:	d902      	bls.n	8001952 <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	e004      	b.n	800195c <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 8001958:	2301      	movs	r3, #1
 800195a:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 800195c:	68fb      	ldr	r3, [r7, #12]

}
 800195e:	4618      	mov	r0, r3
 8001960:	3714      	adds	r7, #20
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	ed87 0a00 	vstr	s0, [r7]
 8001978:	71fb      	strb	r3, [r7, #7]
 800197a:	460b      	mov	r3, r1
 800197c:	71bb      	strb	r3, [r7, #6]
 800197e:	4613      	mov	r3, r2
 8001980:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 8001982:	2300      	movs	r3, #0
 8001984:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 8001986:	79fb      	ldrb	r3, [r7, #7]
 8001988:	2b02      	cmp	r3, #2
 800198a:	d03c      	beq.n	8001a06 <calculateOutputPeriodValue+0x9a>
 800198c:	2b02      	cmp	r3, #2
 800198e:	dc51      	bgt.n	8001a34 <calculateOutputPeriodValue+0xc8>
 8001990:	2b00      	cmp	r3, #0
 8001992:	d002      	beq.n	800199a <calculateOutputPeriodValue+0x2e>
 8001994:	2b01      	cmp	r3, #1
 8001996:	d01b      	beq.n	80019d0 <calculateOutputPeriodValue+0x64>
 8001998:	e04c      	b.n	8001a34 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 800199a:	79bb      	ldrb	r3, [r7, #6]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d10a      	bne.n	80019b6 <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 80019a0:	edd7 7a00 	vldr	s15, [r7]
 80019a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019a8:	ee17 2a90 	vmov	r2, s15
 80019ac:	2302      	movs	r3, #2
 80019ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80019b2:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 80019b4:	e03e      	b.n	8001a34 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 80019b6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	4a20      	ldr	r2, [pc, #128]	@ (8001a40 <calculateOutputPeriodValue+0xd4>)
 80019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019c2:	ed97 0a00 	vldr	s0, [r7]
 80019c6:	4618      	mov	r0, r3
 80019c8:	f7ff ffa8 	bl	800191c <safeOutputPeriodValueCalculator>
 80019cc:	60f8      	str	r0, [r7, #12]
			break;
 80019ce:	e031      	b.n	8001a34 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 80019d0:	79bb      	ldrb	r3, [r7, #6]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10a      	bne.n	80019ec <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 80019d6:	edd7 7a00 	vldr	s15, [r7]
 80019da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019de:	ee17 2a90 	vmov	r2, s15
 80019e2:	2301      	movs	r3, #1
 80019e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e8:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 80019ea:	e023      	b.n	8001a34 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 80019ec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019f0:	3306      	adds	r3, #6
 80019f2:	4a13      	ldr	r2, [pc, #76]	@ (8001a40 <calculateOutputPeriodValue+0xd4>)
 80019f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019f8:	ed97 0a00 	vldr	s0, [r7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff8d 	bl	800191c <safeOutputPeriodValueCalculator>
 8001a02:	60f8      	str	r0, [r7, #12]
			break;
 8001a04:	e016      	b.n	8001a34 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 8001a06:	79bb      	ldrb	r3, [r7, #6]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d10a      	bne.n	8001a22 <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8001a0c:	edd7 7a00 	vldr	s15, [r7]
 8001a10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a14:	ee17 2a90 	vmov	r2, s15
 8001a18:	2301      	movs	r3, #1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8001a20:	e007      	b.n	8001a32 <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8001a22:	4b07      	ldr	r3, [pc, #28]	@ (8001a40 <calculateOutputPeriodValue+0xd4>)
 8001a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a26:	ed97 0a00 	vldr	s0, [r7]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff ff76 	bl	800191c <safeOutputPeriodValueCalculator>
 8001a30:	60f8      	str	r0, [r7, #12]
			break;
 8001a32:	bf00      	nop
		default:
	}
	return returnVal;
 8001a34:	68fb      	ldr	r3, [r7, #12]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3710      	adds	r7, #16
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200009fc 	.word	0x200009fc

08001a44 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	b084      	sub	sp, #16
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	ed87 0a00 	vstr	s0, [r7]
 8001a50:	71fb      	strb	r3, [r7, #7]
 8001a52:	460b      	mov	r3, r1
 8001a54:	71bb      	strb	r3, [r7, #6]
 8001a56:	4613      	mov	r3, r2
 8001a58:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 8001a5a:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8001a5e:	79b9      	ldrb	r1, [r7, #6]
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	ed97 0a00 	vldr	s0, [r7]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff80 	bl	800196c <calculateOutputPeriodValue>
 8001a6c:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d076      	beq.n	8001b62 <PWMInitialize+0x11e>
 8001a74:	2b02      	cmp	r3, #2
 8001a76:	dc7e      	bgt.n	8001b76 <PWMInitialize+0x132>
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d002      	beq.n	8001a82 <PWMInitialize+0x3e>
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	d04a      	beq.n	8001b16 <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 8001a80:	e079      	b.n	8001b76 <PWMInitialize+0x132>
		switch (position) {
 8001a82:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	2b06      	cmp	r3, #6
 8001a8a:	d83b      	bhi.n	8001b04 <PWMInitialize+0xc0>
 8001a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8001a94 <PWMInitialize+0x50>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001ab1 	.word	0x08001ab1
 8001a98:	08001abd 	.word	0x08001abd
 8001a9c:	08001ac9 	.word	0x08001ac9
 8001aa0:	08001ad5 	.word	0x08001ad5
 8001aa4:	08001ae1 	.word	0x08001ae1
 8001aa8:	08001aed 	.word	0x08001aed
 8001aac:	08001af9 	.word	0x08001af9
			(*tim1).Instance->CCR1=value;
 8001ab0:	4b33      	ldr	r3, [pc, #204]	@ (8001b80 <PWMInitialize+0x13c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	68fa      	ldr	r2, [r7, #12]
 8001ab8:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001aba:	e024      	b.n	8001b06 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 8001abc:	4b30      	ldr	r3, [pc, #192]	@ (8001b80 <PWMInitialize+0x13c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	68fa      	ldr	r2, [r7, #12]
 8001ac4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001ac6:	e01e      	b.n	8001b06 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <PWMInitialize+0x13c>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	68fa      	ldr	r2, [r7, #12]
 8001ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001ad2:	e018      	b.n	8001b06 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <PWMInitialize+0x13c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001ade:	e012      	b.n	8001b06 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8001ae0:	4b28      	ldr	r3, [pc, #160]	@ (8001b84 <PWMInitialize+0x140>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001aea:	e00c      	b.n	8001b06 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 8001aec:	4b25      	ldr	r3, [pc, #148]	@ (8001b84 <PWMInitialize+0x140>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	68fa      	ldr	r2, [r7, #12]
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001af6:	e006      	b.n	8001b06 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8001af8:	4b22      	ldr	r3, [pc, #136]	@ (8001b84 <PWMInitialize+0x140>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001b02:	e000      	b.n	8001b06 <PWMInitialize+0xc2>
			break;
 8001b04:	bf00      	nop
		subPeriod[position-1] = value;
 8001b06:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	491e      	ldr	r1, [pc, #120]	@ (8001b88 <PWMInitialize+0x144>)
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001b14:	e02e      	b.n	8001b74 <PWMInitialize+0x130>
		switch (position) {
 8001b16:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b1a:	2b03      	cmp	r3, #3
 8001b1c:	d012      	beq.n	8001b44 <PWMInitialize+0x100>
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	dc16      	bgt.n	8001b50 <PWMInitialize+0x10c>
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d002      	beq.n	8001b2c <PWMInitialize+0xe8>
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d006      	beq.n	8001b38 <PWMInitialize+0xf4>
			break;
 8001b2a:	e011      	b.n	8001b50 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8001b2c:	4b17      	ldr	r3, [pc, #92]	@ (8001b8c <PWMInitialize+0x148>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	68fa      	ldr	r2, [r7, #12]
 8001b34:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001b36:	e00c      	b.n	8001b52 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8001b38:	4b14      	ldr	r3, [pc, #80]	@ (8001b8c <PWMInitialize+0x148>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68fa      	ldr	r2, [r7, #12]
 8001b40:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001b42:	e006      	b.n	8001b52 <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8001b44:	4b11      	ldr	r3, [pc, #68]	@ (8001b8c <PWMInitialize+0x148>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	68fa      	ldr	r2, [r7, #12]
 8001b4c:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001b4e:	e000      	b.n	8001b52 <PWMInitialize+0x10e>
			break;
 8001b50:	bf00      	nop
		subPeriod[position+6] = value;
 8001b52:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b56:	3306      	adds	r3, #6
 8001b58:	490b      	ldr	r1, [pc, #44]	@ (8001b88 <PWMInitialize+0x144>)
 8001b5a:	68fa      	ldr	r2, [r7, #12]
 8001b5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001b60:	e008      	b.n	8001b74 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	@ (8001b90 <PWMInitialize+0x14c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	68fa      	ldr	r2, [r7, #12]
 8001b6a:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8001b6c:	4a06      	ldr	r2, [pc, #24]	@ (8001b88 <PWMInitialize+0x144>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8001b72:	bf00      	nop
	return;
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
}
 8001b78:	3710      	adds	r7, #16
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200009b4 	.word	0x200009b4
 8001b84:	200009c0 	.word	0x200009c0
 8001b88:	200009d0 	.word	0x200009d0
 8001b8c:	200009bc 	.word	0x200009bc
 8001b90:	200009b8 	.word	0x200009b8

08001b94 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	dc0c      	bgt.n	8001bc2 <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	@ (8001be8 <MotorPositionForInitializingPeriod+0x54>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	683a      	ldr	r2, [r7, #0]
 8001bb0:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	490c      	ldr	r1, [pc, #48]	@ (8001bec <MotorPositionForInitializingPeriod+0x58>)
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8001bc0:	e00b      	b.n	8001bda <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf0 <MotorPositionForInitializingPeriod+0x5c>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	683a      	ldr	r2, [r7, #0]
 8001bca:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	4906      	ldr	r1, [pc, #24]	@ (8001bec <MotorPositionForInitializingPeriod+0x58>)
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	200009b4 	.word	0x200009b4
 8001bec:	200009fc 	.word	0x200009fc
 8001bf0:	200009c0 	.word	0x200009c0

08001bf4 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b084      	sub	sp, #16
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	603a      	str	r2, [r7, #0]
 8001bfe:	71fb      	strb	r3, [r7, #7]
 8001c00:	460b      	mov	r3, r1
 8001c02:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8001c04:	79fb      	ldrb	r3, [r7, #7]
 8001c06:	6839      	ldr	r1, [r7, #0]
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f7ff fe31 	bl	8001870 <calculateOutputPeriodToGetFrequency>
 8001c0e:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d01a      	beq.n	8001c4c <initializePeriod+0x58>
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	dc22      	bgt.n	8001c60 <initializePeriod+0x6c>
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d002      	beq.n	8001c24 <initializePeriod+0x30>
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d007      	beq.n	8001c32 <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 8001c22:	e01d      	b.n	8001c60 <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8001c24:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c28:	68f9      	ldr	r1, [r7, #12]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f7ff ffb2 	bl	8001b94 <MotorPositionForInitializingPeriod>
		break;
 8001c30:	e015      	b.n	8001c5e <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 8001c32:	4b0d      	ldr	r3, [pc, #52]	@ (8001c68 <initializePeriod+0x74>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 8001c3c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c40:	3306      	adds	r3, #6
 8001c42:	490a      	ldr	r1, [pc, #40]	@ (8001c6c <initializePeriod+0x78>)
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001c4a:	e008      	b.n	8001c5e <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 8001c4c:	4b08      	ldr	r3, [pc, #32]	@ (8001c70 <initializePeriod+0x7c>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 8001c56:	4a05      	ldr	r2, [pc, #20]	@ (8001c6c <initializePeriod+0x78>)
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8001c5c:	bf00      	nop
	return;
 8001c5e:	bf00      	nop
 8001c60:	bf00      	nop
}
 8001c62:	3710      	adds	r7, #16
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	200009bc 	.word	0x200009bc
 8001c6c:	200009fc 	.word	0x200009fc
 8001c70:	200009b8 	.word	0x200009b8

08001c74 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	603a      	str	r2, [r7, #0]
 8001c7e:	71fb      	strb	r3, [r7, #7]
 8001c80:	460b      	mov	r3, r1
 8001c82:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8001c84:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8001c88:	79fb      	ldrb	r3, [r7, #7]
 8001c8a:	683a      	ldr	r2, [r7, #0]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ffb1 	bl	8001bf4 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d014      	beq.n	8001cc2 <PWMOutput+0x4e>
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	dc16      	bgt.n	8001cca <PWMOutput+0x56>
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d002      	beq.n	8001ca6 <PWMOutput+0x32>
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d007      	beq.n	8001cb4 <PWMOutput+0x40>
 8001ca4:	e011      	b.n	8001cca <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8001ca6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001caa:	3b01      	subs	r3, #1
 8001cac:	4a08      	ldr	r2, [pc, #32]	@ (8001cd0 <PWMOutput+0x5c>)
 8001cae:	2101      	movs	r1, #1
 8001cb0:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8001cb2:	e00a      	b.n	8001cca <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8001cb4:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cb8:	3306      	adds	r3, #6
 8001cba:	4a05      	ldr	r2, [pc, #20]	@ (8001cd0 <PWMOutput+0x5c>)
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8001cc0:	e003      	b.n	8001cca <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8001cc2:	4b03      	ldr	r3, [pc, #12]	@ (8001cd0 <PWMOutput+0x5c>)
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8001cc8:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 8001cca:	3708      	adds	r7, #8
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	200009c4 	.word	0x200009c4

08001cd4 <mainPrint>:
int32_t frequency[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int32_t subPeriod[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
*/

void mainPrint() {
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
	usart_printf("          |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  1  |  2  |  3  |   1    |\r\n");
	*/
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <PWMTimerStarter>:

void PWMTimerStarter() {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	e0f1      	b.n	8001ed4 <PWMTimerStarter+0x1f0>
		switch (i) {
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	2b0a      	cmp	r3, #10
 8001cf4:	f200 80eb 	bhi.w	8001ece <PWMTimerStarter+0x1ea>
 8001cf8:	a201      	add	r2, pc, #4	@ (adr r2, 8001d00 <PWMTimerStarter+0x1c>)
 8001cfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfe:	bf00      	nop
 8001d00:	08001d2d 	.word	0x08001d2d
 8001d04:	08001d53 	.word	0x08001d53
 8001d08:	08001d79 	.word	0x08001d79
 8001d0c:	08001d9f 	.word	0x08001d9f
 8001d10:	08001dc5 	.word	0x08001dc5
 8001d14:	08001deb 	.word	0x08001deb
 8001d18:	08001e11 	.word	0x08001e11
 8001d1c:	08001e37 	.word	0x08001e37
 8001d20:	08001e5d 	.word	0x08001e5d
 8001d24:	08001e83 	.word	0x08001e83
 8001d28:	08001ea9 	.word	0x08001ea9
		case 0:
			if (whichPWMisOn[0] == 1) {
 8001d2c:	4b6e      	ldr	r3, [pc, #440]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001d2e:	f993 3000 	ldrsb.w	r3, [r3]
 8001d32:	2b01      	cmp	r3, #1
 8001d34:	d106      	bne.n	8001d44 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8001d36:	4b6d      	ldr	r3, [pc, #436]	@ (8001eec <PWMTimerStarter+0x208>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f003 fa17 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8001d42:	e0c4      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8001d44:	4b69      	ldr	r3, [pc, #420]	@ (8001eec <PWMTimerStarter+0x208>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f003 fad8 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001d50:	e0bd      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8001d52:	4b65      	ldr	r3, [pc, #404]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001d54:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d106      	bne.n	8001d6a <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8001d5c:	4b63      	ldr	r3, [pc, #396]	@ (8001eec <PWMTimerStarter+0x208>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2104      	movs	r1, #4
 8001d62:	4618      	mov	r0, r3
 8001d64:	f003 fa04 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8001d68:	e0b1      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8001d6a:	4b60      	ldr	r3, [pc, #384]	@ (8001eec <PWMTimerStarter+0x208>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2104      	movs	r1, #4
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 fac5 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001d76:	e0aa      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8001d78:	4b5b      	ldr	r3, [pc, #364]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001d7a:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d106      	bne.n	8001d90 <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8001d82:	4b5a      	ldr	r3, [pc, #360]	@ (8001eec <PWMTimerStarter+0x208>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	2108      	movs	r1, #8
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 f9f1 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8001d8e:	e09e      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8001d90:	4b56      	ldr	r3, [pc, #344]	@ (8001eec <PWMTimerStarter+0x208>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2108      	movs	r1, #8
 8001d96:	4618      	mov	r0, r3
 8001d98:	f003 fab2 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001d9c:	e097      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8001d9e:	4b52      	ldr	r3, [pc, #328]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001da0:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d106      	bne.n	8001db6 <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8001da8:	4b50      	ldr	r3, [pc, #320]	@ (8001eec <PWMTimerStarter+0x208>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	210c      	movs	r1, #12
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 f9de 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8001db4:	e08b      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8001db6:	4b4d      	ldr	r3, [pc, #308]	@ (8001eec <PWMTimerStarter+0x208>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	210c      	movs	r1, #12
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fa9f 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001dc2:	e084      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8001dc4:	4b48      	ldr	r3, [pc, #288]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001dc6:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d106      	bne.n	8001ddc <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8001dce:	4b48      	ldr	r3, [pc, #288]	@ (8001ef0 <PWMTimerStarter+0x20c>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f003 f9cb 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8001dda:	e078      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8001ddc:	4b44      	ldr	r3, [pc, #272]	@ (8001ef0 <PWMTimerStarter+0x20c>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2100      	movs	r1, #0
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fa8c 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001de8:	e071      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8001dea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001dec:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001df0:	2b01      	cmp	r3, #1
 8001df2:	d106      	bne.n	8001e02 <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8001df4:	4b3e      	ldr	r3, [pc, #248]	@ (8001ef0 <PWMTimerStarter+0x20c>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2104      	movs	r1, #4
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f003 f9b8 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8001e00:	e065      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8001e02:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef0 <PWMTimerStarter+0x20c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	2104      	movs	r1, #4
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f003 fa79 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001e0e:	e05e      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8001e10:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001e12:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001e16:	2b01      	cmp	r3, #1
 8001e18:	d106      	bne.n	8001e28 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8001e1a:	4b35      	ldr	r3, [pc, #212]	@ (8001ef0 <PWMTimerStarter+0x20c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2108      	movs	r1, #8
 8001e20:	4618      	mov	r0, r3
 8001e22:	f003 f9a5 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8001e26:	e052      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8001e28:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <PWMTimerStarter+0x20c>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	2108      	movs	r1, #8
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f003 fa66 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001e34:	e04b      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8001e36:	4b2c      	ldr	r3, [pc, #176]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001e38:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001e3c:	2b01      	cmp	r3, #1
 8001e3e:	d106      	bne.n	8001e4e <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8001e40:	4b2c      	ldr	r3, [pc, #176]	@ (8001ef4 <PWMTimerStarter+0x210>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2100      	movs	r1, #0
 8001e46:	4618      	mov	r0, r3
 8001e48:	f003 f992 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8001e4c:	e03f      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8001e4e:	4b29      	ldr	r3, [pc, #164]	@ (8001ef4 <PWMTimerStarter+0x210>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f003 fa53 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001e5a:	e038      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001e5e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d106      	bne.n	8001e74 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8001e66:	4b23      	ldr	r3, [pc, #140]	@ (8001ef4 <PWMTimerStarter+0x210>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 f97f 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
			}
			break;
 8001e72:	e02c      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8001e74:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef4 <PWMTimerStarter+0x210>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2104      	movs	r1, #4
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f003 fa40 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001e80:	e025      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001e84:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d106      	bne.n	8001e9a <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8001e8c:	4b19      	ldr	r3, [pc, #100]	@ (8001ef4 <PWMTimerStarter+0x210>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2108      	movs	r1, #8
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f96c 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8001e98:	e019      	b.n	8001ece <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8001e9a:	4b16      	ldr	r3, [pc, #88]	@ (8001ef4 <PWMTimerStarter+0x210>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f003 fa2d 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001ea6:	e012      	b.n	8001ece <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8001ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee8 <PWMTimerStarter+0x204>)
 8001eaa:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d106      	bne.n	8001ec0 <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8001eb2:	4b11      	ldr	r3, [pc, #68]	@ (8001ef8 <PWMTimerStarter+0x214>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2108      	movs	r1, #8
 8001eb8:	4618      	mov	r0, r3
 8001eba:	f003 f959 	bl	8005170 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8001ebe:	e005      	b.n	8001ecc <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <PWMTimerStarter+0x214>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	2108      	movs	r1, #8
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f003 fa1a 	bl	8005300 <HAL_TIM_PWM_Stop>
			break;
 8001ecc:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	607b      	str	r3, [r7, #4]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b0a      	cmp	r3, #10
 8001ed8:	f77f af0a 	ble.w	8001cf0 <PWMTimerStarter+0xc>
		}
	}
}
 8001edc:	bf00      	nop
 8001ede:	bf00      	nop
 8001ee0:	3708      	adds	r7, #8
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	200009c4 	.word	0x200009c4
 8001eec:	200009b4 	.word	0x200009b4
 8001ef0:	200009c0 	.word	0x200009c0
 8001ef4:	200009bc 	.word	0x200009bc
 8001ef8:	200009b8 	.word	0x200009b8

08001efc <initializeCaliforniaGirls>:
uint8_t CG1Notes [8] = {5, 11, 5, 10, 11, 10, 9, 7};
uint8_t CG2Notes [58] = {7, 9, 7, 9, 7, 9, 7, 5, 11, 5, 11, 5, 11, 5, 11, 5, 3, 5, 6, 7, 11, 7, 5, 11, 5, 11, 5, 11, 5, 11, 5, 2, 11, 2, 6, 5, 11, 5, 11, 5, 11, 5, 11, 5, 11, 5, 3, 5, 6, 7, 11, 7, 5, 9, 7, 9, 7, 9} ;
uint8_t CG1Rests [8] = {19, 1, 20, 19,  1,  20, 40, 60} ;
uint8_t CG2Rests [58] = {40, 20, 20, 20, 20, 20, 40, 39, 1 , 39, 1 ,39, 1 , 19, 1 , 40, 20, 20, 20, 19, 1, 20, 39, 1 , 39, 1 ,39, 1 , 39, 1 , 20 , 39, 1, 20 , 40, 79, 1 , 39, 1 , 39, 1 , 39, 1 , 19, 1 , 40, 20, 20, 20, 19, 1 , 20 , 60, 20, 20, 20, 20, 40};

void initializeCaliforniaGirls() {
 8001efc:	b480      	push	{r7}
 8001efe:	af00      	add	r7, sp, #0
	songProgress = 0;
 8001f00:	4b06      	ldr	r3, [pc, #24]	@ (8001f1c <initializeCaliforniaGirls+0x20>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	701a      	strb	r2, [r3, #0]
	timeTracker = 0;
 8001f06:	4b06      	ldr	r3, [pc, #24]	@ (8001f20 <initializeCaliforniaGirls+0x24>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	801a      	strh	r2, [r3, #0]
	noteTracker = 0;
 8001f0c:	4b05      	ldr	r3, [pc, #20]	@ (8001f24 <initializeCaliforniaGirls+0x28>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	801a      	strh	r2, [r3, #0]
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000a28 	.word	0x20000a28
 8001f20:	20000a2a 	.word	0x20000a2a
 8001f24:	20000a2c 	.word	0x20000a2c

08001f28 <CaliforniaGirlsNotes>:

uint32_t CaliforniaGirlsNotes() {
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
	uint32_t actualFrequency = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	607b      	str	r3, [r7, #4]
	if (songProgress == 0) {
 8001f32:	4b2e      	ldr	r3, [pc, #184]	@ (8001fec <CaliforniaGirlsNotes+0xc4>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d127      	bne.n	8001f8a <CaliforniaGirlsNotes+0x62>
		if (timeTracker > CG1Rests[noteTracker]) {
 8001f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff4 <CaliforniaGirlsNotes+0xcc>)
 8001f42:	5c9b      	ldrb	r3, [r3, r2]
 8001f44:	461a      	mov	r2, r3
 8001f46:	4b2c      	ldr	r3, [pc, #176]	@ (8001ff8 <CaliforniaGirlsNotes+0xd0>)
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d208      	bcs.n	8001f60 <CaliforniaGirlsNotes+0x38>
			noteTracker++;
 8001f4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001f50:	881b      	ldrh	r3, [r3, #0]
 8001f52:	3301      	adds	r3, #1
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	4b26      	ldr	r3, [pc, #152]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001f58:	801a      	strh	r2, [r3, #0]
			timeTracker = 0;
 8001f5a:	4b27      	ldr	r3, [pc, #156]	@ (8001ff8 <CaliforniaGirlsNotes+0xd0>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	801a      	strh	r2, [r3, #0]
		}

		if (noteTracker > 7) {
 8001f60:	4b23      	ldr	r3, [pc, #140]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001f62:	881b      	ldrh	r3, [r3, #0]
 8001f64:	2b07      	cmp	r3, #7
 8001f66:	d905      	bls.n	8001f74 <CaliforniaGirlsNotes+0x4c>
			songProgress = 1;
 8001f68:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <CaliforniaGirlsNotes+0xc4>)
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	701a      	strb	r2, [r3, #0]
			noteTracker = 0;;
 8001f6e:	4b20      	ldr	r3, [pc, #128]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	801a      	strh	r2, [r3, #0]
		}
		actualFrequency =  frequenciesAtA4[CG1Notes[noteTracker]];
 8001f74:	4b1e      	ldr	r3, [pc, #120]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001f76:	881b      	ldrh	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b20      	ldr	r3, [pc, #128]	@ (8001ffc <CaliforniaGirlsNotes+0xd4>)
 8001f7c:	5c9b      	ldrb	r3, [r3, r2]
 8001f7e:	461a      	mov	r2, r3
 8001f80:	4b1f      	ldr	r3, [pc, #124]	@ (8002000 <CaliforniaGirlsNotes+0xd8>)
 8001f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f86:	607b      	str	r3, [r7, #4]
 8001f88:	e023      	b.n	8001fd2 <CaliforniaGirlsNotes+0xaa>
	} else {

		if (timeTracker > CG2Rests[noteTracker]) {
 8001f8a:	4b19      	ldr	r3, [pc, #100]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4b1c      	ldr	r3, [pc, #112]	@ (8002004 <CaliforniaGirlsNotes+0xdc>)
 8001f92:	5c9b      	ldrb	r3, [r3, r2]
 8001f94:	461a      	mov	r2, r3
 8001f96:	4b18      	ldr	r3, [pc, #96]	@ (8001ff8 <CaliforniaGirlsNotes+0xd0>)
 8001f98:	881b      	ldrh	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d208      	bcs.n	8001fb0 <CaliforniaGirlsNotes+0x88>
			noteTracker++;
 8001f9e:	4b14      	ldr	r3, [pc, #80]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	b29a      	uxth	r2, r3
 8001fa6:	4b12      	ldr	r3, [pc, #72]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001fa8:	801a      	strh	r2, [r3, #0]
			timeTracker = 0;
 8001faa:	4b13      	ldr	r3, [pc, #76]	@ (8001ff8 <CaliforniaGirlsNotes+0xd0>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	801a      	strh	r2, [r3, #0]
		}

		if (noteTracker > 57) {
 8001fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001fb2:	881b      	ldrh	r3, [r3, #0]
 8001fb4:	2b39      	cmp	r3, #57	@ 0x39
 8001fb6:	d902      	bls.n	8001fbe <CaliforniaGirlsNotes+0x96>
			noteTracker = 0;
 8001fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	801a      	strh	r2, [r3, #0]
		}
		actualFrequency = frequenciesAtA4[CG2Notes[noteTracker]];
 8001fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff0 <CaliforniaGirlsNotes+0xc8>)
 8001fc0:	881b      	ldrh	r3, [r3, #0]
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b10      	ldr	r3, [pc, #64]	@ (8002008 <CaliforniaGirlsNotes+0xe0>)
 8001fc6:	5c9b      	ldrb	r3, [r3, r2]
 8001fc8:	461a      	mov	r2, r3
 8001fca:	4b0d      	ldr	r3, [pc, #52]	@ (8002000 <CaliforniaGirlsNotes+0xd8>)
 8001fcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd0:	607b      	str	r3, [r7, #4]
	}
	// usart_printf();
	// PWMOutput(Buzzer, 1, frequenciesAtA4[NeverGoingToGiveYouUpNotes[noteTracker]]);

	timeTracker++;
 8001fd2:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <CaliforniaGirlsNotes+0xd0>)
 8001fd4:	881b      	ldrh	r3, [r3, #0]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	b29a      	uxth	r2, r3
 8001fda:	4b07      	ldr	r3, [pc, #28]	@ (8001ff8 <CaliforniaGirlsNotes+0xd0>)
 8001fdc:	801a      	strh	r2, [r3, #0]

	return  actualFrequency;
 8001fde:	687b      	ldr	r3, [r7, #4]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	20000a28 	.word	0x20000a28
 8001ff0:	20000a2c 	.word	0x20000a2c
 8001ff4:	20000074 	.word	0x20000074
 8001ff8:	20000a2a 	.word	0x20000a2a
 8001ffc:	20000030 	.word	0x20000030
 8002000:	20000000 	.word	0x20000000
 8002004:	2000007c 	.word	0x2000007c
 8002008:	20000038 	.word	0x20000038

0800200c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	607b      	str	r3, [r7, #4]
 8002016:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_MspInit+0x54>)
 8002018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800201a:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_MspInit+0x54>)
 800201c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002020:	6453      	str	r3, [r2, #68]	@ 0x44
 8002022:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_MspInit+0x54>)
 8002024:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002026:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800202a:	607b      	str	r3, [r7, #4]
 800202c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	603b      	str	r3, [r7, #0]
 8002032:	4b0b      	ldr	r3, [pc, #44]	@ (8002060 <HAL_MspInit+0x54>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	4a0a      	ldr	r2, [pc, #40]	@ (8002060 <HAL_MspInit+0x54>)
 8002038:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6413      	str	r3, [r2, #64]	@ 0x40
 800203e:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <HAL_MspInit+0x54>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002042:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002046:	603b      	str	r3, [r7, #0]
 8002048:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	210f      	movs	r1, #15
 800204e:	f06f 0001 	mvn.w	r0, #1
 8002052:	f001 fb0e 	bl	8003672 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002056:	bf00      	nop
 8002058:	3708      	adds	r7, #8
 800205a:	46bd      	mov	sp, r7
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	40023800 	.word	0x40023800

08002064 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b08c      	sub	sp, #48	@ 0x30
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800206c:	f107 031c 	add.w	r3, r7, #28
 8002070:	2200      	movs	r2, #0
 8002072:	601a      	str	r2, [r3, #0]
 8002074:	605a      	str	r2, [r3, #4]
 8002076:	609a      	str	r2, [r3, #8]
 8002078:	60da      	str	r2, [r3, #12]
 800207a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a4a      	ldr	r2, [pc, #296]	@ (80021ac <HAL_CAN_MspInit+0x148>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d13d      	bne.n	8002102 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002086:	4b4a      	ldr	r3, [pc, #296]	@ (80021b0 <HAL_CAN_MspInit+0x14c>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	3301      	adds	r3, #1
 800208c:	4a48      	ldr	r2, [pc, #288]	@ (80021b0 <HAL_CAN_MspInit+0x14c>)
 800208e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002090:	4b47      	ldr	r3, [pc, #284]	@ (80021b0 <HAL_CAN_MspInit+0x14c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d10d      	bne.n	80020b4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002098:	2300      	movs	r3, #0
 800209a:	61bb      	str	r3, [r7, #24]
 800209c:	4b45      	ldr	r3, [pc, #276]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020a0:	4a44      	ldr	r2, [pc, #272]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 80020a2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020a6:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a8:	4b42      	ldr	r3, [pc, #264]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b0:	61bb      	str	r3, [r7, #24]
 80020b2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]
 80020b8:	4b3e      	ldr	r3, [pc, #248]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 80020ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020bc:	4a3d      	ldr	r2, [pc, #244]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 80020be:	f043 0308 	orr.w	r3, r3, #8
 80020c2:	6313      	str	r3, [r2, #48]	@ 0x30
 80020c4:	4b3b      	ldr	r3, [pc, #236]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 80020c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c8:	f003 0308 	and.w	r3, r3, #8
 80020cc:	617b      	str	r3, [r7, #20]
 80020ce:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020d0:	2303      	movs	r3, #3
 80020d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d4:	2302      	movs	r3, #2
 80020d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d8:	2300      	movs	r3, #0
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020dc:	2303      	movs	r3, #3
 80020de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020e0:	2309      	movs	r3, #9
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020e4:	f107 031c 	add.w	r3, r7, #28
 80020e8:	4619      	mov	r1, r3
 80020ea:	4833      	ldr	r0, [pc, #204]	@ (80021b8 <HAL_CAN_MspInit+0x154>)
 80020ec:	f001 fefa 	bl	8003ee4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80020f0:	2200      	movs	r2, #0
 80020f2:	2105      	movs	r1, #5
 80020f4:	2014      	movs	r0, #20
 80020f6:	f001 fabc 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80020fa:	2014      	movs	r0, #20
 80020fc:	f001 fad5 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8002100:	e04f      	b.n	80021a2 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a2d      	ldr	r2, [pc, #180]	@ (80021bc <HAL_CAN_MspInit+0x158>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d14a      	bne.n	80021a2 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 800210c:	2300      	movs	r3, #0
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	4a27      	ldr	r2, [pc, #156]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 8002116:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800211a:	6413      	str	r3, [r2, #64]	@ 0x40
 800211c:	4b25      	ldr	r3, [pc, #148]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 800211e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002120:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002124:	613b      	str	r3, [r7, #16]
 8002126:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002128:	4b21      	ldr	r3, [pc, #132]	@ (80021b0 <HAL_CAN_MspInit+0x14c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	3301      	adds	r3, #1
 800212e:	4a20      	ldr	r2, [pc, #128]	@ (80021b0 <HAL_CAN_MspInit+0x14c>)
 8002130:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8002132:	4b1f      	ldr	r3, [pc, #124]	@ (80021b0 <HAL_CAN_MspInit+0x14c>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	2b01      	cmp	r3, #1
 8002138:	d10d      	bne.n	8002156 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 8002140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002142:	4a1c      	ldr	r2, [pc, #112]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 8002144:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002148:	6413      	str	r3, [r2, #64]	@ 0x40
 800214a:	4b1a      	ldr	r3, [pc, #104]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800214e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b16      	ldr	r3, [pc, #88]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a15      	ldr	r2, [pc, #84]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 8002160:	f043 0302 	orr.w	r3, r3, #2
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b13      	ldr	r3, [pc, #76]	@ (80021b4 <HAL_CAN_MspInit+0x150>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002172:	2360      	movs	r3, #96	@ 0x60
 8002174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002176:	2302      	movs	r3, #2
 8002178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800217e:	2303      	movs	r3, #3
 8002180:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8002182:	2309      	movs	r3, #9
 8002184:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002186:	f107 031c 	add.w	r3, r7, #28
 800218a:	4619      	mov	r1, r3
 800218c:	480c      	ldr	r0, [pc, #48]	@ (80021c0 <HAL_CAN_MspInit+0x15c>)
 800218e:	f001 fea9 	bl	8003ee4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8002192:	2200      	movs	r2, #0
 8002194:	2105      	movs	r1, #5
 8002196:	2040      	movs	r0, #64	@ 0x40
 8002198:	f001 fa6b 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800219c:	2040      	movs	r0, #64	@ 0x40
 800219e:	f001 fa84 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 80021a2:	bf00      	nop
 80021a4:	3730      	adds	r7, #48	@ 0x30
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	40006400 	.word	0x40006400
 80021b0:	20000a30 	.word	0x20000a30
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020c00 	.word	0x40020c00
 80021bc:	40006800 	.word	0x40006800
 80021c0:	40020400 	.word	0x40020400

080021c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	b08a      	sub	sp, #40	@ 0x28
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a29      	ldr	r2, [pc, #164]	@ (8002288 <HAL_I2C_MspInit+0xc4>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d14b      	bne.n	800227e <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	4b28      	ldr	r3, [pc, #160]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ee:	4a27      	ldr	r2, [pc, #156]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 80021f0:	f043 0304 	orr.w	r3, r3, #4
 80021f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f6:	4b25      	ldr	r3, [pc, #148]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021fa:	f003 0304 	and.w	r3, r3, #4
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	60fb      	str	r3, [r7, #12]
 8002206:	4b21      	ldr	r3, [pc, #132]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a20      	ldr	r2, [pc, #128]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 800220c:	f043 0301 	orr.w	r3, r3, #1
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b1e      	ldr	r3, [pc, #120]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	60fb      	str	r3, [r7, #12]
 800221c:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800221e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002222:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002224:	2312      	movs	r3, #18
 8002226:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002228:	2300      	movs	r3, #0
 800222a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222c:	2303      	movs	r3, #3
 800222e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002230:	2304      	movs	r3, #4
 8002232:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	4619      	mov	r1, r3
 800223a:	4815      	ldr	r0, [pc, #84]	@ (8002290 <HAL_I2C_MspInit+0xcc>)
 800223c:	f001 fe52 	bl	8003ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002240:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002244:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002252:	2304      	movs	r3, #4
 8002254:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002256:	f107 0314 	add.w	r3, r7, #20
 800225a:	4619      	mov	r1, r3
 800225c:	480d      	ldr	r0, [pc, #52]	@ (8002294 <HAL_I2C_MspInit+0xd0>)
 800225e:	f001 fe41 	bl	8003ee4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60bb      	str	r3, [r7, #8]
 8002266:	4b09      	ldr	r3, [pc, #36]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a08      	ldr	r2, [pc, #32]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 800226c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b06      	ldr	r3, [pc, #24]	@ (800228c <HAL_I2C_MspInit+0xc8>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800227a:	60bb      	str	r3, [r7, #8]
 800227c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	@ 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40005c00 	.word	0x40005c00
 800228c:	40023800 	.word	0x40023800
 8002290:	40020800 	.word	0x40020800
 8002294:	40020000 	.word	0x40020000

08002298 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	2200      	movs	r2, #0
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	605a      	str	r2, [r3, #4]
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	60da      	str	r2, [r3, #12]
 80022ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a28      	ldr	r2, [pc, #160]	@ (8002358 <HAL_SPI_MspInit+0xc0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d149      	bne.n	800234e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	613b      	str	r3, [r7, #16]
 80022be:	4b27      	ldr	r3, [pc, #156]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022c2:	4a26      	ldr	r2, [pc, #152]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ca:	4b24      	ldr	r3, [pc, #144]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022d2:	613b      	str	r3, [r7, #16]
 80022d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60fb      	str	r3, [r7, #12]
 80022da:	4b20      	ldr	r3, [pc, #128]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022de:	4a1f      	ldr	r2, [pc, #124]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022e6:	4b1d      	ldr	r3, [pc, #116]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60bb      	str	r3, [r7, #8]
 80022f6:	4b19      	ldr	r3, [pc, #100]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a18      	ldr	r2, [pc, #96]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 80022fc:	f043 0301 	orr.w	r3, r3, #1
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b16      	ldr	r3, [pc, #88]	@ (800235c <HAL_SPI_MspInit+0xc4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	60bb      	str	r3, [r7, #8]
 800230c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800230e:	2318      	movs	r3, #24
 8002310:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002312:	2302      	movs	r3, #2
 8002314:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002316:	2300      	movs	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231a:	2303      	movs	r3, #3
 800231c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800231e:	2305      	movs	r3, #5
 8002320:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	480d      	ldr	r0, [pc, #52]	@ (8002360 <HAL_SPI_MspInit+0xc8>)
 800232a:	f001 fddb 	bl	8003ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800232e:	2380      	movs	r3, #128	@ 0x80
 8002330:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	2302      	movs	r3, #2
 8002334:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002336:	2300      	movs	r3, #0
 8002338:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800233a:	2303      	movs	r3, #3
 800233c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800233e:	2305      	movs	r3, #5
 8002340:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	4619      	mov	r1, r3
 8002348:	4806      	ldr	r0, [pc, #24]	@ (8002364 <HAL_SPI_MspInit+0xcc>)
 800234a:	f001 fdcb 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800234e:	bf00      	nop
 8002350:	3728      	adds	r7, #40	@ 0x28
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40013000 	.word	0x40013000
 800235c:	40023800 	.word	0x40023800
 8002360:	40020400 	.word	0x40020400
 8002364:	40020000 	.word	0x40020000

08002368 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a53      	ldr	r2, [pc, #332]	@ (80024c4 <HAL_TIM_PWM_MspInit+0x15c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d13e      	bne.n	80023f8 <HAL_TIM_PWM_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237a:	2300      	movs	r3, #0
 800237c:	617b      	str	r3, [r7, #20]
 800237e:	4b52      	ldr	r3, [pc, #328]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 8002380:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002382:	4a51      	ldr	r2, [pc, #324]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 8002384:	f043 0301 	orr.w	r3, r3, #1
 8002388:	6453      	str	r3, [r2, #68]	@ 0x44
 800238a:	4b4f      	ldr	r3, [pc, #316]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 800238c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream3;
 8002396:	4b4d      	ldr	r3, [pc, #308]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 8002398:	4a4d      	ldr	r2, [pc, #308]	@ (80024d0 <HAL_TIM_PWM_MspInit+0x168>)
 800239a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 800239c:	4b4b      	ldr	r3, [pc, #300]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 800239e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 80023a2:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80023a4:	4b49      	ldr	r3, [pc, #292]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023a6:	2200      	movs	r2, #0
 80023a8:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80023aa:	4b48      	ldr	r3, [pc, #288]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80023b0:	4b46      	ldr	r3, [pc, #280]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80023b6:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80023b8:	4b44      	ldr	r3, [pc, #272]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80023be:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80023c0:	4b42      	ldr	r3, [pc, #264]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80023c6:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 80023c8:	4b40      	ldr	r3, [pc, #256]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80023ce:	4b3f      	ldr	r3, [pc, #252]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80023d4:	4b3d      	ldr	r3, [pc, #244]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 80023da:	483c      	ldr	r0, [pc, #240]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023dc:	f001 f980 	bl	80036e0 <HAL_DMA_Init>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d001      	beq.n	80023ea <HAL_TIM_PWM_MspInit+0x82>
    {
      Error_Handler();
 80023e6:	f7ff fa09 	bl	80017fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	4a37      	ldr	r2, [pc, #220]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80023f0:	4a36      	ldr	r2, [pc, #216]	@ (80024cc <HAL_TIM_PWM_MspInit+0x164>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023f6:	e061      	b.n	80024bc <HAL_TIM_PWM_MspInit+0x154>
  else if(htim_pwm->Instance==TIM5)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a35      	ldr	r2, [pc, #212]	@ (80024d4 <HAL_TIM_PWM_MspInit+0x16c>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d10e      	bne.n	8002420 <HAL_TIM_PWM_MspInit+0xb8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	613b      	str	r3, [r7, #16]
 8002406:	4b30      	ldr	r3, [pc, #192]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	4a2f      	ldr	r2, [pc, #188]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 800240c:	f043 0308 	orr.w	r3, r3, #8
 8002410:	6413      	str	r3, [r2, #64]	@ 0x40
 8002412:	4b2d      	ldr	r3, [pc, #180]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	613b      	str	r3, [r7, #16]
 800241c:	693b      	ldr	r3, [r7, #16]
}
 800241e:	e04d      	b.n	80024bc <HAL_TIM_PWM_MspInit+0x154>
  else if(htim_pwm->Instance==TIM8)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2c      	ldr	r2, [pc, #176]	@ (80024d8 <HAL_TIM_PWM_MspInit+0x170>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d148      	bne.n	80024bc <HAL_TIM_PWM_MspInit+0x154>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b26      	ldr	r3, [pc, #152]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 8002430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002432:	4a25      	ldr	r2, [pc, #148]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6453      	str	r3, [r2, #68]	@ 0x44
 800243a:	4b23      	ldr	r3, [pc, #140]	@ (80024c8 <HAL_TIM_PWM_MspInit+0x160>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1_ch2_ch3.Instance = DMA2_Stream2;
 8002446:	4b25      	ldr	r3, [pc, #148]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 8002448:	4a25      	ldr	r2, [pc, #148]	@ (80024e0 <HAL_TIM_PWM_MspInit+0x178>)
 800244a:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 800244c:	4b23      	ldr	r3, [pc, #140]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 800244e:	2200      	movs	r2, #0
 8002450:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002452:	4b22      	ldr	r3, [pc, #136]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 8002454:	2200      	movs	r2, #0
 8002456:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002458:	4b20      	ldr	r3, [pc, #128]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 800245a:	2200      	movs	r2, #0
 800245c:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800245e:	4b1f      	ldr	r3, [pc, #124]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 8002460:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002464:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002466:	4b1d      	ldr	r3, [pc, #116]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 8002468:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800246c:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800246e:	4b1b      	ldr	r3, [pc, #108]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 8002470:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002474:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8002476:	4b19      	ldr	r3, [pc, #100]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 8002478:	2200      	movs	r2, #0
 800247a:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800247c:	4b17      	ldr	r3, [pc, #92]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 800247e:	2200      	movs	r2, #0
 8002480:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002482:	4b16      	ldr	r3, [pc, #88]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 8002484:	2200      	movs	r2, #0
 8002486:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1_ch2_ch3) != HAL_OK)
 8002488:	4814      	ldr	r0, [pc, #80]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 800248a:	f001 f929 	bl	80036e0 <HAL_DMA_Init>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d001      	beq.n	8002498 <HAL_TIM_PWM_MspInit+0x130>
      Error_Handler();
 8002494:	f7ff f9b2 	bl	80017fc <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1_ch2_ch3);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	4a10      	ldr	r2, [pc, #64]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 800249c:	625a      	str	r2, [r3, #36]	@ 0x24
 800249e:	4a0f      	ldr	r2, [pc, #60]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch1_ch2_ch3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	4a0d      	ldr	r2, [pc, #52]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 80024a8:	629a      	str	r2, [r3, #40]	@ 0x28
 80024aa:	4a0c      	ldr	r2, [pc, #48]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch1_ch2_ch3);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	4a0a      	ldr	r2, [pc, #40]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 80024b4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80024b6:	4a09      	ldr	r2, [pc, #36]	@ (80024dc <HAL_TIM_PWM_MspInit+0x174>)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80024bc:	bf00      	nop
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	40010000 	.word	0x40010000
 80024c8:	40023800 	.word	0x40023800
 80024cc:	200005cc 	.word	0x200005cc
 80024d0:	40026458 	.word	0x40026458
 80024d4:	40000c00 	.word	0x40000c00
 80024d8:	40010400 	.word	0x40010400
 80024dc:	2000068c 	.word	0x2000068c
 80024e0:	40026440 	.word	0x40026440

080024e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b084      	sub	sp, #16
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a2c      	ldr	r2, [pc, #176]	@ (80025a4 <HAL_TIM_Base_MspInit+0xc0>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d13e      	bne.n	8002574 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024f6:	2300      	movs	r3, #0
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	4b2b      	ldr	r3, [pc, #172]	@ (80025a8 <HAL_TIM_Base_MspInit+0xc4>)
 80024fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fe:	4a2a      	ldr	r2, [pc, #168]	@ (80025a8 <HAL_TIM_Base_MspInit+0xc4>)
 8002500:	f043 0304 	orr.w	r3, r3, #4
 8002504:	6413      	str	r3, [r2, #64]	@ 0x40
 8002506:	4b28      	ldr	r3, [pc, #160]	@ (80025a8 <HAL_TIM_Base_MspInit+0xc4>)
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	f003 0304 	and.w	r3, r3, #4
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 8002512:	4b26      	ldr	r3, [pc, #152]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 8002514:	4a26      	ldr	r2, [pc, #152]	@ (80025b0 <HAL_TIM_Base_MspInit+0xcc>)
 8002516:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 8002518:	4b24      	ldr	r3, [pc, #144]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 800251a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800251e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002520:	4b22      	ldr	r3, [pc, #136]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002526:	4b21      	ldr	r3, [pc, #132]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 8002528:	2200      	movs	r2, #0
 800252a:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800252c:	4b1f      	ldr	r3, [pc, #124]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 800252e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002532:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002534:	4b1d      	ldr	r3, [pc, #116]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 8002536:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800253a:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800253c:	4b1b      	ldr	r3, [pc, #108]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 800253e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002542:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 8002544:	4b19      	ldr	r3, [pc, #100]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 800254a:	4b18      	ldr	r3, [pc, #96]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002550:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 8002552:	2200      	movs	r2, #0
 8002554:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 8002556:	4815      	ldr	r0, [pc, #84]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 8002558:	f001 f8c2 	bl	80036e0 <HAL_DMA_Init>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002562:	f7ff f94b 	bl	80017fc <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a10      	ldr	r2, [pc, #64]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 800256a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800256c:	4a0f      	ldr	r2, [pc, #60]	@ (80025ac <HAL_TIM_Base_MspInit+0xc8>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002572:	e012      	b.n	800259a <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a0e      	ldr	r2, [pc, #56]	@ (80025b4 <HAL_TIM_Base_MspInit+0xd0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d10d      	bne.n	800259a <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	60bb      	str	r3, [r7, #8]
 8002582:	4b09      	ldr	r3, [pc, #36]	@ (80025a8 <HAL_TIM_Base_MspInit+0xc4>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	4a08      	ldr	r2, [pc, #32]	@ (80025a8 <HAL_TIM_Base_MspInit+0xc4>)
 8002588:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800258c:	6453      	str	r3, [r2, #68]	@ 0x44
 800258e:	4b06      	ldr	r3, [pc, #24]	@ (80025a8 <HAL_TIM_Base_MspInit+0xc4>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002592:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002596:	60bb      	str	r3, [r7, #8]
 8002598:	68bb      	ldr	r3, [r7, #8]
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}
 80025a2:	bf00      	nop
 80025a4:	40000800 	.word	0x40000800
 80025a8:	40023800 	.word	0x40023800
 80025ac:	2000062c 	.word	0x2000062c
 80025b0:	400260b8 	.word	0x400260b8
 80025b4:	40014400 	.word	0x40014400

080025b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08e      	sub	sp, #56	@ 0x38
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
 80025c8:	605a      	str	r2, [r3, #4]
 80025ca:	609a      	str	r2, [r3, #8]
 80025cc:	60da      	str	r2, [r3, #12]
 80025ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a6a      	ldr	r2, [pc, #424]	@ (8002780 <HAL_TIM_MspPostInit+0x1c8>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d11f      	bne.n	800261a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	623b      	str	r3, [r7, #32]
 80025de:	4b69      	ldr	r3, [pc, #420]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e2:	4a68      	ldr	r2, [pc, #416]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80025e4:	f043 0310 	orr.w	r3, r3, #16
 80025e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80025ea:	4b66      	ldr	r3, [pc, #408]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ee:	f003 0310 	and.w	r3, r3, #16
 80025f2:	623b      	str	r3, [r7, #32]
 80025f4:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80025f6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80025fa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fc:	2302      	movs	r3, #2
 80025fe:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002600:	2300      	movs	r3, #0
 8002602:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002604:	2300      	movs	r3, #0
 8002606:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002608:	2301      	movs	r3, #1
 800260a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800260c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002610:	4619      	mov	r1, r3
 8002612:	485d      	ldr	r0, [pc, #372]	@ (8002788 <HAL_TIM_MspPostInit+0x1d0>)
 8002614:	f001 fc66 	bl	8003ee4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002618:	e0ae      	b.n	8002778 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a5b      	ldr	r2, [pc, #364]	@ (800278c <HAL_TIM_MspPostInit+0x1d4>)
 8002620:	4293      	cmp	r3, r2
 8002622:	d11f      	bne.n	8002664 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
 8002628:	4b56      	ldr	r3, [pc, #344]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	4a55      	ldr	r2, [pc, #340]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 800262e:	f043 0308 	orr.w	r3, r3, #8
 8002632:	6313      	str	r3, [r2, #48]	@ 0x30
 8002634:	4b53      	ldr	r3, [pc, #332]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 8002636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002638:	f003 0308 	and.w	r3, r3, #8
 800263c:	61fb      	str	r3, [r7, #28]
 800263e:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002640:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002644:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002646:	2302      	movs	r3, #2
 8002648:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800264a:	2300      	movs	r3, #0
 800264c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264e:	2300      	movs	r3, #0
 8002650:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002652:	2302      	movs	r3, #2
 8002654:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002656:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800265a:	4619      	mov	r1, r3
 800265c:	484c      	ldr	r0, [pc, #304]	@ (8002790 <HAL_TIM_MspPostInit+0x1d8>)
 800265e:	f001 fc41 	bl	8003ee4 <HAL_GPIO_Init>
}
 8002662:	e089      	b.n	8002778 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a4a      	ldr	r2, [pc, #296]	@ (8002794 <HAL_TIM_MspPostInit+0x1dc>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d11f      	bne.n	80026ae <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
 8002672:	4b44      	ldr	r3, [pc, #272]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002676:	4a43      	ldr	r2, [pc, #268]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 8002678:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800267c:	6313      	str	r3, [r2, #48]	@ 0x30
 800267e:	4b41      	ldr	r3, [pc, #260]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 8002680:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800268a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002690:	2302      	movs	r3, #2
 8002692:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002694:	2300      	movs	r3, #0
 8002696:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002698:	2300      	movs	r3, #0
 800269a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800269c:	2302      	movs	r3, #2
 800269e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80026a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026a4:	4619      	mov	r1, r3
 80026a6:	483c      	ldr	r0, [pc, #240]	@ (8002798 <HAL_TIM_MspPostInit+0x1e0>)
 80026a8:	f001 fc1c 	bl	8003ee4 <HAL_GPIO_Init>
}
 80026ac:	e064      	b.n	8002778 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a3a      	ldr	r2, [pc, #232]	@ (800279c <HAL_TIM_MspPostInit+0x1e4>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d13c      	bne.n	8002732 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	4a30      	ldr	r2, [pc, #192]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80026c2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026c6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026c8:	4b2e      	ldr	r3, [pc, #184]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80026ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d0:	617b      	str	r3, [r7, #20]
 80026d2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026d4:	2300      	movs	r3, #0
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	4b2a      	ldr	r3, [pc, #168]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80026da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026dc:	4a29      	ldr	r2, [pc, #164]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80026de:	f043 0304 	orr.w	r3, r3, #4
 80026e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80026e4:	4b27      	ldr	r3, [pc, #156]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 80026e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026e8:	f003 0304 	and.w	r3, r3, #4
 80026ec:	613b      	str	r3, [r7, #16]
 80026ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80026f0:	23c0      	movs	r3, #192	@ 0xc0
 80026f2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f4:	2302      	movs	r3, #2
 80026f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026fc:	2300      	movs	r3, #0
 80026fe:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002700:	2303      	movs	r3, #3
 8002702:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002704:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002708:	4619      	mov	r1, r3
 800270a:	4825      	ldr	r0, [pc, #148]	@ (80027a0 <HAL_TIM_MspPostInit+0x1e8>)
 800270c:	f001 fbea 	bl	8003ee4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002710:	2340      	movs	r3, #64	@ 0x40
 8002712:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002714:	2302      	movs	r3, #2
 8002716:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002718:	2300      	movs	r3, #0
 800271a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800271c:	2300      	movs	r3, #0
 800271e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002720:	2303      	movs	r3, #3
 8002722:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002724:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002728:	4619      	mov	r1, r3
 800272a:	481e      	ldr	r0, [pc, #120]	@ (80027a4 <HAL_TIM_MspPostInit+0x1ec>)
 800272c:	f001 fbda 	bl	8003ee4 <HAL_GPIO_Init>
}
 8002730:	e022      	b.n	8002778 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a1c      	ldr	r2, [pc, #112]	@ (80027a8 <HAL_TIM_MspPostInit+0x1f0>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d11d      	bne.n	8002778 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b10      	ldr	r3, [pc, #64]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 8002742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002744:	4a0f      	ldr	r2, [pc, #60]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 8002746:	f043 0320 	orr.w	r3, r3, #32
 800274a:	6313      	str	r3, [r2, #48]	@ 0x30
 800274c:	4b0d      	ldr	r3, [pc, #52]	@ (8002784 <HAL_TIM_MspPostInit+0x1cc>)
 800274e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002750:	f003 0320 	and.w	r3, r3, #32
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002758:	2340      	movs	r3, #64	@ 0x40
 800275a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800275c:	2302      	movs	r3, #2
 800275e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002760:	2301      	movs	r3, #1
 8002762:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002764:	2302      	movs	r3, #2
 8002766:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002768:	2303      	movs	r3, #3
 800276a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	4619      	mov	r1, r3
 8002772:	480e      	ldr	r0, [pc, #56]	@ (80027ac <HAL_TIM_MspPostInit+0x1f4>)
 8002774:	f001 fbb6 	bl	8003ee4 <HAL_GPIO_Init>
}
 8002778:	bf00      	nop
 800277a:	3738      	adds	r7, #56	@ 0x38
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40010000 	.word	0x40010000
 8002784:	40023800 	.word	0x40023800
 8002788:	40021000 	.word	0x40021000
 800278c:	40000800 	.word	0x40000800
 8002790:	40020c00 	.word	0x40020c00
 8002794:	40000c00 	.word	0x40000c00
 8002798:	40021c00 	.word	0x40021c00
 800279c:	40010400 	.word	0x40010400
 80027a0:	40022000 	.word	0x40022000
 80027a4:	40020800 	.word	0x40020800
 80027a8:	40014400 	.word	0x40014400
 80027ac:	40021400 	.word	0x40021400

080027b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b08e      	sub	sp, #56	@ 0x38
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027bc:	2200      	movs	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
 80027c0:	605a      	str	r2, [r3, #4]
 80027c2:	609a      	str	r2, [r3, #8]
 80027c4:	60da      	str	r2, [r3, #12]
 80027c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a90      	ldr	r2, [pc, #576]	@ (8002a10 <HAL_UART_MspInit+0x260>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	f040 80b2 	bne.w	8002938 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027d4:	2300      	movs	r3, #0
 80027d6:	623b      	str	r3, [r7, #32]
 80027d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 80027da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027dc:	4a8d      	ldr	r2, [pc, #564]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 80027de:	f043 0310 	orr.w	r3, r3, #16
 80027e2:	6453      	str	r3, [r2, #68]	@ 0x44
 80027e4:	4b8b      	ldr	r3, [pc, #556]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 80027e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e8:	f003 0310 	and.w	r3, r3, #16
 80027ec:	623b      	str	r3, [r7, #32]
 80027ee:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027f0:	2300      	movs	r3, #0
 80027f2:	61fb      	str	r3, [r7, #28]
 80027f4:	4b87      	ldr	r3, [pc, #540]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 80027f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f8:	4a86      	ldr	r2, [pc, #536]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 80027fa:	f043 0302 	orr.w	r3, r3, #2
 80027fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002800:	4b84      	ldr	r3, [pc, #528]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	61fb      	str	r3, [r7, #28]
 800280a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
 8002810:	4b80      	ldr	r3, [pc, #512]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	4a7f      	ldr	r2, [pc, #508]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002816:	f043 0301 	orr.w	r3, r3, #1
 800281a:	6313      	str	r3, [r2, #48]	@ 0x30
 800281c:	4b7d      	ldr	r3, [pc, #500]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 800281e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002820:	f003 0301 	and.w	r3, r3, #1
 8002824:	61bb      	str	r3, [r7, #24]
 8002826:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002828:	2380      	movs	r3, #128	@ 0x80
 800282a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800282c:	2302      	movs	r3, #2
 800282e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002830:	2300      	movs	r3, #0
 8002832:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002834:	2303      	movs	r3, #3
 8002836:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002838:	2307      	movs	r3, #7
 800283a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800283c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002840:	4619      	mov	r1, r3
 8002842:	4875      	ldr	r0, [pc, #468]	@ (8002a18 <HAL_UART_MspInit+0x268>)
 8002844:	f001 fb4e 	bl	8003ee4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002848:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800284c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800284e:	2302      	movs	r3, #2
 8002850:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002852:	2300      	movs	r3, #0
 8002854:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002856:	2303      	movs	r3, #3
 8002858:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800285a:	2307      	movs	r3, #7
 800285c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800285e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002862:	4619      	mov	r1, r3
 8002864:	486d      	ldr	r0, [pc, #436]	@ (8002a1c <HAL_UART_MspInit+0x26c>)
 8002866:	f001 fb3d 	bl	8003ee4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800286a:	4b6d      	ldr	r3, [pc, #436]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 800286c:	4a6d      	ldr	r2, [pc, #436]	@ (8002a24 <HAL_UART_MspInit+0x274>)
 800286e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002870:	4b6b      	ldr	r3, [pc, #428]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 8002872:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002876:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002878:	4b69      	ldr	r3, [pc, #420]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 800287a:	2240      	movs	r2, #64	@ 0x40
 800287c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800287e:	4b68      	ldr	r3, [pc, #416]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 8002880:	2200      	movs	r2, #0
 8002882:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002884:	4b66      	ldr	r3, [pc, #408]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 8002886:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800288a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800288c:	4b64      	ldr	r3, [pc, #400]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 800288e:	2200      	movs	r2, #0
 8002890:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002892:	4b63      	ldr	r3, [pc, #396]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 8002894:	2200      	movs	r2, #0
 8002896:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002898:	4b61      	ldr	r3, [pc, #388]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 800289a:	2200      	movs	r2, #0
 800289c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800289e:	4b60      	ldr	r3, [pc, #384]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 80028a0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028a4:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028a6:	4b5e      	ldr	r3, [pc, #376]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 80028a8:	2200      	movs	r2, #0
 80028aa:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80028ac:	485c      	ldr	r0, [pc, #368]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 80028ae:	f000 ff17 	bl	80036e0 <HAL_DMA_Init>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 80028b8:	f7fe ffa0 	bl	80017fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4a58      	ldr	r2, [pc, #352]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 80028c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80028c2:	4a57      	ldr	r2, [pc, #348]	@ (8002a20 <HAL_UART_MspInit+0x270>)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 80028c8:	4b57      	ldr	r3, [pc, #348]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028ca:	4a58      	ldr	r2, [pc, #352]	@ (8002a2c <HAL_UART_MspInit+0x27c>)
 80028cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80028ce:	4b56      	ldr	r3, [pc, #344]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028d0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028d6:	4b54      	ldr	r3, [pc, #336]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028d8:	2200      	movs	r2, #0
 80028da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028dc:	4b52      	ldr	r3, [pc, #328]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028de:	2200      	movs	r2, #0
 80028e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028e2:	4b51      	ldr	r3, [pc, #324]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028e4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80028e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028f0:	4b4d      	ldr	r3, [pc, #308]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80028f6:	4b4c      	ldr	r3, [pc, #304]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028fc:	4b4a      	ldr	r3, [pc, #296]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 80028fe:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002902:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002904:	4b48      	ldr	r3, [pc, #288]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 8002906:	2200      	movs	r2, #0
 8002908:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800290a:	4847      	ldr	r0, [pc, #284]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 800290c:	f000 fee8 	bl	80036e0 <HAL_DMA_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 8002916:	f7fe ff71 	bl	80017fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a42      	ldr	r2, [pc, #264]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 800291e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002920:	4a41      	ldr	r2, [pc, #260]	@ (8002a28 <HAL_UART_MspInit+0x278>)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002926:	2200      	movs	r2, #0
 8002928:	2105      	movs	r1, #5
 800292a:	2025      	movs	r0, #37	@ 0x25
 800292c:	f000 fea1 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002930:	2025      	movs	r0, #37	@ 0x25
 8002932:	f000 feba 	bl	80036aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002936:	e11c      	b.n	8002b72 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a3c      	ldr	r2, [pc, #240]	@ (8002a30 <HAL_UART_MspInit+0x280>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d17e      	bne.n	8002a40 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002942:	2300      	movs	r3, #0
 8002944:	617b      	str	r3, [r7, #20]
 8002946:	4b33      	ldr	r3, [pc, #204]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800294a:	4a32      	ldr	r2, [pc, #200]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 800294c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002950:	6413      	str	r3, [r2, #64]	@ 0x40
 8002952:	4b30      	ldr	r3, [pc, #192]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800295a:	617b      	str	r3, [r7, #20]
 800295c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b2c      	ldr	r3, [pc, #176]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002966:	4a2b      	ldr	r2, [pc, #172]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002968:	f043 0304 	orr.w	r3, r3, #4
 800296c:	6313      	str	r3, [r2, #48]	@ 0x30
 800296e:	4b29      	ldr	r3, [pc, #164]	@ (8002a14 <HAL_UART_MspInit+0x264>)
 8002970:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800297a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800297e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002980:	2302      	movs	r3, #2
 8002982:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002984:	2300      	movs	r3, #0
 8002986:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002988:	2303      	movs	r3, #3
 800298a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800298c:	2307      	movs	r3, #7
 800298e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002994:	4619      	mov	r1, r3
 8002996:	4827      	ldr	r0, [pc, #156]	@ (8002a34 <HAL_UART_MspInit+0x284>)
 8002998:	f001 faa4 	bl	8003ee4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800299c:	4b26      	ldr	r3, [pc, #152]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 800299e:	4a27      	ldr	r2, [pc, #156]	@ (8002a3c <HAL_UART_MspInit+0x28c>)
 80029a0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80029a2:	4b25      	ldr	r3, [pc, #148]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029a4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80029a8:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80029aa:	4b23      	ldr	r3, [pc, #140]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80029b0:	4b21      	ldr	r3, [pc, #132]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029b6:	4b20      	ldr	r3, [pc, #128]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80029bc:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80029be:	4b1e      	ldr	r3, [pc, #120]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029c0:	2200      	movs	r2, #0
 80029c2:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80029c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80029ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80029d0:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80029d2:	4b19      	ldr	r3, [pc, #100]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029d4:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80029d8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80029da:	4b17      	ldr	r3, [pc, #92]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029dc:	2200      	movs	r2, #0
 80029de:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80029e0:	4815      	ldr	r0, [pc, #84]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029e2:	f000 fe7d 	bl	80036e0 <HAL_DMA_Init>
 80029e6:	4603      	mov	r3, r0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d001      	beq.n	80029f0 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80029ec:	f7fe ff06 	bl	80017fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	4a11      	ldr	r2, [pc, #68]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029f4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029f6:	4a10      	ldr	r2, [pc, #64]	@ (8002a38 <HAL_UART_MspInit+0x288>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80029fc:	2200      	movs	r2, #0
 80029fe:	2105      	movs	r1, #5
 8002a00:	2027      	movs	r0, #39	@ 0x27
 8002a02:	f000 fe36 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002a06:	2027      	movs	r0, #39	@ 0x27
 8002a08:	f000 fe4f 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 8002a0c:	e0b1      	b.n	8002b72 <HAL_UART_MspInit+0x3c2>
 8002a0e:	bf00      	nop
 8002a10:	40011000 	.word	0x40011000
 8002a14:	40023800 	.word	0x40023800
 8002a18:	40020400 	.word	0x40020400
 8002a1c:	40020000 	.word	0x40020000
 8002a20:	200007c4 	.word	0x200007c4
 8002a24:	400264b8 	.word	0x400264b8
 8002a28:	20000824 	.word	0x20000824
 8002a2c:	40026488 	.word	0x40026488
 8002a30:	40004800 	.word	0x40004800
 8002a34:	40020800 	.word	0x40020800
 8002a38:	20000884 	.word	0x20000884
 8002a3c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a4d      	ldr	r2, [pc, #308]	@ (8002b7c <HAL_UART_MspInit+0x3cc>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	f040 8093 	bne.w	8002b72 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4b4b      	ldr	r3, [pc, #300]	@ (8002b80 <HAL_UART_MspInit+0x3d0>)
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	4a4a      	ldr	r2, [pc, #296]	@ (8002b80 <HAL_UART_MspInit+0x3d0>)
 8002a56:	f043 0320 	orr.w	r3, r3, #32
 8002a5a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a5c:	4b48      	ldr	r3, [pc, #288]	@ (8002b80 <HAL_UART_MspInit+0x3d0>)
 8002a5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a60:	f003 0320 	and.w	r3, r3, #32
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a68:	2300      	movs	r3, #0
 8002a6a:	60bb      	str	r3, [r7, #8]
 8002a6c:	4b44      	ldr	r3, [pc, #272]	@ (8002b80 <HAL_UART_MspInit+0x3d0>)
 8002a6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a70:	4a43      	ldr	r2, [pc, #268]	@ (8002b80 <HAL_UART_MspInit+0x3d0>)
 8002a72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a76:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a78:	4b41      	ldr	r3, [pc, #260]	@ (8002b80 <HAL_UART_MspInit+0x3d0>)
 8002a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a80:	60bb      	str	r3, [r7, #8]
 8002a82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002a84:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002a88:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8a:	2302      	movs	r3, #2
 8002a8c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a92:	2303      	movs	r3, #3
 8002a94:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a96:	2308      	movs	r3, #8
 8002a98:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	4838      	ldr	r0, [pc, #224]	@ (8002b84 <HAL_UART_MspInit+0x3d4>)
 8002aa2:	f001 fa1f 	bl	8003ee4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002aa6:	4b38      	ldr	r3, [pc, #224]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002aa8:	4a38      	ldr	r2, [pc, #224]	@ (8002b8c <HAL_UART_MspInit+0x3dc>)
 8002aaa:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002aac:	4b36      	ldr	r3, [pc, #216]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002aae:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002ab2:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ab4:	4b34      	ldr	r3, [pc, #208]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002aba:	4b33      	ldr	r3, [pc, #204]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ac0:	4b31      	ldr	r3, [pc, #196]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002ac2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ac6:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002aca:	2200      	movs	r2, #0
 8002acc:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ace:	4b2e      	ldr	r3, [pc, #184]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002ad4:	4b2c      	ldr	r3, [pc, #176]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002ada:	4b2b      	ldr	r3, [pc, #172]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002adc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002ae0:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ae2:	4b29      	ldr	r3, [pc, #164]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002ae8:	4827      	ldr	r0, [pc, #156]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002aea:	f000 fdf9 	bl	80036e0 <HAL_DMA_Init>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d001      	beq.n	8002af8 <HAL_UART_MspInit+0x348>
      Error_Handler();
 8002af4:	f7fe fe82 	bl	80017fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a23      	ldr	r2, [pc, #140]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002afc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002afe:	4a22      	ldr	r2, [pc, #136]	@ (8002b88 <HAL_UART_MspInit+0x3d8>)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002b04:	4b22      	ldr	r3, [pc, #136]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b06:	4a23      	ldr	r2, [pc, #140]	@ (8002b94 <HAL_UART_MspInit+0x3e4>)
 8002b08:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002b0a:	4b21      	ldr	r3, [pc, #132]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b0c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002b10:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b12:	4b1f      	ldr	r3, [pc, #124]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b14:	2240      	movs	r2, #64	@ 0x40
 8002b16:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b18:	4b1d      	ldr	r3, [pc, #116]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b1e:	4b1c      	ldr	r3, [pc, #112]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b20:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b24:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b26:	4b1a      	ldr	r3, [pc, #104]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b2c:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b2e:	2200      	movs	r2, #0
 8002b30:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002b32:	4b17      	ldr	r3, [pc, #92]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b34:	2200      	movs	r2, #0
 8002b36:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002b38:	4b15      	ldr	r3, [pc, #84]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b3a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002b3e:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b40:	4b13      	ldr	r3, [pc, #76]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b42:	2200      	movs	r2, #0
 8002b44:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002b46:	4812      	ldr	r0, [pc, #72]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b48:	f000 fdca 	bl	80036e0 <HAL_DMA_Init>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8002b52:	f7fe fe53 	bl	80017fc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a0d      	ldr	r2, [pc, #52]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8002b90 <HAL_UART_MspInit+0x3e0>)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002b62:	2200      	movs	r2, #0
 8002b64:	2105      	movs	r1, #5
 8002b66:	2047      	movs	r0, #71	@ 0x47
 8002b68:	f000 fd83 	bl	8003672 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002b6c:	2047      	movs	r0, #71	@ 0x47
 8002b6e:	f000 fd9c 	bl	80036aa <HAL_NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3738      	adds	r7, #56	@ 0x38
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}
 8002b7a:	bf00      	nop
 8002b7c:	40011400 	.word	0x40011400
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40021800 	.word	0x40021800
 8002b88:	200008e4 	.word	0x200008e4
 8002b8c:	40026428 	.word	0x40026428
 8002b90:	20000944 	.word	0x20000944
 8002b94:	400264a0 	.word	0x400264a0

08002b98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002b9c:	f002 f93c 	bl	8004e18 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ba0:	bf00      	nop
 8002ba2:	e7fd      	b.n	8002ba0 <NMI_Handler+0x8>

08002ba4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ba8:	bf00      	nop
 8002baa:	e7fd      	b.n	8002ba8 <HardFault_Handler+0x4>

08002bac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bac:	b480      	push	{r7}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bb0:	bf00      	nop
 8002bb2:	e7fd      	b.n	8002bb0 <MemManage_Handler+0x4>

08002bb4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bb8:	bf00      	nop
 8002bba:	e7fd      	b.n	8002bb8 <BusFault_Handler+0x4>

08002bbc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bc0:	bf00      	nop
 8002bc2:	e7fd      	b.n	8002bc0 <UsageFault_Handler+0x4>

08002bc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002bd6:	f000 f91d 	bl	8002e14 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002bda:	f006 f815 	bl	8008c08 <xTaskGetSchedulerState>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d001      	beq.n	8002be8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002be4:	f006 fe10 	bl	8009808 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002be8:	bf00      	nop
 8002bea:	bd80      	pop	{r7, pc}

08002bec <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002bf0:	2008      	movs	r0, #8
 8002bf2:	f001 fb45 	bl	8004280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002bf6:	bf00      	nop
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8002bfe:	2010      	movs	r0, #16
 8002c00:	f001 fb3e 	bl	8004280 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	bd80      	pop	{r7, pc}

08002c08 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002c0c:	4802      	ldr	r0, [pc, #8]	@ (8002c18 <DMA1_Stream1_IRQHandler+0x10>)
 8002c0e:	f000 feff 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	20000884 	.word	0x20000884

08002c1c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002c20:	4802      	ldr	r0, [pc, #8]	@ (8002c2c <CAN1_RX0_IRQHandler+0x10>)
 8002c22:	f000 fa12 	bl	800304a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	20000368 	.word	0x20000368

08002c30 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002c34:	4802      	ldr	r0, [pc, #8]	@ (8002c40 <USART1_IRQHandler+0x10>)
 8002c36:	f003 f9f5 	bl	8006024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002c3a:	bf00      	nop
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	200006ec 	.word	0x200006ec

08002c44 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002c48:	4802      	ldr	r0, [pc, #8]	@ (8002c54 <DMA1_Stream7_IRQHandler+0x10>)
 8002c4a:	f000 fee1 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	2000062c 	.word	0x2000062c

08002c58 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c5c:	4802      	ldr	r0, [pc, #8]	@ (8002c68 <DMA2_Stream1_IRQHandler+0x10>)
 8002c5e:	f000 fed7 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c62:	bf00      	nop
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200008e4 	.word	0x200008e4

08002c6c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1_ch2_ch3);
 8002c70:	4802      	ldr	r0, [pc, #8]	@ (8002c7c <DMA2_Stream2_IRQHandler+0x10>)
 8002c72:	f000 fecd 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c76:	bf00      	nop
 8002c78:	bd80      	pop	{r7, pc}
 8002c7a:	bf00      	nop
 8002c7c:	2000068c 	.word	0x2000068c

08002c80 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8002c84:	4802      	ldr	r0, [pc, #8]	@ (8002c90 <DMA2_Stream3_IRQHandler+0x10>)
 8002c86:	f000 fec3 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	200005cc 	.word	0x200005cc

08002c94 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c98:	4802      	ldr	r0, [pc, #8]	@ (8002ca4 <CAN2_RX0_IRQHandler+0x10>)
 8002c9a:	f000 f9d6 	bl	800304a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	20000390 	.word	0x20000390

08002ca8 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002cac:	4802      	ldr	r0, [pc, #8]	@ (8002cb8 <DMA2_Stream5_IRQHandler+0x10>)
 8002cae:	f000 feaf 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	20000824 	.word	0x20000824

08002cbc <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002cc0:	4802      	ldr	r0, [pc, #8]	@ (8002ccc <DMA2_Stream6_IRQHandler+0x10>)
 8002cc2:	f000 fea5 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002cc6:	bf00      	nop
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	20000944 	.word	0x20000944

08002cd0 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002cd4:	4802      	ldr	r0, [pc, #8]	@ (8002ce0 <DMA2_Stream7_IRQHandler+0x10>)
 8002cd6:	f000 fe9b 	bl	8003a10 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002cda:	bf00      	nop
 8002cdc:	bd80      	pop	{r7, pc}
 8002cde:	bf00      	nop
 8002ce0:	200007c4 	.word	0x200007c4

08002ce4 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002ce8:	4802      	ldr	r0, [pc, #8]	@ (8002cf4 <USART6_IRQHandler+0x10>)
 8002cea:	f003 f99b 	bl	8006024 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002cee:	bf00      	nop
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	2000077c 	.word	0x2000077c

08002cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cfc:	4b06      	ldr	r3, [pc, #24]	@ (8002d18 <SystemInit+0x20>)
 8002cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d02:	4a05      	ldr	r2, [pc, #20]	@ (8002d18 <SystemInit+0x20>)
 8002d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d0c:	bf00      	nop
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	e000ed00 	.word	0xe000ed00

08002d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d54 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d20:	f7ff ffea 	bl	8002cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d24:	480c      	ldr	r0, [pc, #48]	@ (8002d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d26:	490d      	ldr	r1, [pc, #52]	@ (8002d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d28:	4a0d      	ldr	r2, [pc, #52]	@ (8002d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d2c:	e002      	b.n	8002d34 <LoopCopyDataInit>

08002d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d32:	3304      	adds	r3, #4

08002d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d38:	d3f9      	bcc.n	8002d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d40:	e001      	b.n	8002d46 <LoopFillZerobss>

08002d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d44:	3204      	adds	r2, #4

08002d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d48:	d3fb      	bcc.n	8002d42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d4a:	f007 f83b 	bl	8009dc4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d4e:	f7fd fdb3 	bl	80008b8 <main>
  bx  lr    
 8002d52:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d5c:	20000118 	.word	0x20000118
  ldr r2, =_sidata
 8002d60:	08009ffc 	.word	0x08009ffc
  ldr r2, =_sbss
 8002d64:	20000118 	.word	0x20000118
  ldr r4, =_ebss
 8002d68:	20005560 	.word	0x20005560

08002d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d6c:	e7fe      	b.n	8002d6c <ADC_IRQHandler>
	...

08002d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d74:	4b0e      	ldr	r3, [pc, #56]	@ (8002db0 <HAL_Init+0x40>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	4a0d      	ldr	r2, [pc, #52]	@ (8002db0 <HAL_Init+0x40>)
 8002d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d80:	4b0b      	ldr	r3, [pc, #44]	@ (8002db0 <HAL_Init+0x40>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <HAL_Init+0x40>)
 8002d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d8c:	4b08      	ldr	r3, [pc, #32]	@ (8002db0 <HAL_Init+0x40>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a07      	ldr	r2, [pc, #28]	@ (8002db0 <HAL_Init+0x40>)
 8002d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d98:	2003      	movs	r0, #3
 8002d9a:	f000 fc5f 	bl	800365c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d9e:	200f      	movs	r0, #15
 8002da0:	f000 f808 	bl	8002db4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002da4:	f7ff f932 	bl	800200c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002da8:	2300      	movs	r3, #0
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	40023c00 	.word	0x40023c00

08002db4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dbc:	4b12      	ldr	r3, [pc, #72]	@ (8002e08 <HAL_InitTick+0x54>)
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	4b12      	ldr	r3, [pc, #72]	@ (8002e0c <HAL_InitTick+0x58>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f000 fc77 	bl	80036c6 <HAL_SYSTICK_Config>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d001      	beq.n	8002de2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00e      	b.n	8002e00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b0f      	cmp	r3, #15
 8002de6:	d80a      	bhi.n	8002dfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002de8:	2200      	movs	r2, #0
 8002dea:	6879      	ldr	r1, [r7, #4]
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295
 8002df0:	f000 fc3f 	bl	8003672 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002df4:	4a06      	ldr	r2, [pc, #24]	@ (8002e10 <HAL_InitTick+0x5c>)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	e000      	b.n	8002e00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	200000b8 	.word	0x200000b8
 8002e0c:	200000c0 	.word	0x200000c0
 8002e10:	200000bc 	.word	0x200000bc

08002e14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e14:	b480      	push	{r7}
 8002e16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e18:	4b06      	ldr	r3, [pc, #24]	@ (8002e34 <HAL_IncTick+0x20>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b06      	ldr	r3, [pc, #24]	@ (8002e38 <HAL_IncTick+0x24>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4413      	add	r3, r2
 8002e24:	4a04      	ldr	r2, [pc, #16]	@ (8002e38 <HAL_IncTick+0x24>)
 8002e26:	6013      	str	r3, [r2, #0]
}
 8002e28:	bf00      	nop
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	200000c0 	.word	0x200000c0
 8002e38:	20000a34 	.word	0x20000a34

08002e3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e40:	4b03      	ldr	r3, [pc, #12]	@ (8002e50 <HAL_GetTick+0x14>)
 8002e42:	681b      	ldr	r3, [r3, #0]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	46bd      	mov	sp, r7
 8002e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4c:	4770      	bx	lr
 8002e4e:	bf00      	nop
 8002e50:	20000a34 	.word	0x20000a34

08002e54 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d101      	bne.n	8002e66 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e62:	2301      	movs	r3, #1
 8002e64:	e0ed      	b.n	8003042 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d102      	bne.n	8002e78 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e72:	6878      	ldr	r0, [r7, #4]
 8002e74:	f7ff f8f6 	bl	8002064 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f042 0201 	orr.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e88:	f7ff ffd8 	bl	8002e3c <HAL_GetTick>
 8002e8c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e8e:	e012      	b.n	8002eb6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e90:	f7ff ffd4 	bl	8002e3c <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b0a      	cmp	r3, #10
 8002e9c:	d90b      	bls.n	8002eb6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2205      	movs	r2, #5
 8002eae:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0c5      	b.n	8003042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0301 	and.w	r3, r3, #1
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d0e5      	beq.n	8002e90 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f022 0202 	bic.w	r2, r2, #2
 8002ed2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ed4:	f7ff ffb2 	bl	8002e3c <HAL_GetTick>
 8002ed8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002eda:	e012      	b.n	8002f02 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002edc:	f7ff ffae 	bl	8002e3c <HAL_GetTick>
 8002ee0:	4602      	mov	r2, r0
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	1ad3      	subs	r3, r2, r3
 8002ee6:	2b0a      	cmp	r3, #10
 8002ee8:	d90b      	bls.n	8002f02 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eee:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2205      	movs	r2, #5
 8002efa:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e09f      	b.n	8003042 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d1e5      	bne.n	8002edc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	7e1b      	ldrb	r3, [r3, #24]
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d108      	bne.n	8002f2a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	e007      	b.n	8002f3a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f38:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	7e5b      	ldrb	r3, [r3, #25]
 8002f3e:	2b01      	cmp	r3, #1
 8002f40:	d108      	bne.n	8002f54 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e007      	b.n	8002f64 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f62:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	7e9b      	ldrb	r3, [r3, #26]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d108      	bne.n	8002f7e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f042 0220 	orr.w	r2, r2, #32
 8002f7a:	601a      	str	r2, [r3, #0]
 8002f7c:	e007      	b.n	8002f8e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f022 0220 	bic.w	r2, r2, #32
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	7edb      	ldrb	r3, [r3, #27]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d108      	bne.n	8002fa8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f022 0210 	bic.w	r2, r2, #16
 8002fa4:	601a      	str	r2, [r3, #0]
 8002fa6:	e007      	b.n	8002fb8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0210 	orr.w	r2, r2, #16
 8002fb6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7f1b      	ldrb	r3, [r3, #28]
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d108      	bne.n	8002fd2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0208 	orr.w	r2, r2, #8
 8002fce:	601a      	str	r2, [r3, #0]
 8002fd0:	e007      	b.n	8002fe2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f022 0208 	bic.w	r2, r2, #8
 8002fe0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	7f5b      	ldrb	r3, [r3, #29]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d108      	bne.n	8002ffc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	681a      	ldr	r2, [r3, #0]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f042 0204 	orr.w	r2, r2, #4
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	e007      	b.n	800300c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0204 	bic.w	r2, r2, #4
 800300a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	689a      	ldr	r2, [r3, #8]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	431a      	orrs	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	431a      	orrs	r2, r3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	695b      	ldr	r3, [r3, #20]
 8003020:	ea42 0103 	orr.w	r1, r2, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	1e5a      	subs	r2, r3, #1
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	430a      	orrs	r2, r1
 8003030:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	2200      	movs	r2, #0
 8003036:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}

0800304a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800304a:	b580      	push	{r7, lr}
 800304c:	b08a      	sub	sp, #40	@ 0x28
 800304e:	af00      	add	r7, sp, #0
 8003050:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003052:	2300      	movs	r3, #0
 8003054:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	699b      	ldr	r3, [r3, #24]
 8003084:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003086:	6a3b      	ldr	r3, [r7, #32]
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d07c      	beq.n	800318a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d023      	beq.n	80030e2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2201      	movs	r2, #1
 80030a0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80030a2:	69bb      	ldr	r3, [r7, #24]
 80030a4:	f003 0302 	and.w	r3, r3, #2
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f983 	bl	80033b8 <HAL_CAN_TxMailbox0CompleteCallback>
 80030b2:	e016      	b.n	80030e2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f003 0304 	and.w	r3, r3, #4
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d004      	beq.n	80030c8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80030be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80030c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80030c6:	e00c      	b.n	80030e2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f003 0308 	and.w	r3, r3, #8
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80030d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80030d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030da:	e002      	b.n	80030e2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80030dc:	6878      	ldr	r0, [r7, #4]
 80030de:	f000 f989 	bl	80033f4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80030e2:	69bb      	ldr	r3, [r7, #24]
 80030e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d024      	beq.n	8003136 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80030f4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f000 f963 	bl	80033cc <HAL_CAN_TxMailbox1CompleteCallback>
 8003106:	e016      	b.n	8003136 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310e:	2b00      	cmp	r3, #0
 8003110:	d004      	beq.n	800311c <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003114:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003118:	627b      	str	r3, [r7, #36]	@ 0x24
 800311a:	e00c      	b.n	8003136 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800311c:	69bb      	ldr	r3, [r7, #24]
 800311e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003122:	2b00      	cmp	r3, #0
 8003124:	d004      	beq.n	8003130 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003126:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003128:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800312c:	627b      	str	r3, [r7, #36]	@ 0x24
 800312e:	e002      	b.n	8003136 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f969 	bl	8003408 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d024      	beq.n	800318a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003148:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003150:	2b00      	cmp	r3, #0
 8003152:	d003      	beq.n	800315c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f000 f943 	bl	80033e0 <HAL_CAN_TxMailbox2CompleteCallback>
 800315a:	e016      	b.n	800318a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800315c:	69bb      	ldr	r3, [r7, #24]
 800315e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d004      	beq.n	8003170 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800316c:	627b      	str	r3, [r7, #36]	@ 0x24
 800316e:	e00c      	b.n	800318a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d004      	beq.n	8003184 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003180:	627b      	str	r3, [r7, #36]	@ 0x24
 8003182:	e002      	b.n	800318a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f949 	bl	800341c <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800318a:	6a3b      	ldr	r3, [r7, #32]
 800318c:	f003 0308 	and.w	r3, r3, #8
 8003190:	2b00      	cmp	r3, #0
 8003192:	d00c      	beq.n	80031ae <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f003 0310 	and.w	r3, r3, #16
 800319a:	2b00      	cmp	r3, #0
 800319c:	d007      	beq.n	80031ae <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800319e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80031a4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2210      	movs	r2, #16
 80031ac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80031ae:	6a3b      	ldr	r3, [r7, #32]
 80031b0:	f003 0304 	and.w	r3, r3, #4
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d00b      	beq.n	80031d0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d006      	beq.n	80031d0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	2208      	movs	r2, #8
 80031c8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80031ca:	6878      	ldr	r0, [r7, #4]
 80031cc:	f000 f93a 	bl	8003444 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80031d0:	6a3b      	ldr	r3, [r7, #32]
 80031d2:	f003 0302 	and.w	r3, r3, #2
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d009      	beq.n	80031ee <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	f003 0303 	and.w	r3, r3, #3
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d002      	beq.n	80031ee <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80031e8:	6878      	ldr	r0, [r7, #4]
 80031ea:	f000 f921 	bl	8003430 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80031ee:	6a3b      	ldr	r3, [r7, #32]
 80031f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00c      	beq.n	8003212 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f003 0310 	and.w	r3, r3, #16
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d007      	beq.n	8003212 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003204:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003208:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	2210      	movs	r2, #16
 8003210:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003212:	6a3b      	ldr	r3, [r7, #32]
 8003214:	f003 0320 	and.w	r3, r3, #32
 8003218:	2b00      	cmp	r3, #0
 800321a:	d00b      	beq.n	8003234 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d006      	beq.n	8003234 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2208      	movs	r2, #8
 800322c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f91c 	bl	800346c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003234:	6a3b      	ldr	r3, [r7, #32]
 8003236:	f003 0310 	and.w	r3, r3, #16
 800323a:	2b00      	cmp	r3, #0
 800323c:	d009      	beq.n	8003252 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f003 0303 	and.w	r3, r3, #3
 8003248:	2b00      	cmp	r3, #0
 800324a:	d002      	beq.n	8003252 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800324c:	6878      	ldr	r0, [r7, #4]
 800324e:	f000 f903 	bl	8003458 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d00b      	beq.n	8003274 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	f003 0310 	and.w	r3, r3, #16
 8003262:	2b00      	cmp	r3, #0
 8003264:	d006      	beq.n	8003274 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2210      	movs	r2, #16
 800326c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800326e:	6878      	ldr	r0, [r7, #4]
 8003270:	f000 f906 	bl	8003480 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003274:	6a3b      	ldr	r3, [r7, #32]
 8003276:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	f003 0308 	and.w	r3, r3, #8
 8003284:	2b00      	cmp	r3, #0
 8003286:	d006      	beq.n	8003296 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	2208      	movs	r2, #8
 800328e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f8ff 	bl	8003494 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800329c:	2b00      	cmp	r3, #0
 800329e:	d07b      	beq.n	8003398 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d072      	beq.n	8003390 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032aa:	6a3b      	ldr	r3, [r7, #32]
 80032ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d008      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d003      	beq.n	80032c6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80032be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032c0:	f043 0301 	orr.w	r3, r3, #1
 80032c4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032c6:	6a3b      	ldr	r3, [r7, #32]
 80032c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d003      	beq.n	80032e2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80032da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032dc:	f043 0302 	orr.w	r3, r3, #2
 80032e0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d008      	beq.n	80032fe <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	f043 0304 	orr.w	r3, r3, #4
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003304:	2b00      	cmp	r3, #0
 8003306:	d043      	beq.n	8003390 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800330e:	2b00      	cmp	r3, #0
 8003310:	d03e      	beq.n	8003390 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8003318:	2b60      	cmp	r3, #96	@ 0x60
 800331a:	d02b      	beq.n	8003374 <HAL_CAN_IRQHandler+0x32a>
 800331c:	2b60      	cmp	r3, #96	@ 0x60
 800331e:	d82e      	bhi.n	800337e <HAL_CAN_IRQHandler+0x334>
 8003320:	2b50      	cmp	r3, #80	@ 0x50
 8003322:	d022      	beq.n	800336a <HAL_CAN_IRQHandler+0x320>
 8003324:	2b50      	cmp	r3, #80	@ 0x50
 8003326:	d82a      	bhi.n	800337e <HAL_CAN_IRQHandler+0x334>
 8003328:	2b40      	cmp	r3, #64	@ 0x40
 800332a:	d019      	beq.n	8003360 <HAL_CAN_IRQHandler+0x316>
 800332c:	2b40      	cmp	r3, #64	@ 0x40
 800332e:	d826      	bhi.n	800337e <HAL_CAN_IRQHandler+0x334>
 8003330:	2b30      	cmp	r3, #48	@ 0x30
 8003332:	d010      	beq.n	8003356 <HAL_CAN_IRQHandler+0x30c>
 8003334:	2b30      	cmp	r3, #48	@ 0x30
 8003336:	d822      	bhi.n	800337e <HAL_CAN_IRQHandler+0x334>
 8003338:	2b10      	cmp	r3, #16
 800333a:	d002      	beq.n	8003342 <HAL_CAN_IRQHandler+0x2f8>
 800333c:	2b20      	cmp	r3, #32
 800333e:	d005      	beq.n	800334c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8003340:	e01d      	b.n	800337e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	f043 0308 	orr.w	r3, r3, #8
 8003348:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800334a:	e019      	b.n	8003380 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800334c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334e:	f043 0310 	orr.w	r3, r3, #16
 8003352:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003354:	e014      	b.n	8003380 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	f043 0320 	orr.w	r3, r3, #32
 800335c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800335e:	e00f      	b.n	8003380 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003366:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003368:	e00a      	b.n	8003380 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800336a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800336c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003370:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003372:	e005      	b.n	8003380 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003376:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800337a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800337c:	e000      	b.n	8003380 <HAL_CAN_IRQHandler+0x336>
            break;
 800337e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	699a      	ldr	r2, [r3, #24]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800338e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	2204      	movs	r2, #4
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d008      	beq.n	80033b0 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80033a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f87c 	bl	80034a8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80033b0:	bf00      	nop
 80033b2:	3728      	adds	r7, #40	@ 0x28
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80033fc:	bf00      	nop
 80033fe:	370c      	adds	r7, #12
 8003400:	46bd      	mov	sp, r7
 8003402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003406:	4770      	bx	lr

08003408 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003408:	b480      	push	{r7}
 800340a:	b083      	sub	sp, #12
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8003410:	bf00      	nop
 8003412:	370c      	adds	r7, #12
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342e:	4770      	bx	lr

08003430 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800344c:	bf00      	nop
 800344e:	370c      	adds	r7, #12
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003460:	bf00      	nop
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003474:	bf00      	nop
 8003476:	370c      	adds	r7, #12
 8003478:	46bd      	mov	sp, r7
 800347a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347e:	4770      	bx	lr

08003480 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800349c:	bf00      	nop
 800349e:	370c      	adds	r7, #12
 80034a0:	46bd      	mov	sp, r7
 80034a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a6:	4770      	bx	lr

080034a8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80034a8:	b480      	push	{r7}
 80034aa:	b083      	sub	sp, #12
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034bc:	b480      	push	{r7}
 80034be:	b085      	sub	sp, #20
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	f003 0307 	and.w	r3, r3, #7
 80034ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80034cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80034d2:	68ba      	ldr	r2, [r7, #8]
 80034d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80034d8:	4013      	ands	r3, r2
 80034da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80034e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80034e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80034ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80034ee:	4a04      	ldr	r2, [pc, #16]	@ (8003500 <__NVIC_SetPriorityGrouping+0x44>)
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	60d3      	str	r3, [r2, #12]
}
 80034f4:	bf00      	nop
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	e000ed00 	.word	0xe000ed00

08003504 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003504:	b480      	push	{r7}
 8003506:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003508:	4b04      	ldr	r3, [pc, #16]	@ (800351c <__NVIC_GetPriorityGrouping+0x18>)
 800350a:	68db      	ldr	r3, [r3, #12]
 800350c:	0a1b      	lsrs	r3, r3, #8
 800350e:	f003 0307 	and.w	r3, r3, #7
}
 8003512:	4618      	mov	r0, r3
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	e000ed00 	.word	0xe000ed00

08003520 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	4603      	mov	r3, r0
 8003528:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800352a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800352e:	2b00      	cmp	r3, #0
 8003530:	db0b      	blt.n	800354a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003532:	79fb      	ldrb	r3, [r7, #7]
 8003534:	f003 021f 	and.w	r2, r3, #31
 8003538:	4907      	ldr	r1, [pc, #28]	@ (8003558 <__NVIC_EnableIRQ+0x38>)
 800353a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800353e:	095b      	lsrs	r3, r3, #5
 8003540:	2001      	movs	r0, #1
 8003542:	fa00 f202 	lsl.w	r2, r0, r2
 8003546:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	e000e100 	.word	0xe000e100

0800355c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	4603      	mov	r3, r0
 8003564:	6039      	str	r1, [r7, #0]
 8003566:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003568:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800356c:	2b00      	cmp	r3, #0
 800356e:	db0a      	blt.n	8003586 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	490c      	ldr	r1, [pc, #48]	@ (80035a8 <__NVIC_SetPriority+0x4c>)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	0112      	lsls	r2, r2, #4
 800357c:	b2d2      	uxtb	r2, r2
 800357e:	440b      	add	r3, r1
 8003580:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003584:	e00a      	b.n	800359c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	b2da      	uxtb	r2, r3
 800358a:	4908      	ldr	r1, [pc, #32]	@ (80035ac <__NVIC_SetPriority+0x50>)
 800358c:	79fb      	ldrb	r3, [r7, #7]
 800358e:	f003 030f 	and.w	r3, r3, #15
 8003592:	3b04      	subs	r3, #4
 8003594:	0112      	lsls	r2, r2, #4
 8003596:	b2d2      	uxtb	r2, r2
 8003598:	440b      	add	r3, r1
 800359a:	761a      	strb	r2, [r3, #24]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	e000e100 	.word	0xe000e100
 80035ac:	e000ed00 	.word	0xe000ed00

080035b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b089      	sub	sp, #36	@ 0x24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f003 0307 	and.w	r3, r3, #7
 80035c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	f1c3 0307 	rsb	r3, r3, #7
 80035ca:	2b04      	cmp	r3, #4
 80035cc:	bf28      	it	cs
 80035ce:	2304      	movcs	r3, #4
 80035d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	3304      	adds	r3, #4
 80035d6:	2b06      	cmp	r3, #6
 80035d8:	d902      	bls.n	80035e0 <NVIC_EncodePriority+0x30>
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3b03      	subs	r3, #3
 80035de:	e000      	b.n	80035e2 <NVIC_EncodePriority+0x32>
 80035e0:	2300      	movs	r3, #0
 80035e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035e4:	f04f 32ff 	mov.w	r2, #4294967295
 80035e8:	69bb      	ldr	r3, [r7, #24]
 80035ea:	fa02 f303 	lsl.w	r3, r2, r3
 80035ee:	43da      	mvns	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	401a      	ands	r2, r3
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80035f8:	f04f 31ff 	mov.w	r1, #4294967295
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003602:	43d9      	mvns	r1, r3
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003608:	4313      	orrs	r3, r2
         );
}
 800360a:	4618      	mov	r0, r3
 800360c:	3724      	adds	r7, #36	@ 0x24
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
	...

08003618 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	3b01      	subs	r3, #1
 8003624:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003628:	d301      	bcc.n	800362e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800362a:	2301      	movs	r3, #1
 800362c:	e00f      	b.n	800364e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800362e:	4a0a      	ldr	r2, [pc, #40]	@ (8003658 <SysTick_Config+0x40>)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	3b01      	subs	r3, #1
 8003634:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003636:	210f      	movs	r1, #15
 8003638:	f04f 30ff 	mov.w	r0, #4294967295
 800363c:	f7ff ff8e 	bl	800355c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003640:	4b05      	ldr	r3, [pc, #20]	@ (8003658 <SysTick_Config+0x40>)
 8003642:	2200      	movs	r2, #0
 8003644:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003646:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <SysTick_Config+0x40>)
 8003648:	2207      	movs	r2, #7
 800364a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800364c:	2300      	movs	r3, #0
}
 800364e:	4618      	mov	r0, r3
 8003650:	3708      	adds	r7, #8
 8003652:	46bd      	mov	sp, r7
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	e000e010 	.word	0xe000e010

0800365c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b082      	sub	sp, #8
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff29 	bl	80034bc <__NVIC_SetPriorityGrouping>
}
 800366a:	bf00      	nop
 800366c:	3708      	adds	r7, #8
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	4603      	mov	r3, r0
 800367a:	60b9      	str	r1, [r7, #8]
 800367c:	607a      	str	r2, [r7, #4]
 800367e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003680:	2300      	movs	r3, #0
 8003682:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003684:	f7ff ff3e 	bl	8003504 <__NVIC_GetPriorityGrouping>
 8003688:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	6978      	ldr	r0, [r7, #20]
 8003690:	f7ff ff8e 	bl	80035b0 <NVIC_EncodePriority>
 8003694:	4602      	mov	r2, r0
 8003696:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800369a:	4611      	mov	r1, r2
 800369c:	4618      	mov	r0, r3
 800369e:	f7ff ff5d 	bl	800355c <__NVIC_SetPriority>
}
 80036a2:	bf00      	nop
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036aa:	b580      	push	{r7, lr}
 80036ac:	b082      	sub	sp, #8
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	4603      	mov	r3, r0
 80036b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	4618      	mov	r0, r3
 80036ba:	f7ff ff31 	bl	8003520 <__NVIC_EnableIRQ>
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}

080036c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80036c6:	b580      	push	{r7, lr}
 80036c8:	b082      	sub	sp, #8
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7ff ffa2 	bl	8003618 <SysTick_Config>
 80036d4:	4603      	mov	r3, r0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
	...

080036e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b086      	sub	sp, #24
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80036e8:	2300      	movs	r3, #0
 80036ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80036ec:	f7ff fba6 	bl	8002e3c <HAL_GetTick>
 80036f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e099      	b.n	8003830 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f022 0201 	bic.w	r2, r2, #1
 800371a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800371c:	e00f      	b.n	800373e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800371e:	f7ff fb8d 	bl	8002e3c <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b05      	cmp	r3, #5
 800372a:	d908      	bls.n	800373e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2220      	movs	r2, #32
 8003730:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2203      	movs	r2, #3
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e078      	b.n	8003830 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f003 0301 	and.w	r3, r3, #1
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e8      	bne.n	800371e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	4b38      	ldr	r3, [pc, #224]	@ (8003838 <HAL_DMA_Init+0x158>)
 8003758:	4013      	ands	r3, r2
 800375a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800376a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003776:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003782:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800378a:	697a      	ldr	r2, [r7, #20]
 800378c:	4313      	orrs	r3, r2
 800378e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037a0:	4313      	orrs	r3, r2
 80037a2:	697a      	ldr	r2, [r7, #20]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	695b      	ldr	r3, [r3, #20]
 80037b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	f023 0307 	bic.w	r3, r3, #7
 80037be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ce:	2b04      	cmp	r3, #4
 80037d0:	d117      	bne.n	8003802 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d6:	697a      	ldr	r2, [r7, #20]
 80037d8:	4313      	orrs	r3, r2
 80037da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 fb01 	bl	8003dec <DMA_CheckFifoParam>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d008      	beq.n	8003802 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2240      	movs	r2, #64	@ 0x40
 80037f4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2201      	movs	r2, #1
 80037fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80037fe:	2301      	movs	r3, #1
 8003800:	e016      	b.n	8003830 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fab8 	bl	8003d80 <DMA_CalcBaseAndBitshift>
 8003810:	4603      	mov	r3, r0
 8003812:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003818:	223f      	movs	r2, #63	@ 0x3f
 800381a:	409a      	lsls	r2, r3
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2200      	movs	r2, #0
 8003824:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2201      	movs	r2, #1
 800382a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800382e:	2300      	movs	r3, #0
}
 8003830:	4618      	mov	r0, r3
 8003832:	3718      	adds	r7, #24
 8003834:	46bd      	mov	sp, r7
 8003836:	bd80      	pop	{r7, pc}
 8003838:	f010803f 	.word	0xf010803f

0800383c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b086      	sub	sp, #24
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	607a      	str	r2, [r7, #4]
 8003848:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003852:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_DMA_Start_IT+0x26>
 800385e:	2302      	movs	r3, #2
 8003860:	e040      	b.n	80038e4 <HAL_DMA_Start_IT+0xa8>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	d12f      	bne.n	80038d6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2202      	movs	r2, #2
 800387a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	68b9      	ldr	r1, [r7, #8]
 800388a:	68f8      	ldr	r0, [r7, #12]
 800388c:	f000 fa4a 	bl	8003d24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003894:	223f      	movs	r2, #63	@ 0x3f
 8003896:	409a      	lsls	r2, r3
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681a      	ldr	r2, [r3, #0]
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0216 	orr.w	r2, r2, #22
 80038aa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f042 0208 	orr.w	r2, r2, #8
 80038c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681a      	ldr	r2, [r3, #0]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f042 0201 	orr.w	r2, r2, #1
 80038d2:	601a      	str	r2, [r3, #0]
 80038d4:	e005      	b.n	80038e2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80038de:	2302      	movs	r3, #2
 80038e0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80038e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	3718      	adds	r7, #24
 80038e8:	46bd      	mov	sp, r7
 80038ea:	bd80      	pop	{r7, pc}

080038ec <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80038f8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80038fa:	f7ff fa9f 	bl	8002e3c <HAL_GetTick>
 80038fe:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003906:	b2db      	uxtb	r3, r3
 8003908:	2b02      	cmp	r3, #2
 800390a:	d008      	beq.n	800391e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2280      	movs	r2, #128	@ 0x80
 8003910:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e052      	b.n	80039c4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681a      	ldr	r2, [r3, #0]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f022 0216 	bic.w	r2, r2, #22
 800392c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	695a      	ldr	r2, [r3, #20]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800393c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d103      	bne.n	800394e <HAL_DMA_Abort+0x62>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800394a:	2b00      	cmp	r3, #0
 800394c:	d007      	beq.n	800395e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0208 	bic.w	r2, r2, #8
 800395c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f022 0201 	bic.w	r2, r2, #1
 800396c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396e:	e013      	b.n	8003998 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003970:	f7ff fa64 	bl	8002e3c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b05      	cmp	r3, #5
 800397c:	d90c      	bls.n	8003998 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2203      	movs	r2, #3
 8003988:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003994:	2303      	movs	r3, #3
 8003996:	e015      	b.n	80039c4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d1e4      	bne.n	8003970 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039aa:	223f      	movs	r2, #63	@ 0x3f
 80039ac:	409a      	lsls	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2201      	movs	r2, #1
 80039b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80039c2:	2300      	movs	r3, #0
}
 80039c4:	4618      	mov	r0, r3
 80039c6:	3710      	adds	r7, #16
 80039c8:	46bd      	mov	sp, r7
 80039ca:	bd80      	pop	{r7, pc}

080039cc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039da:	b2db      	uxtb	r3, r3
 80039dc:	2b02      	cmp	r3, #2
 80039de:	d004      	beq.n	80039ea <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2280      	movs	r2, #128	@ 0x80
 80039e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e00c      	b.n	8003a04 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2205      	movs	r2, #5
 80039ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0201 	bic.w	r2, r2, #1
 8003a00:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003a02:	2300      	movs	r3, #0
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a18:	2300      	movs	r3, #0
 8003a1a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a1c:	4b8e      	ldr	r3, [pc, #568]	@ (8003c58 <HAL_DMA_IRQHandler+0x248>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a8e      	ldr	r2, [pc, #568]	@ (8003c5c <HAL_DMA_IRQHandler+0x24c>)
 8003a22:	fba2 2303 	umull	r2, r3, r2, r3
 8003a26:	0a9b      	lsrs	r3, r3, #10
 8003a28:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a2e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3a:	2208      	movs	r2, #8
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4013      	ands	r3, r2
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01a      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d013      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f022 0204 	bic.w	r2, r2, #4
 8003a62:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a68:	2208      	movs	r2, #8
 8003a6a:	409a      	lsls	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a74:	f043 0201 	orr.w	r2, r3, #1
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a80:	2201      	movs	r2, #1
 8003a82:	409a      	lsls	r2, r3
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	4013      	ands	r3, r2
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d012      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d00b      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	f043 0202 	orr.w	r2, r3, #2
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab6:	2204      	movs	r2, #4
 8003ab8:	409a      	lsls	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d012      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f003 0302 	and.w	r3, r3, #2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d00b      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ad4:	2204      	movs	r2, #4
 8003ad6:	409a      	lsls	r2, r3
 8003ad8:	693b      	ldr	r3, [r7, #16]
 8003ada:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ae0:	f043 0204 	orr.w	r2, r3, #4
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aec:	2210      	movs	r2, #16
 8003aee:	409a      	lsls	r2, r3
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	4013      	ands	r3, r2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d043      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d03c      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b0a:	2210      	movs	r2, #16
 8003b0c:	409a      	lsls	r2, r3
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d018      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d108      	bne.n	8003b40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d024      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	4798      	blx	r3
 8003b3e:	e01f      	b.n	8003b80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d01b      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	4798      	blx	r3
 8003b50:	e016      	b.n	8003b80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d107      	bne.n	8003b70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f022 0208 	bic.w	r2, r2, #8
 8003b6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d003      	beq.n	8003b80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b84:	2220      	movs	r2, #32
 8003b86:	409a      	lsls	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	4013      	ands	r3, r2
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 808f 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 0310 	and.w	r3, r3, #16
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8087 	beq.w	8003cb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	409a      	lsls	r2, r3
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	2b05      	cmp	r3, #5
 8003bb8:	d136      	bne.n	8003c28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0216 	bic.w	r2, r2, #22
 8003bc8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	695a      	ldr	r2, [r3, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003bd8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d103      	bne.n	8003bea <HAL_DMA_IRQHandler+0x1da>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d007      	beq.n	8003bfa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f022 0208 	bic.w	r2, r2, #8
 8003bf8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfe:	223f      	movs	r2, #63	@ 0x3f
 8003c00:	409a      	lsls	r2, r3
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2201      	movs	r2, #1
 8003c0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d07e      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	4798      	blx	r3
        }
        return;
 8003c26:	e079      	b.n	8003d1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d01d      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10d      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d031      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c50:	6878      	ldr	r0, [r7, #4]
 8003c52:	4798      	blx	r3
 8003c54:	e02c      	b.n	8003cb0 <HAL_DMA_IRQHandler+0x2a0>
 8003c56:	bf00      	nop
 8003c58:	200000b8 	.word	0x200000b8
 8003c5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d023      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
 8003c70:	e01e      	b.n	8003cb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d10f      	bne.n	8003ca0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0210 	bic.w	r2, r2, #16
 8003c8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d032      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cbc:	f003 0301 	and.w	r3, r3, #1
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d022      	beq.n	8003d0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2205      	movs	r2, #5
 8003cc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	681a      	ldr	r2, [r3, #0]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f022 0201 	bic.w	r2, r2, #1
 8003cda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	60bb      	str	r3, [r7, #8]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	d307      	bcc.n	8003cf8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1f2      	bne.n	8003cdc <HAL_DMA_IRQHandler+0x2cc>
 8003cf6:	e000      	b.n	8003cfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003cf8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d005      	beq.n	8003d1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	4798      	blx	r3
 8003d1a:	e000      	b.n	8003d1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d1c:	bf00      	nop
    }
  }
}
 8003d1e:	3718      	adds	r7, #24
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}

08003d24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
 8003d30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	681a      	ldr	r2, [r3, #0]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003d40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	683a      	ldr	r2, [r7, #0]
 8003d48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	2b40      	cmp	r3, #64	@ 0x40
 8003d50:	d108      	bne.n	8003d64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	68ba      	ldr	r2, [r7, #8]
 8003d60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d62:	e007      	b.n	8003d74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	68ba      	ldr	r2, [r7, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	60da      	str	r2, [r3, #12]
}
 8003d74:	bf00      	nop
 8003d76:	3714      	adds	r7, #20
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b085      	sub	sp, #20
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	b2db      	uxtb	r3, r3
 8003d8e:	3b10      	subs	r3, #16
 8003d90:	4a14      	ldr	r2, [pc, #80]	@ (8003de4 <DMA_CalcBaseAndBitshift+0x64>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	091b      	lsrs	r3, r3, #4
 8003d98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d9a:	4a13      	ldr	r2, [pc, #76]	@ (8003de8 <DMA_CalcBaseAndBitshift+0x68>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	4413      	add	r3, r2
 8003da0:	781b      	ldrb	r3, [r3, #0]
 8003da2:	461a      	mov	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	2b03      	cmp	r3, #3
 8003dac:	d909      	bls.n	8003dc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003db6:	f023 0303 	bic.w	r3, r3, #3
 8003dba:	1d1a      	adds	r2, r3, #4
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003dc0:	e007      	b.n	8003dd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	687a      	ldr	r2, [r7, #4]
 8003dd0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
 8003de2:	bf00      	nop
 8003de4:	aaaaaaab 	.word	0xaaaaaaab
 8003de8:	08009fe4 	.word	0x08009fe4

08003dec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b085      	sub	sp, #20
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003df4:	2300      	movs	r3, #0
 8003df6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d11f      	bne.n	8003e46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b03      	cmp	r3, #3
 8003e0a:	d856      	bhi.n	8003eba <DMA_CheckFifoParam+0xce>
 8003e0c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <DMA_CheckFifoParam+0x28>)
 8003e0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e12:	bf00      	nop
 8003e14:	08003e25 	.word	0x08003e25
 8003e18:	08003e37 	.word	0x08003e37
 8003e1c:	08003e25 	.word	0x08003e25
 8003e20:	08003ebb 	.word	0x08003ebb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d046      	beq.n	8003ebe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e30:	2301      	movs	r3, #1
 8003e32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e34:	e043      	b.n	8003ebe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e3a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e3e:	d140      	bne.n	8003ec2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e44:	e03d      	b.n	8003ec2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	699b      	ldr	r3, [r3, #24]
 8003e4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e4e:	d121      	bne.n	8003e94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	d837      	bhi.n	8003ec6 <DMA_CheckFifoParam+0xda>
 8003e56:	a201      	add	r2, pc, #4	@ (adr r2, 8003e5c <DMA_CheckFifoParam+0x70>)
 8003e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e5c:	08003e6d 	.word	0x08003e6d
 8003e60:	08003e73 	.word	0x08003e73
 8003e64:	08003e6d 	.word	0x08003e6d
 8003e68:	08003e85 	.word	0x08003e85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e70:	e030      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e76:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d025      	beq.n	8003eca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e82:	e022      	b.n	8003eca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e88:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e8c:	d11f      	bne.n	8003ece <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e92:	e01c      	b.n	8003ece <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d903      	bls.n	8003ea2 <DMA_CheckFifoParam+0xb6>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b03      	cmp	r3, #3
 8003e9e:	d003      	beq.n	8003ea8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ea0:	e018      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea6:	e015      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d00e      	beq.n	8003ed2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb8:	e00b      	b.n	8003ed2 <DMA_CheckFifoParam+0xe6>
      break;
 8003eba:	bf00      	nop
 8003ebc:	e00a      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ebe:	bf00      	nop
 8003ec0:	e008      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ec2:	bf00      	nop
 8003ec4:	e006      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e004      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e002      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003ece:	bf00      	nop
 8003ed0:	e000      	b.n	8003ed4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	3714      	adds	r7, #20
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr
 8003ee2:	bf00      	nop

08003ee4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	b089      	sub	sp, #36	@ 0x24
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003efa:	2300      	movs	r3, #0
 8003efc:	61fb      	str	r3, [r7, #28]
 8003efe:	e16b      	b.n	80041d8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f00:	2201      	movs	r2, #1
 8003f02:	69fb      	ldr	r3, [r7, #28]
 8003f04:	fa02 f303 	lsl.w	r3, r2, r3
 8003f08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	4013      	ands	r3, r2
 8003f12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f14:	693a      	ldr	r2, [r7, #16]
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	f040 815a 	bne.w	80041d2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d005      	beq.n	8003f36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d130      	bne.n	8003f98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	005b      	lsls	r3, r3, #1
 8003f40:	2203      	movs	r2, #3
 8003f42:	fa02 f303 	lsl.w	r3, r2, r3
 8003f46:	43db      	mvns	r3, r3
 8003f48:	69ba      	ldr	r2, [r7, #24]
 8003f4a:	4013      	ands	r3, r2
 8003f4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68da      	ldr	r2, [r3, #12]
 8003f52:	69fb      	ldr	r3, [r7, #28]
 8003f54:	005b      	lsls	r3, r3, #1
 8003f56:	fa02 f303 	lsl.w	r3, r2, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4313      	orrs	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	69fb      	ldr	r3, [r7, #28]
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43db      	mvns	r3, r3
 8003f76:	69ba      	ldr	r2, [r7, #24]
 8003f78:	4013      	ands	r3, r2
 8003f7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	091b      	lsrs	r3, r3, #4
 8003f82:	f003 0201 	and.w	r2, r3, #1
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	fa02 f303 	lsl.w	r3, r2, r3
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	f003 0303 	and.w	r3, r3, #3
 8003fa0:	2b03      	cmp	r3, #3
 8003fa2:	d017      	beq.n	8003fd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	68db      	ldr	r3, [r3, #12]
 8003fa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	005b      	lsls	r3, r3, #1
 8003fae:	2203      	movs	r2, #3
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	43db      	mvns	r3, r3
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	4013      	ands	r3, r2
 8003fba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	689a      	ldr	r2, [r3, #8]
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	005b      	lsls	r3, r3, #1
 8003fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc8:	69ba      	ldr	r2, [r7, #24]
 8003fca:	4313      	orrs	r3, r2
 8003fcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f003 0303 	and.w	r3, r3, #3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d123      	bne.n	8004028 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	08da      	lsrs	r2, r3, #3
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3208      	adds	r2, #8
 8003fe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	f003 0307 	and.w	r3, r3, #7
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	220f      	movs	r2, #15
 8003ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	69ba      	ldr	r2, [r7, #24]
 8004000:	4013      	ands	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	691a      	ldr	r2, [r3, #16]
 8004008:	69fb      	ldr	r3, [r7, #28]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	009b      	lsls	r3, r3, #2
 8004010:	fa02 f303 	lsl.w	r3, r2, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4313      	orrs	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800401a:	69fb      	ldr	r3, [r7, #28]
 800401c:	08da      	lsrs	r2, r3, #3
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	3208      	adds	r2, #8
 8004022:	69b9      	ldr	r1, [r7, #24]
 8004024:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800402e:	69fb      	ldr	r3, [r7, #28]
 8004030:	005b      	lsls	r3, r3, #1
 8004032:	2203      	movs	r2, #3
 8004034:	fa02 f303 	lsl.w	r3, r2, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	69ba      	ldr	r2, [r7, #24]
 800403c:	4013      	ands	r3, r2
 800403e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	685b      	ldr	r3, [r3, #4]
 8004044:	f003 0203 	and.w	r2, r3, #3
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	005b      	lsls	r3, r3, #1
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	4313      	orrs	r3, r2
 8004054:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 80b4 	beq.w	80041d2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800406a:	2300      	movs	r3, #0
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	4b60      	ldr	r3, [pc, #384]	@ (80041f0 <HAL_GPIO_Init+0x30c>)
 8004070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004072:	4a5f      	ldr	r2, [pc, #380]	@ (80041f0 <HAL_GPIO_Init+0x30c>)
 8004074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004078:	6453      	str	r3, [r2, #68]	@ 0x44
 800407a:	4b5d      	ldr	r3, [pc, #372]	@ (80041f0 <HAL_GPIO_Init+0x30c>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004086:	4a5b      	ldr	r2, [pc, #364]	@ (80041f4 <HAL_GPIO_Init+0x310>)
 8004088:	69fb      	ldr	r3, [r7, #28]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	3302      	adds	r3, #2
 800408e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004092:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	220f      	movs	r2, #15
 800409e:	fa02 f303 	lsl.w	r3, r2, r3
 80040a2:	43db      	mvns	r3, r3
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4013      	ands	r3, r2
 80040a8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a52      	ldr	r2, [pc, #328]	@ (80041f8 <HAL_GPIO_Init+0x314>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d02b      	beq.n	800410a <HAL_GPIO_Init+0x226>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a51      	ldr	r2, [pc, #324]	@ (80041fc <HAL_GPIO_Init+0x318>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d025      	beq.n	8004106 <HAL_GPIO_Init+0x222>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a50      	ldr	r2, [pc, #320]	@ (8004200 <HAL_GPIO_Init+0x31c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d01f      	beq.n	8004102 <HAL_GPIO_Init+0x21e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4f      	ldr	r2, [pc, #316]	@ (8004204 <HAL_GPIO_Init+0x320>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d019      	beq.n	80040fe <HAL_GPIO_Init+0x21a>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a4e      	ldr	r2, [pc, #312]	@ (8004208 <HAL_GPIO_Init+0x324>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d013      	beq.n	80040fa <HAL_GPIO_Init+0x216>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4a4d      	ldr	r2, [pc, #308]	@ (800420c <HAL_GPIO_Init+0x328>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d00d      	beq.n	80040f6 <HAL_GPIO_Init+0x212>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	4a4c      	ldr	r2, [pc, #304]	@ (8004210 <HAL_GPIO_Init+0x32c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d007      	beq.n	80040f2 <HAL_GPIO_Init+0x20e>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	4a4b      	ldr	r2, [pc, #300]	@ (8004214 <HAL_GPIO_Init+0x330>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d101      	bne.n	80040ee <HAL_GPIO_Init+0x20a>
 80040ea:	2307      	movs	r3, #7
 80040ec:	e00e      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040ee:	2308      	movs	r3, #8
 80040f0:	e00c      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040f2:	2306      	movs	r3, #6
 80040f4:	e00a      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040f6:	2305      	movs	r3, #5
 80040f8:	e008      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040fa:	2304      	movs	r3, #4
 80040fc:	e006      	b.n	800410c <HAL_GPIO_Init+0x228>
 80040fe:	2303      	movs	r3, #3
 8004100:	e004      	b.n	800410c <HAL_GPIO_Init+0x228>
 8004102:	2302      	movs	r3, #2
 8004104:	e002      	b.n	800410c <HAL_GPIO_Init+0x228>
 8004106:	2301      	movs	r3, #1
 8004108:	e000      	b.n	800410c <HAL_GPIO_Init+0x228>
 800410a:	2300      	movs	r3, #0
 800410c:	69fa      	ldr	r2, [r7, #28]
 800410e:	f002 0203 	and.w	r2, r2, #3
 8004112:	0092      	lsls	r2, r2, #2
 8004114:	4093      	lsls	r3, r2
 8004116:	69ba      	ldr	r2, [r7, #24]
 8004118:	4313      	orrs	r3, r2
 800411a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800411c:	4935      	ldr	r1, [pc, #212]	@ (80041f4 <HAL_GPIO_Init+0x310>)
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	089b      	lsrs	r3, r3, #2
 8004122:	3302      	adds	r3, #2
 8004124:	69ba      	ldr	r2, [r7, #24]
 8004126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800412a:	4b3b      	ldr	r3, [pc, #236]	@ (8004218 <HAL_GPIO_Init+0x334>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	43db      	mvns	r3, r3
 8004134:	69ba      	ldr	r2, [r7, #24]
 8004136:	4013      	ands	r3, r2
 8004138:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	4313      	orrs	r3, r2
 800414c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800414e:	4a32      	ldr	r2, [pc, #200]	@ (8004218 <HAL_GPIO_Init+0x334>)
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004154:	4b30      	ldr	r3, [pc, #192]	@ (8004218 <HAL_GPIO_Init+0x334>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	43db      	mvns	r3, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4013      	ands	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	685b      	ldr	r3, [r3, #4]
 8004168:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800416c:	2b00      	cmp	r3, #0
 800416e:	d003      	beq.n	8004178 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004178:	4a27      	ldr	r2, [pc, #156]	@ (8004218 <HAL_GPIO_Init+0x334>)
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800417e:	4b26      	ldr	r3, [pc, #152]	@ (8004218 <HAL_GPIO_Init+0x334>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	43db      	mvns	r3, r3
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	4013      	ands	r3, r2
 800418c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685b      	ldr	r3, [r3, #4]
 8004192:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d003      	beq.n	80041a2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	4313      	orrs	r3, r2
 80041a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80041a2:	4a1d      	ldr	r2, [pc, #116]	@ (8004218 <HAL_GPIO_Init+0x334>)
 80041a4:	69bb      	ldr	r3, [r7, #24]
 80041a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80041a8:	4b1b      	ldr	r3, [pc, #108]	@ (8004218 <HAL_GPIO_Init+0x334>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	43db      	mvns	r3, r3
 80041b2:	69ba      	ldr	r2, [r7, #24]
 80041b4:	4013      	ands	r3, r2
 80041b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041c4:	69ba      	ldr	r2, [r7, #24]
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041cc:	4a12      	ldr	r2, [pc, #72]	@ (8004218 <HAL_GPIO_Init+0x334>)
 80041ce:	69bb      	ldr	r3, [r7, #24]
 80041d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041d2:	69fb      	ldr	r3, [r7, #28]
 80041d4:	3301      	adds	r3, #1
 80041d6:	61fb      	str	r3, [r7, #28]
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	2b0f      	cmp	r3, #15
 80041dc:	f67f ae90 	bls.w	8003f00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041e0:	bf00      	nop
 80041e2:	bf00      	nop
 80041e4:	3724      	adds	r7, #36	@ 0x24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40013800 	.word	0x40013800
 80041f8:	40020000 	.word	0x40020000
 80041fc:	40020400 	.word	0x40020400
 8004200:	40020800 	.word	0x40020800
 8004204:	40020c00 	.word	0x40020c00
 8004208:	40021000 	.word	0x40021000
 800420c:	40021400 	.word	0x40021400
 8004210:	40021800 	.word	0x40021800
 8004214:	40021c00 	.word	0x40021c00
 8004218:	40013c00 	.word	0x40013c00

0800421c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	460b      	mov	r3, r1
 8004226:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	691a      	ldr	r2, [r3, #16]
 800422c:	887b      	ldrh	r3, [r7, #2]
 800422e:	4013      	ands	r3, r2
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004234:	2301      	movs	r3, #1
 8004236:	73fb      	strb	r3, [r7, #15]
 8004238:	e001      	b.n	800423e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800423e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004240:	4618      	mov	r0, r3
 8004242:	3714      	adds	r7, #20
 8004244:	46bd      	mov	sp, r7
 8004246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424a:	4770      	bx	lr

0800424c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	460b      	mov	r3, r1
 8004256:	807b      	strh	r3, [r7, #2]
 8004258:	4613      	mov	r3, r2
 800425a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800425c:	787b      	ldrb	r3, [r7, #1]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d003      	beq.n	800426a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004268:	e003      	b.n	8004272 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800426a:	887b      	ldrh	r3, [r7, #2]
 800426c:	041a      	lsls	r2, r3, #16
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	619a      	str	r2, [r3, #24]
}
 8004272:	bf00      	nop
 8004274:	370c      	adds	r7, #12
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
	...

08004280 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b082      	sub	sp, #8
 8004284:	af00      	add	r7, sp, #0
 8004286:	4603      	mov	r3, r0
 8004288:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800428a:	4b08      	ldr	r3, [pc, #32]	@ (80042ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800428c:	695a      	ldr	r2, [r3, #20]
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	4013      	ands	r3, r2
 8004292:	2b00      	cmp	r3, #0
 8004294:	d006      	beq.n	80042a4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004296:	4a05      	ldr	r2, [pc, #20]	@ (80042ac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004298:	88fb      	ldrh	r3, [r7, #6]
 800429a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800429c:	88fb      	ldrh	r3, [r7, #6]
 800429e:	4618      	mov	r0, r3
 80042a0:	f000 f806 	bl	80042b0 <HAL_GPIO_EXTI_Callback>
  }
}
 80042a4:	bf00      	nop
 80042a6:	3708      	adds	r7, #8
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}
 80042ac:	40013c00 	.word	0x40013c00

080042b0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b084      	sub	sp, #16
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d101      	bne.n	80042da <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e12b      	b.n	8004532 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ee:	6878      	ldr	r0, [r7, #4]
 80042f0:	f7fd ff68 	bl	80021c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2224      	movs	r2, #36	@ 0x24
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800431a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	681a      	ldr	r2, [r3, #0]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800432a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800432c:	f000 fd4c 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8004330:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	4a81      	ldr	r2, [pc, #516]	@ (800453c <HAL_I2C_Init+0x274>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d807      	bhi.n	800434c <HAL_I2C_Init+0x84>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	4a80      	ldr	r2, [pc, #512]	@ (8004540 <HAL_I2C_Init+0x278>)
 8004340:	4293      	cmp	r3, r2
 8004342:	bf94      	ite	ls
 8004344:	2301      	movls	r3, #1
 8004346:	2300      	movhi	r3, #0
 8004348:	b2db      	uxtb	r3, r3
 800434a:	e006      	b.n	800435a <HAL_I2C_Init+0x92>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4a7d      	ldr	r2, [pc, #500]	@ (8004544 <HAL_I2C_Init+0x27c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	bf94      	ite	ls
 8004354:	2301      	movls	r3, #1
 8004356:	2300      	movhi	r3, #0
 8004358:	b2db      	uxtb	r3, r3
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e0e7      	b.n	8004532 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	4a78      	ldr	r2, [pc, #480]	@ (8004548 <HAL_I2C_Init+0x280>)
 8004366:	fba2 2303 	umull	r2, r3, r2, r3
 800436a:	0c9b      	lsrs	r3, r3, #18
 800436c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	430a      	orrs	r2, r1
 8004380:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	4a6a      	ldr	r2, [pc, #424]	@ (800453c <HAL_I2C_Init+0x274>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d802      	bhi.n	800439c <HAL_I2C_Init+0xd4>
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	3301      	adds	r3, #1
 800439a:	e009      	b.n	80043b0 <HAL_I2C_Init+0xe8>
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80043a2:	fb02 f303 	mul.w	r3, r2, r3
 80043a6:	4a69      	ldr	r2, [pc, #420]	@ (800454c <HAL_I2C_Init+0x284>)
 80043a8:	fba2 2303 	umull	r2, r3, r2, r3
 80043ac:	099b      	lsrs	r3, r3, #6
 80043ae:	3301      	adds	r3, #1
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	6812      	ldr	r2, [r2, #0]
 80043b4:	430b      	orrs	r3, r1
 80043b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	69db      	ldr	r3, [r3, #28]
 80043be:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80043c2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	495c      	ldr	r1, [pc, #368]	@ (800453c <HAL_I2C_Init+0x274>)
 80043cc:	428b      	cmp	r3, r1
 80043ce:	d819      	bhi.n	8004404 <HAL_I2C_Init+0x13c>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1e59      	subs	r1, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	005b      	lsls	r3, r3, #1
 80043da:	fbb1 f3f3 	udiv	r3, r1, r3
 80043de:	1c59      	adds	r1, r3, #1
 80043e0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043e4:	400b      	ands	r3, r1
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00a      	beq.n	8004400 <HAL_I2C_Init+0x138>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1e59      	subs	r1, r3, #1
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80043f8:	3301      	adds	r3, #1
 80043fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043fe:	e051      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 8004400:	2304      	movs	r3, #4
 8004402:	e04f      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d111      	bne.n	8004430 <HAL_I2C_Init+0x168>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	005b      	lsls	r3, r3, #1
 8004418:	440b      	add	r3, r1
 800441a:	fbb0 f3f3 	udiv	r3, r0, r3
 800441e:	3301      	adds	r3, #1
 8004420:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004424:	2b00      	cmp	r3, #0
 8004426:	bf0c      	ite	eq
 8004428:	2301      	moveq	r3, #1
 800442a:	2300      	movne	r3, #0
 800442c:	b2db      	uxtb	r3, r3
 800442e:	e012      	b.n	8004456 <HAL_I2C_Init+0x18e>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	1e58      	subs	r0, r3, #1
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6859      	ldr	r1, [r3, #4]
 8004438:	460b      	mov	r3, r1
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	440b      	add	r3, r1
 800443e:	0099      	lsls	r1, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	fbb0 f3f3 	udiv	r3, r0, r3
 8004446:	3301      	adds	r3, #1
 8004448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800444c:	2b00      	cmp	r3, #0
 800444e:	bf0c      	ite	eq
 8004450:	2301      	moveq	r3, #1
 8004452:	2300      	movne	r3, #0
 8004454:	b2db      	uxtb	r3, r3
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <HAL_I2C_Init+0x196>
 800445a:	2301      	movs	r3, #1
 800445c:	e022      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	689b      	ldr	r3, [r3, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10e      	bne.n	8004484 <HAL_I2C_Init+0x1bc>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1e58      	subs	r0, r3, #1
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6859      	ldr	r1, [r3, #4]
 800446e:	460b      	mov	r3, r1
 8004470:	005b      	lsls	r3, r3, #1
 8004472:	440b      	add	r3, r1
 8004474:	fbb0 f3f3 	udiv	r3, r0, r3
 8004478:	3301      	adds	r3, #1
 800447a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004482:	e00f      	b.n	80044a4 <HAL_I2C_Init+0x1dc>
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	1e58      	subs	r0, r3, #1
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6859      	ldr	r1, [r3, #4]
 800448c:	460b      	mov	r3, r1
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	440b      	add	r3, r1
 8004492:	0099      	lsls	r1, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	fbb0 f3f3 	udiv	r3, r0, r3
 800449a:	3301      	adds	r3, #1
 800449c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044a0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80044a4:	6879      	ldr	r1, [r7, #4]
 80044a6:	6809      	ldr	r1, [r1, #0]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69da      	ldr	r2, [r3, #28]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	431a      	orrs	r2, r3
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	6911      	ldr	r1, [r2, #16]
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	68d2      	ldr	r2, [r2, #12]
 80044de:	4311      	orrs	r1, r2
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	6812      	ldr	r2, [r2, #0]
 80044e4:	430b      	orrs	r3, r1
 80044e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	695a      	ldr	r2, [r3, #20]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	699b      	ldr	r3, [r3, #24]
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	681a      	ldr	r2, [r3, #0]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0201 	orr.w	r2, r2, #1
 8004512:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2200      	movs	r2, #0
 8004518:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2220      	movs	r2, #32
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3710      	adds	r7, #16
 8004536:	46bd      	mov	sp, r7
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	000186a0 	.word	0x000186a0
 8004540:	001e847f 	.word	0x001e847f
 8004544:	003d08ff 	.word	0x003d08ff
 8004548:	431bde83 	.word	0x431bde83
 800454c:	10624dd3 	.word	0x10624dd3

08004550 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b086      	sub	sp, #24
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e267      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d075      	beq.n	800465a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800456e:	4b88      	ldr	r3, [pc, #544]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
 8004576:	2b04      	cmp	r3, #4
 8004578:	d00c      	beq.n	8004594 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800457a:	4b85      	ldr	r3, [pc, #532]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004582:	2b08      	cmp	r3, #8
 8004584:	d112      	bne.n	80045ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004586:	4b82      	ldr	r3, [pc, #520]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004592:	d10b      	bne.n	80045ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004594:	4b7e      	ldr	r3, [pc, #504]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800459c:	2b00      	cmp	r3, #0
 800459e:	d05b      	beq.n	8004658 <HAL_RCC_OscConfig+0x108>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d157      	bne.n	8004658 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e242      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b4:	d106      	bne.n	80045c4 <HAL_RCC_OscConfig+0x74>
 80045b6:	4b76      	ldr	r3, [pc, #472]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a75      	ldr	r2, [pc, #468]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045c0:	6013      	str	r3, [r2, #0]
 80045c2:	e01d      	b.n	8004600 <HAL_RCC_OscConfig+0xb0>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045cc:	d10c      	bne.n	80045e8 <HAL_RCC_OscConfig+0x98>
 80045ce:	4b70      	ldr	r3, [pc, #448]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a6f      	ldr	r2, [pc, #444]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	4b6d      	ldr	r3, [pc, #436]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4a6c      	ldr	r2, [pc, #432]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e4:	6013      	str	r3, [r2, #0]
 80045e6:	e00b      	b.n	8004600 <HAL_RCC_OscConfig+0xb0>
 80045e8:	4b69      	ldr	r3, [pc, #420]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a68      	ldr	r2, [pc, #416]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045f2:	6013      	str	r3, [r2, #0]
 80045f4:	4b66      	ldr	r3, [pc, #408]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a65      	ldr	r2, [pc, #404]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80045fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d013      	beq.n	8004630 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fe fc18 	bl	8002e3c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fe fc14 	bl	8002e3c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	@ 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e207      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004622:	4b5b      	ldr	r3, [pc, #364]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0f0      	beq.n	8004610 <HAL_RCC_OscConfig+0xc0>
 800462e:	e014      	b.n	800465a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004630:	f7fe fc04 	bl	8002e3c <HAL_GetTick>
 8004634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004636:	e008      	b.n	800464a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004638:	f7fe fc00 	bl	8002e3c <HAL_GetTick>
 800463c:	4602      	mov	r2, r0
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	1ad3      	subs	r3, r2, r3
 8004642:	2b64      	cmp	r3, #100	@ 0x64
 8004644:	d901      	bls.n	800464a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004646:	2303      	movs	r3, #3
 8004648:	e1f3      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800464a:	4b51      	ldr	r3, [pc, #324]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d1f0      	bne.n	8004638 <HAL_RCC_OscConfig+0xe8>
 8004656:	e000      	b.n	800465a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004658:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d063      	beq.n	800472e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004666:	4b4a      	ldr	r3, [pc, #296]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	f003 030c 	and.w	r3, r3, #12
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00b      	beq.n	800468a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004672:	4b47      	ldr	r3, [pc, #284]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800467a:	2b08      	cmp	r3, #8
 800467c:	d11c      	bne.n	80046b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467e:	4b44      	ldr	r3, [pc, #272]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d116      	bne.n	80046b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468a:	4b41      	ldr	r3, [pc, #260]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d005      	beq.n	80046a2 <HAL_RCC_OscConfig+0x152>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	2b01      	cmp	r3, #1
 800469c:	d001      	beq.n	80046a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e1c7      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046a2:	4b3b      	ldr	r3, [pc, #236]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4937      	ldr	r1, [pc, #220]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b6:	e03a      	b.n	800472e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d020      	beq.n	8004702 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046c0:	4b34      	ldr	r3, [pc, #208]	@ (8004794 <HAL_RCC_OscConfig+0x244>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c6:	f7fe fbb9 	bl	8002e3c <HAL_GetTick>
 80046ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046cc:	e008      	b.n	80046e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046ce:	f7fe fbb5 	bl	8002e3c <HAL_GetTick>
 80046d2:	4602      	mov	r2, r0
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	1ad3      	subs	r3, r2, r3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e1a8      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046e0:	4b2b      	ldr	r3, [pc, #172]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d0f0      	beq.n	80046ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046ec:	4b28      	ldr	r3, [pc, #160]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	00db      	lsls	r3, r3, #3
 80046fa:	4925      	ldr	r1, [pc, #148]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 80046fc:	4313      	orrs	r3, r2
 80046fe:	600b      	str	r3, [r1, #0]
 8004700:	e015      	b.n	800472e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004702:	4b24      	ldr	r3, [pc, #144]	@ (8004794 <HAL_RCC_OscConfig+0x244>)
 8004704:	2200      	movs	r2, #0
 8004706:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004708:	f7fe fb98 	bl	8002e3c <HAL_GetTick>
 800470c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470e:	e008      	b.n	8004722 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004710:	f7fe fb94 	bl	8002e3c <HAL_GetTick>
 8004714:	4602      	mov	r2, r0
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	1ad3      	subs	r3, r2, r3
 800471a:	2b02      	cmp	r3, #2
 800471c:	d901      	bls.n	8004722 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800471e:	2303      	movs	r3, #3
 8004720:	e187      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004722:	4b1b      	ldr	r3, [pc, #108]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f003 0302 	and.w	r3, r3, #2
 800472a:	2b00      	cmp	r3, #0
 800472c:	d1f0      	bne.n	8004710 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d036      	beq.n	80047a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d016      	beq.n	8004770 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004742:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <HAL_RCC_OscConfig+0x248>)
 8004744:	2201      	movs	r2, #1
 8004746:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004748:	f7fe fb78 	bl	8002e3c <HAL_GetTick>
 800474c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474e:	e008      	b.n	8004762 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004750:	f7fe fb74 	bl	8002e3c <HAL_GetTick>
 8004754:	4602      	mov	r2, r0
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	1ad3      	subs	r3, r2, r3
 800475a:	2b02      	cmp	r3, #2
 800475c:	d901      	bls.n	8004762 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800475e:	2303      	movs	r3, #3
 8004760:	e167      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004762:	4b0b      	ldr	r3, [pc, #44]	@ (8004790 <HAL_RCC_OscConfig+0x240>)
 8004764:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b00      	cmp	r3, #0
 800476c:	d0f0      	beq.n	8004750 <HAL_RCC_OscConfig+0x200>
 800476e:	e01b      	b.n	80047a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004770:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <HAL_RCC_OscConfig+0x248>)
 8004772:	2200      	movs	r2, #0
 8004774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004776:	f7fe fb61 	bl	8002e3c <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800477c:	e00e      	b.n	800479c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800477e:	f7fe fb5d 	bl	8002e3c <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d907      	bls.n	800479c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e150      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
 8004790:	40023800 	.word	0x40023800
 8004794:	42470000 	.word	0x42470000
 8004798:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800479c:	4b88      	ldr	r3, [pc, #544]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800479e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047a0:	f003 0302 	and.w	r3, r3, #2
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1ea      	bne.n	800477e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8097 	beq.w	80048e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047ba:	4b81      	ldr	r3, [pc, #516]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d10f      	bne.n	80047e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c6:	2300      	movs	r3, #0
 80047c8:	60bb      	str	r3, [r7, #8]
 80047ca:	4b7d      	ldr	r3, [pc, #500]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	4a7c      	ldr	r2, [pc, #496]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d6:	4b7a      	ldr	r3, [pc, #488]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80047d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047de:	60bb      	str	r3, [r7, #8]
 80047e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047e2:	2301      	movs	r3, #1
 80047e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e6:	4b77      	ldr	r3, [pc, #476]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d118      	bne.n	8004824 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047f2:	4b74      	ldr	r3, [pc, #464]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a73      	ldr	r2, [pc, #460]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 80047f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fe:	f7fe fb1d 	bl	8002e3c <HAL_GetTick>
 8004802:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004804:	e008      	b.n	8004818 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004806:	f7fe fb19 	bl	8002e3c <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	2b02      	cmp	r3, #2
 8004812:	d901      	bls.n	8004818 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004814:	2303      	movs	r3, #3
 8004816:	e10c      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004818:	4b6a      	ldr	r3, [pc, #424]	@ (80049c4 <HAL_RCC_OscConfig+0x474>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004820:	2b00      	cmp	r3, #0
 8004822:	d0f0      	beq.n	8004806 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d106      	bne.n	800483a <HAL_RCC_OscConfig+0x2ea>
 800482c:	4b64      	ldr	r3, [pc, #400]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800482e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004830:	4a63      	ldr	r2, [pc, #396]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004832:	f043 0301 	orr.w	r3, r3, #1
 8004836:	6713      	str	r3, [r2, #112]	@ 0x70
 8004838:	e01c      	b.n	8004874 <HAL_RCC_OscConfig+0x324>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	2b05      	cmp	r3, #5
 8004840:	d10c      	bne.n	800485c <HAL_RCC_OscConfig+0x30c>
 8004842:	4b5f      	ldr	r3, [pc, #380]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004844:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004846:	4a5e      	ldr	r2, [pc, #376]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004848:	f043 0304 	orr.w	r3, r3, #4
 800484c:	6713      	str	r3, [r2, #112]	@ 0x70
 800484e:	4b5c      	ldr	r3, [pc, #368]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004852:	4a5b      	ldr	r2, [pc, #364]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004854:	f043 0301 	orr.w	r3, r3, #1
 8004858:	6713      	str	r3, [r2, #112]	@ 0x70
 800485a:	e00b      	b.n	8004874 <HAL_RCC_OscConfig+0x324>
 800485c:	4b58      	ldr	r3, [pc, #352]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800485e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004860:	4a57      	ldr	r2, [pc, #348]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004862:	f023 0301 	bic.w	r3, r3, #1
 8004866:	6713      	str	r3, [r2, #112]	@ 0x70
 8004868:	4b55      	ldr	r3, [pc, #340]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	4a54      	ldr	r2, [pc, #336]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800486e:	f023 0304 	bic.w	r3, r3, #4
 8004872:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d015      	beq.n	80048a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800487c:	f7fe fade 	bl	8002e3c <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004882:	e00a      	b.n	800489a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004884:	f7fe fada 	bl	8002e3c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004892:	4293      	cmp	r3, r2
 8004894:	d901      	bls.n	800489a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004896:	2303      	movs	r3, #3
 8004898:	e0cb      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800489a:	4b49      	ldr	r3, [pc, #292]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800489c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d0ee      	beq.n	8004884 <HAL_RCC_OscConfig+0x334>
 80048a6:	e014      	b.n	80048d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a8:	f7fe fac8 	bl	8002e3c <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048ae:	e00a      	b.n	80048c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048b0:	f7fe fac4 	bl	8002e3c <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048be:	4293      	cmp	r3, r2
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e0b5      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c6:	4b3e      	ldr	r3, [pc, #248]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048ca:	f003 0302 	and.w	r3, r3, #2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1ee      	bne.n	80048b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048d2:	7dfb      	ldrb	r3, [r7, #23]
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d105      	bne.n	80048e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d8:	4b39      	ldr	r3, [pc, #228]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048dc:	4a38      	ldr	r2, [pc, #224]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	f000 80a1 	beq.w	8004a30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ee:	4b34      	ldr	r3, [pc, #208]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	f003 030c 	and.w	r3, r3, #12
 80048f6:	2b08      	cmp	r3, #8
 80048f8:	d05c      	beq.n	80049b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	2b02      	cmp	r3, #2
 8004900:	d141      	bne.n	8004986 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004902:	4b31      	ldr	r3, [pc, #196]	@ (80049c8 <HAL_RCC_OscConfig+0x478>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004908:	f7fe fa98 	bl	8002e3c <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004910:	f7fe fa94 	bl	8002e3c <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e087      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004922:	4b27      	ldr	r3, [pc, #156]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	69da      	ldr	r2, [r3, #28]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	431a      	orrs	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800493c:	019b      	lsls	r3, r3, #6
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004944:	085b      	lsrs	r3, r3, #1
 8004946:	3b01      	subs	r3, #1
 8004948:	041b      	lsls	r3, r3, #16
 800494a:	431a      	orrs	r2, r3
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004950:	061b      	lsls	r3, r3, #24
 8004952:	491b      	ldr	r1, [pc, #108]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 8004954:	4313      	orrs	r3, r2
 8004956:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004958:	4b1b      	ldr	r3, [pc, #108]	@ (80049c8 <HAL_RCC_OscConfig+0x478>)
 800495a:	2201      	movs	r2, #1
 800495c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495e:	f7fe fa6d 	bl	8002e3c <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004966:	f7fe fa69 	bl	8002e3c <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e05c      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004978:	4b11      	ldr	r3, [pc, #68]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x416>
 8004984:	e054      	b.n	8004a30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004986:	4b10      	ldr	r3, [pc, #64]	@ (80049c8 <HAL_RCC_OscConfig+0x478>)
 8004988:	2200      	movs	r2, #0
 800498a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800498c:	f7fe fa56 	bl	8002e3c <HAL_GetTick>
 8004990:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004992:	e008      	b.n	80049a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004994:	f7fe fa52 	bl	8002e3c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d901      	bls.n	80049a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	e045      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a6:	4b06      	ldr	r3, [pc, #24]	@ (80049c0 <HAL_RCC_OscConfig+0x470>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1f0      	bne.n	8004994 <HAL_RCC_OscConfig+0x444>
 80049b2:	e03d      	b.n	8004a30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e038      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
 80049c0:	40023800 	.word	0x40023800
 80049c4:	40007000 	.word	0x40007000
 80049c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049cc:	4b1b      	ldr	r3, [pc, #108]	@ (8004a3c <HAL_RCC_OscConfig+0x4ec>)
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	699b      	ldr	r3, [r3, #24]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d028      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d121      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d11a      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049fc:	4013      	ands	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004a02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a04:	4293      	cmp	r3, r2
 8004a06:	d111      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a12:	085b      	lsrs	r3, r3, #1
 8004a14:	3b01      	subs	r3, #1
 8004a16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d107      	bne.n	8004a2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d001      	beq.n	8004a30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e000      	b.n	8004a32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3718      	adds	r7, #24
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40023800 	.word	0x40023800

08004a40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0cc      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a54:	4b68      	ldr	r3, [pc, #416]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0307 	and.w	r3, r3, #7
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d90c      	bls.n	8004a7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b65      	ldr	r3, [pc, #404]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	b2d2      	uxtb	r2, r2
 8004a68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a6a:	4b63      	ldr	r3, [pc, #396]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0307 	and.w	r3, r3, #7
 8004a72:	683a      	ldr	r2, [r7, #0]
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d001      	beq.n	8004a7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a78:	2301      	movs	r3, #1
 8004a7a:	e0b8      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f003 0302 	and.w	r3, r3, #2
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d020      	beq.n	8004aca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f003 0304 	and.w	r3, r3, #4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a94:	4b59      	ldr	r3, [pc, #356]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	4a58      	ldr	r2, [pc, #352]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004a9a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f003 0308 	and.w	r3, r3, #8
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d005      	beq.n	8004ab8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aac:	4b53      	ldr	r3, [pc, #332]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	689b      	ldr	r3, [r3, #8]
 8004ab0:	4a52      	ldr	r2, [pc, #328]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ab2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ab6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab8:	4b50      	ldr	r3, [pc, #320]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	689b      	ldr	r3, [r3, #8]
 8004ac4:	494d      	ldr	r1, [pc, #308]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ac6:	4313      	orrs	r3, r2
 8004ac8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d044      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d107      	bne.n	8004aee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ade:	4b47      	ldr	r3, [pc, #284]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d119      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e07f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d003      	beq.n	8004afe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004afa:	2b03      	cmp	r3, #3
 8004afc:	d107      	bne.n	8004b0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afe:	4b3f      	ldr	r3, [pc, #252]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e06f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0e:	4b3b      	ldr	r3, [pc, #236]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f003 0302 	and.w	r3, r3, #2
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d101      	bne.n	8004b1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b1a:	2301      	movs	r3, #1
 8004b1c:	e067      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1e:	4b37      	ldr	r3, [pc, #220]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	f023 0203 	bic.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	4934      	ldr	r1, [pc, #208]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b2c:	4313      	orrs	r3, r2
 8004b2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b30:	f7fe f984 	bl	8002e3c <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b36:	e00a      	b.n	8004b4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b38:	f7fe f980 	bl	8002e3c <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d901      	bls.n	8004b4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b4a:	2303      	movs	r3, #3
 8004b4c:	e04f      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4e:	4b2b      	ldr	r3, [pc, #172]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 020c 	and.w	r2, r3, #12
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d1eb      	bne.n	8004b38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b60:	4b25      	ldr	r3, [pc, #148]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0307 	and.w	r3, r3, #7
 8004b68:	683a      	ldr	r2, [r7, #0]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d20c      	bcs.n	8004b88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6e:	4b22      	ldr	r3, [pc, #136]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b76:	4b20      	ldr	r3, [pc, #128]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f003 0307 	and.w	r3, r3, #7
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d001      	beq.n	8004b88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b84:	2301      	movs	r3, #1
 8004b86:	e032      	b.n	8004bee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0304 	and.w	r3, r3, #4
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d008      	beq.n	8004ba6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b94:	4b19      	ldr	r3, [pc, #100]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	68db      	ldr	r3, [r3, #12]
 8004ba0:	4916      	ldr	r1, [pc, #88]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0308 	and.w	r3, r3, #8
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d009      	beq.n	8004bc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bb2:	4b12      	ldr	r3, [pc, #72]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	00db      	lsls	r3, r3, #3
 8004bc0:	490e      	ldr	r1, [pc, #56]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bc2:	4313      	orrs	r3, r2
 8004bc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004bc6:	f000 f82d 	bl	8004c24 <HAL_RCC_GetSysClockFreq>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8004bfc <HAL_RCC_ClockConfig+0x1bc>)
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	091b      	lsrs	r3, r3, #4
 8004bd2:	f003 030f 	and.w	r3, r3, #15
 8004bd6:	490a      	ldr	r1, [pc, #40]	@ (8004c00 <HAL_RCC_ClockConfig+0x1c0>)
 8004bd8:	5ccb      	ldrb	r3, [r1, r3]
 8004bda:	fa22 f303 	lsr.w	r3, r2, r3
 8004bde:	4a09      	ldr	r2, [pc, #36]	@ (8004c04 <HAL_RCC_ClockConfig+0x1c4>)
 8004be0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004be2:	4b09      	ldr	r3, [pc, #36]	@ (8004c08 <HAL_RCC_ClockConfig+0x1c8>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f7fe f8e4 	bl	8002db4 <HAL_InitTick>

  return HAL_OK;
 8004bec:	2300      	movs	r3, #0
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	40023c00 	.word	0x40023c00
 8004bfc:	40023800 	.word	0x40023800
 8004c00:	08009fcc 	.word	0x08009fcc
 8004c04:	200000b8 	.word	0x200000b8
 8004c08:	200000bc 	.word	0x200000bc

08004c0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004c10:	4b03      	ldr	r3, [pc, #12]	@ (8004c20 <HAL_RCC_EnableCSS+0x14>)
 8004c12:	2201      	movs	r2, #1
 8004c14:	601a      	str	r2, [r3, #0]
}
 8004c16:	bf00      	nop
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	4247004c 	.word	0x4247004c

08004c24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c28:	b090      	sub	sp, #64	@ 0x40
 8004c2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c30:	2300      	movs	r3, #0
 8004c32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c34:	2300      	movs	r3, #0
 8004c36:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c3c:	4b59      	ldr	r3, [pc, #356]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	f003 030c 	and.w	r3, r3, #12
 8004c44:	2b08      	cmp	r3, #8
 8004c46:	d00d      	beq.n	8004c64 <HAL_RCC_GetSysClockFreq+0x40>
 8004c48:	2b08      	cmp	r3, #8
 8004c4a:	f200 80a1 	bhi.w	8004d90 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d002      	beq.n	8004c58 <HAL_RCC_GetSysClockFreq+0x34>
 8004c52:	2b04      	cmp	r3, #4
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c56:	e09b      	b.n	8004d90 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c58:	4b53      	ldr	r3, [pc, #332]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c5a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004c5c:	e09b      	b.n	8004d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c5e:	4b53      	ldr	r3, [pc, #332]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x188>)
 8004c60:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c62:	e098      	b.n	8004d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c64:	4b4f      	ldr	r3, [pc, #316]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c66:	685b      	ldr	r3, [r3, #4]
 8004c68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c6c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c6e:	4b4d      	ldr	r3, [pc, #308]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d028      	beq.n	8004ccc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c7a:	4b4a      	ldr	r3, [pc, #296]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	099b      	lsrs	r3, r3, #6
 8004c80:	2200      	movs	r2, #0
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c8c:	2100      	movs	r1, #0
 8004c8e:	4b47      	ldr	r3, [pc, #284]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x188>)
 8004c90:	fb03 f201 	mul.w	r2, r3, r1
 8004c94:	2300      	movs	r3, #0
 8004c96:	fb00 f303 	mul.w	r3, r0, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	4a43      	ldr	r2, [pc, #268]	@ (8004dac <HAL_RCC_GetSysClockFreq+0x188>)
 8004c9e:	fba0 1202 	umull	r1, r2, r0, r2
 8004ca2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ca4:	460a      	mov	r2, r1
 8004ca6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004ca8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004caa:	4413      	add	r3, r2
 8004cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004cae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	61bb      	str	r3, [r7, #24]
 8004cb4:	61fa      	str	r2, [r7, #28]
 8004cb6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cba:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004cbe:	f7fb fa87 	bl	80001d0 <__aeabi_uldivmod>
 8004cc2:	4602      	mov	r2, r0
 8004cc4:	460b      	mov	r3, r1
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cca:	e053      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ccc:	4b35      	ldr	r3, [pc, #212]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cce:	685b      	ldr	r3, [r3, #4]
 8004cd0:	099b      	lsrs	r3, r3, #6
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	613b      	str	r3, [r7, #16]
 8004cd6:	617a      	str	r2, [r7, #20]
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cde:	f04f 0b00 	mov.w	fp, #0
 8004ce2:	4652      	mov	r2, sl
 8004ce4:	465b      	mov	r3, fp
 8004ce6:	f04f 0000 	mov.w	r0, #0
 8004cea:	f04f 0100 	mov.w	r1, #0
 8004cee:	0159      	lsls	r1, r3, #5
 8004cf0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cf4:	0150      	lsls	r0, r2, #5
 8004cf6:	4602      	mov	r2, r0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	ebb2 080a 	subs.w	r8, r2, sl
 8004cfe:	eb63 090b 	sbc.w	r9, r3, fp
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004d0e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004d12:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004d16:	ebb2 0408 	subs.w	r4, r2, r8
 8004d1a:	eb63 0509 	sbc.w	r5, r3, r9
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	00eb      	lsls	r3, r5, #3
 8004d28:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d2c:	00e2      	lsls	r2, r4, #3
 8004d2e:	4614      	mov	r4, r2
 8004d30:	461d      	mov	r5, r3
 8004d32:	eb14 030a 	adds.w	r3, r4, sl
 8004d36:	603b      	str	r3, [r7, #0]
 8004d38:	eb45 030b 	adc.w	r3, r5, fp
 8004d3c:	607b      	str	r3, [r7, #4]
 8004d3e:	f04f 0200 	mov.w	r2, #0
 8004d42:	f04f 0300 	mov.w	r3, #0
 8004d46:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d4a:	4629      	mov	r1, r5
 8004d4c:	028b      	lsls	r3, r1, #10
 8004d4e:	4621      	mov	r1, r4
 8004d50:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d54:	4621      	mov	r1, r4
 8004d56:	028a      	lsls	r2, r1, #10
 8004d58:	4610      	mov	r0, r2
 8004d5a:	4619      	mov	r1, r3
 8004d5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d5e:	2200      	movs	r2, #0
 8004d60:	60bb      	str	r3, [r7, #8]
 8004d62:	60fa      	str	r2, [r7, #12]
 8004d64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d68:	f7fb fa32 	bl	80001d0 <__aeabi_uldivmod>
 8004d6c:	4602      	mov	r2, r0
 8004d6e:	460b      	mov	r3, r1
 8004d70:	4613      	mov	r3, r2
 8004d72:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d74:	4b0b      	ldr	r3, [pc, #44]	@ (8004da4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	0c1b      	lsrs	r3, r3, #16
 8004d7a:	f003 0303 	and.w	r3, r3, #3
 8004d7e:	3301      	adds	r3, #1
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004d84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d8e:	e002      	b.n	8004d96 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d90:	4b05      	ldr	r3, [pc, #20]	@ (8004da8 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d92:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3740      	adds	r7, #64	@ 0x40
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004da2:	bf00      	nop
 8004da4:	40023800 	.word	0x40023800
 8004da8:	00f42400 	.word	0x00f42400
 8004dac:	00b71b00 	.word	0x00b71b00

08004db0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004db4:	4b03      	ldr	r3, [pc, #12]	@ (8004dc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004db6:	681b      	ldr	r3, [r3, #0]
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc0:	4770      	bx	lr
 8004dc2:	bf00      	nop
 8004dc4:	200000b8 	.word	0x200000b8

08004dc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004dcc:	f7ff fff0 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	4b05      	ldr	r3, [pc, #20]	@ (8004de8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0a9b      	lsrs	r3, r3, #10
 8004dd8:	f003 0307 	and.w	r3, r3, #7
 8004ddc:	4903      	ldr	r1, [pc, #12]	@ (8004dec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dde:	5ccb      	ldrb	r3, [r1, r3]
 8004de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	40023800 	.word	0x40023800
 8004dec:	08009fdc 	.word	0x08009fdc

08004df0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004df4:	f7ff ffdc 	bl	8004db0 <HAL_RCC_GetHCLKFreq>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	0b5b      	lsrs	r3, r3, #13
 8004e00:	f003 0307 	and.w	r3, r3, #7
 8004e04:	4903      	ldr	r1, [pc, #12]	@ (8004e14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e06:	5ccb      	ldrb	r3, [r1, r3]
 8004e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	bd80      	pop	{r7, pc}
 8004e10:	40023800 	.word	0x40023800
 8004e14:	08009fdc 	.word	0x08009fdc

08004e18 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004e1c:	4b06      	ldr	r3, [pc, #24]	@ (8004e38 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004e1e:	68db      	ldr	r3, [r3, #12]
 8004e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e24:	2b80      	cmp	r3, #128	@ 0x80
 8004e26:	d104      	bne.n	8004e32 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004e28:	f000 f80a 	bl	8004e40 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004e2c:	4b03      	ldr	r3, [pc, #12]	@ (8004e3c <HAL_RCC_NMI_IRQHandler+0x24>)
 8004e2e:	2280      	movs	r2, #128	@ 0x80
 8004e30:	701a      	strb	r2, [r3, #0]
  }
}
 8004e32:	bf00      	nop
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023800 	.word	0x40023800
 8004e3c:	4002380e 	.word	0x4002380e

08004e40 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004e40:	b480      	push	{r7}
 8004e42:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004e4e:	b580      	push	{r7, lr}
 8004e50:	b082      	sub	sp, #8
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d101      	bne.n	8004e60 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e07b      	b.n	8004f58 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d108      	bne.n	8004e7a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e70:	d009      	beq.n	8004e86 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2200      	movs	r2, #0
 8004e76:	61da      	str	r2, [r3, #28]
 8004e78:	e005      	b.n	8004e86 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e92:	b2db      	uxtb	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d106      	bne.n	8004ea6 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fd f9f9 	bl	8002298 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2202      	movs	r2, #2
 8004eaa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ebc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004ece:	431a      	orrs	r2, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0302 	and.w	r3, r3, #2
 8004ee2:	431a      	orrs	r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	431a      	orrs	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004ef6:	431a      	orrs	r2, r3
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	69db      	ldr	r3, [r3, #28]
 8004efc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004f00:	431a      	orrs	r2, r3
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a1b      	ldr	r3, [r3, #32]
 8004f06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f0a:	ea42 0103 	orr.w	r1, r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f12:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	430a      	orrs	r2, r1
 8004f1c:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	699b      	ldr	r3, [r3, #24]
 8004f22:	0c1b      	lsrs	r3, r3, #16
 8004f24:	f003 0104 	and.w	r1, r3, #4
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2c:	f003 0210 	and.w	r2, r3, #16
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	430a      	orrs	r2, r1
 8004f36:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	69da      	ldr	r2, [r3, #28]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f46:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2201      	movs	r2, #1
 8004f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004f56:	2300      	movs	r3, #0
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3708      	adds	r7, #8
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}

08004f60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e041      	b.n	8004ff6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d106      	bne.n	8004f8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2200      	movs	r2, #0
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f7fd faac 	bl	80024e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2202      	movs	r2, #2
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	3304      	adds	r3, #4
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4610      	mov	r0, r2
 8004fa0:	f000 fba8 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3708      	adds	r7, #8
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}
	...

08005000 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b085      	sub	sp, #20
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800500e:	b2db      	uxtb	r3, r3
 8005010:	2b01      	cmp	r3, #1
 8005012:	d001      	beq.n	8005018 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e046      	b.n	80050a6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2202      	movs	r2, #2
 800501c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a23      	ldr	r2, [pc, #140]	@ (80050b4 <HAL_TIM_Base_Start+0xb4>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d022      	beq.n	8005070 <HAL_TIM_Base_Start+0x70>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005032:	d01d      	beq.n	8005070 <HAL_TIM_Base_Start+0x70>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a1f      	ldr	r2, [pc, #124]	@ (80050b8 <HAL_TIM_Base_Start+0xb8>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d018      	beq.n	8005070 <HAL_TIM_Base_Start+0x70>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1e      	ldr	r2, [pc, #120]	@ (80050bc <HAL_TIM_Base_Start+0xbc>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d013      	beq.n	8005070 <HAL_TIM_Base_Start+0x70>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1c      	ldr	r2, [pc, #112]	@ (80050c0 <HAL_TIM_Base_Start+0xc0>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d00e      	beq.n	8005070 <HAL_TIM_Base_Start+0x70>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <HAL_TIM_Base_Start+0xc4>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d009      	beq.n	8005070 <HAL_TIM_Base_Start+0x70>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a19      	ldr	r2, [pc, #100]	@ (80050c8 <HAL_TIM_Base_Start+0xc8>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d004      	beq.n	8005070 <HAL_TIM_Base_Start+0x70>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a18      	ldr	r2, [pc, #96]	@ (80050cc <HAL_TIM_Base_Start+0xcc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d111      	bne.n	8005094 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 0307 	and.w	r3, r3, #7
 800507a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	2b06      	cmp	r3, #6
 8005080:	d010      	beq.n	80050a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0201 	orr.w	r2, r2, #1
 8005090:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005092:	e007      	b.n	80050a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f042 0201 	orr.w	r2, r2, #1
 80050a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40010400 	.word	0x40010400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40001800 	.word	0x40001800

080050d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e041      	b.n	8005166 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fd f936 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2202      	movs	r2, #2
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	3304      	adds	r3, #4
 800510c:	4619      	mov	r1, r3
 800510e:	4610      	mov	r0, r2
 8005110:	f000 faf0 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2201      	movs	r2, #1
 8005118:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2201      	movs	r2, #1
 8005128:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005164:	2300      	movs	r3, #0
}
 8005166:	4618      	mov	r0, r3
 8005168:	3708      	adds	r7, #8
 800516a:	46bd      	mov	sp, r7
 800516c:	bd80      	pop	{r7, pc}
	...

08005170 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
 8005178:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d109      	bne.n	8005194 <HAL_TIM_PWM_Start+0x24>
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005186:	b2db      	uxtb	r3, r3
 8005188:	2b01      	cmp	r3, #1
 800518a:	bf14      	ite	ne
 800518c:	2301      	movne	r3, #1
 800518e:	2300      	moveq	r3, #0
 8005190:	b2db      	uxtb	r3, r3
 8005192:	e022      	b.n	80051da <HAL_TIM_PWM_Start+0x6a>
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	2b04      	cmp	r3, #4
 8005198:	d109      	bne.n	80051ae <HAL_TIM_PWM_Start+0x3e>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b01      	cmp	r3, #1
 80051a4:	bf14      	ite	ne
 80051a6:	2301      	movne	r3, #1
 80051a8:	2300      	moveq	r3, #0
 80051aa:	b2db      	uxtb	r3, r3
 80051ac:	e015      	b.n	80051da <HAL_TIM_PWM_Start+0x6a>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b08      	cmp	r3, #8
 80051b2:	d109      	bne.n	80051c8 <HAL_TIM_PWM_Start+0x58>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80051ba:	b2db      	uxtb	r3, r3
 80051bc:	2b01      	cmp	r3, #1
 80051be:	bf14      	ite	ne
 80051c0:	2301      	movne	r3, #1
 80051c2:	2300      	moveq	r3, #0
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	e008      	b.n	80051da <HAL_TIM_PWM_Start+0x6a>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	bf14      	ite	ne
 80051d4:	2301      	movne	r3, #1
 80051d6:	2300      	moveq	r3, #0
 80051d8:	b2db      	uxtb	r3, r3
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d001      	beq.n	80051e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051de:	2301      	movs	r3, #1
 80051e0:	e07c      	b.n	80052dc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d104      	bne.n	80051f2 <HAL_TIM_PWM_Start+0x82>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2202      	movs	r2, #2
 80051ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051f0:	e013      	b.n	800521a <HAL_TIM_PWM_Start+0xaa>
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	2b04      	cmp	r3, #4
 80051f6:	d104      	bne.n	8005202 <HAL_TIM_PWM_Start+0x92>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2202      	movs	r2, #2
 80051fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005200:	e00b      	b.n	800521a <HAL_TIM_PWM_Start+0xaa>
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2b08      	cmp	r3, #8
 8005206:	d104      	bne.n	8005212 <HAL_TIM_PWM_Start+0xa2>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2202      	movs	r2, #2
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005210:	e003      	b.n	800521a <HAL_TIM_PWM_Start+0xaa>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2202      	movs	r2, #2
 8005216:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2201      	movs	r2, #1
 8005220:	6839      	ldr	r1, [r7, #0]
 8005222:	4618      	mov	r0, r3
 8005224:	f000 fd5c 	bl	8005ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a2d      	ldr	r2, [pc, #180]	@ (80052e4 <HAL_TIM_PWM_Start+0x174>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d004      	beq.n	800523c <HAL_TIM_PWM_Start+0xcc>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a2c      	ldr	r2, [pc, #176]	@ (80052e8 <HAL_TIM_PWM_Start+0x178>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d101      	bne.n	8005240 <HAL_TIM_PWM_Start+0xd0>
 800523c:	2301      	movs	r3, #1
 800523e:	e000      	b.n	8005242 <HAL_TIM_PWM_Start+0xd2>
 8005240:	2300      	movs	r3, #0
 8005242:	2b00      	cmp	r3, #0
 8005244:	d007      	beq.n	8005256 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005254:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	4a22      	ldr	r2, [pc, #136]	@ (80052e4 <HAL_TIM_PWM_Start+0x174>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d022      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005268:	d01d      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	4a1f      	ldr	r2, [pc, #124]	@ (80052ec <HAL_TIM_PWM_Start+0x17c>)
 8005270:	4293      	cmp	r3, r2
 8005272:	d018      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	4a1d      	ldr	r2, [pc, #116]	@ (80052f0 <HAL_TIM_PWM_Start+0x180>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d013      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a1c      	ldr	r2, [pc, #112]	@ (80052f4 <HAL_TIM_PWM_Start+0x184>)
 8005284:	4293      	cmp	r3, r2
 8005286:	d00e      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4a16      	ldr	r2, [pc, #88]	@ (80052e8 <HAL_TIM_PWM_Start+0x178>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d009      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	4a18      	ldr	r2, [pc, #96]	@ (80052f8 <HAL_TIM_PWM_Start+0x188>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d004      	beq.n	80052a6 <HAL_TIM_PWM_Start+0x136>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	4a16      	ldr	r2, [pc, #88]	@ (80052fc <HAL_TIM_PWM_Start+0x18c>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d111      	bne.n	80052ca <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2b06      	cmp	r3, #6
 80052b6:	d010      	beq.n	80052da <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052c8:	e007      	b.n	80052da <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f042 0201 	orr.w	r2, r2, #1
 80052d8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052da:	2300      	movs	r3, #0
}
 80052dc:	4618      	mov	r0, r3
 80052de:	3710      	adds	r7, #16
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40010000 	.word	0x40010000
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40000c00 	.word	0x40000c00
 80052f8:	40014000 	.word	0x40014000
 80052fc:	40001800 	.word	0x40001800

08005300 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2200      	movs	r2, #0
 8005310:	6839      	ldr	r1, [r7, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f000 fce4 	bl	8005ce0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a2e      	ldr	r2, [pc, #184]	@ (80053d8 <HAL_TIM_PWM_Stop+0xd8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d004      	beq.n	800532c <HAL_TIM_PWM_Stop+0x2c>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a2d      	ldr	r2, [pc, #180]	@ (80053dc <HAL_TIM_PWM_Stop+0xdc>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d101      	bne.n	8005330 <HAL_TIM_PWM_Stop+0x30>
 800532c:	2301      	movs	r3, #1
 800532e:	e000      	b.n	8005332 <HAL_TIM_PWM_Stop+0x32>
 8005330:	2300      	movs	r3, #0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d017      	beq.n	8005366 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	6a1a      	ldr	r2, [r3, #32]
 800533c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005340:	4013      	ands	r3, r2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d10f      	bne.n	8005366 <HAL_TIM_PWM_Stop+0x66>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005350:	4013      	ands	r3, r2
 8005352:	2b00      	cmp	r3, #0
 8005354:	d107      	bne.n	8005366 <HAL_TIM_PWM_Stop+0x66>
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005364:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	6a1a      	ldr	r2, [r3, #32]
 800536c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005370:	4013      	ands	r3, r2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d10f      	bne.n	8005396 <HAL_TIM_PWM_Stop+0x96>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6a1a      	ldr	r2, [r3, #32]
 800537c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005380:	4013      	ands	r3, r2
 8005382:	2b00      	cmp	r3, #0
 8005384:	d107      	bne.n	8005396 <HAL_TIM_PWM_Stop+0x96>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d104      	bne.n	80053a6 <HAL_TIM_PWM_Stop+0xa6>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2201      	movs	r2, #1
 80053a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a4:	e013      	b.n	80053ce <HAL_TIM_PWM_Stop+0xce>
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	2b04      	cmp	r3, #4
 80053aa:	d104      	bne.n	80053b6 <HAL_TIM_PWM_Stop+0xb6>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053b4:	e00b      	b.n	80053ce <HAL_TIM_PWM_Stop+0xce>
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	2b08      	cmp	r3, #8
 80053ba:	d104      	bne.n	80053c6 <HAL_TIM_PWM_Stop+0xc6>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2201      	movs	r2, #1
 80053c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053c4:	e003      	b.n	80053ce <HAL_TIM_PWM_Stop+0xce>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80053ce:	2300      	movs	r3, #0
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	3708      	adds	r7, #8
 80053d4:	46bd      	mov	sp, r7
 80053d6:	bd80      	pop	{r7, pc}
 80053d8:	40010000 	.word	0x40010000
 80053dc:	40010400 	.word	0x40010400

080053e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b086      	sub	sp, #24
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053ec:	2300      	movs	r3, #0
 80053ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80053f6:	2b01      	cmp	r3, #1
 80053f8:	d101      	bne.n	80053fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80053fa:	2302      	movs	r3, #2
 80053fc:	e0ae      	b.n	800555c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2201      	movs	r2, #1
 8005402:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b0c      	cmp	r3, #12
 800540a:	f200 809f 	bhi.w	800554c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800540e:	a201      	add	r2, pc, #4	@ (adr r2, 8005414 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005414:	08005449 	.word	0x08005449
 8005418:	0800554d 	.word	0x0800554d
 800541c:	0800554d 	.word	0x0800554d
 8005420:	0800554d 	.word	0x0800554d
 8005424:	08005489 	.word	0x08005489
 8005428:	0800554d 	.word	0x0800554d
 800542c:	0800554d 	.word	0x0800554d
 8005430:	0800554d 	.word	0x0800554d
 8005434:	080054cb 	.word	0x080054cb
 8005438:	0800554d 	.word	0x0800554d
 800543c:	0800554d 	.word	0x0800554d
 8005440:	0800554d 	.word	0x0800554d
 8005444:	0800550b 	.word	0x0800550b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 f9fc 	bl	800584c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	699a      	ldr	r2, [r3, #24]
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0208 	orr.w	r2, r2, #8
 8005462:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	699a      	ldr	r2, [r3, #24]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0204 	bic.w	r2, r2, #4
 8005472:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6999      	ldr	r1, [r3, #24]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	619a      	str	r2, [r3, #24]
      break;
 8005486:	e064      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fa4c 	bl	800592c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	699a      	ldr	r2, [r3, #24]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	699a      	ldr	r2, [r3, #24]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6999      	ldr	r1, [r3, #24]
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]
      break;
 80054c8:	e043      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	4618      	mov	r0, r3
 80054d2:	f000 faa1 	bl	8005a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69da      	ldr	r2, [r3, #28]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f042 0208 	orr.w	r2, r2, #8
 80054e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	69da      	ldr	r2, [r3, #28]
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f022 0204 	bic.w	r2, r2, #4
 80054f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	69d9      	ldr	r1, [r3, #28]
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	691a      	ldr	r2, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	61da      	str	r2, [r3, #28]
      break;
 8005508:	e023      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	4618      	mov	r0, r3
 8005512:	f000 faf5 	bl	8005b00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	69da      	ldr	r2, [r3, #28]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005524:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	69da      	ldr	r2, [r3, #28]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005534:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	69d9      	ldr	r1, [r3, #28]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	691b      	ldr	r3, [r3, #16]
 8005540:	021a      	lsls	r2, r3, #8
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	430a      	orrs	r2, r1
 8005548:	61da      	str	r2, [r3, #28]
      break;
 800554a:	e002      	b.n	8005552 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	75fb      	strb	r3, [r7, #23]
      break;
 8005550:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800555a:	7dfb      	ldrb	r3, [r7, #23]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3718      	adds	r7, #24
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}

08005564 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
 800556c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005578:	2b01      	cmp	r3, #1
 800557a:	d101      	bne.n	8005580 <HAL_TIM_ConfigClockSource+0x1c>
 800557c:	2302      	movs	r3, #2
 800557e:	e0b4      	b.n	80056ea <HAL_TIM_ConfigClockSource+0x186>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	689b      	ldr	r3, [r3, #8]
 8005596:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800559e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	68ba      	ldr	r2, [r7, #8]
 80055ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055b8:	d03e      	beq.n	8005638 <HAL_TIM_ConfigClockSource+0xd4>
 80055ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055be:	f200 8087 	bhi.w	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055c6:	f000 8086 	beq.w	80056d6 <HAL_TIM_ConfigClockSource+0x172>
 80055ca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ce:	d87f      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b70      	cmp	r3, #112	@ 0x70
 80055d2:	d01a      	beq.n	800560a <HAL_TIM_ConfigClockSource+0xa6>
 80055d4:	2b70      	cmp	r3, #112	@ 0x70
 80055d6:	d87b      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b60      	cmp	r3, #96	@ 0x60
 80055da:	d050      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x11a>
 80055dc:	2b60      	cmp	r3, #96	@ 0x60
 80055de:	d877      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b50      	cmp	r3, #80	@ 0x50
 80055e2:	d03c      	beq.n	800565e <HAL_TIM_ConfigClockSource+0xfa>
 80055e4:	2b50      	cmp	r3, #80	@ 0x50
 80055e6:	d873      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e8:	2b40      	cmp	r3, #64	@ 0x40
 80055ea:	d058      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x13a>
 80055ec:	2b40      	cmp	r3, #64	@ 0x40
 80055ee:	d86f      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 80055f0:	2b30      	cmp	r3, #48	@ 0x30
 80055f2:	d064      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x15a>
 80055f4:	2b30      	cmp	r3, #48	@ 0x30
 80055f6:	d86b      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 80055f8:	2b20      	cmp	r3, #32
 80055fa:	d060      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x15a>
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d867      	bhi.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d05c      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x15a>
 8005604:	2b10      	cmp	r3, #16
 8005606:	d05a      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x15a>
 8005608:	e062      	b.n	80056d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800561a:	f000 fb41 	bl	8005ca0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800562c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	68ba      	ldr	r2, [r7, #8]
 8005634:	609a      	str	r2, [r3, #8]
      break;
 8005636:	e04f      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005648:	f000 fb2a 	bl	8005ca0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	689a      	ldr	r2, [r3, #8]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800565a:	609a      	str	r2, [r3, #8]
      break;
 800565c:	e03c      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566a:	461a      	mov	r2, r3
 800566c:	f000 fa9e 	bl	8005bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2150      	movs	r1, #80	@ 0x50
 8005676:	4618      	mov	r0, r3
 8005678:	f000 faf7 	bl	8005c6a <TIM_ITRx_SetConfig>
      break;
 800567c:	e02c      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800568a:	461a      	mov	r2, r3
 800568c:	f000 fabd 	bl	8005c0a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2160      	movs	r1, #96	@ 0x60
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fae7 	bl	8005c6a <TIM_ITRx_SetConfig>
      break;
 800569c:	e01c      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056aa:	461a      	mov	r2, r3
 80056ac:	f000 fa7e 	bl	8005bac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2140      	movs	r1, #64	@ 0x40
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fad7 	bl	8005c6a <TIM_ITRx_SetConfig>
      break;
 80056bc:	e00c      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4619      	mov	r1, r3
 80056c8:	4610      	mov	r0, r2
 80056ca:	f000 face 	bl	8005c6a <TIM_ITRx_SetConfig>
      break;
 80056ce:	e003      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	73fb      	strb	r3, [r7, #15]
      break;
 80056d4:	e000      	b.n	80056d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ea:	4618      	mov	r0, r3
 80056ec:	3710      	adds	r7, #16
 80056ee:	46bd      	mov	sp, r7
 80056f0:	bd80      	pop	{r7, pc}
	...

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a46      	ldr	r2, [pc, #280]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a43      	ldr	r2, [pc, #268]	@ (8005824 <TIM_Base_SetConfig+0x130>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a42      	ldr	r2, [pc, #264]	@ (8005828 <TIM_Base_SetConfig+0x134>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a41      	ldr	r2, [pc, #260]	@ (800582c <TIM_Base_SetConfig+0x138>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a40      	ldr	r2, [pc, #256]	@ (8005830 <TIM_Base_SetConfig+0x13c>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a35      	ldr	r2, [pc, #212]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005754:	d027      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a32      	ldr	r2, [pc, #200]	@ (8005824 <TIM_Base_SetConfig+0x130>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d023      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a31      	ldr	r2, [pc, #196]	@ (8005828 <TIM_Base_SetConfig+0x134>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a30      	ldr	r2, [pc, #192]	@ (800582c <TIM_Base_SetConfig+0x138>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a2f      	ldr	r2, [pc, #188]	@ (8005830 <TIM_Base_SetConfig+0x13c>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d017      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a2e      	ldr	r2, [pc, #184]	@ (8005834 <TIM_Base_SetConfig+0x140>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a2d      	ldr	r2, [pc, #180]	@ (8005838 <TIM_Base_SetConfig+0x144>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a2c      	ldr	r2, [pc, #176]	@ (800583c <TIM_Base_SetConfig+0x148>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2b      	ldr	r2, [pc, #172]	@ (8005840 <TIM_Base_SetConfig+0x14c>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a2a      	ldr	r2, [pc, #168]	@ (8005844 <TIM_Base_SetConfig+0x150>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a29      	ldr	r2, [pc, #164]	@ (8005848 <TIM_Base_SetConfig+0x154>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a10      	ldr	r2, [pc, #64]	@ (8005820 <TIM_Base_SetConfig+0x12c>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a12      	ldr	r2, [pc, #72]	@ (8005830 <TIM_Base_SetConfig+0x13c>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	691b      	ldr	r3, [r3, #16]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b01      	cmp	r3, #1
 8005804:	d105      	bne.n	8005812 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	691b      	ldr	r3, [r3, #16]
 800580a:	f023 0201 	bic.w	r2, r3, #1
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	611a      	str	r2, [r3, #16]
  }
}
 8005812:	bf00      	nop
 8005814:	3714      	adds	r7, #20
 8005816:	46bd      	mov	sp, r7
 8005818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581c:	4770      	bx	lr
 800581e:	bf00      	nop
 8005820:	40010000 	.word	0x40010000
 8005824:	40000400 	.word	0x40000400
 8005828:	40000800 	.word	0x40000800
 800582c:	40000c00 	.word	0x40000c00
 8005830:	40010400 	.word	0x40010400
 8005834:	40014000 	.word	0x40014000
 8005838:	40014400 	.word	0x40014400
 800583c:	40014800 	.word	0x40014800
 8005840:	40001800 	.word	0x40001800
 8005844:	40001c00 	.word	0x40001c00
 8005848:	40002000 	.word	0x40002000

0800584c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800584c:	b480      	push	{r7}
 800584e:	b087      	sub	sp, #28
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6a1b      	ldr	r3, [r3, #32]
 800585a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6a1b      	ldr	r3, [r3, #32]
 8005860:	f023 0201 	bic.w	r2, r3, #1
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	685b      	ldr	r3, [r3, #4]
 800586c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800587a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	f023 0303 	bic.w	r3, r3, #3
 8005882:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	68fa      	ldr	r2, [r7, #12]
 800588a:	4313      	orrs	r3, r2
 800588c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800588e:	697b      	ldr	r3, [r7, #20]
 8005890:	f023 0302 	bic.w	r3, r3, #2
 8005894:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	697a      	ldr	r2, [r7, #20]
 800589c:	4313      	orrs	r3, r2
 800589e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a20      	ldr	r2, [pc, #128]	@ (8005924 <TIM_OC1_SetConfig+0xd8>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_OC1_SetConfig+0x64>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a1f      	ldr	r2, [pc, #124]	@ (8005928 <TIM_OC1_SetConfig+0xdc>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d10c      	bne.n	80058ca <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f023 0308 	bic.w	r3, r3, #8
 80058b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	697a      	ldr	r2, [r7, #20]
 80058be:	4313      	orrs	r3, r2
 80058c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f023 0304 	bic.w	r3, r3, #4
 80058c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4a15      	ldr	r2, [pc, #84]	@ (8005924 <TIM_OC1_SetConfig+0xd8>)
 80058ce:	4293      	cmp	r3, r2
 80058d0:	d003      	beq.n	80058da <TIM_OC1_SetConfig+0x8e>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a14      	ldr	r2, [pc, #80]	@ (8005928 <TIM_OC1_SetConfig+0xdc>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d111      	bne.n	80058fe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80058e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80058e2:	693b      	ldr	r3, [r7, #16]
 80058e4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80058e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80058ea:	683b      	ldr	r3, [r7, #0]
 80058ec:	695b      	ldr	r3, [r3, #20]
 80058ee:	693a      	ldr	r2, [r7, #16]
 80058f0:	4313      	orrs	r3, r2
 80058f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	699b      	ldr	r3, [r3, #24]
 80058f8:	693a      	ldr	r2, [r7, #16]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	693a      	ldr	r2, [r7, #16]
 8005902:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	68fa      	ldr	r2, [r7, #12]
 8005908:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	685a      	ldr	r2, [r3, #4]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	621a      	str	r2, [r3, #32]
}
 8005918:	bf00      	nop
 800591a:	371c      	adds	r7, #28
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr
 8005924:	40010000 	.word	0x40010000
 8005928:	40010400 	.word	0x40010400

0800592c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6a1b      	ldr	r3, [r3, #32]
 800593a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	f023 0210 	bic.w	r2, r3, #16
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	699b      	ldr	r3, [r3, #24]
 8005952:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800595a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005962:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	021b      	lsls	r3, r3, #8
 800596a:	68fa      	ldr	r2, [r7, #12]
 800596c:	4313      	orrs	r3, r2
 800596e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f023 0320 	bic.w	r3, r3, #32
 8005976:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	011b      	lsls	r3, r3, #4
 800597e:	697a      	ldr	r2, [r7, #20]
 8005980:	4313      	orrs	r3, r2
 8005982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	4a22      	ldr	r2, [pc, #136]	@ (8005a10 <TIM_OC2_SetConfig+0xe4>)
 8005988:	4293      	cmp	r3, r2
 800598a:	d003      	beq.n	8005994 <TIM_OC2_SetConfig+0x68>
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	4a21      	ldr	r2, [pc, #132]	@ (8005a14 <TIM_OC2_SetConfig+0xe8>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d10d      	bne.n	80059b0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800599a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	011b      	lsls	r3, r3, #4
 80059a2:	697a      	ldr	r2, [r7, #20]
 80059a4:	4313      	orrs	r3, r2
 80059a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	4a17      	ldr	r2, [pc, #92]	@ (8005a10 <TIM_OC2_SetConfig+0xe4>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d003      	beq.n	80059c0 <TIM_OC2_SetConfig+0x94>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a16      	ldr	r2, [pc, #88]	@ (8005a14 <TIM_OC2_SetConfig+0xe8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d113      	bne.n	80059e8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80059c6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80059ce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	009b      	lsls	r3, r3, #2
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4313      	orrs	r3, r2
 80059da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	699b      	ldr	r3, [r3, #24]
 80059e0:	009b      	lsls	r3, r3, #2
 80059e2:	693a      	ldr	r2, [r7, #16]
 80059e4:	4313      	orrs	r3, r2
 80059e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	693a      	ldr	r2, [r7, #16]
 80059ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	685a      	ldr	r2, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	621a      	str	r2, [r3, #32]
}
 8005a02:	bf00      	nop
 8005a04:	371c      	adds	r7, #28
 8005a06:	46bd      	mov	sp, r7
 8005a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0c:	4770      	bx	lr
 8005a0e:	bf00      	nop
 8005a10:	40010000 	.word	0x40010000
 8005a14:	40010400 	.word	0x40010400

08005a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
 8005a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a1b      	ldr	r3, [r3, #32]
 8005a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6a1b      	ldr	r3, [r3, #32]
 8005a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f023 0303 	bic.w	r3, r3, #3
 8005a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	68fa      	ldr	r2, [r7, #12]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	697a      	ldr	r2, [r7, #20]
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a21      	ldr	r2, [pc, #132]	@ (8005af8 <TIM_OC3_SetConfig+0xe0>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d003      	beq.n	8005a7e <TIM_OC3_SetConfig+0x66>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a20      	ldr	r2, [pc, #128]	@ (8005afc <TIM_OC3_SetConfig+0xe4>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d10d      	bne.n	8005a9a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a16      	ldr	r2, [pc, #88]	@ (8005af8 <TIM_OC3_SetConfig+0xe0>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d003      	beq.n	8005aaa <TIM_OC3_SetConfig+0x92>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	4a15      	ldr	r2, [pc, #84]	@ (8005afc <TIM_OC3_SetConfig+0xe4>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d113      	bne.n	8005ad2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ab0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005ab8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	695b      	ldr	r3, [r3, #20]
 8005abe:	011b      	lsls	r3, r3, #4
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	699b      	ldr	r3, [r3, #24]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	693a      	ldr	r2, [r7, #16]
 8005ace:	4313      	orrs	r3, r2
 8005ad0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	693a      	ldr	r2, [r7, #16]
 8005ad6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	685a      	ldr	r2, [r3, #4]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	621a      	str	r2, [r3, #32]
}
 8005aec:	bf00      	nop
 8005aee:	371c      	adds	r7, #28
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	40010000 	.word	0x40010000
 8005afc:	40010400 	.word	0x40010400

08005b00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b087      	sub	sp, #28
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6a1b      	ldr	r3, [r3, #32]
 8005b0e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69db      	ldr	r3, [r3, #28]
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	4313      	orrs	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	031b      	lsls	r3, r3, #12
 8005b52:	693a      	ldr	r2, [r7, #16]
 8005b54:	4313      	orrs	r3, r2
 8005b56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a12      	ldr	r2, [pc, #72]	@ (8005ba4 <TIM_OC4_SetConfig+0xa4>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d003      	beq.n	8005b68 <TIM_OC4_SetConfig+0x68>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a11      	ldr	r2, [pc, #68]	@ (8005ba8 <TIM_OC4_SetConfig+0xa8>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d109      	bne.n	8005b7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	695b      	ldr	r3, [r3, #20]
 8005b74:	019b      	lsls	r3, r3, #6
 8005b76:	697a      	ldr	r2, [r7, #20]
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	697a      	ldr	r2, [r7, #20]
 8005b80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	685a      	ldr	r2, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	693a      	ldr	r2, [r7, #16]
 8005b94:	621a      	str	r2, [r3, #32]
}
 8005b96:	bf00      	nop
 8005b98:	371c      	adds	r7, #28
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40010400 	.word	0x40010400

08005bac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b087      	sub	sp, #28
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
 8005bbc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	6a1b      	ldr	r3, [r3, #32]
 8005bc2:	f023 0201 	bic.w	r2, r3, #1
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005bd0:	693b      	ldr	r3, [r7, #16]
 8005bd2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005bd6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	4313      	orrs	r3, r2
 8005be0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f023 030a 	bic.w	r3, r3, #10
 8005be8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	68bb      	ldr	r3, [r7, #8]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	621a      	str	r2, [r3, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b087      	sub	sp, #28
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	60f8      	str	r0, [r7, #12]
 8005c12:	60b9      	str	r1, [r7, #8]
 8005c14:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a1b      	ldr	r3, [r3, #32]
 8005c1a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6a1b      	ldr	r3, [r3, #32]
 8005c20:	f023 0210 	bic.w	r2, r3, #16
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	699b      	ldr	r3, [r3, #24]
 8005c2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005c34:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	031b      	lsls	r3, r3, #12
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	4313      	orrs	r3, r2
 8005c3e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005c46:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	011b      	lsls	r3, r3, #4
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	4313      	orrs	r3, r2
 8005c50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	693a      	ldr	r2, [r7, #16]
 8005c56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	621a      	str	r2, [r3, #32]
}
 8005c5e:	bf00      	nop
 8005c60:	371c      	adds	r7, #28
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c6a:	b480      	push	{r7}
 8005c6c:	b085      	sub	sp, #20
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c80:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c82:	683a      	ldr	r2, [r7, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	4313      	orrs	r3, r2
 8005c88:	f043 0307 	orr.w	r3, r3, #7
 8005c8c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	68fa      	ldr	r2, [r7, #12]
 8005c92:	609a      	str	r2, [r3, #8]
}
 8005c94:	bf00      	nop
 8005c96:	3714      	adds	r7, #20
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9e:	4770      	bx	lr

08005ca0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	b087      	sub	sp, #28
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005cba:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	021a      	lsls	r2, r3, #8
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	697a      	ldr	r2, [r7, #20]
 8005cca:	4313      	orrs	r3, r2
 8005ccc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	609a      	str	r2, [r3, #8]
}
 8005cd4:	bf00      	nop
 8005cd6:	371c      	adds	r7, #28
 8005cd8:	46bd      	mov	sp, r7
 8005cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cde:	4770      	bx	lr

08005ce0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b087      	sub	sp, #28
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	6a1a      	ldr	r2, [r3, #32]
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	43db      	mvns	r3, r3
 8005d02:	401a      	ands	r2, r3
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a1a      	ldr	r2, [r3, #32]
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	6879      	ldr	r1, [r7, #4]
 8005d14:	fa01 f303 	lsl.w	r3, r1, r3
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
	...

08005d2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d40:	2302      	movs	r3, #2
 8005d42:	e05a      	b.n	8005dfa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2201      	movs	r2, #1
 8005d48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2202      	movs	r2, #2
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68fa      	ldr	r2, [r7, #12]
 8005d7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	4a21      	ldr	r2, [pc, #132]	@ (8005e08 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d022      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d90:	d01d      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a1d      	ldr	r2, [pc, #116]	@ (8005e0c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d018      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a1b      	ldr	r2, [pc, #108]	@ (8005e10 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d013      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	4a1a      	ldr	r2, [pc, #104]	@ (8005e14 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d00e      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a18      	ldr	r2, [pc, #96]	@ (8005e18 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005db6:	4293      	cmp	r3, r2
 8005db8:	d009      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	4a17      	ldr	r2, [pc, #92]	@ (8005e1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005dc0:	4293      	cmp	r3, r2
 8005dc2:	d004      	beq.n	8005dce <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	4a15      	ldr	r2, [pc, #84]	@ (8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d10c      	bne.n	8005de8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dd4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	68ba      	ldr	r2, [r7, #8]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2201      	movs	r2, #1
 8005dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005df8:	2300      	movs	r3, #0
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3714      	adds	r7, #20
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e04:	4770      	bx	lr
 8005e06:	bf00      	nop
 8005e08:	40010000 	.word	0x40010000
 8005e0c:	40000400 	.word	0x40000400
 8005e10:	40000800 	.word	0x40000800
 8005e14:	40000c00 	.word	0x40000c00
 8005e18:	40010400 	.word	0x40010400
 8005e1c:	40014000 	.word	0x40014000
 8005e20:	40001800 	.word	0x40001800

08005e24 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
 8005e2c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d101      	bne.n	8005e40 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e3c:	2302      	movs	r3, #2
 8005e3e:	e03d      	b.n	8005ebc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	68db      	ldr	r3, [r3, #12]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	689b      	ldr	r3, [r3, #8]
 8005e60:	4313      	orrs	r3, r2
 8005e62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	695b      	ldr	r3, [r3, #20]
 8005e98:	4313      	orrs	r3, r2
 8005e9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3714      	adds	r7, #20
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec6:	4770      	bx	lr

08005ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d101      	bne.n	8005eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	e042      	b.n	8005f60 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f7fc fc5e 	bl	80027b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2224      	movs	r2, #36	@ 0x24
 8005ef8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	68da      	ldr	r2, [r3, #12]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fea1 	bl	8006c54 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	691a      	ldr	r2, [r3, #16]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	695a      	ldr	r2, [r3, #20]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005f40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2220      	movs	r2, #32
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2220      	movs	r2, #32
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005f5e:	2300      	movs	r3, #0
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3708      	adds	r7, #8
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b08c      	sub	sp, #48	@ 0x30
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	4613      	mov	r3, r2
 8005f74:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f7c:	b2db      	uxtb	r3, r3
 8005f7e:	2b20      	cmp	r3, #32
 8005f80:	d14a      	bne.n	8006018 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d002      	beq.n	8005f8e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005f88:	88fb      	ldrh	r3, [r7, #6]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d101      	bne.n	8005f92 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e043      	b.n	800601a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	2201      	movs	r2, #1
 8005f96:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005f9e:	88fb      	ldrh	r3, [r7, #6]
 8005fa0:	461a      	mov	r2, r3
 8005fa2:	68b9      	ldr	r1, [r7, #8]
 8005fa4:	68f8      	ldr	r0, [r7, #12]
 8005fa6:	f000 fbf5 	bl	8006794 <UART_Start_Receive_DMA>
 8005faa:	4603      	mov	r3, r0
 8005fac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005fb0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d12c      	bne.n	8006012 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbc:	2b01      	cmp	r3, #1
 8005fbe:	d125      	bne.n	800600c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	613b      	str	r3, [r7, #16]
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	613b      	str	r3, [r7, #16]
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	330c      	adds	r3, #12
 8005fdc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fde:	69bb      	ldr	r3, [r7, #24]
 8005fe0:	e853 3f00 	ldrex	r3, [r3]
 8005fe4:	617b      	str	r3, [r7, #20]
   return(result);
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	f043 0310 	orr.w	r3, r3, #16
 8005fec:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	330c      	adds	r3, #12
 8005ff4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005ff6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ff8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ffa:	6a39      	ldr	r1, [r7, #32]
 8005ffc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ffe:	e841 2300 	strex	r3, r2, [r1]
 8006002:	61fb      	str	r3, [r7, #28]
   return(result);
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d1e5      	bne.n	8005fd6 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 800600a:	e002      	b.n	8006012 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8006012:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006016:	e000      	b.n	800601a <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8006018:	2302      	movs	r3, #2
  }
}
 800601a:	4618      	mov	r0, r3
 800601c:	3730      	adds	r7, #48	@ 0x30
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
	...

08006024 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b0ba      	sub	sp, #232	@ 0xe8
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	695b      	ldr	r3, [r3, #20]
 8006046:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800604a:	2300      	movs	r3, #0
 800604c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8006050:	2300      	movs	r3, #0
 8006052:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800605a:	f003 030f 	and.w	r3, r3, #15
 800605e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006062:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10f      	bne.n	800608a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800606a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	d009      	beq.n	800608a <HAL_UART_IRQHandler+0x66>
 8006076:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800607a:	f003 0320 	and.w	r3, r3, #32
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	f000 fd27 	bl	8006ad6 <UART_Receive_IT>
      return;
 8006088:	e25b      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800608a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800608e:	2b00      	cmp	r3, #0
 8006090:	f000 80de 	beq.w	8006250 <HAL_UART_IRQHandler+0x22c>
 8006094:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006098:	f003 0301 	and.w	r3, r3, #1
 800609c:	2b00      	cmp	r3, #0
 800609e:	d106      	bne.n	80060ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 80d1 	beq.w	8006250 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00b      	beq.n	80060d2 <HAL_UART_IRQHandler+0xae>
 80060ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d005      	beq.n	80060d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ca:	f043 0201 	orr.w	r2, r3, #1
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060d6:	f003 0304 	and.w	r3, r3, #4
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d00b      	beq.n	80060f6 <HAL_UART_IRQHandler+0xd2>
 80060de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060e2:	f003 0301 	and.w	r3, r3, #1
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	f043 0202 	orr.w	r2, r3, #2
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fa:	f003 0302 	and.w	r3, r3, #2
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00b      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
 8006102:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b00      	cmp	r3, #0
 800610c:	d005      	beq.n	800611a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006112:	f043 0204 	orr.w	r2, r3, #4
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800611a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800611e:	f003 0308 	and.w	r3, r3, #8
 8006122:	2b00      	cmp	r3, #0
 8006124:	d011      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
 8006126:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800612a:	f003 0320 	and.w	r3, r3, #32
 800612e:	2b00      	cmp	r3, #0
 8006130:	d105      	bne.n	800613e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006132:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006136:	f003 0301 	and.w	r3, r3, #1
 800613a:	2b00      	cmp	r3, #0
 800613c:	d005      	beq.n	800614a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006142:	f043 0208 	orr.w	r2, r3, #8
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 81f2 	beq.w	8006538 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006154:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d008      	beq.n	8006172 <HAL_UART_IRQHandler+0x14e>
 8006160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006164:	f003 0320 	and.w	r3, r3, #32
 8006168:	2b00      	cmp	r3, #0
 800616a:	d002      	beq.n	8006172 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f000 fcb2 	bl	8006ad6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	695b      	ldr	r3, [r3, #20]
 8006178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800617c:	2b40      	cmp	r3, #64	@ 0x40
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800618e:	f003 0308 	and.w	r3, r3, #8
 8006192:	2b00      	cmp	r3, #0
 8006194:	d103      	bne.n	800619e <HAL_UART_IRQHandler+0x17a>
 8006196:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800619a:	2b00      	cmp	r3, #0
 800619c:	d04f      	beq.n	800623e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800619e:	6878      	ldr	r0, [r7, #4]
 80061a0:	f000 fbba 	bl	8006918 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	695b      	ldr	r3, [r3, #20]
 80061aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ae:	2b40      	cmp	r3, #64	@ 0x40
 80061b0:	d141      	bne.n	8006236 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	3314      	adds	r3, #20
 80061b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80061c0:	e853 3f00 	ldrex	r3, [r3]
 80061c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80061c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80061cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80061d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	3314      	adds	r3, #20
 80061da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80061de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80061e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80061ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80061ee:	e841 2300 	strex	r3, r2, [r1]
 80061f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80061f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1d9      	bne.n	80061b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d013      	beq.n	800622e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620a:	4a7e      	ldr	r2, [pc, #504]	@ (8006404 <HAL_UART_IRQHandler+0x3e0>)
 800620c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006212:	4618      	mov	r0, r3
 8006214:	f7fd fbda 	bl	80039cc <HAL_DMA_Abort_IT>
 8006218:	4603      	mov	r3, r0
 800621a:	2b00      	cmp	r3, #0
 800621c:	d016      	beq.n	800624c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006222:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006228:	4610      	mov	r0, r2
 800622a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	e00e      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f000 f9a8 	bl	8006584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006234:	e00a      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 f9a4 	bl	8006584 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800623c:	e006      	b.n	800624c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f9a0 	bl	8006584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2200      	movs	r2, #0
 8006248:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800624a:	e175      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624c:	bf00      	nop
    return;
 800624e:	e173      	b.n	8006538 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006254:	2b01      	cmp	r3, #1
 8006256:	f040 814f 	bne.w	80064f8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800625a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800625e:	f003 0310 	and.w	r3, r3, #16
 8006262:	2b00      	cmp	r3, #0
 8006264:	f000 8148 	beq.w	80064f8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006268:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800626c:	f003 0310 	and.w	r3, r3, #16
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 8141 	beq.w	80064f8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006276:	2300      	movs	r3, #0
 8006278:	60bb      	str	r3, [r7, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	60bb      	str	r3, [r7, #8]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	60bb      	str	r3, [r7, #8]
 800628a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	695b      	ldr	r3, [r3, #20]
 8006292:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006296:	2b40      	cmp	r3, #64	@ 0x40
 8006298:	f040 80b6 	bne.w	8006408 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80062a8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	f000 8145 	beq.w	800653c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ba:	429a      	cmp	r2, r3
 80062bc:	f080 813e 	bcs.w	800653c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062cc:	69db      	ldr	r3, [r3, #28]
 80062ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062d2:	f000 8088 	beq.w	80063e6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	330c      	adds	r3, #12
 80062dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062e4:	e853 3f00 	ldrex	r3, [r3]
 80062e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80062ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80062f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80062f4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	330c      	adds	r3, #12
 80062fe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8006302:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006306:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800630a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800630e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8006312:	e841 2300 	strex	r3, r2, [r1]
 8006316:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800631a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800631e:	2b00      	cmp	r3, #0
 8006320:	d1d9      	bne.n	80062d6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	3314      	adds	r3, #20
 8006328:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800632a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800632c:	e853 3f00 	ldrex	r3, [r3]
 8006330:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006332:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006334:	f023 0301 	bic.w	r3, r3, #1
 8006338:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	3314      	adds	r3, #20
 8006342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006346:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800634a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800634c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800634e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006352:	e841 2300 	strex	r3, r2, [r1]
 8006356:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006358:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800635a:	2b00      	cmp	r3, #0
 800635c:	d1e1      	bne.n	8006322 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	3314      	adds	r3, #20
 8006364:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800636e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006370:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006374:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3314      	adds	r3, #20
 800637e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006382:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006384:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006388:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006390:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e3      	bne.n	800635e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2220      	movs	r2, #32
 800639a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	330c      	adds	r3, #12
 80063aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80063ae:	e853 3f00 	ldrex	r3, [r3]
 80063b2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80063b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80063b6:	f023 0310 	bic.w	r3, r3, #16
 80063ba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	330c      	adds	r3, #12
 80063c4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80063c8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80063ca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063cc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063ce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80063d0:	e841 2300 	strex	r3, r2, [r1]
 80063d4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80063d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e3      	bne.n	80063a4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7fd fa83 	bl	80038ec <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063f4:	b29b      	uxth	r3, r3
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	b29b      	uxth	r3, r3
 80063fa:	4619      	mov	r1, r3
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f7fa f877 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006402:	e09b      	b.n	800653c <HAL_UART_IRQHandler+0x518>
 8006404:	080069df 	.word	0x080069df
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006410:	b29b      	uxth	r3, r3
 8006412:	1ad3      	subs	r3, r2, r3
 8006414:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800641c:	b29b      	uxth	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 808e 	beq.w	8006540 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8006424:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006428:	2b00      	cmp	r3, #0
 800642a:	f000 8089 	beq.w	8006540 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006436:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006438:	e853 3f00 	ldrex	r3, [r3]
 800643c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800643e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006440:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006444:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	330c      	adds	r3, #12
 800644e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006452:	647a      	str	r2, [r7, #68]	@ 0x44
 8006454:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006456:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006458:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800645a:	e841 2300 	strex	r3, r2, [r1]
 800645e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006460:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006462:	2b00      	cmp	r3, #0
 8006464:	d1e3      	bne.n	800642e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3314      	adds	r3, #20
 800646c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800646e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006470:	e853 3f00 	ldrex	r3, [r3]
 8006474:	623b      	str	r3, [r7, #32]
   return(result);
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	f023 0301 	bic.w	r3, r3, #1
 800647c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	3314      	adds	r3, #20
 8006486:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800648a:	633a      	str	r2, [r7, #48]	@ 0x30
 800648c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800648e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006490:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006492:	e841 2300 	strex	r3, r2, [r1]
 8006496:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006498:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649a:	2b00      	cmp	r3, #0
 800649c:	d1e3      	bne.n	8006466 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	330c      	adds	r3, #12
 80064b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	e853 3f00 	ldrex	r3, [r3]
 80064ba:	60fb      	str	r3, [r7, #12]
   return(result);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	f023 0310 	bic.w	r3, r3, #16
 80064c2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	330c      	adds	r3, #12
 80064cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80064d0:	61fa      	str	r2, [r7, #28]
 80064d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d4:	69b9      	ldr	r1, [r7, #24]
 80064d6:	69fa      	ldr	r2, [r7, #28]
 80064d8:	e841 2300 	strex	r3, r2, [r1]
 80064dc:	617b      	str	r3, [r7, #20]
   return(result);
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d1e3      	bne.n	80064ac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2202      	movs	r2, #2
 80064e8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80064ea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f7f9 fffd 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80064f6:	e023      	b.n	8006540 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80064f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006500:	2b00      	cmp	r3, #0
 8006502:	d009      	beq.n	8006518 <HAL_UART_IRQHandler+0x4f4>
 8006504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006508:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800650c:	2b00      	cmp	r3, #0
 800650e:	d003      	beq.n	8006518 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f000 fa78 	bl	8006a06 <UART_Transmit_IT>
    return;
 8006516:	e014      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006518:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800651c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006520:	2b00      	cmp	r3, #0
 8006522:	d00e      	beq.n	8006542 <HAL_UART_IRQHandler+0x51e>
 8006524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006528:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800652c:	2b00      	cmp	r3, #0
 800652e:	d008      	beq.n	8006542 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8006530:	6878      	ldr	r0, [r7, #4]
 8006532:	f000 fab8 	bl	8006aa6 <UART_EndTransmit_IT>
    return;
 8006536:	e004      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
    return;
 8006538:	bf00      	nop
 800653a:	e002      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
      return;
 800653c:	bf00      	nop
 800653e:	e000      	b.n	8006542 <HAL_UART_IRQHandler+0x51e>
      return;
 8006540:	bf00      	nop
  }
}
 8006542:	37e8      	adds	r7, #232	@ 0xe8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006570:	b480      	push	{r7}
 8006572:	b083      	sub	sp, #12
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006578:	bf00      	nop
 800657a:	370c      	adds	r7, #12
 800657c:	46bd      	mov	sp, r7
 800657e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006582:	4770      	bx	lr

08006584 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006584:	b480      	push	{r7}
 8006586:	b083      	sub	sp, #12
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800658c:	bf00      	nop
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b09c      	sub	sp, #112	@ 0x70
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065a4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d172      	bne.n	800669a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80065b4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065b6:	2200      	movs	r2, #0
 80065b8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ba:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	330c      	adds	r3, #12
 80065c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80065ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80065d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	330c      	adds	r3, #12
 80065d8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80065da:	65ba      	str	r2, [r7, #88]	@ 0x58
 80065dc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80065e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80065e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e5      	bne.n	80065ba <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	3314      	adds	r3, #20
 80065f4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065f8:	e853 3f00 	ldrex	r3, [r3]
 80065fc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80065fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006600:	f023 0301 	bic.w	r3, r3, #1
 8006604:	667b      	str	r3, [r7, #100]	@ 0x64
 8006606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	3314      	adds	r3, #20
 800660c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800660e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006610:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006616:	e841 2300 	strex	r3, r2, [r1]
 800661a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800661c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800661e:	2b00      	cmp	r3, #0
 8006620:	d1e5      	bne.n	80065ee <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006622:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3314      	adds	r3, #20
 8006628:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662c:	e853 3f00 	ldrex	r3, [r3]
 8006630:	623b      	str	r3, [r7, #32]
   return(result);
 8006632:	6a3b      	ldr	r3, [r7, #32]
 8006634:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006638:	663b      	str	r3, [r7, #96]	@ 0x60
 800663a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3314      	adds	r3, #20
 8006640:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006642:	633a      	str	r2, [r7, #48]	@ 0x30
 8006644:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006646:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006648:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800664a:	e841 2300 	strex	r3, r2, [r1]
 800664e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	2b00      	cmp	r3, #0
 8006654:	d1e5      	bne.n	8006622 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006656:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006658:	2220      	movs	r2, #32
 800665a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800665e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006662:	2b01      	cmp	r3, #1
 8006664:	d119      	bne.n	800669a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006666:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	330c      	adds	r3, #12
 800666c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	60fb      	str	r3, [r7, #12]
   return(result);
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	f023 0310 	bic.w	r3, r3, #16
 800667c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800667e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	330c      	adds	r3, #12
 8006684:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006686:	61fa      	str	r2, [r7, #28]
 8006688:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668a:	69b9      	ldr	r1, [r7, #24]
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	e841 2300 	strex	r3, r2, [r1]
 8006692:	617b      	str	r3, [r7, #20]
   return(result);
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d1e5      	bne.n	8006666 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800669a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800669c:	2200      	movs	r2, #0
 800669e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d106      	bne.n	80066b6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80066a8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066aa:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066ac:	4619      	mov	r1, r3
 80066ae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80066b0:	f7f9 ff1e 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066b4:	e002      	b.n	80066bc <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80066b6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80066b8:	f7ff ff50 	bl	800655c <HAL_UART_RxCpltCallback>
}
 80066bc:	bf00      	nop
 80066be:	3770      	adds	r7, #112	@ 0x70
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b084      	sub	sp, #16
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066d0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	2201      	movs	r2, #1
 80066d6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d108      	bne.n	80066f2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80066e4:	085b      	lsrs	r3, r3, #1
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	4619      	mov	r1, r3
 80066ea:	68f8      	ldr	r0, [r7, #12]
 80066ec:	f7f9 ff00 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80066f0:	e002      	b.n	80066f8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80066f2:	68f8      	ldr	r0, [r7, #12]
 80066f4:	f7ff ff3c 	bl	8006570 <HAL_UART_RxHalfCpltCallback>
}
 80066f8:	bf00      	nop
 80066fa:	3710      	adds	r7, #16
 80066fc:	46bd      	mov	sp, r7
 80066fe:	bd80      	pop	{r7, pc}

08006700 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b084      	sub	sp, #16
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006710:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800671c:	2b80      	cmp	r3, #128	@ 0x80
 800671e:	bf0c      	ite	eq
 8006720:	2301      	moveq	r3, #1
 8006722:	2300      	movne	r3, #0
 8006724:	b2db      	uxtb	r3, r3
 8006726:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800672e:	b2db      	uxtb	r3, r3
 8006730:	2b21      	cmp	r3, #33	@ 0x21
 8006732:	d108      	bne.n	8006746 <UART_DMAError+0x46>
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d005      	beq.n	8006746 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2200      	movs	r2, #0
 800673e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006740:	68b8      	ldr	r0, [r7, #8]
 8006742:	f000 f8c1 	bl	80068c8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	695b      	ldr	r3, [r3, #20]
 800674c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006750:	2b40      	cmp	r3, #64	@ 0x40
 8006752:	bf0c      	ite	eq
 8006754:	2301      	moveq	r3, #1
 8006756:	2300      	movne	r3, #0
 8006758:	b2db      	uxtb	r3, r3
 800675a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006762:	b2db      	uxtb	r3, r3
 8006764:	2b22      	cmp	r3, #34	@ 0x22
 8006766:	d108      	bne.n	800677a <UART_DMAError+0x7a>
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d005      	beq.n	800677a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	2200      	movs	r2, #0
 8006772:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006774:	68b8      	ldr	r0, [r7, #8]
 8006776:	f000 f8cf 	bl	8006918 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800677e:	f043 0210 	orr.w	r2, r3, #16
 8006782:	68bb      	ldr	r3, [r7, #8]
 8006784:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006786:	68b8      	ldr	r0, [r7, #8]
 8006788:	f7ff fefc 	bl	8006584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678c:	bf00      	nop
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b098      	sub	sp, #96	@ 0x60
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	60b9      	str	r1, [r7, #8]
 800679e:	4613      	mov	r3, r2
 80067a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	88fa      	ldrh	r2, [r7, #6]
 80067ac:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2222      	movs	r2, #34	@ 0x22
 80067b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c0:	4a3e      	ldr	r2, [pc, #248]	@ (80068bc <UART_Start_Receive_DMA+0x128>)
 80067c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067c8:	4a3d      	ldr	r2, [pc, #244]	@ (80068c0 <UART_Start_Receive_DMA+0x12c>)
 80067ca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d0:	4a3c      	ldr	r2, [pc, #240]	@ (80068c4 <UART_Start_Receive_DMA+0x130>)
 80067d2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80067d8:	2200      	movs	r2, #0
 80067da:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80067dc:	f107 0308 	add.w	r3, r7, #8
 80067e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	88fb      	ldrh	r3, [r7, #6]
 80067f4:	f7fd f822 	bl	800383c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80067f8:	2300      	movs	r3, #0
 80067fa:	613b      	str	r3, [r7, #16]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	613b      	str	r3, [r7, #16]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	613b      	str	r3, [r7, #16]
 800680c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	691b      	ldr	r3, [r3, #16]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d019      	beq.n	800684a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	330c      	adds	r3, #12
 800681c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006820:	e853 3f00 	ldrex	r3, [r3]
 8006824:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006826:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006828:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800682c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	330c      	adds	r3, #12
 8006834:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006836:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006838:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800683a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800683c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800683e:	e841 2300 	strex	r3, r2, [r1]
 8006842:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1e5      	bne.n	8006816 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	3314      	adds	r3, #20
 8006850:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006852:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006854:	e853 3f00 	ldrex	r3, [r3]
 8006858:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800685a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685c:	f043 0301 	orr.w	r3, r3, #1
 8006860:	657b      	str	r3, [r7, #84]	@ 0x54
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	3314      	adds	r3, #20
 8006868:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800686a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800686c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006870:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006872:	e841 2300 	strex	r3, r2, [r1]
 8006876:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	2b00      	cmp	r3, #0
 800687c:	d1e5      	bne.n	800684a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	3314      	adds	r3, #20
 8006884:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006886:	69bb      	ldr	r3, [r7, #24]
 8006888:	e853 3f00 	ldrex	r3, [r3]
 800688c:	617b      	str	r3, [r7, #20]
   return(result);
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006894:	653b      	str	r3, [r7, #80]	@ 0x50
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3314      	adds	r3, #20
 800689c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800689e:	627a      	str	r2, [r7, #36]	@ 0x24
 80068a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a2:	6a39      	ldr	r1, [r7, #32]
 80068a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068a6:	e841 2300 	strex	r3, r2, [r1]
 80068aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d1e5      	bne.n	800687e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	4618      	mov	r0, r3
 80068b6:	3760      	adds	r7, #96	@ 0x60
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	08006599 	.word	0x08006599
 80068c0:	080066c5 	.word	0x080066c5
 80068c4:	08006701 	.word	0x08006701

080068c8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b089      	sub	sp, #36	@ 0x24
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	330c      	adds	r3, #12
 80068d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	e853 3f00 	ldrex	r3, [r3]
 80068de:	60bb      	str	r3, [r7, #8]
   return(result);
 80068e0:	68bb      	ldr	r3, [r7, #8]
 80068e2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80068e6:	61fb      	str	r3, [r7, #28]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	330c      	adds	r3, #12
 80068ee:	69fa      	ldr	r2, [r7, #28]
 80068f0:	61ba      	str	r2, [r7, #24]
 80068f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068f4:	6979      	ldr	r1, [r7, #20]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	e841 2300 	strex	r3, r2, [r1]
 80068fc:	613b      	str	r3, [r7, #16]
   return(result);
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d1e5      	bne.n	80068d0 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 800690c:	bf00      	nop
 800690e:	3724      	adds	r7, #36	@ 0x24
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006918:	b480      	push	{r7}
 800691a:	b095      	sub	sp, #84	@ 0x54
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	330c      	adds	r3, #12
 8006926:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800692a:	e853 3f00 	ldrex	r3, [r3]
 800692e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	330c      	adds	r3, #12
 800693e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006940:	643a      	str	r2, [r7, #64]	@ 0x40
 8006942:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006944:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006948:	e841 2300 	strex	r3, r2, [r1]
 800694c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800694e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006950:	2b00      	cmp	r3, #0
 8006952:	d1e5      	bne.n	8006920 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	3314      	adds	r3, #20
 800695a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	6a3b      	ldr	r3, [r7, #32]
 800695e:	e853 3f00 	ldrex	r3, [r3]
 8006962:	61fb      	str	r3, [r7, #28]
   return(result);
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	f023 0301 	bic.w	r3, r3, #1
 800696a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	3314      	adds	r3, #20
 8006972:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006974:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006976:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006978:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800697a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800697c:	e841 2300 	strex	r3, r2, [r1]
 8006980:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006984:	2b00      	cmp	r3, #0
 8006986:	d1e5      	bne.n	8006954 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800698c:	2b01      	cmp	r3, #1
 800698e:	d119      	bne.n	80069c4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	330c      	adds	r3, #12
 8006996:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	e853 3f00 	ldrex	r3, [r3]
 800699e:	60bb      	str	r3, [r7, #8]
   return(result);
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f023 0310 	bic.w	r3, r3, #16
 80069a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	330c      	adds	r3, #12
 80069ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80069b0:	61ba      	str	r2, [r7, #24]
 80069b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6979      	ldr	r1, [r7, #20]
 80069b6:	69ba      	ldr	r2, [r7, #24]
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	613b      	str	r3, [r7, #16]
   return(result);
 80069be:	693b      	ldr	r3, [r7, #16]
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e5      	bne.n	8006990 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2220      	movs	r2, #32
 80069c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2200      	movs	r2, #0
 80069d0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80069d2:	bf00      	nop
 80069d4:	3754      	adds	r7, #84	@ 0x54
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr

080069de <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80069de:	b580      	push	{r7, lr}
 80069e0:	b084      	sub	sp, #16
 80069e2:	af00      	add	r7, sp, #0
 80069e4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069ea:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	2200      	movs	r2, #0
 80069f0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7ff fdc3 	bl	8006584 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069fe:	bf00      	nop
 8006a00:	3710      	adds	r7, #16
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}

08006a06 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b21      	cmp	r3, #33	@ 0x21
 8006a18:	d13e      	bne.n	8006a98 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a22:	d114      	bne.n	8006a4e <UART_Transmit_IT+0x48>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	691b      	ldr	r3, [r3, #16]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d110      	bne.n	8006a4e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	6a1b      	ldr	r3, [r3, #32]
 8006a30:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006a40:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a1b      	ldr	r3, [r3, #32]
 8006a46:	1c9a      	adds	r2, r3, #2
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	621a      	str	r2, [r3, #32]
 8006a4c:	e008      	b.n	8006a60 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	1c59      	adds	r1, r3, #1
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	6211      	str	r1, [r2, #32]
 8006a58:	781a      	ldrb	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	3b01      	subs	r3, #1
 8006a68:	b29b      	uxth	r3, r3
 8006a6a:	687a      	ldr	r2, [r7, #4]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d10f      	bne.n	8006a94 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a82:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	68da      	ldr	r2, [r3, #12]
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a92:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a94:	2300      	movs	r3, #0
 8006a96:	e000      	b.n	8006a9a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a98:	2302      	movs	r3, #2
  }
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3714      	adds	r7, #20
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aa4:	4770      	bx	lr

08006aa6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b082      	sub	sp, #8
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	68da      	ldr	r2, [r3, #12]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006abc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2220      	movs	r2, #32
 8006ac2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f7ff fd3e 	bl	8006548 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006ad6:	b580      	push	{r7, lr}
 8006ad8:	b08c      	sub	sp, #48	@ 0x30
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b22      	cmp	r3, #34	@ 0x22
 8006ae8:	f040 80ae 	bne.w	8006c48 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	689b      	ldr	r3, [r3, #8]
 8006af0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006af4:	d117      	bne.n	8006b26 <UART_Receive_IT+0x50>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	691b      	ldr	r3, [r3, #16]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d113      	bne.n	8006b26 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b06:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	b29b      	uxth	r3, r3
 8006b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b18:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b1e:	1c9a      	adds	r2, r3, #2
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b24:	e026      	b.n	8006b74 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b38:	d007      	beq.n	8006b4a <UART_Receive_IT+0x74>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	689b      	ldr	r3, [r3, #8]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10a      	bne.n	8006b58 <UART_Receive_IT+0x82>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	691b      	ldr	r3, [r3, #16]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d106      	bne.n	8006b58 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	b2da      	uxtb	r2, r3
 8006b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b54:	701a      	strb	r2, [r3, #0]
 8006b56:	e008      	b.n	8006b6a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b2db      	uxtb	r3, r3
 8006b60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b64:	b2da      	uxtb	r2, r3
 8006b66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b68:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29b      	uxth	r3, r3
 8006b7e:	687a      	ldr	r2, [r7, #4]
 8006b80:	4619      	mov	r1, r3
 8006b82:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d15d      	bne.n	8006c44 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68da      	ldr	r2, [r3, #12]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f022 0220 	bic.w	r2, r2, #32
 8006b96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68da      	ldr	r2, [r3, #12]
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006ba6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	695a      	ldr	r2, [r3, #20]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f022 0201 	bic.w	r2, r2, #1
 8006bb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2220      	movs	r2, #32
 8006bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d135      	bne.n	8006c3a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	330c      	adds	r3, #12
 8006bda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bdc:	697b      	ldr	r3, [r7, #20]
 8006bde:	e853 3f00 	ldrex	r3, [r3]
 8006be2:	613b      	str	r3, [r7, #16]
   return(result);
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	f023 0310 	bic.w	r3, r3, #16
 8006bea:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	330c      	adds	r3, #12
 8006bf2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006bf4:	623a      	str	r2, [r7, #32]
 8006bf6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf8:	69f9      	ldr	r1, [r7, #28]
 8006bfa:	6a3a      	ldr	r2, [r7, #32]
 8006bfc:	e841 2300 	strex	r3, r2, [r1]
 8006c00:	61bb      	str	r3, [r7, #24]
   return(result);
 8006c02:	69bb      	ldr	r3, [r7, #24]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d1e5      	bne.n	8006bd4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0310 	and.w	r3, r3, #16
 8006c12:	2b10      	cmp	r3, #16
 8006c14:	d10a      	bne.n	8006c2c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	60fb      	str	r3, [r7, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	60fb      	str	r3, [r7, #12]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006c30:	4619      	mov	r1, r3
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7f9 fc5c 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
 8006c38:	e002      	b.n	8006c40 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7ff fc8e 	bl	800655c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006c40:	2300      	movs	r3, #0
 8006c42:	e002      	b.n	8006c4a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006c44:	2300      	movs	r3, #0
 8006c46:	e000      	b.n	8006c4a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006c48:	2302      	movs	r3, #2
  }
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3730      	adds	r7, #48	@ 0x30
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}
	...

08006c54 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c58:	b0c0      	sub	sp, #256	@ 0x100
 8006c5a:	af00      	add	r7, sp, #0
 8006c5c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	691b      	ldr	r3, [r3, #16]
 8006c68:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c70:	68d9      	ldr	r1, [r3, #12]
 8006c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	ea40 0301 	orr.w	r3, r0, r1
 8006c7c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c88:	691b      	ldr	r3, [r3, #16]
 8006c8a:	431a      	orrs	r2, r3
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c90:	695b      	ldr	r3, [r3, #20]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c98:	69db      	ldr	r3, [r3, #28]
 8006c9a:	4313      	orrs	r3, r2
 8006c9c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006cac:	f021 010c 	bic.w	r1, r1, #12
 8006cb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb4:	681a      	ldr	r2, [r3, #0]
 8006cb6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cba:	430b      	orrs	r3, r1
 8006cbc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cce:	6999      	ldr	r1, [r3, #24]
 8006cd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	ea40 0301 	orr.w	r3, r0, r1
 8006cda:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b8f      	ldr	r3, [pc, #572]	@ (8006f20 <UART_SetConfig+0x2cc>)
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d005      	beq.n	8006cf4 <UART_SetConfig+0xa0>
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cec:	681a      	ldr	r2, [r3, #0]
 8006cee:	4b8d      	ldr	r3, [pc, #564]	@ (8006f24 <UART_SetConfig+0x2d0>)
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d104      	bne.n	8006cfe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006cf4:	f7fe f87c 	bl	8004df0 <HAL_RCC_GetPCLK2Freq>
 8006cf8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006cfc:	e003      	b.n	8006d06 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cfe:	f7fe f863 	bl	8004dc8 <HAL_RCC_GetPCLK1Freq>
 8006d02:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0a:	69db      	ldr	r3, [r3, #28]
 8006d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d10:	f040 810c 	bne.w	8006f2c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d14:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d18:	2200      	movs	r2, #0
 8006d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d1e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d22:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d26:	4622      	mov	r2, r4
 8006d28:	462b      	mov	r3, r5
 8006d2a:	1891      	adds	r1, r2, r2
 8006d2c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d2e:	415b      	adcs	r3, r3
 8006d30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d32:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d36:	4621      	mov	r1, r4
 8006d38:	eb12 0801 	adds.w	r8, r2, r1
 8006d3c:	4629      	mov	r1, r5
 8006d3e:	eb43 0901 	adc.w	r9, r3, r1
 8006d42:	f04f 0200 	mov.w	r2, #0
 8006d46:	f04f 0300 	mov.w	r3, #0
 8006d4a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d4e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d52:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d56:	4690      	mov	r8, r2
 8006d58:	4699      	mov	r9, r3
 8006d5a:	4623      	mov	r3, r4
 8006d5c:	eb18 0303 	adds.w	r3, r8, r3
 8006d60:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d64:	462b      	mov	r3, r5
 8006d66:	eb49 0303 	adc.w	r3, r9, r3
 8006d6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d7a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d7e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d82:	460b      	mov	r3, r1
 8006d84:	18db      	adds	r3, r3, r3
 8006d86:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d88:	4613      	mov	r3, r2
 8006d8a:	eb42 0303 	adc.w	r3, r2, r3
 8006d8e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d90:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d94:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d98:	f7f9 fa1a 	bl	80001d0 <__aeabi_uldivmod>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	460b      	mov	r3, r1
 8006da0:	4b61      	ldr	r3, [pc, #388]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006da2:	fba3 2302 	umull	r2, r3, r3, r2
 8006da6:	095b      	lsrs	r3, r3, #5
 8006da8:	011c      	lsls	r4, r3, #4
 8006daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dae:	2200      	movs	r2, #0
 8006db0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006db4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006db8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006dbc:	4642      	mov	r2, r8
 8006dbe:	464b      	mov	r3, r9
 8006dc0:	1891      	adds	r1, r2, r2
 8006dc2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006dc4:	415b      	adcs	r3, r3
 8006dc6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dc8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006dcc:	4641      	mov	r1, r8
 8006dce:	eb12 0a01 	adds.w	sl, r2, r1
 8006dd2:	4649      	mov	r1, r9
 8006dd4:	eb43 0b01 	adc.w	fp, r3, r1
 8006dd8:	f04f 0200 	mov.w	r2, #0
 8006ddc:	f04f 0300 	mov.w	r3, #0
 8006de0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006de4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006de8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006dec:	4692      	mov	sl, r2
 8006dee:	469b      	mov	fp, r3
 8006df0:	4643      	mov	r3, r8
 8006df2:	eb1a 0303 	adds.w	r3, sl, r3
 8006df6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006dfa:	464b      	mov	r3, r9
 8006dfc:	eb4b 0303 	adc.w	r3, fp, r3
 8006e00:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e10:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	18db      	adds	r3, r3, r3
 8006e1c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e1e:	4613      	mov	r3, r2
 8006e20:	eb42 0303 	adc.w	r3, r2, r3
 8006e24:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e26:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e2a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e2e:	f7f9 f9cf 	bl	80001d0 <__aeabi_uldivmod>
 8006e32:	4602      	mov	r2, r0
 8006e34:	460b      	mov	r3, r1
 8006e36:	4611      	mov	r1, r2
 8006e38:	4b3b      	ldr	r3, [pc, #236]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006e3a:	fba3 2301 	umull	r2, r3, r3, r1
 8006e3e:	095b      	lsrs	r3, r3, #5
 8006e40:	2264      	movs	r2, #100	@ 0x64
 8006e42:	fb02 f303 	mul.w	r3, r2, r3
 8006e46:	1acb      	subs	r3, r1, r3
 8006e48:	00db      	lsls	r3, r3, #3
 8006e4a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e4e:	4b36      	ldr	r3, [pc, #216]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006e50:	fba3 2302 	umull	r2, r3, r3, r2
 8006e54:	095b      	lsrs	r3, r3, #5
 8006e56:	005b      	lsls	r3, r3, #1
 8006e58:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e5c:	441c      	add	r4, r3
 8006e5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e62:	2200      	movs	r2, #0
 8006e64:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e68:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e6c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e70:	4642      	mov	r2, r8
 8006e72:	464b      	mov	r3, r9
 8006e74:	1891      	adds	r1, r2, r2
 8006e76:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e78:	415b      	adcs	r3, r3
 8006e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e7c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e80:	4641      	mov	r1, r8
 8006e82:	1851      	adds	r1, r2, r1
 8006e84:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e86:	4649      	mov	r1, r9
 8006e88:	414b      	adcs	r3, r1
 8006e8a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e8c:	f04f 0200 	mov.w	r2, #0
 8006e90:	f04f 0300 	mov.w	r3, #0
 8006e94:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e98:	4659      	mov	r1, fp
 8006e9a:	00cb      	lsls	r3, r1, #3
 8006e9c:	4651      	mov	r1, sl
 8006e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ea2:	4651      	mov	r1, sl
 8006ea4:	00ca      	lsls	r2, r1, #3
 8006ea6:	4610      	mov	r0, r2
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	4603      	mov	r3, r0
 8006eac:	4642      	mov	r2, r8
 8006eae:	189b      	adds	r3, r3, r2
 8006eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006eb4:	464b      	mov	r3, r9
 8006eb6:	460a      	mov	r2, r1
 8006eb8:	eb42 0303 	adc.w	r3, r2, r3
 8006ebc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006ecc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006ed0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006ed4:	460b      	mov	r3, r1
 8006ed6:	18db      	adds	r3, r3, r3
 8006ed8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006eda:	4613      	mov	r3, r2
 8006edc:	eb42 0303 	adc.w	r3, r2, r3
 8006ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ee2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006ee6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006eea:	f7f9 f971 	bl	80001d0 <__aeabi_uldivmod>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006ef4:	fba3 1302 	umull	r1, r3, r3, r2
 8006ef8:	095b      	lsrs	r3, r3, #5
 8006efa:	2164      	movs	r1, #100	@ 0x64
 8006efc:	fb01 f303 	mul.w	r3, r1, r3
 8006f00:	1ad3      	subs	r3, r2, r3
 8006f02:	00db      	lsls	r3, r3, #3
 8006f04:	3332      	adds	r3, #50	@ 0x32
 8006f06:	4a08      	ldr	r2, [pc, #32]	@ (8006f28 <UART_SetConfig+0x2d4>)
 8006f08:	fba2 2303 	umull	r2, r3, r2, r3
 8006f0c:	095b      	lsrs	r3, r3, #5
 8006f0e:	f003 0207 	and.w	r2, r3, #7
 8006f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4422      	add	r2, r4
 8006f1a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f1c:	e106      	b.n	800712c <UART_SetConfig+0x4d8>
 8006f1e:	bf00      	nop
 8006f20:	40011000 	.word	0x40011000
 8006f24:	40011400 	.word	0x40011400
 8006f28:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f30:	2200      	movs	r2, #0
 8006f32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f36:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f3a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f3e:	4642      	mov	r2, r8
 8006f40:	464b      	mov	r3, r9
 8006f42:	1891      	adds	r1, r2, r2
 8006f44:	6239      	str	r1, [r7, #32]
 8006f46:	415b      	adcs	r3, r3
 8006f48:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f4a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f4e:	4641      	mov	r1, r8
 8006f50:	1854      	adds	r4, r2, r1
 8006f52:	4649      	mov	r1, r9
 8006f54:	eb43 0501 	adc.w	r5, r3, r1
 8006f58:	f04f 0200 	mov.w	r2, #0
 8006f5c:	f04f 0300 	mov.w	r3, #0
 8006f60:	00eb      	lsls	r3, r5, #3
 8006f62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f66:	00e2      	lsls	r2, r4, #3
 8006f68:	4614      	mov	r4, r2
 8006f6a:	461d      	mov	r5, r3
 8006f6c:	4643      	mov	r3, r8
 8006f6e:	18e3      	adds	r3, r4, r3
 8006f70:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f74:	464b      	mov	r3, r9
 8006f76:	eb45 0303 	adc.w	r3, r5, r3
 8006f7a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f82:	685b      	ldr	r3, [r3, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f8a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f8e:	f04f 0200 	mov.w	r2, #0
 8006f92:	f04f 0300 	mov.w	r3, #0
 8006f96:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f9a:	4629      	mov	r1, r5
 8006f9c:	008b      	lsls	r3, r1, #2
 8006f9e:	4621      	mov	r1, r4
 8006fa0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	008a      	lsls	r2, r1, #2
 8006fa8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fac:	f7f9 f910 	bl	80001d0 <__aeabi_uldivmod>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	460b      	mov	r3, r1
 8006fb4:	4b60      	ldr	r3, [pc, #384]	@ (8007138 <UART_SetConfig+0x4e4>)
 8006fb6:	fba3 2302 	umull	r2, r3, r3, r2
 8006fba:	095b      	lsrs	r3, r3, #5
 8006fbc:	011c      	lsls	r4, r3, #4
 8006fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006fc8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006fcc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006fd0:	4642      	mov	r2, r8
 8006fd2:	464b      	mov	r3, r9
 8006fd4:	1891      	adds	r1, r2, r2
 8006fd6:	61b9      	str	r1, [r7, #24]
 8006fd8:	415b      	adcs	r3, r3
 8006fda:	61fb      	str	r3, [r7, #28]
 8006fdc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006fe0:	4641      	mov	r1, r8
 8006fe2:	1851      	adds	r1, r2, r1
 8006fe4:	6139      	str	r1, [r7, #16]
 8006fe6:	4649      	mov	r1, r9
 8006fe8:	414b      	adcs	r3, r1
 8006fea:	617b      	str	r3, [r7, #20]
 8006fec:	f04f 0200 	mov.w	r2, #0
 8006ff0:	f04f 0300 	mov.w	r3, #0
 8006ff4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006ff8:	4659      	mov	r1, fp
 8006ffa:	00cb      	lsls	r3, r1, #3
 8006ffc:	4651      	mov	r1, sl
 8006ffe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007002:	4651      	mov	r1, sl
 8007004:	00ca      	lsls	r2, r1, #3
 8007006:	4610      	mov	r0, r2
 8007008:	4619      	mov	r1, r3
 800700a:	4603      	mov	r3, r0
 800700c:	4642      	mov	r2, r8
 800700e:	189b      	adds	r3, r3, r2
 8007010:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007014:	464b      	mov	r3, r9
 8007016:	460a      	mov	r2, r1
 8007018:	eb42 0303 	adc.w	r3, r2, r3
 800701c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007024:	685b      	ldr	r3, [r3, #4]
 8007026:	2200      	movs	r2, #0
 8007028:	67bb      	str	r3, [r7, #120]	@ 0x78
 800702a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800702c:	f04f 0200 	mov.w	r2, #0
 8007030:	f04f 0300 	mov.w	r3, #0
 8007034:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007038:	4649      	mov	r1, r9
 800703a:	008b      	lsls	r3, r1, #2
 800703c:	4641      	mov	r1, r8
 800703e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007042:	4641      	mov	r1, r8
 8007044:	008a      	lsls	r2, r1, #2
 8007046:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800704a:	f7f9 f8c1 	bl	80001d0 <__aeabi_uldivmod>
 800704e:	4602      	mov	r2, r0
 8007050:	460b      	mov	r3, r1
 8007052:	4611      	mov	r1, r2
 8007054:	4b38      	ldr	r3, [pc, #224]	@ (8007138 <UART_SetConfig+0x4e4>)
 8007056:	fba3 2301 	umull	r2, r3, r3, r1
 800705a:	095b      	lsrs	r3, r3, #5
 800705c:	2264      	movs	r2, #100	@ 0x64
 800705e:	fb02 f303 	mul.w	r3, r2, r3
 8007062:	1acb      	subs	r3, r1, r3
 8007064:	011b      	lsls	r3, r3, #4
 8007066:	3332      	adds	r3, #50	@ 0x32
 8007068:	4a33      	ldr	r2, [pc, #204]	@ (8007138 <UART_SetConfig+0x4e4>)
 800706a:	fba2 2303 	umull	r2, r3, r2, r3
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007074:	441c      	add	r4, r3
 8007076:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800707a:	2200      	movs	r2, #0
 800707c:	673b      	str	r3, [r7, #112]	@ 0x70
 800707e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007080:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007084:	4642      	mov	r2, r8
 8007086:	464b      	mov	r3, r9
 8007088:	1891      	adds	r1, r2, r2
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	415b      	adcs	r3, r3
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007094:	4641      	mov	r1, r8
 8007096:	1851      	adds	r1, r2, r1
 8007098:	6039      	str	r1, [r7, #0]
 800709a:	4649      	mov	r1, r9
 800709c:	414b      	adcs	r3, r1
 800709e:	607b      	str	r3, [r7, #4]
 80070a0:	f04f 0200 	mov.w	r2, #0
 80070a4:	f04f 0300 	mov.w	r3, #0
 80070a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070ac:	4659      	mov	r1, fp
 80070ae:	00cb      	lsls	r3, r1, #3
 80070b0:	4651      	mov	r1, sl
 80070b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070b6:	4651      	mov	r1, sl
 80070b8:	00ca      	lsls	r2, r1, #3
 80070ba:	4610      	mov	r0, r2
 80070bc:	4619      	mov	r1, r3
 80070be:	4603      	mov	r3, r0
 80070c0:	4642      	mov	r2, r8
 80070c2:	189b      	adds	r3, r3, r2
 80070c4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070c6:	464b      	mov	r3, r9
 80070c8:	460a      	mov	r2, r1
 80070ca:	eb42 0303 	adc.w	r3, r2, r3
 80070ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80070d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80070da:	667a      	str	r2, [r7, #100]	@ 0x64
 80070dc:	f04f 0200 	mov.w	r2, #0
 80070e0:	f04f 0300 	mov.w	r3, #0
 80070e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80070e8:	4649      	mov	r1, r9
 80070ea:	008b      	lsls	r3, r1, #2
 80070ec:	4641      	mov	r1, r8
 80070ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070f2:	4641      	mov	r1, r8
 80070f4:	008a      	lsls	r2, r1, #2
 80070f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80070fa:	f7f9 f869 	bl	80001d0 <__aeabi_uldivmod>
 80070fe:	4602      	mov	r2, r0
 8007100:	460b      	mov	r3, r1
 8007102:	4b0d      	ldr	r3, [pc, #52]	@ (8007138 <UART_SetConfig+0x4e4>)
 8007104:	fba3 1302 	umull	r1, r3, r3, r2
 8007108:	095b      	lsrs	r3, r3, #5
 800710a:	2164      	movs	r1, #100	@ 0x64
 800710c:	fb01 f303 	mul.w	r3, r1, r3
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	011b      	lsls	r3, r3, #4
 8007114:	3332      	adds	r3, #50	@ 0x32
 8007116:	4a08      	ldr	r2, [pc, #32]	@ (8007138 <UART_SetConfig+0x4e4>)
 8007118:	fba2 2303 	umull	r2, r3, r2, r3
 800711c:	095b      	lsrs	r3, r3, #5
 800711e:	f003 020f 	and.w	r2, r3, #15
 8007122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	4422      	add	r2, r4
 800712a:	609a      	str	r2, [r3, #8]
}
 800712c:	bf00      	nop
 800712e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007132:	46bd      	mov	sp, r7
 8007134:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007138:	51eb851f 	.word	0x51eb851f

0800713c <__NVIC_SetPriority>:
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	4603      	mov	r3, r0
 8007144:	6039      	str	r1, [r7, #0]
 8007146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800714c:	2b00      	cmp	r3, #0
 800714e:	db0a      	blt.n	8007166 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	b2da      	uxtb	r2, r3
 8007154:	490c      	ldr	r1, [pc, #48]	@ (8007188 <__NVIC_SetPriority+0x4c>)
 8007156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800715a:	0112      	lsls	r2, r2, #4
 800715c:	b2d2      	uxtb	r2, r2
 800715e:	440b      	add	r3, r1
 8007160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007164:	e00a      	b.n	800717c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	b2da      	uxtb	r2, r3
 800716a:	4908      	ldr	r1, [pc, #32]	@ (800718c <__NVIC_SetPriority+0x50>)
 800716c:	79fb      	ldrb	r3, [r7, #7]
 800716e:	f003 030f 	and.w	r3, r3, #15
 8007172:	3b04      	subs	r3, #4
 8007174:	0112      	lsls	r2, r2, #4
 8007176:	b2d2      	uxtb	r2, r2
 8007178:	440b      	add	r3, r1
 800717a:	761a      	strb	r2, [r3, #24]
}
 800717c:	bf00      	nop
 800717e:	370c      	adds	r7, #12
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	e000e100 	.word	0xe000e100
 800718c:	e000ed00 	.word	0xe000ed00

08007190 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007190:	b580      	push	{r7, lr}
 8007192:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007194:	2100      	movs	r1, #0
 8007196:	f06f 0004 	mvn.w	r0, #4
 800719a:	f7ff ffcf 	bl	800713c <__NVIC_SetPriority>
#endif
}
 800719e:	bf00      	nop
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071aa:	f3ef 8305 	mrs	r3, IPSR
 80071ae:	603b      	str	r3, [r7, #0]
  return(result);
 80071b0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80071b6:	f06f 0305 	mvn.w	r3, #5
 80071ba:	607b      	str	r3, [r7, #4]
 80071bc:	e00c      	b.n	80071d8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80071be:	4b0a      	ldr	r3, [pc, #40]	@ (80071e8 <osKernelInitialize+0x44>)
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d105      	bne.n	80071d2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80071c6:	4b08      	ldr	r3, [pc, #32]	@ (80071e8 <osKernelInitialize+0x44>)
 80071c8:	2201      	movs	r2, #1
 80071ca:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80071cc:	2300      	movs	r3, #0
 80071ce:	607b      	str	r3, [r7, #4]
 80071d0:	e002      	b.n	80071d8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80071d2:	f04f 33ff 	mov.w	r3, #4294967295
 80071d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071d8:	687b      	ldr	r3, [r7, #4]
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr
 80071e6:	bf00      	nop
 80071e8:	20000a38 	.word	0x20000a38

080071ec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b082      	sub	sp, #8
 80071f0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071f2:	f3ef 8305 	mrs	r3, IPSR
 80071f6:	603b      	str	r3, [r7, #0]
  return(result);
 80071f8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <osKernelStart+0x1a>
    stat = osErrorISR;
 80071fe:	f06f 0305 	mvn.w	r3, #5
 8007202:	607b      	str	r3, [r7, #4]
 8007204:	e010      	b.n	8007228 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007206:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <osKernelStart+0x48>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d109      	bne.n	8007222 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800720e:	f7ff ffbf 	bl	8007190 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007212:	4b08      	ldr	r3, [pc, #32]	@ (8007234 <osKernelStart+0x48>)
 8007214:	2202      	movs	r2, #2
 8007216:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007218:	f001 f892 	bl	8008340 <vTaskStartScheduler>
      stat = osOK;
 800721c:	2300      	movs	r3, #0
 800721e:	607b      	str	r3, [r7, #4]
 8007220:	e002      	b.n	8007228 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007222:	f04f 33ff 	mov.w	r3, #4294967295
 8007226:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007228:	687b      	ldr	r3, [r7, #4]
}
 800722a:	4618      	mov	r0, r3
 800722c:	3708      	adds	r7, #8
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000a38 	.word	0x20000a38

08007238 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007238:	b580      	push	{r7, lr}
 800723a:	b08e      	sub	sp, #56	@ 0x38
 800723c:	af04      	add	r7, sp, #16
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007244:	2300      	movs	r3, #0
 8007246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007248:	f3ef 8305 	mrs	r3, IPSR
 800724c:	617b      	str	r3, [r7, #20]
  return(result);
 800724e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007250:	2b00      	cmp	r3, #0
 8007252:	d17e      	bne.n	8007352 <osThreadNew+0x11a>
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d07b      	beq.n	8007352 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800725a:	2380      	movs	r3, #128	@ 0x80
 800725c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800725e:	2318      	movs	r3, #24
 8007260:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007262:	2300      	movs	r3, #0
 8007264:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007266:	f04f 33ff 	mov.w	r3, #4294967295
 800726a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d045      	beq.n	80072fe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <osThreadNew+0x48>
        name = attr->name;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	699b      	ldr	r3, [r3, #24]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d002      	beq.n	800728e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	699b      	ldr	r3, [r3, #24]
 800728c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d008      	beq.n	80072a6 <osThreadNew+0x6e>
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	2b38      	cmp	r3, #56	@ 0x38
 8007298:	d805      	bhi.n	80072a6 <osThreadNew+0x6e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	f003 0301 	and.w	r3, r3, #1
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d001      	beq.n	80072aa <osThreadNew+0x72>
        return (NULL);
 80072a6:	2300      	movs	r3, #0
 80072a8:	e054      	b.n	8007354 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	695b      	ldr	r3, [r3, #20]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	695b      	ldr	r3, [r3, #20]
 80072b6:	089b      	lsrs	r3, r3, #2
 80072b8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	689b      	ldr	r3, [r3, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d00e      	beq.n	80072e0 <osThreadNew+0xa8>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	68db      	ldr	r3, [r3, #12]
 80072c6:	2ba7      	cmp	r3, #167	@ 0xa7
 80072c8:	d90a      	bls.n	80072e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d006      	beq.n	80072e0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	695b      	ldr	r3, [r3, #20]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <osThreadNew+0xa8>
        mem = 1;
 80072da:	2301      	movs	r3, #1
 80072dc:	61bb      	str	r3, [r7, #24]
 80072de:	e010      	b.n	8007302 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10c      	bne.n	8007302 <osThreadNew+0xca>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	68db      	ldr	r3, [r3, #12]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d108      	bne.n	8007302 <osThreadNew+0xca>
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	691b      	ldr	r3, [r3, #16]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d104      	bne.n	8007302 <osThreadNew+0xca>
          mem = 0;
 80072f8:	2300      	movs	r3, #0
 80072fa:	61bb      	str	r3, [r7, #24]
 80072fc:	e001      	b.n	8007302 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80072fe:	2300      	movs	r3, #0
 8007300:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007302:	69bb      	ldr	r3, [r7, #24]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d110      	bne.n	800732a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800730c:	687a      	ldr	r2, [r7, #4]
 800730e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007310:	9202      	str	r2, [sp, #8]
 8007312:	9301      	str	r3, [sp, #4]
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	9300      	str	r3, [sp, #0]
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	6a3a      	ldr	r2, [r7, #32]
 800731c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800731e:	68f8      	ldr	r0, [r7, #12]
 8007320:	f000 fe1a 	bl	8007f58 <xTaskCreateStatic>
 8007324:	4603      	mov	r3, r0
 8007326:	613b      	str	r3, [r7, #16]
 8007328:	e013      	b.n	8007352 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d110      	bne.n	8007352 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007330:	6a3b      	ldr	r3, [r7, #32]
 8007332:	b29a      	uxth	r2, r3
 8007334:	f107 0310 	add.w	r3, r7, #16
 8007338:	9301      	str	r3, [sp, #4]
 800733a:	69fb      	ldr	r3, [r7, #28]
 800733c:	9300      	str	r3, [sp, #0]
 800733e:	68bb      	ldr	r3, [r7, #8]
 8007340:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007342:	68f8      	ldr	r0, [r7, #12]
 8007344:	f000 fe68 	bl	8008018 <xTaskCreate>
 8007348:	4603      	mov	r3, r0
 800734a:	2b01      	cmp	r3, #1
 800734c:	d001      	beq.n	8007352 <osThreadNew+0x11a>
            hTask = NULL;
 800734e:	2300      	movs	r3, #0
 8007350:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007352:	693b      	ldr	r3, [r7, #16]
}
 8007354:	4618      	mov	r0, r3
 8007356:	3728      	adds	r7, #40	@ 0x28
 8007358:	46bd      	mov	sp, r7
 800735a:	bd80      	pop	{r7, pc}

0800735c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800735c:	b580      	push	{r7, lr}
 800735e:	b084      	sub	sp, #16
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007364:	f3ef 8305 	mrs	r3, IPSR
 8007368:	60bb      	str	r3, [r7, #8]
  return(result);
 800736a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800736c:	2b00      	cmp	r3, #0
 800736e:	d003      	beq.n	8007378 <osDelay+0x1c>
    stat = osErrorISR;
 8007370:	f06f 0305 	mvn.w	r3, #5
 8007374:	60fb      	str	r3, [r7, #12]
 8007376:	e007      	b.n	8007388 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007378:	2300      	movs	r3, #0
 800737a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d002      	beq.n	8007388 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007382:	6878      	ldr	r0, [r7, #4]
 8007384:	f000 ffa6 	bl	80082d4 <vTaskDelay>
    }
  }

  return (stat);
 8007388:	68fb      	ldr	r3, [r7, #12]
}
 800738a:	4618      	mov	r0, r3
 800738c:	3710      	adds	r7, #16
 800738e:	46bd      	mov	sp, r7
 8007390:	bd80      	pop	{r7, pc}
	...

08007394 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	4a07      	ldr	r2, [pc, #28]	@ (80073c0 <vApplicationGetIdleTaskMemory+0x2c>)
 80073a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	4a06      	ldr	r2, [pc, #24]	@ (80073c4 <vApplicationGetIdleTaskMemory+0x30>)
 80073aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2280      	movs	r2, #128	@ 0x80
 80073b0:	601a      	str	r2, [r3, #0]
}
 80073b2:	bf00      	nop
 80073b4:	3714      	adds	r7, #20
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr
 80073be:	bf00      	nop
 80073c0:	20000a3c 	.word	0x20000a3c
 80073c4:	20000ae4 	.word	0x20000ae4

080073c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80073c8:	b480      	push	{r7}
 80073ca:	b085      	sub	sp, #20
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	60f8      	str	r0, [r7, #12]
 80073d0:	60b9      	str	r1, [r7, #8]
 80073d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	4a07      	ldr	r2, [pc, #28]	@ (80073f4 <vApplicationGetTimerTaskMemory+0x2c>)
 80073d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	4a06      	ldr	r2, [pc, #24]	@ (80073f8 <vApplicationGetTimerTaskMemory+0x30>)
 80073de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80073e6:	601a      	str	r2, [r3, #0]
}
 80073e8:	bf00      	nop
 80073ea:	3714      	adds	r7, #20
 80073ec:	46bd      	mov	sp, r7
 80073ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f2:	4770      	bx	lr
 80073f4:	20000ce4 	.word	0x20000ce4
 80073f8:	20000d8c 	.word	0x20000d8c

080073fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80073fc:	b480      	push	{r7}
 80073fe:	b083      	sub	sp, #12
 8007400:	af00      	add	r7, sp, #0
 8007402:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f103 0208 	add.w	r2, r3, #8
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f04f 32ff 	mov.w	r2, #4294967295
 8007414:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	f103 0208 	add.w	r2, r3, #8
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f103 0208 	add.w	r2, r3, #8
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007430:	bf00      	nop
 8007432:	370c      	adds	r7, #12
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr

0800743c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800743c:	b480      	push	{r7}
 800743e:	b083      	sub	sp, #12
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2200      	movs	r2, #0
 8007448:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800744a:	bf00      	nop
 800744c:	370c      	adds	r7, #12
 800744e:	46bd      	mov	sp, r7
 8007450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007454:	4770      	bx	lr

08007456 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007456:	b480      	push	{r7}
 8007458:	b085      	sub	sp, #20
 800745a:	af00      	add	r7, sp, #0
 800745c:	6078      	str	r0, [r7, #4]
 800745e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	689a      	ldr	r2, [r3, #8]
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	689b      	ldr	r3, [r3, #8]
 8007478:	683a      	ldr	r2, [r7, #0]
 800747a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	687a      	ldr	r2, [r7, #4]
 8007486:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	1c5a      	adds	r2, r3, #1
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	601a      	str	r2, [r3, #0]
}
 8007492:	bf00      	nop
 8007494:	3714      	adds	r7, #20
 8007496:	46bd      	mov	sp, r7
 8007498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749c:	4770      	bx	lr

0800749e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800749e:	b480      	push	{r7}
 80074a0:	b085      	sub	sp, #20
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
 80074a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074b4:	d103      	bne.n	80074be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	691b      	ldr	r3, [r3, #16]
 80074ba:	60fb      	str	r3, [r7, #12]
 80074bc:	e00c      	b.n	80074d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	3308      	adds	r3, #8
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	e002      	b.n	80074cc <vListInsert+0x2e>
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	685b      	ldr	r3, [r3, #4]
 80074ca:	60fb      	str	r3, [r7, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	685b      	ldr	r3, [r3, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	429a      	cmp	r2, r3
 80074d6:	d2f6      	bcs.n	80074c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	685a      	ldr	r2, [r3, #4]
 80074dc:	683b      	ldr	r3, [r7, #0]
 80074de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	685b      	ldr	r3, [r3, #4]
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80074f4:	683b      	ldr	r3, [r7, #0]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	1c5a      	adds	r2, r3, #1
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	601a      	str	r2, [r3, #0]
}
 8007504:	bf00      	nop
 8007506:	3714      	adds	r7, #20
 8007508:	46bd      	mov	sp, r7
 800750a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750e:	4770      	bx	lr

08007510 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007510:	b480      	push	{r7}
 8007512:	b085      	sub	sp, #20
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691b      	ldr	r3, [r3, #16]
 800751c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	687a      	ldr	r2, [r7, #4]
 8007524:	6892      	ldr	r2, [r2, #8]
 8007526:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	687a      	ldr	r2, [r7, #4]
 800752e:	6852      	ldr	r2, [r2, #4]
 8007530:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	687a      	ldr	r2, [r7, #4]
 8007538:	429a      	cmp	r2, r3
 800753a:	d103      	bne.n	8007544 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689a      	ldr	r2, [r3, #8]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	2200      	movs	r2, #0
 8007548:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	1e5a      	subs	r2, r3, #1
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	681b      	ldr	r3, [r3, #0]
}
 8007558:	4618      	mov	r0, r3
 800755a:	3714      	adds	r7, #20
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b084      	sub	sp, #16
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
 800756c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10b      	bne.n	8007590 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800757c:	f383 8811 	msr	BASEPRI, r3
 8007580:	f3bf 8f6f 	isb	sy
 8007584:	f3bf 8f4f 	dsb	sy
 8007588:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800758a:	bf00      	nop
 800758c:	bf00      	nop
 800758e:	e7fd      	b.n	800758c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007590:	f002 f8aa 	bl	80096e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800759c:	68f9      	ldr	r1, [r7, #12]
 800759e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075a0:	fb01 f303 	mul.w	r3, r1, r3
 80075a4:	441a      	add	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	681a      	ldr	r2, [r3, #0]
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075c0:	3b01      	subs	r3, #1
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80075c6:	fb01 f303 	mul.w	r3, r1, r3
 80075ca:	441a      	add	r2, r3
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	22ff      	movs	r2, #255	@ 0xff
 80075d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	22ff      	movs	r2, #255	@ 0xff
 80075dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d114      	bne.n	8007610 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	691b      	ldr	r3, [r3, #16]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d01a      	beq.n	8007624 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	3310      	adds	r3, #16
 80075f2:	4618      	mov	r0, r3
 80075f4:	f001 f942 	bl	800887c <xTaskRemoveFromEventList>
 80075f8:	4603      	mov	r3, r0
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d012      	beq.n	8007624 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <xQueueGenericReset+0xd0>)
 8007600:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007604:	601a      	str	r2, [r3, #0]
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	e009      	b.n	8007624 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3310      	adds	r3, #16
 8007614:	4618      	mov	r0, r3
 8007616:	f7ff fef1 	bl	80073fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	3324      	adds	r3, #36	@ 0x24
 800761e:	4618      	mov	r0, r3
 8007620:	f7ff feec 	bl	80073fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007624:	f002 f892 	bl	800974c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007628:	2301      	movs	r3, #1
}
 800762a:	4618      	mov	r0, r3
 800762c:	3710      	adds	r7, #16
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}
 8007632:	bf00      	nop
 8007634:	e000ed04 	.word	0xe000ed04

08007638 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007638:	b580      	push	{r7, lr}
 800763a:	b08e      	sub	sp, #56	@ 0x38
 800763c:	af02      	add	r7, sp, #8
 800763e:	60f8      	str	r0, [r7, #12]
 8007640:	60b9      	str	r1, [r7, #8]
 8007642:	607a      	str	r2, [r7, #4]
 8007644:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d10b      	bne.n	8007664 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800764c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007650:	f383 8811 	msr	BASEPRI, r3
 8007654:	f3bf 8f6f 	isb	sy
 8007658:	f3bf 8f4f 	dsb	sy
 800765c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800765e:	bf00      	nop
 8007660:	bf00      	nop
 8007662:	e7fd      	b.n	8007660 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10b      	bne.n	8007682 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800767c:	bf00      	nop
 800767e:	bf00      	nop
 8007680:	e7fd      	b.n	800767e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d002      	beq.n	800768e <xQueueGenericCreateStatic+0x56>
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d001      	beq.n	8007692 <xQueueGenericCreateStatic+0x5a>
 800768e:	2301      	movs	r3, #1
 8007690:	e000      	b.n	8007694 <xQueueGenericCreateStatic+0x5c>
 8007692:	2300      	movs	r3, #0
 8007694:	2b00      	cmp	r3, #0
 8007696:	d10b      	bne.n	80076b0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800769c:	f383 8811 	msr	BASEPRI, r3
 80076a0:	f3bf 8f6f 	isb	sy
 80076a4:	f3bf 8f4f 	dsb	sy
 80076a8:	623b      	str	r3, [r7, #32]
}
 80076aa:	bf00      	nop
 80076ac:	bf00      	nop
 80076ae:	e7fd      	b.n	80076ac <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d102      	bne.n	80076bc <xQueueGenericCreateStatic+0x84>
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d101      	bne.n	80076c0 <xQueueGenericCreateStatic+0x88>
 80076bc:	2301      	movs	r3, #1
 80076be:	e000      	b.n	80076c2 <xQueueGenericCreateStatic+0x8a>
 80076c0:	2300      	movs	r3, #0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10b      	bne.n	80076de <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80076c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ca:	f383 8811 	msr	BASEPRI, r3
 80076ce:	f3bf 8f6f 	isb	sy
 80076d2:	f3bf 8f4f 	dsb	sy
 80076d6:	61fb      	str	r3, [r7, #28]
}
 80076d8:	bf00      	nop
 80076da:	bf00      	nop
 80076dc:	e7fd      	b.n	80076da <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80076de:	2350      	movs	r3, #80	@ 0x50
 80076e0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	2b50      	cmp	r3, #80	@ 0x50
 80076e6:	d00b      	beq.n	8007700 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80076e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ec:	f383 8811 	msr	BASEPRI, r3
 80076f0:	f3bf 8f6f 	isb	sy
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	61bb      	str	r3, [r7, #24]
}
 80076fa:	bf00      	nop
 80076fc:	bf00      	nop
 80076fe:	e7fd      	b.n	80076fc <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007700:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007706:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007708:	2b00      	cmp	r3, #0
 800770a:	d00d      	beq.n	8007728 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800770c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770e:	2201      	movs	r2, #1
 8007710:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007714:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800771a:	9300      	str	r3, [sp, #0]
 800771c:	4613      	mov	r3, r2
 800771e:	687a      	ldr	r2, [r7, #4]
 8007720:	68b9      	ldr	r1, [r7, #8]
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f000 f805 	bl	8007732 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800772a:	4618      	mov	r0, r3
 800772c:	3730      	adds	r7, #48	@ 0x30
 800772e:	46bd      	mov	sp, r7
 8007730:	bd80      	pop	{r7, pc}

08007732 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007732:	b580      	push	{r7, lr}
 8007734:	b084      	sub	sp, #16
 8007736:	af00      	add	r7, sp, #0
 8007738:	60f8      	str	r0, [r7, #12]
 800773a:	60b9      	str	r1, [r7, #8]
 800773c:	607a      	str	r2, [r7, #4]
 800773e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d103      	bne.n	800774e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007746:	69bb      	ldr	r3, [r7, #24]
 8007748:	69ba      	ldr	r2, [r7, #24]
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	e002      	b.n	8007754 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800774e:	69bb      	ldr	r3, [r7, #24]
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	68fa      	ldr	r2, [r7, #12]
 8007758:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007760:	2101      	movs	r1, #1
 8007762:	69b8      	ldr	r0, [r7, #24]
 8007764:	f7ff fefe 	bl	8007564 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007768:	69bb      	ldr	r3, [r7, #24]
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007770:	bf00      	nop
 8007772:	3710      	adds	r7, #16
 8007774:	46bd      	mov	sp, r7
 8007776:	bd80      	pop	{r7, pc}

08007778 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b08e      	sub	sp, #56	@ 0x38
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007786:	2300      	movs	r3, #0
 8007788:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800778e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <xQueueGenericSend+0x34>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d103      	bne.n	80077ba <xQueueGenericSend+0x42>
 80077b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d101      	bne.n	80077be <xQueueGenericSend+0x46>
 80077ba:	2301      	movs	r3, #1
 80077bc:	e000      	b.n	80077c0 <xQueueGenericSend+0x48>
 80077be:	2300      	movs	r3, #0
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d10b      	bne.n	80077dc <xQueueGenericSend+0x64>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80077d6:	bf00      	nop
 80077d8:	bf00      	nop
 80077da:	e7fd      	b.n	80077d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d103      	bne.n	80077ea <xQueueGenericSend+0x72>
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077e6:	2b01      	cmp	r3, #1
 80077e8:	d101      	bne.n	80077ee <xQueueGenericSend+0x76>
 80077ea:	2301      	movs	r3, #1
 80077ec:	e000      	b.n	80077f0 <xQueueGenericSend+0x78>
 80077ee:	2300      	movs	r3, #0
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d10b      	bne.n	800780c <xQueueGenericSend+0x94>
	__asm volatile
 80077f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f8:	f383 8811 	msr	BASEPRI, r3
 80077fc:	f3bf 8f6f 	isb	sy
 8007800:	f3bf 8f4f 	dsb	sy
 8007804:	623b      	str	r3, [r7, #32]
}
 8007806:	bf00      	nop
 8007808:	bf00      	nop
 800780a:	e7fd      	b.n	8007808 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800780c:	f001 f9fc 	bl	8008c08 <xTaskGetSchedulerState>
 8007810:	4603      	mov	r3, r0
 8007812:	2b00      	cmp	r3, #0
 8007814:	d102      	bne.n	800781c <xQueueGenericSend+0xa4>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d101      	bne.n	8007820 <xQueueGenericSend+0xa8>
 800781c:	2301      	movs	r3, #1
 800781e:	e000      	b.n	8007822 <xQueueGenericSend+0xaa>
 8007820:	2300      	movs	r3, #0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10b      	bne.n	800783e <xQueueGenericSend+0xc6>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	61fb      	str	r3, [r7, #28]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800783e:	f001 ff53 	bl	80096e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007842:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007844:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007846:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800784a:	429a      	cmp	r2, r3
 800784c:	d302      	bcc.n	8007854 <xQueueGenericSend+0xdc>
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	2b02      	cmp	r3, #2
 8007852:	d129      	bne.n	80078a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007854:	683a      	ldr	r2, [r7, #0]
 8007856:	68b9      	ldr	r1, [r7, #8]
 8007858:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800785a:	f000 fa0f 	bl	8007c7c <prvCopyDataToQueue>
 800785e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007864:	2b00      	cmp	r3, #0
 8007866:	d010      	beq.n	800788a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800786a:	3324      	adds	r3, #36	@ 0x24
 800786c:	4618      	mov	r0, r3
 800786e:	f001 f805 	bl	800887c <xTaskRemoveFromEventList>
 8007872:	4603      	mov	r3, r0
 8007874:	2b00      	cmp	r3, #0
 8007876:	d013      	beq.n	80078a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007878:	4b3f      	ldr	r3, [pc, #252]	@ (8007978 <xQueueGenericSend+0x200>)
 800787a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800787e:	601a      	str	r2, [r3, #0]
 8007880:	f3bf 8f4f 	dsb	sy
 8007884:	f3bf 8f6f 	isb	sy
 8007888:	e00a      	b.n	80078a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800788a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800788c:	2b00      	cmp	r3, #0
 800788e:	d007      	beq.n	80078a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007890:	4b39      	ldr	r3, [pc, #228]	@ (8007978 <xQueueGenericSend+0x200>)
 8007892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007896:	601a      	str	r2, [r3, #0]
 8007898:	f3bf 8f4f 	dsb	sy
 800789c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80078a0:	f001 ff54 	bl	800974c <vPortExitCritical>
				return pdPASS;
 80078a4:	2301      	movs	r3, #1
 80078a6:	e063      	b.n	8007970 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d103      	bne.n	80078b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078ae:	f001 ff4d 	bl	800974c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80078b2:	2300      	movs	r3, #0
 80078b4:	e05c      	b.n	8007970 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80078b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d106      	bne.n	80078ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80078bc:	f107 0314 	add.w	r3, r7, #20
 80078c0:	4618      	mov	r0, r3
 80078c2:	f001 f83f 	bl	8008944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80078c6:	2301      	movs	r3, #1
 80078c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80078ca:	f001 ff3f 	bl	800974c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80078ce:	f000 fda7 	bl	8008420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80078d2:	f001 ff09 	bl	80096e8 <vPortEnterCritical>
 80078d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80078dc:	b25b      	sxtb	r3, r3
 80078de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078e2:	d103      	bne.n	80078ec <xQueueGenericSend+0x174>
 80078e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80078ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078f2:	b25b      	sxtb	r3, r3
 80078f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078f8:	d103      	bne.n	8007902 <xQueueGenericSend+0x18a>
 80078fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007902:	f001 ff23 	bl	800974c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007906:	1d3a      	adds	r2, r7, #4
 8007908:	f107 0314 	add.w	r3, r7, #20
 800790c:	4611      	mov	r1, r2
 800790e:	4618      	mov	r0, r3
 8007910:	f001 f82e 	bl	8008970 <xTaskCheckForTimeOut>
 8007914:	4603      	mov	r3, r0
 8007916:	2b00      	cmp	r3, #0
 8007918:	d124      	bne.n	8007964 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800791a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800791c:	f000 faa6 	bl	8007e6c <prvIsQueueFull>
 8007920:	4603      	mov	r3, r0
 8007922:	2b00      	cmp	r3, #0
 8007924:	d018      	beq.n	8007958 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007928:	3310      	adds	r3, #16
 800792a:	687a      	ldr	r2, [r7, #4]
 800792c:	4611      	mov	r1, r2
 800792e:	4618      	mov	r0, r3
 8007930:	f000 ff52 	bl	80087d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007934:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007936:	f000 fa31 	bl	8007d9c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800793a:	f000 fd7f 	bl	800843c <xTaskResumeAll>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	f47f af7c 	bne.w	800783e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8007946:	4b0c      	ldr	r3, [pc, #48]	@ (8007978 <xQueueGenericSend+0x200>)
 8007948:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	e772      	b.n	800783e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007958:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800795a:	f000 fa1f 	bl	8007d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800795e:	f000 fd6d 	bl	800843c <xTaskResumeAll>
 8007962:	e76c      	b.n	800783e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007964:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007966:	f000 fa19 	bl	8007d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800796a:	f000 fd67 	bl	800843c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800796e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007970:	4618      	mov	r0, r3
 8007972:	3738      	adds	r7, #56	@ 0x38
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	e000ed04 	.word	0xe000ed04

0800797c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b090      	sub	sp, #64	@ 0x40
 8007980:	af00      	add	r7, sp, #0
 8007982:	60f8      	str	r0, [r7, #12]
 8007984:	60b9      	str	r1, [r7, #8]
 8007986:	607a      	str	r2, [r7, #4]
 8007988:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800798e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10b      	bne.n	80079ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d103      	bne.n	80079ba <xQueueGenericSendFromISR+0x3e>
 80079b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d101      	bne.n	80079be <xQueueGenericSendFromISR+0x42>
 80079ba:	2301      	movs	r3, #1
 80079bc:	e000      	b.n	80079c0 <xQueueGenericSendFromISR+0x44>
 80079be:	2300      	movs	r3, #0
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d10b      	bne.n	80079dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80079c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079c8:	f383 8811 	msr	BASEPRI, r3
 80079cc:	f3bf 8f6f 	isb	sy
 80079d0:	f3bf 8f4f 	dsb	sy
 80079d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80079d6:	bf00      	nop
 80079d8:	bf00      	nop
 80079da:	e7fd      	b.n	80079d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d103      	bne.n	80079ea <xQueueGenericSendFromISR+0x6e>
 80079e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d101      	bne.n	80079ee <xQueueGenericSendFromISR+0x72>
 80079ea:	2301      	movs	r3, #1
 80079ec:	e000      	b.n	80079f0 <xQueueGenericSendFromISR+0x74>
 80079ee:	2300      	movs	r3, #0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10b      	bne.n	8007a0c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80079f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079f8:	f383 8811 	msr	BASEPRI, r3
 80079fc:	f3bf 8f6f 	isb	sy
 8007a00:	f3bf 8f4f 	dsb	sy
 8007a04:	623b      	str	r3, [r7, #32]
}
 8007a06:	bf00      	nop
 8007a08:	bf00      	nop
 8007a0a:	e7fd      	b.n	8007a08 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007a0c:	f001 ff4c 	bl	80098a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007a10:	f3ef 8211 	mrs	r2, BASEPRI
 8007a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a18:	f383 8811 	msr	BASEPRI, r3
 8007a1c:	f3bf 8f6f 	isb	sy
 8007a20:	f3bf 8f4f 	dsb	sy
 8007a24:	61fa      	str	r2, [r7, #28]
 8007a26:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007a28:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007a2a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a34:	429a      	cmp	r2, r3
 8007a36:	d302      	bcc.n	8007a3e <xQueueGenericSendFromISR+0xc2>
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	2b02      	cmp	r3, #2
 8007a3c:	d12f      	bne.n	8007a9e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a44:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007a4e:	683a      	ldr	r2, [r7, #0]
 8007a50:	68b9      	ldr	r1, [r7, #8]
 8007a52:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007a54:	f000 f912 	bl	8007c7c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007a58:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8007a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a60:	d112      	bne.n	8007a88 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d016      	beq.n	8007a98 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a6c:	3324      	adds	r3, #36	@ 0x24
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 ff04 	bl	800887c <xTaskRemoveFromEventList>
 8007a74:	4603      	mov	r3, r0
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00e      	beq.n	8007a98 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2201      	movs	r2, #1
 8007a84:	601a      	str	r2, [r3, #0]
 8007a86:	e007      	b.n	8007a98 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a88:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	b25a      	sxtb	r2, r3
 8007a92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a98:	2301      	movs	r3, #1
 8007a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a9c:	e001      	b.n	8007aa2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007aac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007aae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3740      	adds	r7, #64	@ 0x40
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}

08007ab8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b08c      	sub	sp, #48	@ 0x30
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	60f8      	str	r0, [r7, #12]
 8007ac0:	60b9      	str	r1, [r7, #8]
 8007ac2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d10b      	bne.n	8007aea <xQueueReceive+0x32>
	__asm volatile
 8007ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad6:	f383 8811 	msr	BASEPRI, r3
 8007ada:	f3bf 8f6f 	isb	sy
 8007ade:	f3bf 8f4f 	dsb	sy
 8007ae2:	623b      	str	r3, [r7, #32]
}
 8007ae4:	bf00      	nop
 8007ae6:	bf00      	nop
 8007ae8:	e7fd      	b.n	8007ae6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <xQueueReceive+0x40>
 8007af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d101      	bne.n	8007afc <xQueueReceive+0x44>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <xQueueReceive+0x46>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10b      	bne.n	8007b1a <xQueueReceive+0x62>
	__asm volatile
 8007b02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b06:	f383 8811 	msr	BASEPRI, r3
 8007b0a:	f3bf 8f6f 	isb	sy
 8007b0e:	f3bf 8f4f 	dsb	sy
 8007b12:	61fb      	str	r3, [r7, #28]
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop
 8007b18:	e7fd      	b.n	8007b16 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007b1a:	f001 f875 	bl	8008c08 <xTaskGetSchedulerState>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <xQueueReceive+0x72>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d101      	bne.n	8007b2e <xQueueReceive+0x76>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e000      	b.n	8007b30 <xQueueReceive+0x78>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d10b      	bne.n	8007b4c <xQueueReceive+0x94>
	__asm volatile
 8007b34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b38:	f383 8811 	msr	BASEPRI, r3
 8007b3c:	f3bf 8f6f 	isb	sy
 8007b40:	f3bf 8f4f 	dsb	sy
 8007b44:	61bb      	str	r3, [r7, #24]
}
 8007b46:	bf00      	nop
 8007b48:	bf00      	nop
 8007b4a:	e7fd      	b.n	8007b48 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007b4c:	f001 fdcc 	bl	80096e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b54:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d01f      	beq.n	8007b9c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007b5c:	68b9      	ldr	r1, [r7, #8]
 8007b5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b60:	f000 f8f6 	bl	8007d50 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b66:	1e5a      	subs	r2, r3, #1
 8007b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6e:	691b      	ldr	r3, [r3, #16]
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d00f      	beq.n	8007b94 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b76:	3310      	adds	r3, #16
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 fe7f 	bl	800887c <xTaskRemoveFromEventList>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d007      	beq.n	8007b94 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b84:	4b3c      	ldr	r3, [pc, #240]	@ (8007c78 <xQueueReceive+0x1c0>)
 8007b86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b8a:	601a      	str	r2, [r3, #0]
 8007b8c:	f3bf 8f4f 	dsb	sy
 8007b90:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b94:	f001 fdda 	bl	800974c <vPortExitCritical>
				return pdPASS;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	e069      	b.n	8007c70 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d103      	bne.n	8007baa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007ba2:	f001 fdd3 	bl	800974c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	e062      	b.n	8007c70 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d106      	bne.n	8007bbe <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007bb0:	f107 0310 	add.w	r3, r7, #16
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f000 fec5 	bl	8008944 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007bbe:	f001 fdc5 	bl	800974c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007bc2:	f000 fc2d 	bl	8008420 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007bc6:	f001 fd8f 	bl	80096e8 <vPortEnterCritical>
 8007bca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007bd0:	b25b      	sxtb	r3, r3
 8007bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bd6:	d103      	bne.n	8007be0 <xQueueReceive+0x128>
 8007bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bda:	2200      	movs	r2, #0
 8007bdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007be2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007be6:	b25b      	sxtb	r3, r3
 8007be8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bec:	d103      	bne.n	8007bf6 <xQueueReceive+0x13e>
 8007bee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007bf6:	f001 fda9 	bl	800974c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007bfa:	1d3a      	adds	r2, r7, #4
 8007bfc:	f107 0310 	add.w	r3, r7, #16
 8007c00:	4611      	mov	r1, r2
 8007c02:	4618      	mov	r0, r3
 8007c04:	f000 feb4 	bl	8008970 <xTaskCheckForTimeOut>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d123      	bne.n	8007c56 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c0e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c10:	f000 f916 	bl	8007e40 <prvIsQueueEmpty>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d017      	beq.n	8007c4a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007c1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c1c:	3324      	adds	r3, #36	@ 0x24
 8007c1e:	687a      	ldr	r2, [r7, #4]
 8007c20:	4611      	mov	r1, r2
 8007c22:	4618      	mov	r0, r3
 8007c24:	f000 fdd8 	bl	80087d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007c28:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c2a:	f000 f8b7 	bl	8007d9c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007c2e:	f000 fc05 	bl	800843c <xTaskResumeAll>
 8007c32:	4603      	mov	r3, r0
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d189      	bne.n	8007b4c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007c38:	4b0f      	ldr	r3, [pc, #60]	@ (8007c78 <xQueueReceive+0x1c0>)
 8007c3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007c3e:	601a      	str	r2, [r3, #0]
 8007c40:	f3bf 8f4f 	dsb	sy
 8007c44:	f3bf 8f6f 	isb	sy
 8007c48:	e780      	b.n	8007b4c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007c4a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c4c:	f000 f8a6 	bl	8007d9c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007c50:	f000 fbf4 	bl	800843c <xTaskResumeAll>
 8007c54:	e77a      	b.n	8007b4c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007c56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c58:	f000 f8a0 	bl	8007d9c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007c5c:	f000 fbee 	bl	800843c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c60:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c62:	f000 f8ed 	bl	8007e40 <prvIsQueueEmpty>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f43f af6f 	beq.w	8007b4c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c6e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c70:	4618      	mov	r0, r3
 8007c72:	3730      	adds	r7, #48	@ 0x30
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}
 8007c78:	e000ed04 	.word	0xe000ed04

08007c7c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	60f8      	str	r0, [r7, #12]
 8007c84:	60b9      	str	r1, [r7, #8]
 8007c86:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c88:	2300      	movs	r3, #0
 8007c8a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c90:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10d      	bne.n	8007cb6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d14d      	bne.n	8007d3e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 ffcc 	bl	8008c44 <xTaskPriorityDisinherit>
 8007cac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	609a      	str	r2, [r3, #8]
 8007cb4:	e043      	b.n	8007d3e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d119      	bne.n	8007cf0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6858      	ldr	r0, [r3, #4]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	68b9      	ldr	r1, [r7, #8]
 8007cc8:	f002 f8a2 	bl	8009e10 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	685a      	ldr	r2, [r3, #4]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cd4:	441a      	add	r2, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	685a      	ldr	r2, [r3, #4]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d32b      	bcc.n	8007d3e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681a      	ldr	r2, [r3, #0]
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	605a      	str	r2, [r3, #4]
 8007cee:	e026      	b.n	8007d3e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	68d8      	ldr	r0, [r3, #12]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	68b9      	ldr	r1, [r7, #8]
 8007cfc:	f002 f888 	bl	8009e10 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	68da      	ldr	r2, [r3, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d08:	425b      	negs	r3, r3
 8007d0a:	441a      	add	r2, r3
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d207      	bcs.n	8007d2c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d24:	425b      	negs	r3, r3
 8007d26:	441a      	add	r2, r3
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2b02      	cmp	r3, #2
 8007d30:	d105      	bne.n	8007d3e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007d32:	693b      	ldr	r3, [r7, #16]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d002      	beq.n	8007d3e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	1c5a      	adds	r2, r3, #1
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007d46:	697b      	ldr	r3, [r7, #20]
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3718      	adds	r7, #24
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
 8007d58:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d018      	beq.n	8007d94 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68da      	ldr	r2, [r3, #12]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d6a:	441a      	add	r2, r3
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	68da      	ldr	r2, [r3, #12]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	689b      	ldr	r3, [r3, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d303      	bcc.n	8007d84 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	68d9      	ldr	r1, [r3, #12]
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6838      	ldr	r0, [r7, #0]
 8007d90:	f002 f83e 	bl	8009e10 <memcpy>
	}
}
 8007d94:	bf00      	nop
 8007d96:	3708      	adds	r7, #8
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	bd80      	pop	{r7, pc}

08007d9c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007da4:	f001 fca0 	bl	80096e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007dae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007db0:	e011      	b.n	8007dd6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d012      	beq.n	8007de0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	3324      	adds	r3, #36	@ 0x24
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 fd5c 	bl	800887c <xTaskRemoveFromEventList>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d001      	beq.n	8007dce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007dca:	f000 fe35 	bl	8008a38 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007dce:	7bfb      	ldrb	r3, [r7, #15]
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007dd6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	dce9      	bgt.n	8007db2 <prvUnlockQueue+0x16>
 8007dde:	e000      	b.n	8007de2 <prvUnlockQueue+0x46>
					break;
 8007de0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	22ff      	movs	r2, #255	@ 0xff
 8007de6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007dea:	f001 fcaf 	bl	800974c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007dee:	f001 fc7b 	bl	80096e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007df8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dfa:	e011      	b.n	8007e20 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	691b      	ldr	r3, [r3, #16]
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d012      	beq.n	8007e2a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3310      	adds	r3, #16
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f000 fd37 	bl	800887c <xTaskRemoveFromEventList>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007e14:	f000 fe10 	bl	8008a38 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	3b01      	subs	r3, #1
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007e20:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	dce9      	bgt.n	8007dfc <prvUnlockQueue+0x60>
 8007e28:	e000      	b.n	8007e2c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007e2a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	22ff      	movs	r2, #255	@ 0xff
 8007e30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007e34:	f001 fc8a 	bl	800974c <vPortExitCritical>
}
 8007e38:	bf00      	nop
 8007e3a:	3710      	adds	r7, #16
 8007e3c:	46bd      	mov	sp, r7
 8007e3e:	bd80      	pop	{r7, pc}

08007e40 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007e40:	b580      	push	{r7, lr}
 8007e42:	b084      	sub	sp, #16
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e48:	f001 fc4e 	bl	80096e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d102      	bne.n	8007e5a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007e54:	2301      	movs	r3, #1
 8007e56:	60fb      	str	r3, [r7, #12]
 8007e58:	e001      	b.n	8007e5e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e5e:	f001 fc75 	bl	800974c <vPortExitCritical>

	return xReturn;
 8007e62:	68fb      	ldr	r3, [r7, #12]
}
 8007e64:	4618      	mov	r0, r3
 8007e66:	3710      	adds	r7, #16
 8007e68:	46bd      	mov	sp, r7
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e74:	f001 fc38 	bl	80096e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e80:	429a      	cmp	r2, r3
 8007e82:	d102      	bne.n	8007e8a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e84:	2301      	movs	r3, #1
 8007e86:	60fb      	str	r3, [r7, #12]
 8007e88:	e001      	b.n	8007e8e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e8e:	f001 fc5d 	bl	800974c <vPortExitCritical>

	return xReturn;
 8007e92:	68fb      	ldr	r3, [r7, #12]
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	60fb      	str	r3, [r7, #12]
 8007eaa:	e014      	b.n	8007ed6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007eac:	4a0f      	ldr	r2, [pc, #60]	@ (8007eec <vQueueAddToRegistry+0x50>)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d10b      	bne.n	8007ed0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007eb8:	490c      	ldr	r1, [pc, #48]	@ (8007eec <vQueueAddToRegistry+0x50>)
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	683a      	ldr	r2, [r7, #0]
 8007ebe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8007eec <vQueueAddToRegistry+0x50>)
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	00db      	lsls	r3, r3, #3
 8007ec8:	4413      	add	r3, r2
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007ece:	e006      	b.n	8007ede <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	3301      	adds	r3, #1
 8007ed4:	60fb      	str	r3, [r7, #12]
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	2b07      	cmp	r3, #7
 8007eda:	d9e7      	bls.n	8007eac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007edc:	bf00      	nop
 8007ede:	bf00      	nop
 8007ee0:	3714      	adds	r7, #20
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee8:	4770      	bx	lr
 8007eea:	bf00      	nop
 8007eec:	2000118c 	.word	0x2000118c

08007ef0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b086      	sub	sp, #24
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	60f8      	str	r0, [r7, #12]
 8007ef8:	60b9      	str	r1, [r7, #8]
 8007efa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007f00:	f001 fbf2 	bl	80096e8 <vPortEnterCritical>
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007f0a:	b25b      	sxtb	r3, r3
 8007f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f10:	d103      	bne.n	8007f1a <vQueueWaitForMessageRestricted+0x2a>
 8007f12:	697b      	ldr	r3, [r7, #20]
 8007f14:	2200      	movs	r2, #0
 8007f16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007f20:	b25b      	sxtb	r3, r3
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	d103      	bne.n	8007f30 <vQueueWaitForMessageRestricted+0x40>
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007f30:	f001 fc0c 	bl	800974c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d106      	bne.n	8007f4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007f3c:	697b      	ldr	r3, [r7, #20]
 8007f3e:	3324      	adds	r3, #36	@ 0x24
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	68b9      	ldr	r1, [r7, #8]
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fc6d 	bl	8008824 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007f4a:	6978      	ldr	r0, [r7, #20]
 8007f4c:	f7ff ff26 	bl	8007d9c <prvUnlockQueue>
	}
 8007f50:	bf00      	nop
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b08e      	sub	sp, #56	@ 0x38
 8007f5c:	af04      	add	r7, sp, #16
 8007f5e:	60f8      	str	r0, [r7, #12]
 8007f60:	60b9      	str	r1, [r7, #8]
 8007f62:	607a      	str	r2, [r7, #4]
 8007f64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d10b      	bne.n	8007f84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f70:	f383 8811 	msr	BASEPRI, r3
 8007f74:	f3bf 8f6f 	isb	sy
 8007f78:	f3bf 8f4f 	dsb	sy
 8007f7c:	623b      	str	r3, [r7, #32]
}
 8007f7e:	bf00      	nop
 8007f80:	bf00      	nop
 8007f82:	e7fd      	b.n	8007f80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d10b      	bne.n	8007fa2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f8e:	f383 8811 	msr	BASEPRI, r3
 8007f92:	f3bf 8f6f 	isb	sy
 8007f96:	f3bf 8f4f 	dsb	sy
 8007f9a:	61fb      	str	r3, [r7, #28]
}
 8007f9c:	bf00      	nop
 8007f9e:	bf00      	nop
 8007fa0:	e7fd      	b.n	8007f9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007fa2:	23a8      	movs	r3, #168	@ 0xa8
 8007fa4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	2ba8      	cmp	r3, #168	@ 0xa8
 8007faa:	d00b      	beq.n	8007fc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007fac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fb0:	f383 8811 	msr	BASEPRI, r3
 8007fb4:	f3bf 8f6f 	isb	sy
 8007fb8:	f3bf 8f4f 	dsb	sy
 8007fbc:	61bb      	str	r3, [r7, #24]
}
 8007fbe:	bf00      	nop
 8007fc0:	bf00      	nop
 8007fc2:	e7fd      	b.n	8007fc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007fc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d01e      	beq.n	800800a <xTaskCreateStatic+0xb2>
 8007fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d01b      	beq.n	800800a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007fd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007fda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007fdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fde:	2202      	movs	r2, #2
 8007fe0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	9303      	str	r3, [sp, #12]
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fea:	9302      	str	r3, [sp, #8]
 8007fec:	f107 0314 	add.w	r3, r7, #20
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ff4:	9300      	str	r3, [sp, #0]
 8007ff6:	683b      	ldr	r3, [r7, #0]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	68b9      	ldr	r1, [r7, #8]
 8007ffc:	68f8      	ldr	r0, [r7, #12]
 8007ffe:	f000 f851 	bl	80080a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008002:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008004:	f000 f8f6 	bl	80081f4 <prvAddNewTaskToReadyList>
 8008008:	e001      	b.n	800800e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800800a:	2300      	movs	r3, #0
 800800c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800800e:	697b      	ldr	r3, [r7, #20]
	}
 8008010:	4618      	mov	r0, r3
 8008012:	3728      	adds	r7, #40	@ 0x28
 8008014:	46bd      	mov	sp, r7
 8008016:	bd80      	pop	{r7, pc}

08008018 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008018:	b580      	push	{r7, lr}
 800801a:	b08c      	sub	sp, #48	@ 0x30
 800801c:	af04      	add	r7, sp, #16
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008028:	88fb      	ldrh	r3, [r7, #6]
 800802a:	009b      	lsls	r3, r3, #2
 800802c:	4618      	mov	r0, r3
 800802e:	f001 fc7d 	bl	800992c <pvPortMalloc>
 8008032:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008034:	697b      	ldr	r3, [r7, #20]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d00e      	beq.n	8008058 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800803a:	20a8      	movs	r0, #168	@ 0xa8
 800803c:	f001 fc76 	bl	800992c <pvPortMalloc>
 8008040:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	697a      	ldr	r2, [r7, #20]
 800804c:	631a      	str	r2, [r3, #48]	@ 0x30
 800804e:	e005      	b.n	800805c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008050:	6978      	ldr	r0, [r7, #20]
 8008052:	f001 fd39 	bl	8009ac8 <vPortFree>
 8008056:	e001      	b.n	800805c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008058:	2300      	movs	r3, #0
 800805a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800805c:	69fb      	ldr	r3, [r7, #28]
 800805e:	2b00      	cmp	r3, #0
 8008060:	d017      	beq.n	8008092 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008062:	69fb      	ldr	r3, [r7, #28]
 8008064:	2200      	movs	r2, #0
 8008066:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800806a:	88fa      	ldrh	r2, [r7, #6]
 800806c:	2300      	movs	r3, #0
 800806e:	9303      	str	r3, [sp, #12]
 8008070:	69fb      	ldr	r3, [r7, #28]
 8008072:	9302      	str	r3, [sp, #8]
 8008074:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008076:	9301      	str	r3, [sp, #4]
 8008078:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	68b9      	ldr	r1, [r7, #8]
 8008080:	68f8      	ldr	r0, [r7, #12]
 8008082:	f000 f80f 	bl	80080a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008086:	69f8      	ldr	r0, [r7, #28]
 8008088:	f000 f8b4 	bl	80081f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800808c:	2301      	movs	r3, #1
 800808e:	61bb      	str	r3, [r7, #24]
 8008090:	e002      	b.n	8008098 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008092:	f04f 33ff 	mov.w	r3, #4294967295
 8008096:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008098:	69bb      	ldr	r3, [r7, #24]
	}
 800809a:	4618      	mov	r0, r3
 800809c:	3720      	adds	r7, #32
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b088      	sub	sp, #32
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80080b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080b4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	009b      	lsls	r3, r3, #2
 80080ba:	461a      	mov	r2, r3
 80080bc:	21a5      	movs	r1, #165	@ 0xa5
 80080be:	f001 fe23 	bl	8009d08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80080c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80080cc:	3b01      	subs	r3, #1
 80080ce:	009b      	lsls	r3, r3, #2
 80080d0:	4413      	add	r3, r2
 80080d2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80080d4:	69bb      	ldr	r3, [r7, #24]
 80080d6:	f023 0307 	bic.w	r3, r3, #7
 80080da:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f003 0307 	and.w	r3, r3, #7
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00b      	beq.n	80080fe <prvInitialiseNewTask+0x5a>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080ea:	f383 8811 	msr	BASEPRI, r3
 80080ee:	f3bf 8f6f 	isb	sy
 80080f2:	f3bf 8f4f 	dsb	sy
 80080f6:	617b      	str	r3, [r7, #20]
}
 80080f8:	bf00      	nop
 80080fa:	bf00      	nop
 80080fc:	e7fd      	b.n	80080fa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d01f      	beq.n	8008144 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008104:	2300      	movs	r3, #0
 8008106:	61fb      	str	r3, [r7, #28]
 8008108:	e012      	b.n	8008130 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	69fb      	ldr	r3, [r7, #28]
 800810e:	4413      	add	r3, r2
 8008110:	7819      	ldrb	r1, [r3, #0]
 8008112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	4413      	add	r3, r2
 8008118:	3334      	adds	r3, #52	@ 0x34
 800811a:	460a      	mov	r2, r1
 800811c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800811e:	68ba      	ldr	r2, [r7, #8]
 8008120:	69fb      	ldr	r3, [r7, #28]
 8008122:	4413      	add	r3, r2
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d006      	beq.n	8008138 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3301      	adds	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
 8008130:	69fb      	ldr	r3, [r7, #28]
 8008132:	2b0f      	cmp	r3, #15
 8008134:	d9e9      	bls.n	800810a <prvInitialiseNewTask+0x66>
 8008136:	e000      	b.n	800813a <prvInitialiseNewTask+0x96>
			{
				break;
 8008138:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008142:	e003      	b.n	800814c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008144:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008146:	2200      	movs	r2, #0
 8008148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800814c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800814e:	2b37      	cmp	r3, #55	@ 0x37
 8008150:	d901      	bls.n	8008156 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008152:	2337      	movs	r3, #55	@ 0x37
 8008154:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800815a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008160:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008164:	2200      	movs	r2, #0
 8008166:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800816a:	3304      	adds	r3, #4
 800816c:	4618      	mov	r0, r3
 800816e:	f7ff f965 	bl	800743c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008174:	3318      	adds	r3, #24
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff f960 	bl	800743c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800817c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800817e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008180:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008184:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800818c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800818e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008190:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008192:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008194:	2200      	movs	r2, #0
 8008196:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800819a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800819c:	2200      	movs	r2, #0
 800819e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80081a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081a4:	3354      	adds	r3, #84	@ 0x54
 80081a6:	224c      	movs	r2, #76	@ 0x4c
 80081a8:	2100      	movs	r1, #0
 80081aa:	4618      	mov	r0, r3
 80081ac:	f001 fdac 	bl	8009d08 <memset>
 80081b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b2:	4a0d      	ldr	r2, [pc, #52]	@ (80081e8 <prvInitialiseNewTask+0x144>)
 80081b4:	659a      	str	r2, [r3, #88]	@ 0x58
 80081b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081b8:	4a0c      	ldr	r2, [pc, #48]	@ (80081ec <prvInitialiseNewTask+0x148>)
 80081ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	4a0c      	ldr	r2, [pc, #48]	@ (80081f0 <prvInitialiseNewTask+0x14c>)
 80081c0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80081c2:	683a      	ldr	r2, [r7, #0]
 80081c4:	68f9      	ldr	r1, [r7, #12]
 80081c6:	69b8      	ldr	r0, [r7, #24]
 80081c8:	f001 f95a 	bl	8009480 <pxPortInitialiseStack>
 80081cc:	4602      	mov	r2, r0
 80081ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80081d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d002      	beq.n	80081de <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80081d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80081dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081de:	bf00      	nop
 80081e0:	3720      	adds	r7, #32
 80081e2:	46bd      	mov	sp, r7
 80081e4:	bd80      	pop	{r7, pc}
 80081e6:	bf00      	nop
 80081e8:	20005420 	.word	0x20005420
 80081ec:	20005488 	.word	0x20005488
 80081f0:	200054f0 	.word	0x200054f0

080081f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b082      	sub	sp, #8
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80081fc:	f001 fa74 	bl	80096e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008200:	4b2d      	ldr	r3, [pc, #180]	@ (80082b8 <prvAddNewTaskToReadyList+0xc4>)
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	3301      	adds	r3, #1
 8008206:	4a2c      	ldr	r2, [pc, #176]	@ (80082b8 <prvAddNewTaskToReadyList+0xc4>)
 8008208:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800820a:	4b2c      	ldr	r3, [pc, #176]	@ (80082bc <prvAddNewTaskToReadyList+0xc8>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d109      	bne.n	8008226 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008212:	4a2a      	ldr	r2, [pc, #168]	@ (80082bc <prvAddNewTaskToReadyList+0xc8>)
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008218:	4b27      	ldr	r3, [pc, #156]	@ (80082b8 <prvAddNewTaskToReadyList+0xc4>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	2b01      	cmp	r3, #1
 800821e:	d110      	bne.n	8008242 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008220:	f000 fc2e 	bl	8008a80 <prvInitialiseTaskLists>
 8008224:	e00d      	b.n	8008242 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008226:	4b26      	ldr	r3, [pc, #152]	@ (80082c0 <prvAddNewTaskToReadyList+0xcc>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2b00      	cmp	r3, #0
 800822c:	d109      	bne.n	8008242 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800822e:	4b23      	ldr	r3, [pc, #140]	@ (80082bc <prvAddNewTaskToReadyList+0xc8>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008238:	429a      	cmp	r2, r3
 800823a:	d802      	bhi.n	8008242 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800823c:	4a1f      	ldr	r2, [pc, #124]	@ (80082bc <prvAddNewTaskToReadyList+0xc8>)
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008242:	4b20      	ldr	r3, [pc, #128]	@ (80082c4 <prvAddNewTaskToReadyList+0xd0>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	4a1e      	ldr	r2, [pc, #120]	@ (80082c4 <prvAddNewTaskToReadyList+0xd0>)
 800824a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800824c:	4b1d      	ldr	r3, [pc, #116]	@ (80082c4 <prvAddNewTaskToReadyList+0xd0>)
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008258:	4b1b      	ldr	r3, [pc, #108]	@ (80082c8 <prvAddNewTaskToReadyList+0xd4>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	429a      	cmp	r2, r3
 800825e:	d903      	bls.n	8008268 <prvAddNewTaskToReadyList+0x74>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008264:	4a18      	ldr	r2, [pc, #96]	@ (80082c8 <prvAddNewTaskToReadyList+0xd4>)
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800826c:	4613      	mov	r3, r2
 800826e:	009b      	lsls	r3, r3, #2
 8008270:	4413      	add	r3, r2
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	4a15      	ldr	r2, [pc, #84]	@ (80082cc <prvAddNewTaskToReadyList+0xd8>)
 8008276:	441a      	add	r2, r3
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	3304      	adds	r3, #4
 800827c:	4619      	mov	r1, r3
 800827e:	4610      	mov	r0, r2
 8008280:	f7ff f8e9 	bl	8007456 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008284:	f001 fa62 	bl	800974c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008288:	4b0d      	ldr	r3, [pc, #52]	@ (80082c0 <prvAddNewTaskToReadyList+0xcc>)
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2b00      	cmp	r3, #0
 800828e:	d00e      	beq.n	80082ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008290:	4b0a      	ldr	r3, [pc, #40]	@ (80082bc <prvAddNewTaskToReadyList+0xc8>)
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800829a:	429a      	cmp	r2, r3
 800829c:	d207      	bcs.n	80082ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800829e:	4b0c      	ldr	r3, [pc, #48]	@ (80082d0 <prvAddNewTaskToReadyList+0xdc>)
 80082a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a4:	601a      	str	r2, [r3, #0]
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082ae:	bf00      	nop
 80082b0:	3708      	adds	r7, #8
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}
 80082b6:	bf00      	nop
 80082b8:	200016a0 	.word	0x200016a0
 80082bc:	200011cc 	.word	0x200011cc
 80082c0:	200016ac 	.word	0x200016ac
 80082c4:	200016bc 	.word	0x200016bc
 80082c8:	200016a8 	.word	0x200016a8
 80082cc:	200011d0 	.word	0x200011d0
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d018      	beq.n	8008318 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80082e6:	4b14      	ldr	r3, [pc, #80]	@ (8008338 <vTaskDelay+0x64>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d00b      	beq.n	8008306 <vTaskDelay+0x32>
	__asm volatile
 80082ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082f2:	f383 8811 	msr	BASEPRI, r3
 80082f6:	f3bf 8f6f 	isb	sy
 80082fa:	f3bf 8f4f 	dsb	sy
 80082fe:	60bb      	str	r3, [r7, #8]
}
 8008300:	bf00      	nop
 8008302:	bf00      	nop
 8008304:	e7fd      	b.n	8008302 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008306:	f000 f88b 	bl	8008420 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800830a:	2100      	movs	r1, #0
 800830c:	6878      	ldr	r0, [r7, #4]
 800830e:	f000 fd09 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008312:	f000 f893 	bl	800843c <xTaskResumeAll>
 8008316:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d107      	bne.n	800832e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800831e:	4b07      	ldr	r3, [pc, #28]	@ (800833c <vTaskDelay+0x68>)
 8008320:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008324:	601a      	str	r2, [r3, #0]
 8008326:	f3bf 8f4f 	dsb	sy
 800832a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800832e:	bf00      	nop
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	200016c8 	.word	0x200016c8
 800833c:	e000ed04 	.word	0xe000ed04

08008340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b08a      	sub	sp, #40	@ 0x28
 8008344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800834a:	2300      	movs	r3, #0
 800834c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800834e:	463a      	mov	r2, r7
 8008350:	1d39      	adds	r1, r7, #4
 8008352:	f107 0308 	add.w	r3, r7, #8
 8008356:	4618      	mov	r0, r3
 8008358:	f7ff f81c 	bl	8007394 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800835c:	6839      	ldr	r1, [r7, #0]
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68ba      	ldr	r2, [r7, #8]
 8008362:	9202      	str	r2, [sp, #8]
 8008364:	9301      	str	r3, [sp, #4]
 8008366:	2300      	movs	r3, #0
 8008368:	9300      	str	r3, [sp, #0]
 800836a:	2300      	movs	r3, #0
 800836c:	460a      	mov	r2, r1
 800836e:	4924      	ldr	r1, [pc, #144]	@ (8008400 <vTaskStartScheduler+0xc0>)
 8008370:	4824      	ldr	r0, [pc, #144]	@ (8008404 <vTaskStartScheduler+0xc4>)
 8008372:	f7ff fdf1 	bl	8007f58 <xTaskCreateStatic>
 8008376:	4603      	mov	r3, r0
 8008378:	4a23      	ldr	r2, [pc, #140]	@ (8008408 <vTaskStartScheduler+0xc8>)
 800837a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800837c:	4b22      	ldr	r3, [pc, #136]	@ (8008408 <vTaskStartScheduler+0xc8>)
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008384:	2301      	movs	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e001      	b.n	800838e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800838a:	2300      	movs	r3, #0
 800838c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d102      	bne.n	800839a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008394:	f000 fd1a 	bl	8008dcc <xTimerCreateTimerTask>
 8008398:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	2b01      	cmp	r3, #1
 800839e:	d11b      	bne.n	80083d8 <vTaskStartScheduler+0x98>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	613b      	str	r3, [r7, #16]
}
 80083b2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80083b4:	4b15      	ldr	r3, [pc, #84]	@ (800840c <vTaskStartScheduler+0xcc>)
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	3354      	adds	r3, #84	@ 0x54
 80083ba:	4a15      	ldr	r2, [pc, #84]	@ (8008410 <vTaskStartScheduler+0xd0>)
 80083bc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80083be:	4b15      	ldr	r3, [pc, #84]	@ (8008414 <vTaskStartScheduler+0xd4>)
 80083c0:	f04f 32ff 	mov.w	r2, #4294967295
 80083c4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80083c6:	4b14      	ldr	r3, [pc, #80]	@ (8008418 <vTaskStartScheduler+0xd8>)
 80083c8:	2201      	movs	r2, #1
 80083ca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80083cc:	4b13      	ldr	r3, [pc, #76]	@ (800841c <vTaskStartScheduler+0xdc>)
 80083ce:	2200      	movs	r2, #0
 80083d0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80083d2:	f001 f8e5 	bl	80095a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80083d6:	e00f      	b.n	80083f8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083de:	d10b      	bne.n	80083f8 <vTaskStartScheduler+0xb8>
	__asm volatile
 80083e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083e4:	f383 8811 	msr	BASEPRI, r3
 80083e8:	f3bf 8f6f 	isb	sy
 80083ec:	f3bf 8f4f 	dsb	sy
 80083f0:	60fb      	str	r3, [r7, #12]
}
 80083f2:	bf00      	nop
 80083f4:	bf00      	nop
 80083f6:	e7fd      	b.n	80083f4 <vTaskStartScheduler+0xb4>
}
 80083f8:	bf00      	nop
 80083fa:	3718      	adds	r7, #24
 80083fc:	46bd      	mov	sp, r7
 80083fe:	bd80      	pop	{r7, pc}
 8008400:	08009f24 	.word	0x08009f24
 8008404:	08008a51 	.word	0x08008a51
 8008408:	200016c4 	.word	0x200016c4
 800840c:	200011cc 	.word	0x200011cc
 8008410:	200000c8 	.word	0x200000c8
 8008414:	200016c0 	.word	0x200016c0
 8008418:	200016ac 	.word	0x200016ac
 800841c:	200016a4 	.word	0x200016a4

08008420 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008420:	b480      	push	{r7}
 8008422:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008424:	4b04      	ldr	r3, [pc, #16]	@ (8008438 <vTaskSuspendAll+0x18>)
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	3301      	adds	r3, #1
 800842a:	4a03      	ldr	r2, [pc, #12]	@ (8008438 <vTaskSuspendAll+0x18>)
 800842c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800842e:	bf00      	nop
 8008430:	46bd      	mov	sp, r7
 8008432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008436:	4770      	bx	lr
 8008438:	200016c8 	.word	0x200016c8

0800843c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008442:	2300      	movs	r3, #0
 8008444:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008446:	2300      	movs	r3, #0
 8008448:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800844a:	4b42      	ldr	r3, [pc, #264]	@ (8008554 <xTaskResumeAll+0x118>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d10b      	bne.n	800846a <xTaskResumeAll+0x2e>
	__asm volatile
 8008452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008456:	f383 8811 	msr	BASEPRI, r3
 800845a:	f3bf 8f6f 	isb	sy
 800845e:	f3bf 8f4f 	dsb	sy
 8008462:	603b      	str	r3, [r7, #0]
}
 8008464:	bf00      	nop
 8008466:	bf00      	nop
 8008468:	e7fd      	b.n	8008466 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800846a:	f001 f93d 	bl	80096e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800846e:	4b39      	ldr	r3, [pc, #228]	@ (8008554 <xTaskResumeAll+0x118>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	3b01      	subs	r3, #1
 8008474:	4a37      	ldr	r2, [pc, #220]	@ (8008554 <xTaskResumeAll+0x118>)
 8008476:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008478:	4b36      	ldr	r3, [pc, #216]	@ (8008554 <xTaskResumeAll+0x118>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d162      	bne.n	8008546 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008480:	4b35      	ldr	r3, [pc, #212]	@ (8008558 <xTaskResumeAll+0x11c>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2b00      	cmp	r3, #0
 8008486:	d05e      	beq.n	8008546 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008488:	e02f      	b.n	80084ea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800848a:	4b34      	ldr	r3, [pc, #208]	@ (800855c <xTaskResumeAll+0x120>)
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	68db      	ldr	r3, [r3, #12]
 8008490:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	3318      	adds	r3, #24
 8008496:	4618      	mov	r0, r3
 8008498:	f7ff f83a 	bl	8007510 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	3304      	adds	r3, #4
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7ff f835 	bl	8007510 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084aa:	4b2d      	ldr	r3, [pc, #180]	@ (8008560 <xTaskResumeAll+0x124>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d903      	bls.n	80084ba <xTaskResumeAll+0x7e>
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b6:	4a2a      	ldr	r2, [pc, #168]	@ (8008560 <xTaskResumeAll+0x124>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a27      	ldr	r2, [pc, #156]	@ (8008564 <xTaskResumeAll+0x128>)
 80084c8:	441a      	add	r2, r3
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe ffc0 	bl	8007456 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084da:	4b23      	ldr	r3, [pc, #140]	@ (8008568 <xTaskResumeAll+0x12c>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d302      	bcc.n	80084ea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80084e4:	4b21      	ldr	r3, [pc, #132]	@ (800856c <xTaskResumeAll+0x130>)
 80084e6:	2201      	movs	r2, #1
 80084e8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80084ea:	4b1c      	ldr	r3, [pc, #112]	@ (800855c <xTaskResumeAll+0x120>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d1cb      	bne.n	800848a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d001      	beq.n	80084fc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80084f8:	f000 fb66 	bl	8008bc8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80084fc:	4b1c      	ldr	r3, [pc, #112]	@ (8008570 <xTaskResumeAll+0x134>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d010      	beq.n	800852a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008508:	f000 f846 	bl	8008598 <xTaskIncrementTick>
 800850c:	4603      	mov	r3, r0
 800850e:	2b00      	cmp	r3, #0
 8008510:	d002      	beq.n	8008518 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8008512:	4b16      	ldr	r3, [pc, #88]	@ (800856c <xTaskResumeAll+0x130>)
 8008514:	2201      	movs	r2, #1
 8008516:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	3b01      	subs	r3, #1
 800851c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1f1      	bne.n	8008508 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008524:	4b12      	ldr	r3, [pc, #72]	@ (8008570 <xTaskResumeAll+0x134>)
 8008526:	2200      	movs	r2, #0
 8008528:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800852a:	4b10      	ldr	r3, [pc, #64]	@ (800856c <xTaskResumeAll+0x130>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	2b00      	cmp	r3, #0
 8008530:	d009      	beq.n	8008546 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008532:	2301      	movs	r3, #1
 8008534:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008536:	4b0f      	ldr	r3, [pc, #60]	@ (8008574 <xTaskResumeAll+0x138>)
 8008538:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	f3bf 8f4f 	dsb	sy
 8008542:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008546:	f001 f901 	bl	800974c <vPortExitCritical>

	return xAlreadyYielded;
 800854a:	68bb      	ldr	r3, [r7, #8]
}
 800854c:	4618      	mov	r0, r3
 800854e:	3710      	adds	r7, #16
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	200016c8 	.word	0x200016c8
 8008558:	200016a0 	.word	0x200016a0
 800855c:	20001660 	.word	0x20001660
 8008560:	200016a8 	.word	0x200016a8
 8008564:	200011d0 	.word	0x200011d0
 8008568:	200011cc 	.word	0x200011cc
 800856c:	200016b4 	.word	0x200016b4
 8008570:	200016b0 	.word	0x200016b0
 8008574:	e000ed04 	.word	0xe000ed04

08008578 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008578:	b480      	push	{r7}
 800857a:	b083      	sub	sp, #12
 800857c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800857e:	4b05      	ldr	r3, [pc, #20]	@ (8008594 <xTaskGetTickCount+0x1c>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008584:	687b      	ldr	r3, [r7, #4]
}
 8008586:	4618      	mov	r0, r3
 8008588:	370c      	adds	r7, #12
 800858a:	46bd      	mov	sp, r7
 800858c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008590:	4770      	bx	lr
 8008592:	bf00      	nop
 8008594:	200016a4 	.word	0x200016a4

08008598 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008598:	b580      	push	{r7, lr}
 800859a:	b086      	sub	sp, #24
 800859c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800859e:	2300      	movs	r3, #0
 80085a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80085a2:	4b4f      	ldr	r3, [pc, #316]	@ (80086e0 <xTaskIncrementTick+0x148>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	f040 8090 	bne.w	80086cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80085ac:	4b4d      	ldr	r3, [pc, #308]	@ (80086e4 <xTaskIncrementTick+0x14c>)
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3301      	adds	r3, #1
 80085b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80085b4:	4a4b      	ldr	r2, [pc, #300]	@ (80086e4 <xTaskIncrementTick+0x14c>)
 80085b6:	693b      	ldr	r3, [r7, #16]
 80085b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d121      	bne.n	8008604 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80085c0:	4b49      	ldr	r3, [pc, #292]	@ (80086e8 <xTaskIncrementTick+0x150>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d00b      	beq.n	80085e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80085ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ce:	f383 8811 	msr	BASEPRI, r3
 80085d2:	f3bf 8f6f 	isb	sy
 80085d6:	f3bf 8f4f 	dsb	sy
 80085da:	603b      	str	r3, [r7, #0]
}
 80085dc:	bf00      	nop
 80085de:	bf00      	nop
 80085e0:	e7fd      	b.n	80085de <xTaskIncrementTick+0x46>
 80085e2:	4b41      	ldr	r3, [pc, #260]	@ (80086e8 <xTaskIncrementTick+0x150>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	60fb      	str	r3, [r7, #12]
 80085e8:	4b40      	ldr	r3, [pc, #256]	@ (80086ec <xTaskIncrementTick+0x154>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a3e      	ldr	r2, [pc, #248]	@ (80086e8 <xTaskIncrementTick+0x150>)
 80085ee:	6013      	str	r3, [r2, #0]
 80085f0:	4a3e      	ldr	r2, [pc, #248]	@ (80086ec <xTaskIncrementTick+0x154>)
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	6013      	str	r3, [r2, #0]
 80085f6:	4b3e      	ldr	r3, [pc, #248]	@ (80086f0 <xTaskIncrementTick+0x158>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	3301      	adds	r3, #1
 80085fc:	4a3c      	ldr	r2, [pc, #240]	@ (80086f0 <xTaskIncrementTick+0x158>)
 80085fe:	6013      	str	r3, [r2, #0]
 8008600:	f000 fae2 	bl	8008bc8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008604:	4b3b      	ldr	r3, [pc, #236]	@ (80086f4 <xTaskIncrementTick+0x15c>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	429a      	cmp	r2, r3
 800860c:	d349      	bcc.n	80086a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800860e:	4b36      	ldr	r3, [pc, #216]	@ (80086e8 <xTaskIncrementTick+0x150>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d104      	bne.n	8008622 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008618:	4b36      	ldr	r3, [pc, #216]	@ (80086f4 <xTaskIncrementTick+0x15c>)
 800861a:	f04f 32ff 	mov.w	r2, #4294967295
 800861e:	601a      	str	r2, [r3, #0]
					break;
 8008620:	e03f      	b.n	80086a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008622:	4b31      	ldr	r3, [pc, #196]	@ (80086e8 <xTaskIncrementTick+0x150>)
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68db      	ldr	r3, [r3, #12]
 8008628:	68db      	ldr	r3, [r3, #12]
 800862a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	429a      	cmp	r2, r3
 8008638:	d203      	bcs.n	8008642 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800863a:	4a2e      	ldr	r2, [pc, #184]	@ (80086f4 <xTaskIncrementTick+0x15c>)
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008640:	e02f      	b.n	80086a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008642:	68bb      	ldr	r3, [r7, #8]
 8008644:	3304      	adds	r3, #4
 8008646:	4618      	mov	r0, r3
 8008648:	f7fe ff62 	bl	8007510 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800864c:	68bb      	ldr	r3, [r7, #8]
 800864e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008654:	68bb      	ldr	r3, [r7, #8]
 8008656:	3318      	adds	r3, #24
 8008658:	4618      	mov	r0, r3
 800865a:	f7fe ff59 	bl	8007510 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800865e:	68bb      	ldr	r3, [r7, #8]
 8008660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008662:	4b25      	ldr	r3, [pc, #148]	@ (80086f8 <xTaskIncrementTick+0x160>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d903      	bls.n	8008672 <xTaskIncrementTick+0xda>
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866e:	4a22      	ldr	r2, [pc, #136]	@ (80086f8 <xTaskIncrementTick+0x160>)
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	68bb      	ldr	r3, [r7, #8]
 8008674:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008676:	4613      	mov	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	4413      	add	r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4a1f      	ldr	r2, [pc, #124]	@ (80086fc <xTaskIncrementTick+0x164>)
 8008680:	441a      	add	r2, r3
 8008682:	68bb      	ldr	r3, [r7, #8]
 8008684:	3304      	adds	r3, #4
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7fe fee4 	bl	8007456 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008692:	4b1b      	ldr	r3, [pc, #108]	@ (8008700 <xTaskIncrementTick+0x168>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008698:	429a      	cmp	r2, r3
 800869a:	d3b8      	bcc.n	800860e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800869c:	2301      	movs	r3, #1
 800869e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80086a0:	e7b5      	b.n	800860e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80086a2:	4b17      	ldr	r3, [pc, #92]	@ (8008700 <xTaskIncrementTick+0x168>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80086a8:	4914      	ldr	r1, [pc, #80]	@ (80086fc <xTaskIncrementTick+0x164>)
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	440b      	add	r3, r1
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b01      	cmp	r3, #1
 80086b8:	d901      	bls.n	80086be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80086ba:	2301      	movs	r3, #1
 80086bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80086be:	4b11      	ldr	r3, [pc, #68]	@ (8008704 <xTaskIncrementTick+0x16c>)
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d007      	beq.n	80086d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80086c6:	2301      	movs	r3, #1
 80086c8:	617b      	str	r3, [r7, #20]
 80086ca:	e004      	b.n	80086d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80086cc:	4b0e      	ldr	r3, [pc, #56]	@ (8008708 <xTaskIncrementTick+0x170>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	3301      	adds	r3, #1
 80086d2:	4a0d      	ldr	r2, [pc, #52]	@ (8008708 <xTaskIncrementTick+0x170>)
 80086d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80086d6:	697b      	ldr	r3, [r7, #20]
}
 80086d8:	4618      	mov	r0, r3
 80086da:	3718      	adds	r7, #24
 80086dc:	46bd      	mov	sp, r7
 80086de:	bd80      	pop	{r7, pc}
 80086e0:	200016c8 	.word	0x200016c8
 80086e4:	200016a4 	.word	0x200016a4
 80086e8:	20001658 	.word	0x20001658
 80086ec:	2000165c 	.word	0x2000165c
 80086f0:	200016b8 	.word	0x200016b8
 80086f4:	200016c0 	.word	0x200016c0
 80086f8:	200016a8 	.word	0x200016a8
 80086fc:	200011d0 	.word	0x200011d0
 8008700:	200011cc 	.word	0x200011cc
 8008704:	200016b4 	.word	0x200016b4
 8008708:	200016b0 	.word	0x200016b0

0800870c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800870c:	b480      	push	{r7}
 800870e:	b085      	sub	sp, #20
 8008710:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008712:	4b2b      	ldr	r3, [pc, #172]	@ (80087c0 <vTaskSwitchContext+0xb4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d003      	beq.n	8008722 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800871a:	4b2a      	ldr	r3, [pc, #168]	@ (80087c4 <vTaskSwitchContext+0xb8>)
 800871c:	2201      	movs	r2, #1
 800871e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008720:	e047      	b.n	80087b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8008722:	4b28      	ldr	r3, [pc, #160]	@ (80087c4 <vTaskSwitchContext+0xb8>)
 8008724:	2200      	movs	r2, #0
 8008726:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008728:	4b27      	ldr	r3, [pc, #156]	@ (80087c8 <vTaskSwitchContext+0xbc>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	60fb      	str	r3, [r7, #12]
 800872e:	e011      	b.n	8008754 <vTaskSwitchContext+0x48>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d10b      	bne.n	800874e <vTaskSwitchContext+0x42>
	__asm volatile
 8008736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800873a:	f383 8811 	msr	BASEPRI, r3
 800873e:	f3bf 8f6f 	isb	sy
 8008742:	f3bf 8f4f 	dsb	sy
 8008746:	607b      	str	r3, [r7, #4]
}
 8008748:	bf00      	nop
 800874a:	bf00      	nop
 800874c:	e7fd      	b.n	800874a <vTaskSwitchContext+0x3e>
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3b01      	subs	r3, #1
 8008752:	60fb      	str	r3, [r7, #12]
 8008754:	491d      	ldr	r1, [pc, #116]	@ (80087cc <vTaskSwitchContext+0xc0>)
 8008756:	68fa      	ldr	r2, [r7, #12]
 8008758:	4613      	mov	r3, r2
 800875a:	009b      	lsls	r3, r3, #2
 800875c:	4413      	add	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	440b      	add	r3, r1
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d0e3      	beq.n	8008730 <vTaskSwitchContext+0x24>
 8008768:	68fa      	ldr	r2, [r7, #12]
 800876a:	4613      	mov	r3, r2
 800876c:	009b      	lsls	r3, r3, #2
 800876e:	4413      	add	r3, r2
 8008770:	009b      	lsls	r3, r3, #2
 8008772:	4a16      	ldr	r2, [pc, #88]	@ (80087cc <vTaskSwitchContext+0xc0>)
 8008774:	4413      	add	r3, r2
 8008776:	60bb      	str	r3, [r7, #8]
 8008778:	68bb      	ldr	r3, [r7, #8]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	685a      	ldr	r2, [r3, #4]
 8008786:	68bb      	ldr	r3, [r7, #8]
 8008788:	3308      	adds	r3, #8
 800878a:	429a      	cmp	r2, r3
 800878c:	d104      	bne.n	8008798 <vTaskSwitchContext+0x8c>
 800878e:	68bb      	ldr	r3, [r7, #8]
 8008790:	685b      	ldr	r3, [r3, #4]
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	605a      	str	r2, [r3, #4]
 8008798:	68bb      	ldr	r3, [r7, #8]
 800879a:	685b      	ldr	r3, [r3, #4]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	4a0c      	ldr	r2, [pc, #48]	@ (80087d0 <vTaskSwitchContext+0xc4>)
 80087a0:	6013      	str	r3, [r2, #0]
 80087a2:	4a09      	ldr	r2, [pc, #36]	@ (80087c8 <vTaskSwitchContext+0xbc>)
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80087a8:	4b09      	ldr	r3, [pc, #36]	@ (80087d0 <vTaskSwitchContext+0xc4>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	3354      	adds	r3, #84	@ 0x54
 80087ae:	4a09      	ldr	r2, [pc, #36]	@ (80087d4 <vTaskSwitchContext+0xc8>)
 80087b0:	6013      	str	r3, [r2, #0]
}
 80087b2:	bf00      	nop
 80087b4:	3714      	adds	r7, #20
 80087b6:	46bd      	mov	sp, r7
 80087b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087bc:	4770      	bx	lr
 80087be:	bf00      	nop
 80087c0:	200016c8 	.word	0x200016c8
 80087c4:	200016b4 	.word	0x200016b4
 80087c8:	200016a8 	.word	0x200016a8
 80087cc:	200011d0 	.word	0x200011d0
 80087d0:	200011cc 	.word	0x200011cc
 80087d4:	200000c8 	.word	0x200000c8

080087d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b084      	sub	sp, #16
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
 80087e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d10b      	bne.n	8008800 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80087e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ec:	f383 8811 	msr	BASEPRI, r3
 80087f0:	f3bf 8f6f 	isb	sy
 80087f4:	f3bf 8f4f 	dsb	sy
 80087f8:	60fb      	str	r3, [r7, #12]
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	e7fd      	b.n	80087fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008800:	4b07      	ldr	r3, [pc, #28]	@ (8008820 <vTaskPlaceOnEventList+0x48>)
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	3318      	adds	r3, #24
 8008806:	4619      	mov	r1, r3
 8008808:	6878      	ldr	r0, [r7, #4]
 800880a:	f7fe fe48 	bl	800749e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800880e:	2101      	movs	r1, #1
 8008810:	6838      	ldr	r0, [r7, #0]
 8008812:	f000 fa87 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
}
 8008816:	bf00      	nop
 8008818:	3710      	adds	r7, #16
 800881a:	46bd      	mov	sp, r7
 800881c:	bd80      	pop	{r7, pc}
 800881e:	bf00      	nop
 8008820:	200011cc 	.word	0x200011cc

08008824 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008824:	b580      	push	{r7, lr}
 8008826:	b086      	sub	sp, #24
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	2b00      	cmp	r3, #0
 8008834:	d10b      	bne.n	800884e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800883a:	f383 8811 	msr	BASEPRI, r3
 800883e:	f3bf 8f6f 	isb	sy
 8008842:	f3bf 8f4f 	dsb	sy
 8008846:	617b      	str	r3, [r7, #20]
}
 8008848:	bf00      	nop
 800884a:	bf00      	nop
 800884c:	e7fd      	b.n	800884a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800884e:	4b0a      	ldr	r3, [pc, #40]	@ (8008878 <vTaskPlaceOnEventListRestricted+0x54>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3318      	adds	r3, #24
 8008854:	4619      	mov	r1, r3
 8008856:	68f8      	ldr	r0, [r7, #12]
 8008858:	f7fe fdfd 	bl	8007456 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d002      	beq.n	8008868 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008862:	f04f 33ff 	mov.w	r3, #4294967295
 8008866:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008868:	6879      	ldr	r1, [r7, #4]
 800886a:	68b8      	ldr	r0, [r7, #8]
 800886c:	f000 fa5a 	bl	8008d24 <prvAddCurrentTaskToDelayedList>
	}
 8008870:	bf00      	nop
 8008872:	3718      	adds	r7, #24
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	200011cc 	.word	0x200011cc

0800887c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800887c:	b580      	push	{r7, lr}
 800887e:	b086      	sub	sp, #24
 8008880:	af00      	add	r7, sp, #0
 8008882:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	68db      	ldr	r3, [r3, #12]
 800888a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800888c:	693b      	ldr	r3, [r7, #16]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d10b      	bne.n	80088aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008896:	f383 8811 	msr	BASEPRI, r3
 800889a:	f3bf 8f6f 	isb	sy
 800889e:	f3bf 8f4f 	dsb	sy
 80088a2:	60fb      	str	r3, [r7, #12]
}
 80088a4:	bf00      	nop
 80088a6:	bf00      	nop
 80088a8:	e7fd      	b.n	80088a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80088aa:	693b      	ldr	r3, [r7, #16]
 80088ac:	3318      	adds	r3, #24
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fe2e 	bl	8007510 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088b4:	4b1d      	ldr	r3, [pc, #116]	@ (800892c <xTaskRemoveFromEventList+0xb0>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d11d      	bne.n	80088f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	3304      	adds	r3, #4
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fe25 	bl	8007510 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088ca:	4b19      	ldr	r3, [pc, #100]	@ (8008930 <xTaskRemoveFromEventList+0xb4>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	429a      	cmp	r2, r3
 80088d0:	d903      	bls.n	80088da <xTaskRemoveFromEventList+0x5e>
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088d6:	4a16      	ldr	r2, [pc, #88]	@ (8008930 <xTaskRemoveFromEventList+0xb4>)
 80088d8:	6013      	str	r3, [r2, #0]
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088de:	4613      	mov	r3, r2
 80088e0:	009b      	lsls	r3, r3, #2
 80088e2:	4413      	add	r3, r2
 80088e4:	009b      	lsls	r3, r3, #2
 80088e6:	4a13      	ldr	r2, [pc, #76]	@ (8008934 <xTaskRemoveFromEventList+0xb8>)
 80088e8:	441a      	add	r2, r3
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	3304      	adds	r3, #4
 80088ee:	4619      	mov	r1, r3
 80088f0:	4610      	mov	r0, r2
 80088f2:	f7fe fdb0 	bl	8007456 <vListInsertEnd>
 80088f6:	e005      	b.n	8008904 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	3318      	adds	r3, #24
 80088fc:	4619      	mov	r1, r3
 80088fe:	480e      	ldr	r0, [pc, #56]	@ (8008938 <xTaskRemoveFromEventList+0xbc>)
 8008900:	f7fe fda9 	bl	8007456 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008904:	693b      	ldr	r3, [r7, #16]
 8008906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008908:	4b0c      	ldr	r3, [pc, #48]	@ (800893c <xTaskRemoveFromEventList+0xc0>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800890e:	429a      	cmp	r2, r3
 8008910:	d905      	bls.n	800891e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008912:	2301      	movs	r3, #1
 8008914:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008916:	4b0a      	ldr	r3, [pc, #40]	@ (8008940 <xTaskRemoveFromEventList+0xc4>)
 8008918:	2201      	movs	r2, #1
 800891a:	601a      	str	r2, [r3, #0]
 800891c:	e001      	b.n	8008922 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800891e:	2300      	movs	r3, #0
 8008920:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008922:	697b      	ldr	r3, [r7, #20]
}
 8008924:	4618      	mov	r0, r3
 8008926:	3718      	adds	r7, #24
 8008928:	46bd      	mov	sp, r7
 800892a:	bd80      	pop	{r7, pc}
 800892c:	200016c8 	.word	0x200016c8
 8008930:	200016a8 	.word	0x200016a8
 8008934:	200011d0 	.word	0x200011d0
 8008938:	20001660 	.word	0x20001660
 800893c:	200011cc 	.word	0x200011cc
 8008940:	200016b4 	.word	0x200016b4

08008944 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008944:	b480      	push	{r7}
 8008946:	b083      	sub	sp, #12
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800894c:	4b06      	ldr	r3, [pc, #24]	@ (8008968 <vTaskInternalSetTimeOutState+0x24>)
 800894e:	681a      	ldr	r2, [r3, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008954:	4b05      	ldr	r3, [pc, #20]	@ (800896c <vTaskInternalSetTimeOutState+0x28>)
 8008956:	681a      	ldr	r2, [r3, #0]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	605a      	str	r2, [r3, #4]
}
 800895c:	bf00      	nop
 800895e:	370c      	adds	r7, #12
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr
 8008968:	200016b8 	.word	0x200016b8
 800896c:	200016a4 	.word	0x200016a4

08008970 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b088      	sub	sp, #32
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
 8008978:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d10b      	bne.n	8008998 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008980:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008984:	f383 8811 	msr	BASEPRI, r3
 8008988:	f3bf 8f6f 	isb	sy
 800898c:	f3bf 8f4f 	dsb	sy
 8008990:	613b      	str	r3, [r7, #16]
}
 8008992:	bf00      	nop
 8008994:	bf00      	nop
 8008996:	e7fd      	b.n	8008994 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008998:	683b      	ldr	r3, [r7, #0]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d10b      	bne.n	80089b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800899e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089a2:	f383 8811 	msr	BASEPRI, r3
 80089a6:	f3bf 8f6f 	isb	sy
 80089aa:	f3bf 8f4f 	dsb	sy
 80089ae:	60fb      	str	r3, [r7, #12]
}
 80089b0:	bf00      	nop
 80089b2:	bf00      	nop
 80089b4:	e7fd      	b.n	80089b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80089b6:	f000 fe97 	bl	80096e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80089ba:	4b1d      	ldr	r3, [pc, #116]	@ (8008a30 <xTaskCheckForTimeOut+0xc0>)
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	69ba      	ldr	r2, [r7, #24]
 80089c6:	1ad3      	subs	r3, r2, r3
 80089c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80089ca:	683b      	ldr	r3, [r7, #0]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089d2:	d102      	bne.n	80089da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	61fb      	str	r3, [r7, #28]
 80089d8:	e023      	b.n	8008a22 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	4b15      	ldr	r3, [pc, #84]	@ (8008a34 <xTaskCheckForTimeOut+0xc4>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d007      	beq.n	80089f6 <xTaskCheckForTimeOut+0x86>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	685b      	ldr	r3, [r3, #4]
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d302      	bcc.n	80089f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80089f0:	2301      	movs	r3, #1
 80089f2:	61fb      	str	r3, [r7, #28]
 80089f4:	e015      	b.n	8008a22 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	429a      	cmp	r2, r3
 80089fe:	d20b      	bcs.n	8008a18 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008a00:	683b      	ldr	r3, [r7, #0]
 8008a02:	681a      	ldr	r2, [r3, #0]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	1ad2      	subs	r2, r2, r3
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7ff ff99 	bl	8008944 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008a12:	2300      	movs	r3, #0
 8008a14:	61fb      	str	r3, [r7, #28]
 8008a16:	e004      	b.n	8008a22 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008a1e:	2301      	movs	r3, #1
 8008a20:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008a22:	f000 fe93 	bl	800974c <vPortExitCritical>

	return xReturn;
 8008a26:	69fb      	ldr	r3, [r7, #28]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3720      	adds	r7, #32
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	200016a4 	.word	0x200016a4
 8008a34:	200016b8 	.word	0x200016b8

08008a38 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008a38:	b480      	push	{r7}
 8008a3a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008a3c:	4b03      	ldr	r3, [pc, #12]	@ (8008a4c <vTaskMissedYield+0x14>)
 8008a3e:	2201      	movs	r2, #1
 8008a40:	601a      	str	r2, [r3, #0]
}
 8008a42:	bf00      	nop
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	200016b4 	.word	0x200016b4

08008a50 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b082      	sub	sp, #8
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a58:	f000 f852 	bl	8008b00 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a5c:	4b06      	ldr	r3, [pc, #24]	@ (8008a78 <prvIdleTask+0x28>)
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d9f9      	bls.n	8008a58 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a64:	4b05      	ldr	r3, [pc, #20]	@ (8008a7c <prvIdleTask+0x2c>)
 8008a66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a6a:	601a      	str	r2, [r3, #0]
 8008a6c:	f3bf 8f4f 	dsb	sy
 8008a70:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a74:	e7f0      	b.n	8008a58 <prvIdleTask+0x8>
 8008a76:	bf00      	nop
 8008a78:	200011d0 	.word	0x200011d0
 8008a7c:	e000ed04 	.word	0xe000ed04

08008a80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b082      	sub	sp, #8
 8008a84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a86:	2300      	movs	r3, #0
 8008a88:	607b      	str	r3, [r7, #4]
 8008a8a:	e00c      	b.n	8008aa6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	4613      	mov	r3, r2
 8008a90:	009b      	lsls	r3, r3, #2
 8008a92:	4413      	add	r3, r2
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	4a12      	ldr	r2, [pc, #72]	@ (8008ae0 <prvInitialiseTaskLists+0x60>)
 8008a98:	4413      	add	r3, r2
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fe fcae 	bl	80073fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	3301      	adds	r3, #1
 8008aa4:	607b      	str	r3, [r7, #4]
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	2b37      	cmp	r3, #55	@ 0x37
 8008aaa:	d9ef      	bls.n	8008a8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008aac:	480d      	ldr	r0, [pc, #52]	@ (8008ae4 <prvInitialiseTaskLists+0x64>)
 8008aae:	f7fe fca5 	bl	80073fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ab2:	480d      	ldr	r0, [pc, #52]	@ (8008ae8 <prvInitialiseTaskLists+0x68>)
 8008ab4:	f7fe fca2 	bl	80073fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ab8:	480c      	ldr	r0, [pc, #48]	@ (8008aec <prvInitialiseTaskLists+0x6c>)
 8008aba:	f7fe fc9f 	bl	80073fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008abe:	480c      	ldr	r0, [pc, #48]	@ (8008af0 <prvInitialiseTaskLists+0x70>)
 8008ac0:	f7fe fc9c 	bl	80073fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ac4:	480b      	ldr	r0, [pc, #44]	@ (8008af4 <prvInitialiseTaskLists+0x74>)
 8008ac6:	f7fe fc99 	bl	80073fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aca:	4b0b      	ldr	r3, [pc, #44]	@ (8008af8 <prvInitialiseTaskLists+0x78>)
 8008acc:	4a05      	ldr	r2, [pc, #20]	@ (8008ae4 <prvInitialiseTaskLists+0x64>)
 8008ace:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008ad0:	4b0a      	ldr	r3, [pc, #40]	@ (8008afc <prvInitialiseTaskLists+0x7c>)
 8008ad2:	4a05      	ldr	r2, [pc, #20]	@ (8008ae8 <prvInitialiseTaskLists+0x68>)
 8008ad4:	601a      	str	r2, [r3, #0]
}
 8008ad6:	bf00      	nop
 8008ad8:	3708      	adds	r7, #8
 8008ada:	46bd      	mov	sp, r7
 8008adc:	bd80      	pop	{r7, pc}
 8008ade:	bf00      	nop
 8008ae0:	200011d0 	.word	0x200011d0
 8008ae4:	20001630 	.word	0x20001630
 8008ae8:	20001644 	.word	0x20001644
 8008aec:	20001660 	.word	0x20001660
 8008af0:	20001674 	.word	0x20001674
 8008af4:	2000168c 	.word	0x2000168c
 8008af8:	20001658 	.word	0x20001658
 8008afc:	2000165c 	.word	0x2000165c

08008b00 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b00:	b580      	push	{r7, lr}
 8008b02:	b082      	sub	sp, #8
 8008b04:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b06:	e019      	b.n	8008b3c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b08:	f000 fdee 	bl	80096e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b0c:	4b10      	ldr	r3, [pc, #64]	@ (8008b50 <prvCheckTasksWaitingTermination+0x50>)
 8008b0e:	68db      	ldr	r3, [r3, #12]
 8008b10:	68db      	ldr	r3, [r3, #12]
 8008b12:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	3304      	adds	r3, #4
 8008b18:	4618      	mov	r0, r3
 8008b1a:	f7fe fcf9 	bl	8007510 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b1e:	4b0d      	ldr	r3, [pc, #52]	@ (8008b54 <prvCheckTasksWaitingTermination+0x54>)
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	3b01      	subs	r3, #1
 8008b24:	4a0b      	ldr	r2, [pc, #44]	@ (8008b54 <prvCheckTasksWaitingTermination+0x54>)
 8008b26:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b28:	4b0b      	ldr	r3, [pc, #44]	@ (8008b58 <prvCheckTasksWaitingTermination+0x58>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	3b01      	subs	r3, #1
 8008b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8008b58 <prvCheckTasksWaitingTermination+0x58>)
 8008b30:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b32:	f000 fe0b 	bl	800974c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f000 f810 	bl	8008b5c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b3c:	4b06      	ldr	r3, [pc, #24]	@ (8008b58 <prvCheckTasksWaitingTermination+0x58>)
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1e1      	bne.n	8008b08 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b44:	bf00      	nop
 8008b46:	bf00      	nop
 8008b48:	3708      	adds	r7, #8
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}
 8008b4e:	bf00      	nop
 8008b50:	20001674 	.word	0x20001674
 8008b54:	200016a0 	.word	0x200016a0
 8008b58:	20001688 	.word	0x20001688

08008b5c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b084      	sub	sp, #16
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	3354      	adds	r3, #84	@ 0x54
 8008b68:	4618      	mov	r0, r3
 8008b6a:	f001 f8d5 	bl	8009d18 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d108      	bne.n	8008b8a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b7c:	4618      	mov	r0, r3
 8008b7e:	f000 ffa3 	bl	8009ac8 <vPortFree>
				vPortFree( pxTCB );
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 ffa0 	bl	8009ac8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b88:	e019      	b.n	8008bbe <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b90:	2b01      	cmp	r3, #1
 8008b92:	d103      	bne.n	8008b9c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b94:	6878      	ldr	r0, [r7, #4]
 8008b96:	f000 ff97 	bl	8009ac8 <vPortFree>
	}
 8008b9a:	e010      	b.n	8008bbe <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008ba2:	2b02      	cmp	r3, #2
 8008ba4:	d00b      	beq.n	8008bbe <prvDeleteTCB+0x62>
	__asm volatile
 8008ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008baa:	f383 8811 	msr	BASEPRI, r3
 8008bae:	f3bf 8f6f 	isb	sy
 8008bb2:	f3bf 8f4f 	dsb	sy
 8008bb6:	60fb      	str	r3, [r7, #12]
}
 8008bb8:	bf00      	nop
 8008bba:	bf00      	nop
 8008bbc:	e7fd      	b.n	8008bba <prvDeleteTCB+0x5e>
	}
 8008bbe:	bf00      	nop
 8008bc0:	3710      	adds	r7, #16
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
	...

08008bc8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008bc8:	b480      	push	{r7}
 8008bca:	b083      	sub	sp, #12
 8008bcc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008bce:	4b0c      	ldr	r3, [pc, #48]	@ (8008c00 <prvResetNextTaskUnblockTime+0x38>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d104      	bne.n	8008be2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bd8:	4b0a      	ldr	r3, [pc, #40]	@ (8008c04 <prvResetNextTaskUnblockTime+0x3c>)
 8008bda:	f04f 32ff 	mov.w	r2, #4294967295
 8008bde:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008be0:	e008      	b.n	8008bf4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008be2:	4b07      	ldr	r3, [pc, #28]	@ (8008c00 <prvResetNextTaskUnblockTime+0x38>)
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	68db      	ldr	r3, [r3, #12]
 8008bea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	4a04      	ldr	r2, [pc, #16]	@ (8008c04 <prvResetNextTaskUnblockTime+0x3c>)
 8008bf2:	6013      	str	r3, [r2, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	370c      	adds	r7, #12
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfe:	4770      	bx	lr
 8008c00:	20001658 	.word	0x20001658
 8008c04:	200016c0 	.word	0x200016c0

08008c08 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c3c <xTaskGetSchedulerState+0x34>)
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d102      	bne.n	8008c1c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c16:	2301      	movs	r3, #1
 8008c18:	607b      	str	r3, [r7, #4]
 8008c1a:	e008      	b.n	8008c2e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c1c:	4b08      	ldr	r3, [pc, #32]	@ (8008c40 <xTaskGetSchedulerState+0x38>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d102      	bne.n	8008c2a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c24:	2302      	movs	r3, #2
 8008c26:	607b      	str	r3, [r7, #4]
 8008c28:	e001      	b.n	8008c2e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c2e:	687b      	ldr	r3, [r7, #4]
	}
 8008c30:	4618      	mov	r0, r3
 8008c32:	370c      	adds	r7, #12
 8008c34:	46bd      	mov	sp, r7
 8008c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3a:	4770      	bx	lr
 8008c3c:	200016ac 	.word	0x200016ac
 8008c40:	200016c8 	.word	0x200016c8

08008c44 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008c50:	2300      	movs	r3, #0
 8008c52:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d058      	beq.n	8008d0c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008c5a:	4b2f      	ldr	r3, [pc, #188]	@ (8008d18 <xTaskPriorityDisinherit+0xd4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	693a      	ldr	r2, [r7, #16]
 8008c60:	429a      	cmp	r2, r3
 8008c62:	d00b      	beq.n	8008c7c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c68:	f383 8811 	msr	BASEPRI, r3
 8008c6c:	f3bf 8f6f 	isb	sy
 8008c70:	f3bf 8f4f 	dsb	sy
 8008c74:	60fb      	str	r3, [r7, #12]
}
 8008c76:	bf00      	nop
 8008c78:	bf00      	nop
 8008c7a:	e7fd      	b.n	8008c78 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d10b      	bne.n	8008c9c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c88:	f383 8811 	msr	BASEPRI, r3
 8008c8c:	f3bf 8f6f 	isb	sy
 8008c90:	f3bf 8f4f 	dsb	sy
 8008c94:	60bb      	str	r3, [r7, #8]
}
 8008c96:	bf00      	nop
 8008c98:	bf00      	nop
 8008c9a:	e7fd      	b.n	8008c98 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ca0:	1e5a      	subs	r2, r3, #1
 8008ca2:	693b      	ldr	r3, [r7, #16]
 8008ca4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d02c      	beq.n	8008d0c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d128      	bne.n	8008d0c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	f7fe fc26 	bl	8007510 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cdc:	4b0f      	ldr	r3, [pc, #60]	@ (8008d1c <xTaskPriorityDisinherit+0xd8>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d903      	bls.n	8008cec <xTaskPriorityDisinherit+0xa8>
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ce8:	4a0c      	ldr	r2, [pc, #48]	@ (8008d1c <xTaskPriorityDisinherit+0xd8>)
 8008cea:	6013      	str	r3, [r2, #0]
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008cf0:	4613      	mov	r3, r2
 8008cf2:	009b      	lsls	r3, r3, #2
 8008cf4:	4413      	add	r3, r2
 8008cf6:	009b      	lsls	r3, r3, #2
 8008cf8:	4a09      	ldr	r2, [pc, #36]	@ (8008d20 <xTaskPriorityDisinherit+0xdc>)
 8008cfa:	441a      	add	r2, r3
 8008cfc:	693b      	ldr	r3, [r7, #16]
 8008cfe:	3304      	adds	r3, #4
 8008d00:	4619      	mov	r1, r3
 8008d02:	4610      	mov	r0, r2
 8008d04:	f7fe fba7 	bl	8007456 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008d08:	2301      	movs	r3, #1
 8008d0a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d0c:	697b      	ldr	r3, [r7, #20]
	}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	3718      	adds	r7, #24
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd80      	pop	{r7, pc}
 8008d16:	bf00      	nop
 8008d18:	200011cc 	.word	0x200011cc
 8008d1c:	200016a8 	.word	0x200016a8
 8008d20:	200011d0 	.word	0x200011d0

08008d24 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b084      	sub	sp, #16
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008d2e:	4b21      	ldr	r3, [pc, #132]	@ (8008db4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d34:	4b20      	ldr	r3, [pc, #128]	@ (8008db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	3304      	adds	r3, #4
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	f7fe fbe8 	bl	8007510 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d46:	d10a      	bne.n	8008d5e <prvAddCurrentTaskToDelayedList+0x3a>
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d007      	beq.n	8008d5e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d4e:	4b1a      	ldr	r3, [pc, #104]	@ (8008db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	3304      	adds	r3, #4
 8008d54:	4619      	mov	r1, r3
 8008d56:	4819      	ldr	r0, [pc, #100]	@ (8008dbc <prvAddCurrentTaskToDelayedList+0x98>)
 8008d58:	f7fe fb7d 	bl	8007456 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008d5c:	e026      	b.n	8008dac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008d5e:	68fa      	ldr	r2, [r7, #12]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	4413      	add	r3, r2
 8008d64:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d66:	4b14      	ldr	r3, [pc, #80]	@ (8008db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	68ba      	ldr	r2, [r7, #8]
 8008d6c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d6e:	68ba      	ldr	r2, [r7, #8]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d209      	bcs.n	8008d8a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d76:	4b12      	ldr	r3, [pc, #72]	@ (8008dc0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d78:	681a      	ldr	r2, [r3, #0]
 8008d7a:	4b0f      	ldr	r3, [pc, #60]	@ (8008db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	3304      	adds	r3, #4
 8008d80:	4619      	mov	r1, r3
 8008d82:	4610      	mov	r0, r2
 8008d84:	f7fe fb8b 	bl	800749e <vListInsert>
}
 8008d88:	e010      	b.n	8008dac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d8a:	4b0e      	ldr	r3, [pc, #56]	@ (8008dc4 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8008db8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	3304      	adds	r3, #4
 8008d94:	4619      	mov	r1, r3
 8008d96:	4610      	mov	r0, r2
 8008d98:	f7fe fb81 	bl	800749e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8008dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	68ba      	ldr	r2, [r7, #8]
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d202      	bcs.n	8008dac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008da6:	4a08      	ldr	r2, [pc, #32]	@ (8008dc8 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	6013      	str	r3, [r2, #0]
}
 8008dac:	bf00      	nop
 8008dae:	3710      	adds	r7, #16
 8008db0:	46bd      	mov	sp, r7
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	200016a4 	.word	0x200016a4
 8008db8:	200011cc 	.word	0x200011cc
 8008dbc:	2000168c 	.word	0x2000168c
 8008dc0:	2000165c 	.word	0x2000165c
 8008dc4:	20001658 	.word	0x20001658
 8008dc8:	200016c0 	.word	0x200016c0

08008dcc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b08a      	sub	sp, #40	@ 0x28
 8008dd0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008dd6:	f000 fb13 	bl	8009400 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008dda:	4b1d      	ldr	r3, [pc, #116]	@ (8008e50 <xTimerCreateTimerTask+0x84>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d021      	beq.n	8008e26 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008de2:	2300      	movs	r3, #0
 8008de4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008de6:	2300      	movs	r3, #0
 8008de8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008dea:	1d3a      	adds	r2, r7, #4
 8008dec:	f107 0108 	add.w	r1, r7, #8
 8008df0:	f107 030c 	add.w	r3, r7, #12
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fe fae7 	bl	80073c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008dfa:	6879      	ldr	r1, [r7, #4]
 8008dfc:	68bb      	ldr	r3, [r7, #8]
 8008dfe:	68fa      	ldr	r2, [r7, #12]
 8008e00:	9202      	str	r2, [sp, #8]
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	2302      	movs	r3, #2
 8008e06:	9300      	str	r3, [sp, #0]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	460a      	mov	r2, r1
 8008e0c:	4911      	ldr	r1, [pc, #68]	@ (8008e54 <xTimerCreateTimerTask+0x88>)
 8008e0e:	4812      	ldr	r0, [pc, #72]	@ (8008e58 <xTimerCreateTimerTask+0x8c>)
 8008e10:	f7ff f8a2 	bl	8007f58 <xTaskCreateStatic>
 8008e14:	4603      	mov	r3, r0
 8008e16:	4a11      	ldr	r2, [pc, #68]	@ (8008e5c <xTimerCreateTimerTask+0x90>)
 8008e18:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008e1a:	4b10      	ldr	r3, [pc, #64]	@ (8008e5c <xTimerCreateTimerTask+0x90>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008e22:	2301      	movs	r3, #1
 8008e24:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10b      	bne.n	8008e44 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008e2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e30:	f383 8811 	msr	BASEPRI, r3
 8008e34:	f3bf 8f6f 	isb	sy
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	613b      	str	r3, [r7, #16]
}
 8008e3e:	bf00      	nop
 8008e40:	bf00      	nop
 8008e42:	e7fd      	b.n	8008e40 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008e44:	697b      	ldr	r3, [r7, #20]
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3718      	adds	r7, #24
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	200016fc 	.word	0x200016fc
 8008e54:	08009f2c 	.word	0x08009f2c
 8008e58:	08008f99 	.word	0x08008f99
 8008e5c:	20001700 	.word	0x20001700

08008e60 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b08a      	sub	sp, #40	@ 0x28
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	607a      	str	r2, [r7, #4]
 8008e6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e6e:	2300      	movs	r3, #0
 8008e70:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10b      	bne.n	8008e90 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e7c:	f383 8811 	msr	BASEPRI, r3
 8008e80:	f3bf 8f6f 	isb	sy
 8008e84:	f3bf 8f4f 	dsb	sy
 8008e88:	623b      	str	r3, [r7, #32]
}
 8008e8a:	bf00      	nop
 8008e8c:	bf00      	nop
 8008e8e:	e7fd      	b.n	8008e8c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e90:	4b19      	ldr	r3, [pc, #100]	@ (8008ef8 <xTimerGenericCommand+0x98>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d02a      	beq.n	8008eee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e98:	68bb      	ldr	r3, [r7, #8]
 8008e9a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008ea4:	68bb      	ldr	r3, [r7, #8]
 8008ea6:	2b05      	cmp	r3, #5
 8008ea8:	dc18      	bgt.n	8008edc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008eaa:	f7ff fead 	bl	8008c08 <xTaskGetSchedulerState>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b02      	cmp	r3, #2
 8008eb2:	d109      	bne.n	8008ec8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008eb4:	4b10      	ldr	r3, [pc, #64]	@ (8008ef8 <xTimerGenericCommand+0x98>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	f107 0110 	add.w	r1, r7, #16
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ec0:	f7fe fc5a 	bl	8007778 <xQueueGenericSend>
 8008ec4:	6278      	str	r0, [r7, #36]	@ 0x24
 8008ec6:	e012      	b.n	8008eee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8008ef8 <xTimerGenericCommand+0x98>)
 8008eca:	6818      	ldr	r0, [r3, #0]
 8008ecc:	f107 0110 	add.w	r1, r7, #16
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	2200      	movs	r2, #0
 8008ed4:	f7fe fc50 	bl	8007778 <xQueueGenericSend>
 8008ed8:	6278      	str	r0, [r7, #36]	@ 0x24
 8008eda:	e008      	b.n	8008eee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008edc:	4b06      	ldr	r3, [pc, #24]	@ (8008ef8 <xTimerGenericCommand+0x98>)
 8008ede:	6818      	ldr	r0, [r3, #0]
 8008ee0:	f107 0110 	add.w	r1, r7, #16
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	683a      	ldr	r2, [r7, #0]
 8008ee8:	f7fe fd48 	bl	800797c <xQueueGenericSendFromISR>
 8008eec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	3728      	adds	r7, #40	@ 0x28
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	200016fc 	.word	0x200016fc

08008efc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b088      	sub	sp, #32
 8008f00:	af02      	add	r7, sp, #8
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f06:	4b23      	ldr	r3, [pc, #140]	@ (8008f94 <prvProcessExpiredTimer+0x98>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	68db      	ldr	r3, [r3, #12]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	3304      	adds	r3, #4
 8008f14:	4618      	mov	r0, r3
 8008f16:	f7fe fafb 	bl	8007510 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f1a:	697b      	ldr	r3, [r7, #20]
 8008f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d023      	beq.n	8008f70 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008f28:	697b      	ldr	r3, [r7, #20]
 8008f2a:	699a      	ldr	r2, [r3, #24]
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	18d1      	adds	r1, r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	6978      	ldr	r0, [r7, #20]
 8008f36:	f000 f8d5 	bl	80090e4 <prvInsertTimerInActiveList>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d020      	beq.n	8008f82 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008f40:	2300      	movs	r3, #0
 8008f42:	9300      	str	r3, [sp, #0]
 8008f44:	2300      	movs	r3, #0
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	2100      	movs	r1, #0
 8008f4a:	6978      	ldr	r0, [r7, #20]
 8008f4c:	f7ff ff88 	bl	8008e60 <xTimerGenericCommand>
 8008f50:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008f52:	693b      	ldr	r3, [r7, #16]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d114      	bne.n	8008f82 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008f58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f5c:	f383 8811 	msr	BASEPRI, r3
 8008f60:	f3bf 8f6f 	isb	sy
 8008f64:	f3bf 8f4f 	dsb	sy
 8008f68:	60fb      	str	r3, [r7, #12]
}
 8008f6a:	bf00      	nop
 8008f6c:	bf00      	nop
 8008f6e:	e7fd      	b.n	8008f6c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f70:	697b      	ldr	r3, [r7, #20]
 8008f72:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f76:	f023 0301 	bic.w	r3, r3, #1
 8008f7a:	b2da      	uxtb	r2, r3
 8008f7c:	697b      	ldr	r3, [r7, #20]
 8008f7e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	6a1b      	ldr	r3, [r3, #32]
 8008f86:	6978      	ldr	r0, [r7, #20]
 8008f88:	4798      	blx	r3
}
 8008f8a:	bf00      	nop
 8008f8c:	3718      	adds	r7, #24
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	bd80      	pop	{r7, pc}
 8008f92:	bf00      	nop
 8008f94:	200016f4 	.word	0x200016f4

08008f98 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f98:	b580      	push	{r7, lr}
 8008f9a:	b084      	sub	sp, #16
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fa0:	f107 0308 	add.w	r3, r7, #8
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	f000 f859 	bl	800905c <prvGetNextExpireTime>
 8008faa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4619      	mov	r1, r3
 8008fb0:	68f8      	ldr	r0, [r7, #12]
 8008fb2:	f000 f805 	bl	8008fc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008fb6:	f000 f8d7 	bl	8009168 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008fba:	bf00      	nop
 8008fbc:	e7f0      	b.n	8008fa0 <prvTimerTask+0x8>
	...

08008fc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008fc0:	b580      	push	{r7, lr}
 8008fc2:	b084      	sub	sp, #16
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008fca:	f7ff fa29 	bl	8008420 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fce:	f107 0308 	add.w	r3, r7, #8
 8008fd2:	4618      	mov	r0, r3
 8008fd4:	f000 f866 	bl	80090a4 <prvSampleTimeNow>
 8008fd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d130      	bne.n	8009042 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d10a      	bne.n	8008ffc <prvProcessTimerOrBlockTask+0x3c>
 8008fe6:	687a      	ldr	r2, [r7, #4]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	429a      	cmp	r2, r3
 8008fec:	d806      	bhi.n	8008ffc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008fee:	f7ff fa25 	bl	800843c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008ff2:	68f9      	ldr	r1, [r7, #12]
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f7ff ff81 	bl	8008efc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008ffa:	e024      	b.n	8009046 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	d008      	beq.n	8009014 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009002:	4b13      	ldr	r3, [pc, #76]	@ (8009050 <prvProcessTimerOrBlockTask+0x90>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d101      	bne.n	8009010 <prvProcessTimerOrBlockTask+0x50>
 800900c:	2301      	movs	r3, #1
 800900e:	e000      	b.n	8009012 <prvProcessTimerOrBlockTask+0x52>
 8009010:	2300      	movs	r3, #0
 8009012:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009014:	4b0f      	ldr	r3, [pc, #60]	@ (8009054 <prvProcessTimerOrBlockTask+0x94>)
 8009016:	6818      	ldr	r0, [r3, #0]
 8009018:	687a      	ldr	r2, [r7, #4]
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	683a      	ldr	r2, [r7, #0]
 8009020:	4619      	mov	r1, r3
 8009022:	f7fe ff65 	bl	8007ef0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009026:	f7ff fa09 	bl	800843c <xTaskResumeAll>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d10a      	bne.n	8009046 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009030:	4b09      	ldr	r3, [pc, #36]	@ (8009058 <prvProcessTimerOrBlockTask+0x98>)
 8009032:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009036:	601a      	str	r2, [r3, #0]
 8009038:	f3bf 8f4f 	dsb	sy
 800903c:	f3bf 8f6f 	isb	sy
}
 8009040:	e001      	b.n	8009046 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009042:	f7ff f9fb 	bl	800843c <xTaskResumeAll>
}
 8009046:	bf00      	nop
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
 800904e:	bf00      	nop
 8009050:	200016f8 	.word	0x200016f8
 8009054:	200016fc 	.word	0x200016fc
 8009058:	e000ed04 	.word	0xe000ed04

0800905c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800905c:	b480      	push	{r7}
 800905e:	b085      	sub	sp, #20
 8009060:	af00      	add	r7, sp, #0
 8009062:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009064:	4b0e      	ldr	r3, [pc, #56]	@ (80090a0 <prvGetNextExpireTime+0x44>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <prvGetNextExpireTime+0x16>
 800906e:	2201      	movs	r2, #1
 8009070:	e000      	b.n	8009074 <prvGetNextExpireTime+0x18>
 8009072:	2200      	movs	r2, #0
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d105      	bne.n	800908c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009080:	4b07      	ldr	r3, [pc, #28]	@ (80090a0 <prvGetNextExpireTime+0x44>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	60fb      	str	r3, [r7, #12]
 800908a:	e001      	b.n	8009090 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800908c:	2300      	movs	r3, #0
 800908e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009090:	68fb      	ldr	r3, [r7, #12]
}
 8009092:	4618      	mov	r0, r3
 8009094:	3714      	adds	r7, #20
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	200016f4 	.word	0x200016f4

080090a4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80090ac:	f7ff fa64 	bl	8008578 <xTaskGetTickCount>
 80090b0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80090b2:	4b0b      	ldr	r3, [pc, #44]	@ (80090e0 <prvSampleTimeNow+0x3c>)
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	68fa      	ldr	r2, [r7, #12]
 80090b8:	429a      	cmp	r2, r3
 80090ba:	d205      	bcs.n	80090c8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80090bc:	f000 f93a 	bl	8009334 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	2201      	movs	r2, #1
 80090c4:	601a      	str	r2, [r3, #0]
 80090c6:	e002      	b.n	80090ce <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	2200      	movs	r2, #0
 80090cc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80090ce:	4a04      	ldr	r2, [pc, #16]	@ (80090e0 <prvSampleTimeNow+0x3c>)
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80090d4:	68fb      	ldr	r3, [r7, #12]
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	20001704 	.word	0x20001704

080090e4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80090e4:	b580      	push	{r7, lr}
 80090e6:	b086      	sub	sp, #24
 80090e8:	af00      	add	r7, sp, #0
 80090ea:	60f8      	str	r0, [r7, #12]
 80090ec:	60b9      	str	r1, [r7, #8]
 80090ee:	607a      	str	r2, [r7, #4]
 80090f0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80090f2:	2300      	movs	r3, #0
 80090f4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	68ba      	ldr	r2, [r7, #8]
 80090fa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090fc:	68fb      	ldr	r3, [r7, #12]
 80090fe:	68fa      	ldr	r2, [r7, #12]
 8009100:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009102:	68ba      	ldr	r2, [r7, #8]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	429a      	cmp	r2, r3
 8009108:	d812      	bhi.n	8009130 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800910a:	687a      	ldr	r2, [r7, #4]
 800910c:	683b      	ldr	r3, [r7, #0]
 800910e:	1ad2      	subs	r2, r2, r3
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	699b      	ldr	r3, [r3, #24]
 8009114:	429a      	cmp	r2, r3
 8009116:	d302      	bcc.n	800911e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009118:	2301      	movs	r3, #1
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	e01b      	b.n	8009156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800911e:	4b10      	ldr	r3, [pc, #64]	@ (8009160 <prvInsertTimerInActiveList+0x7c>)
 8009120:	681a      	ldr	r2, [r3, #0]
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	3304      	adds	r3, #4
 8009126:	4619      	mov	r1, r3
 8009128:	4610      	mov	r0, r2
 800912a:	f7fe f9b8 	bl	800749e <vListInsert>
 800912e:	e012      	b.n	8009156 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009130:	687a      	ldr	r2, [r7, #4]
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	429a      	cmp	r2, r3
 8009136:	d206      	bcs.n	8009146 <prvInsertTimerInActiveList+0x62>
 8009138:	68ba      	ldr	r2, [r7, #8]
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	429a      	cmp	r2, r3
 800913e:	d302      	bcc.n	8009146 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009140:	2301      	movs	r3, #1
 8009142:	617b      	str	r3, [r7, #20]
 8009144:	e007      	b.n	8009156 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009146:	4b07      	ldr	r3, [pc, #28]	@ (8009164 <prvInsertTimerInActiveList+0x80>)
 8009148:	681a      	ldr	r2, [r3, #0]
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	3304      	adds	r3, #4
 800914e:	4619      	mov	r1, r3
 8009150:	4610      	mov	r0, r2
 8009152:	f7fe f9a4 	bl	800749e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009156:	697b      	ldr	r3, [r7, #20]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	200016f8 	.word	0x200016f8
 8009164:	200016f4 	.word	0x200016f4

08009168 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b08e      	sub	sp, #56	@ 0x38
 800916c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800916e:	e0ce      	b.n	800930e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	2b00      	cmp	r3, #0
 8009174:	da19      	bge.n	80091aa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009176:	1d3b      	adds	r3, r7, #4
 8009178:	3304      	adds	r3, #4
 800917a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800917c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800917e:	2b00      	cmp	r3, #0
 8009180:	d10b      	bne.n	800919a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009186:	f383 8811 	msr	BASEPRI, r3
 800918a:	f3bf 8f6f 	isb	sy
 800918e:	f3bf 8f4f 	dsb	sy
 8009192:	61fb      	str	r3, [r7, #28]
}
 8009194:	bf00      	nop
 8009196:	bf00      	nop
 8009198:	e7fd      	b.n	8009196 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800919a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091a0:	6850      	ldr	r0, [r2, #4]
 80091a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80091a4:	6892      	ldr	r2, [r2, #8]
 80091a6:	4611      	mov	r1, r2
 80091a8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	f2c0 80ae 	blt.w	800930e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80091b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b8:	695b      	ldr	r3, [r3, #20]
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d004      	beq.n	80091c8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80091be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091c0:	3304      	adds	r3, #4
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fe f9a4 	bl	8007510 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80091c8:	463b      	mov	r3, r7
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff ff6a 	bl	80090a4 <prvSampleTimeNow>
 80091d0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2b09      	cmp	r3, #9
 80091d6:	f200 8097 	bhi.w	8009308 <prvProcessReceivedCommands+0x1a0>
 80091da:	a201      	add	r2, pc, #4	@ (adr r2, 80091e0 <prvProcessReceivedCommands+0x78>)
 80091dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e0:	08009209 	.word	0x08009209
 80091e4:	08009209 	.word	0x08009209
 80091e8:	08009209 	.word	0x08009209
 80091ec:	0800927f 	.word	0x0800927f
 80091f0:	08009293 	.word	0x08009293
 80091f4:	080092df 	.word	0x080092df
 80091f8:	08009209 	.word	0x08009209
 80091fc:	08009209 	.word	0x08009209
 8009200:	0800927f 	.word	0x0800927f
 8009204:	08009293 	.word	0x08009293
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800920a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800920e:	f043 0301 	orr.w	r3, r3, #1
 8009212:	b2da      	uxtb	r2, r3
 8009214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009216:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800921a:	68ba      	ldr	r2, [r7, #8]
 800921c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	18d1      	adds	r1, r2, r3
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009226:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009228:	f7ff ff5c 	bl	80090e4 <prvInsertTimerInActiveList>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d06c      	beq.n	800930c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009234:	6a1b      	ldr	r3, [r3, #32]
 8009236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009238:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800923a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009240:	f003 0304 	and.w	r3, r3, #4
 8009244:	2b00      	cmp	r3, #0
 8009246:	d061      	beq.n	800930c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009248:	68ba      	ldr	r2, [r7, #8]
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	441a      	add	r2, r3
 8009250:	2300      	movs	r3, #0
 8009252:	9300      	str	r3, [sp, #0]
 8009254:	2300      	movs	r3, #0
 8009256:	2100      	movs	r1, #0
 8009258:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800925a:	f7ff fe01 	bl	8008e60 <xTimerGenericCommand>
 800925e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d152      	bne.n	800930c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800926a:	f383 8811 	msr	BASEPRI, r3
 800926e:	f3bf 8f6f 	isb	sy
 8009272:	f3bf 8f4f 	dsb	sy
 8009276:	61bb      	str	r3, [r7, #24]
}
 8009278:	bf00      	nop
 800927a:	bf00      	nop
 800927c:	e7fd      	b.n	800927a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009284:	f023 0301 	bic.w	r3, r3, #1
 8009288:	b2da      	uxtb	r2, r3
 800928a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800928c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009290:	e03d      	b.n	800930e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009294:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009298:	f043 0301 	orr.w	r3, r3, #1
 800929c:	b2da      	uxtb	r2, r3
 800929e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80092a4:	68ba      	ldr	r2, [r7, #8]
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80092aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ac:	699b      	ldr	r3, [r3, #24]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10b      	bne.n	80092ca <prvProcessReceivedCommands+0x162>
	__asm volatile
 80092b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092b6:	f383 8811 	msr	BASEPRI, r3
 80092ba:	f3bf 8f6f 	isb	sy
 80092be:	f3bf 8f4f 	dsb	sy
 80092c2:	617b      	str	r3, [r7, #20]
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	e7fd      	b.n	80092c6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80092ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092cc:	699a      	ldr	r2, [r3, #24]
 80092ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d0:	18d1      	adds	r1, r2, r3
 80092d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80092d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092d8:	f7ff ff04 	bl	80090e4 <prvInsertTimerInActiveList>
					break;
 80092dc:	e017      	b.n	800930e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80092de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092e4:	f003 0302 	and.w	r3, r3, #2
 80092e8:	2b00      	cmp	r3, #0
 80092ea:	d103      	bne.n	80092f4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80092ec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80092ee:	f000 fbeb 	bl	8009ac8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80092f2:	e00c      	b.n	800930e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80092fa:	f023 0301 	bic.w	r3, r3, #1
 80092fe:	b2da      	uxtb	r2, r3
 8009300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009302:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009306:	e002      	b.n	800930e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009308:	bf00      	nop
 800930a:	e000      	b.n	800930e <prvProcessReceivedCommands+0x1a6>
					break;
 800930c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800930e:	4b08      	ldr	r3, [pc, #32]	@ (8009330 <prvProcessReceivedCommands+0x1c8>)
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	1d39      	adds	r1, r7, #4
 8009314:	2200      	movs	r2, #0
 8009316:	4618      	mov	r0, r3
 8009318:	f7fe fbce 	bl	8007ab8 <xQueueReceive>
 800931c:	4603      	mov	r3, r0
 800931e:	2b00      	cmp	r3, #0
 8009320:	f47f af26 	bne.w	8009170 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009324:	bf00      	nop
 8009326:	bf00      	nop
 8009328:	3730      	adds	r7, #48	@ 0x30
 800932a:	46bd      	mov	sp, r7
 800932c:	bd80      	pop	{r7, pc}
 800932e:	bf00      	nop
 8009330:	200016fc 	.word	0x200016fc

08009334 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b088      	sub	sp, #32
 8009338:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800933a:	e049      	b.n	80093d0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800933c:	4b2e      	ldr	r3, [pc, #184]	@ (80093f8 <prvSwitchTimerLists+0xc4>)
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009346:	4b2c      	ldr	r3, [pc, #176]	@ (80093f8 <prvSwitchTimerLists+0xc4>)
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	68db      	ldr	r3, [r3, #12]
 800934e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	3304      	adds	r3, #4
 8009354:	4618      	mov	r0, r3
 8009356:	f7fe f8db 	bl	8007510 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	6a1b      	ldr	r3, [r3, #32]
 800935e:	68f8      	ldr	r0, [r7, #12]
 8009360:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009368:	f003 0304 	and.w	r3, r3, #4
 800936c:	2b00      	cmp	r3, #0
 800936e:	d02f      	beq.n	80093d0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	699b      	ldr	r3, [r3, #24]
 8009374:	693a      	ldr	r2, [r7, #16]
 8009376:	4413      	add	r3, r2
 8009378:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800937a:	68ba      	ldr	r2, [r7, #8]
 800937c:	693b      	ldr	r3, [r7, #16]
 800937e:	429a      	cmp	r2, r3
 8009380:	d90e      	bls.n	80093a0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	68ba      	ldr	r2, [r7, #8]
 8009386:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	68fa      	ldr	r2, [r7, #12]
 800938c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800938e:	4b1a      	ldr	r3, [pc, #104]	@ (80093f8 <prvSwitchTimerLists+0xc4>)
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	3304      	adds	r3, #4
 8009396:	4619      	mov	r1, r3
 8009398:	4610      	mov	r0, r2
 800939a:	f7fe f880 	bl	800749e <vListInsert>
 800939e:	e017      	b.n	80093d0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80093a0:	2300      	movs	r3, #0
 80093a2:	9300      	str	r3, [sp, #0]
 80093a4:	2300      	movs	r3, #0
 80093a6:	693a      	ldr	r2, [r7, #16]
 80093a8:	2100      	movs	r1, #0
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	f7ff fd58 	bl	8008e60 <xTimerGenericCommand>
 80093b0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d10b      	bne.n	80093d0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80093b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093bc:	f383 8811 	msr	BASEPRI, r3
 80093c0:	f3bf 8f6f 	isb	sy
 80093c4:	f3bf 8f4f 	dsb	sy
 80093c8:	603b      	str	r3, [r7, #0]
}
 80093ca:	bf00      	nop
 80093cc:	bf00      	nop
 80093ce:	e7fd      	b.n	80093cc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80093d0:	4b09      	ldr	r3, [pc, #36]	@ (80093f8 <prvSwitchTimerLists+0xc4>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1b0      	bne.n	800933c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80093da:	4b07      	ldr	r3, [pc, #28]	@ (80093f8 <prvSwitchTimerLists+0xc4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80093e0:	4b06      	ldr	r3, [pc, #24]	@ (80093fc <prvSwitchTimerLists+0xc8>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	4a04      	ldr	r2, [pc, #16]	@ (80093f8 <prvSwitchTimerLists+0xc4>)
 80093e6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80093e8:	4a04      	ldr	r2, [pc, #16]	@ (80093fc <prvSwitchTimerLists+0xc8>)
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	6013      	str	r3, [r2, #0]
}
 80093ee:	bf00      	nop
 80093f0:	3718      	adds	r7, #24
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	200016f4 	.word	0x200016f4
 80093fc:	200016f8 	.word	0x200016f8

08009400 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b082      	sub	sp, #8
 8009404:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009406:	f000 f96f 	bl	80096e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800940a:	4b15      	ldr	r3, [pc, #84]	@ (8009460 <prvCheckForValidListAndQueue+0x60>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d120      	bne.n	8009454 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009412:	4814      	ldr	r0, [pc, #80]	@ (8009464 <prvCheckForValidListAndQueue+0x64>)
 8009414:	f7fd fff2 	bl	80073fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009418:	4813      	ldr	r0, [pc, #76]	@ (8009468 <prvCheckForValidListAndQueue+0x68>)
 800941a:	f7fd ffef 	bl	80073fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800941e:	4b13      	ldr	r3, [pc, #76]	@ (800946c <prvCheckForValidListAndQueue+0x6c>)
 8009420:	4a10      	ldr	r2, [pc, #64]	@ (8009464 <prvCheckForValidListAndQueue+0x64>)
 8009422:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009424:	4b12      	ldr	r3, [pc, #72]	@ (8009470 <prvCheckForValidListAndQueue+0x70>)
 8009426:	4a10      	ldr	r2, [pc, #64]	@ (8009468 <prvCheckForValidListAndQueue+0x68>)
 8009428:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800942a:	2300      	movs	r3, #0
 800942c:	9300      	str	r3, [sp, #0]
 800942e:	4b11      	ldr	r3, [pc, #68]	@ (8009474 <prvCheckForValidListAndQueue+0x74>)
 8009430:	4a11      	ldr	r2, [pc, #68]	@ (8009478 <prvCheckForValidListAndQueue+0x78>)
 8009432:	2110      	movs	r1, #16
 8009434:	200a      	movs	r0, #10
 8009436:	f7fe f8ff 	bl	8007638 <xQueueGenericCreateStatic>
 800943a:	4603      	mov	r3, r0
 800943c:	4a08      	ldr	r2, [pc, #32]	@ (8009460 <prvCheckForValidListAndQueue+0x60>)
 800943e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009440:	4b07      	ldr	r3, [pc, #28]	@ (8009460 <prvCheckForValidListAndQueue+0x60>)
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d005      	beq.n	8009454 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009448:	4b05      	ldr	r3, [pc, #20]	@ (8009460 <prvCheckForValidListAndQueue+0x60>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	490b      	ldr	r1, [pc, #44]	@ (800947c <prvCheckForValidListAndQueue+0x7c>)
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe fd24 	bl	8007e9c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009454:	f000 f97a 	bl	800974c <vPortExitCritical>
}
 8009458:	bf00      	nop
 800945a:	46bd      	mov	sp, r7
 800945c:	bd80      	pop	{r7, pc}
 800945e:	bf00      	nop
 8009460:	200016fc 	.word	0x200016fc
 8009464:	200016cc 	.word	0x200016cc
 8009468:	200016e0 	.word	0x200016e0
 800946c:	200016f4 	.word	0x200016f4
 8009470:	200016f8 	.word	0x200016f8
 8009474:	200017a8 	.word	0x200017a8
 8009478:	20001708 	.word	0x20001708
 800947c:	08009f34 	.word	0x08009f34

08009480 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009480:	b480      	push	{r7}
 8009482:	b085      	sub	sp, #20
 8009484:	af00      	add	r7, sp, #0
 8009486:	60f8      	str	r0, [r7, #12]
 8009488:	60b9      	str	r1, [r7, #8]
 800948a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3b04      	subs	r3, #4
 8009490:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009498:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3b04      	subs	r3, #4
 800949e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	f023 0201 	bic.w	r2, r3, #1
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	3b04      	subs	r3, #4
 80094ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80094b0:	4a0c      	ldr	r2, [pc, #48]	@ (80094e4 <pxPortInitialiseStack+0x64>)
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	3b14      	subs	r3, #20
 80094ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80094bc:	687a      	ldr	r2, [r7, #4]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	3b04      	subs	r3, #4
 80094c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f06f 0202 	mvn.w	r2, #2
 80094ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3b20      	subs	r3, #32
 80094d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80094d6:	68fb      	ldr	r3, [r7, #12]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3714      	adds	r7, #20
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr
 80094e4:	080094e9 	.word	0x080094e9

080094e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80094e8:	b480      	push	{r7}
 80094ea:	b085      	sub	sp, #20
 80094ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80094ee:	2300      	movs	r3, #0
 80094f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80094f2:	4b13      	ldr	r3, [pc, #76]	@ (8009540 <prvTaskExitError+0x58>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094fa:	d00b      	beq.n	8009514 <prvTaskExitError+0x2c>
	__asm volatile
 80094fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009500:	f383 8811 	msr	BASEPRI, r3
 8009504:	f3bf 8f6f 	isb	sy
 8009508:	f3bf 8f4f 	dsb	sy
 800950c:	60fb      	str	r3, [r7, #12]
}
 800950e:	bf00      	nop
 8009510:	bf00      	nop
 8009512:	e7fd      	b.n	8009510 <prvTaskExitError+0x28>
	__asm volatile
 8009514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009518:	f383 8811 	msr	BASEPRI, r3
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f3bf 8f4f 	dsb	sy
 8009524:	60bb      	str	r3, [r7, #8]
}
 8009526:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009528:	bf00      	nop
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d0fc      	beq.n	800952a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009530:	bf00      	nop
 8009532:	bf00      	nop
 8009534:	3714      	adds	r7, #20
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	200000c4 	.word	0x200000c4
	...

08009550 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009550:	4b07      	ldr	r3, [pc, #28]	@ (8009570 <pxCurrentTCBConst2>)
 8009552:	6819      	ldr	r1, [r3, #0]
 8009554:	6808      	ldr	r0, [r1, #0]
 8009556:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800955a:	f380 8809 	msr	PSP, r0
 800955e:	f3bf 8f6f 	isb	sy
 8009562:	f04f 0000 	mov.w	r0, #0
 8009566:	f380 8811 	msr	BASEPRI, r0
 800956a:	4770      	bx	lr
 800956c:	f3af 8000 	nop.w

08009570 <pxCurrentTCBConst2>:
 8009570:	200011cc 	.word	0x200011cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009574:	bf00      	nop
 8009576:	bf00      	nop

08009578 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009578:	4808      	ldr	r0, [pc, #32]	@ (800959c <prvPortStartFirstTask+0x24>)
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	6800      	ldr	r0, [r0, #0]
 800957e:	f380 8808 	msr	MSP, r0
 8009582:	f04f 0000 	mov.w	r0, #0
 8009586:	f380 8814 	msr	CONTROL, r0
 800958a:	b662      	cpsie	i
 800958c:	b661      	cpsie	f
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	f3bf 8f6f 	isb	sy
 8009596:	df00      	svc	0
 8009598:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800959a:	bf00      	nop
 800959c:	e000ed08 	.word	0xe000ed08

080095a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b086      	sub	sp, #24
 80095a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80095a6:	4b47      	ldr	r3, [pc, #284]	@ (80096c4 <xPortStartScheduler+0x124>)
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	4a47      	ldr	r2, [pc, #284]	@ (80096c8 <xPortStartScheduler+0x128>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d10b      	bne.n	80095c8 <xPortStartScheduler+0x28>
	__asm volatile
 80095b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095b4:	f383 8811 	msr	BASEPRI, r3
 80095b8:	f3bf 8f6f 	isb	sy
 80095bc:	f3bf 8f4f 	dsb	sy
 80095c0:	613b      	str	r3, [r7, #16]
}
 80095c2:	bf00      	nop
 80095c4:	bf00      	nop
 80095c6:	e7fd      	b.n	80095c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80095c8:	4b3e      	ldr	r3, [pc, #248]	@ (80096c4 <xPortStartScheduler+0x124>)
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a3f      	ldr	r2, [pc, #252]	@ (80096cc <xPortStartScheduler+0x12c>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d10b      	bne.n	80095ea <xPortStartScheduler+0x4a>
	__asm volatile
 80095d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095d6:	f383 8811 	msr	BASEPRI, r3
 80095da:	f3bf 8f6f 	isb	sy
 80095de:	f3bf 8f4f 	dsb	sy
 80095e2:	60fb      	str	r3, [r7, #12]
}
 80095e4:	bf00      	nop
 80095e6:	bf00      	nop
 80095e8:	e7fd      	b.n	80095e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80095ea:	4b39      	ldr	r3, [pc, #228]	@ (80096d0 <xPortStartScheduler+0x130>)
 80095ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80095ee:	697b      	ldr	r3, [r7, #20]
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	b2db      	uxtb	r3, r3
 80095f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80095f6:	697b      	ldr	r3, [r7, #20]
 80095f8:	22ff      	movs	r2, #255	@ 0xff
 80095fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80095fc:	697b      	ldr	r3, [r7, #20]
 80095fe:	781b      	ldrb	r3, [r3, #0]
 8009600:	b2db      	uxtb	r3, r3
 8009602:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009604:	78fb      	ldrb	r3, [r7, #3]
 8009606:	b2db      	uxtb	r3, r3
 8009608:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800960c:	b2da      	uxtb	r2, r3
 800960e:	4b31      	ldr	r3, [pc, #196]	@ (80096d4 <xPortStartScheduler+0x134>)
 8009610:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009612:	4b31      	ldr	r3, [pc, #196]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009614:	2207      	movs	r2, #7
 8009616:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009618:	e009      	b.n	800962e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800961a:	4b2f      	ldr	r3, [pc, #188]	@ (80096d8 <xPortStartScheduler+0x138>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	3b01      	subs	r3, #1
 8009620:	4a2d      	ldr	r2, [pc, #180]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009622:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009624:	78fb      	ldrb	r3, [r7, #3]
 8009626:	b2db      	uxtb	r3, r3
 8009628:	005b      	lsls	r3, r3, #1
 800962a:	b2db      	uxtb	r3, r3
 800962c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800962e:	78fb      	ldrb	r3, [r7, #3]
 8009630:	b2db      	uxtb	r3, r3
 8009632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009636:	2b80      	cmp	r3, #128	@ 0x80
 8009638:	d0ef      	beq.n	800961a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800963a:	4b27      	ldr	r3, [pc, #156]	@ (80096d8 <xPortStartScheduler+0x138>)
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f1c3 0307 	rsb	r3, r3, #7
 8009642:	2b04      	cmp	r3, #4
 8009644:	d00b      	beq.n	800965e <xPortStartScheduler+0xbe>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	60bb      	str	r3, [r7, #8]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800965e:	4b1e      	ldr	r3, [pc, #120]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	021b      	lsls	r3, r3, #8
 8009664:	4a1c      	ldr	r2, [pc, #112]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009666:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009668:	4b1b      	ldr	r3, [pc, #108]	@ (80096d8 <xPortStartScheduler+0x138>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009670:	4a19      	ldr	r2, [pc, #100]	@ (80096d8 <xPortStartScheduler+0x138>)
 8009672:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	b2da      	uxtb	r2, r3
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800967c:	4b17      	ldr	r3, [pc, #92]	@ (80096dc <xPortStartScheduler+0x13c>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a16      	ldr	r2, [pc, #88]	@ (80096dc <xPortStartScheduler+0x13c>)
 8009682:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009686:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009688:	4b14      	ldr	r3, [pc, #80]	@ (80096dc <xPortStartScheduler+0x13c>)
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a13      	ldr	r2, [pc, #76]	@ (80096dc <xPortStartScheduler+0x13c>)
 800968e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009692:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009694:	f000 f8da 	bl	800984c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009698:	4b11      	ldr	r3, [pc, #68]	@ (80096e0 <xPortStartScheduler+0x140>)
 800969a:	2200      	movs	r2, #0
 800969c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800969e:	f000 f8f9 	bl	8009894 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80096a2:	4b10      	ldr	r3, [pc, #64]	@ (80096e4 <xPortStartScheduler+0x144>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	4a0f      	ldr	r2, [pc, #60]	@ (80096e4 <xPortStartScheduler+0x144>)
 80096a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80096ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80096ae:	f7ff ff63 	bl	8009578 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80096b2:	f7ff f82b 	bl	800870c <vTaskSwitchContext>
	prvTaskExitError();
 80096b6:	f7ff ff17 	bl	80094e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3718      	adds	r7, #24
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	e000ed00 	.word	0xe000ed00
 80096c8:	410fc271 	.word	0x410fc271
 80096cc:	410fc270 	.word	0x410fc270
 80096d0:	e000e400 	.word	0xe000e400
 80096d4:	200017f8 	.word	0x200017f8
 80096d8:	200017fc 	.word	0x200017fc
 80096dc:	e000ed20 	.word	0xe000ed20
 80096e0:	200000c4 	.word	0x200000c4
 80096e4:	e000ef34 	.word	0xe000ef34

080096e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009702:	4b10      	ldr	r3, [pc, #64]	@ (8009744 <vPortEnterCritical+0x5c>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3301      	adds	r3, #1
 8009708:	4a0e      	ldr	r2, [pc, #56]	@ (8009744 <vPortEnterCritical+0x5c>)
 800970a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800970c:	4b0d      	ldr	r3, [pc, #52]	@ (8009744 <vPortEnterCritical+0x5c>)
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	2b01      	cmp	r3, #1
 8009712:	d110      	bne.n	8009736 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009714:	4b0c      	ldr	r3, [pc, #48]	@ (8009748 <vPortEnterCritical+0x60>)
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	b2db      	uxtb	r3, r3
 800971a:	2b00      	cmp	r3, #0
 800971c:	d00b      	beq.n	8009736 <vPortEnterCritical+0x4e>
	__asm volatile
 800971e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009722:	f383 8811 	msr	BASEPRI, r3
 8009726:	f3bf 8f6f 	isb	sy
 800972a:	f3bf 8f4f 	dsb	sy
 800972e:	603b      	str	r3, [r7, #0]
}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	e7fd      	b.n	8009732 <vPortEnterCritical+0x4a>
	}
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	200000c4 	.word	0x200000c4
 8009748:	e000ed04 	.word	0xe000ed04

0800974c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009752:	4b12      	ldr	r3, [pc, #72]	@ (800979c <vPortExitCritical+0x50>)
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	2b00      	cmp	r3, #0
 8009758:	d10b      	bne.n	8009772 <vPortExitCritical+0x26>
	__asm volatile
 800975a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800975e:	f383 8811 	msr	BASEPRI, r3
 8009762:	f3bf 8f6f 	isb	sy
 8009766:	f3bf 8f4f 	dsb	sy
 800976a:	607b      	str	r3, [r7, #4]
}
 800976c:	bf00      	nop
 800976e:	bf00      	nop
 8009770:	e7fd      	b.n	800976e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009772:	4b0a      	ldr	r3, [pc, #40]	@ (800979c <vPortExitCritical+0x50>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	3b01      	subs	r3, #1
 8009778:	4a08      	ldr	r2, [pc, #32]	@ (800979c <vPortExitCritical+0x50>)
 800977a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800977c:	4b07      	ldr	r3, [pc, #28]	@ (800979c <vPortExitCritical+0x50>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d105      	bne.n	8009790 <vPortExitCritical+0x44>
 8009784:	2300      	movs	r3, #0
 8009786:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	f383 8811 	msr	BASEPRI, r3
}
 800978e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009790:	bf00      	nop
 8009792:	370c      	adds	r7, #12
 8009794:	46bd      	mov	sp, r7
 8009796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979a:	4770      	bx	lr
 800979c:	200000c4 	.word	0x200000c4

080097a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80097a0:	f3ef 8009 	mrs	r0, PSP
 80097a4:	f3bf 8f6f 	isb	sy
 80097a8:	4b15      	ldr	r3, [pc, #84]	@ (8009800 <pxCurrentTCBConst>)
 80097aa:	681a      	ldr	r2, [r3, #0]
 80097ac:	f01e 0f10 	tst.w	lr, #16
 80097b0:	bf08      	it	eq
 80097b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80097b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ba:	6010      	str	r0, [r2, #0]
 80097bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80097c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80097c4:	f380 8811 	msr	BASEPRI, r0
 80097c8:	f3bf 8f4f 	dsb	sy
 80097cc:	f3bf 8f6f 	isb	sy
 80097d0:	f7fe ff9c 	bl	800870c <vTaskSwitchContext>
 80097d4:	f04f 0000 	mov.w	r0, #0
 80097d8:	f380 8811 	msr	BASEPRI, r0
 80097dc:	bc09      	pop	{r0, r3}
 80097de:	6819      	ldr	r1, [r3, #0]
 80097e0:	6808      	ldr	r0, [r1, #0]
 80097e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097e6:	f01e 0f10 	tst.w	lr, #16
 80097ea:	bf08      	it	eq
 80097ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80097f0:	f380 8809 	msr	PSP, r0
 80097f4:	f3bf 8f6f 	isb	sy
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	f3af 8000 	nop.w

08009800 <pxCurrentTCBConst>:
 8009800:	200011cc 	.word	0x200011cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009804:	bf00      	nop
 8009806:	bf00      	nop

08009808 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b082      	sub	sp, #8
 800980c:	af00      	add	r7, sp, #0
	__asm volatile
 800980e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009812:	f383 8811 	msr	BASEPRI, r3
 8009816:	f3bf 8f6f 	isb	sy
 800981a:	f3bf 8f4f 	dsb	sy
 800981e:	607b      	str	r3, [r7, #4]
}
 8009820:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009822:	f7fe feb9 	bl	8008598 <xTaskIncrementTick>
 8009826:	4603      	mov	r3, r0
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800982c:	4b06      	ldr	r3, [pc, #24]	@ (8009848 <xPortSysTickHandler+0x40>)
 800982e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009832:	601a      	str	r2, [r3, #0]
 8009834:	2300      	movs	r3, #0
 8009836:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f383 8811 	msr	BASEPRI, r3
}
 800983e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009840:	bf00      	nop
 8009842:	3708      	adds	r7, #8
 8009844:	46bd      	mov	sp, r7
 8009846:	bd80      	pop	{r7, pc}
 8009848:	e000ed04 	.word	0xe000ed04

0800984c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800984c:	b480      	push	{r7}
 800984e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009850:	4b0b      	ldr	r3, [pc, #44]	@ (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009852:	2200      	movs	r2, #0
 8009854:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009856:	4b0b      	ldr	r3, [pc, #44]	@ (8009884 <vPortSetupTimerInterrupt+0x38>)
 8009858:	2200      	movs	r2, #0
 800985a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800985c:	4b0a      	ldr	r3, [pc, #40]	@ (8009888 <vPortSetupTimerInterrupt+0x3c>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	4a0a      	ldr	r2, [pc, #40]	@ (800988c <vPortSetupTimerInterrupt+0x40>)
 8009862:	fba2 2303 	umull	r2, r3, r2, r3
 8009866:	099b      	lsrs	r3, r3, #6
 8009868:	4a09      	ldr	r2, [pc, #36]	@ (8009890 <vPortSetupTimerInterrupt+0x44>)
 800986a:	3b01      	subs	r3, #1
 800986c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800986e:	4b04      	ldr	r3, [pc, #16]	@ (8009880 <vPortSetupTimerInterrupt+0x34>)
 8009870:	2207      	movs	r2, #7
 8009872:	601a      	str	r2, [r3, #0]
}
 8009874:	bf00      	nop
 8009876:	46bd      	mov	sp, r7
 8009878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987c:	4770      	bx	lr
 800987e:	bf00      	nop
 8009880:	e000e010 	.word	0xe000e010
 8009884:	e000e018 	.word	0xe000e018
 8009888:	200000b8 	.word	0x200000b8
 800988c:	10624dd3 	.word	0x10624dd3
 8009890:	e000e014 	.word	0xe000e014

08009894 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009894:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80098a4 <vPortEnableVFP+0x10>
 8009898:	6801      	ldr	r1, [r0, #0]
 800989a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800989e:	6001      	str	r1, [r0, #0]
 80098a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80098a2:	bf00      	nop
 80098a4:	e000ed88 	.word	0xe000ed88

080098a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80098a8:	b480      	push	{r7}
 80098aa:	b085      	sub	sp, #20
 80098ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80098ae:	f3ef 8305 	mrs	r3, IPSR
 80098b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2b0f      	cmp	r3, #15
 80098b8:	d915      	bls.n	80098e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80098ba:	4a18      	ldr	r2, [pc, #96]	@ (800991c <vPortValidateInterruptPriority+0x74>)
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	4413      	add	r3, r2
 80098c0:	781b      	ldrb	r3, [r3, #0]
 80098c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80098c4:	4b16      	ldr	r3, [pc, #88]	@ (8009920 <vPortValidateInterruptPriority+0x78>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	7afa      	ldrb	r2, [r7, #11]
 80098ca:	429a      	cmp	r2, r3
 80098cc:	d20b      	bcs.n	80098e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	607b      	str	r3, [r7, #4]
}
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
 80098e4:	e7fd      	b.n	80098e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80098e6:	4b0f      	ldr	r3, [pc, #60]	@ (8009924 <vPortValidateInterruptPriority+0x7c>)
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80098ee:	4b0e      	ldr	r3, [pc, #56]	@ (8009928 <vPortValidateInterruptPriority+0x80>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	429a      	cmp	r2, r3
 80098f4:	d90b      	bls.n	800990e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80098f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098fa:	f383 8811 	msr	BASEPRI, r3
 80098fe:	f3bf 8f6f 	isb	sy
 8009902:	f3bf 8f4f 	dsb	sy
 8009906:	603b      	str	r3, [r7, #0]
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	e7fd      	b.n	800990a <vPortValidateInterruptPriority+0x62>
	}
 800990e:	bf00      	nop
 8009910:	3714      	adds	r7, #20
 8009912:	46bd      	mov	sp, r7
 8009914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009918:	4770      	bx	lr
 800991a:	bf00      	nop
 800991c:	e000e3f0 	.word	0xe000e3f0
 8009920:	200017f8 	.word	0x200017f8
 8009924:	e000ed0c 	.word	0xe000ed0c
 8009928:	200017fc 	.word	0x200017fc

0800992c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b08a      	sub	sp, #40	@ 0x28
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009934:	2300      	movs	r3, #0
 8009936:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009938:	f7fe fd72 	bl	8008420 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800993c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ab0 <pvPortMalloc+0x184>)
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d101      	bne.n	8009948 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009944:	f000 f924 	bl	8009b90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009948:	4b5a      	ldr	r3, [pc, #360]	@ (8009ab4 <pvPortMalloc+0x188>)
 800994a:	681a      	ldr	r2, [r3, #0]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	4013      	ands	r3, r2
 8009950:	2b00      	cmp	r3, #0
 8009952:	f040 8095 	bne.w	8009a80 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d01e      	beq.n	800999a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800995c:	2208      	movs	r2, #8
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	4413      	add	r3, r2
 8009962:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f003 0307 	and.w	r3, r3, #7
 800996a:	2b00      	cmp	r3, #0
 800996c:	d015      	beq.n	800999a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f023 0307 	bic.w	r3, r3, #7
 8009974:	3308      	adds	r3, #8
 8009976:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f003 0307 	and.w	r3, r3, #7
 800997e:	2b00      	cmp	r3, #0
 8009980:	d00b      	beq.n	800999a <pvPortMalloc+0x6e>
	__asm volatile
 8009982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009986:	f383 8811 	msr	BASEPRI, r3
 800998a:	f3bf 8f6f 	isb	sy
 800998e:	f3bf 8f4f 	dsb	sy
 8009992:	617b      	str	r3, [r7, #20]
}
 8009994:	bf00      	nop
 8009996:	bf00      	nop
 8009998:	e7fd      	b.n	8009996 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d06f      	beq.n	8009a80 <pvPortMalloc+0x154>
 80099a0:	4b45      	ldr	r3, [pc, #276]	@ (8009ab8 <pvPortMalloc+0x18c>)
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	687a      	ldr	r2, [r7, #4]
 80099a6:	429a      	cmp	r2, r3
 80099a8:	d86a      	bhi.n	8009a80 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80099aa:	4b44      	ldr	r3, [pc, #272]	@ (8009abc <pvPortMalloc+0x190>)
 80099ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80099ae:	4b43      	ldr	r3, [pc, #268]	@ (8009abc <pvPortMalloc+0x190>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099b4:	e004      	b.n	80099c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80099b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80099ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80099c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	429a      	cmp	r2, r3
 80099c8:	d903      	bls.n	80099d2 <pvPortMalloc+0xa6>
 80099ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	2b00      	cmp	r3, #0
 80099d0:	d1f1      	bne.n	80099b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80099d2:	4b37      	ldr	r3, [pc, #220]	@ (8009ab0 <pvPortMalloc+0x184>)
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099d8:	429a      	cmp	r2, r3
 80099da:	d051      	beq.n	8009a80 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80099dc:	6a3b      	ldr	r3, [r7, #32]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	2208      	movs	r2, #8
 80099e2:	4413      	add	r3, r2
 80099e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80099e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e8:	681a      	ldr	r2, [r3, #0]
 80099ea:	6a3b      	ldr	r3, [r7, #32]
 80099ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80099ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099f0:	685a      	ldr	r2, [r3, #4]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	1ad2      	subs	r2, r2, r3
 80099f6:	2308      	movs	r3, #8
 80099f8:	005b      	lsls	r3, r3, #1
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d920      	bls.n	8009a40 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80099fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4413      	add	r3, r2
 8009a04:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	f003 0307 	and.w	r3, r3, #7
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d00b      	beq.n	8009a28 <pvPortMalloc+0xfc>
	__asm volatile
 8009a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a14:	f383 8811 	msr	BASEPRI, r3
 8009a18:	f3bf 8f6f 	isb	sy
 8009a1c:	f3bf 8f4f 	dsb	sy
 8009a20:	613b      	str	r3, [r7, #16]
}
 8009a22:	bf00      	nop
 8009a24:	bf00      	nop
 8009a26:	e7fd      	b.n	8009a24 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	1ad2      	subs	r2, r2, r3
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a36:	687a      	ldr	r2, [r7, #4]
 8009a38:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a3a:	69b8      	ldr	r0, [r7, #24]
 8009a3c:	f000 f90a 	bl	8009c54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a40:	4b1d      	ldr	r3, [pc, #116]	@ (8009ab8 <pvPortMalloc+0x18c>)
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	4a1b      	ldr	r2, [pc, #108]	@ (8009ab8 <pvPortMalloc+0x18c>)
 8009a4c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a4e:	4b1a      	ldr	r3, [pc, #104]	@ (8009ab8 <pvPortMalloc+0x18c>)
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	4b1b      	ldr	r3, [pc, #108]	@ (8009ac0 <pvPortMalloc+0x194>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	429a      	cmp	r2, r3
 8009a58:	d203      	bcs.n	8009a62 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009a5a:	4b17      	ldr	r3, [pc, #92]	@ (8009ab8 <pvPortMalloc+0x18c>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a18      	ldr	r2, [pc, #96]	@ (8009ac0 <pvPortMalloc+0x194>)
 8009a60:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a64:	685a      	ldr	r2, [r3, #4]
 8009a66:	4b13      	ldr	r3, [pc, #76]	@ (8009ab4 <pvPortMalloc+0x188>)
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	431a      	orrs	r2, r3
 8009a6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a6e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a76:	4b13      	ldr	r3, [pc, #76]	@ (8009ac4 <pvPortMalloc+0x198>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	3301      	adds	r3, #1
 8009a7c:	4a11      	ldr	r2, [pc, #68]	@ (8009ac4 <pvPortMalloc+0x198>)
 8009a7e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a80:	f7fe fcdc 	bl	800843c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	f003 0307 	and.w	r3, r3, #7
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00b      	beq.n	8009aa6 <pvPortMalloc+0x17a>
	__asm volatile
 8009a8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a92:	f383 8811 	msr	BASEPRI, r3
 8009a96:	f3bf 8f6f 	isb	sy
 8009a9a:	f3bf 8f4f 	dsb	sy
 8009a9e:	60fb      	str	r3, [r7, #12]
}
 8009aa0:	bf00      	nop
 8009aa2:	bf00      	nop
 8009aa4:	e7fd      	b.n	8009aa2 <pvPortMalloc+0x176>
	return pvReturn;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3728      	adds	r7, #40	@ 0x28
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}
 8009ab0:	20005408 	.word	0x20005408
 8009ab4:	2000541c 	.word	0x2000541c
 8009ab8:	2000540c 	.word	0x2000540c
 8009abc:	20005400 	.word	0x20005400
 8009ac0:	20005410 	.word	0x20005410
 8009ac4:	20005414 	.word	0x20005414

08009ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009ac8:	b580      	push	{r7, lr}
 8009aca:	b086      	sub	sp, #24
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d04f      	beq.n	8009b7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009ada:	2308      	movs	r3, #8
 8009adc:	425b      	negs	r3, r3
 8009ade:	697a      	ldr	r2, [r7, #20]
 8009ae0:	4413      	add	r3, r2
 8009ae2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009ae4:	697b      	ldr	r3, [r7, #20]
 8009ae6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009ae8:	693b      	ldr	r3, [r7, #16]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	4b25      	ldr	r3, [pc, #148]	@ (8009b84 <vPortFree+0xbc>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4013      	ands	r3, r2
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d10b      	bne.n	8009b0e <vPortFree+0x46>
	__asm volatile
 8009af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009afa:	f383 8811 	msr	BASEPRI, r3
 8009afe:	f3bf 8f6f 	isb	sy
 8009b02:	f3bf 8f4f 	dsb	sy
 8009b06:	60fb      	str	r3, [r7, #12]
}
 8009b08:	bf00      	nop
 8009b0a:	bf00      	nop
 8009b0c:	e7fd      	b.n	8009b0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b0e:	693b      	ldr	r3, [r7, #16]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00b      	beq.n	8009b2e <vPortFree+0x66>
	__asm volatile
 8009b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b1a:	f383 8811 	msr	BASEPRI, r3
 8009b1e:	f3bf 8f6f 	isb	sy
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	60bb      	str	r3, [r7, #8]
}
 8009b28:	bf00      	nop
 8009b2a:	bf00      	nop
 8009b2c:	e7fd      	b.n	8009b2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	685a      	ldr	r2, [r3, #4]
 8009b32:	4b14      	ldr	r3, [pc, #80]	@ (8009b84 <vPortFree+0xbc>)
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4013      	ands	r3, r2
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d01e      	beq.n	8009b7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b3c:	693b      	ldr	r3, [r7, #16]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	2b00      	cmp	r3, #0
 8009b42:	d11a      	bne.n	8009b7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	685a      	ldr	r2, [r3, #4]
 8009b48:	4b0e      	ldr	r3, [pc, #56]	@ (8009b84 <vPortFree+0xbc>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	43db      	mvns	r3, r3
 8009b4e:	401a      	ands	r2, r3
 8009b50:	693b      	ldr	r3, [r7, #16]
 8009b52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b54:	f7fe fc64 	bl	8008420 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b0a      	ldr	r3, [pc, #40]	@ (8009b88 <vPortFree+0xc0>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	4a09      	ldr	r2, [pc, #36]	@ (8009b88 <vPortFree+0xc0>)
 8009b64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b66:	6938      	ldr	r0, [r7, #16]
 8009b68:	f000 f874 	bl	8009c54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b6c:	4b07      	ldr	r3, [pc, #28]	@ (8009b8c <vPortFree+0xc4>)
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	3301      	adds	r3, #1
 8009b72:	4a06      	ldr	r2, [pc, #24]	@ (8009b8c <vPortFree+0xc4>)
 8009b74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b76:	f7fe fc61 	bl	800843c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b7a:	bf00      	nop
 8009b7c:	3718      	adds	r7, #24
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	bd80      	pop	{r7, pc}
 8009b82:	bf00      	nop
 8009b84:	2000541c 	.word	0x2000541c
 8009b88:	2000540c 	.word	0x2000540c
 8009b8c:	20005418 	.word	0x20005418

08009b90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b90:	b480      	push	{r7}
 8009b92:	b085      	sub	sp, #20
 8009b94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b9c:	4b27      	ldr	r3, [pc, #156]	@ (8009c3c <prvHeapInit+0xac>)
 8009b9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f003 0307 	and.w	r3, r3, #7
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d00c      	beq.n	8009bc4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3307      	adds	r3, #7
 8009bae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	f023 0307 	bic.w	r3, r3, #7
 8009bb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	1ad3      	subs	r3, r2, r3
 8009bbe:	4a1f      	ldr	r2, [pc, #124]	@ (8009c3c <prvHeapInit+0xac>)
 8009bc0:	4413      	add	r3, r2
 8009bc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bc8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c40 <prvHeapInit+0xb0>)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bce:	4b1c      	ldr	r3, [pc, #112]	@ (8009c40 <prvHeapInit+0xb0>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	4413      	add	r3, r2
 8009bda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bdc:	2208      	movs	r2, #8
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	f023 0307 	bic.w	r3, r3, #7
 8009bea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	4a15      	ldr	r2, [pc, #84]	@ (8009c44 <prvHeapInit+0xb4>)
 8009bf0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009bf2:	4b14      	ldr	r3, [pc, #80]	@ (8009c44 <prvHeapInit+0xb4>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bfa:	4b12      	ldr	r3, [pc, #72]	@ (8009c44 <prvHeapInit+0xb4>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	1ad2      	subs	r2, r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c10:	4b0c      	ldr	r3, [pc, #48]	@ (8009c44 <prvHeapInit+0xb4>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	4a0a      	ldr	r2, [pc, #40]	@ (8009c48 <prvHeapInit+0xb8>)
 8009c1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	4a09      	ldr	r2, [pc, #36]	@ (8009c4c <prvHeapInit+0xbc>)
 8009c26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c28:	4b09      	ldr	r3, [pc, #36]	@ (8009c50 <prvHeapInit+0xc0>)
 8009c2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009c2e:	601a      	str	r2, [r3, #0]
}
 8009c30:	bf00      	nop
 8009c32:	3714      	adds	r7, #20
 8009c34:	46bd      	mov	sp, r7
 8009c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3a:	4770      	bx	lr
 8009c3c:	20001800 	.word	0x20001800
 8009c40:	20005400 	.word	0x20005400
 8009c44:	20005408 	.word	0x20005408
 8009c48:	20005410 	.word	0x20005410
 8009c4c:	2000540c 	.word	0x2000540c
 8009c50:	2000541c 	.word	0x2000541c

08009c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c54:	b480      	push	{r7}
 8009c56:	b085      	sub	sp, #20
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c5c:	4b28      	ldr	r3, [pc, #160]	@ (8009d00 <prvInsertBlockIntoFreeList+0xac>)
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	e002      	b.n	8009c68 <prvInsertBlockIntoFreeList+0x14>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d8f7      	bhi.n	8009c62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d108      	bne.n	8009c96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	441a      	add	r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	441a      	add	r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d118      	bne.n	8009cdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b15      	ldr	r3, [pc, #84]	@ (8009d04 <prvInsertBlockIntoFreeList+0xb0>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d00d      	beq.n	8009cd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	441a      	add	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	601a      	str	r2, [r3, #0]
 8009cd0:	e008      	b.n	8009ce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8009d04 <prvInsertBlockIntoFreeList+0xb0>)
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	e003      	b.n	8009ce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d002      	beq.n	8009cf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cf2:	bf00      	nop
 8009cf4:	3714      	adds	r7, #20
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfc:	4770      	bx	lr
 8009cfe:	bf00      	nop
 8009d00:	20005400 	.word	0x20005400
 8009d04:	20005408 	.word	0x20005408

08009d08 <memset>:
 8009d08:	4402      	add	r2, r0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	4293      	cmp	r3, r2
 8009d0e:	d100      	bne.n	8009d12 <memset+0xa>
 8009d10:	4770      	bx	lr
 8009d12:	f803 1b01 	strb.w	r1, [r3], #1
 8009d16:	e7f9      	b.n	8009d0c <memset+0x4>

08009d18 <_reclaim_reent>:
 8009d18:	4b29      	ldr	r3, [pc, #164]	@ (8009dc0 <_reclaim_reent+0xa8>)
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	4283      	cmp	r3, r0
 8009d1e:	b570      	push	{r4, r5, r6, lr}
 8009d20:	4604      	mov	r4, r0
 8009d22:	d04b      	beq.n	8009dbc <_reclaim_reent+0xa4>
 8009d24:	69c3      	ldr	r3, [r0, #28]
 8009d26:	b1ab      	cbz	r3, 8009d54 <_reclaim_reent+0x3c>
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	b16b      	cbz	r3, 8009d48 <_reclaim_reent+0x30>
 8009d2c:	2500      	movs	r5, #0
 8009d2e:	69e3      	ldr	r3, [r4, #28]
 8009d30:	68db      	ldr	r3, [r3, #12]
 8009d32:	5959      	ldr	r1, [r3, r5]
 8009d34:	2900      	cmp	r1, #0
 8009d36:	d13b      	bne.n	8009db0 <_reclaim_reent+0x98>
 8009d38:	3504      	adds	r5, #4
 8009d3a:	2d80      	cmp	r5, #128	@ 0x80
 8009d3c:	d1f7      	bne.n	8009d2e <_reclaim_reent+0x16>
 8009d3e:	69e3      	ldr	r3, [r4, #28]
 8009d40:	4620      	mov	r0, r4
 8009d42:	68d9      	ldr	r1, [r3, #12]
 8009d44:	f000 f872 	bl	8009e2c <_free_r>
 8009d48:	69e3      	ldr	r3, [r4, #28]
 8009d4a:	6819      	ldr	r1, [r3, #0]
 8009d4c:	b111      	cbz	r1, 8009d54 <_reclaim_reent+0x3c>
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f000 f86c 	bl	8009e2c <_free_r>
 8009d54:	6961      	ldr	r1, [r4, #20]
 8009d56:	b111      	cbz	r1, 8009d5e <_reclaim_reent+0x46>
 8009d58:	4620      	mov	r0, r4
 8009d5a:	f000 f867 	bl	8009e2c <_free_r>
 8009d5e:	69e1      	ldr	r1, [r4, #28]
 8009d60:	b111      	cbz	r1, 8009d68 <_reclaim_reent+0x50>
 8009d62:	4620      	mov	r0, r4
 8009d64:	f000 f862 	bl	8009e2c <_free_r>
 8009d68:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d6a:	b111      	cbz	r1, 8009d72 <_reclaim_reent+0x5a>
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 f85d 	bl	8009e2c <_free_r>
 8009d72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d74:	b111      	cbz	r1, 8009d7c <_reclaim_reent+0x64>
 8009d76:	4620      	mov	r0, r4
 8009d78:	f000 f858 	bl	8009e2c <_free_r>
 8009d7c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d7e:	b111      	cbz	r1, 8009d86 <_reclaim_reent+0x6e>
 8009d80:	4620      	mov	r0, r4
 8009d82:	f000 f853 	bl	8009e2c <_free_r>
 8009d86:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d88:	b111      	cbz	r1, 8009d90 <_reclaim_reent+0x78>
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f000 f84e 	bl	8009e2c <_free_r>
 8009d90:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d92:	b111      	cbz	r1, 8009d9a <_reclaim_reent+0x82>
 8009d94:	4620      	mov	r0, r4
 8009d96:	f000 f849 	bl	8009e2c <_free_r>
 8009d9a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d9c:	b111      	cbz	r1, 8009da4 <_reclaim_reent+0x8c>
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f000 f844 	bl	8009e2c <_free_r>
 8009da4:	6a23      	ldr	r3, [r4, #32]
 8009da6:	b14b      	cbz	r3, 8009dbc <_reclaim_reent+0xa4>
 8009da8:	4620      	mov	r0, r4
 8009daa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009dae:	4718      	bx	r3
 8009db0:	680e      	ldr	r6, [r1, #0]
 8009db2:	4620      	mov	r0, r4
 8009db4:	f000 f83a 	bl	8009e2c <_free_r>
 8009db8:	4631      	mov	r1, r6
 8009dba:	e7bb      	b.n	8009d34 <_reclaim_reent+0x1c>
 8009dbc:	bd70      	pop	{r4, r5, r6, pc}
 8009dbe:	bf00      	nop
 8009dc0:	200000c8 	.word	0x200000c8

08009dc4 <__libc_init_array>:
 8009dc4:	b570      	push	{r4, r5, r6, lr}
 8009dc6:	4d0d      	ldr	r5, [pc, #52]	@ (8009dfc <__libc_init_array+0x38>)
 8009dc8:	4c0d      	ldr	r4, [pc, #52]	@ (8009e00 <__libc_init_array+0x3c>)
 8009dca:	1b64      	subs	r4, r4, r5
 8009dcc:	10a4      	asrs	r4, r4, #2
 8009dce:	2600      	movs	r6, #0
 8009dd0:	42a6      	cmp	r6, r4
 8009dd2:	d109      	bne.n	8009de8 <__libc_init_array+0x24>
 8009dd4:	4d0b      	ldr	r5, [pc, #44]	@ (8009e04 <__libc_init_array+0x40>)
 8009dd6:	4c0c      	ldr	r4, [pc, #48]	@ (8009e08 <__libc_init_array+0x44>)
 8009dd8:	f000 f87e 	bl	8009ed8 <_init>
 8009ddc:	1b64      	subs	r4, r4, r5
 8009dde:	10a4      	asrs	r4, r4, #2
 8009de0:	2600      	movs	r6, #0
 8009de2:	42a6      	cmp	r6, r4
 8009de4:	d105      	bne.n	8009df2 <__libc_init_array+0x2e>
 8009de6:	bd70      	pop	{r4, r5, r6, pc}
 8009de8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009dec:	4798      	blx	r3
 8009dee:	3601      	adds	r6, #1
 8009df0:	e7ee      	b.n	8009dd0 <__libc_init_array+0xc>
 8009df2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009df6:	4798      	blx	r3
 8009df8:	3601      	adds	r6, #1
 8009dfa:	e7f2      	b.n	8009de2 <__libc_init_array+0x1e>
 8009dfc:	08009ff4 	.word	0x08009ff4
 8009e00:	08009ff4 	.word	0x08009ff4
 8009e04:	08009ff4 	.word	0x08009ff4
 8009e08:	08009ff8 	.word	0x08009ff8

08009e0c <__retarget_lock_acquire_recursive>:
 8009e0c:	4770      	bx	lr

08009e0e <__retarget_lock_release_recursive>:
 8009e0e:	4770      	bx	lr

08009e10 <memcpy>:
 8009e10:	440a      	add	r2, r1
 8009e12:	4291      	cmp	r1, r2
 8009e14:	f100 33ff 	add.w	r3, r0, #4294967295
 8009e18:	d100      	bne.n	8009e1c <memcpy+0xc>
 8009e1a:	4770      	bx	lr
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e22:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009e26:	4291      	cmp	r1, r2
 8009e28:	d1f9      	bne.n	8009e1e <memcpy+0xe>
 8009e2a:	bd10      	pop	{r4, pc}

08009e2c <_free_r>:
 8009e2c:	b538      	push	{r3, r4, r5, lr}
 8009e2e:	4605      	mov	r5, r0
 8009e30:	2900      	cmp	r1, #0
 8009e32:	d041      	beq.n	8009eb8 <_free_r+0x8c>
 8009e34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009e38:	1f0c      	subs	r4, r1, #4
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	bfb8      	it	lt
 8009e3e:	18e4      	addlt	r4, r4, r3
 8009e40:	f000 f83e 	bl	8009ec0 <__malloc_lock>
 8009e44:	4a1d      	ldr	r2, [pc, #116]	@ (8009ebc <_free_r+0x90>)
 8009e46:	6813      	ldr	r3, [r2, #0]
 8009e48:	b933      	cbnz	r3, 8009e58 <_free_r+0x2c>
 8009e4a:	6063      	str	r3, [r4, #4]
 8009e4c:	6014      	str	r4, [r2, #0]
 8009e4e:	4628      	mov	r0, r5
 8009e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009e54:	f000 b83a 	b.w	8009ecc <__malloc_unlock>
 8009e58:	42a3      	cmp	r3, r4
 8009e5a:	d908      	bls.n	8009e6e <_free_r+0x42>
 8009e5c:	6820      	ldr	r0, [r4, #0]
 8009e5e:	1821      	adds	r1, r4, r0
 8009e60:	428b      	cmp	r3, r1
 8009e62:	bf01      	itttt	eq
 8009e64:	6819      	ldreq	r1, [r3, #0]
 8009e66:	685b      	ldreq	r3, [r3, #4]
 8009e68:	1809      	addeq	r1, r1, r0
 8009e6a:	6021      	streq	r1, [r4, #0]
 8009e6c:	e7ed      	b.n	8009e4a <_free_r+0x1e>
 8009e6e:	461a      	mov	r2, r3
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	b10b      	cbz	r3, 8009e78 <_free_r+0x4c>
 8009e74:	42a3      	cmp	r3, r4
 8009e76:	d9fa      	bls.n	8009e6e <_free_r+0x42>
 8009e78:	6811      	ldr	r1, [r2, #0]
 8009e7a:	1850      	adds	r0, r2, r1
 8009e7c:	42a0      	cmp	r0, r4
 8009e7e:	d10b      	bne.n	8009e98 <_free_r+0x6c>
 8009e80:	6820      	ldr	r0, [r4, #0]
 8009e82:	4401      	add	r1, r0
 8009e84:	1850      	adds	r0, r2, r1
 8009e86:	4283      	cmp	r3, r0
 8009e88:	6011      	str	r1, [r2, #0]
 8009e8a:	d1e0      	bne.n	8009e4e <_free_r+0x22>
 8009e8c:	6818      	ldr	r0, [r3, #0]
 8009e8e:	685b      	ldr	r3, [r3, #4]
 8009e90:	6053      	str	r3, [r2, #4]
 8009e92:	4408      	add	r0, r1
 8009e94:	6010      	str	r0, [r2, #0]
 8009e96:	e7da      	b.n	8009e4e <_free_r+0x22>
 8009e98:	d902      	bls.n	8009ea0 <_free_r+0x74>
 8009e9a:	230c      	movs	r3, #12
 8009e9c:	602b      	str	r3, [r5, #0]
 8009e9e:	e7d6      	b.n	8009e4e <_free_r+0x22>
 8009ea0:	6820      	ldr	r0, [r4, #0]
 8009ea2:	1821      	adds	r1, r4, r0
 8009ea4:	428b      	cmp	r3, r1
 8009ea6:	bf04      	itt	eq
 8009ea8:	6819      	ldreq	r1, [r3, #0]
 8009eaa:	685b      	ldreq	r3, [r3, #4]
 8009eac:	6063      	str	r3, [r4, #4]
 8009eae:	bf04      	itt	eq
 8009eb0:	1809      	addeq	r1, r1, r0
 8009eb2:	6021      	streq	r1, [r4, #0]
 8009eb4:	6054      	str	r4, [r2, #4]
 8009eb6:	e7ca      	b.n	8009e4e <_free_r+0x22>
 8009eb8:	bd38      	pop	{r3, r4, r5, pc}
 8009eba:	bf00      	nop
 8009ebc:	2000555c 	.word	0x2000555c

08009ec0 <__malloc_lock>:
 8009ec0:	4801      	ldr	r0, [pc, #4]	@ (8009ec8 <__malloc_lock+0x8>)
 8009ec2:	f7ff bfa3 	b.w	8009e0c <__retarget_lock_acquire_recursive>
 8009ec6:	bf00      	nop
 8009ec8:	20005558 	.word	0x20005558

08009ecc <__malloc_unlock>:
 8009ecc:	4801      	ldr	r0, [pc, #4]	@ (8009ed4 <__malloc_unlock+0x8>)
 8009ece:	f7ff bf9e 	b.w	8009e0e <__retarget_lock_release_recursive>
 8009ed2:	bf00      	nop
 8009ed4:	20005558 	.word	0x20005558

08009ed8 <_init>:
 8009ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eda:	bf00      	nop
 8009edc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ede:	bc08      	pop	{r3}
 8009ee0:	469e      	mov	lr, r3
 8009ee2:	4770      	bx	lr

08009ee4 <_fini>:
 8009ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ee6:	bf00      	nop
 8009ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eea:	bc08      	pop	{r3}
 8009eec:	469e      	mov	lr, r3
 8009eee:	4770      	bx	lr
