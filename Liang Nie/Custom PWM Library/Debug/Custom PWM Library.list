
Custom PWM Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800a45c  0800a45c  0000b45c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a594  0800a594  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a594  0800a594  0000b594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a59c  0800a59c  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a59c  0800a59c  0000b59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a5a0  0800a5a0  0000b5a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a5a4  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c060  2**0
                  CONTENTS
 10 .bss          00005334  20000060  20000060  0000c060  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005394  20005394  0000c060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001fe41  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004021  00000000  00000000  0002bed1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b78  00000000  00000000  0002fef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001590  00000000  00000000  00031a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ff7  00000000  00000000  00033000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef9d  00000000  00000000  00056ff7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd4dd  00000000  00000000  00075f94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00153471  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007ac8  00000000  00000000  001534b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0015af7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a444 	.word	0x0800a444

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	0800a444 	.word	0x0800a444

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <usart_printf>:
void usart_Init(void) {
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
}

void usart_printf(const char *fmt,...) {
 8000560:	b40f      	push	{r0, r1, r2, r3}
 8000562:	b580      	push	{r7, lr}
 8000564:	af00      	add	r7, sp, #0
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	4a0c      	ldr	r2, [pc, #48]	@ (800059c <usart_printf+0x3c>)
 800056c:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
 800056e:	4b0b      	ldr	r3, [pc, #44]	@ (800059c <usart_printf+0x3c>)
 8000570:	681a      	ldr	r2, [r3, #0]
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	480a      	ldr	r0, [pc, #40]	@ (80005a0 <usart_printf+0x40>)
 8000576:	f009 fa85 	bl	8009a84 <vsiprintf>
 800057a:	4603      	mov	r3, r0
 800057c:	b29a      	uxth	r2, r3
 800057e:	4b09      	ldr	r3, [pc, #36]	@ (80005a4 <usart_printf+0x44>)
 8000580:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
 8000582:	4b08      	ldr	r3, [pc, #32]	@ (80005a4 <usart_printf+0x44>)
 8000584:	881b      	ldrh	r3, [r3, #0]
 8000586:	461a      	mov	r2, r3
 8000588:	4905      	ldr	r1, [pc, #20]	@ (80005a0 <usart_printf+0x40>)
 800058a:	4807      	ldr	r0, [pc, #28]	@ (80005a8 <usart_printf+0x48>)
 800058c:	f005 fac4 	bl	8005b18 <HAL_UART_Transmit_DMA>
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000598:	b004      	add	sp, #16
 800059a:	4770      	bx	lr
 800059c:	200001b0 	.word	0x200001b0
 80005a0:	200001b4 	.word	0x200001b4
 80005a4:	200002b4 	.word	0x200002b4
 80005a8:	2000051c 	.word	0x2000051c

080005ac <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80005ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80005b0:	b09f      	sub	sp, #124	@ 0x7c
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	66f8      	str	r0, [r7, #108]	@ 0x6c
 80005b6:	460b      	mov	r3, r1
 80005b8:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	if (huart == &huart6) {
 80005bc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80005be:	4b81      	ldr	r3, [pc, #516]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x218>)
 80005c0:	429a      	cmp	r2, r3
 80005c2:	f040 81c9 	bne.w	8000958 <HAL_UARTEx_RxEventCallback+0x3ac>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80005c6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80005ca:	497f      	ldr	r1, [pc, #508]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 80005cc:	487d      	ldr	r0, [pc, #500]	@ (80007c4 <HAL_UARTEx_RxEventCallback+0x218>)
 80005ce:	f005 fb13 	bl	8005bf8 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 80005d2:	4b7d      	ldr	r3, [pc, #500]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 80005d4:	795b      	ldrb	r3, [r3, #5]
 80005d6:	021b      	lsls	r3, r3, #8
 80005d8:	b21a      	sxth	r2, r3
 80005da:	4b7b      	ldr	r3, [pc, #492]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 80005dc:	799b      	ldrb	r3, [r3, #6]
 80005de:	b21b      	sxth	r3, r3
 80005e0:	4313      	orrs	r3, r2
 80005e2:	b21b      	sxth	r3, r3
 80005e4:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 80005e8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 80005ec:	f240 2302 	movw	r3, #514	@ 0x202
 80005f0:	429a      	cmp	r2, r3
 80005f2:	f000 8153 	beq.w	800089c <HAL_UARTEx_RxEventCallback+0x2f0>
 80005f6:	f240 2302 	movw	r3, #514	@ 0x202
 80005fa:	429a      	cmp	r2, r3
 80005fc:	f300 81ab 	bgt.w	8000956 <HAL_UARTEx_RxEventCallback+0x3aa>
 8000600:	f240 2301 	movw	r3, #513	@ 0x201
 8000604:	429a      	cmp	r2, r3
 8000606:	f000 80e7 	beq.w	80007d8 <HAL_UARTEx_RxEventCallback+0x22c>
 800060a:	f240 2301 	movw	r3, #513	@ 0x201
 800060e:	429a      	cmp	r2, r3
 8000610:	f300 81a1 	bgt.w	8000956 <HAL_UARTEx_RxEventCallback+0x3aa>
 8000614:	f5b2 7f83 	cmp.w	r2, #262	@ 0x106
 8000618:	f280 819d 	bge.w	8000956 <HAL_UARTEx_RxEventCallback+0x3aa>
 800061c:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8000620:	f280 80da 	bge.w	80007d8 <HAL_UARTEx_RxEventCallback+0x22c>
 8000624:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 8000628:	f300 8195 	bgt.w	8000956 <HAL_UARTEx_RxEventCallback+0x3aa>
 800062c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8000630:	f300 80d2 	bgt.w	80007d8 <HAL_UARTEx_RxEventCallback+0x22c>
 8000634:	2a03      	cmp	r2, #3
 8000636:	f000 80cf 	beq.w	80007d8 <HAL_UARTEx_RxEventCallback+0x22c>
 800063a:	2a03      	cmp	r2, #3
 800063c:	f300 818b 	bgt.w	8000956 <HAL_UARTEx_RxEventCallback+0x3aa>
 8000640:	2a01      	cmp	r2, #1
 8000642:	d003      	beq.n	800064c <HAL_UARTEx_RxEventCallback+0xa0>
 8000644:	2a02      	cmp	r2, #2
 8000646:	f000 80c3 	beq.w	80007d0 <HAL_UARTEx_RxEventCallback+0x224>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 800064a:	e184      	b.n	8000956 <HAL_UARTEx_RxEventCallback+0x3aa>
		    	game_status.game_type = RxBuff_2[7];
 800064c:	4b5e      	ldr	r3, [pc, #376]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 800064e:	79db      	ldrb	r3, [r3, #7]
 8000650:	4a5e      	ldr	r2, [pc, #376]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x220>)
 8000652:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 8000654:	4b5c      	ldr	r3, [pc, #368]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8000656:	7a1b      	ldrb	r3, [r3, #8]
 8000658:	4a5c      	ldr	r2, [pc, #368]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x220>)
 800065a:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 800065c:	4b5a      	ldr	r3, [pc, #360]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 800065e:	7a5b      	ldrb	r3, [r3, #9]
 8000660:	021b      	lsls	r3, r3, #8
 8000662:	b21a      	sxth	r2, r3
 8000664:	4b58      	ldr	r3, [pc, #352]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8000666:	7a9b      	ldrb	r3, [r3, #10]
 8000668:	b21b      	sxth	r3, r3
 800066a:	4313      	orrs	r3, r2
 800066c:	b21b      	sxth	r3, r3
 800066e:	b29b      	uxth	r3, r3
 8000670:	4a56      	ldr	r2, [pc, #344]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x220>)
 8000672:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 8000674:	4b54      	ldr	r3, [pc, #336]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8000676:	7adb      	ldrb	r3, [r3, #11]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2200      	movs	r2, #0
 800067c:	663b      	str	r3, [r7, #96]	@ 0x60
 800067e:	667a      	str	r2, [r7, #100]	@ 0x64
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	f04f 0100 	mov.w	r1, #0
 8000688:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800068a:	0619      	lsls	r1, r3, #24
 800068c:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 800068e:	4b4e      	ldr	r3, [pc, #312]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8000690:	7b1b      	ldrb	r3, [r3, #12]
 8000692:	b2db      	uxtb	r3, r3
 8000694:	2200      	movs	r2, #0
 8000696:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000698:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800069a:	f04f 0200 	mov.w	r2, #0
 800069e:	f04f 0300 	mov.w	r3, #0
 80006a2:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 80006a4:	0433      	lsls	r3, r6, #16
 80006a6:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 80006a8:	ea40 0402 	orr.w	r4, r0, r2
 80006ac:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 80006b0:	4b45      	ldr	r3, [pc, #276]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 80006b2:	7b5b      	ldrb	r3, [r3, #13]
 80006b4:	b2db      	uxtb	r3, r3
 80006b6:	2200      	movs	r2, #0
 80006b8:	653b      	str	r3, [r7, #80]	@ 0x50
 80006ba:	657a      	str	r2, [r7, #84]	@ 0x54
 80006bc:	f04f 0200 	mov.w	r2, #0
 80006c0:	f04f 0300 	mov.w	r3, #0
 80006c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80006c6:	020b      	lsls	r3, r1, #8
 80006c8:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 80006ca:	ea44 0802 	orr.w	r8, r4, r2
 80006ce:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 80006d2:	4b3d      	ldr	r3, [pc, #244]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 80006d4:	7b9b      	ldrb	r3, [r3, #14]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	2200      	movs	r2, #0
 80006da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80006dc:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80006de:	f04f 0200 	mov.w	r2, #0
 80006e2:	f04f 0300 	mov.w	r3, #0
 80006e6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80006e8:	000b      	movs	r3, r1
 80006ea:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 80006ec:	ea48 0102 	orr.w	r1, r8, r2
 80006f0:	6439      	str	r1, [r7, #64]	@ 0x40
 80006f2:	ea49 0303 	orr.w	r3, r9, r3
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 80006f8:	4b33      	ldr	r3, [pc, #204]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 80006fa:	7bdb      	ldrb	r3, [r3, #15]
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	2200      	movs	r2, #0
 8000700:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000702:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000704:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8000708:	460b      	mov	r3, r1
 800070a:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 800070e:	460b      	mov	r3, r1
 8000710:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 8000714:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8000718:	460b      	mov	r3, r1
 800071a:	ea43 030a 	orr.w	r3, r3, sl
 800071e:	633b      	str	r3, [r7, #48]	@ 0x30
 8000720:	4613      	mov	r3, r2
 8000722:	ea43 030b 	orr.w	r3, r3, fp
 8000726:	637b      	str	r3, [r7, #52]	@ 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 8000728:	4b27      	ldr	r3, [pc, #156]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 800072a:	7c1b      	ldrb	r3, [r3, #16]
 800072c:	b2db      	uxtb	r3, r3
 800072e:	2200      	movs	r2, #0
 8000730:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000732:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000734:	f04f 0200 	mov.w	r2, #0
 8000738:	f04f 0300 	mov.w	r3, #0
 800073c:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000740:	4629      	mov	r1, r5
 8000742:	040b      	lsls	r3, r1, #16
 8000744:	4621      	mov	r1, r4
 8000746:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800074a:	4621      	mov	r1, r4
 800074c:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 800074e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000752:	4621      	mov	r1, r4
 8000754:	4311      	orrs	r1, r2
 8000756:	6239      	str	r1, [r7, #32]
 8000758:	4629      	mov	r1, r5
 800075a:	4319      	orrs	r1, r3
 800075c:	6279      	str	r1, [r7, #36]	@ 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 800075e:	4b1a      	ldr	r3, [pc, #104]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8000760:	7c5b      	ldrb	r3, [r3, #17]
 8000762:	b2db      	uxtb	r3, r3
 8000764:	2200      	movs	r2, #0
 8000766:	61bb      	str	r3, [r7, #24]
 8000768:	61fa      	str	r2, [r7, #28]
 800076a:	f04f 0200 	mov.w	r2, #0
 800076e:	f04f 0300 	mov.w	r3, #0
 8000772:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000776:	4629      	mov	r1, r5
 8000778:	020b      	lsls	r3, r1, #8
 800077a:	4621      	mov	r1, r4
 800077c:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 8000780:	4621      	mov	r1, r4
 8000782:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 8000784:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8000788:	4621      	mov	r1, r4
 800078a:	4311      	orrs	r1, r2
 800078c:	6139      	str	r1, [r7, #16]
 800078e:	4629      	mov	r1, r5
 8000790:	4319      	orrs	r1, r3
 8000792:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <HAL_UARTEx_RxEventCallback+0x21c>)
 8000796:	7c9b      	ldrb	r3, [r3, #18]
 8000798:	b2db      	uxtb	r3, r3
 800079a:	2200      	movs	r2, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	60fa      	str	r2, [r7, #12]
 80007a0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80007a4:	4623      	mov	r3, r4
 80007a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80007aa:	4602      	mov	r2, r0
 80007ac:	4313      	orrs	r3, r2
 80007ae:	603b      	str	r3, [r7, #0]
 80007b0:	462b      	mov	r3, r5
 80007b2:	460a      	mov	r2, r1
 80007b4:	4313      	orrs	r3, r2
 80007b6:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 80007b8:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x220>)
 80007ba:	e9d7 1200 	ldrd	r1, r2, [r7]
 80007be:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 80007c2:	e0c9      	b.n	8000958 <HAL_UARTEx_RxEventCallback+0x3ac>
 80007c4:	200005ac 	.word	0x200005ac
 80007c8:	2000007c 	.word	0x2000007c
 80007cc:	20000180 	.word	0x20000180
		    	game_status.game_type = RxBuff_2[7];
 80007d0:	4b64      	ldr	r3, [pc, #400]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007d2:	79da      	ldrb	r2, [r3, #7]
 80007d4:	4b64      	ldr	r3, [pc, #400]	@ (8000968 <HAL_UARTEx_RxEventCallback+0x3bc>)
 80007d6:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_id = RxBuff_2[7];
 80007d8:	4b62      	ldr	r3, [pc, #392]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007da:	79da      	ldrb	r2, [r3, #7]
 80007dc:	4b63      	ldr	r3, [pc, #396]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007de:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 80007e0:	4b60      	ldr	r3, [pc, #384]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007e2:	7a1a      	ldrb	r2, [r3, #8]
 80007e4:	4b61      	ldr	r3, [pc, #388]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007e6:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 80007e8:	4b5e      	ldr	r3, [pc, #376]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007ea:	7a5b      	ldrb	r3, [r3, #9]
 80007ec:	021b      	lsls	r3, r3, #8
 80007ee:	b21a      	sxth	r2, r3
 80007f0:	4b5c      	ldr	r3, [pc, #368]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007f2:	7a9b      	ldrb	r3, [r3, #10]
 80007f4:	b21b      	sxth	r3, r3
 80007f6:	4313      	orrs	r3, r2
 80007f8:	b21b      	sxth	r3, r3
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b5b      	ldr	r3, [pc, #364]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007fe:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 8000800:	4b58      	ldr	r3, [pc, #352]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000802:	7adb      	ldrb	r3, [r3, #11]
 8000804:	021b      	lsls	r3, r3, #8
 8000806:	b21a      	sxth	r2, r3
 8000808:	4b56      	ldr	r3, [pc, #344]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800080a:	7b1b      	ldrb	r3, [r3, #12]
 800080c:	b21b      	sxth	r3, r3
 800080e:	4313      	orrs	r3, r2
 8000810:	b21b      	sxth	r3, r3
 8000812:	b29a      	uxth	r2, r3
 8000814:	4b55      	ldr	r3, [pc, #340]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000816:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 8000818:	4b52      	ldr	r3, [pc, #328]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800081a:	7b5b      	ldrb	r3, [r3, #13]
 800081c:	021b      	lsls	r3, r3, #8
 800081e:	b21a      	sxth	r2, r3
 8000820:	4b50      	ldr	r3, [pc, #320]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000822:	7b9b      	ldrb	r3, [r3, #14]
 8000824:	b21b      	sxth	r3, r3
 8000826:	4313      	orrs	r3, r2
 8000828:	b21b      	sxth	r3, r3
 800082a:	b29a      	uxth	r2, r3
 800082c:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 800082e:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8000830:	4b4c      	ldr	r3, [pc, #304]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000832:	7bdb      	ldrb	r3, [r3, #15]
 8000834:	021b      	lsls	r3, r3, #8
 8000836:	b21a      	sxth	r2, r3
 8000838:	4b4a      	ldr	r3, [pc, #296]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800083a:	7c1b      	ldrb	r3, [r3, #16]
 800083c:	b21b      	sxth	r3, r3
 800083e:	4313      	orrs	r3, r2
 8000840:	b21b      	sxth	r3, r3
 8000842:	b29a      	uxth	r2, r3
 8000844:	4b49      	ldr	r3, [pc, #292]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000846:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 8000848:	4b46      	ldr	r3, [pc, #280]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800084a:	7c5b      	ldrb	r3, [r3, #17]
 800084c:	021b      	lsls	r3, r3, #8
 800084e:	b21a      	sxth	r2, r3
 8000850:	4b44      	ldr	r3, [pc, #272]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000852:	7c9b      	ldrb	r3, [r3, #18]
 8000854:	b21b      	sxth	r3, r3
 8000856:	4313      	orrs	r3, r2
 8000858:	b21b      	sxth	r3, r3
 800085a:	b29a      	uxth	r2, r3
 800085c:	4b43      	ldr	r3, [pc, #268]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 800085e:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 8000860:	4b40      	ldr	r3, [pc, #256]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000862:	7cdb      	ldrb	r3, [r3, #19]
 8000864:	f003 0301 	and.w	r3, r3, #1
 8000868:	b2d9      	uxtb	r1, r3
 800086a:	4a40      	ldr	r2, [pc, #256]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 800086c:	7b13      	ldrb	r3, [r2, #12]
 800086e:	f361 0300 	bfi	r3, r1, #0, #1
 8000872:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 8000874:	4b3b      	ldr	r3, [pc, #236]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000876:	7d1b      	ldrb	r3, [r3, #20]
 8000878:	f003 0301 	and.w	r3, r3, #1
 800087c:	b2d9      	uxtb	r1, r3
 800087e:	4a3b      	ldr	r2, [pc, #236]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000880:	7b13      	ldrb	r3, [r2, #12]
 8000882:	f361 0341 	bfi	r3, r1, #1, #1
 8000886:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 8000888:	4b36      	ldr	r3, [pc, #216]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800088a:	7d5b      	ldrb	r3, [r3, #21]
 800088c:	f003 0301 	and.w	r3, r3, #1
 8000890:	b2d9      	uxtb	r1, r3
 8000892:	4a36      	ldr	r2, [pc, #216]	@ (800096c <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000894:	7b13      	ldrb	r3, [r2, #12]
 8000896:	f361 0382 	bfi	r3, r1, #2, #1
 800089a:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 800089c:	4b31      	ldr	r3, [pc, #196]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800089e:	7a1b      	ldrb	r3, [r3, #8]
 80008a0:	021b      	lsls	r3, r3, #8
 80008a2:	b21a      	sxth	r2, r3
 80008a4:	4b2f      	ldr	r3, [pc, #188]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008a6:	79db      	ldrb	r3, [r3, #7]
 80008a8:	b21b      	sxth	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b21b      	sxth	r3, r3
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	4b2f      	ldr	r3, [pc, #188]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80008b2:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 80008b4:	4b2b      	ldr	r3, [pc, #172]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008b6:	7a9b      	ldrb	r3, [r3, #10]
 80008b8:	021b      	lsls	r3, r3, #8
 80008ba:	b21a      	sxth	r2, r3
 80008bc:	4b29      	ldr	r3, [pc, #164]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008be:	7a5b      	ldrb	r3, [r3, #9]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	4313      	orrs	r3, r2
 80008c4:	b21b      	sxth	r3, r3
 80008c6:	b29a      	uxth	r2, r3
 80008c8:	4b29      	ldr	r3, [pc, #164]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80008ca:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 80008cc:	4b25      	ldr	r3, [pc, #148]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008ce:	7b9b      	ldrb	r3, [r3, #14]
 80008d0:	061a      	lsls	r2, r3, #24
 80008d2:	4b24      	ldr	r3, [pc, #144]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008d4:	7b5b      	ldrb	r3, [r3, #13]
 80008d6:	041b      	lsls	r3, r3, #16
 80008d8:	431a      	orrs	r2, r3
 80008da:	4b22      	ldr	r3, [pc, #136]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008dc:	7b1b      	ldrb	r3, [r3, #12]
 80008de:	021b      	lsls	r3, r3, #8
 80008e0:	4313      	orrs	r3, r2
 80008e2:	4a20      	ldr	r2, [pc, #128]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008e4:	7ad2      	ldrb	r2, [r2, #11]
 80008e6:	4313      	orrs	r3, r2
 80008e8:	ee07 3a90 	vmov	s15, r3
 80008ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80008f2:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 80008f6:	4b1b      	ldr	r3, [pc, #108]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80008f8:	7bdb      	ldrb	r3, [r3, #15]
 80008fa:	021b      	lsls	r3, r3, #8
 80008fc:	b21a      	sxth	r2, r3
 80008fe:	4b19      	ldr	r3, [pc, #100]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000900:	7c1b      	ldrb	r3, [r3, #16]
 8000902:	b21b      	sxth	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b21b      	sxth	r3, r3
 8000908:	b29a      	uxth	r2, r3
 800090a:	4b19      	ldr	r3, [pc, #100]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800090c:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 800090e:	4b15      	ldr	r3, [pc, #84]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000910:	7c9b      	ldrb	r3, [r3, #18]
 8000912:	021b      	lsls	r3, r3, #8
 8000914:	b21a      	sxth	r2, r3
 8000916:	4b13      	ldr	r3, [pc, #76]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000918:	7c5b      	ldrb	r3, [r3, #17]
 800091a:	b21b      	sxth	r3, r3
 800091c:	4313      	orrs	r3, r2
 800091e:	b21b      	sxth	r3, r3
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b13      	ldr	r3, [pc, #76]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000924:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 8000926:	4b0f      	ldr	r3, [pc, #60]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000928:	7d1b      	ldrb	r3, [r3, #20]
 800092a:	021b      	lsls	r3, r3, #8
 800092c:	b21a      	sxth	r2, r3
 800092e:	4b0d      	ldr	r3, [pc, #52]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000930:	7cdb      	ldrb	r3, [r3, #19]
 8000932:	b21b      	sxth	r3, r3
 8000934:	4313      	orrs	r3, r2
 8000936:	b21b      	sxth	r3, r3
 8000938:	b29a      	uxth	r2, r3
 800093a:	4b0d      	ldr	r3, [pc, #52]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800093c:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 800093e:	4b09      	ldr	r3, [pc, #36]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000940:	7d9b      	ldrb	r3, [r3, #22]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	4b07      	ldr	r3, [pc, #28]	@ (8000964 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000948:	7d5b      	ldrb	r3, [r3, #21]
 800094a:	b21b      	sxth	r3, r3
 800094c:	4313      	orrs	r3, r2
 800094e:	b21b      	sxth	r3, r3
 8000950:	b29a      	uxth	r2, r3
 8000952:	4b07      	ldr	r3, [pc, #28]	@ (8000970 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000954:	81da      	strh	r2, [r3, #14]
		        break;
 8000956:	bf00      	nop
		    }
		}
	}
}
 8000958:	bf00      	nop
 800095a:	377c      	adds	r7, #124	@ 0x7c
 800095c:	46bd      	mov	sp, r7
 800095e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000962:	bf00      	nop
 8000964:	2000007c 	.word	0x2000007c
 8000968:	20000180 	.word	0x20000180
 800096c:	200001a0 	.word	0x200001a0
 8000970:	20000190 	.word	0x20000190

08000974 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000978:	f001 ffea 	bl	8002950 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800097c:	f000 f85a 	bl	8000a34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000980:	f000 fcda 	bl	8001338 <MX_GPIO_Init>
  MX_DMA_Init();
 8000984:	f000 fc8a 	bl	800129c <MX_DMA_Init>
  MX_CAN1_Init();
 8000988:	f000 f8c0 	bl	8000b0c <MX_CAN1_Init>
  MX_CAN2_Init();
 800098c:	f000 f8f4 	bl	8000b78 <MX_CAN2_Init>
  MX_SPI1_Init();
 8000990:	f000 f956 	bl	8000c40 <MX_SPI1_Init>
  MX_TIM4_Init();
 8000994:	f000 fa32 	bl	8000dfc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8000998:	f000 fc00 	bl	800119c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 800099c:	f000 fc54 	bl	8001248 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80009a0:	f000 f984 	bl	8000cac <MX_TIM1_Init>
  MX_TIM8_Init();
 80009a4:	f000 fb10 	bl	8000fc8 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80009a8:	f000 fc22 	bl	80011f0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80009ac:	f000 fba8 	bl	8001100 <MX_TIM10_Init>
  MX_I2C3_Init();
 80009b0:	f000 f918 	bl	8000be4 <MX_I2C3_Init>
  MX_TIM5_Init();
 80009b4:	f000 fa98 	bl	8000ee8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009b8:	f006 faa2 	bl	8006f00 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 80009bc:	4a11      	ldr	r2, [pc, #68]	@ (8000a04 <main+0x90>)
 80009be:	2100      	movs	r1, #0
 80009c0:	4811      	ldr	r0, [pc, #68]	@ (8000a08 <main+0x94>)
 80009c2:	f006 fae7 	bl	8006f94 <osThreadNew>
 80009c6:	4603      	mov	r3, r0
 80009c8:	4a10      	ldr	r2, [pc, #64]	@ (8000a0c <main+0x98>)
 80009ca:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 80009cc:	4a10      	ldr	r2, [pc, #64]	@ (8000a10 <main+0x9c>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	4810      	ldr	r0, [pc, #64]	@ (8000a14 <main+0xa0>)
 80009d2:	f006 fadf 	bl	8006f94 <osThreadNew>
 80009d6:	4603      	mov	r3, r0
 80009d8:	4a0f      	ldr	r2, [pc, #60]	@ (8000a18 <main+0xa4>)
 80009da:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 80009dc:	4a0f      	ldr	r2, [pc, #60]	@ (8000a1c <main+0xa8>)
 80009de:	2100      	movs	r1, #0
 80009e0:	480f      	ldr	r0, [pc, #60]	@ (8000a20 <main+0xac>)
 80009e2:	f006 fad7 	bl	8006f94 <osThreadNew>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4a0e      	ldr	r2, [pc, #56]	@ (8000a24 <main+0xb0>)
 80009ea:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 80009ec:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <main+0xb4>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	480e      	ldr	r0, [pc, #56]	@ (8000a2c <main+0xb8>)
 80009f2:	f006 facf 	bl	8006f94 <osThreadNew>
 80009f6:	4603      	mov	r3, r0
 80009f8:	4a0d      	ldr	r2, [pc, #52]	@ (8000a30 <main+0xbc>)
 80009fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009fc:	f006 faa4 	bl	8006f48 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a00:	bf00      	nop
 8000a02:	e7fd      	b.n	8000a00 <main+0x8c>
 8000a04:	0800a4b0 	.word	0x0800a4b0
 8000a08:	0800152d 	.word	0x0800152d
 8000a0c:	200007d4 	.word	0x200007d4
 8000a10:	0800a4d4 	.word	0x0800a4d4
 8000a14:	0800153d 	.word	0x0800153d
 8000a18:	200007d8 	.word	0x200007d8
 8000a1c:	0800a4f8 	.word	0x0800a4f8
 8000a20:	080015e9 	.word	0x080015e9
 8000a24:	200007dc 	.word	0x200007dc
 8000a28:	0800a51c 	.word	0x0800a51c
 8000a2c:	080015f9 	.word	0x080015f9
 8000a30:	200007e0 	.word	0x200007e0

08000a34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b094      	sub	sp, #80	@ 0x50
 8000a38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3a:	f107 0320 	add.w	r3, r7, #32
 8000a3e:	2230      	movs	r2, #48	@ 0x30
 8000a40:	2100      	movs	r1, #0
 8000a42:	4618      	mov	r0, r3
 8000a44:	f009 f828 	bl	8009a98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a48:	f107 030c 	add.w	r3, r7, #12
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a58:	2300      	movs	r3, #0
 8000a5a:	60bb      	str	r3, [r7, #8]
 8000a5c:	4b29      	ldr	r3, [pc, #164]	@ (8000b04 <SystemClock_Config+0xd0>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a60:	4a28      	ldr	r2, [pc, #160]	@ (8000b04 <SystemClock_Config+0xd0>)
 8000a62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a66:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a68:	4b26      	ldr	r3, [pc, #152]	@ (8000b04 <SystemClock_Config+0xd0>)
 8000a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a6c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a70:	60bb      	str	r3, [r7, #8]
 8000a72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a74:	2300      	movs	r3, #0
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	4b23      	ldr	r3, [pc, #140]	@ (8000b08 <SystemClock_Config+0xd4>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	4a22      	ldr	r2, [pc, #136]	@ (8000b08 <SystemClock_Config+0xd4>)
 8000a7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a82:	6013      	str	r3, [r2, #0]
 8000a84:	4b20      	ldr	r3, [pc, #128]	@ (8000b08 <SystemClock_Config+0xd4>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a8c:	607b      	str	r3, [r7, #4]
 8000a8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a90:	2301      	movs	r3, #1
 8000a92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a94:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a98:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a9e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000aa4:	2306      	movs	r3, #6
 8000aa6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000aa8:	23a8      	movs	r3, #168	@ 0xa8
 8000aaa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aac:	2302      	movs	r3, #2
 8000aae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ab0:	2304      	movs	r3, #4
 8000ab2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab4:	f107 0320 	add.w	r3, r7, #32
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f003 fb21 	bl	8004100 <HAL_RCC_OscConfig>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac4:	f000 fda0 	bl	8001608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac8:	230f      	movs	r3, #15
 8000aca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000acc:	2302      	movs	r3, #2
 8000ace:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000ad4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ad8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ada:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ade:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2105      	movs	r1, #5
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f003 fd82 	bl	80045f0 <HAL_RCC_ClockConfig>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000af2:	f000 fd89 	bl	8001608 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000af6:	f003 fe61 	bl	80047bc <HAL_RCC_EnableCSS>
}
 8000afa:	bf00      	nop
 8000afc:	3750      	adds	r7, #80	@ 0x50
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000b10:	4b17      	ldr	r3, [pc, #92]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b12:	4a18      	ldr	r2, [pc, #96]	@ (8000b74 <MX_CAN1_Init+0x68>)
 8000b14:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000b16:	4b16      	ldr	r3, [pc, #88]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b18:	2203      	movs	r2, #3
 8000b1a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000b1c:	4b14      	ldr	r3, [pc, #80]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b22:	4b13      	ldr	r3, [pc, #76]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000b28:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b2a:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b2e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b32:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000b36:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000b38:	4b0d      	ldr	r3, [pc, #52]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000b3e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000b44:	4b0a      	ldr	r3, [pc, #40]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000b4a:	4b09      	ldr	r3, [pc, #36]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000b50:	4b07      	ldr	r3, [pc, #28]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000b56:	4b06      	ldr	r3, [pc, #24]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000b5c:	4804      	ldr	r0, [pc, #16]	@ (8000b70 <MX_CAN1_Init+0x64>)
 8000b5e:	f001 ff69 	bl	8002a34 <HAL_CAN_Init>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000b68:	f000 fd4e 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000b6c:	bf00      	nop
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200002b8 	.word	0x200002b8
 8000b74:	40006400 	.word	0x40006400

08000b78 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000b7c:	4b17      	ldr	r3, [pc, #92]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b7e:	4a18      	ldr	r2, [pc, #96]	@ (8000be0 <MX_CAN2_Init+0x68>)
 8000b80:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000b82:	4b16      	ldr	r3, [pc, #88]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b84:	2203      	movs	r2, #3
 8000b86:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000b88:	4b14      	ldr	r3, [pc, #80]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000b8e:	4b13      	ldr	r3, [pc, #76]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000b94:	4b11      	ldr	r3, [pc, #68]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b96:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000b9a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000b9e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000ba2:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000ba4:	4b0d      	ldr	r3, [pc, #52]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000baa:	4b0c      	ldr	r3, [pc, #48]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000bb6:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000bbc:	4b07      	ldr	r3, [pc, #28]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000bc8:	4804      	ldr	r0, [pc, #16]	@ (8000bdc <MX_CAN2_Init+0x64>)
 8000bca:	f001 ff33 	bl	8002a34 <HAL_CAN_Init>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000bd4:	f000 fd18 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	200002e0 	.word	0x200002e0
 8000be0:	40006800 	.word	0x40006800

08000be4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000be4:	b580      	push	{r7, lr}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000bea:	4a13      	ldr	r2, [pc, #76]	@ (8000c38 <MX_I2C3_Init+0x54>)
 8000bec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000bee:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000bf0:	4a12      	ldr	r2, [pc, #72]	@ (8000c3c <MX_I2C3_Init+0x58>)
 8000bf2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000c02:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000c06:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c08:	4b0a      	ldr	r3, [pc, #40]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000c0e:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c14:	4b07      	ldr	r3, [pc, #28]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1a:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000c20:	4804      	ldr	r0, [pc, #16]	@ (8000c34 <MX_I2C3_Init+0x50>)
 8000c22:	f003 f929 	bl	8003e78 <HAL_I2C_Init>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000c2c:	f000 fcec 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000308 	.word	0x20000308
 8000c38:	40005c00 	.word	0x40005c00
 8000c3c:	00061a80 	.word	0x00061a80

08000c40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c44:	4b17      	ldr	r3, [pc, #92]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c46:	4a18      	ldr	r2, [pc, #96]	@ (8000ca8 <MX_SPI1_Init+0x68>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b14      	ldr	r3, [pc, #80]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b12      	ldr	r3, [pc, #72]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c60:	2202      	movs	r2, #2
 8000c62:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000c64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c6c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c70:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000c72:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c74:	2238      	movs	r2, #56	@ 0x38
 8000c76:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c78:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c84:	4b07      	ldr	r3, [pc, #28]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c8c:	220a      	movs	r2, #10
 8000c8e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c90:	4804      	ldr	r0, [pc, #16]	@ (8000ca4 <MX_SPI1_Init+0x64>)
 8000c92:	f003 feb4 	bl	80049fe <HAL_SPI_Init>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c9c:	f000 fcb4 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ca0:	bf00      	nop
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	2000035c 	.word	0x2000035c
 8000ca8:	40013000 	.word	0x40013000

08000cac <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b092      	sub	sp, #72	@ 0x48
 8000cb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cd0:	1d3b      	adds	r3, r7, #4
 8000cd2:	2220      	movs	r2, #32
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f008 fede 	bl	8009a98 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cdc:	4b45      	ldr	r3, [pc, #276]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000cde:	4a46      	ldr	r2, [pc, #280]	@ (8000df8 <MX_TIM1_Init+0x14c>)
 8000ce0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8000ce2:	4b44      	ldr	r3, [pc, #272]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000ce4:	f240 124f 	movw	r2, #335	@ 0x14f
 8000ce8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cea:	4b42      	ldr	r3, [pc, #264]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000cf0:	4b40      	ldr	r3, [pc, #256]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000cf2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000cf6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf8:	4b3e      	ldr	r3, [pc, #248]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000cfe:	4b3d      	ldr	r3, [pc, #244]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d04:	4b3b      	ldr	r3, [pc, #236]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d0a:	483a      	ldr	r0, [pc, #232]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000d0c:	f003 ffb8 	bl	8004c80 <HAL_TIM_PWM_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000d16:	f000 fc77 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d22:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d26:	4619      	mov	r1, r3
 8000d28:	4832      	ldr	r0, [pc, #200]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000d2a:	f004 fdd7 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000d34:	f000 fc68 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d38:	2360      	movs	r3, #96	@ 0x60
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d40:	2300      	movs	r3, #0
 8000d42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d44:	2300      	movs	r3, #0
 8000d46:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d58:	2200      	movs	r2, #0
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4825      	ldr	r0, [pc, #148]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000d5e:	f004 f917 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000d68:	f000 fc4e 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d70:	2204      	movs	r2, #4
 8000d72:	4619      	mov	r1, r3
 8000d74:	481f      	ldr	r0, [pc, #124]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000d76:	f004 f90b 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d001      	beq.n	8000d84 <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000d80:	f000 fc42 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d88:	2208      	movs	r2, #8
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4819      	ldr	r0, [pc, #100]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000d8e:	f004 f8ff 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d001      	beq.n	8000d9c <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000d98:	f000 fc36 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000da0:	220c      	movs	r2, #12
 8000da2:	4619      	mov	r1, r3
 8000da4:	4813      	ldr	r0, [pc, #76]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000da6:	f004 f8f3 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000db0:	f000 fc2a 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000db4:	2300      	movs	r3, #0
 8000db6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db8:	2300      	movs	r3, #0
 8000dba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000dcc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4807      	ldr	r0, [pc, #28]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000dd8:	f004 fdfc 	bl	80059d4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d001      	beq.n	8000de6 <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000de2:	f000 fc11 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000de6:	4803      	ldr	r0, [pc, #12]	@ (8000df4 <MX_TIM1_Init+0x148>)
 8000de8:	f001 f9be 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8000dec:	bf00      	nop
 8000dee:	3748      	adds	r7, #72	@ 0x48
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	200003b4 	.word	0x200003b4
 8000df8:	40010000 	.word	0x40010000

08000dfc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	@ 0x38
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e06:	2200      	movs	r2, #0
 8000e08:	601a      	str	r2, [r3, #0]
 8000e0a:	605a      	str	r2, [r3, #4]
 8000e0c:	609a      	str	r2, [r3, #8]
 8000e0e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e10:	f107 0320 	add.w	r3, r7, #32
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	601a      	str	r2, [r3, #0]
 8000e20:	605a      	str	r2, [r3, #4]
 8000e22:	609a      	str	r2, [r3, #8]
 8000e24:	60da      	str	r2, [r3, #12]
 8000e26:	611a      	str	r2, [r3, #16]
 8000e28:	615a      	str	r2, [r3, #20]
 8000e2a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e2e:	4a2d      	ldr	r2, [pc, #180]	@ (8000ee4 <MX_TIM4_Init+0xe8>)
 8000e30:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000e32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e34:	2253      	movs	r2, #83	@ 0x53
 8000e36:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e38:	4b29      	ldr	r3, [pc, #164]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8000e3e:	4b28      	ldr	r3, [pc, #160]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e40:	22f9      	movs	r2, #249	@ 0xf9
 8000e42:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e44:	4b26      	ldr	r3, [pc, #152]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e4a:	4b25      	ldr	r3, [pc, #148]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e4c:	2280      	movs	r2, #128	@ 0x80
 8000e4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e50:	4823      	ldr	r0, [pc, #140]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e52:	f003 fe5d 	bl	8004b10 <HAL_TIM_Base_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000e5c:	f000 fbd4 	bl	8001608 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6a:	4619      	mov	r1, r3
 8000e6c:	481c      	ldr	r0, [pc, #112]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e6e:	f004 f951 	bl	8005114 <HAL_TIM_ConfigClockSource>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000e78:	f000 fbc6 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e7c:	4818      	ldr	r0, [pc, #96]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e7e:	f003 feff 	bl	8004c80 <HAL_TIM_PWM_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000e88:	f000 fbbe 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e90:	2300      	movs	r3, #0
 8000e92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e94:	f107 0320 	add.w	r3, r7, #32
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4811      	ldr	r0, [pc, #68]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000e9c:	f004 fd1e 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000ea6:	f000 fbaf 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000eaa:	2360      	movs	r3, #96	@ 0x60
 8000eac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8000eae:	f642 1303 	movw	r3, #10499	@ 0x2903
 8000eb2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ebc:	1d3b      	adds	r3, r7, #4
 8000ebe:	2208      	movs	r2, #8
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4807      	ldr	r0, [pc, #28]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000ec4:	f004 f864 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000ece:	f000 fb9b 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ed2:	4803      	ldr	r0, [pc, #12]	@ (8000ee0 <MX_TIM4_Init+0xe4>)
 8000ed4:	f001 f948 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8000ed8:	bf00      	nop
 8000eda:	3738      	adds	r7, #56	@ 0x38
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	200003fc 	.word	0x200003fc
 8000ee4:	40000800 	.word	0x40000800

08000ee8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b08a      	sub	sp, #40	@ 0x28
 8000eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eee:	f107 0320 	add.w	r3, r7, #32
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	601a      	str	r2, [r3, #0]
 8000ef6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	2200      	movs	r2, #0
 8000efc:	601a      	str	r2, [r3, #0]
 8000efe:	605a      	str	r2, [r3, #4]
 8000f00:	609a      	str	r2, [r3, #8]
 8000f02:	60da      	str	r2, [r3, #12]
 8000f04:	611a      	str	r2, [r3, #16]
 8000f06:	615a      	str	r2, [r3, #20]
 8000f08:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f0c:	4a2d      	ldr	r2, [pc, #180]	@ (8000fc4 <MX_TIM5_Init+0xdc>)
 8000f0e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000f10:	4b2b      	ldr	r3, [pc, #172]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f12:	2253      	movs	r2, #83	@ 0x53
 8000f14:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f16:	4b2a      	ldr	r3, [pc, #168]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8000f1c:	4b28      	ldr	r3, [pc, #160]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f1e:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000f22:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f24:	4b26      	ldr	r3, [pc, #152]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f2a:	4b25      	ldr	r3, [pc, #148]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f30:	4823      	ldr	r0, [pc, #140]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f32:	f003 fea5 	bl	8004c80 <HAL_TIM_PWM_Init>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000f3c:	f000 fb64 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f40:	2300      	movs	r3, #0
 8000f42:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f44:	2300      	movs	r3, #0
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f48:	f107 0320 	add.w	r3, r7, #32
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	481c      	ldr	r0, [pc, #112]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f50:	f004 fcc4 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000f5a:	f000 fb55 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f5e:	2360      	movs	r3, #96	@ 0x60
 8000f60:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f6e:	1d3b      	adds	r3, r7, #4
 8000f70:	2200      	movs	r2, #0
 8000f72:	4619      	mov	r1, r3
 8000f74:	4812      	ldr	r0, [pc, #72]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f76:	f004 f80b 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000f80:	f000 fb42 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	2204      	movs	r2, #4
 8000f88:	4619      	mov	r1, r3
 8000f8a:	480d      	ldr	r0, [pc, #52]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000f8c:	f004 f800 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000f96:	f000 fb37 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	2208      	movs	r2, #8
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4807      	ldr	r0, [pc, #28]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000fa2:	f003 fff5 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000fac:	f000 fb2c 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fb0:	4803      	ldr	r0, [pc, #12]	@ (8000fc0 <MX_TIM5_Init+0xd8>)
 8000fb2:	f001 f8d9 	bl	8002168 <HAL_TIM_MspPostInit>

}
 8000fb6:	bf00      	nop
 8000fb8:	3728      	adds	r7, #40	@ 0x28
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	20000444 	.word	0x20000444
 8000fc4:	40000c00 	.word	0x40000c00

08000fc8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b092      	sub	sp, #72	@ 0x48
 8000fcc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fd8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
 8000fe8:	615a      	str	r2, [r3, #20]
 8000fea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fec:	1d3b      	adds	r3, r7, #4
 8000fee:	2220      	movs	r2, #32
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f008 fd50 	bl	8009a98 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000ff8:	4b3f      	ldr	r3, [pc, #252]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8000ffa:	4a40      	ldr	r2, [pc, #256]	@ (80010fc <MX_TIM8_Init+0x134>)
 8000ffc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 335;
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8001000:	f240 124f 	movw	r2, #335	@ 0x14f
 8001004:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001006:	4b3c      	ldr	r3, [pc, #240]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8001008:	2200      	movs	r2, #0
 800100a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 800100c:	4b3a      	ldr	r3, [pc, #232]	@ (80010f8 <MX_TIM8_Init+0x130>)
 800100e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001012:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001014:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8001016:	2200      	movs	r2, #0
 8001018:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800101a:	4b37      	ldr	r3, [pc, #220]	@ (80010f8 <MX_TIM8_Init+0x130>)
 800101c:	2200      	movs	r2, #0
 800101e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001020:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8001022:	2280      	movs	r2, #128	@ 0x80
 8001024:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001026:	4834      	ldr	r0, [pc, #208]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8001028:	f003 fe2a 	bl	8004c80 <HAL_TIM_PWM_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8001032:	f000 fae9 	bl	8001608 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001036:	2300      	movs	r3, #0
 8001038:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800103a:	2300      	movs	r3, #0
 800103c:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800103e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001042:	4619      	mov	r1, r3
 8001044:	482c      	ldr	r0, [pc, #176]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8001046:	f004 fc49 	bl	80058dc <HAL_TIMEx_MasterConfigSynchronization>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	d001      	beq.n	8001054 <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8001050:	f000 fada 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001054:	2360      	movs	r3, #96	@ 0x60
 8001056:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001058:	2300      	movs	r3, #0
 800105a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800105c:	2300      	movs	r3, #0
 800105e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001060:	2300      	movs	r3, #0
 8001062:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001064:	2300      	movs	r3, #0
 8001066:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800106c:	2300      	movs	r3, #0
 800106e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001074:	2200      	movs	r2, #0
 8001076:	4619      	mov	r1, r3
 8001078:	481f      	ldr	r0, [pc, #124]	@ (80010f8 <MX_TIM8_Init+0x130>)
 800107a:	f003 ff89 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001084:	f000 fac0 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108c:	2204      	movs	r2, #4
 800108e:	4619      	mov	r1, r3
 8001090:	4819      	ldr	r0, [pc, #100]	@ (80010f8 <MX_TIM8_Init+0x130>)
 8001092:	f003 ff7d 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 800109c:	f000 fab4 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a4:	2208      	movs	r2, #8
 80010a6:	4619      	mov	r1, r3
 80010a8:	4813      	ldr	r0, [pc, #76]	@ (80010f8 <MX_TIM8_Init+0x130>)
 80010aa:	f003 ff71 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 80010b4:	f000 faa8 	bl	8001608 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010c0:	2300      	movs	r3, #0
 80010c2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010c4:	2300      	movs	r3, #0
 80010c6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c8:	2300      	movs	r3, #0
 80010ca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80010d6:	1d3b      	adds	r3, r7, #4
 80010d8:	4619      	mov	r1, r3
 80010da:	4807      	ldr	r0, [pc, #28]	@ (80010f8 <MX_TIM8_Init+0x130>)
 80010dc:	f004 fc7a 	bl	80059d4 <HAL_TIMEx_ConfigBreakDeadTime>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 80010e6:	f000 fa8f 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80010ea:	4803      	ldr	r0, [pc, #12]	@ (80010f8 <MX_TIM8_Init+0x130>)
 80010ec:	f001 f83c 	bl	8002168 <HAL_TIM_MspPostInit>

}
 80010f0:	bf00      	nop
 80010f2:	3748      	adds	r7, #72	@ 0x48
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	2000048c 	.word	0x2000048c
 80010fc:	40010400 	.word	0x40010400

08001100 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b088      	sub	sp, #32
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001106:	1d3b      	adds	r3, r7, #4
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
 8001114:	615a      	str	r2, [r3, #20]
 8001116:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001118:	4b1e      	ldr	r3, [pc, #120]	@ (8001194 <MX_TIM10_Init+0x94>)
 800111a:	4a1f      	ldr	r2, [pc, #124]	@ (8001198 <MX_TIM10_Init+0x98>)
 800111c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800111e:	4b1d      	ldr	r3, [pc, #116]	@ (8001194 <MX_TIM10_Init+0x94>)
 8001120:	2200      	movs	r2, #0
 8001122:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001124:	4b1b      	ldr	r3, [pc, #108]	@ (8001194 <MX_TIM10_Init+0x94>)
 8001126:	2200      	movs	r2, #0
 8001128:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800112a:	4b1a      	ldr	r3, [pc, #104]	@ (8001194 <MX_TIM10_Init+0x94>)
 800112c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001130:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001132:	4b18      	ldr	r3, [pc, #96]	@ (8001194 <MX_TIM10_Init+0x94>)
 8001134:	2200      	movs	r2, #0
 8001136:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b16      	ldr	r3, [pc, #88]	@ (8001194 <MX_TIM10_Init+0x94>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800113e:	4815      	ldr	r0, [pc, #84]	@ (8001194 <MX_TIM10_Init+0x94>)
 8001140:	f003 fce6 	bl	8004b10 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800114a:	f000 fa5d 	bl	8001608 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800114e:	4811      	ldr	r0, [pc, #68]	@ (8001194 <MX_TIM10_Init+0x94>)
 8001150:	f003 fd96 	bl	8004c80 <HAL_TIM_PWM_Init>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800115a:	f000 fa55 	bl	8001608 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115e:	2360      	movs	r3, #96	@ 0x60
 8001160:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001166:	2300      	movs	r3, #0
 8001168:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800116a:	2300      	movs	r3, #0
 800116c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800116e:	1d3b      	adds	r3, r7, #4
 8001170:	2200      	movs	r2, #0
 8001172:	4619      	mov	r1, r3
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <MX_TIM10_Init+0x94>)
 8001176:	f003 ff0b 	bl	8004f90 <HAL_TIM_PWM_ConfigChannel>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8001180:	f000 fa42 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001184:	4803      	ldr	r0, [pc, #12]	@ (8001194 <MX_TIM10_Init+0x94>)
 8001186:	f000 ffef 	bl	8002168 <HAL_TIM_MspPostInit>

}
 800118a:	bf00      	nop
 800118c:	3720      	adds	r7, #32
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200004d4 	.word	0x200004d4
 8001198:	40014400 	.word	0x40014400

0800119c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011a0:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011a2:	4a12      	ldr	r2, [pc, #72]	@ (80011ec <MX_USART1_UART_Init+0x50>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80011a6:	4b10      	ldr	r3, [pc, #64]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b0e      	ldr	r3, [pc, #56]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0b      	ldr	r3, [pc, #44]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b08      	ldr	r3, [pc, #32]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b06      	ldr	r3, [pc, #24]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011d2:	4805      	ldr	r0, [pc, #20]	@ (80011e8 <MX_USART1_UART_Init+0x4c>)
 80011d4:	f004 fc50 	bl	8005a78 <HAL_UART_Init>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011de:	f000 fa13 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	2000051c 	.word	0x2000051c
 80011ec:	40011000 	.word	0x40011000

080011f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f4:	4b11      	ldr	r3, [pc, #68]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 80011f6:	4a12      	ldr	r2, [pc, #72]	@ (8001240 <MX_USART3_UART_Init+0x50>)
 80011f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80011fa:	4b10      	ldr	r3, [pc, #64]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 80011fc:	4a11      	ldr	r2, [pc, #68]	@ (8001244 <MX_USART3_UART_Init+0x54>)
 80011fe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001200:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001206:	4b0d      	ldr	r3, [pc, #52]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800120c:	4b0b      	ldr	r3, [pc, #44]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 800120e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001212:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001214:	4b09      	ldr	r3, [pc, #36]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 8001216:	220c      	movs	r2, #12
 8001218:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121a:	4b08      	ldr	r3, [pc, #32]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 800121c:	2200      	movs	r2, #0
 800121e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001220:	4b06      	ldr	r3, [pc, #24]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 8001222:	2200      	movs	r2, #0
 8001224:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	@ (800123c <MX_USART3_UART_Init+0x4c>)
 8001228:	f004 fc26 	bl	8005a78 <HAL_UART_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001232:	f000 f9e9 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000564 	.word	0x20000564
 8001240:	40004800 	.word	0x40004800
 8001244:	000186a0 	.word	0x000186a0

08001248 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800124c:	4b11      	ldr	r3, [pc, #68]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 800124e:	4a12      	ldr	r2, [pc, #72]	@ (8001298 <MX_USART6_UART_Init+0x50>)
 8001250:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001252:	4b10      	ldr	r3, [pc, #64]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 8001254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001258:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800125a:	4b0e      	ldr	r3, [pc, #56]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001260:	4b0c      	ldr	r3, [pc, #48]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 8001262:	2200      	movs	r2, #0
 8001264:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001266:	4b0b      	ldr	r3, [pc, #44]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800126c:	4b09      	ldr	r3, [pc, #36]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 800126e:	220c      	movs	r2, #12
 8001270:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001272:	4b08      	ldr	r3, [pc, #32]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001278:	4b06      	ldr	r3, [pc, #24]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800127e:	4805      	ldr	r0, [pc, #20]	@ (8001294 <MX_USART6_UART_Init+0x4c>)
 8001280:	f004 fbfa 	bl	8005a78 <HAL_UART_Init>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800128a:	f000 f9bd 	bl	8001608 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	200005ac 	.word	0x200005ac
 8001298:	40011400 	.word	0x40011400

0800129c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	607b      	str	r3, [r7, #4]
 80012a6:	4b23      	ldr	r3, [pc, #140]	@ (8001334 <MX_DMA_Init+0x98>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a22      	ldr	r2, [pc, #136]	@ (8001334 <MX_DMA_Init+0x98>)
 80012ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b20      	ldr	r3, [pc, #128]	@ (8001334 <MX_DMA_Init+0x98>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012ba:	607b      	str	r3, [r7, #4]
 80012bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	603b      	str	r3, [r7, #0]
 80012c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001334 <MX_DMA_Init+0x98>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a1b      	ldr	r2, [pc, #108]	@ (8001334 <MX_DMA_Init+0x98>)
 80012c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b19      	ldr	r3, [pc, #100]	@ (8001334 <MX_DMA_Init+0x98>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012d6:	603b      	str	r3, [r7, #0]
 80012d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80012da:	2200      	movs	r2, #0
 80012dc:	2105      	movs	r1, #5
 80012de:	200c      	movs	r0, #12
 80012e0:	f001 ffb7 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80012e4:	200c      	movs	r0, #12
 80012e6:	f001 ffd0 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2105      	movs	r1, #5
 80012ee:	2039      	movs	r0, #57	@ 0x39
 80012f0:	f001 ffaf 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012f4:	2039      	movs	r0, #57	@ 0x39
 80012f6:	f001 ffc8 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80012fa:	2200      	movs	r2, #0
 80012fc:	2105      	movs	r1, #5
 80012fe:	203a      	movs	r0, #58	@ 0x3a
 8001300:	f001 ffa7 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001304:	203a      	movs	r0, #58	@ 0x3a
 8001306:	f001 ffc0 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 800130a:	2200      	movs	r2, #0
 800130c:	2105      	movs	r1, #5
 800130e:	2045      	movs	r0, #69	@ 0x45
 8001310:	f001 ff9f 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001314:	2045      	movs	r0, #69	@ 0x45
 8001316:	f001 ffb8 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2105      	movs	r1, #5
 800131e:	2046      	movs	r0, #70	@ 0x46
 8001320:	f001 ff97 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8001324:	2046      	movs	r0, #70	@ 0x46
 8001326:	f001 ffb0 	bl	800328a <HAL_NVIC_EnableIRQ>

}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40023800 	.word	0x40023800

08001338 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08e      	sub	sp, #56	@ 0x38
 800133c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
 800134c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
 8001352:	4b71      	ldr	r3, [pc, #452]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	4a70      	ldr	r2, [pc, #448]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001358:	f043 0302 	orr.w	r3, r3, #2
 800135c:	6313      	str	r3, [r2, #48]	@ 0x30
 800135e:	4b6e      	ldr	r3, [pc, #440]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	623b      	str	r3, [r7, #32]
 8001368:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	61fb      	str	r3, [r7, #28]
 800136e:	4b6a      	ldr	r3, [pc, #424]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	4a69      	ldr	r2, [pc, #420]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001374:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001378:	6313      	str	r3, [r2, #48]	@ 0x30
 800137a:	4b67      	ldr	r3, [pc, #412]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001382:	61fb      	str	r3, [r7, #28]
 8001384:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	61bb      	str	r3, [r7, #24]
 800138a:	4b63      	ldr	r3, [pc, #396]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	4a62      	ldr	r2, [pc, #392]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6313      	str	r3, [r2, #48]	@ 0x30
 8001396:	4b60      	ldr	r3, [pc, #384]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	61bb      	str	r3, [r7, #24]
 80013a0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	617b      	str	r3, [r7, #20]
 80013a6:	4b5c      	ldr	r3, [pc, #368]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	4a5b      	ldr	r2, [pc, #364]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b2:	4b59      	ldr	r3, [pc, #356]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b55      	ldr	r3, [pc, #340]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c6:	4a54      	ldr	r2, [pc, #336]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ce:	4b52      	ldr	r3, [pc, #328]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b4e      	ldr	r3, [pc, #312]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	4a4d      	ldr	r2, [pc, #308]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ea:	4b4b      	ldr	r3, [pc, #300]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b47      	ldr	r3, [pc, #284]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fe:	4a46      	ldr	r2, [pc, #280]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001400:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001404:	6313      	str	r3, [r2, #48]	@ 0x30
 8001406:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800140a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b40      	ldr	r3, [pc, #256]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800141a:	4a3f      	ldr	r2, [pc, #252]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 800141c:	f043 0320 	orr.w	r3, r3, #32
 8001420:	6313      	str	r3, [r2, #48]	@ 0x30
 8001422:	4b3d      	ldr	r3, [pc, #244]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	f003 0320 	and.w	r3, r3, #32
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	603b      	str	r3, [r7, #0]
 8001432:	4b39      	ldr	r3, [pc, #228]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a38      	ldr	r2, [pc, #224]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b36      	ldr	r3, [pc, #216]	@ (8001518 <MX_GPIO_Init+0x1e0>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800144a:	2200      	movs	r2, #0
 800144c:	2140      	movs	r1, #64	@ 0x40
 800144e:	4833      	ldr	r0, [pc, #204]	@ (800151c <MX_GPIO_Init+0x1e4>)
 8001450:	f002 fcd4 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8001454:	2200      	movs	r2, #0
 8001456:	2110      	movs	r1, #16
 8001458:	4831      	ldr	r0, [pc, #196]	@ (8001520 <MX_GPIO_Init+0x1e8>)
 800145a:	f002 fccf 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800145e:	2200      	movs	r2, #0
 8001460:	2101      	movs	r1, #1
 8001462:	4830      	ldr	r0, [pc, #192]	@ (8001524 <MX_GPIO_Init+0x1ec>)
 8001464:	f002 fcca 	bl	8003dfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001468:	2340      	movs	r3, #64	@ 0x40
 800146a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800146c:	2301      	movs	r3, #1
 800146e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001470:	2300      	movs	r3, #0
 8001472:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001474:	2300      	movs	r3, #0
 8001476:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001478:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800147c:	4619      	mov	r1, r3
 800147e:	4827      	ldr	r0, [pc, #156]	@ (800151c <MX_GPIO_Init+0x1e4>)
 8001480:	f002 fb20 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001484:	2308      	movs	r3, #8
 8001486:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001488:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800148c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148e:	2300      	movs	r3, #0
 8001490:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001492:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001496:	4619      	mov	r1, r3
 8001498:	4820      	ldr	r0, [pc, #128]	@ (800151c <MX_GPIO_Init+0x1e4>)
 800149a:	f002 fb13 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800149e:	2310      	movs	r3, #16
 80014a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014a2:	2301      	movs	r3, #1
 80014a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014aa:	2300      	movs	r3, #0
 80014ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	481a      	ldr	r0, [pc, #104]	@ (8001520 <MX_GPIO_Init+0x1e8>)
 80014b6:	f002 fb05 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80014ba:	2330      	movs	r3, #48	@ 0x30
 80014bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014be:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80014c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014cc:	4619      	mov	r1, r3
 80014ce:	4816      	ldr	r0, [pc, #88]	@ (8001528 <MX_GPIO_Init+0x1f0>)
 80014d0:	f002 faf8 	bl	8003ac4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014d4:	2301      	movs	r3, #1
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014d8:	2301      	movs	r3, #1
 80014da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014dc:	2300      	movs	r3, #0
 80014de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e0:	2300      	movs	r3, #0
 80014e2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e8:	4619      	mov	r1, r3
 80014ea:	480e      	ldr	r0, [pc, #56]	@ (8001524 <MX_GPIO_Init+0x1ec>)
 80014ec:	f002 faea 	bl	8003ac4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80014f0:	2200      	movs	r2, #0
 80014f2:	2105      	movs	r1, #5
 80014f4:	2009      	movs	r0, #9
 80014f6:	f001 feac 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014fa:	2009      	movs	r0, #9
 80014fc:	f001 fec5 	bl	800328a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001500:	2200      	movs	r2, #0
 8001502:	2105      	movs	r1, #5
 8001504:	200a      	movs	r0, #10
 8001506:	f001 fea4 	bl	8003252 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800150a:	200a      	movs	r0, #10
 800150c:	f001 febd 	bl	800328a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001510:	bf00      	nop
 8001512:	3738      	adds	r7, #56	@ 0x38
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40023800 	.word	0x40023800
 800151c:	40021800 	.word	0x40021800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020400 	.word	0x40020400
 8001528:	40020800 	.word	0x40020800

0800152c <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  osDelay(1);
 8001534:	2001      	movs	r0, #1
 8001536:	f005 fdbf 	bl	80070b8 <osDelay>
 800153a:	e7fb      	b.n	8001534 <TaskMain+0x8>

0800153c <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 800153c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800153e:	b0c7      	sub	sp, #284	@ 0x11c
 8001540:	af44      	add	r7, sp, #272	@ 0x110
 8001542:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskChassis */
  /* Infinite loop */
  HAL_TIM_Base_Start(&htim1);
 8001544:	4823      	ldr	r0, [pc, #140]	@ (80015d4 <TaskChassis+0x98>)
 8001546:	f003 fb33 	bl	8004bb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 800154a:	4823      	ldr	r0, [pc, #140]	@ (80015d8 <TaskChassis+0x9c>)
 800154c:	f003 fb30 	bl	8004bb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim5);
 8001550:	4822      	ldr	r0, [pc, #136]	@ (80015dc <TaskChassis+0xa0>)
 8001552:	f003 fb2d 	bl	8004bb0 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 8001556:	4822      	ldr	r0, [pc, #136]	@ (80015e0 <TaskChassis+0xa4>)
 8001558:	f003 fb2a 	bl	8004bb0 <HAL_TIM_Base_Start>

  PWMInit (htim1, htim4, htim5, htim8);
 800155c:	4e1d      	ldr	r6, [pc, #116]	@ (80015d4 <TaskChassis+0x98>)
 800155e:	4a20      	ldr	r2, [pc, #128]	@ (80015e0 <TaskChassis+0xa4>)
 8001560:	ab32      	add	r3, sp, #200	@ 0xc8
 8001562:	4611      	mov	r1, r2
 8001564:	2248      	movs	r2, #72	@ 0x48
 8001566:	4618      	mov	r0, r3
 8001568:	f008 fb20 	bl	8009bac <memcpy>
 800156c:	4a1b      	ldr	r2, [pc, #108]	@ (80015dc <TaskChassis+0xa0>)
 800156e:	ab20      	add	r3, sp, #128	@ 0x80
 8001570:	4611      	mov	r1, r2
 8001572:	2248      	movs	r2, #72	@ 0x48
 8001574:	4618      	mov	r0, r3
 8001576:	f008 fb19 	bl	8009bac <memcpy>
 800157a:	4a17      	ldr	r2, [pc, #92]	@ (80015d8 <TaskChassis+0x9c>)
 800157c:	ab0e      	add	r3, sp, #56	@ 0x38
 800157e:	4611      	mov	r1, r2
 8001580:	2248      	movs	r2, #72	@ 0x48
 8001582:	4618      	mov	r0, r3
 8001584:	f008 fb12 	bl	8009bac <memcpy>
 8001588:	466d      	mov	r5, sp
 800158a:	f106 0410 	add.w	r4, r6, #16
 800158e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001590:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001592:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001594:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001596:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001598:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800159a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800159e:	e885 0003 	stmia.w	r5, {r0, r1}
 80015a2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80015a6:	f000 f835 	bl	8001614 <PWMInit>
		iVal++;
	}
	float realVal = iVal/1000;
    */
	// (TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency)
	PWMOutput(LED, 2, 500);
 80015aa:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80015ae:	2102      	movs	r1, #2
 80015b0:	2001      	movs	r0, #1
 80015b2:	f000 fa51 	bl	8001a58 <PWMOutput>

	// (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val)
	PWMInitialize(LED, FR, 2, 0.9);
 80015b6:	ed9f 0a0b 	vldr	s0, [pc, #44]	@ 80015e4 <TaskChassis+0xa8>
 80015ba:	2202      	movs	r2, #2
 80015bc:	2101      	movs	r1, #1
 80015be:	2001      	movs	r0, #1
 80015c0:	f000 f94c 	bl	800185c <PWMInitialize>
	// (*tim5).Instance->CCR2=value;

	// htim5.Init.Period = 1000;

	// htim5.Instance->CCR2=400;
	PWMTimerStarter();
 80015c4:	f000 fa7a 	bl	8001abc <PWMTimerStarter>

    osDelay(5);
 80015c8:	2005      	movs	r0, #5
 80015ca:	f005 fd75 	bl	80070b8 <osDelay>
	PWMOutput(LED, 2, 500);
 80015ce:	bf00      	nop
 80015d0:	e7eb      	b.n	80015aa <TaskChassis+0x6e>
 80015d2:	bf00      	nop
 80015d4:	200003b4 	.word	0x200003b4
 80015d8:	200003fc 	.word	0x200003fc
 80015dc:	20000444 	.word	0x20000444
 80015e0:	2000048c 	.word	0x2000048c
 80015e4:	3f666666 	.word	0x3f666666

080015e8 <imu_temp_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_temp_control_task */
__weak void imu_temp_control_task(void *argument)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_temp_control_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80015f0:	2001      	movs	r0, #1
 80015f2:	f005 fd61 	bl	80070b8 <osDelay>
 80015f6:	e7fb      	b.n	80015f0 <imu_temp_control_task+0x8>

080015f8 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001600:	2001      	movs	r0, #1
 8001602:	f005 fd59 	bl	80070b8 <osDelay>
 8001606:	e7fb      	b.n	8001600 <TaskTurret+0x8>

08001608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800160c:	b672      	cpsid	i
}
 800160e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001610:	bf00      	nop
 8001612:	e7fd      	b.n	8001610 <Error_Handler+0x8>

08001614 <PWMInit>:
int32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef htim1, TIM_HandleTypeDef htim4, TIM_HandleTypeDef htim5, TIM_HandleTypeDef htim8) {
 8001614:	b084      	sub	sp, #16
 8001616:	b490      	push	{r4, r7}
 8001618:	af00      	add	r7, sp, #0
 800161a:	f107 0408 	add.w	r4, r7, #8
 800161e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	tim1 = &htim1;
 8001622:	4b0a      	ldr	r3, [pc, #40]	@ (800164c <PWMInit+0x38>)
 8001624:	f107 0208 	add.w	r2, r7, #8
 8001628:	601a      	str	r2, [r3, #0]
	tim4 = &htim4;
 800162a:	4a09      	ldr	r2, [pc, #36]	@ (8001650 <PWMInit+0x3c>)
 800162c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001630:	6013      	str	r3, [r2, #0]
	tim5 = &htim5;
 8001632:	4a08      	ldr	r2, [pc, #32]	@ (8001654 <PWMInit+0x40>)
 8001634:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 8001638:	6013      	str	r3, [r2, #0]
	tim8 = &htim8;
 800163a:	4a07      	ldr	r2, [pc, #28]	@ (8001658 <PWMInit+0x44>)
 800163c:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 8001640:	6013      	str	r3, [r2, #0]
		PWMS[i].frequency = 0;
		PWMS[i].period = 0;
		PWMS[i].subPeriod = 0;
	}
	*/
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc90      	pop	{r4, r7}
 8001648:	b004      	add	sp, #16
 800164a:	4770      	bx	lr
 800164c:	200007e4 	.word	0x200007e4
 8001650:	200007e8 	.word	0x200007e8
 8001654:	200007ec 	.word	0x200007ec
 8001658:	200007f0 	.word	0x200007f0

0800165c <calculateOutputPeriodToGetFrequency>:

int32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, int16_t desiredFrequency) {
 800165c:	b480      	push	{r7}
 800165e:	b085      	sub	sp, #20
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	460a      	mov	r2, r1
 8001666:	71fb      	strb	r3, [r7, #7]
 8001668:	4613      	mov	r3, r2
 800166a:	80bb      	strh	r3, [r7, #4]
	int32_t finalVal = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b02      	cmp	r3, #2
 8001674:	d03c      	beq.n	80016f0 <calculateOutputPeriodToGetFrequency+0x94>
 8001676:	2b02      	cmp	r3, #2
 8001678:	dc55      	bgt.n	8001726 <calculateOutputPeriodToGetFrequency+0xca>
 800167a:	2b00      	cmp	r3, #0
 800167c:	d002      	beq.n	8001684 <calculateOutputPeriodToGetFrequency+0x28>
 800167e:	2b01      	cmp	r3, #1
 8001680:	d01b      	beq.n	80016ba <calculateOutputPeriodToGetFrequency+0x5e>
 8001682:	e050      	b.n	8001726 <calculateOutputPeriodToGetFrequency+0xca>
	case 0:
		finalVal = (1/(desiredFrequency))/PWMPre;
 8001684:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001688:	461a      	mov	r2, r3
 800168a:	3201      	adds	r2, #1
 800168c:	2a02      	cmp	r2, #2
 800168e:	bf94      	ite	ls
 8001690:	2201      	movls	r2, #1
 8001692:	2200      	movhi	r2, #0
 8001694:	b2d2      	uxtb	r2, r2
 8001696:	b252      	sxtb	r2, r2
 8001698:	2a00      	cmp	r2, #0
 800169a:	bf14      	ite	ne
 800169c:	461b      	movne	r3, r3
 800169e:	2300      	moveq	r3, #0
 80016a0:	ee07 3a90 	vmov	s15, r3
 80016a4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016a8:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001734 <calculateOutputPeriodToGetFrequency+0xd8>
 80016ac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016b4:	ee17 3a90 	vmov	r3, s15
 80016b8:	60fb      	str	r3, [r7, #12]
	case 1:
		finalVal = (1/(desiredFrequency))/LEDPre;
 80016ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016be:	461a      	mov	r2, r3
 80016c0:	3201      	adds	r2, #1
 80016c2:	2a02      	cmp	r2, #2
 80016c4:	bf94      	ite	ls
 80016c6:	2201      	movls	r2, #1
 80016c8:	2200      	movhi	r2, #0
 80016ca:	b2d2      	uxtb	r2, r2
 80016cc:	b252      	sxtb	r2, r2
 80016ce:	2a00      	cmp	r2, #0
 80016d0:	bf14      	ite	ne
 80016d2:	461b      	movne	r3, r3
 80016d4:	2300      	moveq	r3, #0
 80016d6:	ee07 3a90 	vmov	s15, r3
 80016da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016de:	eddf 6a16 	vldr	s13, [pc, #88]	@ 8001738 <calculateOutputPeriodToGetFrequency+0xdc>
 80016e2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80016e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016ea:	ee17 3a90 	vmov	r3, s15
 80016ee:	60fb      	str	r3, [r7, #12]
	case 2:
		finalVal = (1/(desiredFrequency))/buzzerPre;
 80016f0:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80016f4:	461a      	mov	r2, r3
 80016f6:	3201      	adds	r2, #1
 80016f8:	2a02      	cmp	r2, #2
 80016fa:	bf94      	ite	ls
 80016fc:	2201      	movls	r2, #1
 80016fe:	2200      	movhi	r2, #0
 8001700:	b2d2      	uxtb	r2, r2
 8001702:	b252      	sxtb	r2, r2
 8001704:	2a00      	cmp	r2, #0
 8001706:	bf14      	ite	ne
 8001708:	461b      	movne	r3, r3
 800170a:	2300      	moveq	r3, #0
 800170c:	ee07 3a90 	vmov	s15, r3
 8001710:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001714:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001738 <calculateOutputPeriodToGetFrequency+0xdc>
 8001718:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800171c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001720:	ee17 3a90 	vmov	r3, s15
 8001724:	60fb      	str	r3, [r7, #12]
	default:
	}
	return finalVal;
 8001726:	68fb      	ldr	r3, [r7, #12]
}
 8001728:	4618      	mov	r0, r3
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	360637bd 	.word	0x360637bd
 8001738:	358637bd 	.word	0x358637bd

0800173c <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b084      	sub	sp, #16
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
 8001744:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = 500;// maxVal;// (uint32_t)val;
 8001748:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800174c:	60fb      	str	r3, [r7, #12]

	if (val1 > maxVal) {
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	429a      	cmp	r2, r3
 8001754:	d902      	bls.n	800175c <safeOutputPeriodValueCalculator+0x20>
		val1 = maxVal;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	60fb      	str	r3, [r7, #12]
 800175a:	e004      	b.n	8001766 <safeOutputPeriodValueCalculator+0x2a>
	} else if (val1 < 1) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <safeOutputPeriodValueCalculator+0x2a>
		val1 = 1;
 8001762:	2301      	movs	r3, #1
 8001764:	60fb      	str	r3, [r7, #12]
	}

	val1 = val1-1;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	3b01      	subs	r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
	usart_printf("%d\r\n",val1);
 800176c:	68f9      	ldr	r1, [r7, #12]
 800176e:	4804      	ldr	r0, [pc, #16]	@ (8001780 <safeOutputPeriodValueCalculator+0x44>)
 8001770:	f7fe fef6 	bl	8000560 <usart_printf>
	return val1;
 8001774:	68fb      	ldr	r3, [r7, #12]

}
 8001776:	4618      	mov	r0, r3
 8001778:	3710      	adds	r7, #16
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	0800a490 	.word	0x0800a490

08001784 <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	ed87 0a00 	vstr	s0, [r7]
 8001790:	71fb      	strb	r3, [r7, #7]
 8001792:	460b      	mov	r3, r1
 8001794:	71bb      	strb	r3, [r7, #6]
 8001796:	4613      	mov	r3, r2
 8001798:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 800179e:	79fb      	ldrb	r3, [r7, #7]
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d03c      	beq.n	800181e <calculateOutputPeriodValue+0x9a>
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	dc51      	bgt.n	800184c <calculateOutputPeriodValue+0xc8>
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d002      	beq.n	80017b2 <calculateOutputPeriodValue+0x2e>
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d01b      	beq.n	80017e8 <calculateOutputPeriodValue+0x64>
 80017b0:	e04c      	b.n	800184c <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d10a      	bne.n	80017ce <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 80017b8:	edd7 7a00 	vldr	s15, [r7]
 80017bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017c0:	ee17 2a90 	vmov	r2, s15
 80017c4:	2302      	movs	r3, #2
 80017c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ca:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// PWMS[position-1].period = returnVal;
			break;
 80017cc:	e03e      	b.n	800184c <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 80017ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017d2:	3b01      	subs	r3, #1
 80017d4:	4a20      	ldr	r2, [pc, #128]	@ (8001858 <calculateOutputPeriodValue+0xd4>)
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	ed97 0a00 	vldr	s0, [r7]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff ffac 	bl	800173c <safeOutputPeriodValueCalculator>
 80017e4:	60f8      	str	r0, [r7, #12]
			break;
 80017e6:	e031      	b.n	800184c <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 80017e8:	79bb      	ldrb	r3, [r7, #6]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d10a      	bne.n	8001804 <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 80017ee:	edd7 7a00 	vldr	s15, [r7]
 80017f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f6:	ee17 2a90 	vmov	r2, s15
 80017fa:	2301      	movs	r3, #1
 80017fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001800:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 8001802:	e023      	b.n	800184c <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 8001804:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001808:	3306      	adds	r3, #6
 800180a:	4a13      	ldr	r2, [pc, #76]	@ (8001858 <calculateOutputPeriodValue+0xd4>)
 800180c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001810:	ed97 0a00 	vldr	s0, [r7]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff91 	bl	800173c <safeOutputPeriodValueCalculator>
 800181a:	60f8      	str	r0, [r7, #12]
			break;
 800181c:	e016      	b.n	800184c <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 800181e:	79bb      	ldrb	r3, [r7, #6]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d10a      	bne.n	800183a <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8001824:	edd7 7a00 	vldr	s15, [r7]
 8001828:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182c:	ee17 2a90 	vmov	r2, s15
 8001830:	2301      	movs	r3, #1
 8001832:	fbb2 f3f3 	udiv	r3, r2, r3
 8001836:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			break;
 8001838:	e007      	b.n	800184a <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 800183a:	4b07      	ldr	r3, [pc, #28]	@ (8001858 <calculateOutputPeriodValue+0xd4>)
 800183c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800183e:	ed97 0a00 	vldr	s0, [r7]
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff7a 	bl	800173c <safeOutputPeriodValueCalculator>
 8001848:	60f8      	str	r0, [r7, #12]
			break;
 800184a:	bf00      	nop
		default:
	}
	return returnVal;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	2000082c 	.word	0x2000082c

0800185c <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	ed87 0a00 	vstr	s0, [r7]
 8001868:	71fb      	strb	r3, [r7, #7]
 800186a:	460b      	mov	r3, r1
 800186c:	71bb      	strb	r3, [r7, #6]
 800186e:	4613      	mov	r3, r2
 8001870:	717b      	strb	r3, [r7, #5]
	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 8001872:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8001876:	79b9      	ldrb	r1, [r7, #6]
 8001878:	79fb      	ldrb	r3, [r7, #7]
 800187a:	ed97 0a00 	vldr	s0, [r7]
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff80 	bl	8001784 <calculateOutputPeriodValue>
 8001884:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	2b02      	cmp	r3, #2
 800188a:	d076      	beq.n	800197a <PWMInitialize+0x11e>
 800188c:	2b02      	cmp	r3, #2
 800188e:	dc7d      	bgt.n	800198c <PWMInitialize+0x130>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <PWMInitialize+0x3e>
 8001894:	2b01      	cmp	r3, #1
 8001896:	d04a      	beq.n	800192e <PWMInitialize+0xd2>
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	default:
	}
}
 8001898:	e078      	b.n	800198c <PWMInitialize+0x130>
		switch (position) {
 800189a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800189e:	3b01      	subs	r3, #1
 80018a0:	2b06      	cmp	r3, #6
 80018a2:	d83b      	bhi.n	800191c <PWMInitialize+0xc0>
 80018a4:	a201      	add	r2, pc, #4	@ (adr r2, 80018ac <PWMInitialize+0x50>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	080018c9 	.word	0x080018c9
 80018b0:	080018d5 	.word	0x080018d5
 80018b4:	080018e1 	.word	0x080018e1
 80018b8:	080018ed 	.word	0x080018ed
 80018bc:	080018f9 	.word	0x080018f9
 80018c0:	08001905 	.word	0x08001905
 80018c4:	08001911 	.word	0x08001911
			(*tim1).Instance->CCR1=value;
 80018c8:	4b32      	ldr	r3, [pc, #200]	@ (8001994 <PWMInitialize+0x138>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 80018d2:	e024      	b.n	800191e <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	@ (8001994 <PWMInitialize+0x138>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	68fa      	ldr	r2, [r7, #12]
 80018dc:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 80018de:	e01e      	b.n	800191e <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 80018e0:	4b2c      	ldr	r3, [pc, #176]	@ (8001994 <PWMInitialize+0x138>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	68fa      	ldr	r2, [r7, #12]
 80018e8:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 80018ea:	e018      	b.n	800191e <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 80018ec:	4b29      	ldr	r3, [pc, #164]	@ (8001994 <PWMInitialize+0x138>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 80018f6:	e012      	b.n	800191e <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 80018f8:	4b27      	ldr	r3, [pc, #156]	@ (8001998 <PWMInitialize+0x13c>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001902:	e00c      	b.n	800191e <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 8001904:	4b24      	ldr	r3, [pc, #144]	@ (8001998 <PWMInitialize+0x13c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	68fa      	ldr	r2, [r7, #12]
 800190c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800190e:	e006      	b.n	800191e <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8001910:	4b21      	ldr	r3, [pc, #132]	@ (8001998 <PWMInitialize+0x13c>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	68fa      	ldr	r2, [r7, #12]
 8001918:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 800191a:	e000      	b.n	800191e <PWMInitialize+0xc2>
			break;
 800191c:	bf00      	nop
		subPeriod[position-1] = value;
 800191e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001922:	3b01      	subs	r3, #1
 8001924:	68fa      	ldr	r2, [r7, #12]
 8001926:	491d      	ldr	r1, [pc, #116]	@ (800199c <PWMInitialize+0x140>)
 8001928:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 800192c:	e02e      	b.n	800198c <PWMInitialize+0x130>
		switch (position) {
 800192e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001932:	2b03      	cmp	r3, #3
 8001934:	d012      	beq.n	800195c <PWMInitialize+0x100>
 8001936:	2b03      	cmp	r3, #3
 8001938:	dc16      	bgt.n	8001968 <PWMInitialize+0x10c>
 800193a:	2b01      	cmp	r3, #1
 800193c:	d002      	beq.n	8001944 <PWMInitialize+0xe8>
 800193e:	2b02      	cmp	r3, #2
 8001940:	d006      	beq.n	8001950 <PWMInitialize+0xf4>
			break;
 8001942:	e011      	b.n	8001968 <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8001944:	4b16      	ldr	r3, [pc, #88]	@ (80019a0 <PWMInitialize+0x144>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	68fa      	ldr	r2, [r7, #12]
 800194c:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 800194e:	e00c      	b.n	800196a <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8001950:	4b13      	ldr	r3, [pc, #76]	@ (80019a0 <PWMInitialize+0x144>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 800195a:	e006      	b.n	800196a <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 800195c:	4b10      	ldr	r3, [pc, #64]	@ (80019a0 <PWMInitialize+0x144>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	68fa      	ldr	r2, [r7, #12]
 8001964:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001966:	e000      	b.n	800196a <PWMInitialize+0x10e>
			break;
 8001968:	bf00      	nop
		subPeriod[position+6] = value;
 800196a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800196e:	3306      	adds	r3, #6
 8001970:	68fa      	ldr	r2, [r7, #12]
 8001972:	490a      	ldr	r1, [pc, #40]	@ (800199c <PWMInitialize+0x140>)
 8001974:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001978:	e008      	b.n	800198c <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 800197a:	4b0a      	ldr	r3, [pc, #40]	@ (80019a4 <PWMInitialize+0x148>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	68fa      	ldr	r2, [r7, #12]
 8001982:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <PWMInitialize+0x140>)
 8001988:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 800198a:	bf00      	nop
}
 800198c:	bf00      	nop
 800198e:	3710      	adds	r7, #16
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	200007e4 	.word	0x200007e4
 8001998:	200007f0 	.word	0x200007f0
 800199c:	20000800 	.word	0x20000800
 80019a0:	200007ec 	.word	0x200007ec
 80019a4:	200007e8 	.word	0x200007e8

080019a8 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency) {
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	4603      	mov	r3, r0
 80019b0:	71fb      	strb	r3, [r7, #7]
 80019b2:	460b      	mov	r3, r1
 80019b4:	71bb      	strb	r3, [r7, #6]
 80019b6:	4613      	mov	r3, r2
 80019b8:	80bb      	strh	r3, [r7, #4]
	int32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 80019ba:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 80019be:	79fb      	ldrb	r3, [r7, #7]
 80019c0:	4611      	mov	r1, r2
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7ff fe4a 	bl	800165c <calculateOutputPeriodToGetFrequency>
 80019c8:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 80019ca:	79fb      	ldrb	r3, [r7, #7]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d02c      	beq.n	8001a2a <initializePeriod+0x82>
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	dc32      	bgt.n	8001a3a <initializePeriod+0x92>
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d002      	beq.n	80019de <initializePeriod+0x36>
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d01a      	beq.n	8001a12 <initializePeriod+0x6a>
	case 2:
		(*tim4).Init.Period = calculatedPeriod-1;
		period[10] = calculatedPeriod;
	default:
	}
}
 80019dc:	e02d      	b.n	8001a3a <initializePeriod+0x92>
		if (Position < 5 && Position > 0) {
 80019de:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	dc09      	bgt.n	80019fa <initializePeriod+0x52>
 80019e6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	dd05      	ble.n	80019fa <initializePeriod+0x52>
			(*tim1).Init.Period = calculatedPeriod-1;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	1e5a      	subs	r2, r3, #1
 80019f2:	4b14      	ldr	r3, [pc, #80]	@ (8001a44 <initializePeriod+0x9c>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60da      	str	r2, [r3, #12]
 80019f8:	e004      	b.n	8001a04 <initializePeriod+0x5c>
			(*tim8).Init.Period = calculatedPeriod-1;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	1e5a      	subs	r2, r3, #1
 80019fe:	4b12      	ldr	r3, [pc, #72]	@ (8001a48 <initializePeriod+0xa0>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	60da      	str	r2, [r3, #12]
		period[Position-1] = calculatedPeriod;
 8001a04:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a08:	3b01      	subs	r3, #1
 8001a0a:	4910      	ldr	r1, [pc, #64]	@ (8001a4c <initializePeriod+0xa4>)
 8001a0c:	68fa      	ldr	r2, [r7, #12]
 8001a0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		(*tim5).Init.Period = calculatedPeriod-1;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1e5a      	subs	r2, r3, #1
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <initializePeriod+0xa8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	60da      	str	r2, [r3, #12]
		period[Position+6] = calculatedPeriod;
 8001a1c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a20:	3306      	adds	r3, #6
 8001a22:	490a      	ldr	r1, [pc, #40]	@ (8001a4c <initializePeriod+0xa4>)
 8001a24:	68fa      	ldr	r2, [r7, #12]
 8001a26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		(*tim4).Init.Period = calculatedPeriod-1;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	4b09      	ldr	r3, [pc, #36]	@ (8001a54 <initializePeriod+0xac>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	60da      	str	r2, [r3, #12]
		period[10] = calculatedPeriod;
 8001a34:	4a05      	ldr	r2, [pc, #20]	@ (8001a4c <initializePeriod+0xa4>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6293      	str	r3, [r2, #40]	@ 0x28
}
 8001a3a:	bf00      	nop
 8001a3c:	3710      	adds	r7, #16
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	200007e4 	.word	0x200007e4
 8001a48:	200007f0 	.word	0x200007f0
 8001a4c:	2000082c 	.word	0x2000082c
 8001a50:	200007ec 	.word	0x200007ec
 8001a54:	200007e8 	.word	0x200007e8

08001a58 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	71fb      	strb	r3, [r7, #7]
 8001a62:	460b      	mov	r3, r1
 8001a64:	71bb      	strb	r3, [r7, #6]
 8001a66:	4613      	mov	r3, r2
 8001a68:	80bb      	strh	r3, [r7, #4]

	initializePeriod(Type, Position, desiredFrequency);
 8001a6a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001a6e:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7ff ff97 	bl	80019a8 <initializePeriod>


	switch (Type) {
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	2b02      	cmp	r3, #2
 8001a7e:	d012      	beq.n	8001aa6 <PWMOutput+0x4e>
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	dc13      	bgt.n	8001aac <PWMOutput+0x54>
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <PWMOutput+0x36>
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d006      	beq.n	8001a9a <PWMOutput+0x42>
		whichPWMisOn[Position+6] = 1;
	case 2:

		whichPWMisOn[10] = 1;
	default:
		break;
 8001a8c:	e00e      	b.n	8001aac <PWMOutput+0x54>
		whichPWMisOn[Position-1] = 1;
 8001a8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a92:	3b01      	subs	r3, #1
 8001a94:	4a08      	ldr	r2, [pc, #32]	@ (8001ab8 <PWMOutput+0x60>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	54d1      	strb	r1, [r2, r3]
		whichPWMisOn[Position+6] = 1;
 8001a9a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001a9e:	3306      	adds	r3, #6
 8001aa0:	4a05      	ldr	r2, [pc, #20]	@ (8001ab8 <PWMOutput+0x60>)
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	54d1      	strb	r1, [r2, r3]
		whichPWMisOn[10] = 1;
 8001aa6:	4b04      	ldr	r3, [pc, #16]	@ (8001ab8 <PWMOutput+0x60>)
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	729a      	strb	r2, [r3, #10]
		break;
 8001aac:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
}
 8001aae:	bf00      	nop
 8001ab0:	3708      	adds	r7, #8
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	200007f4 	.word	0x200007f4

08001abc <PWMTimerStarter>:



void PWMTimerStarter() {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	e107      	b.n	8001cd8 <PWMTimerStarter+0x21c>
		switch (i) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b0a      	cmp	r3, #10
 8001acc:	f200 8101 	bhi.w	8001cd2 <PWMTimerStarter+0x216>
 8001ad0:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad8 <PWMTimerStarter+0x1c>)
 8001ad2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad6:	bf00      	nop
 8001ad8:	08001b05 	.word	0x08001b05
 8001adc:	08001b2f 	.word	0x08001b2f
 8001ae0:	08001b59 	.word	0x08001b59
 8001ae4:	08001b83 	.word	0x08001b83
 8001ae8:	08001bad 	.word	0x08001bad
 8001aec:	08001bd7 	.word	0x08001bd7
 8001af0:	08001c01 	.word	0x08001c01
 8001af4:	08001c2b 	.word	0x08001c2b
 8001af8:	08001c55 	.word	0x08001c55
 8001afc:	08001c7f 	.word	0x08001c7f
 8001b00:	08001ca9 	.word	0x08001ca9
		case 0:
			if (whichPWMisOn[i] == 1) {
 8001b04:	4a79      	ldr	r2, [pc, #484]	@ (8001cec <PWMTimerStarter+0x230>)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f993 3000 	ldrsb.w	r3, [r3]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d106      	bne.n	8001b20 <PWMTimerStarter+0x64>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8001b12:	4b77      	ldr	r3, [pc, #476]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f003 f901 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8001b1e:	e0d8      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8001b20:	4b73      	ldr	r3, [pc, #460]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2100      	movs	r1, #0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f003 f9c2 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001b2c:	e0d1      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 1:
			if (whichPWMisOn[i] == 1) {
 8001b2e:	4a6f      	ldr	r2, [pc, #444]	@ (8001cec <PWMTimerStarter+0x230>)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	4413      	add	r3, r2
 8001b34:	f993 3000 	ldrsb.w	r3, [r3]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d106      	bne.n	8001b4a <PWMTimerStarter+0x8e>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8001b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	2104      	movs	r1, #4
 8001b42:	4618      	mov	r0, r3
 8001b44:	f003 f8ec 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8001b48:	e0c3      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8001b4a:	4b69      	ldr	r3, [pc, #420]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	2104      	movs	r1, #4
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 f9ad 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001b56:	e0bc      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 2:
			if (whichPWMisOn[i] == 1) {
 8001b58:	4a64      	ldr	r2, [pc, #400]	@ (8001cec <PWMTimerStarter+0x230>)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4413      	add	r3, r2
 8001b5e:	f993 3000 	ldrsb.w	r3, [r3]
 8001b62:	2b01      	cmp	r3, #1
 8001b64:	d106      	bne.n	8001b74 <PWMTimerStarter+0xb8>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8001b66:	4b62      	ldr	r3, [pc, #392]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	2108      	movs	r1, #8
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f003 f8d7 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8001b72:	e0ae      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8001b74:	4b5e      	ldr	r3, [pc, #376]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	2108      	movs	r1, #8
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f003 f998 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001b80:	e0a7      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 3:
			if (whichPWMisOn[i] == 1) {
 8001b82:	4a5a      	ldr	r2, [pc, #360]	@ (8001cec <PWMTimerStarter+0x230>)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4413      	add	r3, r2
 8001b88:	f993 3000 	ldrsb.w	r3, [r3]
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d106      	bne.n	8001b9e <PWMTimerStarter+0xe2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8001b90:	4b57      	ldr	r3, [pc, #348]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	210c      	movs	r1, #12
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 f8c2 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8001b9c:	e099      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8001b9e:	4b54      	ldr	r3, [pc, #336]	@ (8001cf0 <PWMTimerStarter+0x234>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	210c      	movs	r1, #12
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	f003 f983 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001baa:	e092      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 4:
			if (whichPWMisOn[i] == 1) {
 8001bac:	4a4f      	ldr	r2, [pc, #316]	@ (8001cec <PWMTimerStarter+0x230>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	f993 3000 	ldrsb.w	r3, [r3]
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d106      	bne.n	8001bc8 <PWMTimerStarter+0x10c>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8001bba:	4b4e      	ldr	r3, [pc, #312]	@ (8001cf4 <PWMTimerStarter+0x238>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f003 f8ad 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8001bc6:	e084      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8001bc8:	4b4a      	ldr	r3, [pc, #296]	@ (8001cf4 <PWMTimerStarter+0x238>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2100      	movs	r1, #0
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 f96e 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001bd4:	e07d      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 5:
			if (whichPWMisOn[i] == 1) {
 8001bd6:	4a45      	ldr	r2, [pc, #276]	@ (8001cec <PWMTimerStarter+0x230>)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	4413      	add	r3, r2
 8001bdc:	f993 3000 	ldrsb.w	r3, [r3]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d106      	bne.n	8001bf2 <PWMTimerStarter+0x136>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8001be4:	4b43      	ldr	r3, [pc, #268]	@ (8001cf4 <PWMTimerStarter+0x238>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2104      	movs	r1, #4
 8001bea:	4618      	mov	r0, r3
 8001bec:	f003 f898 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8001bf0:	e06f      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8001bf2:	4b40      	ldr	r3, [pc, #256]	@ (8001cf4 <PWMTimerStarter+0x238>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	2104      	movs	r1, #4
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f003 f959 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001bfe:	e068      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 6:
			if (whichPWMisOn[i] == 1) {
 8001c00:	4a3a      	ldr	r2, [pc, #232]	@ (8001cec <PWMTimerStarter+0x230>)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4413      	add	r3, r2
 8001c06:	f993 3000 	ldrsb.w	r3, [r3]
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d106      	bne.n	8001c1c <PWMTimerStarter+0x160>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8001c0e:	4b39      	ldr	r3, [pc, #228]	@ (8001cf4 <PWMTimerStarter+0x238>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	2108      	movs	r1, #8
 8001c14:	4618      	mov	r0, r3
 8001c16:	f003 f883 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8001c1a:	e05a      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8001c1c:	4b35      	ldr	r3, [pc, #212]	@ (8001cf4 <PWMTimerStarter+0x238>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2108      	movs	r1, #8
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f944 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001c28:	e053      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 7:
			if (whichPWMisOn[i] == 1) {
 8001c2a:	4a30      	ldr	r2, [pc, #192]	@ (8001cec <PWMTimerStarter+0x230>)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	4413      	add	r3, r2
 8001c30:	f993 3000 	ldrsb.w	r3, [r3]
 8001c34:	2b01      	cmp	r3, #1
 8001c36:	d106      	bne.n	8001c46 <PWMTimerStarter+0x18a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8001c38:	4b2f      	ldr	r3, [pc, #188]	@ (8001cf8 <PWMTimerStarter+0x23c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2100      	movs	r1, #0
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f003 f86e 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8001c44:	e045      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8001c46:	4b2c      	ldr	r3, [pc, #176]	@ (8001cf8 <PWMTimerStarter+0x23c>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f003 f92f 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001c52:	e03e      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 8:
			if (whichPWMisOn[i] == 1) {
 8001c54:	4a25      	ldr	r2, [pc, #148]	@ (8001cec <PWMTimerStarter+0x230>)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4413      	add	r3, r2
 8001c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d106      	bne.n	8001c70 <PWMTimerStarter+0x1b4>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8001c62:	4b25      	ldr	r3, [pc, #148]	@ (8001cf8 <PWMTimerStarter+0x23c>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	2104      	movs	r1, #4
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f003 f859 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
			}
			break;
 8001c6e:	e030      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8001c70:	4b21      	ldr	r3, [pc, #132]	@ (8001cf8 <PWMTimerStarter+0x23c>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2104      	movs	r1, #4
 8001c76:	4618      	mov	r0, r3
 8001c78:	f003 f91a 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001c7c:	e029      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 9:
			if (whichPWMisOn[i] == 1) {
 8001c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cec <PWMTimerStarter+0x230>)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4413      	add	r3, r2
 8001c84:	f993 3000 	ldrsb.w	r3, [r3]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d106      	bne.n	8001c9a <PWMTimerStarter+0x1de>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8001c8c:	4b1a      	ldr	r3, [pc, #104]	@ (8001cf8 <PWMTimerStarter+0x23c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2108      	movs	r1, #8
 8001c92:	4618      	mov	r0, r3
 8001c94:	f003 f844 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			break;
 8001c98:	e01b      	b.n	8001cd2 <PWMTimerStarter+0x216>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8001c9a:	4b17      	ldr	r3, [pc, #92]	@ (8001cf8 <PWMTimerStarter+0x23c>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	2108      	movs	r1, #8
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f003 f905 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001ca6:	e014      	b.n	8001cd2 <PWMTimerStarter+0x216>
		case 10:
			if (whichPWMisOn[i] == 1) {
 8001ca8:	4a10      	ldr	r2, [pc, #64]	@ (8001cec <PWMTimerStarter+0x230>)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4413      	add	r3, r2
 8001cae:	f993 3000 	ldrsb.w	r3, [r3]
 8001cb2:	2b01      	cmp	r3, #1
 8001cb4:	d106      	bne.n	8001cc4 <PWMTimerStarter+0x208>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8001cb6:	4b11      	ldr	r3, [pc, #68]	@ (8001cfc <PWMTimerStarter+0x240>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2108      	movs	r1, #8
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f003 f82f 	bl	8004d20 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			break;
 8001cc2:	e005      	b.n	8001cd0 <PWMTimerStarter+0x214>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8001cc4:	4b0d      	ldr	r3, [pc, #52]	@ (8001cfc <PWMTimerStarter+0x240>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	2108      	movs	r1, #8
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 f8f0 	bl	8004eb0 <HAL_TIM_PWM_Stop>
			break;
 8001cd0:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b0a      	cmp	r3, #10
 8001cdc:	f77f aef4 	ble.w	8001ac8 <PWMTimerStarter+0xc>
		}
	}
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	200007f4 	.word	0x200007f4
 8001cf0:	200007e4 	.word	0x200007e4
 8001cf4:	200007f0 	.word	0x200007f0
 8001cf8:	200007ec 	.word	0x200007ec
 8001cfc:	200007e8 	.word	0x200007e8

08001d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	607b      	str	r3, [r7, #4]
 8001d0a:	4b12      	ldr	r3, [pc, #72]	@ (8001d54 <HAL_MspInit+0x54>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d0e:	4a11      	ldr	r2, [pc, #68]	@ (8001d54 <HAL_MspInit+0x54>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d16:	4b0f      	ldr	r3, [pc, #60]	@ (8001d54 <HAL_MspInit+0x54>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d22:	2300      	movs	r3, #0
 8001d24:	603b      	str	r3, [r7, #0]
 8001d26:	4b0b      	ldr	r3, [pc, #44]	@ (8001d54 <HAL_MspInit+0x54>)
 8001d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001d54 <HAL_MspInit+0x54>)
 8001d2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d32:	4b08      	ldr	r3, [pc, #32]	@ (8001d54 <HAL_MspInit+0x54>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d3a:	603b      	str	r3, [r7, #0]
 8001d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	210f      	movs	r1, #15
 8001d42:	f06f 0001 	mvn.w	r0, #1
 8001d46:	f001 fa84 	bl	8003252 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40023800 	.word	0x40023800

08001d58 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08c      	sub	sp, #48	@ 0x30
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 031c 	add.w	r3, r7, #28
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea0 <HAL_CAN_MspInit+0x148>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d13d      	bne.n	8001df6 <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001d7a:	4b4a      	ldr	r3, [pc, #296]	@ (8001ea4 <HAL_CAN_MspInit+0x14c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	4a48      	ldr	r2, [pc, #288]	@ (8001ea4 <HAL_CAN_MspInit+0x14c>)
 8001d82:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001d84:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <HAL_CAN_MspInit+0x14c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d10d      	bne.n	8001da8 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61bb      	str	r3, [r7, #24]
 8001d90:	4b45      	ldr	r3, [pc, #276]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001d92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d94:	4a44      	ldr	r2, [pc, #272]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001d96:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d9a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d9c:	4b42      	ldr	r3, [pc, #264]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da4:	61bb      	str	r3, [r7, #24]
 8001da6:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001da8:	2300      	movs	r3, #0
 8001daa:	617b      	str	r3, [r7, #20]
 8001dac:	4b3e      	ldr	r3, [pc, #248]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001dae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db0:	4a3d      	ldr	r2, [pc, #244]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001db2:	f043 0308 	orr.w	r3, r3, #8
 8001db6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	617b      	str	r3, [r7, #20]
 8001dc2:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc8:	2302      	movs	r3, #2
 8001dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dd0:	2303      	movs	r3, #3
 8001dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001dd4:	2309      	movs	r3, #9
 8001dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dd8:	f107 031c 	add.w	r3, r7, #28
 8001ddc:	4619      	mov	r1, r3
 8001dde:	4833      	ldr	r0, [pc, #204]	@ (8001eac <HAL_CAN_MspInit+0x154>)
 8001de0:	f001 fe70 	bl	8003ac4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001de4:	2200      	movs	r2, #0
 8001de6:	2105      	movs	r1, #5
 8001de8:	2014      	movs	r0, #20
 8001dea:	f001 fa32 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001dee:	2014      	movs	r0, #20
 8001df0:	f001 fa4b 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001df4:	e04f      	b.n	8001e96 <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a2d      	ldr	r2, [pc, #180]	@ (8001eb0 <HAL_CAN_MspInit+0x158>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d14a      	bne.n	8001e96 <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001e00:	2300      	movs	r3, #0
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	4b28      	ldr	r3, [pc, #160]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e08:	4a27      	ldr	r2, [pc, #156]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e0a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e0e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e10:	4b25      	ldr	r3, [pc, #148]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e14:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e18:	613b      	str	r3, [r7, #16]
 8001e1a:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001e1c:	4b21      	ldr	r3, [pc, #132]	@ (8001ea4 <HAL_CAN_MspInit+0x14c>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	3301      	adds	r3, #1
 8001e22:	4a20      	ldr	r2, [pc, #128]	@ (8001ea4 <HAL_CAN_MspInit+0x14c>)
 8001e24:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001e26:	4b1f      	ldr	r3, [pc, #124]	@ (8001ea4 <HAL_CAN_MspInit+0x14c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d10d      	bne.n	8001e4a <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e36:	4a1c      	ldr	r2, [pc, #112]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e38:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e3e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e46:	60fb      	str	r3, [r7, #12]
 8001e48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	60bb      	str	r3, [r7, #8]
 8001e4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a15      	ldr	r2, [pc, #84]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e54:	f043 0302 	orr.w	r3, r3, #2
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b13      	ldr	r3, [pc, #76]	@ (8001ea8 <HAL_CAN_MspInit+0x150>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	60bb      	str	r3, [r7, #8]
 8001e64:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e66:	2360      	movs	r3, #96	@ 0x60
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001e76:	2309      	movs	r3, #9
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	480c      	ldr	r0, [pc, #48]	@ (8001eb4 <HAL_CAN_MspInit+0x15c>)
 8001e82:	f001 fe1f 	bl	8003ac4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001e86:	2200      	movs	r2, #0
 8001e88:	2105      	movs	r1, #5
 8001e8a:	2040      	movs	r0, #64	@ 0x40
 8001e8c:	f001 f9e1 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001e90:	2040      	movs	r0, #64	@ 0x40
 8001e92:	f001 f9fa 	bl	800328a <HAL_NVIC_EnableIRQ>
}
 8001e96:	bf00      	nop
 8001e98:	3730      	adds	r7, #48	@ 0x30
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	40006400 	.word	0x40006400
 8001ea4:	20000858 	.word	0x20000858
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40020c00 	.word	0x40020c00
 8001eb0:	40006800 	.word	0x40006800
 8001eb4:	40020400 	.word	0x40020400

08001eb8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	@ 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a29      	ldr	r2, [pc, #164]	@ (8001f7c <HAL_I2C_MspInit+0xc4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d14b      	bne.n	8001f72 <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b28      	ldr	r3, [pc, #160]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	4a27      	ldr	r2, [pc, #156]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001ee4:	f043 0304 	orr.w	r3, r3, #4
 8001ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eea:	4b25      	ldr	r3, [pc, #148]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eee:	f003 0304 	and.w	r3, r3, #4
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001efe:	4a20      	ldr	r2, [pc, #128]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f00:	f043 0301 	orr.w	r3, r3, #1
 8001f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f06:	4b1e      	ldr	r3, [pc, #120]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0a:	f003 0301 	and.w	r3, r3, #1
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001f12:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001f16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f18:	2312      	movs	r3, #18
 8001f1a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f20:	2303      	movs	r3, #3
 8001f22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f24:	2304      	movs	r3, #4
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f28:	f107 0314 	add.w	r3, r7, #20
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4815      	ldr	r0, [pc, #84]	@ (8001f84 <HAL_I2C_MspInit+0xcc>)
 8001f30:	f001 fdc8 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f34:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3a:	2312      	movs	r3, #18
 8001f3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f42:	2303      	movs	r3, #3
 8001f44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001f46:	2304      	movs	r3, #4
 8001f48:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f4a:	f107 0314 	add.w	r3, r7, #20
 8001f4e:	4619      	mov	r1, r3
 8001f50:	480d      	ldr	r0, [pc, #52]	@ (8001f88 <HAL_I2C_MspInit+0xd0>)
 8001f52:	f001 fdb7 	bl	8003ac4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001f56:	2300      	movs	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
 8001f5a:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5e:	4a08      	ldr	r2, [pc, #32]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f60:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001f64:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f66:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_I2C_MspInit+0xc8>)
 8001f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f6a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	@ 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	40005c00 	.word	0x40005c00
 8001f80:	40023800 	.word	0x40023800
 8001f84:	40020800 	.word	0x40020800
 8001f88:	40020000 	.word	0x40020000

08001f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	b08a      	sub	sp, #40	@ 0x28
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a28      	ldr	r2, [pc, #160]	@ (800204c <HAL_SPI_MspInit+0xc0>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d149      	bne.n	8002042 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	4b27      	ldr	r3, [pc, #156]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb6:	4a26      	ldr	r2, [pc, #152]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001fb8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fbe:	4b24      	ldr	r3, [pc, #144]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fc2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60fb      	str	r3, [r7, #12]
 8001fce:	4b20      	ldr	r3, [pc, #128]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fd2:	4a1f      	ldr	r2, [pc, #124]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001fd4:	f043 0302 	orr.w	r3, r3, #2
 8001fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fda:	4b1d      	ldr	r3, [pc, #116]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	f003 0302 	and.w	r3, r3, #2
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60bb      	str	r3, [r7, #8]
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fee:	4a18      	ldr	r2, [pc, #96]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ff6:	4b16      	ldr	r3, [pc, #88]	@ (8002050 <HAL_SPI_MspInit+0xc4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8002002:	2318      	movs	r3, #24
 8002004:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002006:	2302      	movs	r3, #2
 8002008:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800200e:	2303      	movs	r3, #3
 8002010:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002012:	2305      	movs	r3, #5
 8002014:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002016:	f107 0314 	add.w	r3, r7, #20
 800201a:	4619      	mov	r1, r3
 800201c:	480d      	ldr	r0, [pc, #52]	@ (8002054 <HAL_SPI_MspInit+0xc8>)
 800201e:	f001 fd51 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002022:	2380      	movs	r3, #128	@ 0x80
 8002024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002026:	2302      	movs	r3, #2
 8002028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800202a:	2300      	movs	r3, #0
 800202c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800202e:	2303      	movs	r3, #3
 8002030:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002032:	2305      	movs	r3, #5
 8002034:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002036:	f107 0314 	add.w	r3, r7, #20
 800203a:	4619      	mov	r1, r3
 800203c:	4806      	ldr	r0, [pc, #24]	@ (8002058 <HAL_SPI_MspInit+0xcc>)
 800203e:	f001 fd41 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002042:	bf00      	nop
 8002044:	3728      	adds	r7, #40	@ 0x28
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	40013000 	.word	0x40013000
 8002050:	40023800 	.word	0x40023800
 8002054:	40020400 	.word	0x40020400
 8002058:	40020000 	.word	0x40020000

0800205c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800205c:	b480      	push	{r7}
 800205e:	b087      	sub	sp, #28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a1f      	ldr	r2, [pc, #124]	@ (80020e8 <HAL_TIM_PWM_MspInit+0x8c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d10e      	bne.n	800208c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
 8002072:	4b1e      	ldr	r3, [pc, #120]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	4a1d      	ldr	r2, [pc, #116]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	6453      	str	r3, [r2, #68]	@ 0x44
 800207e:	4b1b      	ldr	r3, [pc, #108]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 8002080:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800208a:	e026      	b.n	80020da <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a17      	ldr	r2, [pc, #92]	@ (80020f0 <HAL_TIM_PWM_MspInit+0x94>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10e      	bne.n	80020b4 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002096:	2300      	movs	r3, #0
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	4b14      	ldr	r3, [pc, #80]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 800209c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209e:	4a13      	ldr	r2, [pc, #76]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 80020a0:	f043 0308 	orr.w	r3, r3, #8
 80020a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80020a6:	4b11      	ldr	r3, [pc, #68]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 80020a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020aa:	f003 0308 	and.w	r3, r3, #8
 80020ae:	613b      	str	r3, [r7, #16]
 80020b0:	693b      	ldr	r3, [r7, #16]
}
 80020b2:	e012      	b.n	80020da <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0e      	ldr	r2, [pc, #56]	@ (80020f4 <HAL_TIM_PWM_MspInit+0x98>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d10d      	bne.n	80020da <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	60fb      	str	r3, [r7, #12]
 80020c2:	4b0a      	ldr	r3, [pc, #40]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020c6:	4a09      	ldr	r2, [pc, #36]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 80020c8:	f043 0302 	orr.w	r3, r3, #2
 80020cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020ce:	4b07      	ldr	r3, [pc, #28]	@ (80020ec <HAL_TIM_PWM_MspInit+0x90>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020d2:	f003 0302 	and.w	r3, r3, #2
 80020d6:	60fb      	str	r3, [r7, #12]
 80020d8:	68fb      	ldr	r3, [r7, #12]
}
 80020da:	bf00      	nop
 80020dc:	371c      	adds	r7, #28
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40010000 	.word	0x40010000
 80020ec:	40023800 	.word	0x40023800
 80020f0:	40000c00 	.word	0x40000c00
 80020f4:	40010400 	.word	0x40010400

080020f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020f8:	b480      	push	{r7}
 80020fa:	b085      	sub	sp, #20
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a15      	ldr	r2, [pc, #84]	@ (800215c <HAL_TIM_Base_MspInit+0x64>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d10e      	bne.n	8002128 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60fb      	str	r3, [r7, #12]
 800210e:	4b14      	ldr	r3, [pc, #80]	@ (8002160 <HAL_TIM_Base_MspInit+0x68>)
 8002110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002112:	4a13      	ldr	r2, [pc, #76]	@ (8002160 <HAL_TIM_Base_MspInit+0x68>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6413      	str	r3, [r2, #64]	@ 0x40
 800211a:	4b11      	ldr	r3, [pc, #68]	@ (8002160 <HAL_TIM_Base_MspInit+0x68>)
 800211c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002126:	e012      	b.n	800214e <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a0d      	ldr	r2, [pc, #52]	@ (8002164 <HAL_TIM_Base_MspInit+0x6c>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d10d      	bne.n	800214e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	60bb      	str	r3, [r7, #8]
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_TIM_Base_MspInit+0x68>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	4a09      	ldr	r2, [pc, #36]	@ (8002160 <HAL_TIM_Base_MspInit+0x68>)
 800213c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002140:	6453      	str	r3, [r2, #68]	@ 0x44
 8002142:	4b07      	ldr	r3, [pc, #28]	@ (8002160 <HAL_TIM_Base_MspInit+0x68>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002146:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800214a:	60bb      	str	r3, [r7, #8]
 800214c:	68bb      	ldr	r3, [r7, #8]
}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
 800215a:	bf00      	nop
 800215c:	40000800 	.word	0x40000800
 8002160:	40023800 	.word	0x40023800
 8002164:	40014400 	.word	0x40014400

08002168 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b08e      	sub	sp, #56	@ 0x38
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
 800217a:	609a      	str	r2, [r3, #8]
 800217c:	60da      	str	r2, [r3, #12]
 800217e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a6a      	ldr	r2, [pc, #424]	@ (8002330 <HAL_TIM_MspPostInit+0x1c8>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d11f      	bne.n	80021ca <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	623b      	str	r3, [r7, #32]
 800218e:	4b69      	ldr	r3, [pc, #420]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 8002190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002192:	4a68      	ldr	r2, [pc, #416]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 8002194:	f043 0310 	orr.w	r3, r3, #16
 8002198:	6313      	str	r3, [r2, #48]	@ 0x30
 800219a:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 800219c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219e:	f003 0310 	and.w	r3, r3, #16
 80021a2:	623b      	str	r3, [r7, #32]
 80021a4:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80021a6:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80021aa:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ac:	2302      	movs	r3, #2
 80021ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b0:	2300      	movs	r3, #0
 80021b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b4:	2300      	movs	r3, #0
 80021b6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80021b8:	2301      	movs	r3, #1
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c0:	4619      	mov	r1, r3
 80021c2:	485d      	ldr	r0, [pc, #372]	@ (8002338 <HAL_TIM_MspPostInit+0x1d0>)
 80021c4:	f001 fc7e 	bl	8003ac4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80021c8:	e0ae      	b.n	8002328 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a5b      	ldr	r2, [pc, #364]	@ (800233c <HAL_TIM_MspPostInit+0x1d4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d11f      	bne.n	8002214 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80021d4:	2300      	movs	r3, #0
 80021d6:	61fb      	str	r3, [r7, #28]
 80021d8:	4b56      	ldr	r3, [pc, #344]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 80021da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021dc:	4a55      	ldr	r2, [pc, #340]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 80021de:	f043 0308 	orr.w	r3, r3, #8
 80021e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 80021e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021e8:	f003 0308 	and.w	r3, r3, #8
 80021ec:	61fb      	str	r3, [r7, #28]
 80021ee:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021f0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	2302      	movs	r3, #2
 80021f8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fe:	2300      	movs	r3, #0
 8002200:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002202:	2302      	movs	r3, #2
 8002204:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002206:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800220a:	4619      	mov	r1, r3
 800220c:	484c      	ldr	r0, [pc, #304]	@ (8002340 <HAL_TIM_MspPostInit+0x1d8>)
 800220e:	f001 fc59 	bl	8003ac4 <HAL_GPIO_Init>
}
 8002212:	e089      	b.n	8002328 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a4a      	ldr	r2, [pc, #296]	@ (8002344 <HAL_TIM_MspPostInit+0x1dc>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d11f      	bne.n	800225e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	4b44      	ldr	r3, [pc, #272]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a43      	ldr	r2, [pc, #268]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 8002228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b41      	ldr	r3, [pc, #260]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800223a:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800223e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002240:	2302      	movs	r3, #2
 8002242:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002248:	2300      	movs	r3, #0
 800224a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800224c:	2302      	movs	r3, #2
 800224e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002250:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002254:	4619      	mov	r1, r3
 8002256:	483c      	ldr	r0, [pc, #240]	@ (8002348 <HAL_TIM_MspPostInit+0x1e0>)
 8002258:	f001 fc34 	bl	8003ac4 <HAL_GPIO_Init>
}
 800225c:	e064      	b.n	8002328 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a3a      	ldr	r2, [pc, #232]	@ (800234c <HAL_TIM_MspPostInit+0x1e4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d13c      	bne.n	80022e2 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	617b      	str	r3, [r7, #20]
 800226c:	4b31      	ldr	r3, [pc, #196]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 800226e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002270:	4a30      	ldr	r2, [pc, #192]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 8002272:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002276:	6313      	str	r3, [r2, #48]	@ 0x30
 8002278:	4b2e      	ldr	r3, [pc, #184]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 800227a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002280:	617b      	str	r3, [r7, #20]
 8002282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002284:	2300      	movs	r3, #0
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	4b2a      	ldr	r3, [pc, #168]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 800228a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800228c:	4a29      	ldr	r2, [pc, #164]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 800228e:	f043 0304 	orr.w	r3, r3, #4
 8002292:	6313      	str	r3, [r2, #48]	@ 0x30
 8002294:	4b27      	ldr	r3, [pc, #156]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 8002296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002298:	f003 0304 	and.w	r3, r3, #4
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80022a0:	23c0      	movs	r3, #192	@ 0xc0
 80022a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a4:	2302      	movs	r3, #2
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a8:	2300      	movs	r3, #0
 80022aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ac:	2300      	movs	r3, #0
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022b0:	2303      	movs	r3, #3
 80022b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80022b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022b8:	4619      	mov	r1, r3
 80022ba:	4825      	ldr	r0, [pc, #148]	@ (8002350 <HAL_TIM_MspPostInit+0x1e8>)
 80022bc:	f001 fc02 	bl	8003ac4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022c0:	2340      	movs	r3, #64	@ 0x40
 80022c2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c4:	2302      	movs	r3, #2
 80022c6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c8:	2300      	movs	r3, #0
 80022ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022cc:	2300      	movs	r3, #0
 80022ce:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80022d0:	2303      	movs	r3, #3
 80022d2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022d4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80022d8:	4619      	mov	r1, r3
 80022da:	481e      	ldr	r0, [pc, #120]	@ (8002354 <HAL_TIM_MspPostInit+0x1ec>)
 80022dc:	f001 fbf2 	bl	8003ac4 <HAL_GPIO_Init>
}
 80022e0:	e022      	b.n	8002328 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1c      	ldr	r2, [pc, #112]	@ (8002358 <HAL_TIM_MspPostInit+0x1f0>)
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d11d      	bne.n	8002328 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4b10      	ldr	r3, [pc, #64]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 80022f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f4:	4a0f      	ldr	r2, [pc, #60]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 80022f6:	f043 0320 	orr.w	r3, r3, #32
 80022fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80022fc:	4b0d      	ldr	r3, [pc, #52]	@ (8002334 <HAL_TIM_MspPostInit+0x1cc>)
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	f003 0320 	and.w	r3, r3, #32
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002308:	2340      	movs	r3, #64	@ 0x40
 800230a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002310:	2301      	movs	r3, #1
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002314:	2302      	movs	r3, #2
 8002316:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002318:	2303      	movs	r3, #3
 800231a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800231c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002320:	4619      	mov	r1, r3
 8002322:	480e      	ldr	r0, [pc, #56]	@ (800235c <HAL_TIM_MspPostInit+0x1f4>)
 8002324:	f001 fbce 	bl	8003ac4 <HAL_GPIO_Init>
}
 8002328:	bf00      	nop
 800232a:	3738      	adds	r7, #56	@ 0x38
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40010000 	.word	0x40010000
 8002334:	40023800 	.word	0x40023800
 8002338:	40021000 	.word	0x40021000
 800233c:	40000800 	.word	0x40000800
 8002340:	40020c00 	.word	0x40020c00
 8002344:	40000c00 	.word	0x40000c00
 8002348:	40021c00 	.word	0x40021c00
 800234c:	40010400 	.word	0x40010400
 8002350:	40022000 	.word	0x40022000
 8002354:	40020800 	.word	0x40020800
 8002358:	40014400 	.word	0x40014400
 800235c:	40021400 	.word	0x40021400

08002360 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b08e      	sub	sp, #56	@ 0x38
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002368:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800236c:	2200      	movs	r2, #0
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	605a      	str	r2, [r3, #4]
 8002372:	609a      	str	r2, [r3, #8]
 8002374:	60da      	str	r2, [r3, #12]
 8002376:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a90      	ldr	r2, [pc, #576]	@ (80025c0 <HAL_UART_MspInit+0x260>)
 800237e:	4293      	cmp	r3, r2
 8002380:	f040 80b2 	bne.w	80024e8 <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002384:	2300      	movs	r3, #0
 8002386:	623b      	str	r3, [r7, #32]
 8002388:	4b8e      	ldr	r3, [pc, #568]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 800238a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238c:	4a8d      	ldr	r2, [pc, #564]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 800238e:	f043 0310 	orr.w	r3, r3, #16
 8002392:	6453      	str	r3, [r2, #68]	@ 0x44
 8002394:	4b8b      	ldr	r3, [pc, #556]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 8002396:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002398:	f003 0310 	and.w	r3, r3, #16
 800239c:	623b      	str	r3, [r7, #32]
 800239e:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a0:	2300      	movs	r3, #0
 80023a2:	61fb      	str	r3, [r7, #28]
 80023a4:	4b87      	ldr	r3, [pc, #540]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80023a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a8:	4a86      	ldr	r2, [pc, #536]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80023aa:	f043 0302 	orr.w	r3, r3, #2
 80023ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80023b0:	4b84      	ldr	r3, [pc, #528]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80023b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	61fb      	str	r3, [r7, #28]
 80023ba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	2300      	movs	r3, #0
 80023be:	61bb      	str	r3, [r7, #24]
 80023c0:	4b80      	ldr	r3, [pc, #512]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80023c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c4:	4a7f      	ldr	r2, [pc, #508]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80023c6:	f043 0301 	orr.w	r3, r3, #1
 80023ca:	6313      	str	r3, [r2, #48]	@ 0x30
 80023cc:	4b7d      	ldr	r3, [pc, #500]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80023ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d0:	f003 0301 	and.w	r3, r3, #1
 80023d4:	61bb      	str	r3, [r7, #24]
 80023d6:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80023d8:	2380      	movs	r3, #128	@ 0x80
 80023da:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023e4:	2303      	movs	r3, #3
 80023e6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80023e8:	2307      	movs	r3, #7
 80023ea:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80023f0:	4619      	mov	r1, r3
 80023f2:	4875      	ldr	r0, [pc, #468]	@ (80025c8 <HAL_UART_MspInit+0x268>)
 80023f4:	f001 fb66 	bl	8003ac4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80023f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80023fc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fe:	2302      	movs	r3, #2
 8002400:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002406:	2303      	movs	r3, #3
 8002408:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800240a:	2307      	movs	r3, #7
 800240c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002412:	4619      	mov	r1, r3
 8002414:	486d      	ldr	r0, [pc, #436]	@ (80025cc <HAL_UART_MspInit+0x26c>)
 8002416:	f001 fb55 	bl	8003ac4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800241a:	4b6d      	ldr	r3, [pc, #436]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 800241c:	4a6d      	ldr	r2, [pc, #436]	@ (80025d4 <HAL_UART_MspInit+0x274>)
 800241e:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002420:	4b6b      	ldr	r3, [pc, #428]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002422:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002426:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002428:	4b69      	ldr	r3, [pc, #420]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 800242a:	2240      	movs	r2, #64	@ 0x40
 800242c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800242e:	4b68      	ldr	r3, [pc, #416]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002430:	2200      	movs	r2, #0
 8002432:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002434:	4b66      	ldr	r3, [pc, #408]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002436:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800243a:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800243c:	4b64      	ldr	r3, [pc, #400]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 800243e:	2200      	movs	r2, #0
 8002440:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002442:	4b63      	ldr	r3, [pc, #396]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002444:	2200      	movs	r2, #0
 8002446:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002448:	4b61      	ldr	r3, [pc, #388]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 800244a:	2200      	movs	r2, #0
 800244c:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800244e:	4b60      	ldr	r3, [pc, #384]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002450:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002454:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002456:	4b5e      	ldr	r3, [pc, #376]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002458:	2200      	movs	r2, #0
 800245a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800245c:	485c      	ldr	r0, [pc, #368]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 800245e:	f000 ff2f 	bl	80032c0 <HAL_DMA_Init>
 8002462:	4603      	mov	r3, r0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d001      	beq.n	800246c <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002468:	f7ff f8ce 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a58      	ldr	r2, [pc, #352]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002470:	639a      	str	r2, [r3, #56]	@ 0x38
 8002472:	4a57      	ldr	r2, [pc, #348]	@ (80025d0 <HAL_UART_MspInit+0x270>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002478:	4b57      	ldr	r3, [pc, #348]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 800247a:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_UART_MspInit+0x27c>)
 800247c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800247e:	4b56      	ldr	r3, [pc, #344]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 8002480:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002484:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002486:	4b54      	ldr	r3, [pc, #336]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 8002488:	2200      	movs	r2, #0
 800248a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800248c:	4b52      	ldr	r3, [pc, #328]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 800248e:	2200      	movs	r2, #0
 8002490:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002492:	4b51      	ldr	r3, [pc, #324]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 8002494:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002498:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800249a:	4b4f      	ldr	r3, [pc, #316]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 800249c:	2200      	movs	r2, #0
 800249e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024a0:	4b4d      	ldr	r3, [pc, #308]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80024a6:	4b4c      	ldr	r3, [pc, #304]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80024ac:	4b4a      	ldr	r3, [pc, #296]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 80024ae:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80024b2:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80024b4:	4b48      	ldr	r3, [pc, #288]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80024ba:	4847      	ldr	r0, [pc, #284]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 80024bc:	f000 ff00 	bl	80032c0 <HAL_DMA_Init>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80024c6:	f7ff f89f 	bl	8001608 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a42      	ldr	r2, [pc, #264]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 80024ce:	63da      	str	r2, [r3, #60]	@ 0x3c
 80024d0:	4a41      	ldr	r2, [pc, #260]	@ (80025d8 <HAL_UART_MspInit+0x278>)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80024d6:	2200      	movs	r2, #0
 80024d8:	2105      	movs	r1, #5
 80024da:	2025      	movs	r0, #37	@ 0x25
 80024dc:	f000 feb9 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80024e0:	2025      	movs	r0, #37	@ 0x25
 80024e2:	f000 fed2 	bl	800328a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80024e6:	e11c      	b.n	8002722 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a3c      	ldr	r2, [pc, #240]	@ (80025e0 <HAL_UART_MspInit+0x280>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d17e      	bne.n	80025f0 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	4b33      	ldr	r3, [pc, #204]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024fa:	4a32      	ldr	r2, [pc, #200]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 80024fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002500:	6413      	str	r3, [r2, #64]	@ 0x40
 8002502:	4b30      	ldr	r3, [pc, #192]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002506:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800250e:	2300      	movs	r3, #0
 8002510:	613b      	str	r3, [r7, #16]
 8002512:	4b2c      	ldr	r3, [pc, #176]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002516:	4a2b      	ldr	r2, [pc, #172]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 8002518:	f043 0304 	orr.w	r3, r3, #4
 800251c:	6313      	str	r3, [r2, #48]	@ 0x30
 800251e:	4b29      	ldr	r3, [pc, #164]	@ (80025c4 <HAL_UART_MspInit+0x264>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	613b      	str	r3, [r7, #16]
 8002528:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800252a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800252e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002530:	2302      	movs	r3, #2
 8002532:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002534:	2300      	movs	r3, #0
 8002536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002538:	2303      	movs	r3, #3
 800253a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800253c:	2307      	movs	r3, #7
 800253e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002540:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002544:	4619      	mov	r1, r3
 8002546:	4827      	ldr	r0, [pc, #156]	@ (80025e4 <HAL_UART_MspInit+0x284>)
 8002548:	f001 fabc 	bl	8003ac4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800254c:	4b26      	ldr	r3, [pc, #152]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 800254e:	4a27      	ldr	r2, [pc, #156]	@ (80025ec <HAL_UART_MspInit+0x28c>)
 8002550:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002552:	4b25      	ldr	r3, [pc, #148]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 8002554:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002558:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800255a:	4b23      	ldr	r3, [pc, #140]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 800255c:	2200      	movs	r2, #0
 800255e:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002560:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 8002562:	2200      	movs	r2, #0
 8002564:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002566:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 8002568:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800256c:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800256e:	4b1e      	ldr	r3, [pc, #120]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 8002570:	2200      	movs	r2, #0
 8002572:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002574:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 8002576:	2200      	movs	r2, #0
 8002578:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800257a:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 800257c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002580:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002582:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 8002584:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002588:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800258a:	4b17      	ldr	r3, [pc, #92]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 800258c:	2200      	movs	r2, #0
 800258e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002590:	4815      	ldr	r0, [pc, #84]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 8002592:	f000 fe95 	bl	80032c0 <HAL_DMA_Init>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <HAL_UART_MspInit+0x240>
      Error_Handler();
 800259c:	f7ff f834 	bl	8001608 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	4a11      	ldr	r2, [pc, #68]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 80025a4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80025a6:	4a10      	ldr	r2, [pc, #64]	@ (80025e8 <HAL_UART_MspInit+0x288>)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80025ac:	2200      	movs	r2, #0
 80025ae:	2105      	movs	r1, #5
 80025b0:	2027      	movs	r0, #39	@ 0x27
 80025b2:	f000 fe4e 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80025b6:	2027      	movs	r0, #39	@ 0x27
 80025b8:	f000 fe67 	bl	800328a <HAL_NVIC_EnableIRQ>
}
 80025bc:	e0b1      	b.n	8002722 <HAL_UART_MspInit+0x3c2>
 80025be:	bf00      	nop
 80025c0:	40011000 	.word	0x40011000
 80025c4:	40023800 	.word	0x40023800
 80025c8:	40020400 	.word	0x40020400
 80025cc:	40020000 	.word	0x40020000
 80025d0:	200005f4 	.word	0x200005f4
 80025d4:	400264b8 	.word	0x400264b8
 80025d8:	20000654 	.word	0x20000654
 80025dc:	40026440 	.word	0x40026440
 80025e0:	40004800 	.word	0x40004800
 80025e4:	40020800 	.word	0x40020800
 80025e8:	200006b4 	.word	0x200006b4
 80025ec:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a4d      	ldr	r2, [pc, #308]	@ (800272c <HAL_UART_MspInit+0x3cc>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	f040 8093 	bne.w	8002722 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 80025fc:	2300      	movs	r3, #0
 80025fe:	60fb      	str	r3, [r7, #12]
 8002600:	4b4b      	ldr	r3, [pc, #300]	@ (8002730 <HAL_UART_MspInit+0x3d0>)
 8002602:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002604:	4a4a      	ldr	r2, [pc, #296]	@ (8002730 <HAL_UART_MspInit+0x3d0>)
 8002606:	f043 0320 	orr.w	r3, r3, #32
 800260a:	6453      	str	r3, [r2, #68]	@ 0x44
 800260c:	4b48      	ldr	r3, [pc, #288]	@ (8002730 <HAL_UART_MspInit+0x3d0>)
 800260e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002610:	f003 0320 	and.w	r3, r3, #32
 8002614:	60fb      	str	r3, [r7, #12]
 8002616:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002618:	2300      	movs	r3, #0
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	4b44      	ldr	r3, [pc, #272]	@ (8002730 <HAL_UART_MspInit+0x3d0>)
 800261e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002620:	4a43      	ldr	r2, [pc, #268]	@ (8002730 <HAL_UART_MspInit+0x3d0>)
 8002622:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002626:	6313      	str	r3, [r2, #48]	@ 0x30
 8002628:	4b41      	ldr	r3, [pc, #260]	@ (8002730 <HAL_UART_MspInit+0x3d0>)
 800262a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002630:	60bb      	str	r3, [r7, #8]
 8002632:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002634:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002638:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002646:	2308      	movs	r3, #8
 8002648:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800264a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800264e:	4619      	mov	r1, r3
 8002650:	4838      	ldr	r0, [pc, #224]	@ (8002734 <HAL_UART_MspInit+0x3d4>)
 8002652:	f001 fa37 	bl	8003ac4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002656:	4b38      	ldr	r3, [pc, #224]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 8002658:	4a38      	ldr	r2, [pc, #224]	@ (800273c <HAL_UART_MspInit+0x3dc>)
 800265a:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800265c:	4b36      	ldr	r3, [pc, #216]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 800265e:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002662:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002664:	4b34      	ldr	r3, [pc, #208]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 8002666:	2200      	movs	r2, #0
 8002668:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800266a:	4b33      	ldr	r3, [pc, #204]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 800266c:	2200      	movs	r2, #0
 800266e:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002670:	4b31      	ldr	r3, [pc, #196]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 8002672:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002676:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002678:	4b2f      	ldr	r3, [pc, #188]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 800267a:	2200      	movs	r2, #0
 800267c:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800267e:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 8002680:	2200      	movs	r2, #0
 8002682:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002684:	4b2c      	ldr	r3, [pc, #176]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 8002686:	2200      	movs	r2, #0
 8002688:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800268a:	4b2b      	ldr	r3, [pc, #172]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 800268c:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002690:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002692:	4b29      	ldr	r3, [pc, #164]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 8002694:	2200      	movs	r2, #0
 8002696:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002698:	4827      	ldr	r0, [pc, #156]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 800269a:	f000 fe11 	bl	80032c0 <HAL_DMA_Init>
 800269e:	4603      	mov	r3, r0
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d001      	beq.n	80026a8 <HAL_UART_MspInit+0x348>
      Error_Handler();
 80026a4:	f7fe ffb0 	bl	8001608 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	4a23      	ldr	r2, [pc, #140]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 80026ac:	63da      	str	r2, [r3, #60]	@ 0x3c
 80026ae:	4a22      	ldr	r2, [pc, #136]	@ (8002738 <HAL_UART_MspInit+0x3d8>)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80026b4:	4b22      	ldr	r3, [pc, #136]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026b6:	4a23      	ldr	r2, [pc, #140]	@ (8002744 <HAL_UART_MspInit+0x3e4>)
 80026b8:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 80026ba:	4b21      	ldr	r3, [pc, #132]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026bc:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80026c0:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026c2:	4b1f      	ldr	r3, [pc, #124]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026c4:	2240      	movs	r2, #64	@ 0x40
 80026c6:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026c8:	4b1d      	ldr	r3, [pc, #116]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ce:	4b1c      	ldr	r3, [pc, #112]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026d0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80026d4:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026d6:	4b1a      	ldr	r3, [pc, #104]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026d8:	2200      	movs	r2, #0
 80026da:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026dc:	4b18      	ldr	r3, [pc, #96]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026de:	2200      	movs	r2, #0
 80026e0:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 80026e2:	4b17      	ldr	r3, [pc, #92]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026e8:	4b15      	ldr	r3, [pc, #84]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026ea:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026ee:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026f0:	4b13      	ldr	r3, [pc, #76]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 80026f6:	4812      	ldr	r0, [pc, #72]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 80026f8:	f000 fde2 	bl	80032c0 <HAL_DMA_Init>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d001      	beq.n	8002706 <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8002702:	f7fe ff81 	bl	8001608 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	4a0d      	ldr	r2, [pc, #52]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 800270a:	639a      	str	r2, [r3, #56]	@ 0x38
 800270c:	4a0c      	ldr	r2, [pc, #48]	@ (8002740 <HAL_UART_MspInit+0x3e0>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002712:	2200      	movs	r2, #0
 8002714:	2105      	movs	r1, #5
 8002716:	2047      	movs	r0, #71	@ 0x47
 8002718:	f000 fd9b 	bl	8003252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800271c:	2047      	movs	r0, #71	@ 0x47
 800271e:	f000 fdb4 	bl	800328a <HAL_NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3738      	adds	r7, #56	@ 0x38
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	40011400 	.word	0x40011400
 8002730:	40023800 	.word	0x40023800
 8002734:	40021800 	.word	0x40021800
 8002738:	20000714 	.word	0x20000714
 800273c:	40026428 	.word	0x40026428
 8002740:	20000774 	.word	0x20000774
 8002744:	400264a0 	.word	0x400264a0

08002748 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 800274c:	f002 f93c 	bl	80049c8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002750:	bf00      	nop
 8002752:	e7fd      	b.n	8002750 <NMI_Handler+0x8>

08002754 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002758:	bf00      	nop
 800275a:	e7fd      	b.n	8002758 <HardFault_Handler+0x4>

0800275c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002760:	bf00      	nop
 8002762:	e7fd      	b.n	8002760 <MemManage_Handler+0x4>

08002764 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002768:	bf00      	nop
 800276a:	e7fd      	b.n	8002768 <BusFault_Handler+0x4>

0800276c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800276c:	b480      	push	{r7}
 800276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002770:	bf00      	nop
 8002772:	e7fd      	b.n	8002770 <UsageFault_Handler+0x4>

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002782:	b580      	push	{r7, lr}
 8002784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002786:	f000 f935 	bl	80029f4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800278a:	f006 f8eb 	bl	8008964 <xTaskGetSchedulerState>
 800278e:	4603      	mov	r3, r0
 8002790:	2b01      	cmp	r3, #1
 8002792:	d001      	beq.n	8002798 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002794:	f006 fee0 	bl	8009558 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80027a0:	2008      	movs	r0, #8
 80027a2:	f001 fb45 	bl	8003e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80027a6:	bf00      	nop
 80027a8:	bd80      	pop	{r7, pc}

080027aa <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80027ae:	2010      	movs	r0, #16
 80027b0:	f001 fb3e 	bl	8003e30 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80027bc:	4802      	ldr	r0, [pc, #8]	@ (80027c8 <DMA1_Stream1_IRQHandler+0x10>)
 80027be:	f000 ff17 	bl	80035f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80027c2:	bf00      	nop
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200006b4 	.word	0x200006b4

080027cc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <CAN1_RX0_IRQHandler+0x10>)
 80027d2:	f000 fa2a 	bl	8002c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	200002b8 	.word	0x200002b8

080027e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80027e4:	4802      	ldr	r0, [pc, #8]	@ (80027f0 <USART1_IRQHandler+0x10>)
 80027e6:	f003 fa65 	bl	8005cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80027ea:	bf00      	nop
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	2000051c 	.word	0x2000051c

080027f4 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80027f8:	4802      	ldr	r0, [pc, #8]	@ (8002804 <DMA2_Stream1_IRQHandler+0x10>)
 80027fa:	f000 fef9 	bl	80035f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80027fe:	bf00      	nop
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	20000714 	.word	0x20000714

08002808 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800280c:	4802      	ldr	r0, [pc, #8]	@ (8002818 <DMA2_Stream2_IRQHandler+0x10>)
 800280e:	f000 feef 	bl	80035f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	20000654 	.word	0x20000654

0800281c <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002820:	4802      	ldr	r0, [pc, #8]	@ (800282c <CAN2_RX0_IRQHandler+0x10>)
 8002822:	f000 fa02 	bl	8002c2a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002826:	bf00      	nop
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	200002e0 	.word	0x200002e0

08002830 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002834:	4802      	ldr	r0, [pc, #8]	@ (8002840 <DMA2_Stream6_IRQHandler+0x10>)
 8002836:	f000 fedb 	bl	80035f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800283a:	bf00      	nop
 800283c:	bd80      	pop	{r7, pc}
 800283e:	bf00      	nop
 8002840:	20000774 	.word	0x20000774

08002844 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002848:	4802      	ldr	r0, [pc, #8]	@ (8002854 <DMA2_Stream7_IRQHandler+0x10>)
 800284a:	f000 fed1 	bl	80035f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 800284e:	bf00      	nop
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	200005f4 	.word	0x200005f4

08002858 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800285c:	4802      	ldr	r0, [pc, #8]	@ (8002868 <USART6_IRQHandler+0x10>)
 800285e:	f003 fa29 	bl	8005cb4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002862:	bf00      	nop
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	200005ac 	.word	0x200005ac

0800286c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b086      	sub	sp, #24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002874:	4a14      	ldr	r2, [pc, #80]	@ (80028c8 <_sbrk+0x5c>)
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <_sbrk+0x60>)
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800287c:	697b      	ldr	r3, [r7, #20]
 800287e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002880:	4b13      	ldr	r3, [pc, #76]	@ (80028d0 <_sbrk+0x64>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d102      	bne.n	800288e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002888:	4b11      	ldr	r3, [pc, #68]	@ (80028d0 <_sbrk+0x64>)
 800288a:	4a12      	ldr	r2, [pc, #72]	@ (80028d4 <_sbrk+0x68>)
 800288c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800288e:	4b10      	ldr	r3, [pc, #64]	@ (80028d0 <_sbrk+0x64>)
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4413      	add	r3, r2
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	429a      	cmp	r2, r3
 800289a:	d207      	bcs.n	80028ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800289c:	f007 f95a 	bl	8009b54 <__errno>
 80028a0:	4603      	mov	r3, r0
 80028a2:	220c      	movs	r2, #12
 80028a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028aa:	e009      	b.n	80028c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028ac:	4b08      	ldr	r3, [pc, #32]	@ (80028d0 <_sbrk+0x64>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028b2:	4b07      	ldr	r3, [pc, #28]	@ (80028d0 <_sbrk+0x64>)
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4413      	add	r3, r2
 80028ba:	4a05      	ldr	r2, [pc, #20]	@ (80028d0 <_sbrk+0x64>)
 80028bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028be:	68fb      	ldr	r3, [r7, #12]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3718      	adds	r7, #24
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20020000 	.word	0x20020000
 80028cc:	00000400 	.word	0x00000400
 80028d0:	2000085c 	.word	0x2000085c
 80028d4:	20005398 	.word	0x20005398

080028d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028dc:	4b06      	ldr	r3, [pc, #24]	@ (80028f8 <SystemInit+0x20>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028e2:	4a05      	ldr	r2, [pc, #20]	@ (80028f8 <SystemInit+0x20>)
 80028e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80028e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028ec:	bf00      	nop
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
 80028f6:	bf00      	nop
 80028f8:	e000ed00 	.word	0xe000ed00

080028fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002934 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002900:	f7ff ffea 	bl	80028d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002904:	480c      	ldr	r0, [pc, #48]	@ (8002938 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002906:	490d      	ldr	r1, [pc, #52]	@ (800293c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002908:	4a0d      	ldr	r2, [pc, #52]	@ (8002940 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800290a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800290c:	e002      	b.n	8002914 <LoopCopyDataInit>

0800290e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800290e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002910:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002912:	3304      	adds	r3, #4

08002914 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002914:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002916:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002918:	d3f9      	bcc.n	800290e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800291a:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800291c:	4c0a      	ldr	r4, [pc, #40]	@ (8002948 <LoopFillZerobss+0x22>)
  movs r3, #0
 800291e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002920:	e001      	b.n	8002926 <LoopFillZerobss>

08002922 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002922:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002924:	3204      	adds	r2, #4

08002926 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002926:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002928:	d3fb      	bcc.n	8002922 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800292a:	f007 f919 	bl	8009b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800292e:	f7fe f821 	bl	8000974 <main>
  bx  lr    
 8002932:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002934:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002938:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800293c:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002940:	0800a5a4 	.word	0x0800a5a4
  ldr r2, =_sbss
 8002944:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002948:	20005394 	.word	0x20005394

0800294c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800294c:	e7fe      	b.n	800294c <ADC_IRQHandler>
	...

08002950 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002954:	4b0e      	ldr	r3, [pc, #56]	@ (8002990 <HAL_Init+0x40>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0d      	ldr	r2, [pc, #52]	@ (8002990 <HAL_Init+0x40>)
 800295a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800295e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002960:	4b0b      	ldr	r3, [pc, #44]	@ (8002990 <HAL_Init+0x40>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a0a      	ldr	r2, [pc, #40]	@ (8002990 <HAL_Init+0x40>)
 8002966:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800296a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800296c:	4b08      	ldr	r3, [pc, #32]	@ (8002990 <HAL_Init+0x40>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	4a07      	ldr	r2, [pc, #28]	@ (8002990 <HAL_Init+0x40>)
 8002972:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002976:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002978:	2003      	movs	r0, #3
 800297a:	f000 fc5f 	bl	800323c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800297e:	200f      	movs	r0, #15
 8002980:	f000 f808 	bl	8002994 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002984:	f7ff f9bc 	bl	8001d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	bd80      	pop	{r7, pc}
 800298e:	bf00      	nop
 8002990:	40023c00 	.word	0x40023c00

08002994 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800299c:	4b12      	ldr	r3, [pc, #72]	@ (80029e8 <HAL_InitTick+0x54>)
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	4b12      	ldr	r3, [pc, #72]	@ (80029ec <HAL_InitTick+0x58>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4619      	mov	r1, r3
 80029a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f000 fc77 	bl	80032a6 <HAL_SYSTICK_Config>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d001      	beq.n	80029c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e00e      	b.n	80029e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b0f      	cmp	r3, #15
 80029c6:	d80a      	bhi.n	80029de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029c8:	2200      	movs	r2, #0
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80029d0:	f000 fc3f 	bl	8003252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029d4:	4a06      	ldr	r2, [pc, #24]	@ (80029f0 <HAL_InitTick+0x5c>)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
 80029dc:	e000      	b.n	80029e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029de:	2301      	movs	r3, #1
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	3708      	adds	r7, #8
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20000000 	.word	0x20000000
 80029ec:	20000008 	.word	0x20000008
 80029f0:	20000004 	.word	0x20000004

080029f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029f8:	4b06      	ldr	r3, [pc, #24]	@ (8002a14 <HAL_IncTick+0x20>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	461a      	mov	r2, r3
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <HAL_IncTick+0x24>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4413      	add	r3, r2
 8002a04:	4a04      	ldr	r2, [pc, #16]	@ (8002a18 <HAL_IncTick+0x24>)
 8002a06:	6013      	str	r3, [r2, #0]
}
 8002a08:	bf00      	nop
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a10:	4770      	bx	lr
 8002a12:	bf00      	nop
 8002a14:	20000008 	.word	0x20000008
 8002a18:	20000860 	.word	0x20000860

08002a1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a20:	4b03      	ldr	r3, [pc, #12]	@ (8002a30 <HAL_GetTick+0x14>)
 8002a22:	681b      	ldr	r3, [r3, #0]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	20000860 	.word	0x20000860

08002a34 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e0ed      	b.n	8002c22 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d102      	bne.n	8002a58 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f7ff f980 	bl	8001d58 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	681a      	ldr	r2, [r3, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f042 0201 	orr.w	r2, r2, #1
 8002a66:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a68:	f7ff ffd8 	bl	8002a1c <HAL_GetTick>
 8002a6c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a6e:	e012      	b.n	8002a96 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002a70:	f7ff ffd4 	bl	8002a1c <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	2b0a      	cmp	r3, #10
 8002a7c:	d90b      	bls.n	8002a96 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a82:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	2205      	movs	r2, #5
 8002a8e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e0c5      	b.n	8002c22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 0301 	and.w	r3, r3, #1
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d0e5      	beq.n	8002a70 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681a      	ldr	r2, [r3, #0]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0202 	bic.w	r2, r2, #2
 8002ab2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ab4:	f7ff ffb2 	bl	8002a1c <HAL_GetTick>
 8002ab8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002aba:	e012      	b.n	8002ae2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002abc:	f7ff ffae 	bl	8002a1c <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	2b0a      	cmp	r3, #10
 8002ac8:	d90b      	bls.n	8002ae2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ace:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2205      	movs	r2, #5
 8002ada:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e09f      	b.n	8002c22 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d1e5      	bne.n	8002abc <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	7e1b      	ldrb	r3, [r3, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d108      	bne.n	8002b0a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	e007      	b.n	8002b1a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b18:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	7e5b      	ldrb	r3, [r3, #25]
 8002b1e:	2b01      	cmp	r3, #1
 8002b20:	d108      	bne.n	8002b34 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002b30:	601a      	str	r2, [r3, #0]
 8002b32:	e007      	b.n	8002b44 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b42:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	7e9b      	ldrb	r3, [r3, #26]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d108      	bne.n	8002b5e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f042 0220 	orr.w	r2, r2, #32
 8002b5a:	601a      	str	r2, [r3, #0]
 8002b5c:	e007      	b.n	8002b6e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 0220 	bic.w	r2, r2, #32
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	7edb      	ldrb	r3, [r3, #27]
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d108      	bne.n	8002b88 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 0210 	bic.w	r2, r2, #16
 8002b84:	601a      	str	r2, [r3, #0]
 8002b86:	e007      	b.n	8002b98 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0210 	orr.w	r2, r2, #16
 8002b96:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	7f1b      	ldrb	r3, [r3, #28]
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d108      	bne.n	8002bb2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	681a      	ldr	r2, [r3, #0]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f042 0208 	orr.w	r2, r2, #8
 8002bae:	601a      	str	r2, [r3, #0]
 8002bb0:	e007      	b.n	8002bc2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	681a      	ldr	r2, [r3, #0]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0208 	bic.w	r2, r2, #8
 8002bc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	7f5b      	ldrb	r3, [r3, #29]
 8002bc6:	2b01      	cmp	r3, #1
 8002bc8:	d108      	bne.n	8002bdc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f042 0204 	orr.w	r2, r2, #4
 8002bd8:	601a      	str	r2, [r3, #0]
 8002bda:	e007      	b.n	8002bec <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0204 	bic.w	r2, r2, #4
 8002bea:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689a      	ldr	r2, [r3, #8]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	ea42 0103 	orr.w	r1, r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	1e5a      	subs	r2, r3, #1
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2200      	movs	r2, #0
 8002c16:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2201      	movs	r2, #1
 8002c1c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	3710      	adds	r7, #16
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b08a      	sub	sp, #40	@ 0x28
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002c32:	2300      	movs	r3, #0
 8002c34:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	695b      	ldr	r3, [r3, #20]
 8002c3c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	689b      	ldr	r3, [r3, #8]
 8002c4c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	699b      	ldr	r3, [r3, #24]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002c66:	6a3b      	ldr	r3, [r7, #32]
 8002c68:	f003 0301 	and.w	r3, r3, #1
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d07c      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d023      	beq.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f983 	bl	8002f98 <HAL_CAN_TxMailbox0CompleteCallback>
 8002c92:	e016      	b.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	f003 0304 	and.w	r3, r3, #4
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d004      	beq.n	8002ca8 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ca6:	e00c      	b.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d004      	beq.n	8002cbc <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002cb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002cb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cba:	e002      	b.n	8002cc2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f989 	bl	8002fd4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002cc2:	69bb      	ldr	r3, [r7, #24]
 8002cc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d024      	beq.n	8002d16 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002cd4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002cd6:	69bb      	ldr	r3, [r7, #24]
 8002cd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d003      	beq.n	8002ce8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 f963 	bl	8002fac <HAL_CAN_TxMailbox1CompleteCallback>
 8002ce6:	e016      	b.n	8002d16 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002ce8:	69bb      	ldr	r3, [r7, #24]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d004      	beq.n	8002cfc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002cf8:	627b      	str	r3, [r7, #36]	@ 0x24
 8002cfa:	e00c      	b.n	8002d16 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d004      	beq.n	8002d10 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d08:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d0e:	e002      	b.n	8002d16 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f969 	bl	8002fe8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d024      	beq.n	8002d6a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002d28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d003      	beq.n	8002d3c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f000 f943 	bl	8002fc0 <HAL_CAN_TxMailbox2CompleteCallback>
 8002d3a:	e016      	b.n	8002d6a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d004      	beq.n	8002d50 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002d46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d48:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d4e:	e00c      	b.n	8002d6a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d004      	beq.n	8002d64 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d60:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d62:	e002      	b.n	8002d6a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f949 	bl	8002ffc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002d6a:	6a3b      	ldr	r3, [r7, #32]
 8002d6c:	f003 0308 	and.w	r3, r3, #8
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00c      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	f003 0310 	and.w	r3, r3, #16
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d007      	beq.n	8002d8e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d80:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d84:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	2210      	movs	r2, #16
 8002d8c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002d8e:	6a3b      	ldr	r3, [r7, #32]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00b      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	f003 0308 	and.w	r3, r3, #8
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d006      	beq.n	8002db0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2208      	movs	r2, #8
 8002da8:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002daa:	6878      	ldr	r0, [r7, #4]
 8002dac:	f000 f93a 	bl	8003024 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002db0:	6a3b      	ldr	r3, [r7, #32]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d009      	beq.n	8002dce <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f003 0303 	and.w	r3, r3, #3
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d002      	beq.n	8002dce <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002dc8:	6878      	ldr	r0, [r7, #4]
 8002dca:	f000 f921 	bl	8003010 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002dce:	6a3b      	ldr	r3, [r7, #32]
 8002dd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00c      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f003 0310 	and.w	r3, r3, #16
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d007      	beq.n	8002df2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002de8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2210      	movs	r2, #16
 8002df0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002df2:	6a3b      	ldr	r3, [r7, #32]
 8002df4:	f003 0320 	and.w	r3, r3, #32
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d00b      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	f003 0308 	and.w	r3, r3, #8
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d006      	beq.n	8002e14 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2208      	movs	r2, #8
 8002e0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 f91c 	bl	800304c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002e14:	6a3b      	ldr	r3, [r7, #32]
 8002e16:	f003 0310 	and.w	r3, r3, #16
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d009      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	691b      	ldr	r3, [r3, #16]
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d002      	beq.n	8002e32 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002e2c:	6878      	ldr	r0, [r7, #4]
 8002e2e:	f000 f903 	bl	8003038 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002e32:	6a3b      	ldr	r3, [r7, #32]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d006      	beq.n	8002e54 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	2210      	movs	r2, #16
 8002e4c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f000 f906 	bl	8003060 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002e54:	6a3b      	ldr	r3, [r7, #32]
 8002e56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00b      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	f003 0308 	and.w	r3, r3, #8
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d006      	beq.n	8002e76 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2208      	movs	r2, #8
 8002e6e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f000 f8ff 	bl	8003074 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002e76:	6a3b      	ldr	r3, [r7, #32]
 8002e78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d07b      	beq.n	8002f78 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d072      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e8a:	6a3b      	ldr	r3, [r7, #32]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d003      	beq.n	8002ea6 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002ea6:	6a3b      	ldr	r3, [r7, #32]
 8002ea8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d003      	beq.n	8002ec2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ebc:	f043 0302 	orr.w	r3, r3, #2
 8002ec0:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ec2:	6a3b      	ldr	r3, [r7, #32]
 8002ec4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d008      	beq.n	8002ede <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ed8:	f043 0304 	orr.w	r3, r3, #4
 8002edc:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d043      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d03e      	beq.n	8002f70 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002ef8:	2b60      	cmp	r3, #96	@ 0x60
 8002efa:	d02b      	beq.n	8002f54 <HAL_CAN_IRQHandler+0x32a>
 8002efc:	2b60      	cmp	r3, #96	@ 0x60
 8002efe:	d82e      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f00:	2b50      	cmp	r3, #80	@ 0x50
 8002f02:	d022      	beq.n	8002f4a <HAL_CAN_IRQHandler+0x320>
 8002f04:	2b50      	cmp	r3, #80	@ 0x50
 8002f06:	d82a      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f08:	2b40      	cmp	r3, #64	@ 0x40
 8002f0a:	d019      	beq.n	8002f40 <HAL_CAN_IRQHandler+0x316>
 8002f0c:	2b40      	cmp	r3, #64	@ 0x40
 8002f0e:	d826      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f10:	2b30      	cmp	r3, #48	@ 0x30
 8002f12:	d010      	beq.n	8002f36 <HAL_CAN_IRQHandler+0x30c>
 8002f14:	2b30      	cmp	r3, #48	@ 0x30
 8002f16:	d822      	bhi.n	8002f5e <HAL_CAN_IRQHandler+0x334>
 8002f18:	2b10      	cmp	r3, #16
 8002f1a:	d002      	beq.n	8002f22 <HAL_CAN_IRQHandler+0x2f8>
 8002f1c:	2b20      	cmp	r3, #32
 8002f1e:	d005      	beq.n	8002f2c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002f20:	e01d      	b.n	8002f5e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f24:	f043 0308 	orr.w	r3, r3, #8
 8002f28:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f2a:	e019      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f2e:	f043 0310 	orr.w	r3, r3, #16
 8002f32:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f34:	e014      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f38:	f043 0320 	orr.w	r3, r3, #32
 8002f3c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f3e:	e00f      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f46:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f48:	e00a      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002f50:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f52:	e005      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002f5c:	e000      	b.n	8002f60 <HAL_CAN_IRQHandler+0x336>
            break;
 8002f5e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	699a      	ldr	r2, [r3, #24]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002f6e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2204      	movs	r2, #4
 8002f76:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d008      	beq.n	8002f90 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f87c 	bl	8003088 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002f90:	bf00      	nop
 8002f92:	3728      	adds	r7, #40	@ 0x28
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002fa0:	bf00      	nop
 8002fa2:	370c      	adds	r7, #12
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8002fb4:	bf00      	nop
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003040:	bf00      	nop
 8003042:	370c      	adds	r7, #12
 8003044:	46bd      	mov	sp, r7
 8003046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304a:	4770      	bx	lr

0800304c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800304c:	b480      	push	{r7}
 800304e:	b083      	sub	sp, #12
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003054:	bf00      	nop
 8003056:	370c      	adds	r7, #12
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr

08003060 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr

08003074 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003074:	b480      	push	{r7}
 8003076:	b083      	sub	sp, #12
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800307c:	bf00      	nop
 800307e:	370c      	adds	r7, #12
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003090:	bf00      	nop
 8003092:	370c      	adds	r7, #12
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f003 0307 	and.w	r3, r3, #7
 80030aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030ac:	4b0c      	ldr	r3, [pc, #48]	@ (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030ae:	68db      	ldr	r3, [r3, #12]
 80030b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030b2:	68ba      	ldr	r2, [r7, #8]
 80030b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030b8:	4013      	ands	r3, r2
 80030ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030ce:	4a04      	ldr	r2, [pc, #16]	@ (80030e0 <__NVIC_SetPriorityGrouping+0x44>)
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	60d3      	str	r3, [r2, #12]
}
 80030d4:	bf00      	nop
 80030d6:	3714      	adds	r7, #20
 80030d8:	46bd      	mov	sp, r7
 80030da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030de:	4770      	bx	lr
 80030e0:	e000ed00 	.word	0xe000ed00

080030e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030e8:	4b04      	ldr	r3, [pc, #16]	@ (80030fc <__NVIC_GetPriorityGrouping+0x18>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	0a1b      	lsrs	r3, r3, #8
 80030ee:	f003 0307 	and.w	r3, r3, #7
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	46bd      	mov	sp, r7
 80030f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fa:	4770      	bx	lr
 80030fc:	e000ed00 	.word	0xe000ed00

08003100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	4603      	mov	r3, r0
 8003108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800310a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800310e:	2b00      	cmp	r3, #0
 8003110:	db0b      	blt.n	800312a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003112:	79fb      	ldrb	r3, [r7, #7]
 8003114:	f003 021f 	and.w	r2, r3, #31
 8003118:	4907      	ldr	r1, [pc, #28]	@ (8003138 <__NVIC_EnableIRQ+0x38>)
 800311a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800311e:	095b      	lsrs	r3, r3, #5
 8003120:	2001      	movs	r0, #1
 8003122:	fa00 f202 	lsl.w	r2, r0, r2
 8003126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800312a:	bf00      	nop
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
 8003136:	bf00      	nop
 8003138:	e000e100 	.word	0xe000e100

0800313c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	4603      	mov	r3, r0
 8003144:	6039      	str	r1, [r7, #0]
 8003146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800314c:	2b00      	cmp	r3, #0
 800314e:	db0a      	blt.n	8003166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	b2da      	uxtb	r2, r3
 8003154:	490c      	ldr	r1, [pc, #48]	@ (8003188 <__NVIC_SetPriority+0x4c>)
 8003156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800315a:	0112      	lsls	r2, r2, #4
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	440b      	add	r3, r1
 8003160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003164:	e00a      	b.n	800317c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	b2da      	uxtb	r2, r3
 800316a:	4908      	ldr	r1, [pc, #32]	@ (800318c <__NVIC_SetPriority+0x50>)
 800316c:	79fb      	ldrb	r3, [r7, #7]
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	3b04      	subs	r3, #4
 8003174:	0112      	lsls	r2, r2, #4
 8003176:	b2d2      	uxtb	r2, r2
 8003178:	440b      	add	r3, r1
 800317a:	761a      	strb	r2, [r3, #24]
}
 800317c:	bf00      	nop
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	e000e100 	.word	0xe000e100
 800318c:	e000ed00 	.word	0xe000ed00

08003190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003190:	b480      	push	{r7}
 8003192:	b089      	sub	sp, #36	@ 0x24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f003 0307 	and.w	r3, r3, #7
 80031a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	f1c3 0307 	rsb	r3, r3, #7
 80031aa:	2b04      	cmp	r3, #4
 80031ac:	bf28      	it	cs
 80031ae:	2304      	movcs	r3, #4
 80031b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031b2:	69fb      	ldr	r3, [r7, #28]
 80031b4:	3304      	adds	r3, #4
 80031b6:	2b06      	cmp	r3, #6
 80031b8:	d902      	bls.n	80031c0 <NVIC_EncodePriority+0x30>
 80031ba:	69fb      	ldr	r3, [r7, #28]
 80031bc:	3b03      	subs	r3, #3
 80031be:	e000      	b.n	80031c2 <NVIC_EncodePriority+0x32>
 80031c0:	2300      	movs	r3, #0
 80031c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	fa02 f303 	lsl.w	r3, r2, r3
 80031ce:	43da      	mvns	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	401a      	ands	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	fa01 f303 	lsl.w	r3, r1, r3
 80031e2:	43d9      	mvns	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031e8:	4313      	orrs	r3, r2
         );
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3724      	adds	r7, #36	@ 0x24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
	...

080031f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	3b01      	subs	r3, #1
 8003204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003208:	d301      	bcc.n	800320e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800320a:	2301      	movs	r3, #1
 800320c:	e00f      	b.n	800322e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800320e:	4a0a      	ldr	r2, [pc, #40]	@ (8003238 <SysTick_Config+0x40>)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3b01      	subs	r3, #1
 8003214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003216:	210f      	movs	r1, #15
 8003218:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800321c:	f7ff ff8e 	bl	800313c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003220:	4b05      	ldr	r3, [pc, #20]	@ (8003238 <SysTick_Config+0x40>)
 8003222:	2200      	movs	r2, #0
 8003224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003226:	4b04      	ldr	r3, [pc, #16]	@ (8003238 <SysTick_Config+0x40>)
 8003228:	2207      	movs	r2, #7
 800322a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800322c:	2300      	movs	r3, #0
}
 800322e:	4618      	mov	r0, r3
 8003230:	3708      	adds	r7, #8
 8003232:	46bd      	mov	sp, r7
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	e000e010 	.word	0xe000e010

0800323c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f7ff ff29 	bl	800309c <__NVIC_SetPriorityGrouping>
}
 800324a:	bf00      	nop
 800324c:	3708      	adds	r7, #8
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	4603      	mov	r3, r0
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	607a      	str	r2, [r7, #4]
 800325e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003260:	2300      	movs	r3, #0
 8003262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003264:	f7ff ff3e 	bl	80030e4 <__NVIC_GetPriorityGrouping>
 8003268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	68b9      	ldr	r1, [r7, #8]
 800326e:	6978      	ldr	r0, [r7, #20]
 8003270:	f7ff ff8e 	bl	8003190 <NVIC_EncodePriority>
 8003274:	4602      	mov	r2, r0
 8003276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800327a:	4611      	mov	r1, r2
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff5d 	bl	800313c <__NVIC_SetPriority>
}
 8003282:	bf00      	nop
 8003284:	3718      	adds	r7, #24
 8003286:	46bd      	mov	sp, r7
 8003288:	bd80      	pop	{r7, pc}

0800328a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800328a:	b580      	push	{r7, lr}
 800328c:	b082      	sub	sp, #8
 800328e:	af00      	add	r7, sp, #0
 8003290:	4603      	mov	r3, r0
 8003292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003298:	4618      	mov	r0, r3
 800329a:	f7ff ff31 	bl	8003100 <__NVIC_EnableIRQ>
}
 800329e:	bf00      	nop
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}

080032a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032a6:	b580      	push	{r7, lr}
 80032a8:	b082      	sub	sp, #8
 80032aa:	af00      	add	r7, sp, #0
 80032ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ffa2 	bl	80031f8 <SysTick_Config>
 80032b4:	4603      	mov	r3, r0
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
	...

080032c0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b086      	sub	sp, #24
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80032cc:	f7ff fba6 	bl	8002a1c <HAL_GetTick>
 80032d0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e099      	b.n	8003410 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032fc:	e00f      	b.n	800331e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032fe:	f7ff fb8d 	bl	8002a1c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	2b05      	cmp	r3, #5
 800330a:	d908      	bls.n	800331e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2220      	movs	r2, #32
 8003310:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2203      	movs	r2, #3
 8003316:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e078      	b.n	8003410 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d1e8      	bne.n	80032fe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003334:	697a      	ldr	r2, [r7, #20]
 8003336:	4b38      	ldr	r3, [pc, #224]	@ (8003418 <HAL_DMA_Init+0x158>)
 8003338:	4013      	ands	r3, r2
 800333a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685a      	ldr	r2, [r3, #4]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800334a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	699b      	ldr	r3, [r3, #24]
 800335c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800336a:	697a      	ldr	r2, [r7, #20]
 800336c:	4313      	orrs	r3, r2
 800336e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003374:	2b04      	cmp	r3, #4
 8003376:	d107      	bne.n	8003388 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003380:	4313      	orrs	r3, r2
 8003382:	697a      	ldr	r2, [r7, #20]
 8003384:	4313      	orrs	r3, r2
 8003386:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	697a      	ldr	r2, [r7, #20]
 800338e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 0307 	bic.w	r3, r3, #7
 800339e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ae:	2b04      	cmp	r3, #4
 80033b0:	d117      	bne.n	80033e2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d00e      	beq.n	80033e2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fb01 	bl	80039cc <DMA_CheckFifoParam>
 80033ca:	4603      	mov	r3, r0
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d008      	beq.n	80033e2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2240      	movs	r2, #64	@ 0x40
 80033d4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2201      	movs	r2, #1
 80033da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80033de:	2301      	movs	r3, #1
 80033e0:	e016      	b.n	8003410 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 fab8 	bl	8003960 <DMA_CalcBaseAndBitshift>
 80033f0:	4603      	mov	r3, r0
 80033f2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80033f8:	223f      	movs	r2, #63	@ 0x3f
 80033fa:	409a      	lsls	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	3718      	adds	r7, #24
 8003414:	46bd      	mov	sp, r7
 8003416:	bd80      	pop	{r7, pc}
 8003418:	f010803f 	.word	0xf010803f

0800341c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b086      	sub	sp, #24
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
 8003428:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800342a:	2300      	movs	r3, #0
 800342c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003432:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800343a:	2b01      	cmp	r3, #1
 800343c:	d101      	bne.n	8003442 <HAL_DMA_Start_IT+0x26>
 800343e:	2302      	movs	r3, #2
 8003440:	e040      	b.n	80034c4 <HAL_DMA_Start_IT+0xa8>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	2201      	movs	r2, #1
 8003446:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d12f      	bne.n	80034b6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2202      	movs	r2, #2
 800345a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2200      	movs	r2, #0
 8003462:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	687a      	ldr	r2, [r7, #4]
 8003468:	68b9      	ldr	r1, [r7, #8]
 800346a:	68f8      	ldr	r0, [r7, #12]
 800346c:	f000 fa4a 	bl	8003904 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003474:	223f      	movs	r2, #63	@ 0x3f
 8003476:	409a      	lsls	r2, r3
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681a      	ldr	r2, [r3, #0]
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f042 0216 	orr.w	r2, r2, #22
 800348a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003490:	2b00      	cmp	r3, #0
 8003492:	d007      	beq.n	80034a4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681a      	ldr	r2, [r3, #0]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0208 	orr.w	r2, r2, #8
 80034a2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f042 0201 	orr.w	r2, r2, #1
 80034b2:	601a      	str	r2, [r3, #0]
 80034b4:	e005      	b.n	80034c2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80034be:	2302      	movs	r3, #2
 80034c0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80034c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80034da:	f7ff fa9f 	bl	8002a1c <HAL_GetTick>
 80034de:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b02      	cmp	r3, #2
 80034ea:	d008      	beq.n	80034fe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2280      	movs	r2, #128	@ 0x80
 80034f0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e052      	b.n	80035a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 0216 	bic.w	r2, r2, #22
 800350c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	695a      	ldr	r2, [r3, #20]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800351c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d103      	bne.n	800352e <HAL_DMA_Abort+0x62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800352a:	2b00      	cmp	r3, #0
 800352c:	d007      	beq.n	800353e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0208 	bic.w	r2, r2, #8
 800353c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681a      	ldr	r2, [r3, #0]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f022 0201 	bic.w	r2, r2, #1
 800354c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800354e:	e013      	b.n	8003578 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003550:	f7ff fa64 	bl	8002a1c <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b05      	cmp	r3, #5
 800355c:	d90c      	bls.n	8003578 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2220      	movs	r2, #32
 8003562:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2203      	movs	r2, #3
 8003568:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003574:	2303      	movs	r3, #3
 8003576:	e015      	b.n	80035a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1e4      	bne.n	8003550 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800358a:	223f      	movs	r2, #63	@ 0x3f
 800358c:	409a      	lsls	r2, r3
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
}
 80035a4:	4618      	mov	r0, r3
 80035a6:	3710      	adds	r7, #16
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}

080035ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d004      	beq.n	80035ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2280      	movs	r2, #128	@ 0x80
 80035c4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80035c6:	2301      	movs	r3, #1
 80035c8:	e00c      	b.n	80035e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2205      	movs	r2, #5
 80035ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0201 	bic.w	r2, r2, #1
 80035e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80035fc:	4b8e      	ldr	r3, [pc, #568]	@ (8003838 <HAL_DMA_IRQHandler+0x248>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a8e      	ldr	r2, [pc, #568]	@ (800383c <HAL_DMA_IRQHandler+0x24c>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	0a9b      	lsrs	r3, r3, #10
 8003608:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800360e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361a:	2208      	movs	r2, #8
 800361c:	409a      	lsls	r2, r3
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	4013      	ands	r3, r2
 8003622:	2b00      	cmp	r3, #0
 8003624:	d01a      	beq.n	800365c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d013      	beq.n	800365c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 0204 	bic.w	r2, r2, #4
 8003642:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003648:	2208      	movs	r2, #8
 800364a:	409a      	lsls	r2, r3
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003654:	f043 0201 	orr.w	r2, r3, #1
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003660:	2201      	movs	r2, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	4013      	ands	r3, r2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d012      	beq.n	8003692 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003676:	2b00      	cmp	r3, #0
 8003678:	d00b      	beq.n	8003692 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800367e:	2201      	movs	r2, #1
 8003680:	409a      	lsls	r2, r3
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800368a:	f043 0202 	orr.w	r2, r3, #2
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003696:	2204      	movs	r2, #4
 8003698:	409a      	lsls	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	4013      	ands	r3, r2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d012      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f003 0302 	and.w	r3, r3, #2
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d00b      	beq.n	80036c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036b4:	2204      	movs	r2, #4
 80036b6:	409a      	lsls	r2, r3
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c0:	f043 0204 	orr.w	r2, r3, #4
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036cc:	2210      	movs	r2, #16
 80036ce:	409a      	lsls	r2, r3
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d043      	beq.n	8003760 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d03c      	beq.n	8003760 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036ea:	2210      	movs	r2, #16
 80036ec:	409a      	lsls	r2, r3
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d018      	beq.n	8003732 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d108      	bne.n	8003720 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003712:	2b00      	cmp	r3, #0
 8003714:	d024      	beq.n	8003760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	4798      	blx	r3
 800371e:	e01f      	b.n	8003760 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003724:	2b00      	cmp	r3, #0
 8003726:	d01b      	beq.n	8003760 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800372c:	6878      	ldr	r0, [r7, #4]
 800372e:	4798      	blx	r3
 8003730:	e016      	b.n	8003760 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800373c:	2b00      	cmp	r3, #0
 800373e:	d107      	bne.n	8003750 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0208 	bic.w	r2, r2, #8
 800374e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003754:	2b00      	cmp	r3, #0
 8003756:	d003      	beq.n	8003760 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003764:	2220      	movs	r2, #32
 8003766:	409a      	lsls	r2, r3
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	4013      	ands	r3, r2
 800376c:	2b00      	cmp	r3, #0
 800376e:	f000 808f 	beq.w	8003890 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f003 0310 	and.w	r3, r3, #16
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 8087 	beq.w	8003890 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003786:	2220      	movs	r2, #32
 8003788:	409a      	lsls	r2, r3
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b05      	cmp	r3, #5
 8003798:	d136      	bne.n	8003808 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 0216 	bic.w	r2, r2, #22
 80037a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	695a      	ldr	r2, [r3, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80037b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d103      	bne.n	80037ca <HAL_DMA_IRQHandler+0x1da>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 0208 	bic.w	r2, r2, #8
 80037d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037de:	223f      	movs	r2, #63	@ 0x3f
 80037e0:	409a      	lsls	r2, r3
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d07e      	beq.n	80038fc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	4798      	blx	r3
        }
        return;
 8003806:	e079      	b.n	80038fc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d01d      	beq.n	8003852 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d10d      	bne.n	8003840 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003828:	2b00      	cmp	r3, #0
 800382a:	d031      	beq.n	8003890 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	4798      	blx	r3
 8003834:	e02c      	b.n	8003890 <HAL_DMA_IRQHandler+0x2a0>
 8003836:	bf00      	nop
 8003838:	20000000 	.word	0x20000000
 800383c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003844:	2b00      	cmp	r3, #0
 8003846:	d023      	beq.n	8003890 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800384c:	6878      	ldr	r0, [r7, #4]
 800384e:	4798      	blx	r3
 8003850:	e01e      	b.n	8003890 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10f      	bne.n	8003880 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 0210 	bic.w	r2, r2, #16
 800386e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2201      	movs	r2, #1
 8003874:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2200      	movs	r2, #0
 800387c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003884:	2b00      	cmp	r3, #0
 8003886:	d003      	beq.n	8003890 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003894:	2b00      	cmp	r3, #0
 8003896:	d032      	beq.n	80038fe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d022      	beq.n	80038ea <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2205      	movs	r2, #5
 80038a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	681a      	ldr	r2, [r3, #0]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f022 0201 	bic.w	r2, r2, #1
 80038ba:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	3301      	adds	r3, #1
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d307      	bcc.n	80038d8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d1f2      	bne.n	80038bc <HAL_DMA_IRQHandler+0x2cc>
 80038d6:	e000      	b.n	80038da <HAL_DMA_IRQHandler+0x2ea>
          break;
 80038d8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2201      	movs	r2, #1
 80038de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d005      	beq.n	80038fe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	4798      	blx	r3
 80038fa:	e000      	b.n	80038fe <HAL_DMA_IRQHandler+0x30e>
        return;
 80038fc:	bf00      	nop
    }
  }
}
 80038fe:	3718      	adds	r7, #24
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	60f8      	str	r0, [r7, #12]
 800390c:	60b9      	str	r1, [r7, #8]
 800390e:	607a      	str	r2, [r7, #4]
 8003910:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003920:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	683a      	ldr	r2, [r7, #0]
 8003928:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	2b40      	cmp	r3, #64	@ 0x40
 8003930:	d108      	bne.n	8003944 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003942:	e007      	b.n	8003954 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	60da      	str	r2, [r3, #12]
}
 8003954:	bf00      	nop
 8003956:	3714      	adds	r7, #20
 8003958:	46bd      	mov	sp, r7
 800395a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395e:	4770      	bx	lr

08003960 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003960:	b480      	push	{r7}
 8003962:	b085      	sub	sp, #20
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	3b10      	subs	r3, #16
 8003970:	4a14      	ldr	r2, [pc, #80]	@ (80039c4 <DMA_CalcBaseAndBitshift+0x64>)
 8003972:	fba2 2303 	umull	r2, r3, r2, r3
 8003976:	091b      	lsrs	r3, r3, #4
 8003978:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800397a:	4a13      	ldr	r2, [pc, #76]	@ (80039c8 <DMA_CalcBaseAndBitshift+0x68>)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	4413      	add	r3, r2
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	461a      	mov	r2, r3
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2b03      	cmp	r3, #3
 800398c:	d909      	bls.n	80039a2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003996:	f023 0303 	bic.w	r3, r3, #3
 800399a:	1d1a      	adds	r2, r3, #4
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	659a      	str	r2, [r3, #88]	@ 0x58
 80039a0:	e007      	b.n	80039b2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80039aa:	f023 0303 	bic.w	r3, r3, #3
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3714      	adds	r7, #20
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr
 80039c2:	bf00      	nop
 80039c4:	aaaaaaab 	.word	0xaaaaaaab
 80039c8:	0800a558 	.word	0x0800a558

080039cc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039dc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	699b      	ldr	r3, [r3, #24]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11f      	bne.n	8003a26 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	2b03      	cmp	r3, #3
 80039ea:	d856      	bhi.n	8003a9a <DMA_CheckFifoParam+0xce>
 80039ec:	a201      	add	r2, pc, #4	@ (adr r2, 80039f4 <DMA_CheckFifoParam+0x28>)
 80039ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f2:	bf00      	nop
 80039f4:	08003a05 	.word	0x08003a05
 80039f8:	08003a17 	.word	0x08003a17
 80039fc:	08003a05 	.word	0x08003a05
 8003a00:	08003a9b 	.word	0x08003a9b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a08:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d046      	beq.n	8003a9e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e043      	b.n	8003a9e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a1a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a1e:	d140      	bne.n	8003aa2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a24:	e03d      	b.n	8003aa2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	699b      	ldr	r3, [r3, #24]
 8003a2a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a2e:	d121      	bne.n	8003a74 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	2b03      	cmp	r3, #3
 8003a34:	d837      	bhi.n	8003aa6 <DMA_CheckFifoParam+0xda>
 8003a36:	a201      	add	r2, pc, #4	@ (adr r2, 8003a3c <DMA_CheckFifoParam+0x70>)
 8003a38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3c:	08003a4d 	.word	0x08003a4d
 8003a40:	08003a53 	.word	0x08003a53
 8003a44:	08003a4d 	.word	0x08003a4d
 8003a48:	08003a65 	.word	0x08003a65
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	73fb      	strb	r3, [r7, #15]
      break;
 8003a50:	e030      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a56:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d025      	beq.n	8003aaa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a62:	e022      	b.n	8003aaa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a68:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003a6c:	d11f      	bne.n	8003aae <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003a72:	e01c      	b.n	8003aae <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b02      	cmp	r3, #2
 8003a78:	d903      	bls.n	8003a82 <DMA_CheckFifoParam+0xb6>
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	2b03      	cmp	r3, #3
 8003a7e:	d003      	beq.n	8003a88 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003a80:	e018      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	73fb      	strb	r3, [r7, #15]
      break;
 8003a86:	e015      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a8c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	73fb      	strb	r3, [r7, #15]
      break;
 8003a98:	e00b      	b.n	8003ab2 <DMA_CheckFifoParam+0xe6>
      break;
 8003a9a:	bf00      	nop
 8003a9c:	e00a      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003a9e:	bf00      	nop
 8003aa0:	e008      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa2:	bf00      	nop
 8003aa4:	e006      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aa6:	bf00      	nop
 8003aa8:	e004      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003aaa:	bf00      	nop
 8003aac:	e002      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003aae:	bf00      	nop
 8003ab0:	e000      	b.n	8003ab4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ab2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3714      	adds	r7, #20
 8003aba:	46bd      	mov	sp, r7
 8003abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac0:	4770      	bx	lr
 8003ac2:	bf00      	nop

08003ac4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	@ 0x24
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ace:	2300      	movs	r3, #0
 8003ad0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ada:	2300      	movs	r3, #0
 8003adc:	61fb      	str	r3, [r7, #28]
 8003ade:	e16b      	b.n	8003db8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	697a      	ldr	r2, [r7, #20]
 8003af0:	4013      	ands	r3, r2
 8003af2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003af4:	693a      	ldr	r2, [r7, #16]
 8003af6:	697b      	ldr	r3, [r7, #20]
 8003af8:	429a      	cmp	r2, r3
 8003afa:	f040 815a 	bne.w	8003db2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d005      	beq.n	8003b16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d130      	bne.n	8003b78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	2203      	movs	r2, #3
 8003b22:	fa02 f303 	lsl.w	r3, r2, r3
 8003b26:	43db      	mvns	r3, r3
 8003b28:	69ba      	ldr	r2, [r7, #24]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	68da      	ldr	r2, [r3, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	005b      	lsls	r3, r3, #1
 8003b36:	fa02 f303 	lsl.w	r3, r2, r3
 8003b3a:	69ba      	ldr	r2, [r7, #24]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	69ba      	ldr	r2, [r7, #24]
 8003b44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	fa02 f303 	lsl.w	r3, r2, r3
 8003b54:	43db      	mvns	r3, r3
 8003b56:	69ba      	ldr	r2, [r7, #24]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	091b      	lsrs	r3, r3, #4
 8003b62:	f003 0201 	and.w	r2, r3, #1
 8003b66:	69fb      	ldr	r3, [r7, #28]
 8003b68:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6c:	69ba      	ldr	r2, [r7, #24]
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	f003 0303 	and.w	r3, r3, #3
 8003b80:	2b03      	cmp	r3, #3
 8003b82:	d017      	beq.n	8003bb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	005b      	lsls	r3, r3, #1
 8003b8e:	2203      	movs	r2, #3
 8003b90:	fa02 f303 	lsl.w	r3, r2, r3
 8003b94:	43db      	mvns	r3, r3
 8003b96:	69ba      	ldr	r2, [r7, #24]
 8003b98:	4013      	ands	r3, r2
 8003b9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	689a      	ldr	r2, [r3, #8]
 8003ba0:	69fb      	ldr	r3, [r7, #28]
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba8:	69ba      	ldr	r2, [r7, #24]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	69ba      	ldr	r2, [r7, #24]
 8003bb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f003 0303 	and.w	r3, r3, #3
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	d123      	bne.n	8003c08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	08da      	lsrs	r2, r3, #3
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	3208      	adds	r2, #8
 8003bc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	f003 0307 	and.w	r3, r3, #7
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	220f      	movs	r2, #15
 8003bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bdc:	43db      	mvns	r3, r3
 8003bde:	69ba      	ldr	r2, [r7, #24]
 8003be0:	4013      	ands	r3, r2
 8003be2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	691a      	ldr	r2, [r3, #16]
 8003be8:	69fb      	ldr	r3, [r7, #28]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	009b      	lsls	r3, r3, #2
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	69ba      	ldr	r2, [r7, #24]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	08da      	lsrs	r2, r3, #3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3208      	adds	r2, #8
 8003c02:	69b9      	ldr	r1, [r7, #24]
 8003c04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c0e:	69fb      	ldr	r3, [r7, #28]
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	2203      	movs	r2, #3
 8003c14:	fa02 f303 	lsl.w	r3, r2, r3
 8003c18:	43db      	mvns	r3, r3
 8003c1a:	69ba      	ldr	r2, [r7, #24]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 0203 	and.w	r2, r3, #3
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	005b      	lsls	r3, r3, #1
 8003c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	69ba      	ldr	r2, [r7, #24]
 8003c3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 80b4 	beq.w	8003db2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
 8003c4e:	4b60      	ldr	r3, [pc, #384]	@ (8003dd0 <HAL_GPIO_Init+0x30c>)
 8003c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c52:	4a5f      	ldr	r2, [pc, #380]	@ (8003dd0 <HAL_GPIO_Init+0x30c>)
 8003c54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c58:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c5a:	4b5d      	ldr	r3, [pc, #372]	@ (8003dd0 <HAL_GPIO_Init+0x30c>)
 8003c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003c66:	4a5b      	ldr	r2, [pc, #364]	@ (8003dd4 <HAL_GPIO_Init+0x310>)
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	089b      	lsrs	r3, r3, #2
 8003c6c:	3302      	adds	r3, #2
 8003c6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	f003 0303 	and.w	r3, r3, #3
 8003c7a:	009b      	lsls	r3, r3, #2
 8003c7c:	220f      	movs	r2, #15
 8003c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c82:	43db      	mvns	r3, r3
 8003c84:	69ba      	ldr	r2, [r7, #24]
 8003c86:	4013      	ands	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a52      	ldr	r2, [pc, #328]	@ (8003dd8 <HAL_GPIO_Init+0x314>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d02b      	beq.n	8003cea <HAL_GPIO_Init+0x226>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a51      	ldr	r2, [pc, #324]	@ (8003ddc <HAL_GPIO_Init+0x318>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d025      	beq.n	8003ce6 <HAL_GPIO_Init+0x222>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a50      	ldr	r2, [pc, #320]	@ (8003de0 <HAL_GPIO_Init+0x31c>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d01f      	beq.n	8003ce2 <HAL_GPIO_Init+0x21e>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a4f      	ldr	r2, [pc, #316]	@ (8003de4 <HAL_GPIO_Init+0x320>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d019      	beq.n	8003cde <HAL_GPIO_Init+0x21a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a4e      	ldr	r2, [pc, #312]	@ (8003de8 <HAL_GPIO_Init+0x324>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d013      	beq.n	8003cda <HAL_GPIO_Init+0x216>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a4d      	ldr	r2, [pc, #308]	@ (8003dec <HAL_GPIO_Init+0x328>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d00d      	beq.n	8003cd6 <HAL_GPIO_Init+0x212>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a4c      	ldr	r2, [pc, #304]	@ (8003df0 <HAL_GPIO_Init+0x32c>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d007      	beq.n	8003cd2 <HAL_GPIO_Init+0x20e>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a4b      	ldr	r2, [pc, #300]	@ (8003df4 <HAL_GPIO_Init+0x330>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d101      	bne.n	8003cce <HAL_GPIO_Init+0x20a>
 8003cca:	2307      	movs	r3, #7
 8003ccc:	e00e      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cce:	2308      	movs	r3, #8
 8003cd0:	e00c      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cd2:	2306      	movs	r3, #6
 8003cd4:	e00a      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cd6:	2305      	movs	r3, #5
 8003cd8:	e008      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cda:	2304      	movs	r3, #4
 8003cdc:	e006      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cde:	2303      	movs	r3, #3
 8003ce0:	e004      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003ce2:	2302      	movs	r3, #2
 8003ce4:	e002      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e000      	b.n	8003cec <HAL_GPIO_Init+0x228>
 8003cea:	2300      	movs	r3, #0
 8003cec:	69fa      	ldr	r2, [r7, #28]
 8003cee:	f002 0203 	and.w	r2, r2, #3
 8003cf2:	0092      	lsls	r2, r2, #2
 8003cf4:	4093      	lsls	r3, r2
 8003cf6:	69ba      	ldr	r2, [r7, #24]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003cfc:	4935      	ldr	r1, [pc, #212]	@ (8003dd4 <HAL_GPIO_Init+0x310>)
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	089b      	lsrs	r3, r3, #2
 8003d02:	3302      	adds	r3, #2
 8003d04:	69ba      	ldr	r2, [r7, #24]
 8003d06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d0a:	4b3b      	ldr	r3, [pc, #236]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d2e:	4a32      	ldr	r2, [pc, #200]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d34:	4b30      	ldr	r3, [pc, #192]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	43db      	mvns	r3, r3
 8003d3e:	69ba      	ldr	r2, [r7, #24]
 8003d40:	4013      	ands	r3, r2
 8003d42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d003      	beq.n	8003d58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003d58:	4a27      	ldr	r2, [pc, #156]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003d5e:	4b26      	ldr	r3, [pc, #152]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d64:	693b      	ldr	r3, [r7, #16]
 8003d66:	43db      	mvns	r3, r3
 8003d68:	69ba      	ldr	r2, [r7, #24]
 8003d6a:	4013      	ands	r3, r2
 8003d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003d7a:	69ba      	ldr	r2, [r7, #24]
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003d82:	4a1d      	ldr	r2, [pc, #116]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003d88:	4b1b      	ldr	r3, [pc, #108]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	43db      	mvns	r3, r3
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	4013      	ands	r3, r2
 8003d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003da4:	69ba      	ldr	r2, [r7, #24]
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003dac:	4a12      	ldr	r2, [pc, #72]	@ (8003df8 <HAL_GPIO_Init+0x334>)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	3301      	adds	r3, #1
 8003db6:	61fb      	str	r3, [r7, #28]
 8003db8:	69fb      	ldr	r3, [r7, #28]
 8003dba:	2b0f      	cmp	r3, #15
 8003dbc:	f67f ae90 	bls.w	8003ae0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003dc0:	bf00      	nop
 8003dc2:	bf00      	nop
 8003dc4:	3724      	adds	r7, #36	@ 0x24
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	40013800 	.word	0x40013800
 8003dd8:	40020000 	.word	0x40020000
 8003ddc:	40020400 	.word	0x40020400
 8003de0:	40020800 	.word	0x40020800
 8003de4:	40020c00 	.word	0x40020c00
 8003de8:	40021000 	.word	0x40021000
 8003dec:	40021400 	.word	0x40021400
 8003df0:	40021800 	.word	0x40021800
 8003df4:	40021c00 	.word	0x40021c00
 8003df8:	40013c00 	.word	0x40013c00

08003dfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	807b      	strh	r3, [r7, #2]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e0c:	787b      	ldrb	r3, [r7, #1]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d003      	beq.n	8003e1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e12:	887a      	ldrh	r2, [r7, #2]
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e18:	e003      	b.n	8003e22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e1a:	887b      	ldrh	r3, [r7, #2]
 8003e1c:	041a      	lsls	r2, r3, #16
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	619a      	str	r2, [r3, #24]
}
 8003e22:	bf00      	nop
 8003e24:	370c      	adds	r7, #12
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr
	...

08003e30 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	4603      	mov	r3, r0
 8003e38:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003e3a:	4b08      	ldr	r3, [pc, #32]	@ (8003e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e3c:	695a      	ldr	r2, [r3, #20]
 8003e3e:	88fb      	ldrh	r3, [r7, #6]
 8003e40:	4013      	ands	r3, r2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d006      	beq.n	8003e54 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003e46:	4a05      	ldr	r2, [pc, #20]	@ (8003e5c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003e48:	88fb      	ldrh	r3, [r7, #6]
 8003e4a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003e4c:	88fb      	ldrh	r3, [r7, #6]
 8003e4e:	4618      	mov	r0, r3
 8003e50:	f000 f806 	bl	8003e60 <HAL_GPIO_EXTI_Callback>
  }
}
 8003e54:	bf00      	nop
 8003e56:	3708      	adds	r7, #8
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	40013c00 	.word	0x40013c00

08003e60 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003e6a:	bf00      	nop
 8003e6c:	370c      	adds	r7, #12
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
	...

08003e78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d101      	bne.n	8003e8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e12b      	b.n	80040e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d106      	bne.n	8003ea4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f7fe f80a 	bl	8001eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2224      	movs	r2, #36	@ 0x24
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f022 0201 	bic.w	r2, r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	681a      	ldr	r2, [r3, #0]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003eda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003edc:	f000 fd4c 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 8003ee0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	4a81      	ldr	r2, [pc, #516]	@ (80040ec <HAL_I2C_Init+0x274>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d807      	bhi.n	8003efc <HAL_I2C_Init+0x84>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a80      	ldr	r2, [pc, #512]	@ (80040f0 <HAL_I2C_Init+0x278>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	bf94      	ite	ls
 8003ef4:	2301      	movls	r3, #1
 8003ef6:	2300      	movhi	r3, #0
 8003ef8:	b2db      	uxtb	r3, r3
 8003efa:	e006      	b.n	8003f0a <HAL_I2C_Init+0x92>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	4a7d      	ldr	r2, [pc, #500]	@ (80040f4 <HAL_I2C_Init+0x27c>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	bf94      	ite	ls
 8003f04:	2301      	movls	r3, #1
 8003f06:	2300      	movhi	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d001      	beq.n	8003f12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e0e7      	b.n	80040e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	4a78      	ldr	r2, [pc, #480]	@ (80040f8 <HAL_I2C_Init+0x280>)
 8003f16:	fba2 2303 	umull	r2, r3, r2, r3
 8003f1a:	0c9b      	lsrs	r3, r3, #18
 8003f1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	4a6a      	ldr	r2, [pc, #424]	@ (80040ec <HAL_I2C_Init+0x274>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d802      	bhi.n	8003f4c <HAL_I2C_Init+0xd4>
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	e009      	b.n	8003f60 <HAL_I2C_Init+0xe8>
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003f52:	fb02 f303 	mul.w	r3, r2, r3
 8003f56:	4a69      	ldr	r2, [pc, #420]	@ (80040fc <HAL_I2C_Init+0x284>)
 8003f58:	fba2 2303 	umull	r2, r3, r2, r3
 8003f5c:	099b      	lsrs	r3, r3, #6
 8003f5e:	3301      	adds	r3, #1
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	6812      	ldr	r2, [r2, #0]
 8003f64:	430b      	orrs	r3, r1
 8003f66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	69db      	ldr	r3, [r3, #28]
 8003f6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003f72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	495c      	ldr	r1, [pc, #368]	@ (80040ec <HAL_I2C_Init+0x274>)
 8003f7c:	428b      	cmp	r3, r1
 8003f7e:	d819      	bhi.n	8003fb4 <HAL_I2C_Init+0x13c>
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	1e59      	subs	r1, r3, #1
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f8e:	1c59      	adds	r1, r3, #1
 8003f90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003f94:	400b      	ands	r3, r1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_I2C_Init+0x138>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	1e59      	subs	r1, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fa8:	3301      	adds	r3, #1
 8003faa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fae:	e051      	b.n	8004054 <HAL_I2C_Init+0x1dc>
 8003fb0:	2304      	movs	r3, #4
 8003fb2:	e04f      	b.n	8004054 <HAL_I2C_Init+0x1dc>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d111      	bne.n	8003fe0 <HAL_I2C_Init+0x168>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	1e58      	subs	r0, r3, #1
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6859      	ldr	r1, [r3, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	005b      	lsls	r3, r3, #1
 8003fc8:	440b      	add	r3, r1
 8003fca:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fce:	3301      	adds	r3, #1
 8003fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	e012      	b.n	8004006 <HAL_I2C_Init+0x18e>
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	1e58      	subs	r0, r3, #1
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6859      	ldr	r1, [r3, #4]
 8003fe8:	460b      	mov	r3, r1
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	440b      	add	r3, r1
 8003fee:	0099      	lsls	r1, r3, #2
 8003ff0:	440b      	add	r3, r1
 8003ff2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003ff6:	3301      	adds	r3, #1
 8003ff8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	bf0c      	ite	eq
 8004000:	2301      	moveq	r3, #1
 8004002:	2300      	movne	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_I2C_Init+0x196>
 800400a:	2301      	movs	r3, #1
 800400c:	e022      	b.n	8004054 <HAL_I2C_Init+0x1dc>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d10e      	bne.n	8004034 <HAL_I2C_Init+0x1bc>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	1e58      	subs	r0, r3, #1
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6859      	ldr	r1, [r3, #4]
 800401e:	460b      	mov	r3, r1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	440b      	add	r3, r1
 8004024:	fbb0 f3f3 	udiv	r3, r0, r3
 8004028:	3301      	adds	r3, #1
 800402a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800402e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004032:	e00f      	b.n	8004054 <HAL_I2C_Init+0x1dc>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	0099      	lsls	r1, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	fbb0 f3f3 	udiv	r3, r0, r3
 800404a:	3301      	adds	r3, #1
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004054:	6879      	ldr	r1, [r7, #4]
 8004056:	6809      	ldr	r1, [r1, #0]
 8004058:	4313      	orrs	r3, r2
 800405a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69da      	ldr	r2, [r3, #28]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a1b      	ldr	r3, [r3, #32]
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	430a      	orrs	r2, r1
 8004076:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004082:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004086:	687a      	ldr	r2, [r7, #4]
 8004088:	6911      	ldr	r1, [r2, #16]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	68d2      	ldr	r2, [r2, #12]
 800408e:	4311      	orrs	r1, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	430b      	orrs	r3, r1
 8004096:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68db      	ldr	r3, [r3, #12]
 800409e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	695a      	ldr	r2, [r3, #20]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	699b      	ldr	r3, [r3, #24]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f042 0201 	orr.w	r2, r2, #1
 80040c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2200      	movs	r2, #0
 80040d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80040e0:	2300      	movs	r3, #0
}
 80040e2:	4618      	mov	r0, r3
 80040e4:	3710      	adds	r7, #16
 80040e6:	46bd      	mov	sp, r7
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	bf00      	nop
 80040ec:	000186a0 	.word	0x000186a0
 80040f0:	001e847f 	.word	0x001e847f
 80040f4:	003d08ff 	.word	0x003d08ff
 80040f8:	431bde83 	.word	0x431bde83
 80040fc:	10624dd3 	.word	0x10624dd3

08004100 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b086      	sub	sp, #24
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	e267      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d075      	beq.n	800420a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800411e:	4b88      	ldr	r3, [pc, #544]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 030c 	and.w	r3, r3, #12
 8004126:	2b04      	cmp	r3, #4
 8004128:	d00c      	beq.n	8004144 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800412a:	4b85      	ldr	r3, [pc, #532]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004132:	2b08      	cmp	r3, #8
 8004134:	d112      	bne.n	800415c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004136:	4b82      	ldr	r3, [pc, #520]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800413e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004142:	d10b      	bne.n	800415c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004144:	4b7e      	ldr	r3, [pc, #504]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d05b      	beq.n	8004208 <HAL_RCC_OscConfig+0x108>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d157      	bne.n	8004208 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004158:	2301      	movs	r3, #1
 800415a:	e242      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004164:	d106      	bne.n	8004174 <HAL_RCC_OscConfig+0x74>
 8004166:	4b76      	ldr	r3, [pc, #472]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a75      	ldr	r2, [pc, #468]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e01d      	b.n	80041b0 <HAL_RCC_OscConfig+0xb0>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800417c:	d10c      	bne.n	8004198 <HAL_RCC_OscConfig+0x98>
 800417e:	4b70      	ldr	r3, [pc, #448]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a6f      	ldr	r2, [pc, #444]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004184:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004188:	6013      	str	r3, [r2, #0]
 800418a:	4b6d      	ldr	r3, [pc, #436]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4a6c      	ldr	r2, [pc, #432]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004190:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00b      	b.n	80041b0 <HAL_RCC_OscConfig+0xb0>
 8004198:	4b69      	ldr	r3, [pc, #420]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a68      	ldr	r2, [pc, #416]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800419e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041a2:	6013      	str	r3, [r2, #0]
 80041a4:	4b66      	ldr	r3, [pc, #408]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a65      	ldr	r2, [pc, #404]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d013      	beq.n	80041e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041b8:	f7fe fc30 	bl	8002a1c <HAL_GetTick>
 80041bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041be:	e008      	b.n	80041d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c0:	f7fe fc2c 	bl	8002a1c <HAL_GetTick>
 80041c4:	4602      	mov	r2, r0
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	1ad3      	subs	r3, r2, r3
 80041ca:	2b64      	cmp	r3, #100	@ 0x64
 80041cc:	d901      	bls.n	80041d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e207      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041d2:	4b5b      	ldr	r3, [pc, #364]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d0f0      	beq.n	80041c0 <HAL_RCC_OscConfig+0xc0>
 80041de:	e014      	b.n	800420a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fe fc1c 	bl	8002a1c <HAL_GetTick>
 80041e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041e6:	e008      	b.n	80041fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041e8:	f7fe fc18 	bl	8002a1c <HAL_GetTick>
 80041ec:	4602      	mov	r2, r0
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	1ad3      	subs	r3, r2, r3
 80041f2:	2b64      	cmp	r3, #100	@ 0x64
 80041f4:	d901      	bls.n	80041fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041f6:	2303      	movs	r3, #3
 80041f8:	e1f3      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041fa:	4b51      	ldr	r3, [pc, #324]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1f0      	bne.n	80041e8 <HAL_RCC_OscConfig+0xe8>
 8004206:	e000      	b.n	800420a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004208:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f003 0302 	and.w	r3, r3, #2
 8004212:	2b00      	cmp	r3, #0
 8004214:	d063      	beq.n	80042de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004216:	4b4a      	ldr	r3, [pc, #296]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004222:	4b47      	ldr	r3, [pc, #284]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004224:	689b      	ldr	r3, [r3, #8]
 8004226:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800422a:	2b08      	cmp	r3, #8
 800422c:	d11c      	bne.n	8004268 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800422e:	4b44      	ldr	r3, [pc, #272]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004230:	685b      	ldr	r3, [r3, #4]
 8004232:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004236:	2b00      	cmp	r3, #0
 8004238:	d116      	bne.n	8004268 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800423a:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f003 0302 	and.w	r3, r3, #2
 8004242:	2b00      	cmp	r3, #0
 8004244:	d005      	beq.n	8004252 <HAL_RCC_OscConfig+0x152>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d001      	beq.n	8004252 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e1c7      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004252:	4b3b      	ldr	r3, [pc, #236]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	691b      	ldr	r3, [r3, #16]
 800425e:	00db      	lsls	r3, r3, #3
 8004260:	4937      	ldr	r1, [pc, #220]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004262:	4313      	orrs	r3, r2
 8004264:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004266:	e03a      	b.n	80042de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d020      	beq.n	80042b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004270:	4b34      	ldr	r3, [pc, #208]	@ (8004344 <HAL_RCC_OscConfig+0x244>)
 8004272:	2201      	movs	r2, #1
 8004274:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004276:	f7fe fbd1 	bl	8002a1c <HAL_GetTick>
 800427a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800427c:	e008      	b.n	8004290 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800427e:	f7fe fbcd 	bl	8002a1c <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e1a8      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004290:	4b2b      	ldr	r3, [pc, #172]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 0302 	and.w	r3, r3, #2
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800429c:	4b28      	ldr	r3, [pc, #160]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	4925      	ldr	r1, [pc, #148]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80042ac:	4313      	orrs	r3, r2
 80042ae:	600b      	str	r3, [r1, #0]
 80042b0:	e015      	b.n	80042de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042b2:	4b24      	ldr	r3, [pc, #144]	@ (8004344 <HAL_RCC_OscConfig+0x244>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b8:	f7fe fbb0 	bl	8002a1c <HAL_GetTick>
 80042bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042be:	e008      	b.n	80042d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042c0:	f7fe fbac 	bl	8002a1c <HAL_GetTick>
 80042c4:	4602      	mov	r2, r0
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d901      	bls.n	80042d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042ce:	2303      	movs	r3, #3
 80042d0:	e187      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042d2:	4b1b      	ldr	r3, [pc, #108]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d1f0      	bne.n	80042c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f003 0308 	and.w	r3, r3, #8
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d036      	beq.n	8004358 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d016      	beq.n	8004320 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042f2:	4b15      	ldr	r3, [pc, #84]	@ (8004348 <HAL_RCC_OscConfig+0x248>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042f8:	f7fe fb90 	bl	8002a1c <HAL_GetTick>
 80042fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042fe:	e008      	b.n	8004312 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004300:	f7fe fb8c 	bl	8002a1c <HAL_GetTick>
 8004304:	4602      	mov	r2, r0
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	2b02      	cmp	r3, #2
 800430c:	d901      	bls.n	8004312 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800430e:	2303      	movs	r3, #3
 8004310:	e167      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004312:	4b0b      	ldr	r3, [pc, #44]	@ (8004340 <HAL_RCC_OscConfig+0x240>)
 8004314:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004316:	f003 0302 	and.w	r3, r3, #2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d0f0      	beq.n	8004300 <HAL_RCC_OscConfig+0x200>
 800431e:	e01b      	b.n	8004358 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004320:	4b09      	ldr	r3, [pc, #36]	@ (8004348 <HAL_RCC_OscConfig+0x248>)
 8004322:	2200      	movs	r2, #0
 8004324:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004326:	f7fe fb79 	bl	8002a1c <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800432c:	e00e      	b.n	800434c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800432e:	f7fe fb75 	bl	8002a1c <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d907      	bls.n	800434c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e150      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
 8004340:	40023800 	.word	0x40023800
 8004344:	42470000 	.word	0x42470000
 8004348:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800434c:	4b88      	ldr	r3, [pc, #544]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800434e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004350:	f003 0302 	and.w	r3, r3, #2
 8004354:	2b00      	cmp	r3, #0
 8004356:	d1ea      	bne.n	800432e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0304 	and.w	r3, r3, #4
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8097 	beq.w	8004494 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800436a:	4b81      	ldr	r3, [pc, #516]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800436c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10f      	bne.n	8004396 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004376:	2300      	movs	r3, #0
 8004378:	60bb      	str	r3, [r7, #8]
 800437a:	4b7d      	ldr	r3, [pc, #500]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800437c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800437e:	4a7c      	ldr	r2, [pc, #496]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004380:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004384:	6413      	str	r3, [r2, #64]	@ 0x40
 8004386:	4b7a      	ldr	r3, [pc, #488]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800438e:	60bb      	str	r3, [r7, #8]
 8004390:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004392:	2301      	movs	r3, #1
 8004394:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004396:	4b77      	ldr	r3, [pc, #476]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d118      	bne.n	80043d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043a2:	4b74      	ldr	r3, [pc, #464]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a73      	ldr	r2, [pc, #460]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 80043a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ae:	f7fe fb35 	bl	8002a1c <HAL_GetTick>
 80043b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043b4:	e008      	b.n	80043c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043b6:	f7fe fb31 	bl	8002a1c <HAL_GetTick>
 80043ba:	4602      	mov	r2, r0
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d901      	bls.n	80043c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80043c4:	2303      	movs	r3, #3
 80043c6:	e10c      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043c8:	4b6a      	ldr	r3, [pc, #424]	@ (8004574 <HAL_RCC_OscConfig+0x474>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d0f0      	beq.n	80043b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689b      	ldr	r3, [r3, #8]
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d106      	bne.n	80043ea <HAL_RCC_OscConfig+0x2ea>
 80043dc:	4b64      	ldr	r3, [pc, #400]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043e0:	4a63      	ldr	r2, [pc, #396]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043e2:	f043 0301 	orr.w	r3, r3, #1
 80043e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80043e8:	e01c      	b.n	8004424 <HAL_RCC_OscConfig+0x324>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b05      	cmp	r3, #5
 80043f0:	d10c      	bne.n	800440c <HAL_RCC_OscConfig+0x30c>
 80043f2:	4b5f      	ldr	r3, [pc, #380]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80043f6:	4a5e      	ldr	r2, [pc, #376]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80043f8:	f043 0304 	orr.w	r3, r3, #4
 80043fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80043fe:	4b5c      	ldr	r3, [pc, #368]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004400:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004402:	4a5b      	ldr	r2, [pc, #364]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004404:	f043 0301 	orr.w	r3, r3, #1
 8004408:	6713      	str	r3, [r2, #112]	@ 0x70
 800440a:	e00b      	b.n	8004424 <HAL_RCC_OscConfig+0x324>
 800440c:	4b58      	ldr	r3, [pc, #352]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800440e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004410:	4a57      	ldr	r2, [pc, #348]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004412:	f023 0301 	bic.w	r3, r3, #1
 8004416:	6713      	str	r3, [r2, #112]	@ 0x70
 8004418:	4b55      	ldr	r3, [pc, #340]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441c:	4a54      	ldr	r2, [pc, #336]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800441e:	f023 0304 	bic.w	r3, r3, #4
 8004422:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d015      	beq.n	8004458 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800442c:	f7fe faf6 	bl	8002a1c <HAL_GetTick>
 8004430:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004432:	e00a      	b.n	800444a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004434:	f7fe faf2 	bl	8002a1c <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	693b      	ldr	r3, [r7, #16]
 800443c:	1ad3      	subs	r3, r2, r3
 800443e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004442:	4293      	cmp	r3, r2
 8004444:	d901      	bls.n	800444a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e0cb      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800444a:	4b49      	ldr	r3, [pc, #292]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800444c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d0ee      	beq.n	8004434 <HAL_RCC_OscConfig+0x334>
 8004456:	e014      	b.n	8004482 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004458:	f7fe fae0 	bl	8002a1c <HAL_GetTick>
 800445c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800445e:	e00a      	b.n	8004476 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004460:	f7fe fadc 	bl	8002a1c <HAL_GetTick>
 8004464:	4602      	mov	r2, r0
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	1ad3      	subs	r3, r2, r3
 800446a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800446e:	4293      	cmp	r3, r2
 8004470:	d901      	bls.n	8004476 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004472:	2303      	movs	r3, #3
 8004474:	e0b5      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004476:	4b3e      	ldr	r3, [pc, #248]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004478:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800447a:	f003 0302 	and.w	r3, r3, #2
 800447e:	2b00      	cmp	r3, #0
 8004480:	d1ee      	bne.n	8004460 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d105      	bne.n	8004494 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004488:	4b39      	ldr	r3, [pc, #228]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800448a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800448c:	4a38      	ldr	r2, [pc, #224]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800448e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004492:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	699b      	ldr	r3, [r3, #24]
 8004498:	2b00      	cmp	r3, #0
 800449a:	f000 80a1 	beq.w	80045e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800449e:	4b34      	ldr	r3, [pc, #208]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f003 030c 	and.w	r3, r3, #12
 80044a6:	2b08      	cmp	r3, #8
 80044a8:	d05c      	beq.n	8004564 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	2b02      	cmp	r3, #2
 80044b0:	d141      	bne.n	8004536 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044b2:	4b31      	ldr	r3, [pc, #196]	@ (8004578 <HAL_RCC_OscConfig+0x478>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044b8:	f7fe fab0 	bl	8002a1c <HAL_GetTick>
 80044bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044be:	e008      	b.n	80044d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044c0:	f7fe faac 	bl	8002a1c <HAL_GetTick>
 80044c4:	4602      	mov	r2, r0
 80044c6:	693b      	ldr	r3, [r7, #16]
 80044c8:	1ad3      	subs	r3, r2, r3
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d901      	bls.n	80044d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80044ce:	2303      	movs	r3, #3
 80044d0:	e087      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044d2:	4b27      	ldr	r3, [pc, #156]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d1f0      	bne.n	80044c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69da      	ldr	r2, [r3, #28]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	431a      	orrs	r2, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ec:	019b      	lsls	r3, r3, #6
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044f4:	085b      	lsrs	r3, r3, #1
 80044f6:	3b01      	subs	r3, #1
 80044f8:	041b      	lsls	r3, r3, #16
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004500:	061b      	lsls	r3, r3, #24
 8004502:	491b      	ldr	r1, [pc, #108]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004504:	4313      	orrs	r3, r2
 8004506:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004508:	4b1b      	ldr	r3, [pc, #108]	@ (8004578 <HAL_RCC_OscConfig+0x478>)
 800450a:	2201      	movs	r2, #1
 800450c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800450e:	f7fe fa85 	bl	8002a1c <HAL_GetTick>
 8004512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004514:	e008      	b.n	8004528 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004516:	f7fe fa81 	bl	8002a1c <HAL_GetTick>
 800451a:	4602      	mov	r2, r0
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	1ad3      	subs	r3, r2, r3
 8004520:	2b02      	cmp	r3, #2
 8004522:	d901      	bls.n	8004528 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004524:	2303      	movs	r3, #3
 8004526:	e05c      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004528:	4b11      	ldr	r3, [pc, #68]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004530:	2b00      	cmp	r3, #0
 8004532:	d0f0      	beq.n	8004516 <HAL_RCC_OscConfig+0x416>
 8004534:	e054      	b.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004536:	4b10      	ldr	r3, [pc, #64]	@ (8004578 <HAL_RCC_OscConfig+0x478>)
 8004538:	2200      	movs	r2, #0
 800453a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453c:	f7fe fa6e 	bl	8002a1c <HAL_GetTick>
 8004540:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004542:	e008      	b.n	8004556 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004544:	f7fe fa6a 	bl	8002a1c <HAL_GetTick>
 8004548:	4602      	mov	r2, r0
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	1ad3      	subs	r3, r2, r3
 800454e:	2b02      	cmp	r3, #2
 8004550:	d901      	bls.n	8004556 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004552:	2303      	movs	r3, #3
 8004554:	e045      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004556:	4b06      	ldr	r3, [pc, #24]	@ (8004570 <HAL_RCC_OscConfig+0x470>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1f0      	bne.n	8004544 <HAL_RCC_OscConfig+0x444>
 8004562:	e03d      	b.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	699b      	ldr	r3, [r3, #24]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d107      	bne.n	800457c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800456c:	2301      	movs	r3, #1
 800456e:	e038      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
 8004570:	40023800 	.word	0x40023800
 8004574:	40007000 	.word	0x40007000
 8004578:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800457c:	4b1b      	ldr	r3, [pc, #108]	@ (80045ec <HAL_RCC_OscConfig+0x4ec>)
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	699b      	ldr	r3, [r3, #24]
 8004586:	2b01      	cmp	r3, #1
 8004588:	d028      	beq.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004594:	429a      	cmp	r2, r3
 8004596:	d121      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045a2:	429a      	cmp	r2, r3
 80045a4:	d11a      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045ac:	4013      	ands	r3, r2
 80045ae:	687a      	ldr	r2, [r7, #4]
 80045b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d111      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	085b      	lsrs	r3, r3, #1
 80045c4:	3b01      	subs	r3, #1
 80045c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d107      	bne.n	80045dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045d8:	429a      	cmp	r2, r3
 80045da:	d001      	beq.n	80045e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e000      	b.n	80045e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3718      	adds	r7, #24
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bd80      	pop	{r7, pc}
 80045ea:	bf00      	nop
 80045ec:	40023800 	.word	0x40023800

080045f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e0cc      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004604:	4b68      	ldr	r3, [pc, #416]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0307 	and.w	r3, r3, #7
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	429a      	cmp	r2, r3
 8004610:	d90c      	bls.n	800462c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004612:	4b65      	ldr	r3, [pc, #404]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004614:	683a      	ldr	r2, [r7, #0]
 8004616:	b2d2      	uxtb	r2, r2
 8004618:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800461a:	4b63      	ldr	r3, [pc, #396]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0307 	and.w	r3, r3, #7
 8004622:	683a      	ldr	r2, [r7, #0]
 8004624:	429a      	cmp	r2, r3
 8004626:	d001      	beq.n	800462c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e0b8      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0302 	and.w	r3, r3, #2
 8004634:	2b00      	cmp	r3, #0
 8004636:	d020      	beq.n	800467a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d005      	beq.n	8004650 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004644:	4b59      	ldr	r3, [pc, #356]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	4a58      	ldr	r2, [pc, #352]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800464a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800464e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0308 	and.w	r3, r3, #8
 8004658:	2b00      	cmp	r3, #0
 800465a:	d005      	beq.n	8004668 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800465c:	4b53      	ldr	r3, [pc, #332]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	4a52      	ldr	r2, [pc, #328]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004662:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004666:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004668:	4b50      	ldr	r3, [pc, #320]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800466a:	689b      	ldr	r3, [r3, #8]
 800466c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	689b      	ldr	r3, [r3, #8]
 8004674:	494d      	ldr	r1, [pc, #308]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004676:	4313      	orrs	r3, r2
 8004678:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d044      	beq.n	8004710 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	2b01      	cmp	r3, #1
 800468c:	d107      	bne.n	800469e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800468e:	4b47      	ldr	r3, [pc, #284]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004696:	2b00      	cmp	r3, #0
 8004698:	d119      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e07f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	2b02      	cmp	r3, #2
 80046a4:	d003      	beq.n	80046ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046aa:	2b03      	cmp	r3, #3
 80046ac:	d107      	bne.n	80046be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ae:	4b3f      	ldr	r3, [pc, #252]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d109      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ba:	2301      	movs	r3, #1
 80046bc:	e06f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046be:	4b3b      	ldr	r3, [pc, #236]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0302 	and.w	r3, r3, #2
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046ca:	2301      	movs	r3, #1
 80046cc:	e067      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046ce:	4b37      	ldr	r3, [pc, #220]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f023 0203 	bic.w	r2, r3, #3
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	4934      	ldr	r1, [pc, #208]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	4313      	orrs	r3, r2
 80046de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046e0:	f7fe f99c 	bl	8002a1c <HAL_GetTick>
 80046e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046e6:	e00a      	b.n	80046fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046e8:	f7fe f998 	bl	8002a1c <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e04f      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046fe:	4b2b      	ldr	r3, [pc, #172]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	f003 020c 	and.w	r2, r3, #12
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	429a      	cmp	r2, r3
 800470e:	d1eb      	bne.n	80046e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004710:	4b25      	ldr	r3, [pc, #148]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0307 	and.w	r3, r3, #7
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	429a      	cmp	r2, r3
 800471c:	d20c      	bcs.n	8004738 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800471e:	4b22      	ldr	r3, [pc, #136]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004720:	683a      	ldr	r2, [r7, #0]
 8004722:	b2d2      	uxtb	r2, r2
 8004724:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004726:	4b20      	ldr	r3, [pc, #128]	@ (80047a8 <HAL_RCC_ClockConfig+0x1b8>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	683a      	ldr	r2, [r7, #0]
 8004730:	429a      	cmp	r2, r3
 8004732:	d001      	beq.n	8004738 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004734:	2301      	movs	r3, #1
 8004736:	e032      	b.n	800479e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d008      	beq.n	8004756 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004744:	4b19      	ldr	r3, [pc, #100]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004746:	689b      	ldr	r3, [r3, #8]
 8004748:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	68db      	ldr	r3, [r3, #12]
 8004750:	4916      	ldr	r1, [pc, #88]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004752:	4313      	orrs	r3, r2
 8004754:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0308 	and.w	r3, r3, #8
 800475e:	2b00      	cmp	r3, #0
 8004760:	d009      	beq.n	8004776 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004762:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	691b      	ldr	r3, [r3, #16]
 800476e:	00db      	lsls	r3, r3, #3
 8004770:	490e      	ldr	r1, [pc, #56]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 8004772:	4313      	orrs	r3, r2
 8004774:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004776:	f000 f82d 	bl	80047d4 <HAL_RCC_GetSysClockFreq>
 800477a:	4602      	mov	r2, r0
 800477c:	4b0b      	ldr	r3, [pc, #44]	@ (80047ac <HAL_RCC_ClockConfig+0x1bc>)
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	091b      	lsrs	r3, r3, #4
 8004782:	f003 030f 	and.w	r3, r3, #15
 8004786:	490a      	ldr	r1, [pc, #40]	@ (80047b0 <HAL_RCC_ClockConfig+0x1c0>)
 8004788:	5ccb      	ldrb	r3, [r1, r3]
 800478a:	fa22 f303 	lsr.w	r3, r2, r3
 800478e:	4a09      	ldr	r2, [pc, #36]	@ (80047b4 <HAL_RCC_ClockConfig+0x1c4>)
 8004790:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <HAL_RCC_ClockConfig+0x1c8>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4618      	mov	r0, r3
 8004798:	f7fe f8fc 	bl	8002994 <HAL_InitTick>

  return HAL_OK;
 800479c:	2300      	movs	r3, #0
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	40023c00 	.word	0x40023c00
 80047ac:	40023800 	.word	0x40023800
 80047b0:	0800a540 	.word	0x0800a540
 80047b4:	20000000 	.word	0x20000000
 80047b8:	20000004 	.word	0x20000004

080047bc <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80047c0:	4b03      	ldr	r3, [pc, #12]	@ (80047d0 <HAL_RCC_EnableCSS+0x14>)
 80047c2:	2201      	movs	r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
}
 80047c6:	bf00      	nop
 80047c8:	46bd      	mov	sp, r7
 80047ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ce:	4770      	bx	lr
 80047d0:	4247004c 	.word	0x4247004c

080047d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047d8:	b090      	sub	sp, #64	@ 0x40
 80047da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047dc:	2300      	movs	r3, #0
 80047de:	637b      	str	r3, [r7, #52]	@ 0x34
 80047e0:	2300      	movs	r3, #0
 80047e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80047e4:	2300      	movs	r3, #0
 80047e6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80047e8:	2300      	movs	r3, #0
 80047ea:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047ec:	4b59      	ldr	r3, [pc, #356]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 030c 	and.w	r3, r3, #12
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	d00d      	beq.n	8004814 <HAL_RCC_GetSysClockFreq+0x40>
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	f200 80a1 	bhi.w	8004940 <HAL_RCC_GetSysClockFreq+0x16c>
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d002      	beq.n	8004808 <HAL_RCC_GetSysClockFreq+0x34>
 8004802:	2b04      	cmp	r3, #4
 8004804:	d003      	beq.n	800480e <HAL_RCC_GetSysClockFreq+0x3a>
 8004806:	e09b      	b.n	8004940 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004808:	4b53      	ldr	r3, [pc, #332]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x184>)
 800480a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800480c:	e09b      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800480e:	4b53      	ldr	r3, [pc, #332]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 8004810:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004812:	e098      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004814:	4b4f      	ldr	r3, [pc, #316]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800481c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800481e:	4b4d      	ldr	r3, [pc, #308]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d028      	beq.n	800487c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800482a:	4b4a      	ldr	r3, [pc, #296]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	099b      	lsrs	r3, r3, #6
 8004830:	2200      	movs	r2, #0
 8004832:	623b      	str	r3, [r7, #32]
 8004834:	627a      	str	r2, [r7, #36]	@ 0x24
 8004836:	6a3b      	ldr	r3, [r7, #32]
 8004838:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800483c:	2100      	movs	r1, #0
 800483e:	4b47      	ldr	r3, [pc, #284]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 8004840:	fb03 f201 	mul.w	r2, r3, r1
 8004844:	2300      	movs	r3, #0
 8004846:	fb00 f303 	mul.w	r3, r0, r3
 800484a:	4413      	add	r3, r2
 800484c:	4a43      	ldr	r2, [pc, #268]	@ (800495c <HAL_RCC_GetSysClockFreq+0x188>)
 800484e:	fba0 1202 	umull	r1, r2, r0, r2
 8004852:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004854:	460a      	mov	r2, r1
 8004856:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485a:	4413      	add	r3, r2
 800485c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800485e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004860:	2200      	movs	r2, #0
 8004862:	61bb      	str	r3, [r7, #24]
 8004864:	61fa      	str	r2, [r7, #28]
 8004866:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800486a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800486e:	f7fb fcff 	bl	8000270 <__aeabi_uldivmod>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4613      	mov	r3, r2
 8004878:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800487a:	e053      	b.n	8004924 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800487c:	4b35      	ldr	r3, [pc, #212]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	099b      	lsrs	r3, r3, #6
 8004882:	2200      	movs	r2, #0
 8004884:	613b      	str	r3, [r7, #16]
 8004886:	617a      	str	r2, [r7, #20]
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800488e:	f04f 0b00 	mov.w	fp, #0
 8004892:	4652      	mov	r2, sl
 8004894:	465b      	mov	r3, fp
 8004896:	f04f 0000 	mov.w	r0, #0
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	0159      	lsls	r1, r3, #5
 80048a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048a4:	0150      	lsls	r0, r2, #5
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	ebb2 080a 	subs.w	r8, r2, sl
 80048ae:	eb63 090b 	sbc.w	r9, r3, fp
 80048b2:	f04f 0200 	mov.w	r2, #0
 80048b6:	f04f 0300 	mov.w	r3, #0
 80048ba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048be:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048c2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048c6:	ebb2 0408 	subs.w	r4, r2, r8
 80048ca:	eb63 0509 	sbc.w	r5, r3, r9
 80048ce:	f04f 0200 	mov.w	r2, #0
 80048d2:	f04f 0300 	mov.w	r3, #0
 80048d6:	00eb      	lsls	r3, r5, #3
 80048d8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80048dc:	00e2      	lsls	r2, r4, #3
 80048de:	4614      	mov	r4, r2
 80048e0:	461d      	mov	r5, r3
 80048e2:	eb14 030a 	adds.w	r3, r4, sl
 80048e6:	603b      	str	r3, [r7, #0]
 80048e8:	eb45 030b 	adc.w	r3, r5, fp
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	f04f 0200 	mov.w	r2, #0
 80048f2:	f04f 0300 	mov.w	r3, #0
 80048f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80048fa:	4629      	mov	r1, r5
 80048fc:	028b      	lsls	r3, r1, #10
 80048fe:	4621      	mov	r1, r4
 8004900:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004904:	4621      	mov	r1, r4
 8004906:	028a      	lsls	r2, r1, #10
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800490e:	2200      	movs	r2, #0
 8004910:	60bb      	str	r3, [r7, #8]
 8004912:	60fa      	str	r2, [r7, #12]
 8004914:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004918:	f7fb fcaa 	bl	8000270 <__aeabi_uldivmod>
 800491c:	4602      	mov	r2, r0
 800491e:	460b      	mov	r3, r1
 8004920:	4613      	mov	r3, r2
 8004922:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004924:	4b0b      	ldr	r3, [pc, #44]	@ (8004954 <HAL_RCC_GetSysClockFreq+0x180>)
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	0c1b      	lsrs	r3, r3, #16
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	3301      	adds	r3, #1
 8004930:	005b      	lsls	r3, r3, #1
 8004932:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004934:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004936:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004938:	fbb2 f3f3 	udiv	r3, r2, r3
 800493c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800493e:	e002      	b.n	8004946 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004940:	4b05      	ldr	r3, [pc, #20]	@ (8004958 <HAL_RCC_GetSysClockFreq+0x184>)
 8004942:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004944:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004948:	4618      	mov	r0, r3
 800494a:	3740      	adds	r7, #64	@ 0x40
 800494c:	46bd      	mov	sp, r7
 800494e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004952:	bf00      	nop
 8004954:	40023800 	.word	0x40023800
 8004958:	00f42400 	.word	0x00f42400
 800495c:	00b71b00 	.word	0x00b71b00

08004960 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004960:	b480      	push	{r7}
 8004962:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004964:	4b03      	ldr	r3, [pc, #12]	@ (8004974 <HAL_RCC_GetHCLKFreq+0x14>)
 8004966:	681b      	ldr	r3, [r3, #0]
}
 8004968:	4618      	mov	r0, r3
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr
 8004972:	bf00      	nop
 8004974:	20000000 	.word	0x20000000

08004978 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800497c:	f7ff fff0 	bl	8004960 <HAL_RCC_GetHCLKFreq>
 8004980:	4602      	mov	r2, r0
 8004982:	4b05      	ldr	r3, [pc, #20]	@ (8004998 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004984:	689b      	ldr	r3, [r3, #8]
 8004986:	0a9b      	lsrs	r3, r3, #10
 8004988:	f003 0307 	and.w	r3, r3, #7
 800498c:	4903      	ldr	r1, [pc, #12]	@ (800499c <HAL_RCC_GetPCLK1Freq+0x24>)
 800498e:	5ccb      	ldrb	r3, [r1, r3]
 8004990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004994:	4618      	mov	r0, r3
 8004996:	bd80      	pop	{r7, pc}
 8004998:	40023800 	.word	0x40023800
 800499c:	0800a550 	.word	0x0800a550

080049a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049a4:	f7ff ffdc 	bl	8004960 <HAL_RCC_GetHCLKFreq>
 80049a8:	4602      	mov	r2, r0
 80049aa:	4b05      	ldr	r3, [pc, #20]	@ (80049c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80049ac:	689b      	ldr	r3, [r3, #8]
 80049ae:	0b5b      	lsrs	r3, r3, #13
 80049b0:	f003 0307 	and.w	r3, r3, #7
 80049b4:	4903      	ldr	r1, [pc, #12]	@ (80049c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b6:	5ccb      	ldrb	r3, [r1, r3]
 80049b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049bc:	4618      	mov	r0, r3
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	40023800 	.word	0x40023800
 80049c4:	0800a550 	.word	0x0800a550

080049c8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80049c8:	b580      	push	{r7, lr}
 80049ca:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 80049cc:	4b06      	ldr	r3, [pc, #24]	@ (80049e8 <HAL_RCC_NMI_IRQHandler+0x20>)
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d4:	2b80      	cmp	r3, #128	@ 0x80
 80049d6:	d104      	bne.n	80049e2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80049d8:	f000 f80a 	bl	80049f0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 80049dc:	4b03      	ldr	r3, [pc, #12]	@ (80049ec <HAL_RCC_NMI_IRQHandler+0x24>)
 80049de:	2280      	movs	r2, #128	@ 0x80
 80049e0:	701a      	strb	r2, [r3, #0]
  }
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40023800 	.word	0x40023800
 80049ec:	4002380e 	.word	0x4002380e

080049f0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 80049f0:	b480      	push	{r7}
 80049f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 80049f4:	bf00      	nop
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr

080049fe <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b082      	sub	sp, #8
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d101      	bne.n	8004a10 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	e07b      	b.n	8004b08 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d108      	bne.n	8004a2a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	685b      	ldr	r3, [r3, #4]
 8004a1c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a20:	d009      	beq.n	8004a36 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	61da      	str	r2, [r3, #28]
 8004a28:	e005      	b.n	8004a36 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2200      	movs	r2, #0
 8004a34:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d106      	bne.n	8004a56 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f7fd fa9b 	bl	8001f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	2202      	movs	r2, #2
 8004a5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	681a      	ldr	r2, [r3, #0]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a7e:	431a      	orrs	r2, r3
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a88:	431a      	orrs	r2, r3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	691b      	ldr	r3, [r3, #16]
 8004a8e:	f003 0302 	and.w	r3, r3, #2
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	695b      	ldr	r3, [r3, #20]
 8004a98:	f003 0301 	and.w	r3, r3, #1
 8004a9c:	431a      	orrs	r2, r3
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	699b      	ldr	r3, [r3, #24]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa6:	431a      	orrs	r2, r3
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69db      	ldr	r3, [r3, #28]
 8004aac:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ab0:	431a      	orrs	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aba:	ea42 0103 	orr.w	r1, r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	699b      	ldr	r3, [r3, #24]
 8004ad2:	0c1b      	lsrs	r3, r3, #16
 8004ad4:	f003 0104 	and.w	r1, r3, #4
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004adc:	f003 0210 	and.w	r2, r3, #16
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	69da      	ldr	r2, [r3, #28]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2200      	movs	r2, #0
 8004afc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3708      	adds	r7, #8
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e041      	b.n	8004ba6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fd fade 	bl	80020f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2202      	movs	r2, #2
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	3304      	adds	r3, #4
 8004b4c:	4619      	mov	r1, r3
 8004b4e:	4610      	mov	r0, r2
 8004b50:	f000 fba8 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	3708      	adds	r7, #8
 8004baa:	46bd      	mov	sp, r7
 8004bac:	bd80      	pop	{r7, pc}
	...

08004bb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d001      	beq.n	8004bc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	e046      	b.n	8004c56 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2202      	movs	r2, #2
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	4a23      	ldr	r2, [pc, #140]	@ (8004c64 <HAL_TIM_Base_Start+0xb4>)
 8004bd6:	4293      	cmp	r3, r2
 8004bd8:	d022      	beq.n	8004c20 <HAL_TIM_Base_Start+0x70>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004be2:	d01d      	beq.n	8004c20 <HAL_TIM_Base_Start+0x70>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a1f      	ldr	r2, [pc, #124]	@ (8004c68 <HAL_TIM_Base_Start+0xb8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d018      	beq.n	8004c20 <HAL_TIM_Base_Start+0x70>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8004c6c <HAL_TIM_Base_Start+0xbc>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d013      	beq.n	8004c20 <HAL_TIM_Base_Start+0x70>
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8004c70 <HAL_TIM_Base_Start+0xc0>)
 8004bfe:	4293      	cmp	r3, r2
 8004c00:	d00e      	beq.n	8004c20 <HAL_TIM_Base_Start+0x70>
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a1b      	ldr	r2, [pc, #108]	@ (8004c74 <HAL_TIM_Base_Start+0xc4>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d009      	beq.n	8004c20 <HAL_TIM_Base_Start+0x70>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a19      	ldr	r2, [pc, #100]	@ (8004c78 <HAL_TIM_Base_Start+0xc8>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIM_Base_Start+0x70>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a18      	ldr	r2, [pc, #96]	@ (8004c7c <HAL_TIM_Base_Start+0xcc>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d111      	bne.n	8004c44 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	689b      	ldr	r3, [r3, #8]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2b06      	cmp	r3, #6
 8004c30:	d010      	beq.n	8004c54 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f042 0201 	orr.w	r2, r2, #1
 8004c40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c42:	e007      	b.n	8004c54 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0201 	orr.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3714      	adds	r7, #20
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40000400 	.word	0x40000400
 8004c6c:	40000800 	.word	0x40000800
 8004c70:	40000c00 	.word	0x40000c00
 8004c74:	40010400 	.word	0x40010400
 8004c78:	40014000 	.word	0x40014000
 8004c7c:	40001800 	.word	0x40001800

08004c80 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b082      	sub	sp, #8
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d101      	bne.n	8004c92 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e041      	b.n	8004d16 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c98:	b2db      	uxtb	r3, r3
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d106      	bne.n	8004cac <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f7fd f9d8 	bl	800205c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2202      	movs	r2, #2
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	4610      	mov	r0, r2
 8004cc0:	f000 faf0 	bl	80052a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3708      	adds	r7, #8
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d109      	bne.n	8004d44 <HAL_TIM_PWM_Start+0x24>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004d36:	b2db      	uxtb	r3, r3
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	bf14      	ite	ne
 8004d3c:	2301      	movne	r3, #1
 8004d3e:	2300      	moveq	r3, #0
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	e022      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b04      	cmp	r3, #4
 8004d48:	d109      	bne.n	8004d5e <HAL_TIM_PWM_Start+0x3e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	bf14      	ite	ne
 8004d56:	2301      	movne	r3, #1
 8004d58:	2300      	moveq	r3, #0
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	e015      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	2b08      	cmp	r3, #8
 8004d62:	d109      	bne.n	8004d78 <HAL_TIM_PWM_Start+0x58>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004d6a:	b2db      	uxtb	r3, r3
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	bf14      	ite	ne
 8004d70:	2301      	movne	r3, #1
 8004d72:	2300      	moveq	r3, #0
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	e008      	b.n	8004d8a <HAL_TIM_PWM_Start+0x6a>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b01      	cmp	r3, #1
 8004d82:	bf14      	ite	ne
 8004d84:	2301      	movne	r3, #1
 8004d86:	2300      	moveq	r3, #0
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d001      	beq.n	8004d92 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e07c      	b.n	8004e8c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004d92:	683b      	ldr	r3, [r7, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d104      	bne.n	8004da2 <HAL_TIM_PWM_Start+0x82>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004da0:	e013      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	2b04      	cmp	r3, #4
 8004da6:	d104      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x92>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2202      	movs	r2, #2
 8004dac:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004db0:	e00b      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b08      	cmp	r3, #8
 8004db6:	d104      	bne.n	8004dc2 <HAL_TIM_PWM_Start+0xa2>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dc0:	e003      	b.n	8004dca <HAL_TIM_PWM_Start+0xaa>
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	6839      	ldr	r1, [r7, #0]
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f000 fd5c 	bl	8005890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a2d      	ldr	r2, [pc, #180]	@ (8004e94 <HAL_TIM_PWM_Start+0x174>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d004      	beq.n	8004dec <HAL_TIM_PWM_Start+0xcc>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4a2c      	ldr	r2, [pc, #176]	@ (8004e98 <HAL_TIM_PWM_Start+0x178>)
 8004de8:	4293      	cmp	r3, r2
 8004dea:	d101      	bne.n	8004df0 <HAL_TIM_PWM_Start+0xd0>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <HAL_TIM_PWM_Start+0xd2>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d007      	beq.n	8004e06 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	4a22      	ldr	r2, [pc, #136]	@ (8004e94 <HAL_TIM_PWM_Start+0x174>)
 8004e0c:	4293      	cmp	r3, r2
 8004e0e:	d022      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x136>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e18:	d01d      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x136>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4a1f      	ldr	r2, [pc, #124]	@ (8004e9c <HAL_TIM_PWM_Start+0x17c>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d018      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x136>
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ea0 <HAL_TIM_PWM_Start+0x180>)
 8004e2a:	4293      	cmp	r3, r2
 8004e2c:	d013      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x136>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a1c      	ldr	r2, [pc, #112]	@ (8004ea4 <HAL_TIM_PWM_Start+0x184>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d00e      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x136>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a16      	ldr	r2, [pc, #88]	@ (8004e98 <HAL_TIM_PWM_Start+0x178>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d009      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x136>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	4a18      	ldr	r2, [pc, #96]	@ (8004ea8 <HAL_TIM_PWM_Start+0x188>)
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d004      	beq.n	8004e56 <HAL_TIM_PWM_Start+0x136>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a16      	ldr	r2, [pc, #88]	@ (8004eac <HAL_TIM_PWM_Start+0x18c>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d111      	bne.n	8004e7a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0307 	and.w	r3, r3, #7
 8004e60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2b06      	cmp	r3, #6
 8004e66:	d010      	beq.n	8004e8a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0201 	orr.w	r2, r2, #1
 8004e76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e78:	e007      	b.n	8004e8a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	681a      	ldr	r2, [r3, #0]
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f042 0201 	orr.w	r2, r2, #1
 8004e88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	40010000 	.word	0x40010000
 8004e98:	40010400 	.word	0x40010400
 8004e9c:	40000400 	.word	0x40000400
 8004ea0:	40000800 	.word	0x40000800
 8004ea4:	40000c00 	.word	0x40000c00
 8004ea8:	40014000 	.word	0x40014000
 8004eac:	40001800 	.word	0x40001800

08004eb0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
 8004eb8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	6839      	ldr	r1, [r7, #0]
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f000 fce4 	bl	8005890 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8004f88 <HAL_TIM_PWM_Stop+0xd8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_TIM_PWM_Stop+0x2c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8004f8c <HAL_TIM_PWM_Stop+0xdc>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d101      	bne.n	8004ee0 <HAL_TIM_PWM_Stop+0x30>
 8004edc:	2301      	movs	r3, #1
 8004ede:	e000      	b.n	8004ee2 <HAL_TIM_PWM_Stop+0x32>
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d017      	beq.n	8004f16 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	6a1a      	ldr	r2, [r3, #32]
 8004eec:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d10f      	bne.n	8004f16 <HAL_TIM_PWM_Stop+0x66>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	6a1a      	ldr	r2, [r3, #32]
 8004efc:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f00:	4013      	ands	r3, r2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d107      	bne.n	8004f16 <HAL_TIM_PWM_Stop+0x66>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004f14:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	6a1a      	ldr	r2, [r3, #32]
 8004f1c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004f20:	4013      	ands	r3, r2
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10f      	bne.n	8004f46 <HAL_TIM_PWM_Stop+0x96>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	6a1a      	ldr	r2, [r3, #32]
 8004f2c:	f240 4344 	movw	r3, #1092	@ 0x444
 8004f30:	4013      	ands	r3, r2
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d107      	bne.n	8004f46 <HAL_TIM_PWM_Stop+0x96>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f022 0201 	bic.w	r2, r2, #1
 8004f44:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d104      	bne.n	8004f56 <HAL_TIM_PWM_Stop+0xa6>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f54:	e013      	b.n	8004f7e <HAL_TIM_PWM_Stop+0xce>
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b04      	cmp	r3, #4
 8004f5a:	d104      	bne.n	8004f66 <HAL_TIM_PWM_Stop+0xb6>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f64:	e00b      	b.n	8004f7e <HAL_TIM_PWM_Stop+0xce>
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	2b08      	cmp	r3, #8
 8004f6a:	d104      	bne.n	8004f76 <HAL_TIM_PWM_Stop+0xc6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f74:	e003      	b.n	8004f7e <HAL_TIM_PWM_Stop+0xce>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	40010000 	.word	0x40010000
 8004f8c:	40010400 	.word	0x40010400

08004f90 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d101      	bne.n	8004fae <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004faa:	2302      	movs	r3, #2
 8004fac:	e0ae      	b.n	800510c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b0c      	cmp	r3, #12
 8004fba:	f200 809f 	bhi.w	80050fc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004fbe:	a201      	add	r2, pc, #4	@ (adr r2, 8004fc4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fc4:	08004ff9 	.word	0x08004ff9
 8004fc8:	080050fd 	.word	0x080050fd
 8004fcc:	080050fd 	.word	0x080050fd
 8004fd0:	080050fd 	.word	0x080050fd
 8004fd4:	08005039 	.word	0x08005039
 8004fd8:	080050fd 	.word	0x080050fd
 8004fdc:	080050fd 	.word	0x080050fd
 8004fe0:	080050fd 	.word	0x080050fd
 8004fe4:	0800507b 	.word	0x0800507b
 8004fe8:	080050fd 	.word	0x080050fd
 8004fec:	080050fd 	.word	0x080050fd
 8004ff0:	080050fd 	.word	0x080050fd
 8004ff4:	080050bb 	.word	0x080050bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	68b9      	ldr	r1, [r7, #8]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f000 f9fc 	bl	80053fc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f042 0208 	orr.w	r2, r2, #8
 8005012:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699a      	ldr	r2, [r3, #24]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f022 0204 	bic.w	r2, r2, #4
 8005022:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	6999      	ldr	r1, [r3, #24]
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	691a      	ldr	r2, [r3, #16]
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	430a      	orrs	r2, r1
 8005034:	619a      	str	r2, [r3, #24]
      break;
 8005036:	e064      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68b9      	ldr	r1, [r7, #8]
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fa4c 	bl	80054dc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005052:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	699a      	ldr	r2, [r3, #24]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005062:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	6999      	ldr	r1, [r3, #24]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	021a      	lsls	r2, r3, #8
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	619a      	str	r2, [r3, #24]
      break;
 8005078:	e043      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	68b9      	ldr	r1, [r7, #8]
 8005080:	4618      	mov	r0, r3
 8005082:	f000 faa1 	bl	80055c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f042 0208 	orr.w	r2, r2, #8
 8005094:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69da      	ldr	r2, [r3, #28]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0204 	bic.w	r2, r2, #4
 80050a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	69d9      	ldr	r1, [r3, #28]
 80050ac:	68bb      	ldr	r3, [r7, #8]
 80050ae:	691a      	ldr	r2, [r3, #16]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	430a      	orrs	r2, r1
 80050b6:	61da      	str	r2, [r3, #28]
      break;
 80050b8:	e023      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	68b9      	ldr	r1, [r7, #8]
 80050c0:	4618      	mov	r0, r3
 80050c2:	f000 faf5 	bl	80056b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050d4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69da      	ldr	r2, [r3, #28]
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	69d9      	ldr	r1, [r3, #28]
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	691b      	ldr	r3, [r3, #16]
 80050f0:	021a      	lsls	r2, r3, #8
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	430a      	orrs	r2, r1
 80050f8:	61da      	str	r2, [r3, #28]
      break;
 80050fa:	e002      	b.n	8005102 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80050fc:	2301      	movs	r3, #1
 80050fe:	75fb      	strb	r3, [r7, #23]
      break;
 8005100:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2200      	movs	r2, #0
 8005106:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800510a:	7dfb      	ldrb	r3, [r7, #23]
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d101      	bne.n	8005130 <HAL_TIM_ConfigClockSource+0x1c>
 800512c:	2302      	movs	r3, #2
 800512e:	e0b4      	b.n	800529a <HAL_TIM_ConfigClockSource+0x186>
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2202      	movs	r2, #2
 800513c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800514e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005156:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	68ba      	ldr	r2, [r7, #8]
 800515e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005168:	d03e      	beq.n	80051e8 <HAL_TIM_ConfigClockSource+0xd4>
 800516a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800516e:	f200 8087 	bhi.w	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005176:	f000 8086 	beq.w	8005286 <HAL_TIM_ConfigClockSource+0x172>
 800517a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800517e:	d87f      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005180:	2b70      	cmp	r3, #112	@ 0x70
 8005182:	d01a      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0xa6>
 8005184:	2b70      	cmp	r3, #112	@ 0x70
 8005186:	d87b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005188:	2b60      	cmp	r3, #96	@ 0x60
 800518a:	d050      	beq.n	800522e <HAL_TIM_ConfigClockSource+0x11a>
 800518c:	2b60      	cmp	r3, #96	@ 0x60
 800518e:	d877      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005190:	2b50      	cmp	r3, #80	@ 0x50
 8005192:	d03c      	beq.n	800520e <HAL_TIM_ConfigClockSource+0xfa>
 8005194:	2b50      	cmp	r3, #80	@ 0x50
 8005196:	d873      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 8005198:	2b40      	cmp	r3, #64	@ 0x40
 800519a:	d058      	beq.n	800524e <HAL_TIM_ConfigClockSource+0x13a>
 800519c:	2b40      	cmp	r3, #64	@ 0x40
 800519e:	d86f      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 80051a0:	2b30      	cmp	r3, #48	@ 0x30
 80051a2:	d064      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051a4:	2b30      	cmp	r3, #48	@ 0x30
 80051a6:	d86b      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 80051a8:	2b20      	cmp	r3, #32
 80051aa:	d060      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051ac:	2b20      	cmp	r3, #32
 80051ae:	d867      	bhi.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d05c      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d05a      	beq.n	800526e <HAL_TIM_ConfigClockSource+0x15a>
 80051b8:	e062      	b.n	8005280 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051ca:	f000 fb41 	bl	8005850 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80051d6:	68bb      	ldr	r3, [r7, #8]
 80051d8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80051dc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	68ba      	ldr	r2, [r7, #8]
 80051e4:	609a      	str	r2, [r3, #8]
      break;
 80051e6:	e04f      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80051f8:	f000 fb2a 	bl	8005850 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	689a      	ldr	r2, [r3, #8]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800520a:	609a      	str	r2, [r3, #8]
      break;
 800520c:	e03c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800521a:	461a      	mov	r2, r3
 800521c:	f000 fa9e 	bl	800575c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	2150      	movs	r1, #80	@ 0x50
 8005226:	4618      	mov	r0, r3
 8005228:	f000 faf7 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 800522c:	e02c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800523a:	461a      	mov	r2, r3
 800523c:	f000 fabd 	bl	80057ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2160      	movs	r1, #96	@ 0x60
 8005246:	4618      	mov	r0, r3
 8005248:	f000 fae7 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 800524c:	e01c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800525a:	461a      	mov	r2, r3
 800525c:	f000 fa7e 	bl	800575c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2140      	movs	r1, #64	@ 0x40
 8005266:	4618      	mov	r0, r3
 8005268:	f000 fad7 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 800526c:	e00c      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681a      	ldr	r2, [r3, #0]
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4619      	mov	r1, r3
 8005278:	4610      	mov	r0, r2
 800527a:	f000 face 	bl	800581a <TIM_ITRx_SetConfig>
      break;
 800527e:	e003      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	73fb      	strb	r3, [r7, #15]
      break;
 8005284:	e000      	b.n	8005288 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005286:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b085      	sub	sp, #20
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	4a46      	ldr	r2, [pc, #280]	@ (80053d0 <TIM_Base_SetConfig+0x12c>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d013      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052c2:	d00f      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a43      	ldr	r2, [pc, #268]	@ (80053d4 <TIM_Base_SetConfig+0x130>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d00b      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a42      	ldr	r2, [pc, #264]	@ (80053d8 <TIM_Base_SetConfig+0x134>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d007      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a41      	ldr	r2, [pc, #260]	@ (80053dc <TIM_Base_SetConfig+0x138>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d003      	beq.n	80052e4 <TIM_Base_SetConfig+0x40>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a40      	ldr	r2, [pc, #256]	@ (80053e0 <TIM_Base_SetConfig+0x13c>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d108      	bne.n	80052f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	4a35      	ldr	r2, [pc, #212]	@ (80053d0 <TIM_Base_SetConfig+0x12c>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d02b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005304:	d027      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a32      	ldr	r2, [pc, #200]	@ (80053d4 <TIM_Base_SetConfig+0x130>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d023      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	4a31      	ldr	r2, [pc, #196]	@ (80053d8 <TIM_Base_SetConfig+0x134>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d01f      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a30      	ldr	r2, [pc, #192]	@ (80053dc <TIM_Base_SetConfig+0x138>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a2f      	ldr	r2, [pc, #188]	@ (80053e0 <TIM_Base_SetConfig+0x13c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d017      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a2e      	ldr	r2, [pc, #184]	@ (80053e4 <TIM_Base_SetConfig+0x140>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a2d      	ldr	r2, [pc, #180]	@ (80053e8 <TIM_Base_SetConfig+0x144>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a2c      	ldr	r2, [pc, #176]	@ (80053ec <TIM_Base_SetConfig+0x148>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a2b      	ldr	r2, [pc, #172]	@ (80053f0 <TIM_Base_SetConfig+0x14c>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a2a      	ldr	r2, [pc, #168]	@ (80053f4 <TIM_Base_SetConfig+0x150>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0xb2>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a29      	ldr	r2, [pc, #164]	@ (80053f8 <TIM_Base_SetConfig+0x154>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a10      	ldr	r2, [pc, #64]	@ (80053d0 <TIM_Base_SetConfig+0x12c>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0xf8>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a12      	ldr	r2, [pc, #72]	@ (80053e0 <TIM_Base_SetConfig+0x13c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d103      	bne.n	80053a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	691a      	ldr	r2, [r3, #16]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2201      	movs	r2, #1
 80053a8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0301 	and.w	r3, r3, #1
 80053b2:	2b01      	cmp	r3, #1
 80053b4:	d105      	bne.n	80053c2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f023 0201 	bic.w	r2, r3, #1
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	611a      	str	r2, [r3, #16]
  }
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	40010000 	.word	0x40010000
 80053d4:	40000400 	.word	0x40000400
 80053d8:	40000800 	.word	0x40000800
 80053dc:	40000c00 	.word	0x40000c00
 80053e0:	40010400 	.word	0x40010400
 80053e4:	40014000 	.word	0x40014000
 80053e8:	40014400 	.word	0x40014400
 80053ec:	40014800 	.word	0x40014800
 80053f0:	40001800 	.word	0x40001800
 80053f4:	40001c00 	.word	0x40001c00
 80053f8:	40002000 	.word	0x40002000

080053fc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b087      	sub	sp, #28
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f023 0201 	bic.w	r2, r3, #1
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	699b      	ldr	r3, [r3, #24]
 8005422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0303 	bic.w	r3, r3, #3
 8005432:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68fa      	ldr	r2, [r7, #12]
 800543a:	4313      	orrs	r3, r2
 800543c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	f023 0302 	bic.w	r3, r3, #2
 8005444:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	4313      	orrs	r3, r2
 800544e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a20      	ldr	r2, [pc, #128]	@ (80054d4 <TIM_OC1_SetConfig+0xd8>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d003      	beq.n	8005460 <TIM_OC1_SetConfig+0x64>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1f      	ldr	r2, [pc, #124]	@ (80054d8 <TIM_OC1_SetConfig+0xdc>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10c      	bne.n	800547a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	f023 0308 	bic.w	r3, r3, #8
 8005466:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	4313      	orrs	r3, r2
 8005470:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	f023 0304 	bic.w	r3, r3, #4
 8005478:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a15      	ldr	r2, [pc, #84]	@ (80054d4 <TIM_OC1_SetConfig+0xd8>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d003      	beq.n	800548a <TIM_OC1_SetConfig+0x8e>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a14      	ldr	r2, [pc, #80]	@ (80054d8 <TIM_OC1_SetConfig+0xdc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d111      	bne.n	80054ae <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005490:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005498:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	693a      	ldr	r2, [r7, #16]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	699b      	ldr	r3, [r3, #24]
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	68fa      	ldr	r2, [r7, #12]
 80054b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	685a      	ldr	r2, [r3, #4]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	697a      	ldr	r2, [r7, #20]
 80054c6:	621a      	str	r2, [r3, #32]
}
 80054c8:	bf00      	nop
 80054ca:	371c      	adds	r7, #28
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	40010000 	.word	0x40010000
 80054d8:	40010400 	.word	0x40010400

080054dc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80054dc:	b480      	push	{r7}
 80054de:	b087      	sub	sp, #28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a1b      	ldr	r3, [r3, #32]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f023 0210 	bic.w	r2, r3, #16
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800550a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005512:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	4313      	orrs	r3, r2
 800551e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f023 0320 	bic.w	r3, r3, #32
 8005526:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005528:	683b      	ldr	r3, [r7, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	697a      	ldr	r2, [r7, #20]
 8005530:	4313      	orrs	r3, r2
 8005532:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	4a22      	ldr	r2, [pc, #136]	@ (80055c0 <TIM_OC2_SetConfig+0xe4>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d003      	beq.n	8005544 <TIM_OC2_SetConfig+0x68>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	4a21      	ldr	r2, [pc, #132]	@ (80055c4 <TIM_OC2_SetConfig+0xe8>)
 8005540:	4293      	cmp	r3, r2
 8005542:	d10d      	bne.n	8005560 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800554a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	68db      	ldr	r3, [r3, #12]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800555e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a17      	ldr	r2, [pc, #92]	@ (80055c0 <TIM_OC2_SetConfig+0xe4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d003      	beq.n	8005570 <TIM_OC2_SetConfig+0x94>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a16      	ldr	r2, [pc, #88]	@ (80055c4 <TIM_OC2_SetConfig+0xe8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d113      	bne.n	8005598 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005576:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005578:	693b      	ldr	r3, [r7, #16]
 800557a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800557e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	695b      	ldr	r3, [r3, #20]
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	693a      	ldr	r2, [r7, #16]
 8005588:	4313      	orrs	r3, r2
 800558a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	699b      	ldr	r3, [r3, #24]
 8005590:	009b      	lsls	r3, r3, #2
 8005592:	693a      	ldr	r2, [r7, #16]
 8005594:	4313      	orrs	r3, r2
 8005596:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	693a      	ldr	r2, [r7, #16]
 800559c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685a      	ldr	r2, [r3, #4]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	621a      	str	r2, [r3, #32]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	40010000 	.word	0x40010000
 80055c4:	40010400 	.word	0x40010400

080055c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055c8:	b480      	push	{r7}
 80055ca:	b087      	sub	sp, #28
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
 80055d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6a1b      	ldr	r3, [r3, #32]
 80055d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6a1b      	ldr	r3, [r3, #32]
 80055dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	69db      	ldr	r3, [r3, #28]
 80055ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80055f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	f023 0303 	bic.w	r3, r3, #3
 80055fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	4313      	orrs	r3, r2
 8005608:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005610:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	021b      	lsls	r3, r3, #8
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4313      	orrs	r3, r2
 800561c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a21      	ldr	r2, [pc, #132]	@ (80056a8 <TIM_OC3_SetConfig+0xe0>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d003      	beq.n	800562e <TIM_OC3_SetConfig+0x66>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a20      	ldr	r2, [pc, #128]	@ (80056ac <TIM_OC3_SetConfig+0xe4>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d10d      	bne.n	800564a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005634:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005648:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a16      	ldr	r2, [pc, #88]	@ (80056a8 <TIM_OC3_SetConfig+0xe0>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d003      	beq.n	800565a <TIM_OC3_SetConfig+0x92>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	4a15      	ldr	r2, [pc, #84]	@ (80056ac <TIM_OC3_SetConfig+0xe4>)
 8005656:	4293      	cmp	r3, r2
 8005658:	d113      	bne.n	8005682 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005660:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005662:	693b      	ldr	r3, [r7, #16]
 8005664:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005668:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	695b      	ldr	r3, [r3, #20]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	693a      	ldr	r2, [r7, #16]
 800567e:	4313      	orrs	r3, r2
 8005680:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	68fa      	ldr	r2, [r7, #12]
 800568c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	685a      	ldr	r2, [r3, #4]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	621a      	str	r2, [r3, #32]
}
 800569c:	bf00      	nop
 800569e:	371c      	adds	r7, #28
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr
 80056a8:	40010000 	.word	0x40010000
 80056ac:	40010400 	.word	0x40010400

080056b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b087      	sub	sp, #28
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6a1b      	ldr	r3, [r3, #32]
 80056be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a1b      	ldr	r3, [r3, #32]
 80056c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	685b      	ldr	r3, [r3, #4]
 80056d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	69db      	ldr	r3, [r3, #28]
 80056d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80056de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	021b      	lsls	r3, r3, #8
 80056ee:	68fa      	ldr	r2, [r7, #12]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80056fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	031b      	lsls	r3, r3, #12
 8005702:	693a      	ldr	r2, [r7, #16]
 8005704:	4313      	orrs	r3, r2
 8005706:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	4a12      	ldr	r2, [pc, #72]	@ (8005754 <TIM_OC4_SetConfig+0xa4>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d003      	beq.n	8005718 <TIM_OC4_SetConfig+0x68>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a11      	ldr	r2, [pc, #68]	@ (8005758 <TIM_OC4_SetConfig+0xa8>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d109      	bne.n	800572c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800571e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	019b      	lsls	r3, r3, #6
 8005726:	697a      	ldr	r2, [r7, #20]
 8005728:	4313      	orrs	r3, r2
 800572a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	68fa      	ldr	r2, [r7, #12]
 8005736:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	621a      	str	r2, [r3, #32]
}
 8005746:	bf00      	nop
 8005748:	371c      	adds	r7, #28
 800574a:	46bd      	mov	sp, r7
 800574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	40010000 	.word	0x40010000
 8005758:	40010400 	.word	0x40010400

0800575c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800575c:	b480      	push	{r7}
 800575e:	b087      	sub	sp, #28
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6a1b      	ldr	r3, [r3, #32]
 800576c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	6a1b      	ldr	r3, [r3, #32]
 8005772:	f023 0201 	bic.w	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	699b      	ldr	r3, [r3, #24]
 800577e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005786:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	011b      	lsls	r3, r3, #4
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	4313      	orrs	r3, r2
 8005790:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	f023 030a 	bic.w	r3, r3, #10
 8005798:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800579a:	697a      	ldr	r2, [r7, #20]
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	4313      	orrs	r3, r2
 80057a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	621a      	str	r2, [r3, #32]
}
 80057ae:	bf00      	nop
 80057b0:	371c      	adds	r7, #28
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr

080057ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80057ba:	b480      	push	{r7}
 80057bc:	b087      	sub	sp, #28
 80057be:	af00      	add	r7, sp, #0
 80057c0:	60f8      	str	r0, [r7, #12]
 80057c2:	60b9      	str	r1, [r7, #8]
 80057c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	6a1b      	ldr	r3, [r3, #32]
 80057ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	f023 0210 	bic.w	r2, r3, #16
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80057e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	031b      	lsls	r3, r3, #12
 80057ea:	693a      	ldr	r2, [r7, #16]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80057f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	011b      	lsls	r3, r3, #4
 80057fc:	697a      	ldr	r2, [r7, #20]
 80057fe:	4313      	orrs	r3, r2
 8005800:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	693a      	ldr	r2, [r7, #16]
 8005806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	697a      	ldr	r2, [r7, #20]
 800580c:	621a      	str	r2, [r3, #32]
}
 800580e:	bf00      	nop
 8005810:	371c      	adds	r7, #28
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800581a:	b480      	push	{r7}
 800581c:	b085      	sub	sp, #20
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005830:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	4313      	orrs	r3, r2
 8005838:	f043 0307 	orr.w	r3, r3, #7
 800583c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	609a      	str	r2, [r3, #8]
}
 8005844:	bf00      	nop
 8005846:	3714      	adds	r7, #20
 8005848:	46bd      	mov	sp, r7
 800584a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584e:	4770      	bx	lr

08005850 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005850:	b480      	push	{r7}
 8005852:	b087      	sub	sp, #28
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
 800585c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005864:	697b      	ldr	r3, [r7, #20]
 8005866:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800586a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	021a      	lsls	r2, r3, #8
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	431a      	orrs	r2, r3
 8005874:	68bb      	ldr	r3, [r7, #8]
 8005876:	4313      	orrs	r3, r2
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	4313      	orrs	r3, r2
 800587c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	697a      	ldr	r2, [r7, #20]
 8005882:	609a      	str	r2, [r3, #8]
}
 8005884:	bf00      	nop
 8005886:	371c      	adds	r7, #28
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr

08005890 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	60f8      	str	r0, [r7, #12]
 8005898:	60b9      	str	r1, [r7, #8]
 800589a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f003 031f 	and.w	r3, r3, #31
 80058a2:	2201      	movs	r2, #1
 80058a4:	fa02 f303 	lsl.w	r3, r2, r3
 80058a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	6a1a      	ldr	r2, [r3, #32]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	43db      	mvns	r3, r3
 80058b2:	401a      	ands	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	6a1a      	ldr	r2, [r3, #32]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	f003 031f 	and.w	r3, r3, #31
 80058c2:	6879      	ldr	r1, [r7, #4]
 80058c4:	fa01 f303 	lsl.w	r3, r1, r3
 80058c8:	431a      	orrs	r2, r3
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	621a      	str	r2, [r3, #32]
}
 80058ce:	bf00      	nop
 80058d0:	371c      	adds	r7, #28
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
	...

080058dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058dc:	b480      	push	{r7}
 80058de:	b085      	sub	sp, #20
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058ec:	2b01      	cmp	r3, #1
 80058ee:	d101      	bne.n	80058f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058f0:	2302      	movs	r3, #2
 80058f2:	e05a      	b.n	80059aa <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2202      	movs	r2, #2
 8005900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	689b      	ldr	r3, [r3, #8]
 8005912:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800591a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	68fa      	ldr	r2, [r7, #12]
 800592c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005940:	d01d      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1d      	ldr	r2, [pc, #116]	@ (80059bc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1b      	ldr	r2, [pc, #108]	@ (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1a      	ldr	r2, [pc, #104]	@ (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a18      	ldr	r2, [pc, #96]	@ (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a17      	ldr	r2, [pc, #92]	@ (80059cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a15      	ldr	r2, [pc, #84]	@ (80059d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d10c      	bne.n	8005998 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005984:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	68ba      	ldr	r2, [r7, #8]
 800598c:	4313      	orrs	r3, r2
 800598e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	40010000 	.word	0x40010000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40010400 	.word	0x40010400
 80059cc:	40014000 	.word	0x40014000
 80059d0:	40001800 	.word	0x40001800

080059d4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059de:	2300      	movs	r3, #0
 80059e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d101      	bne.n	80059f0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059ec:	2302      	movs	r3, #2
 80059ee:	e03d      	b.n	8005a6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2201      	movs	r2, #1
 80059f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	68db      	ldr	r3, [r3, #12]
 8005a02:	4313      	orrs	r3, r2
 8005a04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	4313      	orrs	r3, r2
 8005a20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	691b      	ldr	r3, [r3, #16]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	695b      	ldr	r3, [r3, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	4313      	orrs	r3, r2
 8005a58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	68fa      	ldr	r2, [r7, #12]
 8005a60:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005a6a:	2300      	movs	r3, #0
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e042      	b.n	8005b10 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a90:	b2db      	uxtb	r3, r3
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d106      	bne.n	8005aa4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fc fc5e 	bl	8002360 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2224      	movs	r2, #36	@ 0x24
 8005aa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005aba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 ff77 	bl	80069b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691a      	ldr	r2, [r3, #16]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ad0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	695a      	ldr	r2, [r3, #20]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ae0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68da      	ldr	r2, [r3, #12]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005af0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005b0e:	2300      	movs	r3, #0
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}

08005b18 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	b08c      	sub	sp, #48	@ 0x30
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005b2c:	b2db      	uxtb	r3, r3
 8005b2e:	2b20      	cmp	r3, #32
 8005b30:	d156      	bne.n	8005be0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d002      	beq.n	8005b3e <HAL_UART_Transmit_DMA+0x26>
 8005b38:	88fb      	ldrh	r3, [r7, #6]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d101      	bne.n	8005b42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005b3e:	2301      	movs	r3, #1
 8005b40:	e04f      	b.n	8005be2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	88fa      	ldrh	r2, [r7, #6]
 8005b52:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2221      	movs	r2, #33	@ 0x21
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b66:	4a21      	ldr	r2, [pc, #132]	@ (8005bec <HAL_UART_Transmit_DMA+0xd4>)
 8005b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b6e:	4a20      	ldr	r2, [pc, #128]	@ (8005bf0 <HAL_UART_Transmit_DMA+0xd8>)
 8005b70:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b76:	4a1f      	ldr	r2, [pc, #124]	@ (8005bf4 <HAL_UART_Transmit_DMA+0xdc>)
 8005b78:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b7e:	2200      	movs	r2, #0
 8005b80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005b82:	f107 0308 	add.w	r3, r7, #8
 8005b86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	6819      	ldr	r1, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3304      	adds	r3, #4
 8005b96:	461a      	mov	r2, r3
 8005b98:	88fb      	ldrh	r3, [r7, #6]
 8005b9a:	f7fd fc3f 	bl	800341c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005ba6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	3314      	adds	r3, #20
 8005bae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bb0:	69bb      	ldr	r3, [r7, #24]
 8005bb2:	e853 3f00 	ldrex	r3, [r3]
 8005bb6:	617b      	str	r3, [r7, #20]
   return(result);
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3314      	adds	r3, #20
 8005bc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6a39      	ldr	r1, [r7, #32]
 8005bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e5      	bne.n	8005ba8 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8005bdc:	2300      	movs	r3, #0
 8005bde:	e000      	b.n	8005be2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8005be0:	2302      	movs	r3, #2
  }
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3730      	adds	r7, #48	@ 0x30
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	0800623d 	.word	0x0800623d
 8005bf0:	080062d7 	.word	0x080062d7
 8005bf4:	0800645b 	.word	0x0800645b

08005bf8 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b08c      	sub	sp, #48	@ 0x30
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	4613      	mov	r3, r2
 8005c04:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d14a      	bne.n	8005ca8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005c18:	88fb      	ldrh	r3, [r7, #6]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d101      	bne.n	8005c22 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e043      	b.n	8005caa <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2201      	movs	r2, #1
 8005c26:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005c2e:	88fb      	ldrh	r3, [r7, #6]
 8005c30:	461a      	mov	r2, r3
 8005c32:	68b9      	ldr	r1, [r7, #8]
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 fc5b 	bl	80064f0 <UART_Start_Receive_DMA>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005c40:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d12c      	bne.n	8005ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d125      	bne.n	8005c9c <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c50:	2300      	movs	r3, #0
 8005c52:	613b      	str	r3, [r7, #16]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	685b      	ldr	r3, [r3, #4]
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	330c      	adds	r3, #12
 8005c6c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	69bb      	ldr	r3, [r7, #24]
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	617b      	str	r3, [r7, #20]
   return(result);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	f043 0310 	orr.w	r3, r3, #16
 8005c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	330c      	adds	r3, #12
 8005c84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c86:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c88:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8a:	6a39      	ldr	r1, [r7, #32]
 8005c8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8e:	e841 2300 	strex	r3, r2, [r1]
 8005c92:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c94:	69fb      	ldr	r3, [r7, #28]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1e5      	bne.n	8005c66 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005c9a:	e002      	b.n	8005ca2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005ca2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005ca6:	e000      	b.n	8005caa <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005ca8:	2302      	movs	r3, #2
  }
}
 8005caa:	4618      	mov	r0, r3
 8005cac:	3730      	adds	r7, #48	@ 0x30
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}
	...

08005cb4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cb4:	b580      	push	{r7, lr}
 8005cb6:	b0ba      	sub	sp, #232	@ 0xe8
 8005cb8:	af00      	add	r7, sp, #0
 8005cba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	68db      	ldr	r3, [r3, #12]
 8005ccc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	695b      	ldr	r3, [r3, #20]
 8005cd6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cea:	f003 030f 	and.w	r3, r3, #15
 8005cee:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005cf2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d10f      	bne.n	8005d1a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfe:	f003 0320 	and.w	r3, r3, #32
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d009      	beq.n	8005d1a <HAL_UART_IRQHandler+0x66>
 8005d06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d0a:	f003 0320 	and.w	r3, r3, #32
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d003      	beq.n	8005d1a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f000 fd8d 	bl	8006832 <UART_Receive_IT>
      return;
 8005d18:	e25b      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005d1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f000 80de 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x22c>
 8005d24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d28:	f003 0301 	and.w	r3, r3, #1
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d106      	bne.n	8005d3e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d34:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 80d1 	beq.w	8005ee0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005d3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d42:	f003 0301 	and.w	r3, r3, #1
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00b      	beq.n	8005d62 <HAL_UART_IRQHandler+0xae>
 8005d4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d005      	beq.n	8005d62 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d5a:	f043 0201 	orr.w	r2, r3, #1
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00b      	beq.n	8005d86 <HAL_UART_IRQHandler+0xd2>
 8005d6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d72:	f003 0301 	and.w	r3, r3, #1
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d005      	beq.n	8005d86 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005d7e:	f043 0202 	orr.w	r2, r3, #2
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005d86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d8a:	f003 0302 	and.w	r3, r3, #2
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d00b      	beq.n	8005daa <HAL_UART_IRQHandler+0xf6>
 8005d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d96:	f003 0301 	and.w	r3, r3, #1
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d005      	beq.n	8005daa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005da2:	f043 0204 	orr.w	r2, r3, #4
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dae:	f003 0308 	and.w	r3, r3, #8
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d011      	beq.n	8005dda <HAL_UART_IRQHandler+0x126>
 8005db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dba:	f003 0320 	and.w	r3, r3, #32
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d105      	bne.n	8005dce <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005dc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dc6:	f003 0301 	and.w	r3, r3, #1
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d005      	beq.n	8005dda <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dd2:	f043 0208 	orr.w	r2, r3, #8
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f000 81f2 	beq.w	80061c8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005de4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005de8:	f003 0320 	and.w	r3, r3, #32
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d008      	beq.n	8005e02 <HAL_UART_IRQHandler+0x14e>
 8005df0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005df4:	f003 0320 	and.w	r3, r3, #32
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d002      	beq.n	8005e02 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fd18 	bl	8006832 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	695b      	ldr	r3, [r3, #20]
 8005e08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e0c:	2b40      	cmp	r3, #64	@ 0x40
 8005e0e:	bf0c      	ite	eq
 8005e10:	2301      	moveq	r3, #1
 8005e12:	2300      	movne	r3, #0
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e1e:	f003 0308 	and.w	r3, r3, #8
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d103      	bne.n	8005e2e <HAL_UART_IRQHandler+0x17a>
 8005e26:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d04f      	beq.n	8005ece <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fc20 	bl	8006674 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	695b      	ldr	r3, [r3, #20]
 8005e3a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e3e:	2b40      	cmp	r3, #64	@ 0x40
 8005e40:	d141      	bne.n	8005ec6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3314      	adds	r3, #20
 8005e48:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e4c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005e50:	e853 3f00 	ldrex	r3, [r3]
 8005e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005e58:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005e5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005e60:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	3314      	adds	r3, #20
 8005e6a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005e6e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005e72:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e76:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005e7a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005e7e:	e841 2300 	strex	r3, r2, [r1]
 8005e82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005e86:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1d9      	bne.n	8005e42 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d013      	beq.n	8005ebe <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8006094 <HAL_UART_IRQHandler+0x3e0>)
 8005e9c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fd fb82 	bl	80035ac <HAL_DMA_Abort_IT>
 8005ea8:	4603      	mov	r3, r0
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d016      	beq.n	8005edc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005eb4:	687a      	ldr	r2, [r7, #4]
 8005eb6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005eb8:	4610      	mov	r0, r2
 8005eba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ebc:	e00e      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f000 f9b2 	bl	8006228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ec4:	e00a      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 f9ae 	bl	8006228 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ecc:	e006      	b.n	8005edc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005ece:	6878      	ldr	r0, [r7, #4]
 8005ed0:	f000 f9aa 	bl	8006228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005eda:	e175      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005edc:	bf00      	nop
    return;
 8005ede:	e173      	b.n	80061c8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	f040 814f 	bne.w	8006188 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005eea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005eee:	f003 0310 	and.w	r3, r3, #16
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	f000 8148 	beq.w	8006188 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005ef8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005efc:	f003 0310 	and.w	r3, r3, #16
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f000 8141 	beq.w	8006188 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f06:	2300      	movs	r3, #0
 8005f08:	60bb      	str	r3, [r7, #8]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	60bb      	str	r3, [r7, #8]
 8005f1a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	695b      	ldr	r3, [r3, #20]
 8005f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f26:	2b40      	cmp	r3, #64	@ 0x40
 8005f28:	f040 80b6 	bne.w	8006098 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005f38:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	f000 8145 	beq.w	80061cc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f46:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	f080 813e 	bcs.w	80061cc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005f56:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f5c:	69db      	ldr	r3, [r3, #28]
 8005f5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f62:	f000 8088 	beq.w	8006076 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	330c      	adds	r3, #12
 8005f6c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f70:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f74:	e853 3f00 	ldrex	r3, [r3]
 8005f78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005f7c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005f84:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	330c      	adds	r3, #12
 8005f8e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005f92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005f9e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005fa2:	e841 2300 	strex	r3, r2, [r1]
 8005fa6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005faa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1d9      	bne.n	8005f66 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3314      	adds	r3, #20
 8005fb8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005fbc:	e853 3f00 	ldrex	r3, [r3]
 8005fc0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005fc2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005fc4:	f023 0301 	bic.w	r3, r3, #1
 8005fc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	3314      	adds	r3, #20
 8005fd2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005fd6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005fda:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fdc:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005fe2:	e841 2300 	strex	r3, r2, [r1]
 8005fe6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005fe8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d1e1      	bne.n	8005fb2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3314      	adds	r3, #20
 8005ff4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005ff8:	e853 3f00 	ldrex	r3, [r3]
 8005ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005ffe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006000:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006004:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	3314      	adds	r3, #20
 800600e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006012:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006014:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006016:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006018:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800601a:	e841 2300 	strex	r3, r2, [r1]
 800601e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006020:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006022:	2b00      	cmp	r3, #0
 8006024:	d1e3      	bne.n	8005fee <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2220      	movs	r2, #32
 800602a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	330c      	adds	r3, #12
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800603c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800603e:	e853 3f00 	ldrex	r3, [r3]
 8006042:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006044:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006046:	f023 0310 	bic.w	r3, r3, #16
 800604a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	330c      	adds	r3, #12
 8006054:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006058:	65ba      	str	r2, [r7, #88]	@ 0x58
 800605a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800605c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800605e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006060:	e841 2300 	strex	r3, r2, [r1]
 8006064:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006066:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1e3      	bne.n	8006034 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006070:	4618      	mov	r0, r3
 8006072:	f7fd fa2b 	bl	80034cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2202      	movs	r2, #2
 800607a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006084:	b29b      	uxth	r3, r3
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	b29b      	uxth	r3, r3
 800608a:	4619      	mov	r1, r3
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f7fa fa8d 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006092:	e09b      	b.n	80061cc <HAL_UART_IRQHandler+0x518>
 8006094:	0800673b 	.word	0x0800673b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	1ad3      	subs	r3, r2, r3
 80060a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	f000 808e 	beq.w	80061d0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80060b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 8089 	beq.w	80061d0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	330c      	adds	r3, #12
 80060c4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c8:	e853 3f00 	ldrex	r3, [r3]
 80060cc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80060d4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	330c      	adds	r3, #12
 80060de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80060e2:	647a      	str	r2, [r7, #68]	@ 0x44
 80060e4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060e6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060e8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060ea:	e841 2300 	strex	r3, r2, [r1]
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d1e3      	bne.n	80060be <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	3314      	adds	r3, #20
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006100:	e853 3f00 	ldrex	r3, [r3]
 8006104:	623b      	str	r3, [r7, #32]
   return(result);
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	f023 0301 	bic.w	r3, r3, #1
 800610c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	3314      	adds	r3, #20
 8006116:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800611a:	633a      	str	r2, [r7, #48]	@ 0x30
 800611c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006120:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006128:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e3      	bne.n	80060f6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2220      	movs	r2, #32
 8006132:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	330c      	adds	r3, #12
 8006142:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	e853 3f00 	ldrex	r3, [r3]
 800614a:	60fb      	str	r3, [r7, #12]
   return(result);
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f023 0310 	bic.w	r3, r3, #16
 8006152:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	330c      	adds	r3, #12
 800615c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006160:	61fa      	str	r2, [r7, #28]
 8006162:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006164:	69b9      	ldr	r1, [r7, #24]
 8006166:	69fa      	ldr	r2, [r7, #28]
 8006168:	e841 2300 	strex	r3, r2, [r1]
 800616c:	617b      	str	r3, [r7, #20]
   return(result);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d1e3      	bne.n	800613c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800617a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800617e:	4619      	mov	r1, r3
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f7fa fa13 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006186:	e023      	b.n	80061d0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800618c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006190:	2b00      	cmp	r3, #0
 8006192:	d009      	beq.n	80061a8 <HAL_UART_IRQHandler+0x4f4>
 8006194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006198:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fade 	bl	8006762 <UART_Transmit_IT>
    return;
 80061a6:	e014      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80061a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d00e      	beq.n	80061d2 <HAL_UART_IRQHandler+0x51e>
 80061b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80061b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d008      	beq.n	80061d2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 fb1e 	bl	8006802 <UART_EndTransmit_IT>
    return;
 80061c6:	e004      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
    return;
 80061c8:	bf00      	nop
 80061ca:	e002      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80061cc:	bf00      	nop
 80061ce:	e000      	b.n	80061d2 <HAL_UART_IRQHandler+0x51e>
      return;
 80061d0:	bf00      	nop
  }
}
 80061d2:	37e8      	adds	r7, #232	@ 0xe8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}

080061d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80061e0:	bf00      	nop
 80061e2:	370c      	adds	r7, #12
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80061f4:	bf00      	nop
 80061f6:	370c      	adds	r7, #12
 80061f8:	46bd      	mov	sp, r7
 80061fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fe:	4770      	bx	lr

08006200 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006200:	b480      	push	{r7}
 8006202:	b083      	sub	sp, #12
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006208:	bf00      	nop
 800620a:	370c      	adds	r7, #12
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006214:	b480      	push	{r7}
 8006216:	b083      	sub	sp, #12
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800621c:	bf00      	nop
 800621e:	370c      	adds	r7, #12
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr

08006228 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006230:	bf00      	nop
 8006232:	370c      	adds	r7, #12
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr

0800623c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800623c:	b580      	push	{r7, lr}
 800623e:	b090      	sub	sp, #64	@ 0x40
 8006240:	af00      	add	r7, sp, #0
 8006242:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006248:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006254:	2b00      	cmp	r3, #0
 8006256:	d137      	bne.n	80062c8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8006258:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800625a:	2200      	movs	r2, #0
 800625c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800625e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3314      	adds	r3, #20
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	e853 3f00 	ldrex	r3, [r3]
 800626c:	623b      	str	r3, [r7, #32]
   return(result);
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006274:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006276:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	3314      	adds	r3, #20
 800627c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800627e:	633a      	str	r2, [r7, #48]	@ 0x30
 8006280:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006282:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006284:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006286:	e841 2300 	strex	r3, r2, [r1]
 800628a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800628c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800628e:	2b00      	cmp	r3, #0
 8006290:	d1e5      	bne.n	800625e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006292:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	330c      	adds	r3, #12
 8006298:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	e853 3f00 	ldrex	r3, [r3]
 80062a0:	60fb      	str	r3, [r7, #12]
   return(result);
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80062aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	330c      	adds	r3, #12
 80062b0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062b2:	61fa      	str	r2, [r7, #28]
 80062b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062b6:	69b9      	ldr	r1, [r7, #24]
 80062b8:	69fa      	ldr	r2, [r7, #28]
 80062ba:	e841 2300 	strex	r3, r2, [r1]
 80062be:	617b      	str	r3, [r7, #20]
   return(result);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d1e5      	bne.n	8006292 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80062c6:	e002      	b.n	80062ce <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80062c8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80062ca:	f7ff ff85 	bl	80061d8 <HAL_UART_TxCpltCallback>
}
 80062ce:	bf00      	nop
 80062d0:	3740      	adds	r7, #64	@ 0x40
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b084      	sub	sp, #16
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062e2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80062e4:	68f8      	ldr	r0, [r7, #12]
 80062e6:	f7ff ff81 	bl	80061ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062ea:	bf00      	nop
 80062ec:	3710      	adds	r7, #16
 80062ee:	46bd      	mov	sp, r7
 80062f0:	bd80      	pop	{r7, pc}

080062f2 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80062f2:	b580      	push	{r7, lr}
 80062f4:	b09c      	sub	sp, #112	@ 0x70
 80062f6:	af00      	add	r7, sp, #0
 80062f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062fe:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800630a:	2b00      	cmp	r3, #0
 800630c:	d172      	bne.n	80063f4 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 800630e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006310:	2200      	movs	r2, #0
 8006312:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006314:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	330c      	adds	r3, #12
 800631a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006326:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800632a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800632c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	330c      	adds	r3, #12
 8006332:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006334:	65ba      	str	r2, [r7, #88]	@ 0x58
 8006336:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006338:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800633a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800633c:	e841 2300 	strex	r3, r2, [r1]
 8006340:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006342:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1e5      	bne.n	8006314 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	3314      	adds	r3, #20
 800634e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006350:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006352:	e853 3f00 	ldrex	r3, [r3]
 8006356:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800635a:	f023 0301 	bic.w	r3, r3, #1
 800635e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006360:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	3314      	adds	r3, #20
 8006366:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006368:	647a      	str	r2, [r7, #68]	@ 0x44
 800636a:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800636e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e5      	bne.n	8006348 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800637c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3314      	adds	r3, #20
 8006382:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	623b      	str	r3, [r7, #32]
   return(result);
 800638c:	6a3b      	ldr	r3, [r7, #32]
 800638e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006392:	663b      	str	r3, [r7, #96]	@ 0x60
 8006394:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	3314      	adds	r3, #20
 800639a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800639c:	633a      	str	r2, [r7, #48]	@ 0x30
 800639e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063a4:	e841 2300 	strex	r3, r2, [r1]
 80063a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80063aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d1e5      	bne.n	800637c <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80063b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063b2:	2220      	movs	r2, #32
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d119      	bne.n	80063f4 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80063c0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	330c      	adds	r3, #12
 80063c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	e853 3f00 	ldrex	r3, [r3]
 80063ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f023 0310 	bic.w	r3, r3, #16
 80063d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80063d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	330c      	adds	r3, #12
 80063de:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80063e0:	61fa      	str	r2, [r7, #28]
 80063e2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063e4:	69b9      	ldr	r1, [r7, #24]
 80063e6:	69fa      	ldr	r2, [r7, #28]
 80063e8:	e841 2300 	strex	r3, r2, [r1]
 80063ec:	617b      	str	r3, [r7, #20]
   return(result);
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d1e5      	bne.n	80063c0 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80063f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063f6:	2200      	movs	r2, #0
 80063f8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063fa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80063fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d106      	bne.n	8006410 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006402:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006406:	4619      	mov	r1, r3
 8006408:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800640a:	f7fa f8cf 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800640e:	e002      	b.n	8006416 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006410:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006412:	f7ff fef5 	bl	8006200 <HAL_UART_RxCpltCallback>
}
 8006416:	bf00      	nop
 8006418:	3770      	adds	r7, #112	@ 0x70
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800642a:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	2201      	movs	r2, #1
 8006430:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006436:	2b01      	cmp	r3, #1
 8006438:	d108      	bne.n	800644c <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800643e:	085b      	lsrs	r3, r3, #1
 8006440:	b29b      	uxth	r3, r3
 8006442:	4619      	mov	r1, r3
 8006444:	68f8      	ldr	r0, [r7, #12]
 8006446:	f7fa f8b1 	bl	80005ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800644a:	e002      	b.n	8006452 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 800644c:	68f8      	ldr	r0, [r7, #12]
 800644e:	f7ff fee1 	bl	8006214 <HAL_UART_RxHalfCpltCallback>
}
 8006452:	bf00      	nop
 8006454:	3710      	adds	r7, #16
 8006456:	46bd      	mov	sp, r7
 8006458:	bd80      	pop	{r7, pc}

0800645a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800645a:	b580      	push	{r7, lr}
 800645c:	b084      	sub	sp, #16
 800645e:	af00      	add	r7, sp, #0
 8006460:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006462:	2300      	movs	r3, #0
 8006464:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800646a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	695b      	ldr	r3, [r3, #20]
 8006472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006476:	2b80      	cmp	r3, #128	@ 0x80
 8006478:	bf0c      	ite	eq
 800647a:	2301      	moveq	r3, #1
 800647c:	2300      	movne	r3, #0
 800647e:	b2db      	uxtb	r3, r3
 8006480:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006488:	b2db      	uxtb	r3, r3
 800648a:	2b21      	cmp	r3, #33	@ 0x21
 800648c:	d108      	bne.n	80064a0 <UART_DMAError+0x46>
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d005      	beq.n	80064a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2200      	movs	r2, #0
 8006498:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800649a:	68b8      	ldr	r0, [r7, #8]
 800649c:	f000 f8c2 	bl	8006624 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064aa:	2b40      	cmp	r3, #64	@ 0x40
 80064ac:	bf0c      	ite	eq
 80064ae:	2301      	moveq	r3, #1
 80064b0:	2300      	movne	r3, #0
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	2b22      	cmp	r3, #34	@ 0x22
 80064c0:	d108      	bne.n	80064d4 <UART_DMAError+0x7a>
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d005      	beq.n	80064d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2200      	movs	r2, #0
 80064cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80064ce:	68b8      	ldr	r0, [r7, #8]
 80064d0:	f000 f8d0 	bl	8006674 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d8:	f043 0210 	orr.w	r2, r3, #16
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	f7ff fea1 	bl	8006228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80064e6:	bf00      	nop
 80064e8:	3710      	adds	r7, #16
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b098      	sub	sp, #96	@ 0x60
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	4613      	mov	r3, r2
 80064fc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80064fe:	68ba      	ldr	r2, [r7, #8]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	88fa      	ldrh	r2, [r7, #6]
 8006508:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	2222      	movs	r2, #34	@ 0x22
 8006514:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800651c:	4a3e      	ldr	r2, [pc, #248]	@ (8006618 <UART_Start_Receive_DMA+0x128>)
 800651e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006524:	4a3d      	ldr	r2, [pc, #244]	@ (800661c <UART_Start_Receive_DMA+0x12c>)
 8006526:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800652c:	4a3c      	ldr	r2, [pc, #240]	@ (8006620 <UART_Start_Receive_DMA+0x130>)
 800652e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006534:	2200      	movs	r2, #0
 8006536:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006538:	f107 0308 	add.w	r3, r7, #8
 800653c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	3304      	adds	r3, #4
 8006548:	4619      	mov	r1, r3
 800654a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800654c:	681a      	ldr	r2, [r3, #0]
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	f7fc ff64 	bl	800341c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	613b      	str	r3, [r7, #16]
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	613b      	str	r3, [r7, #16]
 8006568:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d019      	beq.n	80065a6 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006582:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006584:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006588:	65bb      	str	r3, [r7, #88]	@ 0x58
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	330c      	adds	r3, #12
 8006590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006592:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8006594:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006598:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80065a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80065b0:	e853 3f00 	ldrex	r3, [r3]
 80065b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065b8:	f043 0301 	orr.w	r3, r3, #1
 80065bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	3314      	adds	r3, #20
 80065c4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80065c6:	63ba      	str	r2, [r7, #56]	@ 0x38
 80065c8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80065cc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ce:	e841 2300 	strex	r3, r2, [r1]
 80065d2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80065d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1e5      	bne.n	80065a6 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e2:	69bb      	ldr	r3, [r7, #24]
 80065e4:	e853 3f00 	ldrex	r3, [r3]
 80065e8:	617b      	str	r3, [r7, #20]
   return(result);
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	3314      	adds	r3, #20
 80065f8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80065fa:	627a      	str	r2, [r7, #36]	@ 0x24
 80065fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065fe:	6a39      	ldr	r1, [r7, #32]
 8006600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006602:	e841 2300 	strex	r3, r2, [r1]
 8006606:	61fb      	str	r3, [r7, #28]
   return(result);
 8006608:	69fb      	ldr	r3, [r7, #28]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d1e5      	bne.n	80065da <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3760      	adds	r7, #96	@ 0x60
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	080062f3 	.word	0x080062f3
 800661c:	0800641f 	.word	0x0800641f
 8006620:	0800645b 	.word	0x0800645b

08006624 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006624:	b480      	push	{r7}
 8006626:	b089      	sub	sp, #36	@ 0x24
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	330c      	adds	r3, #12
 8006632:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	e853 3f00 	ldrex	r3, [r3]
 800663a:	60bb      	str	r3, [r7, #8]
   return(result);
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006642:	61fb      	str	r3, [r7, #28]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	330c      	adds	r3, #12
 800664a:	69fa      	ldr	r2, [r7, #28]
 800664c:	61ba      	str	r2, [r7, #24]
 800664e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006650:	6979      	ldr	r1, [r7, #20]
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	e841 2300 	strex	r3, r2, [r1]
 8006658:	613b      	str	r3, [r7, #16]
   return(result);
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e5      	bne.n	800662c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2220      	movs	r2, #32
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8006668:	bf00      	nop
 800666a:	3724      	adds	r7, #36	@ 0x24
 800666c:	46bd      	mov	sp, r7
 800666e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006672:	4770      	bx	lr

08006674 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006674:	b480      	push	{r7}
 8006676:	b095      	sub	sp, #84	@ 0x54
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	330c      	adds	r3, #12
 8006682:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006684:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006686:	e853 3f00 	ldrex	r3, [r3]
 800668a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800668c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800668e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	330c      	adds	r3, #12
 800669a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800669c:	643a      	str	r2, [r7, #64]	@ 0x40
 800669e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066a0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80066a2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066a4:	e841 2300 	strex	r3, r2, [r1]
 80066a8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80066aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1e5      	bne.n	800667c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	3314      	adds	r3, #20
 80066b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b8:	6a3b      	ldr	r3, [r7, #32]
 80066ba:	e853 3f00 	ldrex	r3, [r3]
 80066be:	61fb      	str	r3, [r7, #28]
   return(result);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	f023 0301 	bic.w	r3, r3, #1
 80066c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	3314      	adds	r3, #20
 80066ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80066d0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80066d6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80066d8:	e841 2300 	strex	r3, r2, [r1]
 80066dc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d1e5      	bne.n	80066b0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d119      	bne.n	8006720 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	330c      	adds	r3, #12
 80066f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	e853 3f00 	ldrex	r3, [r3]
 80066fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f023 0310 	bic.w	r3, r3, #16
 8006702:	647b      	str	r3, [r7, #68]	@ 0x44
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	330c      	adds	r3, #12
 800670a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800670c:	61ba      	str	r2, [r7, #24]
 800670e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006710:	6979      	ldr	r1, [r7, #20]
 8006712:	69ba      	ldr	r2, [r7, #24]
 8006714:	e841 2300 	strex	r3, r2, [r1]
 8006718:	613b      	str	r3, [r7, #16]
   return(result);
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1e5      	bne.n	80066ec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2220      	movs	r2, #32
 8006724:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2200      	movs	r2, #0
 800672c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800672e:	bf00      	nop
 8006730:	3754      	adds	r7, #84	@ 0x54
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr

0800673a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800673a:	b580      	push	{r7, lr}
 800673c:	b084      	sub	sp, #16
 800673e:	af00      	add	r7, sp, #0
 8006740:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006746:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2200      	movs	r2, #0
 800674c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006754:	68f8      	ldr	r0, [r7, #12]
 8006756:	f7ff fd67 	bl	8006228 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800675a:	bf00      	nop
 800675c:	3710      	adds	r7, #16
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}

08006762 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006762:	b480      	push	{r7}
 8006764:	b085      	sub	sp, #20
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b21      	cmp	r3, #33	@ 0x21
 8006774:	d13e      	bne.n	80067f4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677e:	d114      	bne.n	80067aa <UART_Transmit_IT+0x48>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	691b      	ldr	r3, [r3, #16]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d110      	bne.n	80067aa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a1b      	ldr	r3, [r3, #32]
 800678c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	881b      	ldrh	r3, [r3, #0]
 8006792:	461a      	mov	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800679c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6a1b      	ldr	r3, [r3, #32]
 80067a2:	1c9a      	adds	r2, r3, #2
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	621a      	str	r2, [r3, #32]
 80067a8:	e008      	b.n	80067bc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6a1b      	ldr	r3, [r3, #32]
 80067ae:	1c59      	adds	r1, r3, #1
 80067b0:	687a      	ldr	r2, [r7, #4]
 80067b2:	6211      	str	r1, [r2, #32]
 80067b4:	781a      	ldrb	r2, [r3, #0]
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	3b01      	subs	r3, #1
 80067c4:	b29b      	uxth	r3, r3
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	4619      	mov	r1, r3
 80067ca:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d10f      	bne.n	80067f0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80067de:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68da      	ldr	r2, [r3, #12]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067ee:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067f0:	2300      	movs	r3, #0
 80067f2:	e000      	b.n	80067f6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067f4:	2302      	movs	r3, #2
  }
}
 80067f6:	4618      	mov	r0, r3
 80067f8:	3714      	adds	r7, #20
 80067fa:	46bd      	mov	sp, r7
 80067fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006800:	4770      	bx	lr

08006802 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006802:	b580      	push	{r7, lr}
 8006804:	b082      	sub	sp, #8
 8006806:	af00      	add	r7, sp, #0
 8006808:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	68da      	ldr	r2, [r3, #12]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006818:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006822:	6878      	ldr	r0, [r7, #4]
 8006824:	f7ff fcd8 	bl	80061d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006828:	2300      	movs	r3, #0
}
 800682a:	4618      	mov	r0, r3
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b08c      	sub	sp, #48	@ 0x30
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b22      	cmp	r3, #34	@ 0x22
 8006844:	f040 80ae 	bne.w	80069a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	689b      	ldr	r3, [r3, #8]
 800684c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006850:	d117      	bne.n	8006882 <UART_Receive_IT+0x50>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d113      	bne.n	8006882 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800685a:	2300      	movs	r3, #0
 800685c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006862:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	685b      	ldr	r3, [r3, #4]
 800686a:	b29b      	uxth	r3, r3
 800686c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006870:	b29a      	uxth	r2, r3
 8006872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006874:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800687a:	1c9a      	adds	r2, r3, #2
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	629a      	str	r2, [r3, #40]	@ 0x28
 8006880:	e026      	b.n	80068d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006886:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006888:	2300      	movs	r3, #0
 800688a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	689b      	ldr	r3, [r3, #8]
 8006890:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006894:	d007      	beq.n	80068a6 <UART_Receive_IT+0x74>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	689b      	ldr	r3, [r3, #8]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10a      	bne.n	80068b4 <UART_Receive_IT+0x82>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d106      	bne.n	80068b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	685b      	ldr	r3, [r3, #4]
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068b0:	701a      	strb	r2, [r3, #0]
 80068b2:	e008      	b.n	80068c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068c0:	b2da      	uxtb	r2, r3
 80068c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068ca:	1c5a      	adds	r2, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	3b01      	subs	r3, #1
 80068d8:	b29b      	uxth	r3, r3
 80068da:	687a      	ldr	r2, [r7, #4]
 80068dc:	4619      	mov	r1, r3
 80068de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d15d      	bne.n	80069a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f022 0220 	bic.w	r2, r2, #32
 80068f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68da      	ldr	r2, [r3, #12]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006902:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	695a      	ldr	r2, [r3, #20]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2220      	movs	r2, #32
 8006918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2200      	movs	r2, #0
 8006920:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006926:	2b01      	cmp	r3, #1
 8006928:	d135      	bne.n	8006996 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	613b      	str	r3, [r7, #16]
   return(result);
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	f023 0310 	bic.w	r3, r3, #16
 8006946:	627b      	str	r3, [r7, #36]	@ 0x24
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006950:	623a      	str	r2, [r7, #32]
 8006952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	69f9      	ldr	r1, [r7, #28]
 8006956:	6a3a      	ldr	r2, [r7, #32]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	61bb      	str	r3, [r7, #24]
   return(result);
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	f003 0310 	and.w	r3, r3, #16
 800696e:	2b10      	cmp	r3, #16
 8006970:	d10a      	bne.n	8006988 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006972:	2300      	movs	r3, #0
 8006974:	60fb      	str	r3, [r7, #12]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	60fb      	str	r3, [r7, #12]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	60fb      	str	r3, [r7, #12]
 8006986:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7f9 fe0c 	bl	80005ac <HAL_UARTEx_RxEventCallback>
 8006994:	e002      	b.n	800699c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff fc32 	bl	8006200 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800699c:	2300      	movs	r3, #0
 800699e:	e002      	b.n	80069a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80069a0:	2300      	movs	r3, #0
 80069a2:	e000      	b.n	80069a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80069a4:	2302      	movs	r3, #2
  }
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3730      	adds	r7, #48	@ 0x30
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
	...

080069b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80069b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069b4:	b0c0      	sub	sp, #256	@ 0x100
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	691b      	ldr	r3, [r3, #16]
 80069c4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80069c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069cc:	68d9      	ldr	r1, [r3, #12]
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	ea40 0301 	orr.w	r3, r0, r1
 80069d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	431a      	orrs	r2, r3
 80069e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069ec:	695b      	ldr	r3, [r3, #20]
 80069ee:	431a      	orrs	r2, r3
 80069f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069f4:	69db      	ldr	r3, [r3, #28]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68db      	ldr	r3, [r3, #12]
 8006a04:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006a08:	f021 010c 	bic.w	r1, r1, #12
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006a16:	430b      	orrs	r3, r1
 8006a18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	695b      	ldr	r3, [r3, #20]
 8006a22:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a2a:	6999      	ldr	r1, [r3, #24]
 8006a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	ea40 0301 	orr.w	r3, r0, r1
 8006a36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a3c:	681a      	ldr	r2, [r3, #0]
 8006a3e:	4b8f      	ldr	r3, [pc, #572]	@ (8006c7c <UART_SetConfig+0x2cc>)
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d005      	beq.n	8006a50 <UART_SetConfig+0xa0>
 8006a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a48:	681a      	ldr	r2, [r3, #0]
 8006a4a:	4b8d      	ldr	r3, [pc, #564]	@ (8006c80 <UART_SetConfig+0x2d0>)
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	d104      	bne.n	8006a5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a50:	f7fd ffa6 	bl	80049a0 <HAL_RCC_GetPCLK2Freq>
 8006a54:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006a58:	e003      	b.n	8006a62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a5a:	f7fd ff8d 	bl	8004978 <HAL_RCC_GetPCLK1Freq>
 8006a5e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a66:	69db      	ldr	r3, [r3, #28]
 8006a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a6c:	f040 810c 	bne.w	8006c88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006a7a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006a7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006a82:	4622      	mov	r2, r4
 8006a84:	462b      	mov	r3, r5
 8006a86:	1891      	adds	r1, r2, r2
 8006a88:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006a8a:	415b      	adcs	r3, r3
 8006a8c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006a8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006a92:	4621      	mov	r1, r4
 8006a94:	eb12 0801 	adds.w	r8, r2, r1
 8006a98:	4629      	mov	r1, r5
 8006a9a:	eb43 0901 	adc.w	r9, r3, r1
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aaa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006aae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ab2:	4690      	mov	r8, r2
 8006ab4:	4699      	mov	r9, r3
 8006ab6:	4623      	mov	r3, r4
 8006ab8:	eb18 0303 	adds.w	r3, r8, r3
 8006abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006ac0:	462b      	mov	r3, r5
 8006ac2:	eb49 0303 	adc.w	r3, r9, r3
 8006ac6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ace:	685b      	ldr	r3, [r3, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ad6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ada:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ade:	460b      	mov	r3, r1
 8006ae0:	18db      	adds	r3, r3, r3
 8006ae2:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	eb42 0303 	adc.w	r3, r2, r3
 8006aea:	657b      	str	r3, [r7, #84]	@ 0x54
 8006aec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006af0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006af4:	f7f9 fbbc 	bl	8000270 <__aeabi_uldivmod>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4b61      	ldr	r3, [pc, #388]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006afe:	fba3 2302 	umull	r2, r3, r3, r2
 8006b02:	095b      	lsrs	r3, r3, #5
 8006b04:	011c      	lsls	r4, r3, #4
 8006b06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006b10:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006b14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006b18:	4642      	mov	r2, r8
 8006b1a:	464b      	mov	r3, r9
 8006b1c:	1891      	adds	r1, r2, r2
 8006b1e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006b20:	415b      	adcs	r3, r3
 8006b22:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006b28:	4641      	mov	r1, r8
 8006b2a:	eb12 0a01 	adds.w	sl, r2, r1
 8006b2e:	4649      	mov	r1, r9
 8006b30:	eb43 0b01 	adc.w	fp, r3, r1
 8006b34:	f04f 0200 	mov.w	r2, #0
 8006b38:	f04f 0300 	mov.w	r3, #0
 8006b3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b48:	4692      	mov	sl, r2
 8006b4a:	469b      	mov	fp, r3
 8006b4c:	4643      	mov	r3, r8
 8006b4e:	eb1a 0303 	adds.w	r3, sl, r3
 8006b52:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b56:	464b      	mov	r3, r9
 8006b58:	eb4b 0303 	adc.w	r3, fp, r3
 8006b5c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006b60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b6c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006b70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006b74:	460b      	mov	r3, r1
 8006b76:	18db      	adds	r3, r3, r3
 8006b78:	643b      	str	r3, [r7, #64]	@ 0x40
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	eb42 0303 	adc.w	r3, r2, r3
 8006b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006b86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006b8a:	f7f9 fb71 	bl	8000270 <__aeabi_uldivmod>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	460b      	mov	r3, r1
 8006b92:	4611      	mov	r1, r2
 8006b94:	4b3b      	ldr	r3, [pc, #236]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006b96:	fba3 2301 	umull	r2, r3, r3, r1
 8006b9a:	095b      	lsrs	r3, r3, #5
 8006b9c:	2264      	movs	r2, #100	@ 0x64
 8006b9e:	fb02 f303 	mul.w	r3, r2, r3
 8006ba2:	1acb      	subs	r3, r1, r3
 8006ba4:	00db      	lsls	r3, r3, #3
 8006ba6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006baa:	4b36      	ldr	r3, [pc, #216]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006bac:	fba3 2302 	umull	r2, r3, r3, r2
 8006bb0:	095b      	lsrs	r3, r3, #5
 8006bb2:	005b      	lsls	r3, r3, #1
 8006bb4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006bb8:	441c      	add	r4, r3
 8006bba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006bc4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006bc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006bcc:	4642      	mov	r2, r8
 8006bce:	464b      	mov	r3, r9
 8006bd0:	1891      	adds	r1, r2, r2
 8006bd2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006bd4:	415b      	adcs	r3, r3
 8006bd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006bd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006bdc:	4641      	mov	r1, r8
 8006bde:	1851      	adds	r1, r2, r1
 8006be0:	6339      	str	r1, [r7, #48]	@ 0x30
 8006be2:	4649      	mov	r1, r9
 8006be4:	414b      	adcs	r3, r1
 8006be6:	637b      	str	r3, [r7, #52]	@ 0x34
 8006be8:	f04f 0200 	mov.w	r2, #0
 8006bec:	f04f 0300 	mov.w	r3, #0
 8006bf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006bf4:	4659      	mov	r1, fp
 8006bf6:	00cb      	lsls	r3, r1, #3
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bfe:	4651      	mov	r1, sl
 8006c00:	00ca      	lsls	r2, r1, #3
 8006c02:	4610      	mov	r0, r2
 8006c04:	4619      	mov	r1, r3
 8006c06:	4603      	mov	r3, r0
 8006c08:	4642      	mov	r2, r8
 8006c0a:	189b      	adds	r3, r3, r2
 8006c0c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006c10:	464b      	mov	r3, r9
 8006c12:	460a      	mov	r2, r1
 8006c14:	eb42 0303 	adc.w	r3, r2, r3
 8006c18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006c28:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006c2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006c30:	460b      	mov	r3, r1
 8006c32:	18db      	adds	r3, r3, r3
 8006c34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c36:	4613      	mov	r3, r2
 8006c38:	eb42 0303 	adc.w	r3, r2, r3
 8006c3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006c42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006c46:	f7f9 fb13 	bl	8000270 <__aeabi_uldivmod>
 8006c4a:	4602      	mov	r2, r0
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006c50:	fba3 1302 	umull	r1, r3, r3, r2
 8006c54:	095b      	lsrs	r3, r3, #5
 8006c56:	2164      	movs	r1, #100	@ 0x64
 8006c58:	fb01 f303 	mul.w	r3, r1, r3
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	00db      	lsls	r3, r3, #3
 8006c60:	3332      	adds	r3, #50	@ 0x32
 8006c62:	4a08      	ldr	r2, [pc, #32]	@ (8006c84 <UART_SetConfig+0x2d4>)
 8006c64:	fba2 2303 	umull	r2, r3, r2, r3
 8006c68:	095b      	lsrs	r3, r3, #5
 8006c6a:	f003 0207 	and.w	r2, r3, #7
 8006c6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	4422      	add	r2, r4
 8006c76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c78:	e106      	b.n	8006e88 <UART_SetConfig+0x4d8>
 8006c7a:	bf00      	nop
 8006c7c:	40011000 	.word	0x40011000
 8006c80:	40011400 	.word	0x40011400
 8006c84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006c92:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006c96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006c9a:	4642      	mov	r2, r8
 8006c9c:	464b      	mov	r3, r9
 8006c9e:	1891      	adds	r1, r2, r2
 8006ca0:	6239      	str	r1, [r7, #32]
 8006ca2:	415b      	adcs	r3, r3
 8006ca4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006ca6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006caa:	4641      	mov	r1, r8
 8006cac:	1854      	adds	r4, r2, r1
 8006cae:	4649      	mov	r1, r9
 8006cb0:	eb43 0501 	adc.w	r5, r3, r1
 8006cb4:	f04f 0200 	mov.w	r2, #0
 8006cb8:	f04f 0300 	mov.w	r3, #0
 8006cbc:	00eb      	lsls	r3, r5, #3
 8006cbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006cc2:	00e2      	lsls	r2, r4, #3
 8006cc4:	4614      	mov	r4, r2
 8006cc6:	461d      	mov	r5, r3
 8006cc8:	4643      	mov	r3, r8
 8006cca:	18e3      	adds	r3, r4, r3
 8006ccc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006cd0:	464b      	mov	r3, r9
 8006cd2:	eb45 0303 	adc.w	r3, r5, r3
 8006cd6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006ce6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006cea:	f04f 0200 	mov.w	r2, #0
 8006cee:	f04f 0300 	mov.w	r3, #0
 8006cf2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006cf6:	4629      	mov	r1, r5
 8006cf8:	008b      	lsls	r3, r1, #2
 8006cfa:	4621      	mov	r1, r4
 8006cfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d00:	4621      	mov	r1, r4
 8006d02:	008a      	lsls	r2, r1, #2
 8006d04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006d08:	f7f9 fab2 	bl	8000270 <__aeabi_uldivmod>
 8006d0c:	4602      	mov	r2, r0
 8006d0e:	460b      	mov	r3, r1
 8006d10:	4b60      	ldr	r3, [pc, #384]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006d12:	fba3 2302 	umull	r2, r3, r3, r2
 8006d16:	095b      	lsrs	r3, r3, #5
 8006d18:	011c      	lsls	r4, r3, #4
 8006d1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006d24:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006d28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	464b      	mov	r3, r9
 8006d30:	1891      	adds	r1, r2, r2
 8006d32:	61b9      	str	r1, [r7, #24]
 8006d34:	415b      	adcs	r3, r3
 8006d36:	61fb      	str	r3, [r7, #28]
 8006d38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d3c:	4641      	mov	r1, r8
 8006d3e:	1851      	adds	r1, r2, r1
 8006d40:	6139      	str	r1, [r7, #16]
 8006d42:	4649      	mov	r1, r9
 8006d44:	414b      	adcs	r3, r1
 8006d46:	617b      	str	r3, [r7, #20]
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d54:	4659      	mov	r1, fp
 8006d56:	00cb      	lsls	r3, r1, #3
 8006d58:	4651      	mov	r1, sl
 8006d5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d5e:	4651      	mov	r1, sl
 8006d60:	00ca      	lsls	r2, r1, #3
 8006d62:	4610      	mov	r0, r2
 8006d64:	4619      	mov	r1, r3
 8006d66:	4603      	mov	r3, r0
 8006d68:	4642      	mov	r2, r8
 8006d6a:	189b      	adds	r3, r3, r2
 8006d6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006d70:	464b      	mov	r3, r9
 8006d72:	460a      	mov	r2, r1
 8006d74:	eb42 0303 	adc.w	r3, r2, r3
 8006d78:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006d86:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006d88:	f04f 0200 	mov.w	r2, #0
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006d94:	4649      	mov	r1, r9
 8006d96:	008b      	lsls	r3, r1, #2
 8006d98:	4641      	mov	r1, r8
 8006d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d9e:	4641      	mov	r1, r8
 8006da0:	008a      	lsls	r2, r1, #2
 8006da2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006da6:	f7f9 fa63 	bl	8000270 <__aeabi_uldivmod>
 8006daa:	4602      	mov	r2, r0
 8006dac:	460b      	mov	r3, r1
 8006dae:	4611      	mov	r1, r2
 8006db0:	4b38      	ldr	r3, [pc, #224]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006db2:	fba3 2301 	umull	r2, r3, r3, r1
 8006db6:	095b      	lsrs	r3, r3, #5
 8006db8:	2264      	movs	r2, #100	@ 0x64
 8006dba:	fb02 f303 	mul.w	r3, r2, r3
 8006dbe:	1acb      	subs	r3, r1, r3
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	3332      	adds	r3, #50	@ 0x32
 8006dc4:	4a33      	ldr	r2, [pc, #204]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dca:	095b      	lsrs	r3, r3, #5
 8006dcc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006dd0:	441c      	add	r4, r3
 8006dd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	673b      	str	r3, [r7, #112]	@ 0x70
 8006dda:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ddc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006de0:	4642      	mov	r2, r8
 8006de2:	464b      	mov	r3, r9
 8006de4:	1891      	adds	r1, r2, r2
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	415b      	adcs	r3, r3
 8006dea:	60fb      	str	r3, [r7, #12]
 8006dec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006df0:	4641      	mov	r1, r8
 8006df2:	1851      	adds	r1, r2, r1
 8006df4:	6039      	str	r1, [r7, #0]
 8006df6:	4649      	mov	r1, r9
 8006df8:	414b      	adcs	r3, r1
 8006dfa:	607b      	str	r3, [r7, #4]
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006e08:	4659      	mov	r1, fp
 8006e0a:	00cb      	lsls	r3, r1, #3
 8006e0c:	4651      	mov	r1, sl
 8006e0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e12:	4651      	mov	r1, sl
 8006e14:	00ca      	lsls	r2, r1, #3
 8006e16:	4610      	mov	r0, r2
 8006e18:	4619      	mov	r1, r3
 8006e1a:	4603      	mov	r3, r0
 8006e1c:	4642      	mov	r2, r8
 8006e1e:	189b      	adds	r3, r3, r2
 8006e20:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006e22:	464b      	mov	r3, r9
 8006e24:	460a      	mov	r2, r1
 8006e26:	eb42 0303 	adc.w	r3, r2, r3
 8006e2a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e36:	667a      	str	r2, [r7, #100]	@ 0x64
 8006e38:	f04f 0200 	mov.w	r2, #0
 8006e3c:	f04f 0300 	mov.w	r3, #0
 8006e40:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006e44:	4649      	mov	r1, r9
 8006e46:	008b      	lsls	r3, r1, #2
 8006e48:	4641      	mov	r1, r8
 8006e4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e4e:	4641      	mov	r1, r8
 8006e50:	008a      	lsls	r2, r1, #2
 8006e52:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006e56:	f7f9 fa0b 	bl	8000270 <__aeabi_uldivmod>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	460b      	mov	r3, r1
 8006e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006e60:	fba3 1302 	umull	r1, r3, r3, r2
 8006e64:	095b      	lsrs	r3, r3, #5
 8006e66:	2164      	movs	r1, #100	@ 0x64
 8006e68:	fb01 f303 	mul.w	r3, r1, r3
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	011b      	lsls	r3, r3, #4
 8006e70:	3332      	adds	r3, #50	@ 0x32
 8006e72:	4a08      	ldr	r2, [pc, #32]	@ (8006e94 <UART_SetConfig+0x4e4>)
 8006e74:	fba2 2303 	umull	r2, r3, r2, r3
 8006e78:	095b      	lsrs	r3, r3, #5
 8006e7a:	f003 020f 	and.w	r2, r3, #15
 8006e7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4422      	add	r2, r4
 8006e86:	609a      	str	r2, [r3, #8]
}
 8006e88:	bf00      	nop
 8006e8a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e94:	51eb851f 	.word	0x51eb851f

08006e98 <__NVIC_SetPriority>:
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b083      	sub	sp, #12
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	6039      	str	r1, [r7, #0]
 8006ea2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	db0a      	blt.n	8006ec2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	490c      	ldr	r1, [pc, #48]	@ (8006ee4 <__NVIC_SetPriority+0x4c>)
 8006eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006eb6:	0112      	lsls	r2, r2, #4
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	440b      	add	r3, r1
 8006ebc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006ec0:	e00a      	b.n	8006ed8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	b2da      	uxtb	r2, r3
 8006ec6:	4908      	ldr	r1, [pc, #32]	@ (8006ee8 <__NVIC_SetPriority+0x50>)
 8006ec8:	79fb      	ldrb	r3, [r7, #7]
 8006eca:	f003 030f 	and.w	r3, r3, #15
 8006ece:	3b04      	subs	r3, #4
 8006ed0:	0112      	lsls	r2, r2, #4
 8006ed2:	b2d2      	uxtb	r2, r2
 8006ed4:	440b      	add	r3, r1
 8006ed6:	761a      	strb	r2, [r3, #24]
}
 8006ed8:	bf00      	nop
 8006eda:	370c      	adds	r7, #12
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	e000e100 	.word	0xe000e100
 8006ee8:	e000ed00 	.word	0xe000ed00

08006eec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006ef0:	2100      	movs	r1, #0
 8006ef2:	f06f 0004 	mvn.w	r0, #4
 8006ef6:	f7ff ffcf 	bl	8006e98 <__NVIC_SetPriority>
#endif
}
 8006efa:	bf00      	nop
 8006efc:	bd80      	pop	{r7, pc}
	...

08006f00 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f06:	f3ef 8305 	mrs	r3, IPSR
 8006f0a:	603b      	str	r3, [r7, #0]
  return(result);
 8006f0c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d003      	beq.n	8006f1a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006f12:	f06f 0305 	mvn.w	r3, #5
 8006f16:	607b      	str	r3, [r7, #4]
 8006f18:	e00c      	b.n	8006f34 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8006f1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f44 <osKernelInitialize+0x44>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d105      	bne.n	8006f2e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8006f22:	4b08      	ldr	r3, [pc, #32]	@ (8006f44 <osKernelInitialize+0x44>)
 8006f24:	2201      	movs	r2, #1
 8006f26:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	607b      	str	r3, [r7, #4]
 8006f2c:	e002      	b.n	8006f34 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8006f2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f32:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f34:	687b      	ldr	r3, [r7, #4]
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	370c      	adds	r7, #12
 8006f3a:	46bd      	mov	sp, r7
 8006f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f40:	4770      	bx	lr
 8006f42:	bf00      	nop
 8006f44:	20000864 	.word	0x20000864

08006f48 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b082      	sub	sp, #8
 8006f4c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006f4e:	f3ef 8305 	mrs	r3, IPSR
 8006f52:	603b      	str	r3, [r7, #0]
  return(result);
 8006f54:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d003      	beq.n	8006f62 <osKernelStart+0x1a>
    stat = osErrorISR;
 8006f5a:	f06f 0305 	mvn.w	r3, #5
 8006f5e:	607b      	str	r3, [r7, #4]
 8006f60:	e010      	b.n	8006f84 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8006f62:	4b0b      	ldr	r3, [pc, #44]	@ (8006f90 <osKernelStart+0x48>)
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	2b01      	cmp	r3, #1
 8006f68:	d109      	bne.n	8006f7e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8006f6a:	f7ff ffbf 	bl	8006eec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8006f6e:	4b08      	ldr	r3, [pc, #32]	@ (8006f90 <osKernelStart+0x48>)
 8006f70:	2202      	movs	r2, #2
 8006f72:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8006f74:	f001 f892 	bl	800809c <vTaskStartScheduler>
      stat = osOK;
 8006f78:	2300      	movs	r3, #0
 8006f7a:	607b      	str	r3, [r7, #4]
 8006f7c:	e002      	b.n	8006f84 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8006f7e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006f82:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8006f84:	687b      	ldr	r3, [r7, #4]
}
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	20000864 	.word	0x20000864

08006f94 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b08e      	sub	sp, #56	@ 0x38
 8006f98:	af04      	add	r7, sp, #16
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	60b9      	str	r1, [r7, #8]
 8006f9e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006fa4:	f3ef 8305 	mrs	r3, IPSR
 8006fa8:	617b      	str	r3, [r7, #20]
  return(result);
 8006faa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d17e      	bne.n	80070ae <osThreadNew+0x11a>
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d07b      	beq.n	80070ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8006fb6:	2380      	movs	r3, #128	@ 0x80
 8006fb8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8006fba:	2318      	movs	r3, #24
 8006fbc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8006fc2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fc6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d045      	beq.n	800705a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <osThreadNew+0x48>
        name = attr->name;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	699b      	ldr	r3, [r3, #24]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d002      	beq.n	8006fea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	699b      	ldr	r3, [r3, #24]
 8006fe8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8006fea:	69fb      	ldr	r3, [r7, #28]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d008      	beq.n	8007002 <osThreadNew+0x6e>
 8006ff0:	69fb      	ldr	r3, [r7, #28]
 8006ff2:	2b38      	cmp	r3, #56	@ 0x38
 8006ff4:	d805      	bhi.n	8007002 <osThreadNew+0x6e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	685b      	ldr	r3, [r3, #4]
 8006ffa:	f003 0301 	and.w	r3, r3, #1
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d001      	beq.n	8007006 <osThreadNew+0x72>
        return (NULL);
 8007002:	2300      	movs	r3, #0
 8007004:	e054      	b.n	80070b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d003      	beq.n	8007016 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	695b      	ldr	r3, [r3, #20]
 8007012:	089b      	lsrs	r3, r3, #2
 8007014:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	689b      	ldr	r3, [r3, #8]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d00e      	beq.n	800703c <osThreadNew+0xa8>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	2ba7      	cmp	r3, #167	@ 0xa7
 8007024:	d90a      	bls.n	800703c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800702a:	2b00      	cmp	r3, #0
 800702c:	d006      	beq.n	800703c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	695b      	ldr	r3, [r3, #20]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d002      	beq.n	800703c <osThreadNew+0xa8>
        mem = 1;
 8007036:	2301      	movs	r3, #1
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	e010      	b.n	800705e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	689b      	ldr	r3, [r3, #8]
 8007040:	2b00      	cmp	r3, #0
 8007042:	d10c      	bne.n	800705e <osThreadNew+0xca>
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	68db      	ldr	r3, [r3, #12]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d108      	bne.n	800705e <osThreadNew+0xca>
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	691b      	ldr	r3, [r3, #16]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d104      	bne.n	800705e <osThreadNew+0xca>
          mem = 0;
 8007054:	2300      	movs	r3, #0
 8007056:	61bb      	str	r3, [r7, #24]
 8007058:	e001      	b.n	800705e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800705a:	2300      	movs	r3, #0
 800705c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b01      	cmp	r3, #1
 8007062:	d110      	bne.n	8007086 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007068:	687a      	ldr	r2, [r7, #4]
 800706a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800706c:	9202      	str	r2, [sp, #8]
 800706e:	9301      	str	r3, [sp, #4]
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	9300      	str	r3, [sp, #0]
 8007074:	68bb      	ldr	r3, [r7, #8]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800707a:	68f8      	ldr	r0, [r7, #12]
 800707c:	f000 fe1a 	bl	8007cb4 <xTaskCreateStatic>
 8007080:	4603      	mov	r3, r0
 8007082:	613b      	str	r3, [r7, #16]
 8007084:	e013      	b.n	80070ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007086:	69bb      	ldr	r3, [r7, #24]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d110      	bne.n	80070ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800708c:	6a3b      	ldr	r3, [r7, #32]
 800708e:	b29a      	uxth	r2, r3
 8007090:	f107 0310 	add.w	r3, r7, #16
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	68bb      	ldr	r3, [r7, #8]
 800709c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fe68 	bl	8007d74 <xTaskCreate>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b01      	cmp	r3, #1
 80070a8:	d001      	beq.n	80070ae <osThreadNew+0x11a>
            hTask = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80070ae:	693b      	ldr	r3, [r7, #16]
}
 80070b0:	4618      	mov	r0, r3
 80070b2:	3728      	adds	r7, #40	@ 0x28
 80070b4:	46bd      	mov	sp, r7
 80070b6:	bd80      	pop	{r7, pc}

080070b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b084      	sub	sp, #16
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80070c0:	f3ef 8305 	mrs	r3, IPSR
 80070c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80070c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d003      	beq.n	80070d4 <osDelay+0x1c>
    stat = osErrorISR;
 80070cc:	f06f 0305 	mvn.w	r3, #5
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	e007      	b.n	80070e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80070d4:	2300      	movs	r3, #0
 80070d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d002      	beq.n	80070e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 ffa6 	bl	8008030 <vTaskDelay>
    }
  }

  return (stat);
 80070e4:	68fb      	ldr	r3, [r7, #12]
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3710      	adds	r7, #16
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
	...

080070f0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80070f0:	b480      	push	{r7}
 80070f2:	b085      	sub	sp, #20
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	60f8      	str	r0, [r7, #12]
 80070f8:	60b9      	str	r1, [r7, #8]
 80070fa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4a07      	ldr	r2, [pc, #28]	@ (800711c <vApplicationGetIdleTaskMemory+0x2c>)
 8007100:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	4a06      	ldr	r2, [pc, #24]	@ (8007120 <vApplicationGetIdleTaskMemory+0x30>)
 8007106:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	2280      	movs	r2, #128	@ 0x80
 800710c:	601a      	str	r2, [r3, #0]
}
 800710e:	bf00      	nop
 8007110:	3714      	adds	r7, #20
 8007112:	46bd      	mov	sp, r7
 8007114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	20000868 	.word	0x20000868
 8007120:	20000910 	.word	0x20000910

08007124 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007124:	b480      	push	{r7}
 8007126:	b085      	sub	sp, #20
 8007128:	af00      	add	r7, sp, #0
 800712a:	60f8      	str	r0, [r7, #12]
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4a07      	ldr	r2, [pc, #28]	@ (8007150 <vApplicationGetTimerTaskMemory+0x2c>)
 8007134:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	4a06      	ldr	r2, [pc, #24]	@ (8007154 <vApplicationGetTimerTaskMemory+0x30>)
 800713a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007142:	601a      	str	r2, [r3, #0]
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	20000b10 	.word	0x20000b10
 8007154:	20000bb8 	.word	0x20000bb8

08007158 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f103 0208 	add.w	r2, r3, #8
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007170:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	f103 0208 	add.w	r2, r3, #8
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f103 0208 	add.w	r2, r3, #8
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800718c:	bf00      	nop
 800718e:	370c      	adds	r7, #12
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007198:	b480      	push	{r7}
 800719a:	b083      	sub	sp, #12
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr

080071b2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071b2:	b480      	push	{r7}
 80071b4:	b085      	sub	sp, #20
 80071b6:	af00      	add	r7, sp, #0
 80071b8:	6078      	str	r0, [r7, #4]
 80071ba:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	685b      	ldr	r3, [r3, #4]
 80071c0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	68fa      	ldr	r2, [r7, #12]
 80071c6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	689a      	ldr	r2, [r3, #8]
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	689b      	ldr	r3, [r3, #8]
 80071d4:	683a      	ldr	r2, [r7, #0]
 80071d6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	1c5a      	adds	r2, r3, #1
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	601a      	str	r2, [r3, #0]
}
 80071ee:	bf00      	nop
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80071fa:	b480      	push	{r7}
 80071fc:	b085      	sub	sp, #20
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
 8007202:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007210:	d103      	bne.n	800721a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	691b      	ldr	r3, [r3, #16]
 8007216:	60fb      	str	r3, [r7, #12]
 8007218:	e00c      	b.n	8007234 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	3308      	adds	r3, #8
 800721e:	60fb      	str	r3, [r7, #12]
 8007220:	e002      	b.n	8007228 <vListInsert+0x2e>
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	685b      	ldr	r3, [r3, #4]
 8007226:	60fb      	str	r3, [r7, #12]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	68ba      	ldr	r2, [r7, #8]
 8007230:	429a      	cmp	r2, r3
 8007232:	d2f6      	bcs.n	8007222 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	685a      	ldr	r2, [r3, #4]
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	685b      	ldr	r3, [r3, #4]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007244:	683b      	ldr	r3, [r7, #0]
 8007246:	68fa      	ldr	r2, [r7, #12]
 8007248:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	687a      	ldr	r2, [r7, #4]
 8007254:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	1c5a      	adds	r2, r3, #1
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	601a      	str	r2, [r3, #0]
}
 8007260:	bf00      	nop
 8007262:	3714      	adds	r7, #20
 8007264:	46bd      	mov	sp, r7
 8007266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726a:	4770      	bx	lr

0800726c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800726c:	b480      	push	{r7}
 800726e:	b085      	sub	sp, #20
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	691b      	ldr	r3, [r3, #16]
 8007278:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	685b      	ldr	r3, [r3, #4]
 800727e:	687a      	ldr	r2, [r7, #4]
 8007280:	6892      	ldr	r2, [r2, #8]
 8007282:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	6852      	ldr	r2, [r2, #4]
 800728c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	685b      	ldr	r3, [r3, #4]
 8007292:	687a      	ldr	r2, [r7, #4]
 8007294:	429a      	cmp	r2, r3
 8007296:	d103      	bne.n	80072a0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	689a      	ldr	r2, [r3, #8]
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2200      	movs	r2, #0
 80072a4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	1e5a      	subs	r2, r3, #1
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
 80072c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d10b      	bne.n	80072ec <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80072ec:	f002 f8a4 	bl	8009438 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80072f8:	68f9      	ldr	r1, [r7, #12]
 80072fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80072fc:	fb01 f303 	mul.w	r3, r1, r3
 8007300:	441a      	add	r2, r3
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681a      	ldr	r2, [r3, #0]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681a      	ldr	r2, [r3, #0]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800731c:	3b01      	subs	r3, #1
 800731e:	68f9      	ldr	r1, [r7, #12]
 8007320:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007322:	fb01 f303 	mul.w	r3, r1, r3
 8007326:	441a      	add	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	22ff      	movs	r2, #255	@ 0xff
 8007330:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	22ff      	movs	r2, #255	@ 0xff
 8007338:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d114      	bne.n	800736c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d01a      	beq.n	8007380 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	3310      	adds	r3, #16
 800734e:	4618      	mov	r0, r3
 8007350:	f001 f942 	bl	80085d8 <xTaskRemoveFromEventList>
 8007354:	4603      	mov	r3, r0
 8007356:	2b00      	cmp	r3, #0
 8007358:	d012      	beq.n	8007380 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800735a:	4b0d      	ldr	r3, [pc, #52]	@ (8007390 <xQueueGenericReset+0xd0>)
 800735c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007360:	601a      	str	r2, [r3, #0]
 8007362:	f3bf 8f4f 	dsb	sy
 8007366:	f3bf 8f6f 	isb	sy
 800736a:	e009      	b.n	8007380 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	3310      	adds	r3, #16
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fef1 	bl	8007158 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	3324      	adds	r3, #36	@ 0x24
 800737a:	4618      	mov	r0, r3
 800737c:	f7ff feec 	bl	8007158 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007380:	f002 f88c 	bl	800949c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007384:	2301      	movs	r3, #1
}
 8007386:	4618      	mov	r0, r3
 8007388:	3710      	adds	r7, #16
 800738a:	46bd      	mov	sp, r7
 800738c:	bd80      	pop	{r7, pc}
 800738e:	bf00      	nop
 8007390:	e000ed04 	.word	0xe000ed04

08007394 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007394:	b580      	push	{r7, lr}
 8007396:	b08e      	sub	sp, #56	@ 0x38
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	60b9      	str	r1, [r7, #8]
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d10b      	bne.n	80073c0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80073a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ac:	f383 8811 	msr	BASEPRI, r3
 80073b0:	f3bf 8f6f 	isb	sy
 80073b4:	f3bf 8f4f 	dsb	sy
 80073b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80073ba:	bf00      	nop
 80073bc:	bf00      	nop
 80073be:	e7fd      	b.n	80073bc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80073c0:	683b      	ldr	r3, [r7, #0]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d10b      	bne.n	80073de <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80073c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ca:	f383 8811 	msr	BASEPRI, r3
 80073ce:	f3bf 8f6f 	isb	sy
 80073d2:	f3bf 8f4f 	dsb	sy
 80073d6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80073d8:	bf00      	nop
 80073da:	bf00      	nop
 80073dc:	e7fd      	b.n	80073da <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d002      	beq.n	80073ea <xQueueGenericCreateStatic+0x56>
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <xQueueGenericCreateStatic+0x5a>
 80073ea:	2301      	movs	r3, #1
 80073ec:	e000      	b.n	80073f0 <xQueueGenericCreateStatic+0x5c>
 80073ee:	2300      	movs	r3, #0
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d10b      	bne.n	800740c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80073f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073f8:	f383 8811 	msr	BASEPRI, r3
 80073fc:	f3bf 8f6f 	isb	sy
 8007400:	f3bf 8f4f 	dsb	sy
 8007404:	623b      	str	r3, [r7, #32]
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	e7fd      	b.n	8007408 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d102      	bne.n	8007418 <xQueueGenericCreateStatic+0x84>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	2b00      	cmp	r3, #0
 8007416:	d101      	bne.n	800741c <xQueueGenericCreateStatic+0x88>
 8007418:	2301      	movs	r3, #1
 800741a:	e000      	b.n	800741e <xQueueGenericCreateStatic+0x8a>
 800741c:	2300      	movs	r3, #0
 800741e:	2b00      	cmp	r3, #0
 8007420:	d10b      	bne.n	800743a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007426:	f383 8811 	msr	BASEPRI, r3
 800742a:	f3bf 8f6f 	isb	sy
 800742e:	f3bf 8f4f 	dsb	sy
 8007432:	61fb      	str	r3, [r7, #28]
}
 8007434:	bf00      	nop
 8007436:	bf00      	nop
 8007438:	e7fd      	b.n	8007436 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800743a:	2350      	movs	r3, #80	@ 0x50
 800743c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	2b50      	cmp	r3, #80	@ 0x50
 8007442:	d00b      	beq.n	800745c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007444:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007448:	f383 8811 	msr	BASEPRI, r3
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	61bb      	str	r3, [r7, #24]
}
 8007456:	bf00      	nop
 8007458:	bf00      	nop
 800745a:	e7fd      	b.n	8007458 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800745c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8007462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007464:	2b00      	cmp	r3, #0
 8007466:	d00d      	beq.n	8007484 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007468:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800746a:	2201      	movs	r2, #1
 800746c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007470:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007474:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007476:	9300      	str	r3, [sp, #0]
 8007478:	4613      	mov	r3, r2
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	68b9      	ldr	r1, [r7, #8]
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 f805 	bl	800748e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007486:	4618      	mov	r0, r3
 8007488:	3730      	adds	r7, #48	@ 0x30
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b084      	sub	sp, #16
 8007492:	af00      	add	r7, sp, #0
 8007494:	60f8      	str	r0, [r7, #12]
 8007496:	60b9      	str	r1, [r7, #8]
 8007498:	607a      	str	r2, [r7, #4]
 800749a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	69ba      	ldr	r2, [r7, #24]
 80074a6:	601a      	str	r2, [r3, #0]
 80074a8:	e002      	b.n	80074b0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80074aa:	69bb      	ldr	r3, [r7, #24]
 80074ac:	687a      	ldr	r2, [r7, #4]
 80074ae:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80074b0:	69bb      	ldr	r3, [r7, #24]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80074b6:	69bb      	ldr	r3, [r7, #24]
 80074b8:	68ba      	ldr	r2, [r7, #8]
 80074ba:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80074bc:	2101      	movs	r1, #1
 80074be:	69b8      	ldr	r0, [r7, #24]
 80074c0:	f7ff fefe 	bl	80072c0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80074c4:	69bb      	ldr	r3, [r7, #24]
 80074c6:	78fa      	ldrb	r2, [r7, #3]
 80074c8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80074cc:	bf00      	nop
 80074ce:	3710      	adds	r7, #16
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b08e      	sub	sp, #56	@ 0x38
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	607a      	str	r2, [r7, #4]
 80074e0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80074e2:	2300      	movs	r3, #0
 80074e4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80074ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d10b      	bne.n	8007508 <xQueueGenericSend+0x34>
	__asm volatile
 80074f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f4:	f383 8811 	msr	BASEPRI, r3
 80074f8:	f3bf 8f6f 	isb	sy
 80074fc:	f3bf 8f4f 	dsb	sy
 8007500:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007502:	bf00      	nop
 8007504:	bf00      	nop
 8007506:	e7fd      	b.n	8007504 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d103      	bne.n	8007516 <xQueueGenericSend+0x42>
 800750e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007510:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007512:	2b00      	cmp	r3, #0
 8007514:	d101      	bne.n	800751a <xQueueGenericSend+0x46>
 8007516:	2301      	movs	r3, #1
 8007518:	e000      	b.n	800751c <xQueueGenericSend+0x48>
 800751a:	2300      	movs	r3, #0
 800751c:	2b00      	cmp	r3, #0
 800751e:	d10b      	bne.n	8007538 <xQueueGenericSend+0x64>
	__asm volatile
 8007520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007524:	f383 8811 	msr	BASEPRI, r3
 8007528:	f3bf 8f6f 	isb	sy
 800752c:	f3bf 8f4f 	dsb	sy
 8007530:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007532:	bf00      	nop
 8007534:	bf00      	nop
 8007536:	e7fd      	b.n	8007534 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007538:	683b      	ldr	r3, [r7, #0]
 800753a:	2b02      	cmp	r3, #2
 800753c:	d103      	bne.n	8007546 <xQueueGenericSend+0x72>
 800753e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007542:	2b01      	cmp	r3, #1
 8007544:	d101      	bne.n	800754a <xQueueGenericSend+0x76>
 8007546:	2301      	movs	r3, #1
 8007548:	e000      	b.n	800754c <xQueueGenericSend+0x78>
 800754a:	2300      	movs	r3, #0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d10b      	bne.n	8007568 <xQueueGenericSend+0x94>
	__asm volatile
 8007550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007554:	f383 8811 	msr	BASEPRI, r3
 8007558:	f3bf 8f6f 	isb	sy
 800755c:	f3bf 8f4f 	dsb	sy
 8007560:	623b      	str	r3, [r7, #32]
}
 8007562:	bf00      	nop
 8007564:	bf00      	nop
 8007566:	e7fd      	b.n	8007564 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007568:	f001 f9fc 	bl	8008964 <xTaskGetSchedulerState>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d102      	bne.n	8007578 <xQueueGenericSend+0xa4>
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d101      	bne.n	800757c <xQueueGenericSend+0xa8>
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <xQueueGenericSend+0xaa>
 800757c:	2300      	movs	r3, #0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10b      	bne.n	800759a <xQueueGenericSend+0xc6>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	61fb      	str	r3, [r7, #28]
}
 8007594:	bf00      	nop
 8007596:	bf00      	nop
 8007598:	e7fd      	b.n	8007596 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800759a:	f001 ff4d 	bl	8009438 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800759e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80075a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d302      	bcc.n	80075b0 <xQueueGenericSend+0xdc>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	2b02      	cmp	r3, #2
 80075ae:	d129      	bne.n	8007604 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80075b0:	683a      	ldr	r2, [r7, #0]
 80075b2:	68b9      	ldr	r1, [r7, #8]
 80075b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80075b6:	f000 fa0f 	bl	80079d8 <prvCopyDataToQueue>
 80075ba:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80075bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d010      	beq.n	80075e6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80075c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075c6:	3324      	adds	r3, #36	@ 0x24
 80075c8:	4618      	mov	r0, r3
 80075ca:	f001 f805 	bl	80085d8 <xTaskRemoveFromEventList>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d013      	beq.n	80075fc <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80075d4:	4b3f      	ldr	r3, [pc, #252]	@ (80076d4 <xQueueGenericSend+0x200>)
 80075d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075da:	601a      	str	r2, [r3, #0]
 80075dc:	f3bf 8f4f 	dsb	sy
 80075e0:	f3bf 8f6f 	isb	sy
 80075e4:	e00a      	b.n	80075fc <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80075e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d007      	beq.n	80075fc <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80075ec:	4b39      	ldr	r3, [pc, #228]	@ (80076d4 <xQueueGenericSend+0x200>)
 80075ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075f2:	601a      	str	r2, [r3, #0]
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80075fc:	f001 ff4e 	bl	800949c <vPortExitCritical>
				return pdPASS;
 8007600:	2301      	movs	r3, #1
 8007602:	e063      	b.n	80076cc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d103      	bne.n	8007612 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800760a:	f001 ff47 	bl	800949c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800760e:	2300      	movs	r3, #0
 8007610:	e05c      	b.n	80076cc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007612:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007614:	2b00      	cmp	r3, #0
 8007616:	d106      	bne.n	8007626 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007618:	f107 0314 	add.w	r3, r7, #20
 800761c:	4618      	mov	r0, r3
 800761e:	f001 f83f 	bl	80086a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007622:	2301      	movs	r3, #1
 8007624:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007626:	f001 ff39 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800762a:	f000 fda7 	bl	800817c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800762e:	f001 ff03 	bl	8009438 <vPortEnterCritical>
 8007632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007634:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007638:	b25b      	sxtb	r3, r3
 800763a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800763e:	d103      	bne.n	8007648 <xQueueGenericSend+0x174>
 8007640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007642:	2200      	movs	r2, #0
 8007644:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800764e:	b25b      	sxtb	r3, r3
 8007650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007654:	d103      	bne.n	800765e <xQueueGenericSend+0x18a>
 8007656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007658:	2200      	movs	r2, #0
 800765a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800765e:	f001 ff1d 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007662:	1d3a      	adds	r2, r7, #4
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f001 f82e 	bl	80086cc <xTaskCheckForTimeOut>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d124      	bne.n	80076c0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007676:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007678:	f000 faa6 	bl	8007bc8 <prvIsQueueFull>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d018      	beq.n	80076b4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007684:	3310      	adds	r3, #16
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	4611      	mov	r1, r2
 800768a:	4618      	mov	r0, r3
 800768c:	f000 ff52 	bl	8008534 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007690:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007692:	f000 fa31 	bl	8007af8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007696:	f000 fd7f 	bl	8008198 <xTaskResumeAll>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	f47f af7c 	bne.w	800759a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80076a2:	4b0c      	ldr	r3, [pc, #48]	@ (80076d4 <xQueueGenericSend+0x200>)
 80076a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076a8:	601a      	str	r2, [r3, #0]
 80076aa:	f3bf 8f4f 	dsb	sy
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	e772      	b.n	800759a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80076b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076b6:	f000 fa1f 	bl	8007af8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80076ba:	f000 fd6d 	bl	8008198 <xTaskResumeAll>
 80076be:	e76c      	b.n	800759a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80076c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076c2:	f000 fa19 	bl	8007af8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80076c6:	f000 fd67 	bl	8008198 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80076ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	3738      	adds	r7, #56	@ 0x38
 80076d0:	46bd      	mov	sp, r7
 80076d2:	bd80      	pop	{r7, pc}
 80076d4:	e000ed04 	.word	0xe000ed04

080076d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b090      	sub	sp, #64	@ 0x40
 80076dc:	af00      	add	r7, sp, #0
 80076de:	60f8      	str	r0, [r7, #12]
 80076e0:	60b9      	str	r1, [r7, #8]
 80076e2:	607a      	str	r2, [r7, #4]
 80076e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80076ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d10b      	bne.n	8007708 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80076f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076f4:	f383 8811 	msr	BASEPRI, r3
 80076f8:	f3bf 8f6f 	isb	sy
 80076fc:	f3bf 8f4f 	dsb	sy
 8007700:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007702:	bf00      	nop
 8007704:	bf00      	nop
 8007706:	e7fd      	b.n	8007704 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d103      	bne.n	8007716 <xQueueGenericSendFromISR+0x3e>
 800770e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007710:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	d101      	bne.n	800771a <xQueueGenericSendFromISR+0x42>
 8007716:	2301      	movs	r3, #1
 8007718:	e000      	b.n	800771c <xQueueGenericSendFromISR+0x44>
 800771a:	2300      	movs	r3, #0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d10b      	bne.n	8007738 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007720:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007724:	f383 8811 	msr	BASEPRI, r3
 8007728:	f3bf 8f6f 	isb	sy
 800772c:	f3bf 8f4f 	dsb	sy
 8007730:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007732:	bf00      	nop
 8007734:	bf00      	nop
 8007736:	e7fd      	b.n	8007734 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	2b02      	cmp	r3, #2
 800773c:	d103      	bne.n	8007746 <xQueueGenericSendFromISR+0x6e>
 800773e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007740:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007742:	2b01      	cmp	r3, #1
 8007744:	d101      	bne.n	800774a <xQueueGenericSendFromISR+0x72>
 8007746:	2301      	movs	r3, #1
 8007748:	e000      	b.n	800774c <xQueueGenericSendFromISR+0x74>
 800774a:	2300      	movs	r3, #0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d10b      	bne.n	8007768 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007754:	f383 8811 	msr	BASEPRI, r3
 8007758:	f3bf 8f6f 	isb	sy
 800775c:	f3bf 8f4f 	dsb	sy
 8007760:	623b      	str	r3, [r7, #32]
}
 8007762:	bf00      	nop
 8007764:	bf00      	nop
 8007766:	e7fd      	b.n	8007764 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007768:	f001 ff46 	bl	80095f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800776c:	f3ef 8211 	mrs	r2, BASEPRI
 8007770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007774:	f383 8811 	msr	BASEPRI, r3
 8007778:	f3bf 8f6f 	isb	sy
 800777c:	f3bf 8f4f 	dsb	sy
 8007780:	61fa      	str	r2, [r7, #28]
 8007782:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007784:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007786:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800778c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800778e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007790:	429a      	cmp	r2, r3
 8007792:	d302      	bcc.n	800779a <xQueueGenericSendFromISR+0xc2>
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	2b02      	cmp	r3, #2
 8007798:	d12f      	bne.n	80077fa <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800779a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800779c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80077a0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80077a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077aa:	683a      	ldr	r2, [r7, #0]
 80077ac:	68b9      	ldr	r1, [r7, #8]
 80077ae:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80077b0:	f000 f912 	bl	80079d8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80077b4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077bc:	d112      	bne.n	80077e4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80077be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d016      	beq.n	80077f4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80077c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077c8:	3324      	adds	r3, #36	@ 0x24
 80077ca:	4618      	mov	r0, r3
 80077cc:	f000 ff04 	bl	80085d8 <xTaskRemoveFromEventList>
 80077d0:	4603      	mov	r3, r0
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d00e      	beq.n	80077f4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d00b      	beq.n	80077f4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	e007      	b.n	80077f4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80077e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80077e8:	3301      	adds	r3, #1
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	b25a      	sxtb	r2, r3
 80077ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80077f4:	2301      	movs	r3, #1
 80077f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80077f8:	e001      	b.n	80077fe <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80077fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007800:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007808:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800780a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800780c:	4618      	mov	r0, r3
 800780e:	3740      	adds	r7, #64	@ 0x40
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b08c      	sub	sp, #48	@ 0x30
 8007818:	af00      	add	r7, sp, #0
 800781a:	60f8      	str	r0, [r7, #12]
 800781c:	60b9      	str	r1, [r7, #8]
 800781e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007820:	2300      	movs	r3, #0
 8007822:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800782a:	2b00      	cmp	r3, #0
 800782c:	d10b      	bne.n	8007846 <xQueueReceive+0x32>
	__asm volatile
 800782e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007832:	f383 8811 	msr	BASEPRI, r3
 8007836:	f3bf 8f6f 	isb	sy
 800783a:	f3bf 8f4f 	dsb	sy
 800783e:	623b      	str	r3, [r7, #32]
}
 8007840:	bf00      	nop
 8007842:	bf00      	nop
 8007844:	e7fd      	b.n	8007842 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <xQueueReceive+0x40>
 800784c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800784e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007850:	2b00      	cmp	r3, #0
 8007852:	d101      	bne.n	8007858 <xQueueReceive+0x44>
 8007854:	2301      	movs	r3, #1
 8007856:	e000      	b.n	800785a <xQueueReceive+0x46>
 8007858:	2300      	movs	r3, #0
 800785a:	2b00      	cmp	r3, #0
 800785c:	d10b      	bne.n	8007876 <xQueueReceive+0x62>
	__asm volatile
 800785e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007862:	f383 8811 	msr	BASEPRI, r3
 8007866:	f3bf 8f6f 	isb	sy
 800786a:	f3bf 8f4f 	dsb	sy
 800786e:	61fb      	str	r3, [r7, #28]
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	e7fd      	b.n	8007872 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007876:	f001 f875 	bl	8008964 <xTaskGetSchedulerState>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d102      	bne.n	8007886 <xQueueReceive+0x72>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d101      	bne.n	800788a <xQueueReceive+0x76>
 8007886:	2301      	movs	r3, #1
 8007888:	e000      	b.n	800788c <xQueueReceive+0x78>
 800788a:	2300      	movs	r3, #0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10b      	bne.n	80078a8 <xQueueReceive+0x94>
	__asm volatile
 8007890:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007894:	f383 8811 	msr	BASEPRI, r3
 8007898:	f3bf 8f6f 	isb	sy
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	61bb      	str	r3, [r7, #24]
}
 80078a2:	bf00      	nop
 80078a4:	bf00      	nop
 80078a6:	e7fd      	b.n	80078a4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80078a8:	f001 fdc6 	bl	8009438 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80078ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078b0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d01f      	beq.n	80078f8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80078b8:	68b9      	ldr	r1, [r7, #8]
 80078ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078bc:	f000 f8f6 	bl	8007aac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078c2:	1e5a      	subs	r2, r3, #1
 80078c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80078c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078ca:	691b      	ldr	r3, [r3, #16]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d00f      	beq.n	80078f0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80078d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d2:	3310      	adds	r3, #16
 80078d4:	4618      	mov	r0, r3
 80078d6:	f000 fe7f 	bl	80085d8 <xTaskRemoveFromEventList>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d007      	beq.n	80078f0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80078e0:	4b3c      	ldr	r3, [pc, #240]	@ (80079d4 <xQueueReceive+0x1c0>)
 80078e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	f3bf 8f4f 	dsb	sy
 80078ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80078f0:	f001 fdd4 	bl	800949c <vPortExitCritical>
				return pdPASS;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e069      	b.n	80079cc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d103      	bne.n	8007906 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80078fe:	f001 fdcd 	bl	800949c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007902:	2300      	movs	r3, #0
 8007904:	e062      	b.n	80079cc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007906:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800790c:	f107 0310 	add.w	r3, r7, #16
 8007910:	4618      	mov	r0, r3
 8007912:	f000 fec5 	bl	80086a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007916:	2301      	movs	r3, #1
 8007918:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800791a:	f001 fdbf 	bl	800949c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800791e:	f000 fc2d 	bl	800817c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007922:	f001 fd89 	bl	8009438 <vPortEnterCritical>
 8007926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007928:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800792c:	b25b      	sxtb	r3, r3
 800792e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007932:	d103      	bne.n	800793c <xQueueReceive+0x128>
 8007934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007936:	2200      	movs	r2, #0
 8007938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800793c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007942:	b25b      	sxtb	r3, r3
 8007944:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007948:	d103      	bne.n	8007952 <xQueueReceive+0x13e>
 800794a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800794c:	2200      	movs	r2, #0
 800794e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007952:	f001 fda3 	bl	800949c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007956:	1d3a      	adds	r2, r7, #4
 8007958:	f107 0310 	add.w	r3, r7, #16
 800795c:	4611      	mov	r1, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f000 feb4 	bl	80086cc <xTaskCheckForTimeOut>
 8007964:	4603      	mov	r3, r0
 8007966:	2b00      	cmp	r3, #0
 8007968:	d123      	bne.n	80079b2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800796a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800796c:	f000 f916 	bl	8007b9c <prvIsQueueEmpty>
 8007970:	4603      	mov	r3, r0
 8007972:	2b00      	cmp	r3, #0
 8007974:	d017      	beq.n	80079a6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007976:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007978:	3324      	adds	r3, #36	@ 0x24
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	4611      	mov	r1, r2
 800797e:	4618      	mov	r0, r3
 8007980:	f000 fdd8 	bl	8008534 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007984:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007986:	f000 f8b7 	bl	8007af8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800798a:	f000 fc05 	bl	8008198 <xTaskResumeAll>
 800798e:	4603      	mov	r3, r0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d189      	bne.n	80078a8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007994:	4b0f      	ldr	r3, [pc, #60]	@ (80079d4 <xQueueReceive+0x1c0>)
 8007996:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800799a:	601a      	str	r2, [r3, #0]
 800799c:	f3bf 8f4f 	dsb	sy
 80079a0:	f3bf 8f6f 	isb	sy
 80079a4:	e780      	b.n	80078a8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80079a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a8:	f000 f8a6 	bl	8007af8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80079ac:	f000 fbf4 	bl	8008198 <xTaskResumeAll>
 80079b0:	e77a      	b.n	80078a8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80079b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079b4:	f000 f8a0 	bl	8007af8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80079b8:	f000 fbee 	bl	8008198 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80079bc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079be:	f000 f8ed 	bl	8007b9c <prvIsQueueEmpty>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	f43f af6f 	beq.w	80078a8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80079ca:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3730      	adds	r7, #48	@ 0x30
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	e000ed04 	.word	0xe000ed04

080079d8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b086      	sub	sp, #24
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80079e4:	2300      	movs	r3, #0
 80079e6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d10d      	bne.n	8007a12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d14d      	bne.n	8007a9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	689b      	ldr	r3, [r3, #8]
 8007a02:	4618      	mov	r0, r3
 8007a04:	f000 ffcc 	bl	80089a0 <xTaskPriorityDisinherit>
 8007a08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	609a      	str	r2, [r3, #8]
 8007a10:	e043      	b.n	8007a9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d119      	bne.n	8007a4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	6858      	ldr	r0, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a20:	461a      	mov	r2, r3
 8007a22:	68b9      	ldr	r1, [r7, #8]
 8007a24:	f002 f8c2 	bl	8009bac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a30:	441a      	add	r2, r3
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	685a      	ldr	r2, [r3, #4]
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d32b      	bcc.n	8007a9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681a      	ldr	r2, [r3, #0]
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	605a      	str	r2, [r3, #4]
 8007a4a:	e026      	b.n	8007a9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	68d8      	ldr	r0, [r3, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a54:	461a      	mov	r2, r3
 8007a56:	68b9      	ldr	r1, [r7, #8]
 8007a58:	f002 f8a8 	bl	8009bac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	68da      	ldr	r2, [r3, #12]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a64:	425b      	negs	r3, r3
 8007a66:	441a      	add	r2, r3
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	68da      	ldr	r2, [r3, #12]
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	429a      	cmp	r2, r3
 8007a76:	d207      	bcs.n	8007a88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	689a      	ldr	r2, [r3, #8]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a80:	425b      	negs	r3, r3
 8007a82:	441a      	add	r2, r3
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2b02      	cmp	r3, #2
 8007a8c:	d105      	bne.n	8007a9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d002      	beq.n	8007a9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007a94:	693b      	ldr	r3, [r7, #16]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	1c5a      	adds	r2, r3, #1
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007aa2:	697b      	ldr	r3, [r7, #20]
}
 8007aa4:	4618      	mov	r0, r3
 8007aa6:	3718      	adds	r7, #24
 8007aa8:	46bd      	mov	sp, r7
 8007aaa:	bd80      	pop	{r7, pc}

08007aac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b082      	sub	sp, #8
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	6078      	str	r0, [r7, #4]
 8007ab4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d018      	beq.n	8007af0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac6:	441a      	add	r2, r3
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	68da      	ldr	r2, [r3, #12]
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	689b      	ldr	r3, [r3, #8]
 8007ad4:	429a      	cmp	r2, r3
 8007ad6:	d303      	bcc.n	8007ae0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681a      	ldr	r2, [r3, #0]
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	68d9      	ldr	r1, [r3, #12]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ae8:	461a      	mov	r2, r3
 8007aea:	6838      	ldr	r0, [r7, #0]
 8007aec:	f002 f85e 	bl	8009bac <memcpy>
	}
}
 8007af0:	bf00      	nop
 8007af2:	3708      	adds	r7, #8
 8007af4:	46bd      	mov	sp, r7
 8007af6:	bd80      	pop	{r7, pc}

08007af8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b084      	sub	sp, #16
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007b00:	f001 fc9a 	bl	8009438 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b0c:	e011      	b.n	8007b32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d012      	beq.n	8007b3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	3324      	adds	r3, #36	@ 0x24
 8007b1a:	4618      	mov	r0, r3
 8007b1c:	f000 fd5c 	bl	80085d8 <xTaskRemoveFromEventList>
 8007b20:	4603      	mov	r3, r0
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007b26:	f000 fe35 	bl	8008794 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007b32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	dce9      	bgt.n	8007b0e <prvUnlockQueue+0x16>
 8007b3a:	e000      	b.n	8007b3e <prvUnlockQueue+0x46>
					break;
 8007b3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	22ff      	movs	r2, #255	@ 0xff
 8007b42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007b46:	f001 fca9 	bl	800949c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007b4a:	f001 fc75 	bl	8009438 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b56:	e011      	b.n	8007b7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	691b      	ldr	r3, [r3, #16]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d012      	beq.n	8007b86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	3310      	adds	r3, #16
 8007b64:	4618      	mov	r0, r3
 8007b66:	f000 fd37 	bl	80085d8 <xTaskRemoveFromEventList>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d001      	beq.n	8007b74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007b70:	f000 fe10 	bl	8008794 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007b74:	7bbb      	ldrb	r3, [r7, #14]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007b7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dce9      	bgt.n	8007b58 <prvUnlockQueue+0x60>
 8007b84:	e000      	b.n	8007b88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007b86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	22ff      	movs	r2, #255	@ 0xff
 8007b8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007b90:	f001 fc84 	bl	800949c <vPortExitCritical>
}
 8007b94:	bf00      	nop
 8007b96:	3710      	adds	r7, #16
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bd80      	pop	{r7, pc}

08007b9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b084      	sub	sp, #16
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ba4:	f001 fc48 	bl	8009438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d102      	bne.n	8007bb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007bb0:	2301      	movs	r3, #1
 8007bb2:	60fb      	str	r3, [r7, #12]
 8007bb4:	e001      	b.n	8007bba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bba:	f001 fc6f 	bl	800949c <vPortExitCritical>

	return xReturn;
 8007bbe:	68fb      	ldr	r3, [r7, #12]
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007bd0:	f001 fc32 	bl	8009438 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d102      	bne.n	8007be6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007be0:	2301      	movs	r3, #1
 8007be2:	60fb      	str	r3, [r7, #12]
 8007be4:	e001      	b.n	8007bea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007bea:	f001 fc57 	bl	800949c <vPortExitCritical>

	return xReturn;
 8007bee:	68fb      	ldr	r3, [r7, #12]
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	e014      	b.n	8007c32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007c08:	4a0f      	ldr	r2, [pc, #60]	@ (8007c48 <vQueueAddToRegistry+0x50>)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d10b      	bne.n	8007c2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007c14:	490c      	ldr	r1, [pc, #48]	@ (8007c48 <vQueueAddToRegistry+0x50>)
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	683a      	ldr	r2, [r7, #0]
 8007c1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007c1e:	4a0a      	ldr	r2, [pc, #40]	@ (8007c48 <vQueueAddToRegistry+0x50>)
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	4413      	add	r3, r2
 8007c26:	687a      	ldr	r2, [r7, #4]
 8007c28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007c2a:	e006      	b.n	8007c3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	3301      	adds	r3, #1
 8007c30:	60fb      	str	r3, [r7, #12]
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b07      	cmp	r3, #7
 8007c36:	d9e7      	bls.n	8007c08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007c38:	bf00      	nop
 8007c3a:	bf00      	nop
 8007c3c:	3714      	adds	r7, #20
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c44:	4770      	bx	lr
 8007c46:	bf00      	nop
 8007c48:	20000fb8 	.word	0x20000fb8

08007c4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	60f8      	str	r0, [r7, #12]
 8007c54:	60b9      	str	r1, [r7, #8]
 8007c56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007c5c:	f001 fbec 	bl	8009438 <vPortEnterCritical>
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c66:	b25b      	sxtb	r3, r3
 8007c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c6c:	d103      	bne.n	8007c76 <vQueueWaitForMessageRestricted+0x2a>
 8007c6e:	697b      	ldr	r3, [r7, #20]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007c7c:	b25b      	sxtb	r3, r3
 8007c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c82:	d103      	bne.n	8007c8c <vQueueWaitForMessageRestricted+0x40>
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	2200      	movs	r2, #0
 8007c88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007c8c:	f001 fc06 	bl	800949c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007c90:	697b      	ldr	r3, [r7, #20]
 8007c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d106      	bne.n	8007ca6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	3324      	adds	r3, #36	@ 0x24
 8007c9c:	687a      	ldr	r2, [r7, #4]
 8007c9e:	68b9      	ldr	r1, [r7, #8]
 8007ca0:	4618      	mov	r0, r3
 8007ca2:	f000 fc6d 	bl	8008580 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007ca6:	6978      	ldr	r0, [r7, #20]
 8007ca8:	f7ff ff26 	bl	8007af8 <prvUnlockQueue>
	}
 8007cac:	bf00      	nop
 8007cae:	3718      	adds	r7, #24
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b08e      	sub	sp, #56	@ 0x38
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	60f8      	str	r0, [r7, #12]
 8007cbc:	60b9      	str	r1, [r7, #8]
 8007cbe:	607a      	str	r2, [r7, #4]
 8007cc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007cc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d10b      	bne.n	8007ce0 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007cc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ccc:	f383 8811 	msr	BASEPRI, r3
 8007cd0:	f3bf 8f6f 	isb	sy
 8007cd4:	f3bf 8f4f 	dsb	sy
 8007cd8:	623b      	str	r3, [r7, #32]
}
 8007cda:	bf00      	nop
 8007cdc:	bf00      	nop
 8007cde:	e7fd      	b.n	8007cdc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d10b      	bne.n	8007cfe <xTaskCreateStatic+0x4a>
	__asm volatile
 8007ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cea:	f383 8811 	msr	BASEPRI, r3
 8007cee:	f3bf 8f6f 	isb	sy
 8007cf2:	f3bf 8f4f 	dsb	sy
 8007cf6:	61fb      	str	r3, [r7, #28]
}
 8007cf8:	bf00      	nop
 8007cfa:	bf00      	nop
 8007cfc:	e7fd      	b.n	8007cfa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007cfe:	23a8      	movs	r3, #168	@ 0xa8
 8007d00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	2ba8      	cmp	r3, #168	@ 0xa8
 8007d06:	d00b      	beq.n	8007d20 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007d08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d0c:	f383 8811 	msr	BASEPRI, r3
 8007d10:	f3bf 8f6f 	isb	sy
 8007d14:	f3bf 8f4f 	dsb	sy
 8007d18:	61bb      	str	r3, [r7, #24]
}
 8007d1a:	bf00      	nop
 8007d1c:	bf00      	nop
 8007d1e:	e7fd      	b.n	8007d1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007d20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01e      	beq.n	8007d66 <xTaskCreateStatic+0xb2>
 8007d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01b      	beq.n	8007d66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007d36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	2202      	movs	r2, #2
 8007d3c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007d40:	2300      	movs	r3, #0
 8007d42:	9303      	str	r3, [sp, #12]
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	9302      	str	r3, [sp, #8]
 8007d48:	f107 0314 	add.w	r3, r7, #20
 8007d4c:	9301      	str	r3, [sp, #4]
 8007d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007d50:	9300      	str	r3, [sp, #0]
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	68b9      	ldr	r1, [r7, #8]
 8007d58:	68f8      	ldr	r0, [r7, #12]
 8007d5a:	f000 f851 	bl	8007e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007d5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d60:	f000 f8f6 	bl	8007f50 <prvAddNewTaskToReadyList>
 8007d64:	e001      	b.n	8007d6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007d6a:	697b      	ldr	r3, [r7, #20]
	}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3728      	adds	r7, #40	@ 0x28
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}

08007d74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007d74:	b580      	push	{r7, lr}
 8007d76:	b08c      	sub	sp, #48	@ 0x30
 8007d78:	af04      	add	r7, sp, #16
 8007d7a:	60f8      	str	r0, [r7, #12]
 8007d7c:	60b9      	str	r1, [r7, #8]
 8007d7e:	603b      	str	r3, [r7, #0]
 8007d80:	4613      	mov	r3, r2
 8007d82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	009b      	lsls	r3, r3, #2
 8007d88:	4618      	mov	r0, r3
 8007d8a:	f001 fc77 	bl	800967c <pvPortMalloc>
 8007d8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00e      	beq.n	8007db4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007d96:	20a8      	movs	r0, #168	@ 0xa8
 8007d98:	f001 fc70 	bl	800967c <pvPortMalloc>
 8007d9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d003      	beq.n	8007dac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	697a      	ldr	r2, [r7, #20]
 8007da8:	631a      	str	r2, [r3, #48]	@ 0x30
 8007daa:	e005      	b.n	8007db8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007dac:	6978      	ldr	r0, [r7, #20]
 8007dae:	f001 fd33 	bl	8009818 <vPortFree>
 8007db2:	e001      	b.n	8007db8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007db4:	2300      	movs	r3, #0
 8007db6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007db8:	69fb      	ldr	r3, [r7, #28]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d017      	beq.n	8007dee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007dbe:	69fb      	ldr	r3, [r7, #28]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007dc6:	88fa      	ldrh	r2, [r7, #6]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	9303      	str	r3, [sp, #12]
 8007dcc:	69fb      	ldr	r3, [r7, #28]
 8007dce:	9302      	str	r3, [sp, #8]
 8007dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dd2:	9301      	str	r3, [sp, #4]
 8007dd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dd6:	9300      	str	r3, [sp, #0]
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	68b9      	ldr	r1, [r7, #8]
 8007ddc:	68f8      	ldr	r0, [r7, #12]
 8007dde:	f000 f80f 	bl	8007e00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007de2:	69f8      	ldr	r0, [r7, #28]
 8007de4:	f000 f8b4 	bl	8007f50 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007de8:	2301      	movs	r3, #1
 8007dea:	61bb      	str	r3, [r7, #24]
 8007dec:	e002      	b.n	8007df4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007dee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007df2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007df4:	69bb      	ldr	r3, [r7, #24]
	}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}
	...

08007e00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b088      	sub	sp, #32
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
 8007e0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e10:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	009b      	lsls	r3, r3, #2
 8007e16:	461a      	mov	r2, r3
 8007e18:	21a5      	movs	r1, #165	@ 0xa5
 8007e1a:	f001 fe3d 	bl	8009a98 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007e1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007e28:	3b01      	subs	r3, #1
 8007e2a:	009b      	lsls	r3, r3, #2
 8007e2c:	4413      	add	r3, r2
 8007e2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	f023 0307 	bic.w	r3, r3, #7
 8007e36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007e38:	69bb      	ldr	r3, [r7, #24]
 8007e3a:	f003 0307 	and.w	r3, r3, #7
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d00b      	beq.n	8007e5a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e46:	f383 8811 	msr	BASEPRI, r3
 8007e4a:	f3bf 8f6f 	isb	sy
 8007e4e:	f3bf 8f4f 	dsb	sy
 8007e52:	617b      	str	r3, [r7, #20]
}
 8007e54:	bf00      	nop
 8007e56:	bf00      	nop
 8007e58:	e7fd      	b.n	8007e56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01f      	beq.n	8007ea0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e60:	2300      	movs	r3, #0
 8007e62:	61fb      	str	r3, [r7, #28]
 8007e64:	e012      	b.n	8007e8c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007e66:	68ba      	ldr	r2, [r7, #8]
 8007e68:	69fb      	ldr	r3, [r7, #28]
 8007e6a:	4413      	add	r3, r2
 8007e6c:	7819      	ldrb	r1, [r3, #0]
 8007e6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	4413      	add	r3, r2
 8007e74:	3334      	adds	r3, #52	@ 0x34
 8007e76:	460a      	mov	r2, r1
 8007e78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007e7a:	68ba      	ldr	r2, [r7, #8]
 8007e7c:	69fb      	ldr	r3, [r7, #28]
 8007e7e:	4413      	add	r3, r2
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d006      	beq.n	8007e94 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	61fb      	str	r3, [r7, #28]
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	2b0f      	cmp	r3, #15
 8007e90:	d9e9      	bls.n	8007e66 <prvInitialiseNewTask+0x66>
 8007e92:	e000      	b.n	8007e96 <prvInitialiseNewTask+0x96>
			{
				break;
 8007e94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e98:	2200      	movs	r2, #0
 8007e9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e9e:	e003      	b.n	8007ea8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ea2:	2200      	movs	r2, #0
 8007ea4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007eaa:	2b37      	cmp	r3, #55	@ 0x37
 8007eac:	d901      	bls.n	8007eb2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007eae:	2337      	movs	r3, #55	@ 0x37
 8007eb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007eb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007ebc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ec6:	3304      	adds	r3, #4
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f7ff f965 	bl	8007198 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ed0:	3318      	adds	r3, #24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff f960 	bl	8007198 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007edc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ee0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007eea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007eec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f00:	3354      	adds	r3, #84	@ 0x54
 8007f02:	224c      	movs	r2, #76	@ 0x4c
 8007f04:	2100      	movs	r1, #0
 8007f06:	4618      	mov	r0, r3
 8007f08:	f001 fdc6 	bl	8009a98 <memset>
 8007f0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0e:	4a0d      	ldr	r2, [pc, #52]	@ (8007f44 <prvInitialiseNewTask+0x144>)
 8007f10:	659a      	str	r2, [r3, #88]	@ 0x58
 8007f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f14:	4a0c      	ldr	r2, [pc, #48]	@ (8007f48 <prvInitialiseNewTask+0x148>)
 8007f16:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8007f4c <prvInitialiseNewTask+0x14c>)
 8007f1c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007f1e:	683a      	ldr	r2, [r7, #0]
 8007f20:	68f9      	ldr	r1, [r7, #12]
 8007f22:	69b8      	ldr	r0, [r7, #24]
 8007f24:	f001 f95a 	bl	80091dc <pxPortInitialiseStack>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f2c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f3a:	bf00      	nop
 8007f3c:	3720      	adds	r7, #32
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	2000524c 	.word	0x2000524c
 8007f48:	200052b4 	.word	0x200052b4
 8007f4c:	2000531c 	.word	0x2000531c

08007f50 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007f58:	f001 fa6e 	bl	8009438 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007f5c:	4b2d      	ldr	r3, [pc, #180]	@ (8008014 <prvAddNewTaskToReadyList+0xc4>)
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3301      	adds	r3, #1
 8007f62:	4a2c      	ldr	r2, [pc, #176]	@ (8008014 <prvAddNewTaskToReadyList+0xc4>)
 8007f64:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007f66:	4b2c      	ldr	r3, [pc, #176]	@ (8008018 <prvAddNewTaskToReadyList+0xc8>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d109      	bne.n	8007f82 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007f6e:	4a2a      	ldr	r2, [pc, #168]	@ (8008018 <prvAddNewTaskToReadyList+0xc8>)
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007f74:	4b27      	ldr	r3, [pc, #156]	@ (8008014 <prvAddNewTaskToReadyList+0xc4>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d110      	bne.n	8007f9e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007f7c:	f000 fc2e 	bl	80087dc <prvInitialiseTaskLists>
 8007f80:	e00d      	b.n	8007f9e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007f82:	4b26      	ldr	r3, [pc, #152]	@ (800801c <prvAddNewTaskToReadyList+0xcc>)
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d109      	bne.n	8007f9e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007f8a:	4b23      	ldr	r3, [pc, #140]	@ (8008018 <prvAddNewTaskToReadyList+0xc8>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f94:	429a      	cmp	r2, r3
 8007f96:	d802      	bhi.n	8007f9e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007f98:	4a1f      	ldr	r2, [pc, #124]	@ (8008018 <prvAddNewTaskToReadyList+0xc8>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007f9e:	4b20      	ldr	r3, [pc, #128]	@ (8008020 <prvAddNewTaskToReadyList+0xd0>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	3301      	adds	r3, #1
 8007fa4:	4a1e      	ldr	r2, [pc, #120]	@ (8008020 <prvAddNewTaskToReadyList+0xd0>)
 8007fa6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8008020 <prvAddNewTaskToReadyList+0xd0>)
 8007faa:	681a      	ldr	r2, [r3, #0]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fb4:	4b1b      	ldr	r3, [pc, #108]	@ (8008024 <prvAddNewTaskToReadyList+0xd4>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d903      	bls.n	8007fc4 <prvAddNewTaskToReadyList+0x74>
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fc0:	4a18      	ldr	r2, [pc, #96]	@ (8008024 <prvAddNewTaskToReadyList+0xd4>)
 8007fc2:	6013      	str	r3, [r2, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007fc8:	4613      	mov	r3, r2
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4413      	add	r3, r2
 8007fce:	009b      	lsls	r3, r3, #2
 8007fd0:	4a15      	ldr	r2, [pc, #84]	@ (8008028 <prvAddNewTaskToReadyList+0xd8>)
 8007fd2:	441a      	add	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	3304      	adds	r3, #4
 8007fd8:	4619      	mov	r1, r3
 8007fda:	4610      	mov	r0, r2
 8007fdc:	f7ff f8e9 	bl	80071b2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007fe0:	f001 fa5c 	bl	800949c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007fe4:	4b0d      	ldr	r3, [pc, #52]	@ (800801c <prvAddNewTaskToReadyList+0xcc>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00e      	beq.n	800800a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007fec:	4b0a      	ldr	r3, [pc, #40]	@ (8008018 <prvAddNewTaskToReadyList+0xc8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d207      	bcs.n	800800a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007ffa:	4b0c      	ldr	r3, [pc, #48]	@ (800802c <prvAddNewTaskToReadyList+0xdc>)
 8007ffc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008000:	601a      	str	r2, [r3, #0]
 8008002:	f3bf 8f4f 	dsb	sy
 8008006:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800800a:	bf00      	nop
 800800c:	3708      	adds	r7, #8
 800800e:	46bd      	mov	sp, r7
 8008010:	bd80      	pop	{r7, pc}
 8008012:	bf00      	nop
 8008014:	200014cc 	.word	0x200014cc
 8008018:	20000ff8 	.word	0x20000ff8
 800801c:	200014d8 	.word	0x200014d8
 8008020:	200014e8 	.word	0x200014e8
 8008024:	200014d4 	.word	0x200014d4
 8008028:	20000ffc 	.word	0x20000ffc
 800802c:	e000ed04 	.word	0xe000ed04

08008030 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008030:	b580      	push	{r7, lr}
 8008032:	b084      	sub	sp, #16
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d018      	beq.n	8008074 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008042:	4b14      	ldr	r3, [pc, #80]	@ (8008094 <vTaskDelay+0x64>)
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d00b      	beq.n	8008062 <vTaskDelay+0x32>
	__asm volatile
 800804a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800804e:	f383 8811 	msr	BASEPRI, r3
 8008052:	f3bf 8f6f 	isb	sy
 8008056:	f3bf 8f4f 	dsb	sy
 800805a:	60bb      	str	r3, [r7, #8]
}
 800805c:	bf00      	nop
 800805e:	bf00      	nop
 8008060:	e7fd      	b.n	800805e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008062:	f000 f88b 	bl	800817c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008066:	2100      	movs	r1, #0
 8008068:	6878      	ldr	r0, [r7, #4]
 800806a:	f000 fd09 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800806e:	f000 f893 	bl	8008198 <xTaskResumeAll>
 8008072:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d107      	bne.n	800808a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800807a:	4b07      	ldr	r3, [pc, #28]	@ (8008098 <vTaskDelay+0x68>)
 800807c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	f3bf 8f4f 	dsb	sy
 8008086:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800808a:	bf00      	nop
 800808c:	3710      	adds	r7, #16
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	200014f4 	.word	0x200014f4
 8008098:	e000ed04 	.word	0xe000ed04

0800809c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800809c:	b580      	push	{r7, lr}
 800809e:	b08a      	sub	sp, #40	@ 0x28
 80080a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80080a6:	2300      	movs	r3, #0
 80080a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80080aa:	463a      	mov	r2, r7
 80080ac:	1d39      	adds	r1, r7, #4
 80080ae:	f107 0308 	add.w	r3, r7, #8
 80080b2:	4618      	mov	r0, r3
 80080b4:	f7ff f81c 	bl	80070f0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80080b8:	6839      	ldr	r1, [r7, #0]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	68ba      	ldr	r2, [r7, #8]
 80080be:	9202      	str	r2, [sp, #8]
 80080c0:	9301      	str	r3, [sp, #4]
 80080c2:	2300      	movs	r3, #0
 80080c4:	9300      	str	r3, [sp, #0]
 80080c6:	2300      	movs	r3, #0
 80080c8:	460a      	mov	r2, r1
 80080ca:	4924      	ldr	r1, [pc, #144]	@ (800815c <vTaskStartScheduler+0xc0>)
 80080cc:	4824      	ldr	r0, [pc, #144]	@ (8008160 <vTaskStartScheduler+0xc4>)
 80080ce:	f7ff fdf1 	bl	8007cb4 <xTaskCreateStatic>
 80080d2:	4603      	mov	r3, r0
 80080d4:	4a23      	ldr	r2, [pc, #140]	@ (8008164 <vTaskStartScheduler+0xc8>)
 80080d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80080d8:	4b22      	ldr	r3, [pc, #136]	@ (8008164 <vTaskStartScheduler+0xc8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d002      	beq.n	80080e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80080e0:	2301      	movs	r3, #1
 80080e2:	617b      	str	r3, [r7, #20]
 80080e4:	e001      	b.n	80080ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80080e6:	2300      	movs	r3, #0
 80080e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	2b01      	cmp	r3, #1
 80080ee:	d102      	bne.n	80080f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80080f0:	f000 fd1a 	bl	8008b28 <xTimerCreateTimerTask>
 80080f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80080f6:	697b      	ldr	r3, [r7, #20]
 80080f8:	2b01      	cmp	r3, #1
 80080fa:	d11b      	bne.n	8008134 <vTaskStartScheduler+0x98>
	__asm volatile
 80080fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008100:	f383 8811 	msr	BASEPRI, r3
 8008104:	f3bf 8f6f 	isb	sy
 8008108:	f3bf 8f4f 	dsb	sy
 800810c:	613b      	str	r3, [r7, #16]
}
 800810e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008110:	4b15      	ldr	r3, [pc, #84]	@ (8008168 <vTaskStartScheduler+0xcc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	3354      	adds	r3, #84	@ 0x54
 8008116:	4a15      	ldr	r2, [pc, #84]	@ (800816c <vTaskStartScheduler+0xd0>)
 8008118:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800811a:	4b15      	ldr	r3, [pc, #84]	@ (8008170 <vTaskStartScheduler+0xd4>)
 800811c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008120:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008122:	4b14      	ldr	r3, [pc, #80]	@ (8008174 <vTaskStartScheduler+0xd8>)
 8008124:	2201      	movs	r2, #1
 8008126:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008128:	4b13      	ldr	r3, [pc, #76]	@ (8008178 <vTaskStartScheduler+0xdc>)
 800812a:	2200      	movs	r2, #0
 800812c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800812e:	f001 f8df 	bl	80092f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008132:	e00f      	b.n	8008154 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800813a:	d10b      	bne.n	8008154 <vTaskStartScheduler+0xb8>
	__asm volatile
 800813c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008140:	f383 8811 	msr	BASEPRI, r3
 8008144:	f3bf 8f6f 	isb	sy
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	60fb      	str	r3, [r7, #12]
}
 800814e:	bf00      	nop
 8008150:	bf00      	nop
 8008152:	e7fd      	b.n	8008150 <vTaskStartScheduler+0xb4>
}
 8008154:	bf00      	nop
 8008156:	3718      	adds	r7, #24
 8008158:	46bd      	mov	sp, r7
 800815a:	bd80      	pop	{r7, pc}
 800815c:	0800a498 	.word	0x0800a498
 8008160:	080087ad 	.word	0x080087ad
 8008164:	200014f0 	.word	0x200014f0
 8008168:	20000ff8 	.word	0x20000ff8
 800816c:	20000010 	.word	0x20000010
 8008170:	200014ec 	.word	0x200014ec
 8008174:	200014d8 	.word	0x200014d8
 8008178:	200014d0 	.word	0x200014d0

0800817c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800817c:	b480      	push	{r7}
 800817e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008180:	4b04      	ldr	r3, [pc, #16]	@ (8008194 <vTaskSuspendAll+0x18>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	3301      	adds	r3, #1
 8008186:	4a03      	ldr	r2, [pc, #12]	@ (8008194 <vTaskSuspendAll+0x18>)
 8008188:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800818a:	bf00      	nop
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr
 8008194:	200014f4 	.word	0x200014f4

08008198 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b084      	sub	sp, #16
 800819c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800819e:	2300      	movs	r3, #0
 80081a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80081a2:	2300      	movs	r3, #0
 80081a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80081a6:	4b42      	ldr	r3, [pc, #264]	@ (80082b0 <xTaskResumeAll+0x118>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d10b      	bne.n	80081c6 <xTaskResumeAll+0x2e>
	__asm volatile
 80081ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081b2:	f383 8811 	msr	BASEPRI, r3
 80081b6:	f3bf 8f6f 	isb	sy
 80081ba:	f3bf 8f4f 	dsb	sy
 80081be:	603b      	str	r3, [r7, #0]
}
 80081c0:	bf00      	nop
 80081c2:	bf00      	nop
 80081c4:	e7fd      	b.n	80081c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80081c6:	f001 f937 	bl	8009438 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80081ca:	4b39      	ldr	r3, [pc, #228]	@ (80082b0 <xTaskResumeAll+0x118>)
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	4a37      	ldr	r2, [pc, #220]	@ (80082b0 <xTaskResumeAll+0x118>)
 80081d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081d4:	4b36      	ldr	r3, [pc, #216]	@ (80082b0 <xTaskResumeAll+0x118>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d162      	bne.n	80082a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80081dc:	4b35      	ldr	r3, [pc, #212]	@ (80082b4 <xTaskResumeAll+0x11c>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d05e      	beq.n	80082a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80081e4:	e02f      	b.n	8008246 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081e6:	4b34      	ldr	r3, [pc, #208]	@ (80082b8 <xTaskResumeAll+0x120>)
 80081e8:	68db      	ldr	r3, [r3, #12]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	3318      	adds	r3, #24
 80081f2:	4618      	mov	r0, r3
 80081f4:	f7ff f83a 	bl	800726c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3304      	adds	r3, #4
 80081fc:	4618      	mov	r0, r3
 80081fe:	f7ff f835 	bl	800726c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008206:	4b2d      	ldr	r3, [pc, #180]	@ (80082bc <xTaskResumeAll+0x124>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	429a      	cmp	r2, r3
 800820c:	d903      	bls.n	8008216 <xTaskResumeAll+0x7e>
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008212:	4a2a      	ldr	r2, [pc, #168]	@ (80082bc <xTaskResumeAll+0x124>)
 8008214:	6013      	str	r3, [r2, #0]
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821a:	4613      	mov	r3, r2
 800821c:	009b      	lsls	r3, r3, #2
 800821e:	4413      	add	r3, r2
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	4a27      	ldr	r2, [pc, #156]	@ (80082c0 <xTaskResumeAll+0x128>)
 8008224:	441a      	add	r2, r3
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	3304      	adds	r3, #4
 800822a:	4619      	mov	r1, r3
 800822c:	4610      	mov	r0, r2
 800822e:	f7fe ffc0 	bl	80071b2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008236:	4b23      	ldr	r3, [pc, #140]	@ (80082c4 <xTaskResumeAll+0x12c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823c:	429a      	cmp	r2, r3
 800823e:	d302      	bcc.n	8008246 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008240:	4b21      	ldr	r3, [pc, #132]	@ (80082c8 <xTaskResumeAll+0x130>)
 8008242:	2201      	movs	r2, #1
 8008244:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008246:	4b1c      	ldr	r3, [pc, #112]	@ (80082b8 <xTaskResumeAll+0x120>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	2b00      	cmp	r3, #0
 800824c:	d1cb      	bne.n	80081e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d001      	beq.n	8008258 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008254:	f000 fb66 	bl	8008924 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008258:	4b1c      	ldr	r3, [pc, #112]	@ (80082cc <xTaskResumeAll+0x134>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d010      	beq.n	8008286 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008264:	f000 f846 	bl	80082f4 <xTaskIncrementTick>
 8008268:	4603      	mov	r3, r0
 800826a:	2b00      	cmp	r3, #0
 800826c:	d002      	beq.n	8008274 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800826e:	4b16      	ldr	r3, [pc, #88]	@ (80082c8 <xTaskResumeAll+0x130>)
 8008270:	2201      	movs	r2, #1
 8008272:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	3b01      	subs	r3, #1
 8008278:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d1f1      	bne.n	8008264 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8008280:	4b12      	ldr	r3, [pc, #72]	@ (80082cc <xTaskResumeAll+0x134>)
 8008282:	2200      	movs	r2, #0
 8008284:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008286:	4b10      	ldr	r3, [pc, #64]	@ (80082c8 <xTaskResumeAll+0x130>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d009      	beq.n	80082a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800828e:	2301      	movs	r3, #1
 8008290:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008292:	4b0f      	ldr	r3, [pc, #60]	@ (80082d0 <xTaskResumeAll+0x138>)
 8008294:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008298:	601a      	str	r2, [r3, #0]
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80082a2:	f001 f8fb 	bl	800949c <vPortExitCritical>

	return xAlreadyYielded;
 80082a6:	68bb      	ldr	r3, [r7, #8]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3710      	adds	r7, #16
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}
 80082b0:	200014f4 	.word	0x200014f4
 80082b4:	200014cc 	.word	0x200014cc
 80082b8:	2000148c 	.word	0x2000148c
 80082bc:	200014d4 	.word	0x200014d4
 80082c0:	20000ffc 	.word	0x20000ffc
 80082c4:	20000ff8 	.word	0x20000ff8
 80082c8:	200014e0 	.word	0x200014e0
 80082cc:	200014dc 	.word	0x200014dc
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80082da:	4b05      	ldr	r3, [pc, #20]	@ (80082f0 <xTaskGetTickCount+0x1c>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80082e0:	687b      	ldr	r3, [r7, #4]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	370c      	adds	r7, #12
 80082e6:	46bd      	mov	sp, r7
 80082e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ec:	4770      	bx	lr
 80082ee:	bf00      	nop
 80082f0:	200014d0 	.word	0x200014d0

080082f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80082fa:	2300      	movs	r3, #0
 80082fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082fe:	4b4f      	ldr	r3, [pc, #316]	@ (800843c <xTaskIncrementTick+0x148>)
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f040 8090 	bne.w	8008428 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008308:	4b4d      	ldr	r3, [pc, #308]	@ (8008440 <xTaskIncrementTick+0x14c>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	3301      	adds	r3, #1
 800830e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008310:	4a4b      	ldr	r2, [pc, #300]	@ (8008440 <xTaskIncrementTick+0x14c>)
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008316:	693b      	ldr	r3, [r7, #16]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d121      	bne.n	8008360 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800831c:	4b49      	ldr	r3, [pc, #292]	@ (8008444 <xTaskIncrementTick+0x150>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d00b      	beq.n	800833e <xTaskIncrementTick+0x4a>
	__asm volatile
 8008326:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800832a:	f383 8811 	msr	BASEPRI, r3
 800832e:	f3bf 8f6f 	isb	sy
 8008332:	f3bf 8f4f 	dsb	sy
 8008336:	603b      	str	r3, [r7, #0]
}
 8008338:	bf00      	nop
 800833a:	bf00      	nop
 800833c:	e7fd      	b.n	800833a <xTaskIncrementTick+0x46>
 800833e:	4b41      	ldr	r3, [pc, #260]	@ (8008444 <xTaskIncrementTick+0x150>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	4b40      	ldr	r3, [pc, #256]	@ (8008448 <xTaskIncrementTick+0x154>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a3e      	ldr	r2, [pc, #248]	@ (8008444 <xTaskIncrementTick+0x150>)
 800834a:	6013      	str	r3, [r2, #0]
 800834c:	4a3e      	ldr	r2, [pc, #248]	@ (8008448 <xTaskIncrementTick+0x154>)
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6013      	str	r3, [r2, #0]
 8008352:	4b3e      	ldr	r3, [pc, #248]	@ (800844c <xTaskIncrementTick+0x158>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	3301      	adds	r3, #1
 8008358:	4a3c      	ldr	r2, [pc, #240]	@ (800844c <xTaskIncrementTick+0x158>)
 800835a:	6013      	str	r3, [r2, #0]
 800835c:	f000 fae2 	bl	8008924 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008360:	4b3b      	ldr	r3, [pc, #236]	@ (8008450 <xTaskIncrementTick+0x15c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	693a      	ldr	r2, [r7, #16]
 8008366:	429a      	cmp	r2, r3
 8008368:	d349      	bcc.n	80083fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800836a:	4b36      	ldr	r3, [pc, #216]	@ (8008444 <xTaskIncrementTick+0x150>)
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d104      	bne.n	800837e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008374:	4b36      	ldr	r3, [pc, #216]	@ (8008450 <xTaskIncrementTick+0x15c>)
 8008376:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800837a:	601a      	str	r2, [r3, #0]
					break;
 800837c:	e03f      	b.n	80083fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800837e:	4b31      	ldr	r3, [pc, #196]	@ (8008444 <xTaskIncrementTick+0x150>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	68db      	ldr	r3, [r3, #12]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800838e:	693a      	ldr	r2, [r7, #16]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	429a      	cmp	r2, r3
 8008394:	d203      	bcs.n	800839e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008396:	4a2e      	ldr	r2, [pc, #184]	@ (8008450 <xTaskIncrementTick+0x15c>)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800839c:	e02f      	b.n	80083fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	3304      	adds	r3, #4
 80083a2:	4618      	mov	r0, r3
 80083a4:	f7fe ff62 	bl	800726c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d004      	beq.n	80083ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	3318      	adds	r3, #24
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7fe ff59 	bl	800726c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083be:	4b25      	ldr	r3, [pc, #148]	@ (8008454 <xTaskIncrementTick+0x160>)
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d903      	bls.n	80083ce <xTaskIncrementTick+0xda>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083ca:	4a22      	ldr	r2, [pc, #136]	@ (8008454 <xTaskIncrementTick+0x160>)
 80083cc:	6013      	str	r3, [r2, #0]
 80083ce:	68bb      	ldr	r3, [r7, #8]
 80083d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	4a1f      	ldr	r2, [pc, #124]	@ (8008458 <xTaskIncrementTick+0x164>)
 80083dc:	441a      	add	r2, r3
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	3304      	adds	r3, #4
 80083e2:	4619      	mov	r1, r3
 80083e4:	4610      	mov	r0, r2
 80083e6:	f7fe fee4 	bl	80071b2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083ee:	4b1b      	ldr	r3, [pc, #108]	@ (800845c <xTaskIncrementTick+0x168>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d3b8      	bcc.n	800836a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80083f8:	2301      	movs	r3, #1
 80083fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80083fc:	e7b5      	b.n	800836a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80083fe:	4b17      	ldr	r3, [pc, #92]	@ (800845c <xTaskIncrementTick+0x168>)
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008404:	4914      	ldr	r1, [pc, #80]	@ (8008458 <xTaskIncrementTick+0x164>)
 8008406:	4613      	mov	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4413      	add	r3, r2
 800840c:	009b      	lsls	r3, r3, #2
 800840e:	440b      	add	r3, r1
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	2b01      	cmp	r3, #1
 8008414:	d901      	bls.n	800841a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008416:	2301      	movs	r3, #1
 8008418:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800841a:	4b11      	ldr	r3, [pc, #68]	@ (8008460 <xTaskIncrementTick+0x16c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d007      	beq.n	8008432 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008422:	2301      	movs	r3, #1
 8008424:	617b      	str	r3, [r7, #20]
 8008426:	e004      	b.n	8008432 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008428:	4b0e      	ldr	r3, [pc, #56]	@ (8008464 <xTaskIncrementTick+0x170>)
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	3301      	adds	r3, #1
 800842e:	4a0d      	ldr	r2, [pc, #52]	@ (8008464 <xTaskIncrementTick+0x170>)
 8008430:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008432:	697b      	ldr	r3, [r7, #20]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3718      	adds	r7, #24
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}
 800843c:	200014f4 	.word	0x200014f4
 8008440:	200014d0 	.word	0x200014d0
 8008444:	20001484 	.word	0x20001484
 8008448:	20001488 	.word	0x20001488
 800844c:	200014e4 	.word	0x200014e4
 8008450:	200014ec 	.word	0x200014ec
 8008454:	200014d4 	.word	0x200014d4
 8008458:	20000ffc 	.word	0x20000ffc
 800845c:	20000ff8 	.word	0x20000ff8
 8008460:	200014e0 	.word	0x200014e0
 8008464:	200014dc 	.word	0x200014dc

08008468 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800846e:	4b2b      	ldr	r3, [pc, #172]	@ (800851c <vTaskSwitchContext+0xb4>)
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d003      	beq.n	800847e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008476:	4b2a      	ldr	r3, [pc, #168]	@ (8008520 <vTaskSwitchContext+0xb8>)
 8008478:	2201      	movs	r2, #1
 800847a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800847c:	e047      	b.n	800850e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800847e:	4b28      	ldr	r3, [pc, #160]	@ (8008520 <vTaskSwitchContext+0xb8>)
 8008480:	2200      	movs	r2, #0
 8008482:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008484:	4b27      	ldr	r3, [pc, #156]	@ (8008524 <vTaskSwitchContext+0xbc>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	60fb      	str	r3, [r7, #12]
 800848a:	e011      	b.n	80084b0 <vTaskSwitchContext+0x48>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10b      	bne.n	80084aa <vTaskSwitchContext+0x42>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	607b      	str	r3, [r7, #4]
}
 80084a4:	bf00      	nop
 80084a6:	bf00      	nop
 80084a8:	e7fd      	b.n	80084a6 <vTaskSwitchContext+0x3e>
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	3b01      	subs	r3, #1
 80084ae:	60fb      	str	r3, [r7, #12]
 80084b0:	491d      	ldr	r1, [pc, #116]	@ (8008528 <vTaskSwitchContext+0xc0>)
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	4613      	mov	r3, r2
 80084b6:	009b      	lsls	r3, r3, #2
 80084b8:	4413      	add	r3, r2
 80084ba:	009b      	lsls	r3, r3, #2
 80084bc:	440b      	add	r3, r1
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d0e3      	beq.n	800848c <vTaskSwitchContext+0x24>
 80084c4:	68fa      	ldr	r2, [r7, #12]
 80084c6:	4613      	mov	r3, r2
 80084c8:	009b      	lsls	r3, r3, #2
 80084ca:	4413      	add	r3, r2
 80084cc:	009b      	lsls	r3, r3, #2
 80084ce:	4a16      	ldr	r2, [pc, #88]	@ (8008528 <vTaskSwitchContext+0xc0>)
 80084d0:	4413      	add	r3, r2
 80084d2:	60bb      	str	r3, [r7, #8]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	685b      	ldr	r3, [r3, #4]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	605a      	str	r2, [r3, #4]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	685a      	ldr	r2, [r3, #4]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	3308      	adds	r3, #8
 80084e6:	429a      	cmp	r2, r3
 80084e8:	d104      	bne.n	80084f4 <vTaskSwitchContext+0x8c>
 80084ea:	68bb      	ldr	r3, [r7, #8]
 80084ec:	685b      	ldr	r3, [r3, #4]
 80084ee:	685a      	ldr	r2, [r3, #4]
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	605a      	str	r2, [r3, #4]
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	68db      	ldr	r3, [r3, #12]
 80084fa:	4a0c      	ldr	r2, [pc, #48]	@ (800852c <vTaskSwitchContext+0xc4>)
 80084fc:	6013      	str	r3, [r2, #0]
 80084fe:	4a09      	ldr	r2, [pc, #36]	@ (8008524 <vTaskSwitchContext+0xbc>)
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008504:	4b09      	ldr	r3, [pc, #36]	@ (800852c <vTaskSwitchContext+0xc4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	3354      	adds	r3, #84	@ 0x54
 800850a:	4a09      	ldr	r2, [pc, #36]	@ (8008530 <vTaskSwitchContext+0xc8>)
 800850c:	6013      	str	r3, [r2, #0]
}
 800850e:	bf00      	nop
 8008510:	3714      	adds	r7, #20
 8008512:	46bd      	mov	sp, r7
 8008514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008518:	4770      	bx	lr
 800851a:	bf00      	nop
 800851c:	200014f4 	.word	0x200014f4
 8008520:	200014e0 	.word	0x200014e0
 8008524:	200014d4 	.word	0x200014d4
 8008528:	20000ffc 	.word	0x20000ffc
 800852c:	20000ff8 	.word	0x20000ff8
 8008530:	20000010 	.word	0x20000010

08008534 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2b00      	cmp	r3, #0
 8008542:	d10b      	bne.n	800855c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008548:	f383 8811 	msr	BASEPRI, r3
 800854c:	f3bf 8f6f 	isb	sy
 8008550:	f3bf 8f4f 	dsb	sy
 8008554:	60fb      	str	r3, [r7, #12]
}
 8008556:	bf00      	nop
 8008558:	bf00      	nop
 800855a:	e7fd      	b.n	8008558 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800855c:	4b07      	ldr	r3, [pc, #28]	@ (800857c <vTaskPlaceOnEventList+0x48>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	3318      	adds	r3, #24
 8008562:	4619      	mov	r1, r3
 8008564:	6878      	ldr	r0, [r7, #4]
 8008566:	f7fe fe48 	bl	80071fa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800856a:	2101      	movs	r1, #1
 800856c:	6838      	ldr	r0, [r7, #0]
 800856e:	f000 fa87 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
}
 8008572:	bf00      	nop
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	20000ff8 	.word	0x20000ff8

08008580 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	60f8      	str	r0, [r7, #12]
 8008588:	60b9      	str	r1, [r7, #8]
 800858a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10b      	bne.n	80085aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8008592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008596:	f383 8811 	msr	BASEPRI, r3
 800859a:	f3bf 8f6f 	isb	sy
 800859e:	f3bf 8f4f 	dsb	sy
 80085a2:	617b      	str	r3, [r7, #20]
}
 80085a4:	bf00      	nop
 80085a6:	bf00      	nop
 80085a8:	e7fd      	b.n	80085a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80085aa:	4b0a      	ldr	r3, [pc, #40]	@ (80085d4 <vTaskPlaceOnEventListRestricted+0x54>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	3318      	adds	r3, #24
 80085b0:	4619      	mov	r1, r3
 80085b2:	68f8      	ldr	r0, [r7, #12]
 80085b4:	f7fe fdfd 	bl	80071b2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d002      	beq.n	80085c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80085be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80085c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80085c4:	6879      	ldr	r1, [r7, #4]
 80085c6:	68b8      	ldr	r0, [r7, #8]
 80085c8:	f000 fa5a 	bl	8008a80 <prvAddCurrentTaskToDelayedList>
	}
 80085cc:	bf00      	nop
 80085ce:	3718      	adds	r7, #24
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	20000ff8 	.word	0x20000ff8

080085d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	68db      	ldr	r3, [r3, #12]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d10b      	bne.n	8008606 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80085ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085f2:	f383 8811 	msr	BASEPRI, r3
 80085f6:	f3bf 8f6f 	isb	sy
 80085fa:	f3bf 8f4f 	dsb	sy
 80085fe:	60fb      	str	r3, [r7, #12]
}
 8008600:	bf00      	nop
 8008602:	bf00      	nop
 8008604:	e7fd      	b.n	8008602 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	3318      	adds	r3, #24
 800860a:	4618      	mov	r0, r3
 800860c:	f7fe fe2e 	bl	800726c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008610:	4b1d      	ldr	r3, [pc, #116]	@ (8008688 <xTaskRemoveFromEventList+0xb0>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	2b00      	cmp	r3, #0
 8008616:	d11d      	bne.n	8008654 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008618:	693b      	ldr	r3, [r7, #16]
 800861a:	3304      	adds	r3, #4
 800861c:	4618      	mov	r0, r3
 800861e:	f7fe fe25 	bl	800726c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008626:	4b19      	ldr	r3, [pc, #100]	@ (800868c <xTaskRemoveFromEventList+0xb4>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	429a      	cmp	r2, r3
 800862c:	d903      	bls.n	8008636 <xTaskRemoveFromEventList+0x5e>
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008632:	4a16      	ldr	r2, [pc, #88]	@ (800868c <xTaskRemoveFromEventList+0xb4>)
 8008634:	6013      	str	r3, [r2, #0]
 8008636:	693b      	ldr	r3, [r7, #16]
 8008638:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800863a:	4613      	mov	r3, r2
 800863c:	009b      	lsls	r3, r3, #2
 800863e:	4413      	add	r3, r2
 8008640:	009b      	lsls	r3, r3, #2
 8008642:	4a13      	ldr	r2, [pc, #76]	@ (8008690 <xTaskRemoveFromEventList+0xb8>)
 8008644:	441a      	add	r2, r3
 8008646:	693b      	ldr	r3, [r7, #16]
 8008648:	3304      	adds	r3, #4
 800864a:	4619      	mov	r1, r3
 800864c:	4610      	mov	r0, r2
 800864e:	f7fe fdb0 	bl	80071b2 <vListInsertEnd>
 8008652:	e005      	b.n	8008660 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008654:	693b      	ldr	r3, [r7, #16]
 8008656:	3318      	adds	r3, #24
 8008658:	4619      	mov	r1, r3
 800865a:	480e      	ldr	r0, [pc, #56]	@ (8008694 <xTaskRemoveFromEventList+0xbc>)
 800865c:	f7fe fda9 	bl	80071b2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008664:	4b0c      	ldr	r3, [pc, #48]	@ (8008698 <xTaskRemoveFromEventList+0xc0>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800866a:	429a      	cmp	r2, r3
 800866c:	d905      	bls.n	800867a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800866e:	2301      	movs	r3, #1
 8008670:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008672:	4b0a      	ldr	r3, [pc, #40]	@ (800869c <xTaskRemoveFromEventList+0xc4>)
 8008674:	2201      	movs	r2, #1
 8008676:	601a      	str	r2, [r3, #0]
 8008678:	e001      	b.n	800867e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800867a:	2300      	movs	r3, #0
 800867c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800867e:	697b      	ldr	r3, [r7, #20]
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	200014f4 	.word	0x200014f4
 800868c:	200014d4 	.word	0x200014d4
 8008690:	20000ffc 	.word	0x20000ffc
 8008694:	2000148c 	.word	0x2000148c
 8008698:	20000ff8 	.word	0x20000ff8
 800869c:	200014e0 	.word	0x200014e0

080086a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80086a0:	b480      	push	{r7}
 80086a2:	b083      	sub	sp, #12
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80086a8:	4b06      	ldr	r3, [pc, #24]	@ (80086c4 <vTaskInternalSetTimeOutState+0x24>)
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80086b0:	4b05      	ldr	r3, [pc, #20]	@ (80086c8 <vTaskInternalSetTimeOutState+0x28>)
 80086b2:	681a      	ldr	r2, [r3, #0]
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	605a      	str	r2, [r3, #4]
}
 80086b8:	bf00      	nop
 80086ba:	370c      	adds	r7, #12
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr
 80086c4:	200014e4 	.word	0x200014e4
 80086c8:	200014d0 	.word	0x200014d0

080086cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	b088      	sub	sp, #32
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
 80086d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d10b      	bne.n	80086f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80086dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e0:	f383 8811 	msr	BASEPRI, r3
 80086e4:	f3bf 8f6f 	isb	sy
 80086e8:	f3bf 8f4f 	dsb	sy
 80086ec:	613b      	str	r3, [r7, #16]
}
 80086ee:	bf00      	nop
 80086f0:	bf00      	nop
 80086f2:	e7fd      	b.n	80086f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d10b      	bne.n	8008712 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80086fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fe:	f383 8811 	msr	BASEPRI, r3
 8008702:	f3bf 8f6f 	isb	sy
 8008706:	f3bf 8f4f 	dsb	sy
 800870a:	60fb      	str	r3, [r7, #12]
}
 800870c:	bf00      	nop
 800870e:	bf00      	nop
 8008710:	e7fd      	b.n	800870e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008712:	f000 fe91 	bl	8009438 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008716:	4b1d      	ldr	r3, [pc, #116]	@ (800878c <xTaskCheckForTimeOut+0xc0>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	685b      	ldr	r3, [r3, #4]
 8008720:	69ba      	ldr	r2, [r7, #24]
 8008722:	1ad3      	subs	r3, r2, r3
 8008724:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800872e:	d102      	bne.n	8008736 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008730:	2300      	movs	r3, #0
 8008732:	61fb      	str	r3, [r7, #28]
 8008734:	e023      	b.n	800877e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681a      	ldr	r2, [r3, #0]
 800873a:	4b15      	ldr	r3, [pc, #84]	@ (8008790 <xTaskCheckForTimeOut+0xc4>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	429a      	cmp	r2, r3
 8008740:	d007      	beq.n	8008752 <xTaskCheckForTimeOut+0x86>
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	69ba      	ldr	r2, [r7, #24]
 8008748:	429a      	cmp	r2, r3
 800874a:	d302      	bcc.n	8008752 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800874c:	2301      	movs	r3, #1
 800874e:	61fb      	str	r3, [r7, #28]
 8008750:	e015      	b.n	800877e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008752:	683b      	ldr	r3, [r7, #0]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	697a      	ldr	r2, [r7, #20]
 8008758:	429a      	cmp	r2, r3
 800875a:	d20b      	bcs.n	8008774 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	1ad2      	subs	r2, r2, r3
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f7ff ff99 	bl	80086a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800876e:	2300      	movs	r3, #0
 8008770:	61fb      	str	r3, [r7, #28]
 8008772:	e004      	b.n	800877e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008774:	683b      	ldr	r3, [r7, #0]
 8008776:	2200      	movs	r2, #0
 8008778:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800877a:	2301      	movs	r3, #1
 800877c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800877e:	f000 fe8d 	bl	800949c <vPortExitCritical>

	return xReturn;
 8008782:	69fb      	ldr	r3, [r7, #28]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3720      	adds	r7, #32
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}
 800878c:	200014d0 	.word	0x200014d0
 8008790:	200014e4 	.word	0x200014e4

08008794 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008794:	b480      	push	{r7}
 8008796:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008798:	4b03      	ldr	r3, [pc, #12]	@ (80087a8 <vTaskMissedYield+0x14>)
 800879a:	2201      	movs	r2, #1
 800879c:	601a      	str	r2, [r3, #0]
}
 800879e:	bf00      	nop
 80087a0:	46bd      	mov	sp, r7
 80087a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087a6:	4770      	bx	lr
 80087a8:	200014e0 	.word	0x200014e0

080087ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b082      	sub	sp, #8
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80087b4:	f000 f852 	bl	800885c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80087b8:	4b06      	ldr	r3, [pc, #24]	@ (80087d4 <prvIdleTask+0x28>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b01      	cmp	r3, #1
 80087be:	d9f9      	bls.n	80087b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80087c0:	4b05      	ldr	r3, [pc, #20]	@ (80087d8 <prvIdleTask+0x2c>)
 80087c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80087c6:	601a      	str	r2, [r3, #0]
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80087d0:	e7f0      	b.n	80087b4 <prvIdleTask+0x8>
 80087d2:	bf00      	nop
 80087d4:	20000ffc 	.word	0x20000ffc
 80087d8:	e000ed04 	.word	0xe000ed04

080087dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	b082      	sub	sp, #8
 80087e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087e2:	2300      	movs	r3, #0
 80087e4:	607b      	str	r3, [r7, #4]
 80087e6:	e00c      	b.n	8008802 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80087e8:	687a      	ldr	r2, [r7, #4]
 80087ea:	4613      	mov	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	4413      	add	r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a12      	ldr	r2, [pc, #72]	@ (800883c <prvInitialiseTaskLists+0x60>)
 80087f4:	4413      	add	r3, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fe fcae 	bl	8007158 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	3301      	adds	r3, #1
 8008800:	607b      	str	r3, [r7, #4]
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	2b37      	cmp	r3, #55	@ 0x37
 8008806:	d9ef      	bls.n	80087e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008808:	480d      	ldr	r0, [pc, #52]	@ (8008840 <prvInitialiseTaskLists+0x64>)
 800880a:	f7fe fca5 	bl	8007158 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800880e:	480d      	ldr	r0, [pc, #52]	@ (8008844 <prvInitialiseTaskLists+0x68>)
 8008810:	f7fe fca2 	bl	8007158 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008814:	480c      	ldr	r0, [pc, #48]	@ (8008848 <prvInitialiseTaskLists+0x6c>)
 8008816:	f7fe fc9f 	bl	8007158 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800881a:	480c      	ldr	r0, [pc, #48]	@ (800884c <prvInitialiseTaskLists+0x70>)
 800881c:	f7fe fc9c 	bl	8007158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008820:	480b      	ldr	r0, [pc, #44]	@ (8008850 <prvInitialiseTaskLists+0x74>)
 8008822:	f7fe fc99 	bl	8007158 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008826:	4b0b      	ldr	r3, [pc, #44]	@ (8008854 <prvInitialiseTaskLists+0x78>)
 8008828:	4a05      	ldr	r2, [pc, #20]	@ (8008840 <prvInitialiseTaskLists+0x64>)
 800882a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800882c:	4b0a      	ldr	r3, [pc, #40]	@ (8008858 <prvInitialiseTaskLists+0x7c>)
 800882e:	4a05      	ldr	r2, [pc, #20]	@ (8008844 <prvInitialiseTaskLists+0x68>)
 8008830:	601a      	str	r2, [r3, #0]
}
 8008832:	bf00      	nop
 8008834:	3708      	adds	r7, #8
 8008836:	46bd      	mov	sp, r7
 8008838:	bd80      	pop	{r7, pc}
 800883a:	bf00      	nop
 800883c:	20000ffc 	.word	0x20000ffc
 8008840:	2000145c 	.word	0x2000145c
 8008844:	20001470 	.word	0x20001470
 8008848:	2000148c 	.word	0x2000148c
 800884c:	200014a0 	.word	0x200014a0
 8008850:	200014b8 	.word	0x200014b8
 8008854:	20001484 	.word	0x20001484
 8008858:	20001488 	.word	0x20001488

0800885c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800885c:	b580      	push	{r7, lr}
 800885e:	b082      	sub	sp, #8
 8008860:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008862:	e019      	b.n	8008898 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008864:	f000 fde8 	bl	8009438 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008868:	4b10      	ldr	r3, [pc, #64]	@ (80088ac <prvCheckTasksWaitingTermination+0x50>)
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	3304      	adds	r3, #4
 8008874:	4618      	mov	r0, r3
 8008876:	f7fe fcf9 	bl	800726c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800887a:	4b0d      	ldr	r3, [pc, #52]	@ (80088b0 <prvCheckTasksWaitingTermination+0x54>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3b01      	subs	r3, #1
 8008880:	4a0b      	ldr	r2, [pc, #44]	@ (80088b0 <prvCheckTasksWaitingTermination+0x54>)
 8008882:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008884:	4b0b      	ldr	r3, [pc, #44]	@ (80088b4 <prvCheckTasksWaitingTermination+0x58>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	3b01      	subs	r3, #1
 800888a:	4a0a      	ldr	r2, [pc, #40]	@ (80088b4 <prvCheckTasksWaitingTermination+0x58>)
 800888c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800888e:	f000 fe05 	bl	800949c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008892:	6878      	ldr	r0, [r7, #4]
 8008894:	f000 f810 	bl	80088b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008898:	4b06      	ldr	r3, [pc, #24]	@ (80088b4 <prvCheckTasksWaitingTermination+0x58>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d1e1      	bne.n	8008864 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	3708      	adds	r7, #8
 80088a6:	46bd      	mov	sp, r7
 80088a8:	bd80      	pop	{r7, pc}
 80088aa:	bf00      	nop
 80088ac:	200014a0 	.word	0x200014a0
 80088b0:	200014cc 	.word	0x200014cc
 80088b4:	200014b4 	.word	0x200014b4

080088b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b084      	sub	sp, #16
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	3354      	adds	r3, #84	@ 0x54
 80088c4:	4618      	mov	r0, r3
 80088c6:	f001 f8ef 	bl	8009aa8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d108      	bne.n	80088e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80088d8:	4618      	mov	r0, r3
 80088da:	f000 ff9d 	bl	8009818 <vPortFree>
				vPortFree( pxTCB );
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f000 ff9a 	bl	8009818 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80088e4:	e019      	b.n	800891a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d103      	bne.n	80088f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	f000 ff91 	bl	8009818 <vPortFree>
	}
 80088f6:	e010      	b.n	800891a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d00b      	beq.n	800891a <prvDeleteTCB+0x62>
	__asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	60fb      	str	r3, [r7, #12]
}
 8008914:	bf00      	nop
 8008916:	bf00      	nop
 8008918:	e7fd      	b.n	8008916 <prvDeleteTCB+0x5e>
	}
 800891a:	bf00      	nop
 800891c:	3710      	adds	r7, #16
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}
	...

08008924 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008924:	b480      	push	{r7}
 8008926:	b083      	sub	sp, #12
 8008928:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800892a:	4b0c      	ldr	r3, [pc, #48]	@ (800895c <prvResetNextTaskUnblockTime+0x38>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d104      	bne.n	800893e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008934:	4b0a      	ldr	r3, [pc, #40]	@ (8008960 <prvResetNextTaskUnblockTime+0x3c>)
 8008936:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800893a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800893c:	e008      	b.n	8008950 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800893e:	4b07      	ldr	r3, [pc, #28]	@ (800895c <prvResetNextTaskUnblockTime+0x38>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68db      	ldr	r3, [r3, #12]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	685b      	ldr	r3, [r3, #4]
 800894c:	4a04      	ldr	r2, [pc, #16]	@ (8008960 <prvResetNextTaskUnblockTime+0x3c>)
 800894e:	6013      	str	r3, [r2, #0]
}
 8008950:	bf00      	nop
 8008952:	370c      	adds	r7, #12
 8008954:	46bd      	mov	sp, r7
 8008956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800895a:	4770      	bx	lr
 800895c:	20001484 	.word	0x20001484
 8008960:	200014ec 	.word	0x200014ec

08008964 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008964:	b480      	push	{r7}
 8008966:	b083      	sub	sp, #12
 8008968:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800896a:	4b0b      	ldr	r3, [pc, #44]	@ (8008998 <xTaskGetSchedulerState+0x34>)
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d102      	bne.n	8008978 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008972:	2301      	movs	r3, #1
 8008974:	607b      	str	r3, [r7, #4]
 8008976:	e008      	b.n	800898a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008978:	4b08      	ldr	r3, [pc, #32]	@ (800899c <xTaskGetSchedulerState+0x38>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	2b00      	cmp	r3, #0
 800897e:	d102      	bne.n	8008986 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008980:	2302      	movs	r3, #2
 8008982:	607b      	str	r3, [r7, #4]
 8008984:	e001      	b.n	800898a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008986:	2300      	movs	r3, #0
 8008988:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800898a:	687b      	ldr	r3, [r7, #4]
	}
 800898c:	4618      	mov	r0, r3
 800898e:	370c      	adds	r7, #12
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	200014d8 	.word	0x200014d8
 800899c:	200014f4 	.word	0x200014f4

080089a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b086      	sub	sp, #24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80089ac:	2300      	movs	r3, #0
 80089ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d058      	beq.n	8008a68 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80089b6:	4b2f      	ldr	r3, [pc, #188]	@ (8008a74 <xTaskPriorityDisinherit+0xd4>)
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	693a      	ldr	r2, [r7, #16]
 80089bc:	429a      	cmp	r2, r3
 80089be:	d00b      	beq.n	80089d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80089c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c4:	f383 8811 	msr	BASEPRI, r3
 80089c8:	f3bf 8f6f 	isb	sy
 80089cc:	f3bf 8f4f 	dsb	sy
 80089d0:	60fb      	str	r3, [r7, #12]
}
 80089d2:	bf00      	nop
 80089d4:	bf00      	nop
 80089d6:	e7fd      	b.n	80089d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80089d8:	693b      	ldr	r3, [r7, #16]
 80089da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d10b      	bne.n	80089f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80089e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089e4:	f383 8811 	msr	BASEPRI, r3
 80089e8:	f3bf 8f6f 	isb	sy
 80089ec:	f3bf 8f4f 	dsb	sy
 80089f0:	60bb      	str	r3, [r7, #8]
}
 80089f2:	bf00      	nop
 80089f4:	bf00      	nop
 80089f6:	e7fd      	b.n	80089f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80089f8:	693b      	ldr	r3, [r7, #16]
 80089fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80089fc:	1e5a      	subs	r2, r3, #1
 80089fe:	693b      	ldr	r3, [r7, #16]
 8008a00:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008a02:	693b      	ldr	r3, [r7, #16]
 8008a04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d02c      	beq.n	8008a68 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008a0e:	693b      	ldr	r3, [r7, #16]
 8008a10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d128      	bne.n	8008a68 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	3304      	adds	r3, #4
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f7fe fc26 	bl	800726c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008a20:	693b      	ldr	r3, [r7, #16]
 8008a22:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008a24:	693b      	ldr	r3, [r7, #16]
 8008a26:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a2c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a38:	4b0f      	ldr	r3, [pc, #60]	@ (8008a78 <xTaskPriorityDisinherit+0xd8>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d903      	bls.n	8008a48 <xTaskPriorityDisinherit+0xa8>
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a44:	4a0c      	ldr	r2, [pc, #48]	@ (8008a78 <xTaskPriorityDisinherit+0xd8>)
 8008a46:	6013      	str	r3, [r2, #0]
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a4c:	4613      	mov	r3, r2
 8008a4e:	009b      	lsls	r3, r3, #2
 8008a50:	4413      	add	r3, r2
 8008a52:	009b      	lsls	r3, r3, #2
 8008a54:	4a09      	ldr	r2, [pc, #36]	@ (8008a7c <xTaskPriorityDisinherit+0xdc>)
 8008a56:	441a      	add	r2, r3
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	3304      	adds	r3, #4
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	4610      	mov	r0, r2
 8008a60:	f7fe fba7 	bl	80071b2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008a64:	2301      	movs	r3, #1
 8008a66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008a68:	697b      	ldr	r3, [r7, #20]
	}
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	3718      	adds	r7, #24
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	bd80      	pop	{r7, pc}
 8008a72:	bf00      	nop
 8008a74:	20000ff8 	.word	0x20000ff8
 8008a78:	200014d4 	.word	0x200014d4
 8008a7c:	20000ffc 	.word	0x20000ffc

08008a80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b084      	sub	sp, #16
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
 8008a88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008a8a:	4b21      	ldr	r3, [pc, #132]	@ (8008b10 <prvAddCurrentTaskToDelayedList+0x90>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008a90:	4b20      	ldr	r3, [pc, #128]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	3304      	adds	r3, #4
 8008a96:	4618      	mov	r0, r3
 8008a98:	f7fe fbe8 	bl	800726c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008aa2:	d10a      	bne.n	8008aba <prvAddCurrentTaskToDelayedList+0x3a>
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008aaa:	4b1a      	ldr	r3, [pc, #104]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	3304      	adds	r3, #4
 8008ab0:	4619      	mov	r1, r3
 8008ab2:	4819      	ldr	r0, [pc, #100]	@ (8008b18 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ab4:	f7fe fb7d 	bl	80071b2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ab8:	e026      	b.n	8008b08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	4413      	add	r3, r2
 8008ac0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ac2:	4b14      	ldr	r3, [pc, #80]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	68ba      	ldr	r2, [r7, #8]
 8008ac8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008aca:	68ba      	ldr	r2, [r7, #8]
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	429a      	cmp	r2, r3
 8008ad0:	d209      	bcs.n	8008ae6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ad2:	4b12      	ldr	r3, [pc, #72]	@ (8008b1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008ad4:	681a      	ldr	r2, [r3, #0]
 8008ad6:	4b0f      	ldr	r3, [pc, #60]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	3304      	adds	r3, #4
 8008adc:	4619      	mov	r1, r3
 8008ade:	4610      	mov	r0, r2
 8008ae0:	f7fe fb8b 	bl	80071fa <vListInsert>
}
 8008ae4:	e010      	b.n	8008b08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ae6:	4b0e      	ldr	r3, [pc, #56]	@ (8008b20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ae8:	681a      	ldr	r2, [r3, #0]
 8008aea:	4b0a      	ldr	r3, [pc, #40]	@ (8008b14 <prvAddCurrentTaskToDelayedList+0x94>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	3304      	adds	r3, #4
 8008af0:	4619      	mov	r1, r3
 8008af2:	4610      	mov	r0, r2
 8008af4:	f7fe fb81 	bl	80071fa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008af8:	4b0a      	ldr	r3, [pc, #40]	@ (8008b24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	68ba      	ldr	r2, [r7, #8]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d202      	bcs.n	8008b08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008b02:	4a08      	ldr	r2, [pc, #32]	@ (8008b24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008b04:	68bb      	ldr	r3, [r7, #8]
 8008b06:	6013      	str	r3, [r2, #0]
}
 8008b08:	bf00      	nop
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}
 8008b10:	200014d0 	.word	0x200014d0
 8008b14:	20000ff8 	.word	0x20000ff8
 8008b18:	200014b8 	.word	0x200014b8
 8008b1c:	20001488 	.word	0x20001488
 8008b20:	20001484 	.word	0x20001484
 8008b24:	200014ec 	.word	0x200014ec

08008b28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b08a      	sub	sp, #40	@ 0x28
 8008b2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008b2e:	2300      	movs	r3, #0
 8008b30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008b32:	f000 fb13 	bl	800915c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008b36:	4b1d      	ldr	r3, [pc, #116]	@ (8008bac <xTimerCreateTimerTask+0x84>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d021      	beq.n	8008b82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008b3e:	2300      	movs	r3, #0
 8008b40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008b42:	2300      	movs	r3, #0
 8008b44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008b46:	1d3a      	adds	r2, r7, #4
 8008b48:	f107 0108 	add.w	r1, r7, #8
 8008b4c:	f107 030c 	add.w	r3, r7, #12
 8008b50:	4618      	mov	r0, r3
 8008b52:	f7fe fae7 	bl	8007124 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008b56:	6879      	ldr	r1, [r7, #4]
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	68fa      	ldr	r2, [r7, #12]
 8008b5c:	9202      	str	r2, [sp, #8]
 8008b5e:	9301      	str	r3, [sp, #4]
 8008b60:	2302      	movs	r3, #2
 8008b62:	9300      	str	r3, [sp, #0]
 8008b64:	2300      	movs	r3, #0
 8008b66:	460a      	mov	r2, r1
 8008b68:	4911      	ldr	r1, [pc, #68]	@ (8008bb0 <xTimerCreateTimerTask+0x88>)
 8008b6a:	4812      	ldr	r0, [pc, #72]	@ (8008bb4 <xTimerCreateTimerTask+0x8c>)
 8008b6c:	f7ff f8a2 	bl	8007cb4 <xTaskCreateStatic>
 8008b70:	4603      	mov	r3, r0
 8008b72:	4a11      	ldr	r2, [pc, #68]	@ (8008bb8 <xTimerCreateTimerTask+0x90>)
 8008b74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008b76:	4b10      	ldr	r3, [pc, #64]	@ (8008bb8 <xTimerCreateTimerTask+0x90>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d001      	beq.n	8008b82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d10b      	bne.n	8008ba0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008b88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b8c:	f383 8811 	msr	BASEPRI, r3
 8008b90:	f3bf 8f6f 	isb	sy
 8008b94:	f3bf 8f4f 	dsb	sy
 8008b98:	613b      	str	r3, [r7, #16]
}
 8008b9a:	bf00      	nop
 8008b9c:	bf00      	nop
 8008b9e:	e7fd      	b.n	8008b9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008ba0:	697b      	ldr	r3, [r7, #20]
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3718      	adds	r7, #24
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bd80      	pop	{r7, pc}
 8008baa:	bf00      	nop
 8008bac:	20001528 	.word	0x20001528
 8008bb0:	0800a4a0 	.word	0x0800a4a0
 8008bb4:	08008cf5 	.word	0x08008cf5
 8008bb8:	2000152c 	.word	0x2000152c

08008bbc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b08a      	sub	sp, #40	@ 0x28
 8008bc0:	af00      	add	r7, sp, #0
 8008bc2:	60f8      	str	r0, [r7, #12]
 8008bc4:	60b9      	str	r1, [r7, #8]
 8008bc6:	607a      	str	r2, [r7, #4]
 8008bc8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d10b      	bne.n	8008bec <xTimerGenericCommand+0x30>
	__asm volatile
 8008bd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bd8:	f383 8811 	msr	BASEPRI, r3
 8008bdc:	f3bf 8f6f 	isb	sy
 8008be0:	f3bf 8f4f 	dsb	sy
 8008be4:	623b      	str	r3, [r7, #32]
}
 8008be6:	bf00      	nop
 8008be8:	bf00      	nop
 8008bea:	e7fd      	b.n	8008be8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008bec:	4b19      	ldr	r3, [pc, #100]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d02a      	beq.n	8008c4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	2b05      	cmp	r3, #5
 8008c04:	dc18      	bgt.n	8008c38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008c06:	f7ff fead 	bl	8008964 <xTaskGetSchedulerState>
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	2b02      	cmp	r3, #2
 8008c0e:	d109      	bne.n	8008c24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008c10:	4b10      	ldr	r3, [pc, #64]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008c12:	6818      	ldr	r0, [r3, #0]
 8008c14:	f107 0110 	add.w	r1, r7, #16
 8008c18:	2300      	movs	r3, #0
 8008c1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008c1c:	f7fe fc5a 	bl	80074d4 <xQueueGenericSend>
 8008c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c22:	e012      	b.n	8008c4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008c24:	4b0b      	ldr	r3, [pc, #44]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008c26:	6818      	ldr	r0, [r3, #0]
 8008c28:	f107 0110 	add.w	r1, r7, #16
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f7fe fc50 	bl	80074d4 <xQueueGenericSend>
 8008c34:	6278      	str	r0, [r7, #36]	@ 0x24
 8008c36:	e008      	b.n	8008c4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008c38:	4b06      	ldr	r3, [pc, #24]	@ (8008c54 <xTimerGenericCommand+0x98>)
 8008c3a:	6818      	ldr	r0, [r3, #0]
 8008c3c:	f107 0110 	add.w	r1, r7, #16
 8008c40:	2300      	movs	r3, #0
 8008c42:	683a      	ldr	r2, [r7, #0]
 8008c44:	f7fe fd48 	bl	80076d8 <xQueueGenericSendFromISR>
 8008c48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	3728      	adds	r7, #40	@ 0x28
 8008c50:	46bd      	mov	sp, r7
 8008c52:	bd80      	pop	{r7, pc}
 8008c54:	20001528 	.word	0x20001528

08008c58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af02      	add	r7, sp, #8
 8008c5e:	6078      	str	r0, [r7, #4]
 8008c60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c62:	4b23      	ldr	r3, [pc, #140]	@ (8008cf0 <prvProcessExpiredTimer+0x98>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	68db      	ldr	r3, [r3, #12]
 8008c68:	68db      	ldr	r3, [r3, #12]
 8008c6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c6c:	697b      	ldr	r3, [r7, #20]
 8008c6e:	3304      	adds	r3, #4
 8008c70:	4618      	mov	r0, r3
 8008c72:	f7fe fafb 	bl	800726c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c76:	697b      	ldr	r3, [r7, #20]
 8008c78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008c7c:	f003 0304 	and.w	r3, r3, #4
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d023      	beq.n	8008ccc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008c84:	697b      	ldr	r3, [r7, #20]
 8008c86:	699a      	ldr	r2, [r3, #24]
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	18d1      	adds	r1, r2, r3
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	683a      	ldr	r2, [r7, #0]
 8008c90:	6978      	ldr	r0, [r7, #20]
 8008c92:	f000 f8d5 	bl	8008e40 <prvInsertTimerInActiveList>
 8008c96:	4603      	mov	r3, r0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d020      	beq.n	8008cde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	687a      	ldr	r2, [r7, #4]
 8008ca4:	2100      	movs	r1, #0
 8008ca6:	6978      	ldr	r0, [r7, #20]
 8008ca8:	f7ff ff88 	bl	8008bbc <xTimerGenericCommand>
 8008cac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d114      	bne.n	8008cde <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb8:	f383 8811 	msr	BASEPRI, r3
 8008cbc:	f3bf 8f6f 	isb	sy
 8008cc0:	f3bf 8f4f 	dsb	sy
 8008cc4:	60fb      	str	r3, [r7, #12]
}
 8008cc6:	bf00      	nop
 8008cc8:	bf00      	nop
 8008cca:	e7fd      	b.n	8008cc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ccc:	697b      	ldr	r3, [r7, #20]
 8008cce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008cd2:	f023 0301 	bic.w	r3, r3, #1
 8008cd6:	b2da      	uxtb	r2, r3
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	6978      	ldr	r0, [r7, #20]
 8008ce4:	4798      	blx	r3
}
 8008ce6:	bf00      	nop
 8008ce8:	3718      	adds	r7, #24
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	20001520 	.word	0x20001520

08008cf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008cfc:	f107 0308 	add.w	r3, r7, #8
 8008d00:	4618      	mov	r0, r3
 8008d02:	f000 f859 	bl	8008db8 <prvGetNextExpireTime>
 8008d06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	68f8      	ldr	r0, [r7, #12]
 8008d0e:	f000 f805 	bl	8008d1c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008d12:	f000 f8d7 	bl	8008ec4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008d16:	bf00      	nop
 8008d18:	e7f0      	b.n	8008cfc <prvTimerTask+0x8>
	...

08008d1c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b084      	sub	sp, #16
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
 8008d24:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008d26:	f7ff fa29 	bl	800817c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008d2a:	f107 0308 	add.w	r3, r7, #8
 8008d2e:	4618      	mov	r0, r3
 8008d30:	f000 f866 	bl	8008e00 <prvSampleTimeNow>
 8008d34:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d130      	bne.n	8008d9e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d10a      	bne.n	8008d58 <prvProcessTimerOrBlockTask+0x3c>
 8008d42:	687a      	ldr	r2, [r7, #4]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	429a      	cmp	r2, r3
 8008d48:	d806      	bhi.n	8008d58 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008d4a:	f7ff fa25 	bl	8008198 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008d4e:	68f9      	ldr	r1, [r7, #12]
 8008d50:	6878      	ldr	r0, [r7, #4]
 8008d52:	f7ff ff81 	bl	8008c58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008d56:	e024      	b.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d008      	beq.n	8008d70 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008d5e:	4b13      	ldr	r3, [pc, #76]	@ (8008dac <prvProcessTimerOrBlockTask+0x90>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <prvProcessTimerOrBlockTask+0x50>
 8008d68:	2301      	movs	r3, #1
 8008d6a:	e000      	b.n	8008d6e <prvProcessTimerOrBlockTask+0x52>
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008d70:	4b0f      	ldr	r3, [pc, #60]	@ (8008db0 <prvProcessTimerOrBlockTask+0x94>)
 8008d72:	6818      	ldr	r0, [r3, #0]
 8008d74:	687a      	ldr	r2, [r7, #4]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	1ad3      	subs	r3, r2, r3
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	4619      	mov	r1, r3
 8008d7e:	f7fe ff65 	bl	8007c4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008d82:	f7ff fa09 	bl	8008198 <xTaskResumeAll>
 8008d86:	4603      	mov	r3, r0
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10a      	bne.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008d8c:	4b09      	ldr	r3, [pc, #36]	@ (8008db4 <prvProcessTimerOrBlockTask+0x98>)
 8008d8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008d92:	601a      	str	r2, [r3, #0]
 8008d94:	f3bf 8f4f 	dsb	sy
 8008d98:	f3bf 8f6f 	isb	sy
}
 8008d9c:	e001      	b.n	8008da2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008d9e:	f7ff f9fb 	bl	8008198 <xTaskResumeAll>
}
 8008da2:	bf00      	nop
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	20001524 	.word	0x20001524
 8008db0:	20001528 	.word	0x20001528
 8008db4:	e000ed04 	.word	0xe000ed04

08008db8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8008dfc <prvGetNextExpireTime+0x44>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d101      	bne.n	8008dce <prvGetNextExpireTime+0x16>
 8008dca:	2201      	movs	r2, #1
 8008dcc:	e000      	b.n	8008dd0 <prvGetNextExpireTime+0x18>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d105      	bne.n	8008de8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ddc:	4b07      	ldr	r3, [pc, #28]	@ (8008dfc <prvGetNextExpireTime+0x44>)
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	60fb      	str	r3, [r7, #12]
 8008de6:	e001      	b.n	8008dec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008de8:	2300      	movs	r3, #0
 8008dea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008dec:	68fb      	ldr	r3, [r7, #12]
}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3714      	adds	r7, #20
 8008df2:	46bd      	mov	sp, r7
 8008df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df8:	4770      	bx	lr
 8008dfa:	bf00      	nop
 8008dfc:	20001520 	.word	0x20001520

08008e00 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008e08:	f7ff fa64 	bl	80082d4 <xTaskGetTickCount>
 8008e0c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008e0e:	4b0b      	ldr	r3, [pc, #44]	@ (8008e3c <prvSampleTimeNow+0x3c>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	68fa      	ldr	r2, [r7, #12]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d205      	bcs.n	8008e24 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008e18:	f000 f93a 	bl	8009090 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	601a      	str	r2, [r3, #0]
 8008e22:	e002      	b.n	8008e2a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2200      	movs	r2, #0
 8008e28:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008e2a:	4a04      	ldr	r2, [pc, #16]	@ (8008e3c <prvSampleTimeNow+0x3c>)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008e30:	68fb      	ldr	r3, [r7, #12]
}
 8008e32:	4618      	mov	r0, r3
 8008e34:	3710      	adds	r7, #16
 8008e36:	46bd      	mov	sp, r7
 8008e38:	bd80      	pop	{r7, pc}
 8008e3a:	bf00      	nop
 8008e3c:	20001530 	.word	0x20001530

08008e40 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	68ba      	ldr	r2, [r7, #8]
 8008e56:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	68fa      	ldr	r2, [r7, #12]
 8008e5c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008e5e:	68ba      	ldr	r2, [r7, #8]
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d812      	bhi.n	8008e8c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e66:	687a      	ldr	r2, [r7, #4]
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	1ad2      	subs	r2, r2, r3
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	699b      	ldr	r3, [r3, #24]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d302      	bcc.n	8008e7a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008e74:	2301      	movs	r3, #1
 8008e76:	617b      	str	r3, [r7, #20]
 8008e78:	e01b      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008e7a:	4b10      	ldr	r3, [pc, #64]	@ (8008ebc <prvInsertTimerInActiveList+0x7c>)
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3304      	adds	r3, #4
 8008e82:	4619      	mov	r1, r3
 8008e84:	4610      	mov	r0, r2
 8008e86:	f7fe f9b8 	bl	80071fa <vListInsert>
 8008e8a:	e012      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008e8c:	687a      	ldr	r2, [r7, #4]
 8008e8e:	683b      	ldr	r3, [r7, #0]
 8008e90:	429a      	cmp	r2, r3
 8008e92:	d206      	bcs.n	8008ea2 <prvInsertTimerInActiveList+0x62>
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	429a      	cmp	r2, r3
 8008e9a:	d302      	bcc.n	8008ea2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008e9c:	2301      	movs	r3, #1
 8008e9e:	617b      	str	r3, [r7, #20]
 8008ea0:	e007      	b.n	8008eb2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008ea2:	4b07      	ldr	r3, [pc, #28]	@ (8008ec0 <prvInsertTimerInActiveList+0x80>)
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	3304      	adds	r3, #4
 8008eaa:	4619      	mov	r1, r3
 8008eac:	4610      	mov	r0, r2
 8008eae:	f7fe f9a4 	bl	80071fa <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008eb2:	697b      	ldr	r3, [r7, #20]
}
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	3718      	adds	r7, #24
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	20001524 	.word	0x20001524
 8008ec0:	20001520 	.word	0x20001520

08008ec4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b08e      	sub	sp, #56	@ 0x38
 8008ec8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008eca:	e0ce      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	da19      	bge.n	8008f06 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008ed2:	1d3b      	adds	r3, r7, #4
 8008ed4:	3304      	adds	r3, #4
 8008ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008ed8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d10b      	bne.n	8008ef6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	61fb      	str	r3, [r7, #28]
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	e7fd      	b.n	8008ef2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ef6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008efc:	6850      	ldr	r0, [r2, #4]
 8008efe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f00:	6892      	ldr	r2, [r2, #8]
 8008f02:	4611      	mov	r1, r2
 8008f04:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	f2c0 80ae 	blt.w	800906a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008f12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f14:	695b      	ldr	r3, [r3, #20]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d004      	beq.n	8008f24 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f1c:	3304      	adds	r3, #4
 8008f1e:	4618      	mov	r0, r3
 8008f20:	f7fe f9a4 	bl	800726c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f24:	463b      	mov	r3, r7
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7ff ff6a 	bl	8008e00 <prvSampleTimeNow>
 8008f2c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b09      	cmp	r3, #9
 8008f32:	f200 8097 	bhi.w	8009064 <prvProcessReceivedCommands+0x1a0>
 8008f36:	a201      	add	r2, pc, #4	@ (adr r2, 8008f3c <prvProcessReceivedCommands+0x78>)
 8008f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f3c:	08008f65 	.word	0x08008f65
 8008f40:	08008f65 	.word	0x08008f65
 8008f44:	08008f65 	.word	0x08008f65
 8008f48:	08008fdb 	.word	0x08008fdb
 8008f4c:	08008fef 	.word	0x08008fef
 8008f50:	0800903b 	.word	0x0800903b
 8008f54:	08008f65 	.word	0x08008f65
 8008f58:	08008f65 	.word	0x08008f65
 8008f5c:	08008fdb 	.word	0x08008fdb
 8008f60:	08008fef 	.word	0x08008fef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f66:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f6a:	f043 0301 	orr.w	r3, r3, #1
 8008f6e:	b2da      	uxtb	r2, r3
 8008f70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f72:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f7a:	699b      	ldr	r3, [r3, #24]
 8008f7c:	18d1      	adds	r1, r2, r3
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008f82:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f84:	f7ff ff5c 	bl	8008e40 <prvInsertTimerInActiveList>
 8008f88:	4603      	mov	r3, r0
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d06c      	beq.n	8009068 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f90:	6a1b      	ldr	r3, [r3, #32]
 8008f92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008f94:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f9c:	f003 0304 	and.w	r3, r3, #4
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d061      	beq.n	8009068 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008fa4:	68ba      	ldr	r2, [r7, #8]
 8008fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fa8:	699b      	ldr	r3, [r3, #24]
 8008faa:	441a      	add	r2, r3
 8008fac:	2300      	movs	r3, #0
 8008fae:	9300      	str	r3, [sp, #0]
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008fb6:	f7ff fe01 	bl	8008bbc <xTimerGenericCommand>
 8008fba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008fbc:	6a3b      	ldr	r3, [r7, #32]
 8008fbe:	2b00      	cmp	r3, #0
 8008fc0:	d152      	bne.n	8009068 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8008fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	61bb      	str	r3, [r7, #24]
}
 8008fd4:	bf00      	nop
 8008fd6:	bf00      	nop
 8008fd8:	e7fd      	b.n	8008fd6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008fe0:	f023 0301 	bic.w	r3, r3, #1
 8008fe4:	b2da      	uxtb	r2, r3
 8008fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008fe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008fec:	e03d      	b.n	800906a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ff0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ff4:	f043 0301 	orr.w	r3, r3, #1
 8008ff8:	b2da      	uxtb	r2, r3
 8008ffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ffc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009000:	68ba      	ldr	r2, [r7, #8]
 8009002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009004:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10b      	bne.n	8009026 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800900e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009012:	f383 8811 	msr	BASEPRI, r3
 8009016:	f3bf 8f6f 	isb	sy
 800901a:	f3bf 8f4f 	dsb	sy
 800901e:	617b      	str	r3, [r7, #20]
}
 8009020:	bf00      	nop
 8009022:	bf00      	nop
 8009024:	e7fd      	b.n	8009022 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009028:	699a      	ldr	r2, [r3, #24]
 800902a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800902c:	18d1      	adds	r1, r2, r3
 800902e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009030:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009032:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009034:	f7ff ff04 	bl	8008e40 <prvInsertTimerInActiveList>
					break;
 8009038:	e017      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800903a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800903c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009040:	f003 0302 	and.w	r3, r3, #2
 8009044:	2b00      	cmp	r3, #0
 8009046:	d103      	bne.n	8009050 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009048:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800904a:	f000 fbe5 	bl	8009818 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800904e:	e00c      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009056:	f023 0301 	bic.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009062:	e002      	b.n	800906a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009064:	bf00      	nop
 8009066:	e000      	b.n	800906a <prvProcessReceivedCommands+0x1a6>
					break;
 8009068:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800906a:	4b08      	ldr	r3, [pc, #32]	@ (800908c <prvProcessReceivedCommands+0x1c8>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	1d39      	adds	r1, r7, #4
 8009070:	2200      	movs	r2, #0
 8009072:	4618      	mov	r0, r3
 8009074:	f7fe fbce 	bl	8007814 <xQueueReceive>
 8009078:	4603      	mov	r3, r0
 800907a:	2b00      	cmp	r3, #0
 800907c:	f47f af26 	bne.w	8008ecc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009080:	bf00      	nop
 8009082:	bf00      	nop
 8009084:	3730      	adds	r7, #48	@ 0x30
 8009086:	46bd      	mov	sp, r7
 8009088:	bd80      	pop	{r7, pc}
 800908a:	bf00      	nop
 800908c:	20001528 	.word	0x20001528

08009090 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b088      	sub	sp, #32
 8009094:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009096:	e049      	b.n	800912c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009098:	4b2e      	ldr	r3, [pc, #184]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 800909a:	681b      	ldr	r3, [r3, #0]
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090a2:	4b2c      	ldr	r3, [pc, #176]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	68db      	ldr	r3, [r3, #12]
 80090aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	3304      	adds	r3, #4
 80090b0:	4618      	mov	r0, r3
 80090b2:	f7fe f8db 	bl	800726c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	6a1b      	ldr	r3, [r3, #32]
 80090ba:	68f8      	ldr	r0, [r7, #12]
 80090bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d02f      	beq.n	800912c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	699b      	ldr	r3, [r3, #24]
 80090d0:	693a      	ldr	r2, [r7, #16]
 80090d2:	4413      	add	r3, r2
 80090d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80090d6:	68ba      	ldr	r2, [r7, #8]
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	429a      	cmp	r2, r3
 80090dc:	d90e      	bls.n	80090fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	68fa      	ldr	r2, [r7, #12]
 80090e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7fe f880 	bl	80071fa <vListInsert>
 80090fa:	e017      	b.n	800912c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80090fc:	2300      	movs	r3, #0
 80090fe:	9300      	str	r3, [sp, #0]
 8009100:	2300      	movs	r3, #0
 8009102:	693a      	ldr	r2, [r7, #16]
 8009104:	2100      	movs	r1, #0
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f7ff fd58 	bl	8008bbc <xTimerGenericCommand>
 800910c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d10b      	bne.n	800912c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009114:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009118:	f383 8811 	msr	BASEPRI, r3
 800911c:	f3bf 8f6f 	isb	sy
 8009120:	f3bf 8f4f 	dsb	sy
 8009124:	603b      	str	r3, [r7, #0]
}
 8009126:	bf00      	nop
 8009128:	bf00      	nop
 800912a:	e7fd      	b.n	8009128 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800912c:	4b09      	ldr	r3, [pc, #36]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d1b0      	bne.n	8009098 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009136:	4b07      	ldr	r3, [pc, #28]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800913c:	4b06      	ldr	r3, [pc, #24]	@ (8009158 <prvSwitchTimerLists+0xc8>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	4a04      	ldr	r2, [pc, #16]	@ (8009154 <prvSwitchTimerLists+0xc4>)
 8009142:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009144:	4a04      	ldr	r2, [pc, #16]	@ (8009158 <prvSwitchTimerLists+0xc8>)
 8009146:	697b      	ldr	r3, [r7, #20]
 8009148:	6013      	str	r3, [r2, #0]
}
 800914a:	bf00      	nop
 800914c:	3718      	adds	r7, #24
 800914e:	46bd      	mov	sp, r7
 8009150:	bd80      	pop	{r7, pc}
 8009152:	bf00      	nop
 8009154:	20001520 	.word	0x20001520
 8009158:	20001524 	.word	0x20001524

0800915c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b082      	sub	sp, #8
 8009160:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009162:	f000 f969 	bl	8009438 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009166:	4b15      	ldr	r3, [pc, #84]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d120      	bne.n	80091b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800916e:	4814      	ldr	r0, [pc, #80]	@ (80091c0 <prvCheckForValidListAndQueue+0x64>)
 8009170:	f7fd fff2 	bl	8007158 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009174:	4813      	ldr	r0, [pc, #76]	@ (80091c4 <prvCheckForValidListAndQueue+0x68>)
 8009176:	f7fd ffef 	bl	8007158 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800917a:	4b13      	ldr	r3, [pc, #76]	@ (80091c8 <prvCheckForValidListAndQueue+0x6c>)
 800917c:	4a10      	ldr	r2, [pc, #64]	@ (80091c0 <prvCheckForValidListAndQueue+0x64>)
 800917e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009180:	4b12      	ldr	r3, [pc, #72]	@ (80091cc <prvCheckForValidListAndQueue+0x70>)
 8009182:	4a10      	ldr	r2, [pc, #64]	@ (80091c4 <prvCheckForValidListAndQueue+0x68>)
 8009184:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009186:	2300      	movs	r3, #0
 8009188:	9300      	str	r3, [sp, #0]
 800918a:	4b11      	ldr	r3, [pc, #68]	@ (80091d0 <prvCheckForValidListAndQueue+0x74>)
 800918c:	4a11      	ldr	r2, [pc, #68]	@ (80091d4 <prvCheckForValidListAndQueue+0x78>)
 800918e:	2110      	movs	r1, #16
 8009190:	200a      	movs	r0, #10
 8009192:	f7fe f8ff 	bl	8007394 <xQueueGenericCreateStatic>
 8009196:	4603      	mov	r3, r0
 8009198:	4a08      	ldr	r2, [pc, #32]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 800919a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800919c:	4b07      	ldr	r3, [pc, #28]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d005      	beq.n	80091b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80091a4:	4b05      	ldr	r3, [pc, #20]	@ (80091bc <prvCheckForValidListAndQueue+0x60>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	490b      	ldr	r1, [pc, #44]	@ (80091d8 <prvCheckForValidListAndQueue+0x7c>)
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7fe fd24 	bl	8007bf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091b0:	f000 f974 	bl	800949c <vPortExitCritical>
}
 80091b4:	bf00      	nop
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
 80091ba:	bf00      	nop
 80091bc:	20001528 	.word	0x20001528
 80091c0:	200014f8 	.word	0x200014f8
 80091c4:	2000150c 	.word	0x2000150c
 80091c8:	20001520 	.word	0x20001520
 80091cc:	20001524 	.word	0x20001524
 80091d0:	200015d4 	.word	0x200015d4
 80091d4:	20001534 	.word	0x20001534
 80091d8:	0800a4a8 	.word	0x0800a4a8

080091dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	3b04      	subs	r3, #4
 80091ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80091f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	3b04      	subs	r3, #4
 80091fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	f023 0201 	bic.w	r2, r3, #1
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	3b04      	subs	r3, #4
 800920a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800920c:	4a0c      	ldr	r2, [pc, #48]	@ (8009240 <pxPortInitialiseStack+0x64>)
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	3b14      	subs	r3, #20
 8009216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009218:	687a      	ldr	r2, [r7, #4]
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	3b04      	subs	r3, #4
 8009222:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f06f 0202 	mvn.w	r2, #2
 800922a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	3b20      	subs	r3, #32
 8009230:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009232:	68fb      	ldr	r3, [r7, #12]
}
 8009234:	4618      	mov	r0, r3
 8009236:	3714      	adds	r7, #20
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	08009245 	.word	0x08009245

08009244 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009244:	b480      	push	{r7}
 8009246:	b085      	sub	sp, #20
 8009248:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800924a:	2300      	movs	r3, #0
 800924c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800924e:	4b13      	ldr	r3, [pc, #76]	@ (800929c <prvTaskExitError+0x58>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009256:	d00b      	beq.n	8009270 <prvTaskExitError+0x2c>
	__asm volatile
 8009258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800925c:	f383 8811 	msr	BASEPRI, r3
 8009260:	f3bf 8f6f 	isb	sy
 8009264:	f3bf 8f4f 	dsb	sy
 8009268:	60fb      	str	r3, [r7, #12]
}
 800926a:	bf00      	nop
 800926c:	bf00      	nop
 800926e:	e7fd      	b.n	800926c <prvTaskExitError+0x28>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	60bb      	str	r3, [r7, #8]
}
 8009282:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009284:	bf00      	nop
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d0fc      	beq.n	8009286 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800928c:	bf00      	nop
 800928e:	bf00      	nop
 8009290:	3714      	adds	r7, #20
 8009292:	46bd      	mov	sp, r7
 8009294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009298:	4770      	bx	lr
 800929a:	bf00      	nop
 800929c:	2000000c 	.word	0x2000000c

080092a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80092a0:	4b07      	ldr	r3, [pc, #28]	@ (80092c0 <pxCurrentTCBConst2>)
 80092a2:	6819      	ldr	r1, [r3, #0]
 80092a4:	6808      	ldr	r0, [r1, #0]
 80092a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092aa:	f380 8809 	msr	PSP, r0
 80092ae:	f3bf 8f6f 	isb	sy
 80092b2:	f04f 0000 	mov.w	r0, #0
 80092b6:	f380 8811 	msr	BASEPRI, r0
 80092ba:	4770      	bx	lr
 80092bc:	f3af 8000 	nop.w

080092c0 <pxCurrentTCBConst2>:
 80092c0:	20000ff8 	.word	0x20000ff8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop

080092c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80092c8:	4808      	ldr	r0, [pc, #32]	@ (80092ec <prvPortStartFirstTask+0x24>)
 80092ca:	6800      	ldr	r0, [r0, #0]
 80092cc:	6800      	ldr	r0, [r0, #0]
 80092ce:	f380 8808 	msr	MSP, r0
 80092d2:	f04f 0000 	mov.w	r0, #0
 80092d6:	f380 8814 	msr	CONTROL, r0
 80092da:	b662      	cpsie	i
 80092dc:	b661      	cpsie	f
 80092de:	f3bf 8f4f 	dsb	sy
 80092e2:	f3bf 8f6f 	isb	sy
 80092e6:	df00      	svc	0
 80092e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80092ea:	bf00      	nop
 80092ec:	e000ed08 	.word	0xe000ed08

080092f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b086      	sub	sp, #24
 80092f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80092f6:	4b47      	ldr	r3, [pc, #284]	@ (8009414 <xPortStartScheduler+0x124>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	4a47      	ldr	r2, [pc, #284]	@ (8009418 <xPortStartScheduler+0x128>)
 80092fc:	4293      	cmp	r3, r2
 80092fe:	d10b      	bne.n	8009318 <xPortStartScheduler+0x28>
	__asm volatile
 8009300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009304:	f383 8811 	msr	BASEPRI, r3
 8009308:	f3bf 8f6f 	isb	sy
 800930c:	f3bf 8f4f 	dsb	sy
 8009310:	613b      	str	r3, [r7, #16]
}
 8009312:	bf00      	nop
 8009314:	bf00      	nop
 8009316:	e7fd      	b.n	8009314 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009318:	4b3e      	ldr	r3, [pc, #248]	@ (8009414 <xPortStartScheduler+0x124>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	4a3f      	ldr	r2, [pc, #252]	@ (800941c <xPortStartScheduler+0x12c>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d10b      	bne.n	800933a <xPortStartScheduler+0x4a>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	60fb      	str	r3, [r7, #12]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800933a:	4b39      	ldr	r3, [pc, #228]	@ (8009420 <xPortStartScheduler+0x130>)
 800933c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	781b      	ldrb	r3, [r3, #0]
 8009342:	b2db      	uxtb	r3, r3
 8009344:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009346:	697b      	ldr	r3, [r7, #20]
 8009348:	22ff      	movs	r2, #255	@ 0xff
 800934a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800934c:	697b      	ldr	r3, [r7, #20]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	b2db      	uxtb	r3, r3
 8009352:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009354:	78fb      	ldrb	r3, [r7, #3]
 8009356:	b2db      	uxtb	r3, r3
 8009358:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800935c:	b2da      	uxtb	r2, r3
 800935e:	4b31      	ldr	r3, [pc, #196]	@ (8009424 <xPortStartScheduler+0x134>)
 8009360:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009362:	4b31      	ldr	r3, [pc, #196]	@ (8009428 <xPortStartScheduler+0x138>)
 8009364:	2207      	movs	r2, #7
 8009366:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009368:	e009      	b.n	800937e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800936a:	4b2f      	ldr	r3, [pc, #188]	@ (8009428 <xPortStartScheduler+0x138>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	3b01      	subs	r3, #1
 8009370:	4a2d      	ldr	r2, [pc, #180]	@ (8009428 <xPortStartScheduler+0x138>)
 8009372:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009374:	78fb      	ldrb	r3, [r7, #3]
 8009376:	b2db      	uxtb	r3, r3
 8009378:	005b      	lsls	r3, r3, #1
 800937a:	b2db      	uxtb	r3, r3
 800937c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800937e:	78fb      	ldrb	r3, [r7, #3]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009386:	2b80      	cmp	r3, #128	@ 0x80
 8009388:	d0ef      	beq.n	800936a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800938a:	4b27      	ldr	r3, [pc, #156]	@ (8009428 <xPortStartScheduler+0x138>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	f1c3 0307 	rsb	r3, r3, #7
 8009392:	2b04      	cmp	r3, #4
 8009394:	d00b      	beq.n	80093ae <xPortStartScheduler+0xbe>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60bb      	str	r3, [r7, #8]
}
 80093a8:	bf00      	nop
 80093aa:	bf00      	nop
 80093ac:	e7fd      	b.n	80093aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80093ae:	4b1e      	ldr	r3, [pc, #120]	@ (8009428 <xPortStartScheduler+0x138>)
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	021b      	lsls	r3, r3, #8
 80093b4:	4a1c      	ldr	r2, [pc, #112]	@ (8009428 <xPortStartScheduler+0x138>)
 80093b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80093b8:	4b1b      	ldr	r3, [pc, #108]	@ (8009428 <xPortStartScheduler+0x138>)
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80093c0:	4a19      	ldr	r2, [pc, #100]	@ (8009428 <xPortStartScheduler+0x138>)
 80093c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	b2da      	uxtb	r2, r3
 80093c8:	697b      	ldr	r3, [r7, #20]
 80093ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80093cc:	4b17      	ldr	r3, [pc, #92]	@ (800942c <xPortStartScheduler+0x13c>)
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	4a16      	ldr	r2, [pc, #88]	@ (800942c <xPortStartScheduler+0x13c>)
 80093d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80093d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80093d8:	4b14      	ldr	r3, [pc, #80]	@ (800942c <xPortStartScheduler+0x13c>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a13      	ldr	r2, [pc, #76]	@ (800942c <xPortStartScheduler+0x13c>)
 80093de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80093e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80093e4:	f000 f8da 	bl	800959c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80093e8:	4b11      	ldr	r3, [pc, #68]	@ (8009430 <xPortStartScheduler+0x140>)
 80093ea:	2200      	movs	r2, #0
 80093ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80093ee:	f000 f8f9 	bl	80095e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80093f2:	4b10      	ldr	r3, [pc, #64]	@ (8009434 <xPortStartScheduler+0x144>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4a0f      	ldr	r2, [pc, #60]	@ (8009434 <xPortStartScheduler+0x144>)
 80093f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80093fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80093fe:	f7ff ff63 	bl	80092c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009402:	f7ff f831 	bl	8008468 <vTaskSwitchContext>
	prvTaskExitError();
 8009406:	f7ff ff1d 	bl	8009244 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800940a:	2300      	movs	r3, #0
}
 800940c:	4618      	mov	r0, r3
 800940e:	3718      	adds	r7, #24
 8009410:	46bd      	mov	sp, r7
 8009412:	bd80      	pop	{r7, pc}
 8009414:	e000ed00 	.word	0xe000ed00
 8009418:	410fc271 	.word	0x410fc271
 800941c:	410fc270 	.word	0x410fc270
 8009420:	e000e400 	.word	0xe000e400
 8009424:	20001624 	.word	0x20001624
 8009428:	20001628 	.word	0x20001628
 800942c:	e000ed20 	.word	0xe000ed20
 8009430:	2000000c 	.word	0x2000000c
 8009434:	e000ef34 	.word	0xe000ef34

08009438 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009438:	b480      	push	{r7}
 800943a:	b083      	sub	sp, #12
 800943c:	af00      	add	r7, sp, #0
	__asm volatile
 800943e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009442:	f383 8811 	msr	BASEPRI, r3
 8009446:	f3bf 8f6f 	isb	sy
 800944a:	f3bf 8f4f 	dsb	sy
 800944e:	607b      	str	r3, [r7, #4]
}
 8009450:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009452:	4b10      	ldr	r3, [pc, #64]	@ (8009494 <vPortEnterCritical+0x5c>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	3301      	adds	r3, #1
 8009458:	4a0e      	ldr	r2, [pc, #56]	@ (8009494 <vPortEnterCritical+0x5c>)
 800945a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800945c:	4b0d      	ldr	r3, [pc, #52]	@ (8009494 <vPortEnterCritical+0x5c>)
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	2b01      	cmp	r3, #1
 8009462:	d110      	bne.n	8009486 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009464:	4b0c      	ldr	r3, [pc, #48]	@ (8009498 <vPortEnterCritical+0x60>)
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	b2db      	uxtb	r3, r3
 800946a:	2b00      	cmp	r3, #0
 800946c:	d00b      	beq.n	8009486 <vPortEnterCritical+0x4e>
	__asm volatile
 800946e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009472:	f383 8811 	msr	BASEPRI, r3
 8009476:	f3bf 8f6f 	isb	sy
 800947a:	f3bf 8f4f 	dsb	sy
 800947e:	603b      	str	r3, [r7, #0]
}
 8009480:	bf00      	nop
 8009482:	bf00      	nop
 8009484:	e7fd      	b.n	8009482 <vPortEnterCritical+0x4a>
	}
}
 8009486:	bf00      	nop
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	2000000c 	.word	0x2000000c
 8009498:	e000ed04 	.word	0xe000ed04

0800949c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800949c:	b480      	push	{r7}
 800949e:	b083      	sub	sp, #12
 80094a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80094a2:	4b12      	ldr	r3, [pc, #72]	@ (80094ec <vPortExitCritical+0x50>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d10b      	bne.n	80094c2 <vPortExitCritical+0x26>
	__asm volatile
 80094aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094ae:	f383 8811 	msr	BASEPRI, r3
 80094b2:	f3bf 8f6f 	isb	sy
 80094b6:	f3bf 8f4f 	dsb	sy
 80094ba:	607b      	str	r3, [r7, #4]
}
 80094bc:	bf00      	nop
 80094be:	bf00      	nop
 80094c0:	e7fd      	b.n	80094be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80094c2:	4b0a      	ldr	r3, [pc, #40]	@ (80094ec <vPortExitCritical+0x50>)
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	3b01      	subs	r3, #1
 80094c8:	4a08      	ldr	r2, [pc, #32]	@ (80094ec <vPortExitCritical+0x50>)
 80094ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80094cc:	4b07      	ldr	r3, [pc, #28]	@ (80094ec <vPortExitCritical+0x50>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d105      	bne.n	80094e0 <vPortExitCritical+0x44>
 80094d4:	2300      	movs	r3, #0
 80094d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	f383 8811 	msr	BASEPRI, r3
}
 80094de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80094e0:	bf00      	nop
 80094e2:	370c      	adds	r7, #12
 80094e4:	46bd      	mov	sp, r7
 80094e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ea:	4770      	bx	lr
 80094ec:	2000000c 	.word	0x2000000c

080094f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80094f0:	f3ef 8009 	mrs	r0, PSP
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	4b15      	ldr	r3, [pc, #84]	@ (8009550 <pxCurrentTCBConst>)
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	f01e 0f10 	tst.w	lr, #16
 8009500:	bf08      	it	eq
 8009502:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009506:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800950a:	6010      	str	r0, [r2, #0]
 800950c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009510:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009514:	f380 8811 	msr	BASEPRI, r0
 8009518:	f3bf 8f4f 	dsb	sy
 800951c:	f3bf 8f6f 	isb	sy
 8009520:	f7fe ffa2 	bl	8008468 <vTaskSwitchContext>
 8009524:	f04f 0000 	mov.w	r0, #0
 8009528:	f380 8811 	msr	BASEPRI, r0
 800952c:	bc09      	pop	{r0, r3}
 800952e:	6819      	ldr	r1, [r3, #0]
 8009530:	6808      	ldr	r0, [r1, #0]
 8009532:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009536:	f01e 0f10 	tst.w	lr, #16
 800953a:	bf08      	it	eq
 800953c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009540:	f380 8809 	msr	PSP, r0
 8009544:	f3bf 8f6f 	isb	sy
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	f3af 8000 	nop.w

08009550 <pxCurrentTCBConst>:
 8009550:	20000ff8 	.word	0x20000ff8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009554:	bf00      	nop
 8009556:	bf00      	nop

08009558 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b082      	sub	sp, #8
 800955c:	af00      	add	r7, sp, #0
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	607b      	str	r3, [r7, #4]
}
 8009570:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009572:	f7fe febf 	bl	80082f4 <xTaskIncrementTick>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d003      	beq.n	8009584 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800957c:	4b06      	ldr	r3, [pc, #24]	@ (8009598 <xPortSysTickHandler+0x40>)
 800957e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009582:	601a      	str	r2, [r3, #0]
 8009584:	2300      	movs	r3, #0
 8009586:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009588:	683b      	ldr	r3, [r7, #0]
 800958a:	f383 8811 	msr	BASEPRI, r3
}
 800958e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009590:	bf00      	nop
 8009592:	3708      	adds	r7, #8
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}
 8009598:	e000ed04 	.word	0xe000ed04

0800959c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800959c:	b480      	push	{r7}
 800959e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80095a0:	4b0b      	ldr	r3, [pc, #44]	@ (80095d0 <vPortSetupTimerInterrupt+0x34>)
 80095a2:	2200      	movs	r2, #0
 80095a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80095a6:	4b0b      	ldr	r3, [pc, #44]	@ (80095d4 <vPortSetupTimerInterrupt+0x38>)
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80095ac:	4b0a      	ldr	r3, [pc, #40]	@ (80095d8 <vPortSetupTimerInterrupt+0x3c>)
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	4a0a      	ldr	r2, [pc, #40]	@ (80095dc <vPortSetupTimerInterrupt+0x40>)
 80095b2:	fba2 2303 	umull	r2, r3, r2, r3
 80095b6:	099b      	lsrs	r3, r3, #6
 80095b8:	4a09      	ldr	r2, [pc, #36]	@ (80095e0 <vPortSetupTimerInterrupt+0x44>)
 80095ba:	3b01      	subs	r3, #1
 80095bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80095be:	4b04      	ldr	r3, [pc, #16]	@ (80095d0 <vPortSetupTimerInterrupt+0x34>)
 80095c0:	2207      	movs	r2, #7
 80095c2:	601a      	str	r2, [r3, #0]
}
 80095c4:	bf00      	nop
 80095c6:	46bd      	mov	sp, r7
 80095c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095cc:	4770      	bx	lr
 80095ce:	bf00      	nop
 80095d0:	e000e010 	.word	0xe000e010
 80095d4:	e000e018 	.word	0xe000e018
 80095d8:	20000000 	.word	0x20000000
 80095dc:	10624dd3 	.word	0x10624dd3
 80095e0:	e000e014 	.word	0xe000e014

080095e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80095e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80095f4 <vPortEnableVFP+0x10>
 80095e8:	6801      	ldr	r1, [r0, #0]
 80095ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80095ee:	6001      	str	r1, [r0, #0]
 80095f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80095f2:	bf00      	nop
 80095f4:	e000ed88 	.word	0xe000ed88

080095f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80095f8:	b480      	push	{r7}
 80095fa:	b085      	sub	sp, #20
 80095fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80095fe:	f3ef 8305 	mrs	r3, IPSR
 8009602:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2b0f      	cmp	r3, #15
 8009608:	d915      	bls.n	8009636 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800960a:	4a18      	ldr	r2, [pc, #96]	@ (800966c <vPortValidateInterruptPriority+0x74>)
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	4413      	add	r3, r2
 8009610:	781b      	ldrb	r3, [r3, #0]
 8009612:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009614:	4b16      	ldr	r3, [pc, #88]	@ (8009670 <vPortValidateInterruptPriority+0x78>)
 8009616:	781b      	ldrb	r3, [r3, #0]
 8009618:	7afa      	ldrb	r2, [r7, #11]
 800961a:	429a      	cmp	r2, r3
 800961c:	d20b      	bcs.n	8009636 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	607b      	str	r3, [r7, #4]
}
 8009630:	bf00      	nop
 8009632:	bf00      	nop
 8009634:	e7fd      	b.n	8009632 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009636:	4b0f      	ldr	r3, [pc, #60]	@ (8009674 <vPortValidateInterruptPriority+0x7c>)
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800963e:	4b0e      	ldr	r3, [pc, #56]	@ (8009678 <vPortValidateInterruptPriority+0x80>)
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	429a      	cmp	r2, r3
 8009644:	d90b      	bls.n	800965e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800964a:	f383 8811 	msr	BASEPRI, r3
 800964e:	f3bf 8f6f 	isb	sy
 8009652:	f3bf 8f4f 	dsb	sy
 8009656:	603b      	str	r3, [r7, #0]
}
 8009658:	bf00      	nop
 800965a:	bf00      	nop
 800965c:	e7fd      	b.n	800965a <vPortValidateInterruptPriority+0x62>
	}
 800965e:	bf00      	nop
 8009660:	3714      	adds	r7, #20
 8009662:	46bd      	mov	sp, r7
 8009664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009668:	4770      	bx	lr
 800966a:	bf00      	nop
 800966c:	e000e3f0 	.word	0xe000e3f0
 8009670:	20001624 	.word	0x20001624
 8009674:	e000ed0c 	.word	0xe000ed0c
 8009678:	20001628 	.word	0x20001628

0800967c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b08a      	sub	sp, #40	@ 0x28
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009684:	2300      	movs	r3, #0
 8009686:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009688:	f7fe fd78 	bl	800817c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800968c:	4b5c      	ldr	r3, [pc, #368]	@ (8009800 <pvPortMalloc+0x184>)
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d101      	bne.n	8009698 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009694:	f000 f924 	bl	80098e0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009698:	4b5a      	ldr	r3, [pc, #360]	@ (8009804 <pvPortMalloc+0x188>)
 800969a:	681a      	ldr	r2, [r3, #0]
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	4013      	ands	r3, r2
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	f040 8095 	bne.w	80097d0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d01e      	beq.n	80096ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80096ac:	2208      	movs	r2, #8
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	4413      	add	r3, r2
 80096b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	f003 0307 	and.w	r3, r3, #7
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d015      	beq.n	80096ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f023 0307 	bic.w	r3, r3, #7
 80096c4:	3308      	adds	r3, #8
 80096c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d00b      	beq.n	80096ea <pvPortMalloc+0x6e>
	__asm volatile
 80096d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d6:	f383 8811 	msr	BASEPRI, r3
 80096da:	f3bf 8f6f 	isb	sy
 80096de:	f3bf 8f4f 	dsb	sy
 80096e2:	617b      	str	r3, [r7, #20]
}
 80096e4:	bf00      	nop
 80096e6:	bf00      	nop
 80096e8:	e7fd      	b.n	80096e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d06f      	beq.n	80097d0 <pvPortMalloc+0x154>
 80096f0:	4b45      	ldr	r3, [pc, #276]	@ (8009808 <pvPortMalloc+0x18c>)
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d86a      	bhi.n	80097d0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80096fa:	4b44      	ldr	r3, [pc, #272]	@ (800980c <pvPortMalloc+0x190>)
 80096fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80096fe:	4b43      	ldr	r3, [pc, #268]	@ (800980c <pvPortMalloc+0x190>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009704:	e004      	b.n	8009710 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009708:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800970a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009712:	685b      	ldr	r3, [r3, #4]
 8009714:	687a      	ldr	r2, [r7, #4]
 8009716:	429a      	cmp	r2, r3
 8009718:	d903      	bls.n	8009722 <pvPortMalloc+0xa6>
 800971a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d1f1      	bne.n	8009706 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009722:	4b37      	ldr	r3, [pc, #220]	@ (8009800 <pvPortMalloc+0x184>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009728:	429a      	cmp	r2, r3
 800972a:	d051      	beq.n	80097d0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	2208      	movs	r2, #8
 8009732:	4413      	add	r3, r2
 8009734:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	6a3b      	ldr	r3, [r7, #32]
 800973c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800973e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009740:	685a      	ldr	r2, [r3, #4]
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	1ad2      	subs	r2, r2, r3
 8009746:	2308      	movs	r3, #8
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	429a      	cmp	r2, r3
 800974c:	d920      	bls.n	8009790 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800974e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	4413      	add	r3, r2
 8009754:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	f003 0307 	and.w	r3, r3, #7
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00b      	beq.n	8009778 <pvPortMalloc+0xfc>
	__asm volatile
 8009760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009764:	f383 8811 	msr	BASEPRI, r3
 8009768:	f3bf 8f6f 	isb	sy
 800976c:	f3bf 8f4f 	dsb	sy
 8009770:	613b      	str	r3, [r7, #16]
}
 8009772:	bf00      	nop
 8009774:	bf00      	nop
 8009776:	e7fd      	b.n	8009774 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009778:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	1ad2      	subs	r2, r2, r3
 8009780:	69bb      	ldr	r3, [r7, #24]
 8009782:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800978a:	69b8      	ldr	r0, [r7, #24]
 800978c:	f000 f90a 	bl	80099a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009790:	4b1d      	ldr	r3, [pc, #116]	@ (8009808 <pvPortMalloc+0x18c>)
 8009792:	681a      	ldr	r2, [r3, #0]
 8009794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009796:	685b      	ldr	r3, [r3, #4]
 8009798:	1ad3      	subs	r3, r2, r3
 800979a:	4a1b      	ldr	r2, [pc, #108]	@ (8009808 <pvPortMalloc+0x18c>)
 800979c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800979e:	4b1a      	ldr	r3, [pc, #104]	@ (8009808 <pvPortMalloc+0x18c>)
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	4b1b      	ldr	r3, [pc, #108]	@ (8009810 <pvPortMalloc+0x194>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	429a      	cmp	r2, r3
 80097a8:	d203      	bcs.n	80097b2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80097aa:	4b17      	ldr	r3, [pc, #92]	@ (8009808 <pvPortMalloc+0x18c>)
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a18      	ldr	r2, [pc, #96]	@ (8009810 <pvPortMalloc+0x194>)
 80097b0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80097b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097b4:	685a      	ldr	r2, [r3, #4]
 80097b6:	4b13      	ldr	r3, [pc, #76]	@ (8009804 <pvPortMalloc+0x188>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	431a      	orrs	r2, r3
 80097bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097be:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80097c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097c2:	2200      	movs	r2, #0
 80097c4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80097c6:	4b13      	ldr	r3, [pc, #76]	@ (8009814 <pvPortMalloc+0x198>)
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	3301      	adds	r3, #1
 80097cc:	4a11      	ldr	r2, [pc, #68]	@ (8009814 <pvPortMalloc+0x198>)
 80097ce:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80097d0:	f7fe fce2 	bl	8008198 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80097d4:	69fb      	ldr	r3, [r7, #28]
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00b      	beq.n	80097f6 <pvPortMalloc+0x17a>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	60fb      	str	r3, [r7, #12]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <pvPortMalloc+0x176>
	return pvReturn;
 80097f6:	69fb      	ldr	r3, [r7, #28]
}
 80097f8:	4618      	mov	r0, r3
 80097fa:	3728      	adds	r7, #40	@ 0x28
 80097fc:	46bd      	mov	sp, r7
 80097fe:	bd80      	pop	{r7, pc}
 8009800:	20005234 	.word	0x20005234
 8009804:	20005248 	.word	0x20005248
 8009808:	20005238 	.word	0x20005238
 800980c:	2000522c 	.word	0x2000522c
 8009810:	2000523c 	.word	0x2000523c
 8009814:	20005240 	.word	0x20005240

08009818 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b086      	sub	sp, #24
 800981c:	af00      	add	r7, sp, #0
 800981e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	d04f      	beq.n	80098ca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800982a:	2308      	movs	r3, #8
 800982c:	425b      	negs	r3, r3
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4413      	add	r3, r2
 8009832:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009834:	697b      	ldr	r3, [r7, #20]
 8009836:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	685a      	ldr	r2, [r3, #4]
 800983c:	4b25      	ldr	r3, [pc, #148]	@ (80098d4 <vPortFree+0xbc>)
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d10b      	bne.n	800985e <vPortFree+0x46>
	__asm volatile
 8009846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800984a:	f383 8811 	msr	BASEPRI, r3
 800984e:	f3bf 8f6f 	isb	sy
 8009852:	f3bf 8f4f 	dsb	sy
 8009856:	60fb      	str	r3, [r7, #12]
}
 8009858:	bf00      	nop
 800985a:	bf00      	nop
 800985c:	e7fd      	b.n	800985a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	2b00      	cmp	r3, #0
 8009864:	d00b      	beq.n	800987e <vPortFree+0x66>
	__asm volatile
 8009866:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800986a:	f383 8811 	msr	BASEPRI, r3
 800986e:	f3bf 8f6f 	isb	sy
 8009872:	f3bf 8f4f 	dsb	sy
 8009876:	60bb      	str	r3, [r7, #8]
}
 8009878:	bf00      	nop
 800987a:	bf00      	nop
 800987c:	e7fd      	b.n	800987a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	685a      	ldr	r2, [r3, #4]
 8009882:	4b14      	ldr	r3, [pc, #80]	@ (80098d4 <vPortFree+0xbc>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	4013      	ands	r3, r2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d01e      	beq.n	80098ca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	2b00      	cmp	r3, #0
 8009892:	d11a      	bne.n	80098ca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	685a      	ldr	r2, [r3, #4]
 8009898:	4b0e      	ldr	r3, [pc, #56]	@ (80098d4 <vPortFree+0xbc>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	43db      	mvns	r3, r3
 800989e:	401a      	ands	r2, r3
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80098a4:	f7fe fc6a 	bl	800817c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80098a8:	693b      	ldr	r3, [r7, #16]
 80098aa:	685a      	ldr	r2, [r3, #4]
 80098ac:	4b0a      	ldr	r3, [pc, #40]	@ (80098d8 <vPortFree+0xc0>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	4413      	add	r3, r2
 80098b2:	4a09      	ldr	r2, [pc, #36]	@ (80098d8 <vPortFree+0xc0>)
 80098b4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80098b6:	6938      	ldr	r0, [r7, #16]
 80098b8:	f000 f874 	bl	80099a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80098bc:	4b07      	ldr	r3, [pc, #28]	@ (80098dc <vPortFree+0xc4>)
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	3301      	adds	r3, #1
 80098c2:	4a06      	ldr	r2, [pc, #24]	@ (80098dc <vPortFree+0xc4>)
 80098c4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80098c6:	f7fe fc67 	bl	8008198 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80098ca:	bf00      	nop
 80098cc:	3718      	adds	r7, #24
 80098ce:	46bd      	mov	sp, r7
 80098d0:	bd80      	pop	{r7, pc}
 80098d2:	bf00      	nop
 80098d4:	20005248 	.word	0x20005248
 80098d8:	20005238 	.word	0x20005238
 80098dc:	20005244 	.word	0x20005244

080098e0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80098e0:	b480      	push	{r7}
 80098e2:	b085      	sub	sp, #20
 80098e4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80098e6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80098ea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80098ec:	4b27      	ldr	r3, [pc, #156]	@ (800998c <prvHeapInit+0xac>)
 80098ee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	f003 0307 	and.w	r3, r3, #7
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00c      	beq.n	8009914 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	3307      	adds	r3, #7
 80098fe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009908:	68ba      	ldr	r2, [r7, #8]
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	1ad3      	subs	r3, r2, r3
 800990e:	4a1f      	ldr	r2, [pc, #124]	@ (800998c <prvHeapInit+0xac>)
 8009910:	4413      	add	r3, r2
 8009912:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009918:	4a1d      	ldr	r2, [pc, #116]	@ (8009990 <prvHeapInit+0xb0>)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800991e:	4b1c      	ldr	r3, [pc, #112]	@ (8009990 <prvHeapInit+0xb0>)
 8009920:	2200      	movs	r2, #0
 8009922:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68ba      	ldr	r2, [r7, #8]
 8009928:	4413      	add	r3, r2
 800992a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800992c:	2208      	movs	r2, #8
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	1a9b      	subs	r3, r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0307 	bic.w	r3, r3, #7
 800993a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	4a15      	ldr	r2, [pc, #84]	@ (8009994 <prvHeapInit+0xb4>)
 8009940:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009942:	4b14      	ldr	r3, [pc, #80]	@ (8009994 <prvHeapInit+0xb4>)
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	2200      	movs	r2, #0
 8009948:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800994a:	4b12      	ldr	r3, [pc, #72]	@ (8009994 <prvHeapInit+0xb4>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009956:	683b      	ldr	r3, [r7, #0]
 8009958:	68fa      	ldr	r2, [r7, #12]
 800995a:	1ad2      	subs	r2, r2, r3
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009960:	4b0c      	ldr	r3, [pc, #48]	@ (8009994 <prvHeapInit+0xb4>)
 8009962:	681a      	ldr	r2, [r3, #0]
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	4a0a      	ldr	r2, [pc, #40]	@ (8009998 <prvHeapInit+0xb8>)
 800996e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	685b      	ldr	r3, [r3, #4]
 8009974:	4a09      	ldr	r2, [pc, #36]	@ (800999c <prvHeapInit+0xbc>)
 8009976:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009978:	4b09      	ldr	r3, [pc, #36]	@ (80099a0 <prvHeapInit+0xc0>)
 800997a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800997e:	601a      	str	r2, [r3, #0]
}
 8009980:	bf00      	nop
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	2000162c 	.word	0x2000162c
 8009990:	2000522c 	.word	0x2000522c
 8009994:	20005234 	.word	0x20005234
 8009998:	2000523c 	.word	0x2000523c
 800999c:	20005238 	.word	0x20005238
 80099a0:	20005248 	.word	0x20005248

080099a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80099ac:	4b28      	ldr	r3, [pc, #160]	@ (8009a50 <prvInsertBlockIntoFreeList+0xac>)
 80099ae:	60fb      	str	r3, [r7, #12]
 80099b0:	e002      	b.n	80099b8 <prvInsertBlockIntoFreeList+0x14>
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	429a      	cmp	r2, r3
 80099c0:	d8f7      	bhi.n	80099b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	4413      	add	r3, r2
 80099ce:	687a      	ldr	r2, [r7, #4]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d108      	bne.n	80099e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	685a      	ldr	r2, [r3, #4]
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	441a      	add	r2, r3
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	685b      	ldr	r3, [r3, #4]
 80099ee:	68ba      	ldr	r2, [r7, #8]
 80099f0:	441a      	add	r2, r3
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d118      	bne.n	8009a2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	4b15      	ldr	r3, [pc, #84]	@ (8009a54 <prvInsertBlockIntoFreeList+0xb0>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	429a      	cmp	r2, r3
 8009a04:	d00d      	beq.n	8009a22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	685a      	ldr	r2, [r3, #4]
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	685b      	ldr	r3, [r3, #4]
 8009a10:	441a      	add	r2, r3
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	681a      	ldr	r2, [r3, #0]
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	601a      	str	r2, [r3, #0]
 8009a20:	e008      	b.n	8009a34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009a22:	4b0c      	ldr	r3, [pc, #48]	@ (8009a54 <prvInsertBlockIntoFreeList+0xb0>)
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	601a      	str	r2, [r3, #0]
 8009a2a:	e003      	b.n	8009a34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681a      	ldr	r2, [r3, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009a34:	68fa      	ldr	r2, [r7, #12]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	429a      	cmp	r2, r3
 8009a3a:	d002      	beq.n	8009a42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a42:	bf00      	nop
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	2000522c 	.word	0x2000522c
 8009a54:	20005234 	.word	0x20005234

08009a58 <_vsiprintf_r>:
 8009a58:	b500      	push	{lr}
 8009a5a:	b09b      	sub	sp, #108	@ 0x6c
 8009a5c:	9100      	str	r1, [sp, #0]
 8009a5e:	9104      	str	r1, [sp, #16]
 8009a60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009a64:	9105      	str	r1, [sp, #20]
 8009a66:	9102      	str	r1, [sp, #8]
 8009a68:	4905      	ldr	r1, [pc, #20]	@ (8009a80 <_vsiprintf_r+0x28>)
 8009a6a:	9103      	str	r1, [sp, #12]
 8009a6c:	4669      	mov	r1, sp
 8009a6e:	f000 f951 	bl	8009d14 <_svfiprintf_r>
 8009a72:	9b00      	ldr	r3, [sp, #0]
 8009a74:	2200      	movs	r2, #0
 8009a76:	701a      	strb	r2, [r3, #0]
 8009a78:	b01b      	add	sp, #108	@ 0x6c
 8009a7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8009a7e:	bf00      	nop
 8009a80:	ffff0208 	.word	0xffff0208

08009a84 <vsiprintf>:
 8009a84:	4613      	mov	r3, r2
 8009a86:	460a      	mov	r2, r1
 8009a88:	4601      	mov	r1, r0
 8009a8a:	4802      	ldr	r0, [pc, #8]	@ (8009a94 <vsiprintf+0x10>)
 8009a8c:	6800      	ldr	r0, [r0, #0]
 8009a8e:	f7ff bfe3 	b.w	8009a58 <_vsiprintf_r>
 8009a92:	bf00      	nop
 8009a94:	20000010 	.word	0x20000010

08009a98 <memset>:
 8009a98:	4402      	add	r2, r0
 8009a9a:	4603      	mov	r3, r0
 8009a9c:	4293      	cmp	r3, r2
 8009a9e:	d100      	bne.n	8009aa2 <memset+0xa>
 8009aa0:	4770      	bx	lr
 8009aa2:	f803 1b01 	strb.w	r1, [r3], #1
 8009aa6:	e7f9      	b.n	8009a9c <memset+0x4>

08009aa8 <_reclaim_reent>:
 8009aa8:	4b29      	ldr	r3, [pc, #164]	@ (8009b50 <_reclaim_reent+0xa8>)
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4283      	cmp	r3, r0
 8009aae:	b570      	push	{r4, r5, r6, lr}
 8009ab0:	4604      	mov	r4, r0
 8009ab2:	d04b      	beq.n	8009b4c <_reclaim_reent+0xa4>
 8009ab4:	69c3      	ldr	r3, [r0, #28]
 8009ab6:	b1ab      	cbz	r3, 8009ae4 <_reclaim_reent+0x3c>
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	b16b      	cbz	r3, 8009ad8 <_reclaim_reent+0x30>
 8009abc:	2500      	movs	r5, #0
 8009abe:	69e3      	ldr	r3, [r4, #28]
 8009ac0:	68db      	ldr	r3, [r3, #12]
 8009ac2:	5959      	ldr	r1, [r3, r5]
 8009ac4:	2900      	cmp	r1, #0
 8009ac6:	d13b      	bne.n	8009b40 <_reclaim_reent+0x98>
 8009ac8:	3504      	adds	r5, #4
 8009aca:	2d80      	cmp	r5, #128	@ 0x80
 8009acc:	d1f7      	bne.n	8009abe <_reclaim_reent+0x16>
 8009ace:	69e3      	ldr	r3, [r4, #28]
 8009ad0:	4620      	mov	r0, r4
 8009ad2:	68d9      	ldr	r1, [r3, #12]
 8009ad4:	f000 f878 	bl	8009bc8 <_free_r>
 8009ad8:	69e3      	ldr	r3, [r4, #28]
 8009ada:	6819      	ldr	r1, [r3, #0]
 8009adc:	b111      	cbz	r1, 8009ae4 <_reclaim_reent+0x3c>
 8009ade:	4620      	mov	r0, r4
 8009ae0:	f000 f872 	bl	8009bc8 <_free_r>
 8009ae4:	6961      	ldr	r1, [r4, #20]
 8009ae6:	b111      	cbz	r1, 8009aee <_reclaim_reent+0x46>
 8009ae8:	4620      	mov	r0, r4
 8009aea:	f000 f86d 	bl	8009bc8 <_free_r>
 8009aee:	69e1      	ldr	r1, [r4, #28]
 8009af0:	b111      	cbz	r1, 8009af8 <_reclaim_reent+0x50>
 8009af2:	4620      	mov	r0, r4
 8009af4:	f000 f868 	bl	8009bc8 <_free_r>
 8009af8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009afa:	b111      	cbz	r1, 8009b02 <_reclaim_reent+0x5a>
 8009afc:	4620      	mov	r0, r4
 8009afe:	f000 f863 	bl	8009bc8 <_free_r>
 8009b02:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009b04:	b111      	cbz	r1, 8009b0c <_reclaim_reent+0x64>
 8009b06:	4620      	mov	r0, r4
 8009b08:	f000 f85e 	bl	8009bc8 <_free_r>
 8009b0c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009b0e:	b111      	cbz	r1, 8009b16 <_reclaim_reent+0x6e>
 8009b10:	4620      	mov	r0, r4
 8009b12:	f000 f859 	bl	8009bc8 <_free_r>
 8009b16:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009b18:	b111      	cbz	r1, 8009b20 <_reclaim_reent+0x78>
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	f000 f854 	bl	8009bc8 <_free_r>
 8009b20:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009b22:	b111      	cbz	r1, 8009b2a <_reclaim_reent+0x82>
 8009b24:	4620      	mov	r0, r4
 8009b26:	f000 f84f 	bl	8009bc8 <_free_r>
 8009b2a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009b2c:	b111      	cbz	r1, 8009b34 <_reclaim_reent+0x8c>
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f000 f84a 	bl	8009bc8 <_free_r>
 8009b34:	6a23      	ldr	r3, [r4, #32]
 8009b36:	b14b      	cbz	r3, 8009b4c <_reclaim_reent+0xa4>
 8009b38:	4620      	mov	r0, r4
 8009b3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009b3e:	4718      	bx	r3
 8009b40:	680e      	ldr	r6, [r1, #0]
 8009b42:	4620      	mov	r0, r4
 8009b44:	f000 f840 	bl	8009bc8 <_free_r>
 8009b48:	4631      	mov	r1, r6
 8009b4a:	e7bb      	b.n	8009ac4 <_reclaim_reent+0x1c>
 8009b4c:	bd70      	pop	{r4, r5, r6, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000010 	.word	0x20000010

08009b54 <__errno>:
 8009b54:	4b01      	ldr	r3, [pc, #4]	@ (8009b5c <__errno+0x8>)
 8009b56:	6818      	ldr	r0, [r3, #0]
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	20000010 	.word	0x20000010

08009b60 <__libc_init_array>:
 8009b60:	b570      	push	{r4, r5, r6, lr}
 8009b62:	4d0d      	ldr	r5, [pc, #52]	@ (8009b98 <__libc_init_array+0x38>)
 8009b64:	4c0d      	ldr	r4, [pc, #52]	@ (8009b9c <__libc_init_array+0x3c>)
 8009b66:	1b64      	subs	r4, r4, r5
 8009b68:	10a4      	asrs	r4, r4, #2
 8009b6a:	2600      	movs	r6, #0
 8009b6c:	42a6      	cmp	r6, r4
 8009b6e:	d109      	bne.n	8009b84 <__libc_init_array+0x24>
 8009b70:	4d0b      	ldr	r5, [pc, #44]	@ (8009ba0 <__libc_init_array+0x40>)
 8009b72:	4c0c      	ldr	r4, [pc, #48]	@ (8009ba4 <__libc_init_array+0x44>)
 8009b74:	f000 fc66 	bl	800a444 <_init>
 8009b78:	1b64      	subs	r4, r4, r5
 8009b7a:	10a4      	asrs	r4, r4, #2
 8009b7c:	2600      	movs	r6, #0
 8009b7e:	42a6      	cmp	r6, r4
 8009b80:	d105      	bne.n	8009b8e <__libc_init_array+0x2e>
 8009b82:	bd70      	pop	{r4, r5, r6, pc}
 8009b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b88:	4798      	blx	r3
 8009b8a:	3601      	adds	r6, #1
 8009b8c:	e7ee      	b.n	8009b6c <__libc_init_array+0xc>
 8009b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b92:	4798      	blx	r3
 8009b94:	3601      	adds	r6, #1
 8009b96:	e7f2      	b.n	8009b7e <__libc_init_array+0x1e>
 8009b98:	0800a59c 	.word	0x0800a59c
 8009b9c:	0800a59c 	.word	0x0800a59c
 8009ba0:	0800a59c 	.word	0x0800a59c
 8009ba4:	0800a5a0 	.word	0x0800a5a0

08009ba8 <__retarget_lock_acquire_recursive>:
 8009ba8:	4770      	bx	lr

08009baa <__retarget_lock_release_recursive>:
 8009baa:	4770      	bx	lr

08009bac <memcpy>:
 8009bac:	440a      	add	r2, r1
 8009bae:	4291      	cmp	r1, r2
 8009bb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009bb4:	d100      	bne.n	8009bb8 <memcpy+0xc>
 8009bb6:	4770      	bx	lr
 8009bb8:	b510      	push	{r4, lr}
 8009bba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bc2:	4291      	cmp	r1, r2
 8009bc4:	d1f9      	bne.n	8009bba <memcpy+0xe>
 8009bc6:	bd10      	pop	{r4, pc}

08009bc8 <_free_r>:
 8009bc8:	b538      	push	{r3, r4, r5, lr}
 8009bca:	4605      	mov	r5, r0
 8009bcc:	2900      	cmp	r1, #0
 8009bce:	d041      	beq.n	8009c54 <_free_r+0x8c>
 8009bd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bd4:	1f0c      	subs	r4, r1, #4
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	bfb8      	it	lt
 8009bda:	18e4      	addlt	r4, r4, r3
 8009bdc:	f000 fbc6 	bl	800a36c <__malloc_lock>
 8009be0:	4a1d      	ldr	r2, [pc, #116]	@ (8009c58 <_free_r+0x90>)
 8009be2:	6813      	ldr	r3, [r2, #0]
 8009be4:	b933      	cbnz	r3, 8009bf4 <_free_r+0x2c>
 8009be6:	6063      	str	r3, [r4, #4]
 8009be8:	6014      	str	r4, [r2, #0]
 8009bea:	4628      	mov	r0, r5
 8009bec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009bf0:	f000 bbc2 	b.w	800a378 <__malloc_unlock>
 8009bf4:	42a3      	cmp	r3, r4
 8009bf6:	d908      	bls.n	8009c0a <_free_r+0x42>
 8009bf8:	6820      	ldr	r0, [r4, #0]
 8009bfa:	1821      	adds	r1, r4, r0
 8009bfc:	428b      	cmp	r3, r1
 8009bfe:	bf01      	itttt	eq
 8009c00:	6819      	ldreq	r1, [r3, #0]
 8009c02:	685b      	ldreq	r3, [r3, #4]
 8009c04:	1809      	addeq	r1, r1, r0
 8009c06:	6021      	streq	r1, [r4, #0]
 8009c08:	e7ed      	b.n	8009be6 <_free_r+0x1e>
 8009c0a:	461a      	mov	r2, r3
 8009c0c:	685b      	ldr	r3, [r3, #4]
 8009c0e:	b10b      	cbz	r3, 8009c14 <_free_r+0x4c>
 8009c10:	42a3      	cmp	r3, r4
 8009c12:	d9fa      	bls.n	8009c0a <_free_r+0x42>
 8009c14:	6811      	ldr	r1, [r2, #0]
 8009c16:	1850      	adds	r0, r2, r1
 8009c18:	42a0      	cmp	r0, r4
 8009c1a:	d10b      	bne.n	8009c34 <_free_r+0x6c>
 8009c1c:	6820      	ldr	r0, [r4, #0]
 8009c1e:	4401      	add	r1, r0
 8009c20:	1850      	adds	r0, r2, r1
 8009c22:	4283      	cmp	r3, r0
 8009c24:	6011      	str	r1, [r2, #0]
 8009c26:	d1e0      	bne.n	8009bea <_free_r+0x22>
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	6053      	str	r3, [r2, #4]
 8009c2e:	4408      	add	r0, r1
 8009c30:	6010      	str	r0, [r2, #0]
 8009c32:	e7da      	b.n	8009bea <_free_r+0x22>
 8009c34:	d902      	bls.n	8009c3c <_free_r+0x74>
 8009c36:	230c      	movs	r3, #12
 8009c38:	602b      	str	r3, [r5, #0]
 8009c3a:	e7d6      	b.n	8009bea <_free_r+0x22>
 8009c3c:	6820      	ldr	r0, [r4, #0]
 8009c3e:	1821      	adds	r1, r4, r0
 8009c40:	428b      	cmp	r3, r1
 8009c42:	bf04      	itt	eq
 8009c44:	6819      	ldreq	r1, [r3, #0]
 8009c46:	685b      	ldreq	r3, [r3, #4]
 8009c48:	6063      	str	r3, [r4, #4]
 8009c4a:	bf04      	itt	eq
 8009c4c:	1809      	addeq	r1, r1, r0
 8009c4e:	6021      	streq	r1, [r4, #0]
 8009c50:	6054      	str	r4, [r2, #4]
 8009c52:	e7ca      	b.n	8009bea <_free_r+0x22>
 8009c54:	bd38      	pop	{r3, r4, r5, pc}
 8009c56:	bf00      	nop
 8009c58:	20005390 	.word	0x20005390

08009c5c <__ssputs_r>:
 8009c5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c60:	688e      	ldr	r6, [r1, #8]
 8009c62:	461f      	mov	r7, r3
 8009c64:	42be      	cmp	r6, r7
 8009c66:	680b      	ldr	r3, [r1, #0]
 8009c68:	4682      	mov	sl, r0
 8009c6a:	460c      	mov	r4, r1
 8009c6c:	4690      	mov	r8, r2
 8009c6e:	d82d      	bhi.n	8009ccc <__ssputs_r+0x70>
 8009c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009c74:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009c78:	d026      	beq.n	8009cc8 <__ssputs_r+0x6c>
 8009c7a:	6965      	ldr	r5, [r4, #20]
 8009c7c:	6909      	ldr	r1, [r1, #16]
 8009c7e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c82:	eba3 0901 	sub.w	r9, r3, r1
 8009c86:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c8a:	1c7b      	adds	r3, r7, #1
 8009c8c:	444b      	add	r3, r9
 8009c8e:	106d      	asrs	r5, r5, #1
 8009c90:	429d      	cmp	r5, r3
 8009c92:	bf38      	it	cc
 8009c94:	461d      	movcc	r5, r3
 8009c96:	0553      	lsls	r3, r2, #21
 8009c98:	d527      	bpl.n	8009cea <__ssputs_r+0x8e>
 8009c9a:	4629      	mov	r1, r5
 8009c9c:	f000 f958 	bl	8009f50 <_malloc_r>
 8009ca0:	4606      	mov	r6, r0
 8009ca2:	b360      	cbz	r0, 8009cfe <__ssputs_r+0xa2>
 8009ca4:	6921      	ldr	r1, [r4, #16]
 8009ca6:	464a      	mov	r2, r9
 8009ca8:	f7ff ff80 	bl	8009bac <memcpy>
 8009cac:	89a3      	ldrh	r3, [r4, #12]
 8009cae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cb2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cb6:	81a3      	strh	r3, [r4, #12]
 8009cb8:	6126      	str	r6, [r4, #16]
 8009cba:	6165      	str	r5, [r4, #20]
 8009cbc:	444e      	add	r6, r9
 8009cbe:	eba5 0509 	sub.w	r5, r5, r9
 8009cc2:	6026      	str	r6, [r4, #0]
 8009cc4:	60a5      	str	r5, [r4, #8]
 8009cc6:	463e      	mov	r6, r7
 8009cc8:	42be      	cmp	r6, r7
 8009cca:	d900      	bls.n	8009cce <__ssputs_r+0x72>
 8009ccc:	463e      	mov	r6, r7
 8009cce:	6820      	ldr	r0, [r4, #0]
 8009cd0:	4632      	mov	r2, r6
 8009cd2:	4641      	mov	r1, r8
 8009cd4:	f000 fb84 	bl	800a3e0 <memmove>
 8009cd8:	68a3      	ldr	r3, [r4, #8]
 8009cda:	1b9b      	subs	r3, r3, r6
 8009cdc:	60a3      	str	r3, [r4, #8]
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	4433      	add	r3, r6
 8009ce2:	6023      	str	r3, [r4, #0]
 8009ce4:	2000      	movs	r0, #0
 8009ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cea:	462a      	mov	r2, r5
 8009cec:	f000 fb4a 	bl	800a384 <_realloc_r>
 8009cf0:	4606      	mov	r6, r0
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d1e0      	bne.n	8009cb8 <__ssputs_r+0x5c>
 8009cf6:	6921      	ldr	r1, [r4, #16]
 8009cf8:	4650      	mov	r0, sl
 8009cfa:	f7ff ff65 	bl	8009bc8 <_free_r>
 8009cfe:	230c      	movs	r3, #12
 8009d00:	f8ca 3000 	str.w	r3, [sl]
 8009d04:	89a3      	ldrh	r3, [r4, #12]
 8009d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d0a:	81a3      	strh	r3, [r4, #12]
 8009d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d10:	e7e9      	b.n	8009ce6 <__ssputs_r+0x8a>
	...

08009d14 <_svfiprintf_r>:
 8009d14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d18:	4698      	mov	r8, r3
 8009d1a:	898b      	ldrh	r3, [r1, #12]
 8009d1c:	061b      	lsls	r3, r3, #24
 8009d1e:	b09d      	sub	sp, #116	@ 0x74
 8009d20:	4607      	mov	r7, r0
 8009d22:	460d      	mov	r5, r1
 8009d24:	4614      	mov	r4, r2
 8009d26:	d510      	bpl.n	8009d4a <_svfiprintf_r+0x36>
 8009d28:	690b      	ldr	r3, [r1, #16]
 8009d2a:	b973      	cbnz	r3, 8009d4a <_svfiprintf_r+0x36>
 8009d2c:	2140      	movs	r1, #64	@ 0x40
 8009d2e:	f000 f90f 	bl	8009f50 <_malloc_r>
 8009d32:	6028      	str	r0, [r5, #0]
 8009d34:	6128      	str	r0, [r5, #16]
 8009d36:	b930      	cbnz	r0, 8009d46 <_svfiprintf_r+0x32>
 8009d38:	230c      	movs	r3, #12
 8009d3a:	603b      	str	r3, [r7, #0]
 8009d3c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d40:	b01d      	add	sp, #116	@ 0x74
 8009d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d46:	2340      	movs	r3, #64	@ 0x40
 8009d48:	616b      	str	r3, [r5, #20]
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d4e:	2320      	movs	r3, #32
 8009d50:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d54:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d58:	2330      	movs	r3, #48	@ 0x30
 8009d5a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009ef8 <_svfiprintf_r+0x1e4>
 8009d5e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009d62:	f04f 0901 	mov.w	r9, #1
 8009d66:	4623      	mov	r3, r4
 8009d68:	469a      	mov	sl, r3
 8009d6a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d6e:	b10a      	cbz	r2, 8009d74 <_svfiprintf_r+0x60>
 8009d70:	2a25      	cmp	r2, #37	@ 0x25
 8009d72:	d1f9      	bne.n	8009d68 <_svfiprintf_r+0x54>
 8009d74:	ebba 0b04 	subs.w	fp, sl, r4
 8009d78:	d00b      	beq.n	8009d92 <_svfiprintf_r+0x7e>
 8009d7a:	465b      	mov	r3, fp
 8009d7c:	4622      	mov	r2, r4
 8009d7e:	4629      	mov	r1, r5
 8009d80:	4638      	mov	r0, r7
 8009d82:	f7ff ff6b 	bl	8009c5c <__ssputs_r>
 8009d86:	3001      	adds	r0, #1
 8009d88:	f000 80a7 	beq.w	8009eda <_svfiprintf_r+0x1c6>
 8009d8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d8e:	445a      	add	r2, fp
 8009d90:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d92:	f89a 3000 	ldrb.w	r3, [sl]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f000 809f 	beq.w	8009eda <_svfiprintf_r+0x1c6>
 8009d9c:	2300      	movs	r3, #0
 8009d9e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009da2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009da6:	f10a 0a01 	add.w	sl, sl, #1
 8009daa:	9304      	str	r3, [sp, #16]
 8009dac:	9307      	str	r3, [sp, #28]
 8009dae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009db2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009db4:	4654      	mov	r4, sl
 8009db6:	2205      	movs	r2, #5
 8009db8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dbc:	484e      	ldr	r0, [pc, #312]	@ (8009ef8 <_svfiprintf_r+0x1e4>)
 8009dbe:	f7f6 fa07 	bl	80001d0 <memchr>
 8009dc2:	9a04      	ldr	r2, [sp, #16]
 8009dc4:	b9d8      	cbnz	r0, 8009dfe <_svfiprintf_r+0xea>
 8009dc6:	06d0      	lsls	r0, r2, #27
 8009dc8:	bf44      	itt	mi
 8009dca:	2320      	movmi	r3, #32
 8009dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dd0:	0711      	lsls	r1, r2, #28
 8009dd2:	bf44      	itt	mi
 8009dd4:	232b      	movmi	r3, #43	@ 0x2b
 8009dd6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009dda:	f89a 3000 	ldrb.w	r3, [sl]
 8009dde:	2b2a      	cmp	r3, #42	@ 0x2a
 8009de0:	d015      	beq.n	8009e0e <_svfiprintf_r+0xfa>
 8009de2:	9a07      	ldr	r2, [sp, #28]
 8009de4:	4654      	mov	r4, sl
 8009de6:	2000      	movs	r0, #0
 8009de8:	f04f 0c0a 	mov.w	ip, #10
 8009dec:	4621      	mov	r1, r4
 8009dee:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009df2:	3b30      	subs	r3, #48	@ 0x30
 8009df4:	2b09      	cmp	r3, #9
 8009df6:	d94b      	bls.n	8009e90 <_svfiprintf_r+0x17c>
 8009df8:	b1b0      	cbz	r0, 8009e28 <_svfiprintf_r+0x114>
 8009dfa:	9207      	str	r2, [sp, #28]
 8009dfc:	e014      	b.n	8009e28 <_svfiprintf_r+0x114>
 8009dfe:	eba0 0308 	sub.w	r3, r0, r8
 8009e02:	fa09 f303 	lsl.w	r3, r9, r3
 8009e06:	4313      	orrs	r3, r2
 8009e08:	9304      	str	r3, [sp, #16]
 8009e0a:	46a2      	mov	sl, r4
 8009e0c:	e7d2      	b.n	8009db4 <_svfiprintf_r+0xa0>
 8009e0e:	9b03      	ldr	r3, [sp, #12]
 8009e10:	1d19      	adds	r1, r3, #4
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	9103      	str	r1, [sp, #12]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	bfbb      	ittet	lt
 8009e1a:	425b      	neglt	r3, r3
 8009e1c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e20:	9307      	strge	r3, [sp, #28]
 8009e22:	9307      	strlt	r3, [sp, #28]
 8009e24:	bfb8      	it	lt
 8009e26:	9204      	strlt	r2, [sp, #16]
 8009e28:	7823      	ldrb	r3, [r4, #0]
 8009e2a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e2c:	d10a      	bne.n	8009e44 <_svfiprintf_r+0x130>
 8009e2e:	7863      	ldrb	r3, [r4, #1]
 8009e30:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e32:	d132      	bne.n	8009e9a <_svfiprintf_r+0x186>
 8009e34:	9b03      	ldr	r3, [sp, #12]
 8009e36:	1d1a      	adds	r2, r3, #4
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	9203      	str	r2, [sp, #12]
 8009e3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e40:	3402      	adds	r4, #2
 8009e42:	9305      	str	r3, [sp, #20]
 8009e44:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f08 <_svfiprintf_r+0x1f4>
 8009e48:	7821      	ldrb	r1, [r4, #0]
 8009e4a:	2203      	movs	r2, #3
 8009e4c:	4650      	mov	r0, sl
 8009e4e:	f7f6 f9bf 	bl	80001d0 <memchr>
 8009e52:	b138      	cbz	r0, 8009e64 <_svfiprintf_r+0x150>
 8009e54:	9b04      	ldr	r3, [sp, #16]
 8009e56:	eba0 000a 	sub.w	r0, r0, sl
 8009e5a:	2240      	movs	r2, #64	@ 0x40
 8009e5c:	4082      	lsls	r2, r0
 8009e5e:	4313      	orrs	r3, r2
 8009e60:	3401      	adds	r4, #1
 8009e62:	9304      	str	r3, [sp, #16]
 8009e64:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e68:	4824      	ldr	r0, [pc, #144]	@ (8009efc <_svfiprintf_r+0x1e8>)
 8009e6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009e6e:	2206      	movs	r2, #6
 8009e70:	f7f6 f9ae 	bl	80001d0 <memchr>
 8009e74:	2800      	cmp	r0, #0
 8009e76:	d036      	beq.n	8009ee6 <_svfiprintf_r+0x1d2>
 8009e78:	4b21      	ldr	r3, [pc, #132]	@ (8009f00 <_svfiprintf_r+0x1ec>)
 8009e7a:	bb1b      	cbnz	r3, 8009ec4 <_svfiprintf_r+0x1b0>
 8009e7c:	9b03      	ldr	r3, [sp, #12]
 8009e7e:	3307      	adds	r3, #7
 8009e80:	f023 0307 	bic.w	r3, r3, #7
 8009e84:	3308      	adds	r3, #8
 8009e86:	9303      	str	r3, [sp, #12]
 8009e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e8a:	4433      	add	r3, r6
 8009e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e8e:	e76a      	b.n	8009d66 <_svfiprintf_r+0x52>
 8009e90:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e94:	460c      	mov	r4, r1
 8009e96:	2001      	movs	r0, #1
 8009e98:	e7a8      	b.n	8009dec <_svfiprintf_r+0xd8>
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	3401      	adds	r4, #1
 8009e9e:	9305      	str	r3, [sp, #20]
 8009ea0:	4619      	mov	r1, r3
 8009ea2:	f04f 0c0a 	mov.w	ip, #10
 8009ea6:	4620      	mov	r0, r4
 8009ea8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eac:	3a30      	subs	r2, #48	@ 0x30
 8009eae:	2a09      	cmp	r2, #9
 8009eb0:	d903      	bls.n	8009eba <_svfiprintf_r+0x1a6>
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d0c6      	beq.n	8009e44 <_svfiprintf_r+0x130>
 8009eb6:	9105      	str	r1, [sp, #20]
 8009eb8:	e7c4      	b.n	8009e44 <_svfiprintf_r+0x130>
 8009eba:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ebe:	4604      	mov	r4, r0
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	e7f0      	b.n	8009ea6 <_svfiprintf_r+0x192>
 8009ec4:	ab03      	add	r3, sp, #12
 8009ec6:	9300      	str	r3, [sp, #0]
 8009ec8:	462a      	mov	r2, r5
 8009eca:	4b0e      	ldr	r3, [pc, #56]	@ (8009f04 <_svfiprintf_r+0x1f0>)
 8009ecc:	a904      	add	r1, sp, #16
 8009ece:	4638      	mov	r0, r7
 8009ed0:	f3af 8000 	nop.w
 8009ed4:	1c42      	adds	r2, r0, #1
 8009ed6:	4606      	mov	r6, r0
 8009ed8:	d1d6      	bne.n	8009e88 <_svfiprintf_r+0x174>
 8009eda:	89ab      	ldrh	r3, [r5, #12]
 8009edc:	065b      	lsls	r3, r3, #25
 8009ede:	f53f af2d 	bmi.w	8009d3c <_svfiprintf_r+0x28>
 8009ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009ee4:	e72c      	b.n	8009d40 <_svfiprintf_r+0x2c>
 8009ee6:	ab03      	add	r3, sp, #12
 8009ee8:	9300      	str	r3, [sp, #0]
 8009eea:	462a      	mov	r2, r5
 8009eec:	4b05      	ldr	r3, [pc, #20]	@ (8009f04 <_svfiprintf_r+0x1f0>)
 8009eee:	a904      	add	r1, sp, #16
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f000 f91b 	bl	800a12c <_printf_i>
 8009ef6:	e7ed      	b.n	8009ed4 <_svfiprintf_r+0x1c0>
 8009ef8:	0800a560 	.word	0x0800a560
 8009efc:	0800a56a 	.word	0x0800a56a
 8009f00:	00000000 	.word	0x00000000
 8009f04:	08009c5d 	.word	0x08009c5d
 8009f08:	0800a566 	.word	0x0800a566

08009f0c <sbrk_aligned>:
 8009f0c:	b570      	push	{r4, r5, r6, lr}
 8009f0e:	4e0f      	ldr	r6, [pc, #60]	@ (8009f4c <sbrk_aligned+0x40>)
 8009f10:	460c      	mov	r4, r1
 8009f12:	6831      	ldr	r1, [r6, #0]
 8009f14:	4605      	mov	r5, r0
 8009f16:	b911      	cbnz	r1, 8009f1e <sbrk_aligned+0x12>
 8009f18:	f000 fa7c 	bl	800a414 <_sbrk_r>
 8009f1c:	6030      	str	r0, [r6, #0]
 8009f1e:	4621      	mov	r1, r4
 8009f20:	4628      	mov	r0, r5
 8009f22:	f000 fa77 	bl	800a414 <_sbrk_r>
 8009f26:	1c43      	adds	r3, r0, #1
 8009f28:	d103      	bne.n	8009f32 <sbrk_aligned+0x26>
 8009f2a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009f2e:	4620      	mov	r0, r4
 8009f30:	bd70      	pop	{r4, r5, r6, pc}
 8009f32:	1cc4      	adds	r4, r0, #3
 8009f34:	f024 0403 	bic.w	r4, r4, #3
 8009f38:	42a0      	cmp	r0, r4
 8009f3a:	d0f8      	beq.n	8009f2e <sbrk_aligned+0x22>
 8009f3c:	1a21      	subs	r1, r4, r0
 8009f3e:	4628      	mov	r0, r5
 8009f40:	f000 fa68 	bl	800a414 <_sbrk_r>
 8009f44:	3001      	adds	r0, #1
 8009f46:	d1f2      	bne.n	8009f2e <sbrk_aligned+0x22>
 8009f48:	e7ef      	b.n	8009f2a <sbrk_aligned+0x1e>
 8009f4a:	bf00      	nop
 8009f4c:	2000538c 	.word	0x2000538c

08009f50 <_malloc_r>:
 8009f50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009f54:	1ccd      	adds	r5, r1, #3
 8009f56:	f025 0503 	bic.w	r5, r5, #3
 8009f5a:	3508      	adds	r5, #8
 8009f5c:	2d0c      	cmp	r5, #12
 8009f5e:	bf38      	it	cc
 8009f60:	250c      	movcc	r5, #12
 8009f62:	2d00      	cmp	r5, #0
 8009f64:	4606      	mov	r6, r0
 8009f66:	db01      	blt.n	8009f6c <_malloc_r+0x1c>
 8009f68:	42a9      	cmp	r1, r5
 8009f6a:	d904      	bls.n	8009f76 <_malloc_r+0x26>
 8009f6c:	230c      	movs	r3, #12
 8009f6e:	6033      	str	r3, [r6, #0]
 8009f70:	2000      	movs	r0, #0
 8009f72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009f76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a04c <_malloc_r+0xfc>
 8009f7a:	f000 f9f7 	bl	800a36c <__malloc_lock>
 8009f7e:	f8d8 3000 	ldr.w	r3, [r8]
 8009f82:	461c      	mov	r4, r3
 8009f84:	bb44      	cbnz	r4, 8009fd8 <_malloc_r+0x88>
 8009f86:	4629      	mov	r1, r5
 8009f88:	4630      	mov	r0, r6
 8009f8a:	f7ff ffbf 	bl	8009f0c <sbrk_aligned>
 8009f8e:	1c43      	adds	r3, r0, #1
 8009f90:	4604      	mov	r4, r0
 8009f92:	d158      	bne.n	800a046 <_malloc_r+0xf6>
 8009f94:	f8d8 4000 	ldr.w	r4, [r8]
 8009f98:	4627      	mov	r7, r4
 8009f9a:	2f00      	cmp	r7, #0
 8009f9c:	d143      	bne.n	800a026 <_malloc_r+0xd6>
 8009f9e:	2c00      	cmp	r4, #0
 8009fa0:	d04b      	beq.n	800a03a <_malloc_r+0xea>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	4639      	mov	r1, r7
 8009fa6:	4630      	mov	r0, r6
 8009fa8:	eb04 0903 	add.w	r9, r4, r3
 8009fac:	f000 fa32 	bl	800a414 <_sbrk_r>
 8009fb0:	4581      	cmp	r9, r0
 8009fb2:	d142      	bne.n	800a03a <_malloc_r+0xea>
 8009fb4:	6821      	ldr	r1, [r4, #0]
 8009fb6:	1a6d      	subs	r5, r5, r1
 8009fb8:	4629      	mov	r1, r5
 8009fba:	4630      	mov	r0, r6
 8009fbc:	f7ff ffa6 	bl	8009f0c <sbrk_aligned>
 8009fc0:	3001      	adds	r0, #1
 8009fc2:	d03a      	beq.n	800a03a <_malloc_r+0xea>
 8009fc4:	6823      	ldr	r3, [r4, #0]
 8009fc6:	442b      	add	r3, r5
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	f8d8 3000 	ldr.w	r3, [r8]
 8009fce:	685a      	ldr	r2, [r3, #4]
 8009fd0:	bb62      	cbnz	r2, 800a02c <_malloc_r+0xdc>
 8009fd2:	f8c8 7000 	str.w	r7, [r8]
 8009fd6:	e00f      	b.n	8009ff8 <_malloc_r+0xa8>
 8009fd8:	6822      	ldr	r2, [r4, #0]
 8009fda:	1b52      	subs	r2, r2, r5
 8009fdc:	d420      	bmi.n	800a020 <_malloc_r+0xd0>
 8009fde:	2a0b      	cmp	r2, #11
 8009fe0:	d917      	bls.n	800a012 <_malloc_r+0xc2>
 8009fe2:	1961      	adds	r1, r4, r5
 8009fe4:	42a3      	cmp	r3, r4
 8009fe6:	6025      	str	r5, [r4, #0]
 8009fe8:	bf18      	it	ne
 8009fea:	6059      	strne	r1, [r3, #4]
 8009fec:	6863      	ldr	r3, [r4, #4]
 8009fee:	bf08      	it	eq
 8009ff0:	f8c8 1000 	streq.w	r1, [r8]
 8009ff4:	5162      	str	r2, [r4, r5]
 8009ff6:	604b      	str	r3, [r1, #4]
 8009ff8:	4630      	mov	r0, r6
 8009ffa:	f000 f9bd 	bl	800a378 <__malloc_unlock>
 8009ffe:	f104 000b 	add.w	r0, r4, #11
 800a002:	1d23      	adds	r3, r4, #4
 800a004:	f020 0007 	bic.w	r0, r0, #7
 800a008:	1ac2      	subs	r2, r0, r3
 800a00a:	bf1c      	itt	ne
 800a00c:	1a1b      	subne	r3, r3, r0
 800a00e:	50a3      	strne	r3, [r4, r2]
 800a010:	e7af      	b.n	8009f72 <_malloc_r+0x22>
 800a012:	6862      	ldr	r2, [r4, #4]
 800a014:	42a3      	cmp	r3, r4
 800a016:	bf0c      	ite	eq
 800a018:	f8c8 2000 	streq.w	r2, [r8]
 800a01c:	605a      	strne	r2, [r3, #4]
 800a01e:	e7eb      	b.n	8009ff8 <_malloc_r+0xa8>
 800a020:	4623      	mov	r3, r4
 800a022:	6864      	ldr	r4, [r4, #4]
 800a024:	e7ae      	b.n	8009f84 <_malloc_r+0x34>
 800a026:	463c      	mov	r4, r7
 800a028:	687f      	ldr	r7, [r7, #4]
 800a02a:	e7b6      	b.n	8009f9a <_malloc_r+0x4a>
 800a02c:	461a      	mov	r2, r3
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	42a3      	cmp	r3, r4
 800a032:	d1fb      	bne.n	800a02c <_malloc_r+0xdc>
 800a034:	2300      	movs	r3, #0
 800a036:	6053      	str	r3, [r2, #4]
 800a038:	e7de      	b.n	8009ff8 <_malloc_r+0xa8>
 800a03a:	230c      	movs	r3, #12
 800a03c:	6033      	str	r3, [r6, #0]
 800a03e:	4630      	mov	r0, r6
 800a040:	f000 f99a 	bl	800a378 <__malloc_unlock>
 800a044:	e794      	b.n	8009f70 <_malloc_r+0x20>
 800a046:	6005      	str	r5, [r0, #0]
 800a048:	e7d6      	b.n	8009ff8 <_malloc_r+0xa8>
 800a04a:	bf00      	nop
 800a04c:	20005390 	.word	0x20005390

0800a050 <_printf_common>:
 800a050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a054:	4616      	mov	r6, r2
 800a056:	4698      	mov	r8, r3
 800a058:	688a      	ldr	r2, [r1, #8]
 800a05a:	690b      	ldr	r3, [r1, #16]
 800a05c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a060:	4293      	cmp	r3, r2
 800a062:	bfb8      	it	lt
 800a064:	4613      	movlt	r3, r2
 800a066:	6033      	str	r3, [r6, #0]
 800a068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a06c:	4607      	mov	r7, r0
 800a06e:	460c      	mov	r4, r1
 800a070:	b10a      	cbz	r2, 800a076 <_printf_common+0x26>
 800a072:	3301      	adds	r3, #1
 800a074:	6033      	str	r3, [r6, #0]
 800a076:	6823      	ldr	r3, [r4, #0]
 800a078:	0699      	lsls	r1, r3, #26
 800a07a:	bf42      	ittt	mi
 800a07c:	6833      	ldrmi	r3, [r6, #0]
 800a07e:	3302      	addmi	r3, #2
 800a080:	6033      	strmi	r3, [r6, #0]
 800a082:	6825      	ldr	r5, [r4, #0]
 800a084:	f015 0506 	ands.w	r5, r5, #6
 800a088:	d106      	bne.n	800a098 <_printf_common+0x48>
 800a08a:	f104 0a19 	add.w	sl, r4, #25
 800a08e:	68e3      	ldr	r3, [r4, #12]
 800a090:	6832      	ldr	r2, [r6, #0]
 800a092:	1a9b      	subs	r3, r3, r2
 800a094:	42ab      	cmp	r3, r5
 800a096:	dc26      	bgt.n	800a0e6 <_printf_common+0x96>
 800a098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a09c:	6822      	ldr	r2, [r4, #0]
 800a09e:	3b00      	subs	r3, #0
 800a0a0:	bf18      	it	ne
 800a0a2:	2301      	movne	r3, #1
 800a0a4:	0692      	lsls	r2, r2, #26
 800a0a6:	d42b      	bmi.n	800a100 <_printf_common+0xb0>
 800a0a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a0ac:	4641      	mov	r1, r8
 800a0ae:	4638      	mov	r0, r7
 800a0b0:	47c8      	blx	r9
 800a0b2:	3001      	adds	r0, #1
 800a0b4:	d01e      	beq.n	800a0f4 <_printf_common+0xa4>
 800a0b6:	6823      	ldr	r3, [r4, #0]
 800a0b8:	6922      	ldr	r2, [r4, #16]
 800a0ba:	f003 0306 	and.w	r3, r3, #6
 800a0be:	2b04      	cmp	r3, #4
 800a0c0:	bf02      	ittt	eq
 800a0c2:	68e5      	ldreq	r5, [r4, #12]
 800a0c4:	6833      	ldreq	r3, [r6, #0]
 800a0c6:	1aed      	subeq	r5, r5, r3
 800a0c8:	68a3      	ldr	r3, [r4, #8]
 800a0ca:	bf0c      	ite	eq
 800a0cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a0d0:	2500      	movne	r5, #0
 800a0d2:	4293      	cmp	r3, r2
 800a0d4:	bfc4      	itt	gt
 800a0d6:	1a9b      	subgt	r3, r3, r2
 800a0d8:	18ed      	addgt	r5, r5, r3
 800a0da:	2600      	movs	r6, #0
 800a0dc:	341a      	adds	r4, #26
 800a0de:	42b5      	cmp	r5, r6
 800a0e0:	d11a      	bne.n	800a118 <_printf_common+0xc8>
 800a0e2:	2000      	movs	r0, #0
 800a0e4:	e008      	b.n	800a0f8 <_printf_common+0xa8>
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	4652      	mov	r2, sl
 800a0ea:	4641      	mov	r1, r8
 800a0ec:	4638      	mov	r0, r7
 800a0ee:	47c8      	blx	r9
 800a0f0:	3001      	adds	r0, #1
 800a0f2:	d103      	bne.n	800a0fc <_printf_common+0xac>
 800a0f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a0f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0fc:	3501      	adds	r5, #1
 800a0fe:	e7c6      	b.n	800a08e <_printf_common+0x3e>
 800a100:	18e1      	adds	r1, r4, r3
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	2030      	movs	r0, #48	@ 0x30
 800a106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a10a:	4422      	add	r2, r4
 800a10c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a114:	3302      	adds	r3, #2
 800a116:	e7c7      	b.n	800a0a8 <_printf_common+0x58>
 800a118:	2301      	movs	r3, #1
 800a11a:	4622      	mov	r2, r4
 800a11c:	4641      	mov	r1, r8
 800a11e:	4638      	mov	r0, r7
 800a120:	47c8      	blx	r9
 800a122:	3001      	adds	r0, #1
 800a124:	d0e6      	beq.n	800a0f4 <_printf_common+0xa4>
 800a126:	3601      	adds	r6, #1
 800a128:	e7d9      	b.n	800a0de <_printf_common+0x8e>
	...

0800a12c <_printf_i>:
 800a12c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a130:	7e0f      	ldrb	r7, [r1, #24]
 800a132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a134:	2f78      	cmp	r7, #120	@ 0x78
 800a136:	4691      	mov	r9, r2
 800a138:	4680      	mov	r8, r0
 800a13a:	460c      	mov	r4, r1
 800a13c:	469a      	mov	sl, r3
 800a13e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a142:	d807      	bhi.n	800a154 <_printf_i+0x28>
 800a144:	2f62      	cmp	r7, #98	@ 0x62
 800a146:	d80a      	bhi.n	800a15e <_printf_i+0x32>
 800a148:	2f00      	cmp	r7, #0
 800a14a:	f000 80d2 	beq.w	800a2f2 <_printf_i+0x1c6>
 800a14e:	2f58      	cmp	r7, #88	@ 0x58
 800a150:	f000 80b9 	beq.w	800a2c6 <_printf_i+0x19a>
 800a154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a15c:	e03a      	b.n	800a1d4 <_printf_i+0xa8>
 800a15e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a162:	2b15      	cmp	r3, #21
 800a164:	d8f6      	bhi.n	800a154 <_printf_i+0x28>
 800a166:	a101      	add	r1, pc, #4	@ (adr r1, 800a16c <_printf_i+0x40>)
 800a168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a16c:	0800a1c5 	.word	0x0800a1c5
 800a170:	0800a1d9 	.word	0x0800a1d9
 800a174:	0800a155 	.word	0x0800a155
 800a178:	0800a155 	.word	0x0800a155
 800a17c:	0800a155 	.word	0x0800a155
 800a180:	0800a155 	.word	0x0800a155
 800a184:	0800a1d9 	.word	0x0800a1d9
 800a188:	0800a155 	.word	0x0800a155
 800a18c:	0800a155 	.word	0x0800a155
 800a190:	0800a155 	.word	0x0800a155
 800a194:	0800a155 	.word	0x0800a155
 800a198:	0800a2d9 	.word	0x0800a2d9
 800a19c:	0800a203 	.word	0x0800a203
 800a1a0:	0800a293 	.word	0x0800a293
 800a1a4:	0800a155 	.word	0x0800a155
 800a1a8:	0800a155 	.word	0x0800a155
 800a1ac:	0800a2fb 	.word	0x0800a2fb
 800a1b0:	0800a155 	.word	0x0800a155
 800a1b4:	0800a203 	.word	0x0800a203
 800a1b8:	0800a155 	.word	0x0800a155
 800a1bc:	0800a155 	.word	0x0800a155
 800a1c0:	0800a29b 	.word	0x0800a29b
 800a1c4:	6833      	ldr	r3, [r6, #0]
 800a1c6:	1d1a      	adds	r2, r3, #4
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	6032      	str	r2, [r6, #0]
 800a1cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a1d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e09d      	b.n	800a314 <_printf_i+0x1e8>
 800a1d8:	6833      	ldr	r3, [r6, #0]
 800a1da:	6820      	ldr	r0, [r4, #0]
 800a1dc:	1d19      	adds	r1, r3, #4
 800a1de:	6031      	str	r1, [r6, #0]
 800a1e0:	0606      	lsls	r6, r0, #24
 800a1e2:	d501      	bpl.n	800a1e8 <_printf_i+0xbc>
 800a1e4:	681d      	ldr	r5, [r3, #0]
 800a1e6:	e003      	b.n	800a1f0 <_printf_i+0xc4>
 800a1e8:	0645      	lsls	r5, r0, #25
 800a1ea:	d5fb      	bpl.n	800a1e4 <_printf_i+0xb8>
 800a1ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a1f0:	2d00      	cmp	r5, #0
 800a1f2:	da03      	bge.n	800a1fc <_printf_i+0xd0>
 800a1f4:	232d      	movs	r3, #45	@ 0x2d
 800a1f6:	426d      	negs	r5, r5
 800a1f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a1fc:	4859      	ldr	r0, [pc, #356]	@ (800a364 <_printf_i+0x238>)
 800a1fe:	230a      	movs	r3, #10
 800a200:	e011      	b.n	800a226 <_printf_i+0xfa>
 800a202:	6821      	ldr	r1, [r4, #0]
 800a204:	6833      	ldr	r3, [r6, #0]
 800a206:	0608      	lsls	r0, r1, #24
 800a208:	f853 5b04 	ldr.w	r5, [r3], #4
 800a20c:	d402      	bmi.n	800a214 <_printf_i+0xe8>
 800a20e:	0649      	lsls	r1, r1, #25
 800a210:	bf48      	it	mi
 800a212:	b2ad      	uxthmi	r5, r5
 800a214:	2f6f      	cmp	r7, #111	@ 0x6f
 800a216:	4853      	ldr	r0, [pc, #332]	@ (800a364 <_printf_i+0x238>)
 800a218:	6033      	str	r3, [r6, #0]
 800a21a:	bf14      	ite	ne
 800a21c:	230a      	movne	r3, #10
 800a21e:	2308      	moveq	r3, #8
 800a220:	2100      	movs	r1, #0
 800a222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a226:	6866      	ldr	r6, [r4, #4]
 800a228:	60a6      	str	r6, [r4, #8]
 800a22a:	2e00      	cmp	r6, #0
 800a22c:	bfa2      	ittt	ge
 800a22e:	6821      	ldrge	r1, [r4, #0]
 800a230:	f021 0104 	bicge.w	r1, r1, #4
 800a234:	6021      	strge	r1, [r4, #0]
 800a236:	b90d      	cbnz	r5, 800a23c <_printf_i+0x110>
 800a238:	2e00      	cmp	r6, #0
 800a23a:	d04b      	beq.n	800a2d4 <_printf_i+0x1a8>
 800a23c:	4616      	mov	r6, r2
 800a23e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a242:	fb03 5711 	mls	r7, r3, r1, r5
 800a246:	5dc7      	ldrb	r7, [r0, r7]
 800a248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a24c:	462f      	mov	r7, r5
 800a24e:	42bb      	cmp	r3, r7
 800a250:	460d      	mov	r5, r1
 800a252:	d9f4      	bls.n	800a23e <_printf_i+0x112>
 800a254:	2b08      	cmp	r3, #8
 800a256:	d10b      	bne.n	800a270 <_printf_i+0x144>
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	07df      	lsls	r7, r3, #31
 800a25c:	d508      	bpl.n	800a270 <_printf_i+0x144>
 800a25e:	6923      	ldr	r3, [r4, #16]
 800a260:	6861      	ldr	r1, [r4, #4]
 800a262:	4299      	cmp	r1, r3
 800a264:	bfde      	ittt	le
 800a266:	2330      	movle	r3, #48	@ 0x30
 800a268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a26c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a270:	1b92      	subs	r2, r2, r6
 800a272:	6122      	str	r2, [r4, #16]
 800a274:	f8cd a000 	str.w	sl, [sp]
 800a278:	464b      	mov	r3, r9
 800a27a:	aa03      	add	r2, sp, #12
 800a27c:	4621      	mov	r1, r4
 800a27e:	4640      	mov	r0, r8
 800a280:	f7ff fee6 	bl	800a050 <_printf_common>
 800a284:	3001      	adds	r0, #1
 800a286:	d14a      	bne.n	800a31e <_printf_i+0x1f2>
 800a288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a28c:	b004      	add	sp, #16
 800a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a292:	6823      	ldr	r3, [r4, #0]
 800a294:	f043 0320 	orr.w	r3, r3, #32
 800a298:	6023      	str	r3, [r4, #0]
 800a29a:	4833      	ldr	r0, [pc, #204]	@ (800a368 <_printf_i+0x23c>)
 800a29c:	2778      	movs	r7, #120	@ 0x78
 800a29e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a2a2:	6823      	ldr	r3, [r4, #0]
 800a2a4:	6831      	ldr	r1, [r6, #0]
 800a2a6:	061f      	lsls	r7, r3, #24
 800a2a8:	f851 5b04 	ldr.w	r5, [r1], #4
 800a2ac:	d402      	bmi.n	800a2b4 <_printf_i+0x188>
 800a2ae:	065f      	lsls	r7, r3, #25
 800a2b0:	bf48      	it	mi
 800a2b2:	b2ad      	uxthmi	r5, r5
 800a2b4:	6031      	str	r1, [r6, #0]
 800a2b6:	07d9      	lsls	r1, r3, #31
 800a2b8:	bf44      	itt	mi
 800a2ba:	f043 0320 	orrmi.w	r3, r3, #32
 800a2be:	6023      	strmi	r3, [r4, #0]
 800a2c0:	b11d      	cbz	r5, 800a2ca <_printf_i+0x19e>
 800a2c2:	2310      	movs	r3, #16
 800a2c4:	e7ac      	b.n	800a220 <_printf_i+0xf4>
 800a2c6:	4827      	ldr	r0, [pc, #156]	@ (800a364 <_printf_i+0x238>)
 800a2c8:	e7e9      	b.n	800a29e <_printf_i+0x172>
 800a2ca:	6823      	ldr	r3, [r4, #0]
 800a2cc:	f023 0320 	bic.w	r3, r3, #32
 800a2d0:	6023      	str	r3, [r4, #0]
 800a2d2:	e7f6      	b.n	800a2c2 <_printf_i+0x196>
 800a2d4:	4616      	mov	r6, r2
 800a2d6:	e7bd      	b.n	800a254 <_printf_i+0x128>
 800a2d8:	6833      	ldr	r3, [r6, #0]
 800a2da:	6825      	ldr	r5, [r4, #0]
 800a2dc:	6961      	ldr	r1, [r4, #20]
 800a2de:	1d18      	adds	r0, r3, #4
 800a2e0:	6030      	str	r0, [r6, #0]
 800a2e2:	062e      	lsls	r6, r5, #24
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	d501      	bpl.n	800a2ec <_printf_i+0x1c0>
 800a2e8:	6019      	str	r1, [r3, #0]
 800a2ea:	e002      	b.n	800a2f2 <_printf_i+0x1c6>
 800a2ec:	0668      	lsls	r0, r5, #25
 800a2ee:	d5fb      	bpl.n	800a2e8 <_printf_i+0x1bc>
 800a2f0:	8019      	strh	r1, [r3, #0]
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	6123      	str	r3, [r4, #16]
 800a2f6:	4616      	mov	r6, r2
 800a2f8:	e7bc      	b.n	800a274 <_printf_i+0x148>
 800a2fa:	6833      	ldr	r3, [r6, #0]
 800a2fc:	1d1a      	adds	r2, r3, #4
 800a2fe:	6032      	str	r2, [r6, #0]
 800a300:	681e      	ldr	r6, [r3, #0]
 800a302:	6862      	ldr	r2, [r4, #4]
 800a304:	2100      	movs	r1, #0
 800a306:	4630      	mov	r0, r6
 800a308:	f7f5 ff62 	bl	80001d0 <memchr>
 800a30c:	b108      	cbz	r0, 800a312 <_printf_i+0x1e6>
 800a30e:	1b80      	subs	r0, r0, r6
 800a310:	6060      	str	r0, [r4, #4]
 800a312:	6863      	ldr	r3, [r4, #4]
 800a314:	6123      	str	r3, [r4, #16]
 800a316:	2300      	movs	r3, #0
 800a318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a31c:	e7aa      	b.n	800a274 <_printf_i+0x148>
 800a31e:	6923      	ldr	r3, [r4, #16]
 800a320:	4632      	mov	r2, r6
 800a322:	4649      	mov	r1, r9
 800a324:	4640      	mov	r0, r8
 800a326:	47d0      	blx	sl
 800a328:	3001      	adds	r0, #1
 800a32a:	d0ad      	beq.n	800a288 <_printf_i+0x15c>
 800a32c:	6823      	ldr	r3, [r4, #0]
 800a32e:	079b      	lsls	r3, r3, #30
 800a330:	d413      	bmi.n	800a35a <_printf_i+0x22e>
 800a332:	68e0      	ldr	r0, [r4, #12]
 800a334:	9b03      	ldr	r3, [sp, #12]
 800a336:	4298      	cmp	r0, r3
 800a338:	bfb8      	it	lt
 800a33a:	4618      	movlt	r0, r3
 800a33c:	e7a6      	b.n	800a28c <_printf_i+0x160>
 800a33e:	2301      	movs	r3, #1
 800a340:	4632      	mov	r2, r6
 800a342:	4649      	mov	r1, r9
 800a344:	4640      	mov	r0, r8
 800a346:	47d0      	blx	sl
 800a348:	3001      	adds	r0, #1
 800a34a:	d09d      	beq.n	800a288 <_printf_i+0x15c>
 800a34c:	3501      	adds	r5, #1
 800a34e:	68e3      	ldr	r3, [r4, #12]
 800a350:	9903      	ldr	r1, [sp, #12]
 800a352:	1a5b      	subs	r3, r3, r1
 800a354:	42ab      	cmp	r3, r5
 800a356:	dcf2      	bgt.n	800a33e <_printf_i+0x212>
 800a358:	e7eb      	b.n	800a332 <_printf_i+0x206>
 800a35a:	2500      	movs	r5, #0
 800a35c:	f104 0619 	add.w	r6, r4, #25
 800a360:	e7f5      	b.n	800a34e <_printf_i+0x222>
 800a362:	bf00      	nop
 800a364:	0800a571 	.word	0x0800a571
 800a368:	0800a582 	.word	0x0800a582

0800a36c <__malloc_lock>:
 800a36c:	4801      	ldr	r0, [pc, #4]	@ (800a374 <__malloc_lock+0x8>)
 800a36e:	f7ff bc1b 	b.w	8009ba8 <__retarget_lock_acquire_recursive>
 800a372:	bf00      	nop
 800a374:	20005388 	.word	0x20005388

0800a378 <__malloc_unlock>:
 800a378:	4801      	ldr	r0, [pc, #4]	@ (800a380 <__malloc_unlock+0x8>)
 800a37a:	f7ff bc16 	b.w	8009baa <__retarget_lock_release_recursive>
 800a37e:	bf00      	nop
 800a380:	20005388 	.word	0x20005388

0800a384 <_realloc_r>:
 800a384:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a388:	4680      	mov	r8, r0
 800a38a:	4615      	mov	r5, r2
 800a38c:	460c      	mov	r4, r1
 800a38e:	b921      	cbnz	r1, 800a39a <_realloc_r+0x16>
 800a390:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a394:	4611      	mov	r1, r2
 800a396:	f7ff bddb 	b.w	8009f50 <_malloc_r>
 800a39a:	b92a      	cbnz	r2, 800a3a8 <_realloc_r+0x24>
 800a39c:	f7ff fc14 	bl	8009bc8 <_free_r>
 800a3a0:	2400      	movs	r4, #0
 800a3a2:	4620      	mov	r0, r4
 800a3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a8:	f000 f844 	bl	800a434 <_malloc_usable_size_r>
 800a3ac:	4285      	cmp	r5, r0
 800a3ae:	4606      	mov	r6, r0
 800a3b0:	d802      	bhi.n	800a3b8 <_realloc_r+0x34>
 800a3b2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a3b6:	d8f4      	bhi.n	800a3a2 <_realloc_r+0x1e>
 800a3b8:	4629      	mov	r1, r5
 800a3ba:	4640      	mov	r0, r8
 800a3bc:	f7ff fdc8 	bl	8009f50 <_malloc_r>
 800a3c0:	4607      	mov	r7, r0
 800a3c2:	2800      	cmp	r0, #0
 800a3c4:	d0ec      	beq.n	800a3a0 <_realloc_r+0x1c>
 800a3c6:	42b5      	cmp	r5, r6
 800a3c8:	462a      	mov	r2, r5
 800a3ca:	4621      	mov	r1, r4
 800a3cc:	bf28      	it	cs
 800a3ce:	4632      	movcs	r2, r6
 800a3d0:	f7ff fbec 	bl	8009bac <memcpy>
 800a3d4:	4621      	mov	r1, r4
 800a3d6:	4640      	mov	r0, r8
 800a3d8:	f7ff fbf6 	bl	8009bc8 <_free_r>
 800a3dc:	463c      	mov	r4, r7
 800a3de:	e7e0      	b.n	800a3a2 <_realloc_r+0x1e>

0800a3e0 <memmove>:
 800a3e0:	4288      	cmp	r0, r1
 800a3e2:	b510      	push	{r4, lr}
 800a3e4:	eb01 0402 	add.w	r4, r1, r2
 800a3e8:	d902      	bls.n	800a3f0 <memmove+0x10>
 800a3ea:	4284      	cmp	r4, r0
 800a3ec:	4623      	mov	r3, r4
 800a3ee:	d807      	bhi.n	800a400 <memmove+0x20>
 800a3f0:	1e43      	subs	r3, r0, #1
 800a3f2:	42a1      	cmp	r1, r4
 800a3f4:	d008      	beq.n	800a408 <memmove+0x28>
 800a3f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a3fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a3fe:	e7f8      	b.n	800a3f2 <memmove+0x12>
 800a400:	4402      	add	r2, r0
 800a402:	4601      	mov	r1, r0
 800a404:	428a      	cmp	r2, r1
 800a406:	d100      	bne.n	800a40a <memmove+0x2a>
 800a408:	bd10      	pop	{r4, pc}
 800a40a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a40e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a412:	e7f7      	b.n	800a404 <memmove+0x24>

0800a414 <_sbrk_r>:
 800a414:	b538      	push	{r3, r4, r5, lr}
 800a416:	4d06      	ldr	r5, [pc, #24]	@ (800a430 <_sbrk_r+0x1c>)
 800a418:	2300      	movs	r3, #0
 800a41a:	4604      	mov	r4, r0
 800a41c:	4608      	mov	r0, r1
 800a41e:	602b      	str	r3, [r5, #0]
 800a420:	f7f8 fa24 	bl	800286c <_sbrk>
 800a424:	1c43      	adds	r3, r0, #1
 800a426:	d102      	bne.n	800a42e <_sbrk_r+0x1a>
 800a428:	682b      	ldr	r3, [r5, #0]
 800a42a:	b103      	cbz	r3, 800a42e <_sbrk_r+0x1a>
 800a42c:	6023      	str	r3, [r4, #0]
 800a42e:	bd38      	pop	{r3, r4, r5, pc}
 800a430:	20005384 	.word	0x20005384

0800a434 <_malloc_usable_size_r>:
 800a434:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a438:	1f18      	subs	r0, r3, #4
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	bfbc      	itt	lt
 800a43e:	580b      	ldrlt	r3, [r1, r0]
 800a440:	18c0      	addlt	r0, r0, r3
 800a442:	4770      	bx	lr

0800a444 <_init>:
 800a444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a446:	bf00      	nop
 800a448:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a44a:	bc08      	pop	{r3}
 800a44c:	469e      	mov	lr, r3
 800a44e:	4770      	bx	lr

0800a450 <_fini>:
 800a450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a452:	bf00      	nop
 800a454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a456:	bc08      	pop	{r3}
 800a458:	469e      	mov	lr, r3
 800a45a:	4770      	bx	lr
