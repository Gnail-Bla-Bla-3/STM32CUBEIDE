
Custom PWM Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009d00  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  08009e90  08009e90  0000ae90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a038  0800a038  0000c060  2**0
                  CONTENTS
  4 .ARM          00000008  0800a038  0800a038  0000b038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a040  0800a040  0000c060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a040  0800a040  0000b040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a044  0800a044  0000b044  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  0800a048  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c060  2**0
                  CONTENTS
 10 .bss          000053e0  20000060  20000060  0000c060  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005440  20005440  0000c060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ff1f  00000000  00000000  0000c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f7b  00000000  00000000  0002bfaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b80  00000000  00000000  0002ff30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000159d  00000000  00000000  00031ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023cc6  00000000  00000000  0003304d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ec80  00000000  00000000  00056d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd2ef  00000000  00000000  00075993  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00152c82  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007928  00000000  00000000  00152cc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000079  00000000  00000000  0015a5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000060 	.word	0x20000060
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009e78 	.word	0x08009e78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000064 	.word	0x20000064
 80001cc:	08009e78 	.word	0x08009e78

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <usart_Init>:
referee_warning_t referee_warning;
dart_info_t dart_info;

uint8_t mainHeaderOffset = 5;

void usart_Init(void) {
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
	HAL_UARTEx_ReceiveToIdle_DMA(&huart1, RxBuff_1, 256);
 80004c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004c8:	4905      	ldr	r1, [pc, #20]	@ (80004e0 <usart_Init+0x20>)
 80004ca:	4806      	ldr	r0, [pc, #24]	@ (80004e4 <usart_Init+0x24>)
 80004cc:	f005 fd1c 	bl	8005f08 <HAL_UARTEx_ReceiveToIdle_DMA>
	HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 80004d0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004d4:	4904      	ldr	r1, [pc, #16]	@ (80004e8 <usart_Init+0x28>)
 80004d6:	4805      	ldr	r0, [pc, #20]	@ (80004ec <usart_Init+0x2c>)
 80004d8:	f005 fd16 	bl	8005f08 <HAL_UARTEx_ReceiveToIdle_DMA>
}
 80004dc:	bf00      	nop
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	2000007c 	.word	0x2000007c
 80004e4:	200005d4 	.word	0x200005d4
 80004e8:	2000017c 	.word	0x2000017c
 80004ec:	20000664 	.word	0x20000664

080004f0 <HAL_UARTEx_RxEventCallback>:
    len = vsprintf((char *)tx_buf, fmt, ap);           //return length of string
    va_end(ap);
    HAL_UART_Transmit_DMA(&huart1, tx_buf, len);
}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80004f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80004f4:	b09f      	sub	sp, #124	@ 0x7c
 80004f6:	af00      	add	r7, sp, #0
 80004f8:	66f8      	str	r0, [r7, #108]	@ 0x6c
 80004fa:	460b      	mov	r3, r1
 80004fc:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	if (huart == &huart6) {
 8000500:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000502:	4b81      	ldr	r3, [pc, #516]	@ (8000708 <HAL_UARTEx_RxEventCallback+0x218>)
 8000504:	429a      	cmp	r2, r3
 8000506:	f040 81c9 	bne.w	800089c <HAL_UARTEx_RxEventCallback+0x3ac>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart6, RxBuff_2, 256);
 800050a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800050e:	497f      	ldr	r1, [pc, #508]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000510:	487d      	ldr	r0, [pc, #500]	@ (8000708 <HAL_UARTEx_RxEventCallback+0x218>)
 8000512:	f005 fcf9 	bl	8005f08 <HAL_UARTEx_ReceiveToIdle_DMA>
		uint16_t RxBuff16 = ((uint16_t) RxBuff_2[5] << 8) | RxBuff_2[6];
 8000516:	4b7d      	ldr	r3, [pc, #500]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	021b      	lsls	r3, r3, #8
 800051c:	b21a      	sxth	r2, r3
 800051e:	4b7b      	ldr	r3, [pc, #492]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000520:	799b      	ldrb	r3, [r3, #6]
 8000522:	b21b      	sxth	r3, r3
 8000524:	4313      	orrs	r3, r2
 8000526:	b21b      	sxth	r3, r3
 8000528:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		//usart_printf("callback triggered at %d | %d | %d | %d || %d \r\n", RxBuff_2[0], RxBuff_2[1], RxBuff_2[2], RxBuff_2[3], RxBuff16);
		switch (RxBuff16) {
 800052c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	@ 0x76
 8000530:	f240 2302 	movw	r3, #514	@ 0x202
 8000534:	429a      	cmp	r2, r3
 8000536:	f000 8153 	beq.w	80007e0 <HAL_UARTEx_RxEventCallback+0x2f0>
 800053a:	f240 2302 	movw	r3, #514	@ 0x202
 800053e:	429a      	cmp	r2, r3
 8000540:	f300 81ab 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000544:	f240 2301 	movw	r3, #513	@ 0x201
 8000548:	429a      	cmp	r2, r3
 800054a:	f000 80e7 	beq.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 800054e:	f240 2301 	movw	r3, #513	@ 0x201
 8000552:	429a      	cmp	r2, r3
 8000554:	f300 81a1 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000558:	f5b2 7f83 	cmp.w	r2, #262	@ 0x106
 800055c:	f280 819d 	bge.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000560:	f5b2 7f82 	cmp.w	r2, #260	@ 0x104
 8000564:	f280 80da 	bge.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 8000568:	f5b2 7f81 	cmp.w	r2, #258	@ 0x102
 800056c:	f300 8195 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000570:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 8000574:	f300 80d2 	bgt.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 8000578:	2a03      	cmp	r2, #3
 800057a:	f000 80cf 	beq.w	800071c <HAL_UARTEx_RxEventCallback+0x22c>
 800057e:	2a03      	cmp	r2, #3
 8000580:	f300 818b 	bgt.w	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
 8000584:	2a01      	cmp	r2, #1
 8000586:	d003      	beq.n	8000590 <HAL_UARTEx_RxEventCallback+0xa0>
 8000588:	2a02      	cmp	r2, #2
 800058a:	f000 80c3 	beq.w	8000714 <HAL_UARTEx_RxEventCallback+0x224>
		    case MINIMAP_DATA_HEADER: {}
		    case CUSTOM_INFO_HEADER: {}

		    default: {
		    	//usart_printf("no match \r\n");
		        break;
 800058e:	e184      	b.n	800089a <HAL_UARTEx_RxEventCallback+0x3aa>
		    	game_status.game_type = RxBuff_2[7];
 8000590:	4b5e      	ldr	r3, [pc, #376]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000592:	79db      	ldrb	r3, [r3, #7]
 8000594:	4a5e      	ldr	r2, [pc, #376]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 8000596:	7013      	strb	r3, [r2, #0]
		    	game_status.game_progress = RxBuff_2[8];
 8000598:	4b5c      	ldr	r3, [pc, #368]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 800059a:	7a1b      	ldrb	r3, [r3, #8]
 800059c:	4a5c      	ldr	r2, [pc, #368]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 800059e:	7053      	strb	r3, [r2, #1]
		    	game_status.stage_remain_time = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 80005a0:	4b5a      	ldr	r3, [pc, #360]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005a2:	7a5b      	ldrb	r3, [r3, #9]
 80005a4:	021b      	lsls	r3, r3, #8
 80005a6:	b21a      	sxth	r2, r3
 80005a8:	4b58      	ldr	r3, [pc, #352]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005aa:	7a9b      	ldrb	r3, [r3, #10]
 80005ac:	b21b      	sxth	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b21b      	sxth	r3, r3
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	4a56      	ldr	r2, [pc, #344]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 80005b6:	8053      	strh	r3, [r2, #2]
		    		((uint64_t) RxBuff_2[11] << 56) |
 80005b8:	4b54      	ldr	r3, [pc, #336]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005ba:	7adb      	ldrb	r3, [r3, #11]
 80005bc:	b2db      	uxtb	r3, r3
 80005be:	2200      	movs	r2, #0
 80005c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80005c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80005c4:	f04f 0000 	mov.w	r0, #0
 80005c8:	f04f 0100 	mov.w	r1, #0
 80005cc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80005ce:	0619      	lsls	r1, r3, #24
 80005d0:	2000      	movs	r0, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 80005d2:	4b4e      	ldr	r3, [pc, #312]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005d4:	7b1b      	ldrb	r3, [r3, #12]
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	2200      	movs	r2, #0
 80005da:	65bb      	str	r3, [r7, #88]	@ 0x58
 80005dc:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80005de:	f04f 0200 	mov.w	r2, #0
 80005e2:	f04f 0300 	mov.w	r3, #0
 80005e6:	6dbe      	ldr	r6, [r7, #88]	@ 0x58
 80005e8:	0433      	lsls	r3, r6, #16
 80005ea:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[11] << 56) |
 80005ec:	ea40 0402 	orr.w	r4, r0, r2
 80005f0:	ea41 0503 	orr.w	r5, r1, r3
		    		((uint64_t) RxBuff_2[13] << 40) |
 80005f4:	4b45      	ldr	r3, [pc, #276]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80005f6:	7b5b      	ldrb	r3, [r3, #13]
 80005f8:	b2db      	uxtb	r3, r3
 80005fa:	2200      	movs	r2, #0
 80005fc:	653b      	str	r3, [r7, #80]	@ 0x50
 80005fe:	657a      	str	r2, [r7, #84]	@ 0x54
 8000600:	f04f 0200 	mov.w	r2, #0
 8000604:	f04f 0300 	mov.w	r3, #0
 8000608:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800060a:	020b      	lsls	r3, r1, #8
 800060c:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[12] << 48) |
 800060e:	ea44 0802 	orr.w	r8, r4, r2
 8000612:	ea45 0903 	orr.w	r9, r5, r3
		    		((uint64_t) RxBuff_2[14] << 32) |
 8000616:	4b3d      	ldr	r3, [pc, #244]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 8000618:	7b9b      	ldrb	r3, [r3, #14]
 800061a:	b2db      	uxtb	r3, r3
 800061c:	2200      	movs	r2, #0
 800061e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000620:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000622:	f04f 0200 	mov.w	r2, #0
 8000626:	f04f 0300 	mov.w	r3, #0
 800062a:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 800062c:	000b      	movs	r3, r1
 800062e:	2200      	movs	r2, #0
		    		((uint64_t) RxBuff_2[13] << 40) |
 8000630:	ea48 0102 	orr.w	r1, r8, r2
 8000634:	6439      	str	r1, [r7, #64]	@ 0x40
 8000636:	ea49 0303 	orr.w	r3, r9, r3
 800063a:	647b      	str	r3, [r7, #68]	@ 0x44
		    		((uint64_t) RxBuff_2[15] << 24) |
 800063c:	4b33      	ldr	r3, [pc, #204]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 800063e:	7bdb      	ldrb	r3, [r3, #15]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	2200      	movs	r2, #0
 8000644:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000646:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8000648:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800064c:	460b      	mov	r3, r1
 800064e:	ea4f 2b13 	mov.w	fp, r3, lsr #8
 8000652:	460b      	mov	r3, r1
 8000654:	ea4f 6a03 	mov.w	sl, r3, lsl #24
		    		((uint64_t) RxBuff_2[14] << 32) |
 8000658:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800065c:	460b      	mov	r3, r1
 800065e:	ea43 030a 	orr.w	r3, r3, sl
 8000662:	633b      	str	r3, [r7, #48]	@ 0x30
 8000664:	4613      	mov	r3, r2
 8000666:	ea43 030b 	orr.w	r3, r3, fp
 800066a:	637b      	str	r3, [r7, #52]	@ 0x34
		    		((uint64_t) RxBuff_2[16] << 16) |
 800066c:	4b27      	ldr	r3, [pc, #156]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 800066e:	7c1b      	ldrb	r3, [r3, #16]
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2200      	movs	r2, #0
 8000674:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000676:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000678:	f04f 0200 	mov.w	r2, #0
 800067c:	f04f 0300 	mov.w	r3, #0
 8000680:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8000684:	4629      	mov	r1, r5
 8000686:	040b      	lsls	r3, r1, #16
 8000688:	4621      	mov	r1, r4
 800068a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800068e:	4621      	mov	r1, r4
 8000690:	040a      	lsls	r2, r1, #16
		    		((uint64_t) RxBuff_2[15] << 24) |
 8000692:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8000696:	4621      	mov	r1, r4
 8000698:	4311      	orrs	r1, r2
 800069a:	6239      	str	r1, [r7, #32]
 800069c:	4629      	mov	r1, r5
 800069e:	4319      	orrs	r1, r3
 80006a0:	6279      	str	r1, [r7, #36]	@ 0x24
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80006a4:	7c5b      	ldrb	r3, [r3, #17]
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	2200      	movs	r2, #0
 80006aa:	61bb      	str	r3, [r7, #24]
 80006ac:	61fa      	str	r2, [r7, #28]
 80006ae:	f04f 0200 	mov.w	r2, #0
 80006b2:	f04f 0300 	mov.w	r3, #0
 80006b6:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 80006ba:	4629      	mov	r1, r5
 80006bc:	020b      	lsls	r3, r1, #8
 80006be:	4621      	mov	r1, r4
 80006c0:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 80006c4:	4621      	mov	r1, r4
 80006c6:	020a      	lsls	r2, r1, #8
		    		((uint64_t) RxBuff_2[16] << 16) |
 80006c8:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80006cc:	4621      	mov	r1, r4
 80006ce:	4311      	orrs	r1, r2
 80006d0:	6139      	str	r1, [r7, #16]
 80006d2:	4629      	mov	r1, r5
 80006d4:	4319      	orrs	r1, r3
 80006d6:	6179      	str	r1, [r7, #20]
		    		((uint64_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 80006d8:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <HAL_UARTEx_RxEventCallback+0x21c>)
 80006da:	7c9b      	ldrb	r3, [r3, #18]
 80006dc:	b2db      	uxtb	r3, r3
 80006de:	2200      	movs	r2, #0
 80006e0:	60bb      	str	r3, [r7, #8]
 80006e2:	60fa      	str	r2, [r7, #12]
 80006e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80006e8:	4623      	mov	r3, r4
 80006ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80006ee:	4602      	mov	r2, r0
 80006f0:	4313      	orrs	r3, r2
 80006f2:	603b      	str	r3, [r7, #0]
 80006f4:	462b      	mov	r3, r5
 80006f6:	460a      	mov	r2, r1
 80006f8:	4313      	orrs	r3, r2
 80006fa:	607b      	str	r3, [r7, #4]
		    	game_status.SyncTimeStamp =
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <HAL_UARTEx_RxEventCallback+0x220>)
 80006fe:	e9d7 1200 	ldrd	r1, r2, [r7]
 8000702:	e9c3 1202 	strd	r1, r2, [r3, #8]
		    	break;
 8000706:	e0c9      	b.n	800089c <HAL_UARTEx_RxEventCallback+0x3ac>
 8000708:	20000664 	.word	0x20000664
 800070c:	2000017c 	.word	0x2000017c
 8000710:	20000280 	.word	0x20000280
		    	game_status.game_type = RxBuff_2[7];
 8000714:	4b64      	ldr	r3, [pc, #400]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000716:	79da      	ldrb	r2, [r3, #7]
 8000718:	4b64      	ldr	r3, [pc, #400]	@ (80008ac <HAL_UARTEx_RxEventCallback+0x3bc>)
 800071a:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_id = RxBuff_2[7];
 800071c:	4b62      	ldr	r3, [pc, #392]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800071e:	79da      	ldrb	r2, [r3, #7]
 8000720:	4b63      	ldr	r3, [pc, #396]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000722:	701a      	strb	r2, [r3, #0]
		    	robot_status.robot_level = RxBuff_2[8];
 8000724:	4b60      	ldr	r3, [pc, #384]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000726:	7a1a      	ldrb	r2, [r3, #8]
 8000728:	4b61      	ldr	r3, [pc, #388]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800072a:	705a      	strb	r2, [r3, #1]
		    	robot_status.current_HP = ((uint16_t) RxBuff_2[9] << 8) | RxBuff_2[10];
 800072c:	4b5e      	ldr	r3, [pc, #376]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800072e:	7a5b      	ldrb	r3, [r3, #9]
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	b21a      	sxth	r2, r3
 8000734:	4b5c      	ldr	r3, [pc, #368]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000736:	7a9b      	ldrb	r3, [r3, #10]
 8000738:	b21b      	sxth	r3, r3
 800073a:	4313      	orrs	r3, r2
 800073c:	b21b      	sxth	r3, r3
 800073e:	b29a      	uxth	r2, r3
 8000740:	4b5b      	ldr	r3, [pc, #364]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000742:	805a      	strh	r2, [r3, #2]
		    	robot_status.maximum_HP = ((uint16_t) RxBuff_2[11] << 8) | RxBuff_2[12];
 8000744:	4b58      	ldr	r3, [pc, #352]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000746:	7adb      	ldrb	r3, [r3, #11]
 8000748:	021b      	lsls	r3, r3, #8
 800074a:	b21a      	sxth	r2, r3
 800074c:	4b56      	ldr	r3, [pc, #344]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800074e:	7b1b      	ldrb	r3, [r3, #12]
 8000750:	b21b      	sxth	r3, r3
 8000752:	4313      	orrs	r3, r2
 8000754:	b21b      	sxth	r3, r3
 8000756:	b29a      	uxth	r2, r3
 8000758:	4b55      	ldr	r3, [pc, #340]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800075a:	809a      	strh	r2, [r3, #4]
		    	robot_status.shooter_barrel_cooling_value = ((uint16_t) RxBuff_2[13] << 8) | RxBuff_2[14];
 800075c:	4b52      	ldr	r3, [pc, #328]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800075e:	7b5b      	ldrb	r3, [r3, #13]
 8000760:	021b      	lsls	r3, r3, #8
 8000762:	b21a      	sxth	r2, r3
 8000764:	4b50      	ldr	r3, [pc, #320]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000766:	7b9b      	ldrb	r3, [r3, #14]
 8000768:	b21b      	sxth	r3, r3
 800076a:	4313      	orrs	r3, r2
 800076c:	b21b      	sxth	r3, r3
 800076e:	b29a      	uxth	r2, r3
 8000770:	4b4f      	ldr	r3, [pc, #316]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 8000772:	80da      	strh	r2, [r3, #6]
		    	robot_status.shooter_barrel_heat_limit = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 8000774:	4b4c      	ldr	r3, [pc, #304]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000776:	7bdb      	ldrb	r3, [r3, #15]
 8000778:	021b      	lsls	r3, r3, #8
 800077a:	b21a      	sxth	r2, r3
 800077c:	4b4a      	ldr	r3, [pc, #296]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800077e:	7c1b      	ldrb	r3, [r3, #16]
 8000780:	b21b      	sxth	r3, r3
 8000782:	4313      	orrs	r3, r2
 8000784:	b21b      	sxth	r3, r3
 8000786:	b29a      	uxth	r2, r3
 8000788:	4b49      	ldr	r3, [pc, #292]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 800078a:	811a      	strh	r2, [r3, #8]
		    	robot_status.chassis_power_limit = ((uint16_t) RxBuff_2[17] << 8) | RxBuff_2[18];
 800078c:	4b46      	ldr	r3, [pc, #280]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800078e:	7c5b      	ldrb	r3, [r3, #17]
 8000790:	021b      	lsls	r3, r3, #8
 8000792:	b21a      	sxth	r2, r3
 8000794:	4b44      	ldr	r3, [pc, #272]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000796:	7c9b      	ldrb	r3, [r3, #18]
 8000798:	b21b      	sxth	r3, r3
 800079a:	4313      	orrs	r3, r2
 800079c:	b21b      	sxth	r3, r3
 800079e:	b29a      	uxth	r2, r3
 80007a0:	4b43      	ldr	r3, [pc, #268]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007a2:	815a      	strh	r2, [r3, #10]
		    	robot_status.power_management_gimbal_output = RxBuff_2[19];
 80007a4:	4b40      	ldr	r3, [pc, #256]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007a6:	7cdb      	ldrb	r3, [r3, #19]
 80007a8:	f003 0301 	and.w	r3, r3, #1
 80007ac:	b2d9      	uxtb	r1, r3
 80007ae:	4a40      	ldr	r2, [pc, #256]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007b0:	7b13      	ldrb	r3, [r2, #12]
 80007b2:	f361 0300 	bfi	r3, r1, #0, #1
 80007b6:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_chassis_output = RxBuff_2[20];
 80007b8:	4b3b      	ldr	r3, [pc, #236]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007ba:	7d1b      	ldrb	r3, [r3, #20]
 80007bc:	f003 0301 	and.w	r3, r3, #1
 80007c0:	b2d9      	uxtb	r1, r3
 80007c2:	4a3b      	ldr	r2, [pc, #236]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007c4:	7b13      	ldrb	r3, [r2, #12]
 80007c6:	f361 0341 	bfi	r3, r1, #1, #1
 80007ca:	7313      	strb	r3, [r2, #12]
		    	robot_status.power_management_shooter_output = RxBuff_2[21];
 80007cc:	4b36      	ldr	r3, [pc, #216]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007ce:	7d5b      	ldrb	r3, [r3, #21]
 80007d0:	f003 0301 	and.w	r3, r3, #1
 80007d4:	b2d9      	uxtb	r1, r3
 80007d6:	4a36      	ldr	r2, [pc, #216]	@ (80008b0 <HAL_UARTEx_RxEventCallback+0x3c0>)
 80007d8:	7b13      	ldrb	r3, [r2, #12]
 80007da:	f361 0382 	bfi	r3, r1, #2, #1
 80007de:	7313      	strb	r3, [r2, #12]
		    	power_heat_data.chassis_voltage = ((uint16_t) RxBuff_2[8] << 8) | RxBuff_2[7];
 80007e0:	4b31      	ldr	r3, [pc, #196]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007e2:	7a1b      	ldrb	r3, [r3, #8]
 80007e4:	021b      	lsls	r3, r3, #8
 80007e6:	b21a      	sxth	r2, r3
 80007e8:	4b2f      	ldr	r3, [pc, #188]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007ea:	79db      	ldrb	r3, [r3, #7]
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	4313      	orrs	r3, r2
 80007f0:	b21b      	sxth	r3, r3
 80007f2:	b29a      	uxth	r2, r3
 80007f4:	4b2f      	ldr	r3, [pc, #188]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 80007f6:	801a      	strh	r2, [r3, #0]
		    	power_heat_data.chassis_current = ((uint16_t) RxBuff_2[10] << 8) | RxBuff_2[9];
 80007f8:	4b2b      	ldr	r3, [pc, #172]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 80007fa:	7a9b      	ldrb	r3, [r3, #10]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b21a      	sxth	r2, r3
 8000800:	4b29      	ldr	r3, [pc, #164]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000802:	7a5b      	ldrb	r3, [r3, #9]
 8000804:	b21b      	sxth	r3, r3
 8000806:	4313      	orrs	r3, r2
 8000808:	b21b      	sxth	r3, r3
 800080a:	b29a      	uxth	r2, r3
 800080c:	4b29      	ldr	r3, [pc, #164]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 800080e:	805a      	strh	r2, [r3, #2]
		    	power_heat_data.chassis_power = ((uint32_t) RxBuff_2[14] << 24) | ((uint32_t) RxBuff_2[13] << 16) | ((uint32_t) RxBuff_2[12] << 8) | RxBuff_2[11];
 8000810:	4b25      	ldr	r3, [pc, #148]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000812:	7b9b      	ldrb	r3, [r3, #14]
 8000814:	061a      	lsls	r2, r3, #24
 8000816:	4b24      	ldr	r3, [pc, #144]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000818:	7b5b      	ldrb	r3, [r3, #13]
 800081a:	041b      	lsls	r3, r3, #16
 800081c:	431a      	orrs	r2, r3
 800081e:	4b22      	ldr	r3, [pc, #136]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000820:	7b1b      	ldrb	r3, [r3, #12]
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	4313      	orrs	r3, r2
 8000826:	4a20      	ldr	r2, [pc, #128]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000828:	7ad2      	ldrb	r2, [r2, #11]
 800082a:	4313      	orrs	r3, r2
 800082c:	ee07 3a90 	vmov	s15, r3
 8000830:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000834:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000836:	edc3 7a01 	vstr	s15, [r3, #4]
		    	power_heat_data.buffer_energy = ((uint16_t) RxBuff_2[15] << 8) | RxBuff_2[16];
 800083a:	4b1b      	ldr	r3, [pc, #108]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800083c:	7bdb      	ldrb	r3, [r3, #15]
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	b21a      	sxth	r2, r3
 8000842:	4b19      	ldr	r3, [pc, #100]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000844:	7c1b      	ldrb	r3, [r3, #16]
 8000846:	b21b      	sxth	r3, r3
 8000848:	4313      	orrs	r3, r2
 800084a:	b21b      	sxth	r3, r3
 800084c:	b29a      	uxth	r2, r3
 800084e:	4b19      	ldr	r3, [pc, #100]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000850:	811a      	strh	r2, [r3, #8]
		    	power_heat_data.shooter_17mm_1_barrel_heat = ((uint16_t) RxBuff_2[18] << 8) | RxBuff_2[17];
 8000852:	4b15      	ldr	r3, [pc, #84]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000854:	7c9b      	ldrb	r3, [r3, #18]
 8000856:	021b      	lsls	r3, r3, #8
 8000858:	b21a      	sxth	r2, r3
 800085a:	4b13      	ldr	r3, [pc, #76]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800085c:	7c5b      	ldrb	r3, [r3, #17]
 800085e:	b21b      	sxth	r3, r3
 8000860:	4313      	orrs	r3, r2
 8000862:	b21b      	sxth	r3, r3
 8000864:	b29a      	uxth	r2, r3
 8000866:	4b13      	ldr	r3, [pc, #76]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000868:	815a      	strh	r2, [r3, #10]
		    	power_heat_data.shooter_17mm_2_barrel_heat = ((uint16_t) RxBuff_2[20] << 8) | RxBuff_2[19];
 800086a:	4b0f      	ldr	r3, [pc, #60]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800086c:	7d1b      	ldrb	r3, [r3, #20]
 800086e:	021b      	lsls	r3, r3, #8
 8000870:	b21a      	sxth	r2, r3
 8000872:	4b0d      	ldr	r3, [pc, #52]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000874:	7cdb      	ldrb	r3, [r3, #19]
 8000876:	b21b      	sxth	r3, r3
 8000878:	4313      	orrs	r3, r2
 800087a:	b21b      	sxth	r3, r3
 800087c:	b29a      	uxth	r2, r3
 800087e:	4b0d      	ldr	r3, [pc, #52]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000880:	819a      	strh	r2, [r3, #12]
		    	power_heat_data.shooter_42mm_barrel_heat = ((uint16_t) RxBuff_2[22] << 8) | RxBuff_2[21];
 8000882:	4b09      	ldr	r3, [pc, #36]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 8000884:	7d9b      	ldrb	r3, [r3, #22]
 8000886:	021b      	lsls	r3, r3, #8
 8000888:	b21a      	sxth	r2, r3
 800088a:	4b07      	ldr	r3, [pc, #28]	@ (80008a8 <HAL_UARTEx_RxEventCallback+0x3b8>)
 800088c:	7d5b      	ldrb	r3, [r3, #21]
 800088e:	b21b      	sxth	r3, r3
 8000890:	4313      	orrs	r3, r2
 8000892:	b21b      	sxth	r3, r3
 8000894:	b29a      	uxth	r2, r3
 8000896:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <HAL_UARTEx_RxEventCallback+0x3c4>)
 8000898:	81da      	strh	r2, [r3, #14]
		        break;
 800089a:	bf00      	nop
		    }
		}
	}
}
 800089c:	bf00      	nop
 800089e:	377c      	adds	r7, #124	@ 0x7c
 80008a0:	46bd      	mov	sp, r7
 80008a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008a6:	bf00      	nop
 80008a8:	2000017c 	.word	0x2000017c
 80008ac:	20000280 	.word	0x20000280
 80008b0:	200002a0 	.word	0x200002a0
 80008b4:	20000290 	.word	0x20000290

080008b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008bc:	f002 fa28 	bl	8002d10 <HAL_Init>

  /* USER CODE BEGIN Init */
  usart_Init();
 80008c0:	f7ff fdfe 	bl	80004c0 <usart_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c4:	f000 f85a 	bl	800097c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c8:	f000 fcea 	bl	80012a0 <MX_GPIO_Init>
  MX_DMA_Init();
 80008cc:	f000 fc8a 	bl	80011e4 <MX_DMA_Init>
  MX_CAN1_Init();
 80008d0:	f000 f8c0 	bl	8000a54 <MX_CAN1_Init>
  MX_CAN2_Init();
 80008d4:	f000 f8f4 	bl	8000ac0 <MX_CAN2_Init>
  MX_SPI1_Init();
 80008d8:	f000 f956 	bl	8000b88 <MX_SPI1_Init>
  MX_TIM4_Init();
 80008dc:	f000 fa32 	bl	8000d44 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 80008e0:	f000 fc00 	bl	80010e4 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80008e4:	f000 fc54 	bl	8001190 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 80008e8:	f000 f984 	bl	8000bf4 <MX_TIM1_Init>
  MX_TIM8_Init();
 80008ec:	f000 fb10 	bl	8000f10 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 80008f0:	f000 fc22 	bl	8001138 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 80008f4:	f000 fba8 	bl	8001048 <MX_TIM10_Init>
  MX_I2C3_Init();
 80008f8:	f000 f918 	bl	8000b2c <MX_I2C3_Init>
  MX_TIM5_Init();
 80008fc:	f000 fa98 	bl	8000e30 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000900:	f006 fc20 	bl	8007144 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(TaskMain, NULL, &defaultTask_attributes);
 8000904:	4a11      	ldr	r2, [pc, #68]	@ (800094c <main+0x94>)
 8000906:	2100      	movs	r1, #0
 8000908:	4811      	ldr	r0, [pc, #68]	@ (8000950 <main+0x98>)
 800090a:	f006 fc65 	bl	80071d8 <osThreadNew>
 800090e:	4603      	mov	r3, r0
 8000910:	4a10      	ldr	r2, [pc, #64]	@ (8000954 <main+0x9c>)
 8000912:	6013      	str	r3, [r2, #0]

  /* creation of chassisTask */
  chassisTaskHandle = osThreadNew(TaskChassis, NULL, &chassisTask_attributes);
 8000914:	4a10      	ldr	r2, [pc, #64]	@ (8000958 <main+0xa0>)
 8000916:	2100      	movs	r1, #0
 8000918:	4810      	ldr	r0, [pc, #64]	@ (800095c <main+0xa4>)
 800091a:	f006 fc5d 	bl	80071d8 <osThreadNew>
 800091e:	4603      	mov	r3, r0
 8000920:	4a0f      	ldr	r2, [pc, #60]	@ (8000960 <main+0xa8>)
 8000922:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8000924:	4a0f      	ldr	r2, [pc, #60]	@ (8000964 <main+0xac>)
 8000926:	2100      	movs	r1, #0
 8000928:	480f      	ldr	r0, [pc, #60]	@ (8000968 <main+0xb0>)
 800092a:	f006 fc55 	bl	80071d8 <osThreadNew>
 800092e:	4603      	mov	r3, r0
 8000930:	4a0e      	ldr	r2, [pc, #56]	@ (800096c <main+0xb4>)
 8000932:	6013      	str	r3, [r2, #0]

  /* creation of turretTask */
  turretTaskHandle = osThreadNew(TaskTurret, NULL, &turretTask_attributes);
 8000934:	4a0e      	ldr	r2, [pc, #56]	@ (8000970 <main+0xb8>)
 8000936:	2100      	movs	r1, #0
 8000938:	480e      	ldr	r0, [pc, #56]	@ (8000974 <main+0xbc>)
 800093a:	f006 fc4d 	bl	80071d8 <osThreadNew>
 800093e:	4603      	mov	r3, r0
 8000940:	4a0d      	ldr	r2, [pc, #52]	@ (8000978 <main+0xc0>)
 8000942:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000944:	f006 fc22 	bl	800718c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000948:	bf00      	nop
 800094a:	e7fd      	b.n	8000948 <main+0x90>
 800094c:	08009f88 	.word	0x08009f88
 8000950:	080014ad 	.word	0x080014ad
 8000954:	2000088c 	.word	0x2000088c
 8000958:	08009fac 	.word	0x08009fac
 800095c:	080014bd 	.word	0x080014bd
 8000960:	20000890 	.word	0x20000890
 8000964:	08009fd0 	.word	0x08009fd0
 8000968:	08001909 	.word	0x08001909
 800096c:	20000894 	.word	0x20000894
 8000970:	08009ff4 	.word	0x08009ff4
 8000974:	08001919 	.word	0x08001919
 8000978:	20000898 	.word	0x20000898

0800097c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b094      	sub	sp, #80	@ 0x50
 8000980:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000982:	f107 0320 	add.w	r3, r7, #32
 8000986:	2230      	movs	r2, #48	@ 0x30
 8000988:	2100      	movs	r1, #0
 800098a:	4618      	mov	r0, r3
 800098c:	f009 f98c 	bl	8009ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000990:	f107 030c 	add.w	r3, r7, #12
 8000994:	2200      	movs	r2, #0
 8000996:	601a      	str	r2, [r3, #0]
 8000998:	605a      	str	r2, [r3, #4]
 800099a:	609a      	str	r2, [r3, #8]
 800099c:	60da      	str	r2, [r3, #12]
 800099e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a0:	2300      	movs	r3, #0
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	4b29      	ldr	r3, [pc, #164]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a8:	4a28      	ldr	r2, [pc, #160]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b0:	4b26      	ldr	r3, [pc, #152]	@ (8000a4c <SystemClock_Config+0xd0>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009b8:	60bb      	str	r3, [r7, #8]
 80009ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009bc:	2300      	movs	r3, #0
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	4b23      	ldr	r3, [pc, #140]	@ (8000a50 <SystemClock_Config+0xd4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a22      	ldr	r2, [pc, #136]	@ (8000a50 <SystemClock_Config+0xd4>)
 80009c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ca:	6013      	str	r3, [r2, #0]
 80009cc:	4b20      	ldr	r3, [pc, #128]	@ (8000a50 <SystemClock_Config+0xd4>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009d4:	607b      	str	r3, [r7, #4]
 80009d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009d8:	2301      	movs	r3, #1
 80009da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009dc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009e2:	2302      	movs	r3, #2
 80009e4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009e6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80009ec:	2306      	movs	r3, #6
 80009ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80009f0:	23a8      	movs	r3, #168	@ 0xa8
 80009f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009f4:	2302      	movs	r3, #2
 80009f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009f8:	2304      	movs	r3, #4
 80009fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009fc:	f107 0320 	add.w	r3, r7, #32
 8000a00:	4618      	mov	r0, r3
 8000a02:	f003 fd75 	bl	80044f0 <HAL_RCC_OscConfig>
 8000a06:	4603      	mov	r3, r0
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d001      	beq.n	8000a10 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a0c:	f000 ff8c 	bl	8001928 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a10:	230f      	movs	r3, #15
 8000a12:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a14:	2302      	movs	r3, #2
 8000a16:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a1c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a20:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a26:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a28:	f107 030c 	add.w	r3, r7, #12
 8000a2c:	2105      	movs	r1, #5
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f003 ffd6 	bl	80049e0 <HAL_RCC_ClockConfig>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000a3a:	f000 ff75 	bl	8001928 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000a3e:	f004 f8b5 	bl	8004bac <HAL_RCC_EnableCSS>
}
 8000a42:	bf00      	nop
 8000a44:	3750      	adds	r7, #80	@ 0x50
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800
 8000a50:	40007000 	.word	0x40007000

08000a54 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000a58:	4b17      	ldr	r3, [pc, #92]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a5a:	4a18      	ldr	r2, [pc, #96]	@ (8000abc <MX_CAN1_Init+0x68>)
 8000a5c:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000a5e:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a60:	2203      	movs	r2, #3
 8000a62:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000a64:	4b14      	ldr	r3, [pc, #80]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000a6a:	4b13      	ldr	r3, [pc, #76]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000a70:	4b11      	ldr	r3, [pc, #68]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a72:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000a76:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a7a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000a7e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000a80:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000a86:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000a92:	4b09      	ldr	r3, [pc, #36]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000a98:	4b07      	ldr	r3, [pc, #28]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000a9e:	4b06      	ldr	r3, [pc, #24]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <MX_CAN1_Init+0x64>)
 8000aa6:	f002 f9a5 	bl	8002df4 <HAL_CAN_Init>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d001      	beq.n	8000ab4 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000ab0:	f000 ff3a 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000ab4:	bf00      	nop
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	200002b0 	.word	0x200002b0
 8000abc:	40006400 	.word	0x40006400

08000ac0 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8000ac4:	4b17      	ldr	r3, [pc, #92]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ac6:	4a18      	ldr	r2, [pc, #96]	@ (8000b28 <MX_CAN2_Init+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8000aca:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000acc:	2203      	movs	r2, #3
 8000ace:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000ad0:	4b14      	ldr	r3, [pc, #80]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000ad6:	4b13      	ldr	r3, [pc, #76]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8000adc:	4b11      	ldr	r3, [pc, #68]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ade:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8000ae2:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8000ae4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000ae6:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000aea:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000aec:	4b0d      	ldr	r3, [pc, #52]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8000af2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000af8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000afe:	4b09      	ldr	r3, [pc, #36]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8000b04:	4b07      	ldr	r3, [pc, #28]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000b0a:	4b06      	ldr	r3, [pc, #24]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000b10:	4804      	ldr	r0, [pc, #16]	@ (8000b24 <MX_CAN2_Init+0x64>)
 8000b12:	f002 f96f 	bl	8002df4 <HAL_CAN_Init>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000b1c:	f000 ff04 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000b20:	bf00      	nop
 8000b22:	bd80      	pop	{r7, pc}
 8000b24:	200002d8 	.word	0x200002d8
 8000b28:	40006800 	.word	0x40006800

08000b2c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b30:	4b12      	ldr	r3, [pc, #72]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b32:	4a13      	ldr	r2, [pc, #76]	@ (8000b80 <MX_I2C3_Init+0x54>)
 8000b34:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000b36:	4b11      	ldr	r3, [pc, #68]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b38:	4a12      	ldr	r2, [pc, #72]	@ (8000b84 <MX_I2C3_Init+0x58>)
 8000b3a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b42:	4b0e      	ldr	r3, [pc, #56]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b48:	4b0c      	ldr	r3, [pc, #48]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b4a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b4e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b50:	4b0a      	ldr	r3, [pc, #40]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b56:	4b09      	ldr	r3, [pc, #36]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b5c:	4b07      	ldr	r3, [pc, #28]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b62:	4b06      	ldr	r3, [pc, #24]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000b68:	4804      	ldr	r0, [pc, #16]	@ (8000b7c <MX_I2C3_Init+0x50>)
 8000b6a:	f003 fb7d 	bl	8004268 <HAL_I2C_Init>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000b74:	f000 fed8 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000b78:	bf00      	nop
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000300 	.word	0x20000300
 8000b80:	40005c00 	.word	0x40005c00
 8000b84:	00061a80 	.word	0x00061a80

08000b88 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b8c:	4b17      	ldr	r3, [pc, #92]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000b8e:	4a18      	ldr	r2, [pc, #96]	@ (8000bf0 <MX_SPI1_Init+0x68>)
 8000b90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b92:	4b16      	ldr	r3, [pc, #88]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000b94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b9a:	4b14      	ldr	r3, [pc, #80]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000ba6:	4b11      	ldr	r3, [pc, #68]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000ba8:	2202      	movs	r2, #2
 8000baa:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000bac:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bae:	2201      	movs	r2, #1
 8000bb0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000bb8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bbc:	2238      	movs	r2, #56	@ 0x38
 8000bbe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bcc:	4b07      	ldr	r3, [pc, #28]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bd4:	220a      	movs	r2, #10
 8000bd6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd8:	4804      	ldr	r0, [pc, #16]	@ (8000bec <MX_SPI1_Init+0x64>)
 8000bda:	f004 f908 	bl	8004dee <HAL_SPI_Init>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be4:	f000 fea0 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be8:	bf00      	nop
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	20000354 	.word	0x20000354
 8000bf0:	40013000 	.word	0x40013000

08000bf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b092      	sub	sp, #72	@ 0x48
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bfa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
 8000c10:	60da      	str	r2, [r3, #12]
 8000c12:	611a      	str	r2, [r3, #16]
 8000c14:	615a      	str	r2, [r3, #20]
 8000c16:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c18:	1d3b      	adds	r3, r7, #4
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f009 f842 	bl	8009ca8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c24:	4b45      	ldr	r3, [pc, #276]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c26:	4a46      	ldr	r2, [pc, #280]	@ (8000d40 <MX_TIM1_Init+0x14c>)
 8000c28:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 335;
 8000c2a:	4b44      	ldr	r3, [pc, #272]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c2c:	f240 124f 	movw	r2, #335	@ 0x14f
 8000c30:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c32:	4b42      	ldr	r3, [pc, #264]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000c38:	4b40      	ldr	r3, [pc, #256]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c3a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c3e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c40:	4b3e      	ldr	r3, [pc, #248]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c46:	4b3d      	ldr	r3, [pc, #244]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000c52:	483a      	ldr	r0, [pc, #232]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c54:	f004 fa0c 	bl	8005070 <HAL_TIM_PWM_Init>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8000c5e:	f000 fe63 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c6a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4832      	ldr	r0, [pc, #200]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000c72:	f005 f82b 	bl	8005ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f000 fe54 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c80:	2360      	movs	r3, #96	@ 0x60
 8000c82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c90:	2300      	movs	r3, #0
 8000c92:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c9c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	4619      	mov	r1, r3
 8000ca4:	4825      	ldr	r0, [pc, #148]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000ca6:	f004 fb6b 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000cb0:	f000 fe3a 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000cb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb8:	2204      	movs	r2, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	481f      	ldr	r0, [pc, #124]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000cbe:	f004 fb5f 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_TIM1_Init+0xd8>
  {
    Error_Handler();
 8000cc8:	f000 fe2e 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	2208      	movs	r2, #8
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4819      	ldr	r0, [pc, #100]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000cd6:	f004 fb53 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000cda:	4603      	mov	r3, r0
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d001      	beq.n	8000ce4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8000ce0:	f000 fe22 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000ce4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce8:	220c      	movs	r2, #12
 8000cea:	4619      	mov	r1, r3
 8000cec:	4813      	ldr	r0, [pc, #76]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000cee:	f004 fb47 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d001      	beq.n	8000cfc <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8000cf8:	f000 fe16 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000d00:	2300      	movs	r3, #0
 8000d02:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000d10:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d14:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d16:	2300      	movs	r3, #0
 8000d18:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000d1a:	1d3b      	adds	r3, r7, #4
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4807      	ldr	r0, [pc, #28]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000d20:	f005 f850 	bl	8005dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d001      	beq.n	8000d2e <MX_TIM1_Init+0x13a>
  {
    Error_Handler();
 8000d2a:	f000 fdfd 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000d2e:	4803      	ldr	r0, [pc, #12]	@ (8000d3c <MX_TIM1_Init+0x148>)
 8000d30:	f001 fc1c 	bl	800256c <HAL_TIM_MspPostInit>

}
 8000d34:	bf00      	nop
 8000d36:	3748      	adds	r7, #72	@ 0x48
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	200003ac 	.word	0x200003ac
 8000d40:	40010000 	.word	0x40010000

08000d44 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08e      	sub	sp, #56	@ 0x38
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d4e:	2200      	movs	r2, #0
 8000d50:	601a      	str	r2, [r3, #0]
 8000d52:	605a      	str	r2, [r3, #4]
 8000d54:	609a      	str	r2, [r3, #8]
 8000d56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d58:	f107 0320 	add.w	r3, r7, #32
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
 8000d60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
 8000d70:	615a      	str	r2, [r3, #20]
 8000d72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000d74:	4b2c      	ldr	r3, [pc, #176]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d76:	4a2d      	ldr	r2, [pc, #180]	@ (8000e2c <MX_TIM4_Init+0xe8>)
 8000d78:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000d7a:	4b2b      	ldr	r3, [pc, #172]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d7c:	2253      	movs	r2, #83	@ 0x53
 8000d7e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d80:	4b29      	ldr	r3, [pc, #164]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 249;
 8000d86:	4b28      	ldr	r3, [pc, #160]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d88:	22f9      	movs	r2, #249	@ 0xf9
 8000d8a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d8c:	4b26      	ldr	r3, [pc, #152]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d92:	4b25      	ldr	r3, [pc, #148]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d94:	2280      	movs	r2, #128	@ 0x80
 8000d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000d98:	4823      	ldr	r0, [pc, #140]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000d9a:	f004 f8b1 	bl	8004f00 <HAL_TIM_Base_Init>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d001      	beq.n	8000da8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8000da4:	f000 fdc0 	bl	8001928 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000da8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000dae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000db2:	4619      	mov	r1, r3
 8000db4:	481c      	ldr	r0, [pc, #112]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000db6:	f004 fba5 	bl	8005504 <HAL_TIM_ConfigClockSource>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8000dc0:	f000 fdb2 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000dc4:	4818      	ldr	r0, [pc, #96]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000dc6:	f004 f953 	bl	8005070 <HAL_TIM_PWM_Init>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8000dd0:	f000 fdaa 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	4619      	mov	r1, r3
 8000de2:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000de4:	f004 ff72 	bl	8005ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8000dee:	f000 fd9b 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000df2:	2360      	movs	r3, #96	@ 0x60
 8000df4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8000df6:	f642 1303 	movw	r3, #10499	@ 0x2903
 8000dfa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e00:	2300      	movs	r3, #0
 8000e02:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2208      	movs	r2, #8
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4807      	ldr	r0, [pc, #28]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000e0c:	f004 fab8 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000e16:	f000 fd87 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000e1a:	4803      	ldr	r0, [pc, #12]	@ (8000e28 <MX_TIM4_Init+0xe4>)
 8000e1c:	f001 fba6 	bl	800256c <HAL_TIM_MspPostInit>

}
 8000e20:	bf00      	nop
 8000e22:	3738      	adds	r7, #56	@ 0x38
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}
 8000e28:	200003f4 	.word	0x200003f4
 8000e2c:	40000800 	.word	0x40000800

08000e30 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b08a      	sub	sp, #40	@ 0x28
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e36:	f107 0320 	add.w	r3, r7, #32
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	601a      	str	r2, [r3, #0]
 8000e3e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]
 8000e48:	609a      	str	r2, [r3, #8]
 8000e4a:	60da      	str	r2, [r3, #12]
 8000e4c:	611a      	str	r2, [r3, #16]
 8000e4e:	615a      	str	r2, [r3, #20]
 8000e50:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e52:	4b2d      	ldr	r3, [pc, #180]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e54:	4a2d      	ldr	r2, [pc, #180]	@ (8000f0c <MX_TIM5_Init+0xdc>)
 8000e56:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000e58:	4b2b      	ldr	r3, [pc, #172]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e5a:	2253      	movs	r2, #83	@ 0x53
 8000e5c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1999;
 8000e64:	4b28      	ldr	r3, [pc, #160]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e66:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000e6a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e6c:	4b26      	ldr	r3, [pc, #152]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e72:	4b25      	ldr	r3, [pc, #148]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000e78:	4823      	ldr	r0, [pc, #140]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e7a:	f004 f8f9 	bl	8005070 <HAL_TIM_PWM_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000e84:	f000 fd50 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4619      	mov	r1, r3
 8000e96:	481c      	ldr	r0, [pc, #112]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000e98:	f004 ff18 	bl	8005ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000ea2:	f000 fd41 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ea6:	2360      	movs	r3, #96	@ 0x60
 8000ea8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000eb6:	1d3b      	adds	r3, r7, #4
 8000eb8:	2200      	movs	r2, #0
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4812      	ldr	r0, [pc, #72]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000ebe:	f004 fa5f 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000ec8:	f000 fd2e 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2204      	movs	r2, #4
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	480d      	ldr	r0, [pc, #52]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000ed4:	f004 fa54 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d001      	beq.n	8000ee2 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000ede:	f000 fd23 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ee2:	1d3b      	adds	r3, r7, #4
 8000ee4:	2208      	movs	r2, #8
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4807      	ldr	r0, [pc, #28]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000eea:	f004 fa49 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8000ef4:	f000 fd18 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000ef8:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <MX_TIM5_Init+0xd8>)
 8000efa:	f001 fb37 	bl	800256c <HAL_TIM_MspPostInit>

}
 8000efe:	bf00      	nop
 8000f00:	3728      	adds	r7, #40	@ 0x28
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	2000043c 	.word	0x2000043c
 8000f0c:	40000c00 	.word	0x40000c00

08000f10 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b092      	sub	sp, #72	@ 0x48
 8000f14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f16:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
 8000f30:	615a      	str	r2, [r3, #20]
 8000f32:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	2220      	movs	r2, #32
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f008 feb4 	bl	8009ca8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000f40:	4b3f      	ldr	r3, [pc, #252]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f42:	4a40      	ldr	r2, [pc, #256]	@ (8001044 <MX_TIM8_Init+0x134>)
 8000f44:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 335;
 8000f46:	4b3e      	ldr	r3, [pc, #248]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f48:	f240 124f 	movw	r2, #335	@ 0x14f
 8000f4c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 999;
 8000f54:	4b3a      	ldr	r3, [pc, #232]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f56:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f5a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5c:	4b38      	ldr	r3, [pc, #224]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000f62:	4b37      	ldr	r3, [pc, #220]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f68:	4b35      	ldr	r3, [pc, #212]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f6a:	2280      	movs	r2, #128	@ 0x80
 8000f6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8000f6e:	4834      	ldr	r0, [pc, #208]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f70:	f004 f87e 	bl	8005070 <HAL_TIM_PWM_Init>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM8_Init+0x6e>
  {
    Error_Handler();
 8000f7a:	f000 fcd5 	bl	8001928 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000f86:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	482c      	ldr	r0, [pc, #176]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000f8e:	f004 fe9d 	bl	8005ccc <HAL_TIMEx_MasterConfigSynchronization>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_TIM8_Init+0x8c>
  {
    Error_Handler();
 8000f98:	f000 fcc6 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f9c:	2360      	movs	r3, #96	@ 0x60
 8000f9e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fac:	2300      	movs	r3, #0
 8000fae:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	481f      	ldr	r0, [pc, #124]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000fc2:	f004 f9dd 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8000fcc:	f000 fcac 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fd4:	2204      	movs	r2, #4
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4819      	ldr	r0, [pc, #100]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000fda:	f004 f9d1 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <MX_TIM8_Init+0xd8>
  {
    Error_Handler();
 8000fe4:	f000 fca0 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000fe8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fec:	2208      	movs	r2, #8
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4813      	ldr	r0, [pc, #76]	@ (8001040 <MX_TIM8_Init+0x130>)
 8000ff2:	f004 f9c5 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <MX_TIM8_Init+0xf0>
  {
    Error_Handler();
 8000ffc:	f000 fc94 	bl	8001928 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001000:	2300      	movs	r3, #0
 8001002:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001004:	2300      	movs	r3, #0
 8001006:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001008:	2300      	movs	r3, #0
 800100a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800100c:	2300      	movs	r3, #0
 800100e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001014:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001018:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800101e:	1d3b      	adds	r3, r7, #4
 8001020:	4619      	mov	r1, r3
 8001022:	4807      	ldr	r0, [pc, #28]	@ (8001040 <MX_TIM8_Init+0x130>)
 8001024:	f004 fece 	bl	8005dc4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM8_Init+0x122>
  {
    Error_Handler();
 800102e:	f000 fc7b 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001032:	4803      	ldr	r0, [pc, #12]	@ (8001040 <MX_TIM8_Init+0x130>)
 8001034:	f001 fa9a 	bl	800256c <HAL_TIM_MspPostInit>

}
 8001038:	bf00      	nop
 800103a:	3748      	adds	r7, #72	@ 0x48
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	20000484 	.word	0x20000484
 8001044:	40010400 	.word	0x40010400

08001048 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b088      	sub	sp, #32
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800104e:	1d3b      	adds	r3, r7, #4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
 800105c:	615a      	str	r2, [r3, #20]
 800105e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001060:	4b1e      	ldr	r3, [pc, #120]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001062:	4a1f      	ldr	r2, [pc, #124]	@ (80010e0 <MX_TIM10_Init+0x98>)
 8001064:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 8001066:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800106c:	4b1b      	ldr	r3, [pc, #108]	@ (80010dc <MX_TIM10_Init+0x94>)
 800106e:	2200      	movs	r2, #0
 8001070:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 8001072:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001074:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001078:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800107a:	4b18      	ldr	r3, [pc, #96]	@ (80010dc <MX_TIM10_Init+0x94>)
 800107c:	2200      	movs	r2, #0
 800107e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001080:	4b16      	ldr	r3, [pc, #88]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001082:	2200      	movs	r2, #0
 8001084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001086:	4815      	ldr	r0, [pc, #84]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001088:	f003 ff3a 	bl	8004f00 <HAL_TIM_Base_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 8001092:	f000 fc49 	bl	8001928 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001096:	4811      	ldr	r0, [pc, #68]	@ (80010dc <MX_TIM10_Init+0x94>)
 8001098:	f003 ffea 	bl	8005070 <HAL_TIM_PWM_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80010a2:	f000 fc41 	bl	8001928 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010a6:	2360      	movs	r3, #96	@ 0x60
 80010a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b6:	1d3b      	adds	r3, r7, #4
 80010b8:	2200      	movs	r2, #0
 80010ba:	4619      	mov	r1, r3
 80010bc:	4807      	ldr	r0, [pc, #28]	@ (80010dc <MX_TIM10_Init+0x94>)
 80010be:	f004 f95f 	bl	8005380 <HAL_TIM_PWM_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80010c8:	f000 fc2e 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80010cc:	4803      	ldr	r0, [pc, #12]	@ (80010dc <MX_TIM10_Init+0x94>)
 80010ce:	f001 fa4d 	bl	800256c <HAL_TIM_MspPostInit>

}
 80010d2:	bf00      	nop
 80010d4:	3720      	adds	r7, #32
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200004cc 	.word	0x200004cc
 80010e0:	40014400 	.word	0x40014400

080010e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010e8:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010ea:	4a12      	ldr	r2, [pc, #72]	@ (8001134 <MX_USART1_UART_Init+0x50>)
 80010ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010ee:	4b10      	ldr	r3, [pc, #64]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001108:	4b09      	ldr	r3, [pc, #36]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800110a:	220c      	movs	r2, #12
 800110c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800110e:	4b08      	ldr	r3, [pc, #32]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 8001116:	2200      	movs	r2, #0
 8001118:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800111a:	4805      	ldr	r0, [pc, #20]	@ (8001130 <MX_USART1_UART_Init+0x4c>)
 800111c:	f004 fea4 	bl	8005e68 <HAL_UART_Init>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001126:	f000 fbff 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200005d4 	.word	0x200005d4
 8001134:	40011000 	.word	0x40011000

08001138 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800113e:	4a12      	ldr	r2, [pc, #72]	@ (8001188 <MX_USART3_UART_Init+0x50>)
 8001140:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 8001142:	4b10      	ldr	r3, [pc, #64]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001144:	4a11      	ldr	r2, [pc, #68]	@ (800118c <MX_USART3_UART_Init+0x54>)
 8001146:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001148:	4b0e      	ldr	r3, [pc, #56]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800114e:	4b0d      	ldr	r3, [pc, #52]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 8001154:	4b0b      	ldr	r3, [pc, #44]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001156:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800115a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800115c:	4b09      	ldr	r3, [pc, #36]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800115e:	220c      	movs	r2, #12
 8001160:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001162:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001168:	4b06      	ldr	r3, [pc, #24]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 800116a:	2200      	movs	r2, #0
 800116c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800116e:	4805      	ldr	r0, [pc, #20]	@ (8001184 <MX_USART3_UART_Init+0x4c>)
 8001170:	f004 fe7a 	bl	8005e68 <HAL_UART_Init>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800117a:	f000 fbd5 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	2000061c 	.word	0x2000061c
 8001188:	40004800 	.word	0x40004800
 800118c:	000186a0 	.word	0x000186a0

08001190 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART6_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART6_UART_Init+0x4c>)
 80011c8:	f004 fe4e 	bl	8005e68 <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f000 fba9 	bl	8001928 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000664 	.word	0x20000664
 80011e0:	40011400 	.word	0x40011400

080011e4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011ea:	2300      	movs	r3, #0
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	4b2b      	ldr	r3, [pc, #172]	@ (800129c <MX_DMA_Init+0xb8>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f2:	4a2a      	ldr	r2, [pc, #168]	@ (800129c <MX_DMA_Init+0xb8>)
 80011f4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fa:	4b28      	ldr	r3, [pc, #160]	@ (800129c <MX_DMA_Init+0xb8>)
 80011fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001202:	607b      	str	r3, [r7, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001206:	2300      	movs	r3, #0
 8001208:	603b      	str	r3, [r7, #0]
 800120a:	4b24      	ldr	r3, [pc, #144]	@ (800129c <MX_DMA_Init+0xb8>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120e:	4a23      	ldr	r2, [pc, #140]	@ (800129c <MX_DMA_Init+0xb8>)
 8001210:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001214:	6313      	str	r3, [r2, #48]	@ 0x30
 8001216:	4b21      	ldr	r3, [pc, #132]	@ (800129c <MX_DMA_Init+0xb8>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800121e:	603b      	str	r3, [r7, #0]
 8001220:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8001222:	2200      	movs	r2, #0
 8001224:	2105      	movs	r1, #5
 8001226:	200c      	movs	r0, #12
 8001228:	f002 f9f3 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800122c:	200c      	movs	r0, #12
 800122e:	f002 fa0c 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2105      	movs	r1, #5
 8001236:	202f      	movs	r0, #47	@ 0x2f
 8001238:	f002 f9eb 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 800123c:	202f      	movs	r0, #47	@ 0x2f
 800123e:	f002 fa04 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8001242:	2200      	movs	r2, #0
 8001244:	2105      	movs	r1, #5
 8001246:	2039      	movs	r0, #57	@ 0x39
 8001248:	f002 f9e3 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 800124c:	2039      	movs	r0, #57	@ 0x39
 800124e:	f002 f9fc 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8001252:	2200      	movs	r2, #0
 8001254:	2105      	movs	r1, #5
 8001256:	203a      	movs	r0, #58	@ 0x3a
 8001258:	f002 f9db 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 800125c:	203a      	movs	r0, #58	@ 0x3a
 800125e:	f002 f9f4 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2105      	movs	r1, #5
 8001266:	2044      	movs	r0, #68	@ 0x44
 8001268:	f002 f9d3 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 800126c:	2044      	movs	r0, #68	@ 0x44
 800126e:	f002 f9ec 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2105      	movs	r1, #5
 8001276:	2045      	movs	r0, #69	@ 0x45
 8001278:	f002 f9cb 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800127c:	2045      	movs	r0, #69	@ 0x45
 800127e:	f002 f9e4 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2105      	movs	r1, #5
 8001286:	2046      	movs	r0, #70	@ 0x46
 8001288:	f002 f9c3 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 800128c:	2046      	movs	r0, #70	@ 0x46
 800128e:	f002 f9dc 	bl	800364a <HAL_NVIC_EnableIRQ>

}
 8001292:	bf00      	nop
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08e      	sub	sp, #56	@ 0x38
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
 80012ba:	4b77      	ldr	r3, [pc, #476]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012be:	4a76      	ldr	r2, [pc, #472]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c6:	4b74      	ldr	r3, [pc, #464]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	623b      	str	r3, [r7, #32]
 80012d0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	61fb      	str	r3, [r7, #28]
 80012d6:	4b70      	ldr	r3, [pc, #448]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012da:	4a6f      	ldr	r2, [pc, #444]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80012e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	61bb      	str	r3, [r7, #24]
 80012f2:	4b69      	ldr	r3, [pc, #420]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	4a68      	ldr	r2, [pc, #416]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012fe:	4b66      	ldr	r3, [pc, #408]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	61bb      	str	r3, [r7, #24]
 8001308:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	4b62      	ldr	r3, [pc, #392]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001312:	4a61      	ldr	r2, [pc, #388]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001314:	f043 0308 	orr.w	r3, r3, #8
 8001318:	6313      	str	r3, [r2, #48]	@ 0x30
 800131a:	4b5f      	ldr	r3, [pc, #380]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	617b      	str	r3, [r7, #20]
 8001324:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	2300      	movs	r3, #0
 8001328:	613b      	str	r3, [r7, #16]
 800132a:	4b5b      	ldr	r3, [pc, #364]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 800132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132e:	4a5a      	ldr	r2, [pc, #360]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001330:	f043 0304 	orr.w	r3, r3, #4
 8001334:	6313      	str	r3, [r2, #48]	@ 0x30
 8001336:	4b58      	ldr	r3, [pc, #352]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800133a:	f003 0304 	and.w	r3, r3, #4
 800133e:	613b      	str	r3, [r7, #16]
 8001340:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001342:	2300      	movs	r3, #0
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	4b54      	ldr	r3, [pc, #336]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800134a:	4a53      	ldr	r2, [pc, #332]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 800134c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001350:	6313      	str	r3, [r2, #48]	@ 0x30
 8001352:	4b51      	ldr	r3, [pc, #324]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001356:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800135e:	2300      	movs	r3, #0
 8001360:	60bb      	str	r3, [r7, #8]
 8001362:	4b4d      	ldr	r3, [pc, #308]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001366:	4a4c      	ldr	r2, [pc, #304]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800136c:	6313      	str	r3, [r2, #48]	@ 0x30
 800136e:	4b4a      	ldr	r3, [pc, #296]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001376:	60bb      	str	r3, [r7, #8]
 8001378:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
 800137e:	4b46      	ldr	r3, [pc, #280]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001382:	4a45      	ldr	r2, [pc, #276]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 8001384:	f043 0320 	orr.w	r3, r3, #32
 8001388:	6313      	str	r3, [r2, #48]	@ 0x30
 800138a:	4b43      	ldr	r3, [pc, #268]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138e:	f003 0320 	and.w	r3, r3, #32
 8001392:	607b      	str	r3, [r7, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001396:	2300      	movs	r3, #0
 8001398:	603b      	str	r3, [r7, #0]
 800139a:	4b3f      	ldr	r3, [pc, #252]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	4a3e      	ldr	r2, [pc, #248]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80013a0:	f043 0310 	orr.w	r3, r3, #16
 80013a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001498 <MX_GPIO_Init+0x1f8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013aa:	f003 0310 	and.w	r3, r3, #16
 80013ae:	603b      	str	r3, [r7, #0]
 80013b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 80013b2:	2200      	movs	r2, #0
 80013b4:	2140      	movs	r1, #64	@ 0x40
 80013b6:	4839      	ldr	r0, [pc, #228]	@ (800149c <MX_GPIO_Init+0x1fc>)
 80013b8:	f002 ff18 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2110      	movs	r1, #16
 80013c0:	4837      	ldr	r0, [pc, #220]	@ (80014a0 <MX_GPIO_Init+0x200>)
 80013c2:	f002 ff13 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80013c6:	2200      	movs	r2, #0
 80013c8:	2101      	movs	r1, #1
 80013ca:	4836      	ldr	r0, [pc, #216]	@ (80014a4 <MX_GPIO_Init+0x204>)
 80013cc:	f002 ff0e 	bl	80041ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013d0:	2340      	movs	r3, #64	@ 0x40
 80013d2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d4:	2301      	movs	r3, #1
 80013d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013dc:	2300      	movs	r3, #0
 80013de:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e4:	4619      	mov	r1, r3
 80013e6:	482d      	ldr	r0, [pc, #180]	@ (800149c <MX_GPIO_Init+0x1fc>)
 80013e8:	f002 fd4c 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013ec:	2308      	movs	r3, #8
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f6:	2300      	movs	r3, #0
 80013f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013fe:	4619      	mov	r1, r3
 8001400:	4826      	ldr	r0, [pc, #152]	@ (800149c <MX_GPIO_Init+0x1fc>)
 8001402:	f002 fd3f 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001406:	2301      	movs	r3, #1
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140e:	2300      	movs	r3, #0
 8001410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001412:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001416:	4619      	mov	r1, r3
 8001418:	4821      	ldr	r0, [pc, #132]	@ (80014a0 <MX_GPIO_Init+0x200>)
 800141a:	f002 fd33 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 800141e:	2310      	movs	r3, #16
 8001420:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	481a      	ldr	r0, [pc, #104]	@ (80014a0 <MX_GPIO_Init+0x200>)
 8001436:	f002 fd25 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 800143a:	2330      	movs	r3, #48	@ 0x30
 800143c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800143e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001442:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001448:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800144c:	4619      	mov	r1, r3
 800144e:	4816      	ldr	r0, [pc, #88]	@ (80014a8 <MX_GPIO_Init+0x208>)
 8001450:	f002 fd18 	bl	8003e84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001454:	2301      	movs	r3, #1
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001458:	2301      	movs	r3, #1
 800145a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001460:	2300      	movs	r3, #0
 8001462:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	480e      	ldr	r0, [pc, #56]	@ (80014a4 <MX_GPIO_Init+0x204>)
 800146c:	f002 fd0a 	bl	8003e84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8001470:	2200      	movs	r2, #0
 8001472:	2105      	movs	r1, #5
 8001474:	2009      	movs	r0, #9
 8001476:	f002 f8cc 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800147a:	2009      	movs	r0, #9
 800147c:	f002 f8e5 	bl	800364a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8001480:	2200      	movs	r2, #0
 8001482:	2105      	movs	r1, #5
 8001484:	200a      	movs	r0, #10
 8001486:	f002 f8c4 	bl	8003612 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800148a:	200a      	movs	r0, #10
 800148c:	f002 f8dd 	bl	800364a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001490:	bf00      	nop
 8001492:	3738      	adds	r7, #56	@ 0x38
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	40023800 	.word	0x40023800
 800149c:	40021800 	.word	0x40021800
 80014a0:	40020000 	.word	0x40020000
 80014a4:	40020400 	.word	0x40020400
 80014a8:	40020800 	.word	0x40020800

080014ac <TaskMain>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_TaskMain */
void TaskMain(void *argument)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
  osDelay(1);
 80014b4:	2001      	movs	r0, #1
 80014b6:	f005 ff21 	bl	80072fc <osDelay>
 80014ba:	e7fb      	b.n	80014b4 <TaskMain+0x8>

080014bc <TaskChassis>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskChassis */
void TaskChassis(void *argument)
{
 80014bc:	b5b0      	push	{r4, r5, r7, lr}
 80014be:	b0ba      	sub	sp, #232	@ 0xe8
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  HAL_TIM_Base_Start(&htim1);
  HAL_TIM_Base_Start(&htim4);
  HAL_TIM_Base_Start(&htim5);
  HAL_TIM_Base_Start(&htim8);
  */
  PWMInit(&htim1, &htim4, &htim5, &htim8);
 80014c4:	4bd0      	ldr	r3, [pc, #832]	@ (8001808 <TaskChassis+0x34c>)
 80014c6:	4ad1      	ldr	r2, [pc, #836]	@ (800180c <TaskChassis+0x350>)
 80014c8:	49d1      	ldr	r1, [pc, #836]	@ (8001810 <TaskChassis+0x354>)
 80014ca:	48d2      	ldr	r0, [pc, #840]	@ (8001814 <TaskChassis+0x358>)
 80014cc:	f000 fa32 	bl	8001934 <PWMInit>


  int16_t speedOfPulse = 100;
 80014d0:	2364      	movs	r3, #100	@ 0x64
 80014d2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
  int16_t negativeComponent = speedOfPulse*(-0.5f);
 80014d6:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 80014da:	ee07 3a90 	vmov	s15, r3
 80014de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014e2:	eebe 7a00 	vmov.f32	s14, #224	@ 0xbf000000 -0.5
 80014e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80014ee:	ee17 3a90 	vmov	r3, s15
 80014f2:	f8a7 30cc 	strh.w	r3, [r7, #204]	@ 0xcc
  float FancyLEDscaler = (1/(float)speedOfPulse);
 80014f6:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 80014fa:	ee07 3a90 	vmov	s15, r3
 80014fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001502:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001506:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800150a:	edc7 7a32 	vstr	s15, [r7, #200]	@ 0xc8

  int8_t iSwapper = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
  int16_t iVal = negativeComponent;
 8001514:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8001518:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
  int8_t iSwapper1 = 0;
 800151c:	2300      	movs	r3, #0
 800151e:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
  int16_t iVal1 = negativeComponent*-1;
 8001522:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8001526:	425b      	negs	r3, r3
 8001528:	b29b      	uxth	r3, r3
 800152a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
  int8_t iSwapper2 = 1;
 800152e:	2301      	movs	r3, #1
 8001530:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
  int16_t iVal2 = negativeComponent*-1;
 8001534:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8001538:	425b      	negs	r3, r3
 800153a:	b29b      	uxth	r3, r3
 800153c:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc

  int16_t MotorCycle = 400;
 8001540:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8001544:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda

  uint16_t timeTracker = 0;
 8001548:	2300      	movs	r3, #0
 800154a:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
  uint16_t noteTracker = 0;
 800154e:	2300      	movs	r3, #0
 8001550:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6

  uint32_t frequenciesAtA4[11] = {440, 494, 523, 587, 659, 698, 784, 880, 988, 1047, 10};
 8001554:	4bb0      	ldr	r3, [pc, #704]	@ (8001818 <TaskChassis+0x35c>)
 8001556:	f107 048c 	add.w	r4, r7, #140	@ 0x8c
 800155a:	461d      	mov	r5, r3
 800155c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800155e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001560:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001564:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001568:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  uint8_t NeverGoingToGiveYouUpNotes[61] = {2, 3, 5, 3, 7, 10, 7, 6, 2, 3, 5, 3, 6, 10, 6, 5, 4, 3, 2, 3, 5, 3, 5, 6, 4, 3, 2, 10, 2, 6, 5, 2, 3, 5, 3, 7, 10, 7, 6, 2, 3, 5, 3, 9, 4, 5, 4, 3, 2, 3, 5, 3, 5, 6, 4, 3, 2, 10, 2, 6, 5};
 800156c:	4bab      	ldr	r3, [pc, #684]	@ (800181c <TaskChassis+0x360>)
 800156e:	f107 044c 	add.w	r4, r7, #76	@ 0x4c
 8001572:	461d      	mov	r5, r3
 8001574:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001576:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001578:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800157c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800157e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001580:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001584:	c407      	stmia	r4!, {r0, r1, r2}
 8001586:	7023      	strb	r3, [r4, #0]
  uint8_t NeverGoingToGiveYouUpRests[61] = {10, 10, 10, 10, 29, 1, 30, 60, 10, 10, 10, 10, 29, 1, 30, 30, 10, 20, 10, 10, 10, 10, 40, 20, 30, 10, 39, 1, 20, 40, 80, 10, 10, 10, 10, 29, 1, 30, 60, 10, 10, 10, 10, 40, 20, 30, 10, 20, 10, 10, 10, 10, 40, 20, 30, 10, 39, 1, 20, 40, 80};
 8001588:	4ba5      	ldr	r3, [pc, #660]	@ (8001820 <TaskChassis+0x364>)
 800158a:	f107 040c 	add.w	r4, r7, #12
 800158e:	461d      	mov	r5, r3
 8001590:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001592:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001594:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001596:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001598:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800159a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800159c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015a0:	c407      	stmia	r4!, {r0, r1, r2}
 80015a2:	7023      	strb	r3, [r4, #0]
  */
  // HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
  for(;;)
  {

	if (timeTracker > NeverGoingToGiveYouUpRests[noteTracker]) {
 80015a4:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80015a8:	33e8      	adds	r3, #232	@ 0xe8
 80015aa:	443b      	add	r3, r7
 80015ac:	f813 3cdc 	ldrb.w	r3, [r3, #-220]
 80015b0:	461a      	mov	r2, r3
 80015b2:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d907      	bls.n	80015ca <TaskChassis+0x10e>
		noteTracker++;
 80015ba:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80015be:	3301      	adds	r3, #1
 80015c0:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
		timeTracker = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8
	}

	if (noteTracker > 60) {
 80015ca:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80015ce:	2b3c      	cmp	r3, #60	@ 0x3c
 80015d0:	d902      	bls.n	80015d8 <TaskChassis+0x11c>
		noteTracker = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f8a7 30d6 	strh.w	r3, [r7, #214]	@ 0xd6
	}

	PWMOutput(Buzzer, 1, frequenciesAtA4[NeverGoingToGiveYouUpNotes[noteTracker]]);
 80015d8:	f8b7 30d6 	ldrh.w	r3, [r7, #214]	@ 0xd6
 80015dc:	33e8      	adds	r3, #232	@ 0xe8
 80015de:	443b      	add	r3, r7
 80015e0:	f813 3c9c 	ldrb.w	r3, [r3, #-156]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	33e8      	adds	r3, #232	@ 0xe8
 80015e8:	443b      	add	r3, r7
 80015ea:	f853 3c5c 	ldr.w	r3, [r3, #-92]
 80015ee:	461a      	mov	r2, r3
 80015f0:	2101      	movs	r1, #1
 80015f2:	2002      	movs	r0, #2
 80015f4:	f000 fbd4 	bl	8001da0 <PWMOutput>

	timeTracker++;
 80015f8:	f8b7 30d8 	ldrh.w	r3, [r7, #216]	@ 0xd8
 80015fc:	3301      	adds	r3, #1
 80015fe:	f8a7 30d8 	strh.w	r3, [r7, #216]	@ 0xd8

	if (iVal > speedOfPulse) {
 8001602:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	@ 0xe4
 8001606:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 800160a:	429a      	cmp	r2, r3
 800160c:	dd09      	ble.n	8001622 <TaskChassis+0x166>
		iVal = speedOfPulse-1;
 800160e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001612:	3b01      	subs	r3, #1
 8001614:	b29b      	uxth	r3, r3
 8001616:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
		iSwapper = 1;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
 8001620:	e00e      	b.n	8001640 <TaskChassis+0x184>
	} else if (iVal < negativeComponent) {
 8001622:	f9b7 20e4 	ldrsh.w	r2, [r7, #228]	@ 0xe4
 8001626:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 800162a:	429a      	cmp	r2, r3
 800162c:	da08      	bge.n	8001640 <TaskChassis+0x184>
		iVal = negativeComponent+1;
 800162e:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8001632:	3301      	adds	r3, #1
 8001634:	b29b      	uxth	r3, r3
 8001636:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
		iSwapper = 0;
 800163a:	2300      	movs	r3, #0
 800163c:	f887 30e7 	strb.w	r3, [r7, #231]	@ 0xe7
	}
	if (iSwapper == 1) {
 8001640:	f997 30e7 	ldrsb.w	r3, [r7, #231]	@ 0xe7
 8001644:	2b01      	cmp	r3, #1
 8001646:	d107      	bne.n	8001658 <TaskChassis+0x19c>
		iVal--;
 8001648:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	@ 0xe4
 800164c:	b29b      	uxth	r3, r3
 800164e:	3b01      	subs	r3, #1
 8001650:	b29b      	uxth	r3, r3
 8001652:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
 8001656:	e006      	b.n	8001666 <TaskChassis+0x1aa>
	} else {
		iVal++;
 8001658:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	@ 0xe4
 800165c:	b29b      	uxth	r3, r3
 800165e:	3301      	adds	r3, #1
 8001660:	b29b      	uxth	r3, r3
 8001662:	f8a7 30e4 	strh.w	r3, [r7, #228]	@ 0xe4
	}


	if (iVal1 > speedOfPulse) {
 8001666:	f9b7 20e0 	ldrsh.w	r2, [r7, #224]	@ 0xe0
 800166a:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 800166e:	429a      	cmp	r2, r3
 8001670:	dd09      	ble.n	8001686 <TaskChassis+0x1ca>
		iVal1 = speedOfPulse-1;
 8001672:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8001676:	3b01      	subs	r3, #1
 8001678:	b29b      	uxth	r3, r3
 800167a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
		iSwapper1 = 1;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
 8001684:	e00e      	b.n	80016a4 <TaskChassis+0x1e8>
	} else if (iVal1 < negativeComponent) {
 8001686:	f9b7 20e0 	ldrsh.w	r2, [r7, #224]	@ 0xe0
 800168a:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 800168e:	429a      	cmp	r2, r3
 8001690:	da08      	bge.n	80016a4 <TaskChassis+0x1e8>
		iVal1 = negativeComponent+1;
 8001692:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 8001696:	3301      	adds	r3, #1
 8001698:	b29b      	uxth	r3, r3
 800169a:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
		iSwapper1 = 0;
 800169e:	2300      	movs	r3, #0
 80016a0:	f887 30e3 	strb.w	r3, [r7, #227]	@ 0xe3
	}
	if (iSwapper1 == 1) {
 80016a4:	f997 30e3 	ldrsb.w	r3, [r7, #227]	@ 0xe3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <TaskChassis+0x200>
		iVal1--;
 80016ac:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 80016b0:	b29b      	uxth	r3, r3
 80016b2:	3b01      	subs	r3, #1
 80016b4:	b29b      	uxth	r3, r3
 80016b6:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
 80016ba:	e006      	b.n	80016ca <TaskChassis+0x20e>
	} else {
		iVal1++;
 80016bc:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 80016c0:	b29b      	uxth	r3, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	b29b      	uxth	r3, r3
 80016c6:	f8a7 30e0 	strh.w	r3, [r7, #224]	@ 0xe0
	}


	if (iVal2 > speedOfPulse) {
 80016ca:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 80016ce:	f9b7 30ce 	ldrsh.w	r3, [r7, #206]	@ 0xce
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dd09      	ble.n	80016ea <TaskChassis+0x22e>
		iVal2 = speedOfPulse-1;
 80016d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80016da:	3b01      	subs	r3, #1
 80016dc:	b29b      	uxth	r3, r3
 80016de:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
		iSwapper2 = 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
 80016e8:	e00e      	b.n	8001708 <TaskChassis+0x24c>
	} else if (iVal2 < negativeComponent) {
 80016ea:	f9b7 20dc 	ldrsh.w	r2, [r7, #220]	@ 0xdc
 80016ee:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	@ 0xcc
 80016f2:	429a      	cmp	r2, r3
 80016f4:	da08      	bge.n	8001708 <TaskChassis+0x24c>
		iVal2 = negativeComponent+1;
 80016f6:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	@ 0xcc
 80016fa:	3301      	adds	r3, #1
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
		iSwapper2 = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	f887 30df 	strb.w	r3, [r7, #223]	@ 0xdf
	}
	if (iSwapper2 == 1) {
 8001708:	f997 30df 	ldrsb.w	r3, [r7, #223]	@ 0xdf
 800170c:	2b01      	cmp	r3, #1
 800170e:	d107      	bne.n	8001720 <TaskChassis+0x264>
		iVal2--;
 8001710:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8001714:	b29b      	uxth	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b29b      	uxth	r3, r3
 800171a:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
 800171e:	e006      	b.n	800172e <TaskChassis+0x272>
	} else {
		iVal2++;
 8001720:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8001724:	b29b      	uxth	r3, r3
 8001726:	3301      	adds	r3, #1
 8001728:	b29b      	uxth	r3, r3
 800172a:	f8a7 30dc 	strh.w	r3, [r7, #220]	@ 0xdc
	}

	int16_t Val = iVal;
 800172e:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	@ 0xe4
 8001732:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	if (iVal < 0) {
 8001736:	f9b7 30e4 	ldrsh.w	r3, [r7, #228]	@ 0xe4
 800173a:	2b00      	cmp	r3, #0
 800173c:	da02      	bge.n	8001744 <TaskChassis+0x288>
		Val = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f8a7 30d4 	strh.w	r3, [r7, #212]	@ 0xd4
	}
	int16_t Val1 = iVal1;
 8001744:	f8b7 30e0 	ldrh.w	r3, [r7, #224]	@ 0xe0
 8001748:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	if (iVal1 < 0) {
 800174c:	f9b7 30e0 	ldrsh.w	r3, [r7, #224]	@ 0xe0
 8001750:	2b00      	cmp	r3, #0
 8001752:	da02      	bge.n	800175a <TaskChassis+0x29e>
		Val1 = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	f8a7 30d2 	strh.w	r3, [r7, #210]	@ 0xd2
	}
	int16_t Val2 = iVal2;
 800175a:	f8b7 30dc 	ldrh.w	r3, [r7, #220]	@ 0xdc
 800175e:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
	if (iVal2 < 0) {
 8001762:	f9b7 30dc 	ldrsh.w	r3, [r7, #220]	@ 0xdc
 8001766:	2b00      	cmp	r3, #0
 8001768:	da02      	bge.n	8001770 <TaskChassis+0x2b4>
		Val2 = 0;
 800176a:	2300      	movs	r3, #0
 800176c:	f8a7 30d0 	strh.w	r3, [r7, #208]	@ 0xd0
	}



	float realVal = Val * FancyLEDscaler;
 8001770:	f9b7 30d4 	ldrsh.w	r3, [r7, #212]	@ 0xd4
 8001774:	ee07 3a90 	vmov	s15, r3
 8001778:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800177c:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8001780:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001784:	edc7 7a31 	vstr	s15, [r7, #196]	@ 0xc4
	float realVal1 = Val1 * FancyLEDscaler;
 8001788:	f9b7 30d2 	ldrsh.w	r3, [r7, #210]	@ 0xd2
 800178c:	ee07 3a90 	vmov	s15, r3
 8001790:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001794:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 8001798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179c:	edc7 7a30 	vstr	s15, [r7, #192]	@ 0xc0
	float realVal2 = Val2 * FancyLEDscaler;
 80017a0:	f9b7 30d0 	ldrsh.w	r3, [r7, #208]	@ 0xd0
 80017a4:	ee07 3a90 	vmov	s15, r3
 80017a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017ac:	ed97 7a32 	vldr	s14, [r7, #200]	@ 0xc8
 80017b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017b4:	edc7 7a2f 	vstr	s15, [r7, #188]	@ 0xbc

	// usart_printf("%d\r\n", iVal);
	// (TypesThatUsePWM_t Type, int8_t Position, int16_t desiredFrequency)

	int8_t KEY = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 80017b8:	2101      	movs	r1, #1
 80017ba:	481a      	ldr	r0, [pc, #104]	@ (8001824 <TaskChassis+0x368>)
 80017bc:	f002 fcfe 	bl	80041bc <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	f887 30bb 	strb.w	r3, [r7, #187]	@ 0xbb
	if (MotorCycle > 1650) {
 80017c6:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	@ 0xda
 80017ca:	f240 6272 	movw	r2, #1650	@ 0x672
 80017ce:	4293      	cmp	r3, r2
 80017d0:	dd04      	ble.n	80017dc <TaskChassis+0x320>
		MotorCycle = 1650;
 80017d2:	f240 6372 	movw	r3, #1650	@ 0x672
 80017d6:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
 80017da:	e009      	b.n	80017f0 <TaskChassis+0x334>

	} else if (MotorCycle < 950) {
 80017dc:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	@ 0xda
 80017e0:	f240 32b5 	movw	r2, #949	@ 0x3b5
 80017e4:	4293      	cmp	r3, r2
 80017e6:	dc03      	bgt.n	80017f0 <TaskChassis+0x334>
		MotorCycle = 950;
 80017e8:	f240 33b6 	movw	r3, #950	@ 0x3b6
 80017ec:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
	}
	if (KEY == 1) {
 80017f0:	f997 30bb 	ldrsb.w	r3, [r7, #187]	@ 0xbb
 80017f4:	2b01      	cmp	r3, #1
 80017f6:	d117      	bne.n	8001828 <TaskChassis+0x36c>
		MotorCycle = MotorCycle - 6;
 80017f8:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 80017fc:	3b06      	subs	r3, #6
 80017fe:	b29b      	uxth	r3, r3
 8001800:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
 8001804:	e01c      	b.n	8001840 <TaskChassis+0x384>
 8001806:	bf00      	nop
 8001808:	20000484 	.word	0x20000484
 800180c:	2000043c 	.word	0x2000043c
 8001810:	200003f4 	.word	0x200003f4
 8001814:	200003ac 	.word	0x200003ac
 8001818:	08009ec4 	.word	0x08009ec4
 800181c:	08009ef0 	.word	0x08009ef0
 8001820:	08009f30 	.word	0x08009f30
 8001824:	40020000 	.word	0x40020000

		// PWMOff(Buzzer, 1);

	} else {
		MotorCycle = MotorCycle + 6;
 8001828:	f8b7 30da 	ldrh.w	r3, [r7, #218]	@ 0xda
 800182c:	3306      	adds	r3, #6
 800182e:	b29b      	uxth	r3, r3
 8001830:	f8a7 30da 	strh.w	r3, [r7, #218]	@ 0xda
		PWMOutput(Buzzer, 1, 1000);
 8001834:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001838:	2101      	movs	r1, #1
 800183a:	2002      	movs	r0, #2
 800183c:	f000 fab0 	bl	8001da0 <PWMOutput>
	}
	// usart_printf("%d %d\r\n", KEY, MotorCycle);
	// usart_printf("%d %d %d  0\r\n", iVal, iVal1, iVal2);

	// htim4.Instance->CCR3=150;
	PWMOutput(LED, 3, 500);
 8001840:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001844:	2103      	movs	r1, #3
 8001846:	2001      	movs	r0, #1
 8001848:	f000 faaa 	bl	8001da0 <PWMOutput>
	PWMOutput(LED, 2, 500);
 800184c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001850:	2102      	movs	r1, #2
 8001852:	2001      	movs	r0, #1
 8001854:	f000 faa4 	bl	8001da0 <PWMOutput>
	PWMOutput(LED, 1, 500);
 8001858:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800185c:	2101      	movs	r1, #1
 800185e:	2001      	movs	r0, #1
 8001860:	f000 fa9e 	bl	8001da0 <PWMOutput>
	//(htim1).Init.Period = 999;
	PWMOutput(Motor, 5, 500);
 8001864:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8001868:	2105      	movs	r1, #5
 800186a:	2000      	movs	r0, #0
 800186c:	f000 fa98 	bl	8001da0 <PWMOutput>

	//PWMOutput(Buzzer, 1, 90);
	// usart_printf("beanis7\r\n");

	// (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val)
	PWMInitialize(LED, FR, 3, realVal2);
 8001870:	ed97 0a2f 	vldr	s0, [r7, #188]	@ 0xbc
 8001874:	2203      	movs	r2, #3
 8001876:	2101      	movs	r1, #1
 8001878:	2001      	movs	r0, #1
 800187a:	f000 f979 	bl	8001b70 <PWMInitialize>
	PWMInitialize(LED, FR, 2, realVal);
 800187e:	ed97 0a31 	vldr	s0, [r7, #196]	@ 0xc4
 8001882:	2202      	movs	r2, #2
 8001884:	2101      	movs	r1, #1
 8001886:	2001      	movs	r0, #1
 8001888:	f000 f972 	bl	8001b70 <PWMInitialize>
	PWMInitialize(LED, FR, 1, realVal1);
 800188c:	ed97 0a30 	vldr	s0, [r7, #192]	@ 0xc0
 8001890:	2201      	movs	r2, #1
 8001892:	2101      	movs	r1, #1
 8001894:	2001      	movs	r0, #1
 8001896:	f000 f96b 	bl	8001b70 <PWMInitialize>
	// (htim1).Instance->CCR1=499;

	PWMInitialize(Motor, FR, 1, 0.5);
 800189a:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 800189e:	2201      	movs	r2, #1
 80018a0:	2101      	movs	r1, #1
 80018a2:	2000      	movs	r0, #0
 80018a4:	f000 f964 	bl	8001b70 <PWMInitialize>
	PWMInitialize(Motor, MS, 5, MotorCycle);
 80018a8:	f9b7 30da 	ldrsh.w	r3, [r7, #218]	@ 0xda
 80018ac:	ee07 3a90 	vmov	s15, r3
 80018b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018b4:	eeb0 0a67 	vmov.f32	s0, s15
 80018b8:	2205      	movs	r2, #5
 80018ba:	2100      	movs	r1, #0
 80018bc:	2000      	movs	r0, #0
 80018be:	f000 f957 	bl	8001b70 <PWMInitialize>

	PWMInitialize(Buzzer, FR, 1, 0.5);
 80018c2:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80018c6:	2201      	movs	r2, #1
 80018c8:	2101      	movs	r1, #1
 80018ca:	2002      	movs	r0, #2
 80018cc:	f000 f950 	bl	8001b70 <PWMInitialize>
	} else {
		PWMOutput(Buzzer, 1, 4000);
		swapper = 1;
	}
	*/
	PWMOutput(Motor, 1, 900);
 80018d0:	f44f 7261 	mov.w	r2, #900	@ 0x384
 80018d4:	2101      	movs	r1, #1
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 fa62 	bl	8001da0 <PWMOutput>
	htim1.Init.Period = 500;
 80018dc:	4b09      	ldr	r3, [pc, #36]	@ (8001904 <TaskChassis+0x448>)
 80018de:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80018e2:	60da      	str	r2, [r3, #12]
	PWMInitialize(Motor, FR, 1, 0.5);
 80018e4:	eeb6 0a00 	vmov.f32	s0, #96	@ 0x3f000000  0.5
 80018e8:	2201      	movs	r2, #1
 80018ea:	2101      	movs	r1, #1
 80018ec:	2000      	movs	r0, #0
 80018ee:	f000 f93f 	bl	8001b70 <PWMInitialize>
	// (*tim5).Instance->CCR2=value;

	// htim5.Init.Period = 1000;

	// htim5.Instance->CCR2=400;
	mainPrint();
 80018f2:	f000 fa85 	bl	8001e00 <mainPrint>

	PWMTimerStarter();
 80018f6:	f000 fa8b 	bl	8001e10 <PWMTimerStarter>

    osDelay(10);
 80018fa:	200a      	movs	r0, #10
 80018fc:	f005 fcfe 	bl	80072fc <osDelay>
  {
 8001900:	e650      	b.n	80015a4 <TaskChassis+0xe8>
 8001902:	bf00      	nop
 8001904:	200003ac 	.word	0x200003ac

08001908 <imu_temp_control_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_imu_temp_control_task */
__weak void imu_temp_control_task(void *argument)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b082      	sub	sp, #8
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN imu_temp_control_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001910:	2001      	movs	r0, #1
 8001912:	f005 fcf3 	bl	80072fc <osDelay>
 8001916:	e7fb      	b.n	8001910 <imu_temp_control_task+0x8>

08001918 <TaskTurret>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_TaskTurret */
void TaskTurret(void *argument)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN TaskTurret */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001920:	2001      	movs	r0, #1
 8001922:	f005 fceb 	bl	80072fc <osDelay>
 8001926:	e7fb      	b.n	8001920 <TaskTurret+0x8>

08001928 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800192c:	b672      	cpsid	i
}
 800192e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001930:	bf00      	nop
 8001932:	e7fd      	b.n	8001930 <Error_Handler+0x8>

08001934 <PWMInit>:
int32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

// struct individualTracker PWMS[11];

// Initializes the variables in this library :<
void PWMInit (TIM_HandleTypeDef *t1, TIM_HandleTypeDef *t4, TIM_HandleTypeDef *t5, TIM_HandleTypeDef *t8) {
 8001934:	b580      	push	{r7, lr}
 8001936:	b084      	sub	sp, #16
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
 8001940:	603b      	str	r3, [r7, #0]
	tim1 = t1;
 8001942:	4a12      	ldr	r2, [pc, #72]	@ (800198c <PWMInit+0x58>)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6013      	str	r3, [r2, #0]
	tim4 = t4;
 8001948:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <PWMInit+0x5c>)
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	6013      	str	r3, [r2, #0]
	tim5 = t5;
 800194e:	4a11      	ldr	r2, [pc, #68]	@ (8001994 <PWMInit+0x60>)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6013      	str	r3, [r2, #0]
	tim8 = t8;
 8001954:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <PWMInit+0x64>)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start(tim1);
 800195a:	4b0c      	ldr	r3, [pc, #48]	@ (800198c <PWMInit+0x58>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f003 fb1e 	bl	8004fa0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim4);
 8001964:	4b0a      	ldr	r3, [pc, #40]	@ (8001990 <PWMInit+0x5c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f003 fb19 	bl	8004fa0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim5);
 800196e:	4b09      	ldr	r3, [pc, #36]	@ (8001994 <PWMInit+0x60>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4618      	mov	r0, r3
 8001974:	f003 fb14 	bl	8004fa0 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(tim8);
 8001978:	4b07      	ldr	r3, [pc, #28]	@ (8001998 <PWMInit+0x64>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fb0f 	bl	8004fa0 <HAL_TIM_Base_Start>
}
 8001982:	bf00      	nop
 8001984:	3710      	adds	r7, #16
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	2000089c 	.word	0x2000089c
 8001990:	200008a0 	.word	0x200008a0
 8001994:	200008a4 	.word	0x200008a4
 8001998:	200008a8 	.word	0x200008a8

0800199c <calculateOutputPeriodToGetFrequency>:

uint32_t calculateOutputPeriodToGetFrequency (TypesThatUsePWM_t Type, uint32_t desiredFrequency) {
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
	uint32_t finalVal = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60fb      	str	r3, [r7, #12]
	switch (Type) {
 80019ac:	79fb      	ldrb	r3, [r7, #7]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d02c      	beq.n	8001a0c <calculateOutputPeriodToGetFrequency+0x70>
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	dc3d      	bgt.n	8001a32 <calculateOutputPeriodToGetFrequency+0x96>
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d002      	beq.n	80019c0 <calculateOutputPeriodToGetFrequency+0x24>
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d013      	beq.n	80019e6 <calculateOutputPeriodToGetFrequency+0x4a>
 80019be:	e038      	b.n	8001a32 <calculateOutputPeriodToGetFrequency+0x96>
	case 0:
		finalVal = 1/(PWMPre*desiredFrequency);
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	ee07 3a90 	vmov	s15, r3
 80019c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019ca:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001a40 <calculateOutputPeriodToGetFrequency+0xa4>
 80019ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80019de:	ee17 3a90 	vmov	r3, s15
 80019e2:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 80019e4:	e025      	b.n	8001a32 <calculateOutputPeriodToGetFrequency+0x96>
	case 1:
		finalVal = 1/(LEDPre*desiredFrequency);
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	ee07 3a90 	vmov	s15, r3
 80019ec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80019f0:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001a44 <calculateOutputPeriodToGetFrequency+0xa8>
 80019f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019f8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80019fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a04:	ee17 3a90 	vmov	r3, s15
 8001a08:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8001a0a:	e012      	b.n	8001a32 <calculateOutputPeriodToGetFrequency+0x96>
	case 2:
		finalVal = 1/(buzzerPre*desiredFrequency);
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	ee07 3a90 	vmov	s15, r3
 8001a12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a16:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 8001a44 <calculateOutputPeriodToGetFrequency+0xa8>
 8001a1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8001a22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a2a:	ee17 3a90 	vmov	r3, s15
 8001a2e:	60fb      	str	r3, [r7, #12]
		// usart_printf("%d %d\r\n", desiredFrequency, finalVal);
		break;
 8001a30:	bf00      	nop
	}

	return finalVal;
 8001a32:	68fb      	ldr	r3, [r7, #12]
}
 8001a34:	4618      	mov	r0, r3
 8001a36:	3714      	adds	r7, #20
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	360637bd 	.word	0x360637bd
 8001a44:	358637bd 	.word	0x358637bd

08001a48 <safeOutputPeriodValueCalculator>:

uint32_t safeOutputPeriodValueCalculator(int32_t maxVal, float ratioVal) {
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	ed87 0a00 	vstr	s0, [r7]
	// float val = (maxVal);
	// uint32_t val = maxVal;
	// uint32_t val = 500;

	uint32_t val1 = maxVal * ratioVal;// (uint32_t)val;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	ee07 3a90 	vmov	s15, r3
 8001a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a5e:	edd7 7a00 	vldr	s15, [r7]
 8001a62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a6a:	ee17 3a90 	vmov	r3, s15
 8001a6e:	60fb      	str	r3, [r7, #12]

	if (val1 > (uint32_t)maxVal) {
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	68fa      	ldr	r2, [r7, #12]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	d902      	bls.n	8001a7e <safeOutputPeriodValueCalculator+0x36>
		val1 = (uint32_t)(maxVal);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e004      	b.n	8001a88 <safeOutputPeriodValueCalculator+0x40>
	} else if (val1 < 1) {
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <safeOutputPeriodValueCalculator+0x40>
		val1 = 1;
 8001a84:	2301      	movs	r3, #1
 8001a86:	60fb      	str	r3, [r7, #12]
	}

	// val1 = val1-1;
	return val1;
 8001a88:	68fb      	ldr	r3, [r7, #12]

}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3714      	adds	r7, #20
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a94:	4770      	bx	lr
	...

08001a98 <calculateOutputPeriodValue>:

uint32_t calculateOutputPeriodValue (TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	ed87 0a00 	vstr	s0, [r7]
 8001aa4:	71fb      	strb	r3, [r7, #7]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	71bb      	strb	r3, [r7, #6]
 8001aaa:	4613      	mov	r3, r2
 8001aac:	717b      	strb	r3, [r7, #5]
	uint32_t returnVal = 0;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	60fb      	str	r3, [r7, #12]
	// usart_printf("beanis1 %d", position);
	switch (Type) {
 8001ab2:	79fb      	ldrb	r3, [r7, #7]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d03c      	beq.n	8001b32 <calculateOutputPeriodValue+0x9a>
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	dc51      	bgt.n	8001b60 <calculateOutputPeriodValue+0xc8>
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d002      	beq.n	8001ac6 <calculateOutputPeriodValue+0x2e>
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d01b      	beq.n	8001afc <calculateOutputPeriodValue+0x64>
 8001ac4:	e04c      	b.n	8001b60 <calculateOutputPeriodValue+0xc8>
		case 0:
			if (microsecondOrFullrange == MS) {
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d10a      	bne.n	8001ae2 <calculateOutputPeriodValue+0x4a>
				returnVal = (uint32_t)(val)/PWMµsPre;
 8001acc:	edd7 7a00 	vldr	s15, [r7]
 8001ad0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ad4:	ee17 2a90 	vmov	r2, s15
 8001ad8:	2302      	movs	r3, #2
 8001ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ade:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
			}
			// usart_printf("beanis %d %d\r\n", returnVal, period[position-1]);
			// PWMS[position-1].period = returnVal;
			break;
 8001ae0:	e03e      	b.n	8001b60 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position-1], val);
 8001ae2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	4a20      	ldr	r2, [pc, #128]	@ (8001b6c <calculateOutputPeriodValue+0xd4>)
 8001aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001aee:	ed97 0a00 	vldr	s0, [r7]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ffa8 	bl	8001a48 <safeOutputPeriodValueCalculator>
 8001af8:	60f8      	str	r0, [r7, #12]
			break;
 8001afa:	e031      	b.n	8001b60 <calculateOutputPeriodValue+0xc8>
		case 1:
			if (microsecondOrFullrange == MS) {
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d10a      	bne.n	8001b18 <calculateOutputPeriodValue+0x80>
				returnVal = (uint32_t)(val)/LEDµsPre;
 8001b02:	edd7 7a00 	vldr	s15, [r7]
 8001b06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b0a:	ee17 2a90 	vmov	r2, s15
 8001b0e:	2301      	movs	r3, #1
 8001b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b14:	60fb      	str	r3, [r7, #12]
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
			}
			// usart_printf("%d %d\r\n", returnVal, period[position+6]);
			// (int32_t)((float)(period[position+6]) * val)
			// PWMS[position+6].period = returnVal;
			break;
 8001b16:	e023      	b.n	8001b60 <calculateOutputPeriodValue+0xc8>
				returnVal = safeOutputPeriodValueCalculator(period[position+6], val);
 8001b18:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001b1c:	3306      	adds	r3, #6
 8001b1e:	4a13      	ldr	r2, [pc, #76]	@ (8001b6c <calculateOutputPeriodValue+0xd4>)
 8001b20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b24:	ed97 0a00 	vldr	s0, [r7]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7ff ff8d 	bl	8001a48 <safeOutputPeriodValueCalculator>
 8001b2e:	60f8      	str	r0, [r7, #12]
			break;
 8001b30:	e016      	b.n	8001b60 <calculateOutputPeriodValue+0xc8>
		case 2:
			if (microsecondOrFullrange == MS) {
 8001b32:	79bb      	ldrb	r3, [r7, #6]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d10a      	bne.n	8001b4e <calculateOutputPeriodValue+0xb6>
				returnVal = (uint32_t)(val)/buzzerµsPre;
 8001b38:	edd7 7a00 	vldr	s15, [r7]
 8001b3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001b40:	ee17 2a90 	vmov	r2, s15
 8001b44:	2301      	movs	r3, #1
 8001b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b4a:	60fb      	str	r3, [r7, #12]
			} else {
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
			}
			// PWMS[10].period = returnVal;
			// usart_printf("%d %d\r\n", returnVal, period[10]);
			break;
 8001b4c:	e007      	b.n	8001b5e <calculateOutputPeriodValue+0xc6>
				returnVal = safeOutputPeriodValueCalculator(period[10], val);
 8001b4e:	4b07      	ldr	r3, [pc, #28]	@ (8001b6c <calculateOutputPeriodValue+0xd4>)
 8001b50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b52:	ed97 0a00 	vldr	s0, [r7]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff ff76 	bl	8001a48 <safeOutputPeriodValueCalculator>
 8001b5c:	60f8      	str	r0, [r7, #12]
			break;
 8001b5e:	bf00      	nop
		default:
	}
	return returnVal;
 8001b60:	68fb      	ldr	r3, [r7, #12]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	200008e4 	.word	0x200008e4

08001b70 <PWMInitialize>:

void PWMInitialize(TypesThatUsePWM_t Type, msOrFullRange microsecondOrFullrange, int8_t position, float val) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4603      	mov	r3, r0
 8001b78:	ed87 0a00 	vstr	s0, [r7]
 8001b7c:	71fb      	strb	r3, [r7, #7]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	71bb      	strb	r3, [r7, #6]
 8001b82:	4613      	mov	r3, r2
 8001b84:	717b      	strb	r3, [r7, #5]

	// usart_printf("beanis2 %d\r\n", position);

	uint32_t value = calculateOutputPeriodValue (Type, microsecondOrFullrange, position, val);
 8001b86:	f997 2005 	ldrsb.w	r2, [r7, #5]
 8001b8a:	79b9      	ldrb	r1, [r7, #6]
 8001b8c:	79fb      	ldrb	r3, [r7, #7]
 8001b8e:	ed97 0a00 	vldr	s0, [r7]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f7ff ff80 	bl	8001a98 <calculateOutputPeriodValue>
 8001b98:	60f8      	str	r0, [r7, #12]
	switch (Type) {
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d076      	beq.n	8001c8e <PWMInitialize+0x11e>
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	dc7e      	bgt.n	8001ca2 <PWMInitialize+0x132>
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <PWMInitialize+0x3e>
 8001ba8:	2b01      	cmp	r3, #1
 8001baa:	d04a      	beq.n	8001c42 <PWMInitialize+0xd2>
	case 2:
		(*tim4).Instance->CCR3=value;
		subPeriod[10] = value;
		break;
	}
	return;
 8001bac:	e079      	b.n	8001ca2 <PWMInitialize+0x132>
		switch (position) {
 8001bae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	2b06      	cmp	r3, #6
 8001bb6:	d83b      	bhi.n	8001c30 <PWMInitialize+0xc0>
 8001bb8:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc0 <PWMInitialize+0x50>)
 8001bba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bbe:	bf00      	nop
 8001bc0:	08001bdd 	.word	0x08001bdd
 8001bc4:	08001be9 	.word	0x08001be9
 8001bc8:	08001bf5 	.word	0x08001bf5
 8001bcc:	08001c01 	.word	0x08001c01
 8001bd0:	08001c0d 	.word	0x08001c0d
 8001bd4:	08001c19 	.word	0x08001c19
 8001bd8:	08001c25 	.word	0x08001c25
			(*tim1).Instance->CCR1=value;
 8001bdc:	4b33      	ldr	r3, [pc, #204]	@ (8001cac <PWMInitialize+0x13c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	68fa      	ldr	r2, [r7, #12]
 8001be4:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001be6:	e024      	b.n	8001c32 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR2=value;
 8001be8:	4b30      	ldr	r3, [pc, #192]	@ (8001cac <PWMInitialize+0x13c>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68fa      	ldr	r2, [r7, #12]
 8001bf0:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001bf2:	e01e      	b.n	8001c32 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR3=value;
 8001bf4:	4b2d      	ldr	r3, [pc, #180]	@ (8001cac <PWMInitialize+0x13c>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68fa      	ldr	r2, [r7, #12]
 8001bfc:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001bfe:	e018      	b.n	8001c32 <PWMInitialize+0xc2>
			(*tim1).Instance->CCR4=value;
 8001c00:	4b2a      	ldr	r3, [pc, #168]	@ (8001cac <PWMInitialize+0x13c>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	641a      	str	r2, [r3, #64]	@ 0x40
			break;
 8001c0a:	e012      	b.n	8001c32 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR1=value;
 8001c0c:	4b28      	ldr	r3, [pc, #160]	@ (8001cb0 <PWMInitialize+0x140>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68fa      	ldr	r2, [r7, #12]
 8001c14:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001c16:	e00c      	b.n	8001c32 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR2=value;
 8001c18:	4b25      	ldr	r3, [pc, #148]	@ (8001cb0 <PWMInitialize+0x140>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	68fa      	ldr	r2, [r7, #12]
 8001c20:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001c22:	e006      	b.n	8001c32 <PWMInitialize+0xc2>
			(*tim8).Instance->CCR3=value;
 8001c24:	4b22      	ldr	r3, [pc, #136]	@ (8001cb0 <PWMInitialize+0x140>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	68fa      	ldr	r2, [r7, #12]
 8001c2c:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001c2e:	e000      	b.n	8001c32 <PWMInitialize+0xc2>
			break;
 8001c30:	bf00      	nop
		subPeriod[position-1] = value;
 8001c32:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c36:	3b01      	subs	r3, #1
 8001c38:	68fa      	ldr	r2, [r7, #12]
 8001c3a:	491e      	ldr	r1, [pc, #120]	@ (8001cb4 <PWMInitialize+0x144>)
 8001c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001c40:	e02e      	b.n	8001ca0 <PWMInitialize+0x130>
		switch (position) {
 8001c42:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c46:	2b03      	cmp	r3, #3
 8001c48:	d012      	beq.n	8001c70 <PWMInitialize+0x100>
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	dc16      	bgt.n	8001c7c <PWMInitialize+0x10c>
 8001c4e:	2b01      	cmp	r3, #1
 8001c50:	d002      	beq.n	8001c58 <PWMInitialize+0xe8>
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d006      	beq.n	8001c64 <PWMInitialize+0xf4>
			break;
 8001c56:	e011      	b.n	8001c7c <PWMInitialize+0x10c>
			(*tim5).Instance->CCR1=value;
 8001c58:	4b17      	ldr	r3, [pc, #92]	@ (8001cb8 <PWMInitialize+0x148>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68fa      	ldr	r2, [r7, #12]
 8001c60:	635a      	str	r2, [r3, #52]	@ 0x34
			break;
 8001c62:	e00c      	b.n	8001c7e <PWMInitialize+0x10e>
			(*tim5).Instance->CCR2=value;
 8001c64:	4b14      	ldr	r3, [pc, #80]	@ (8001cb8 <PWMInitialize+0x148>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	639a      	str	r2, [r3, #56]	@ 0x38
			break;
 8001c6e:	e006      	b.n	8001c7e <PWMInitialize+0x10e>
			(*tim5).Instance->CCR3=value;
 8001c70:	4b11      	ldr	r3, [pc, #68]	@ (8001cb8 <PWMInitialize+0x148>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68fa      	ldr	r2, [r7, #12]
 8001c78:	63da      	str	r2, [r3, #60]	@ 0x3c
			break;
 8001c7a:	e000      	b.n	8001c7e <PWMInitialize+0x10e>
			break;
 8001c7c:	bf00      	nop
		subPeriod[position+6] = value;
 8001c7e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001c82:	3306      	adds	r3, #6
 8001c84:	68fa      	ldr	r2, [r7, #12]
 8001c86:	490b      	ldr	r1, [pc, #44]	@ (8001cb4 <PWMInitialize+0x144>)
 8001c88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001c8c:	e008      	b.n	8001ca0 <PWMInitialize+0x130>
		(*tim4).Instance->CCR3=value;
 8001c8e:	4b0b      	ldr	r3, [pc, #44]	@ (8001cbc <PWMInitialize+0x14c>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	63da      	str	r2, [r3, #60]	@ 0x3c
		subPeriod[10] = value;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4a06      	ldr	r2, [pc, #24]	@ (8001cb4 <PWMInitialize+0x144>)
 8001c9c:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8001c9e:	bf00      	nop
	return;
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
}
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000089c 	.word	0x2000089c
 8001cb0:	200008a8 	.word	0x200008a8
 8001cb4:	200008b8 	.word	0x200008b8
 8001cb8:	200008a4 	.word	0x200008a4
 8001cbc:	200008a0 	.word	0x200008a0

08001cc0 <MotorPositionForInitializingPeriod>:

void MotorPositionForInitializingPeriod(int8_t Position, uint32_t calculatedPeriod) {
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	6039      	str	r1, [r7, #0]
 8001cca:	71fb      	strb	r3, [r7, #7]
	if (Position < 5) {
 8001ccc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd0:	2b04      	cmp	r3, #4
 8001cd2:	dc0c      	bgt.n	8001cee <MotorPositionForInitializingPeriod+0x2e>

		(*tim1).Instance->ARR = calculatedPeriod;
 8001cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001d14 <MotorPositionForInitializingPeriod+0x54>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	62da      	str	r2, [r3, #44]	@ 0x2c
		// (*tim1).Init.Period = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
 8001cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce2:	3b01      	subs	r3, #1
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	490c      	ldr	r1, [pc, #48]	@ (8001d18 <MotorPositionForInitializingPeriod+0x58>)
 8001ce8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	} else {
		(*tim8).Instance->ARR = calculatedPeriod;
		period[Position-1] = calculatedPeriod;
	}

}
 8001cec:	e00b      	b.n	8001d06 <MotorPositionForInitializingPeriod+0x46>
		(*tim8).Instance->ARR = calculatedPeriod;
 8001cee:	4b0b      	ldr	r3, [pc, #44]	@ (8001d1c <MotorPositionForInitializingPeriod+0x5c>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position-1] = calculatedPeriod;
 8001cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cfc:	3b01      	subs	r3, #1
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	4905      	ldr	r1, [pc, #20]	@ (8001d18 <MotorPositionForInitializingPeriod+0x58>)
 8001d02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr
 8001d12:	bf00      	nop
 8001d14:	2000089c 	.word	0x2000089c
 8001d18:	200008e4 	.word	0x200008e4
 8001d1c:	200008a8 	.word	0x200008a8

08001d20 <initializePeriod>:

// htim1.Init.Period
void initializePeriod (TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	4603      	mov	r3, r0
 8001d28:	603a      	str	r2, [r7, #0]
 8001d2a:	71fb      	strb	r3, [r7, #7]
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	71bb      	strb	r3, [r7, #6]
	uint32_t calculatedPeriod = calculateOutputPeriodToGetFrequency(Type, desiredFrequency);
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	6839      	ldr	r1, [r7, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff fe31 	bl	800199c <calculateOutputPeriodToGetFrequency>
 8001d3a:	60f8      	str	r0, [r7, #12]
	// usart_printf("%d %d\r\n", Position ,calculatedPeriod);
	switch (Type) {
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b02      	cmp	r3, #2
 8001d40:	d01a      	beq.n	8001d78 <initializePeriod+0x58>
 8001d42:	2b02      	cmp	r3, #2
 8001d44:	dc22      	bgt.n	8001d8c <initializePeriod+0x6c>
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d002      	beq.n	8001d50 <initializePeriod+0x30>
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d007      	beq.n	8001d5e <initializePeriod+0x3e>
		// (*tim4).Init.Period = calculatedPeriod;
		(*tim4).Instance->ARR = calculatedPeriod;
		period[10] = calculatedPeriod;
		break;
	}
	return;
 8001d4e:	e01d      	b.n	8001d8c <initializePeriod+0x6c>
		MotorPositionForInitializingPeriod(Position, calculatedPeriod);
 8001d50:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d54:	68f9      	ldr	r1, [r7, #12]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ffb2 	bl	8001cc0 <MotorPositionForInitializingPeriod>
		break;
 8001d5c:	e015      	b.n	8001d8a <initializePeriod+0x6a>
		(*tim5).Instance->ARR = calculatedPeriod;
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <initializePeriod+0x74>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	68fa      	ldr	r2, [r7, #12]
 8001d66:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[Position+6] = calculatedPeriod;
 8001d68:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001d6c:	3306      	adds	r3, #6
 8001d6e:	68fa      	ldr	r2, [r7, #12]
 8001d70:	4909      	ldr	r1, [pc, #36]	@ (8001d98 <initializePeriod+0x78>)
 8001d72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		break;
 8001d76:	e008      	b.n	8001d8a <initializePeriod+0x6a>
		(*tim4).Instance->ARR = calculatedPeriod;
 8001d78:	4b08      	ldr	r3, [pc, #32]	@ (8001d9c <initializePeriod+0x7c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68fa      	ldr	r2, [r7, #12]
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
		period[10] = calculatedPeriod;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	4a04      	ldr	r2, [pc, #16]	@ (8001d98 <initializePeriod+0x78>)
 8001d86:	6293      	str	r3, [r2, #40]	@ 0x28
		break;
 8001d88:	bf00      	nop
	return;
 8001d8a:	bf00      	nop
 8001d8c:	bf00      	nop
}
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	200008a4 	.word	0x200008a4
 8001d98:	200008e4 	.word	0x200008e4
 8001d9c:	200008a0 	.word	0x200008a0

08001da0 <PWMOutput>:

// (Type, Position, ms or fullrange, val)
void PWMOutput(TypesThatUsePWM_t Type, int8_t Position, uint32_t desiredFrequency) {
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	603a      	str	r2, [r7, #0]
 8001daa:	71fb      	strb	r3, [r7, #7]
 8001dac:	460b      	mov	r3, r1
 8001dae:	71bb      	strb	r3, [r7, #6]

	initializePeriod(Type, Position, desiredFrequency);
 8001db0:	f997 1006 	ldrsb.w	r1, [r7, #6]
 8001db4:	79fb      	ldrb	r3, [r7, #7]
 8001db6:	683a      	ldr	r2, [r7, #0]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ffb1 	bl	8001d20 <initializePeriod>

	// usart_printf("beanis3 %d\r\n", Position);
	switch (Type) {
 8001dbe:	79fb      	ldrb	r3, [r7, #7]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d014      	beq.n	8001dee <PWMOutput+0x4e>
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	dc16      	bgt.n	8001df6 <PWMOutput+0x56>
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d002      	beq.n	8001dd2 <PWMOutput+0x32>
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d007      	beq.n	8001de0 <PWMOutput+0x40>
 8001dd0:	e011      	b.n	8001df6 <PWMOutput+0x56>
	case 0:
		whichPWMisOn[Position-1] = 1;
 8001dd2:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	4a08      	ldr	r2, [pc, #32]	@ (8001dfc <PWMOutput+0x5c>)
 8001dda:	2101      	movs	r1, #1
 8001ddc:	54d1      	strb	r1, [r2, r3]
		// usart_printf("PWM %d\r\n", Position);
		return;
 8001dde:	e00a      	b.n	8001df6 <PWMOutput+0x56>
	case 1:
		whichPWMisOn[Position+6] = 1;
 8001de0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001de4:	3306      	adds	r3, #6
 8001de6:	4a05      	ldr	r2, [pc, #20]	@ (8001dfc <PWMOutput+0x5c>)
 8001de8:	2101      	movs	r1, #1
 8001dea:	54d1      	strb	r1, [r2, r3]
		// usart_printf("LED %d\r\n", Position);
		return;
 8001dec:	e003      	b.n	8001df6 <PWMOutput+0x56>
	case 2:
		whichPWMisOn[10] = 1;
 8001dee:	4b03      	ldr	r3, [pc, #12]	@ (8001dfc <PWMOutput+0x5c>)
 8001df0:	2201      	movs	r2, #1
 8001df2:	729a      	strb	r2, [r3, #10]
		// usart_printf("Buzzer %d\r\n", Position);
		return;
 8001df4:	bf00      	nop
	}
	// whichPWMisOn[7]= 1;
	// usart_printf("beanis7 %d %d\r\n", Position, whichPWMisOn[Position-1]);
	// return;
}
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	200008ac 	.word	0x200008ac

08001e00 <mainPrint>:
int32_t frequency[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int32_t subPeriod[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int32_t period[11] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
*/

void mainPrint() {
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
	usart_printf("          |  1  |  2  |  3  |  4  |  5  |  6  |  7  |  1  |  2  |  3  |   1    |\r\n");
	*/
	// usart_printf("Is it on? |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |  ‰d  |\r\n", whichPWMisOn[0], whichPWMisOn[1], whichPWMisOn[2], whichPWMisOn[3], whichPWMisOn[4], whichPWMisOn[5], whichPWMisOn[6], whichPWMisOn[7], whichPWMisOn[8], whichPWMisOn[9], whichPWMisOn[10]);

	// usart_printf("||| %d | %d | %d \r\n", whichPWMisOn[10], period[10], subPeriod[10]);
}
 8001e04:	bf00      	nop
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <PWMTimerStarter>:

void PWMTimerStarter() {
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
	for (int i = 0; i < 11; i++) {
 8001e16:	2300      	movs	r3, #0
 8001e18:	607b      	str	r3, [r7, #4]
 8001e1a:	e0f1      	b.n	8002000 <PWMTimerStarter+0x1f0>
		switch (i) {
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b0a      	cmp	r3, #10
 8001e20:	f200 80eb 	bhi.w	8001ffa <PWMTimerStarter+0x1ea>
 8001e24:	a201      	add	r2, pc, #4	@ (adr r2, 8001e2c <PWMTimerStarter+0x1c>)
 8001e26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e2a:	bf00      	nop
 8001e2c:	08001e59 	.word	0x08001e59
 8001e30:	08001e7f 	.word	0x08001e7f
 8001e34:	08001ea5 	.word	0x08001ea5
 8001e38:	08001ecb 	.word	0x08001ecb
 8001e3c:	08001ef1 	.word	0x08001ef1
 8001e40:	08001f17 	.word	0x08001f17
 8001e44:	08001f3d 	.word	0x08001f3d
 8001e48:	08001f63 	.word	0x08001f63
 8001e4c:	08001f89 	.word	0x08001f89
 8001e50:	08001faf 	.word	0x08001faf
 8001e54:	08001fd5 	.word	0x08001fd5
		case 0:
			if (whichPWMisOn[0] == 1) {
 8001e58:	4b6e      	ldr	r3, [pc, #440]	@ (8002014 <PWMTimerStarter+0x204>)
 8001e5a:	f993 3000 	ldrsb.w	r3, [r3]
 8001e5e:	2b01      	cmp	r3, #1
 8001e60:	d106      	bne.n	8001e70 <PWMTimerStarter+0x60>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_1);
 8001e62:	4b6d      	ldr	r3, [pc, #436]	@ (8002018 <PWMTimerStarter+0x208>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2100      	movs	r1, #0
 8001e68:	4618      	mov	r0, r3
 8001e6a:	f003 f951 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
			}
			break;
 8001e6e:	e0c4      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_1);
 8001e70:	4b69      	ldr	r3, [pc, #420]	@ (8002018 <PWMTimerStarter+0x208>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2100      	movs	r1, #0
 8001e76:	4618      	mov	r0, r3
 8001e78:	f003 fa12 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001e7c:	e0bd      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 1:
			if (whichPWMisOn[1] == 1) {
 8001e7e:	4b65      	ldr	r3, [pc, #404]	@ (8002014 <PWMTimerStarter+0x204>)
 8001e80:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d106      	bne.n	8001e96 <PWMTimerStarter+0x86>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_2);
 8001e88:	4b63      	ldr	r3, [pc, #396]	@ (8002018 <PWMTimerStarter+0x208>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	2104      	movs	r1, #4
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f003 f93e 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
			}
			break;
 8001e94:	e0b1      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_2);
 8001e96:	4b60      	ldr	r3, [pc, #384]	@ (8002018 <PWMTimerStarter+0x208>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2104      	movs	r1, #4
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 f9ff 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001ea2:	e0aa      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 2:
			if (whichPWMisOn[2] == 1) {
 8001ea4:	4b5b      	ldr	r3, [pc, #364]	@ (8002014 <PWMTimerStarter+0x204>)
 8001ea6:	f993 3002 	ldrsb.w	r3, [r3, #2]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d106      	bne.n	8001ebc <PWMTimerStarter+0xac>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_3);
 8001eae:	4b5a      	ldr	r3, [pc, #360]	@ (8002018 <PWMTimerStarter+0x208>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2108      	movs	r1, #8
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f003 f92b 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
			}
			break;
 8001eba:	e09e      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_3);
 8001ebc:	4b56      	ldr	r3, [pc, #344]	@ (8002018 <PWMTimerStarter+0x208>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2108      	movs	r1, #8
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f003 f9ec 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001ec8:	e097      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 3:
			if (whichPWMisOn[3] == 1) {
 8001eca:	4b52      	ldr	r3, [pc, #328]	@ (8002014 <PWMTimerStarter+0x204>)
 8001ecc:	f993 3003 	ldrsb.w	r3, [r3, #3]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d106      	bne.n	8001ee2 <PWMTimerStarter+0xd2>
				HAL_TIM_PWM_Start(tim1, TIM_CHANNEL_4);
 8001ed4:	4b50      	ldr	r3, [pc, #320]	@ (8002018 <PWMTimerStarter+0x208>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	210c      	movs	r1, #12
 8001eda:	4618      	mov	r0, r3
 8001edc:	f003 f918 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
			}
			break;
 8001ee0:	e08b      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim1, TIM_CHANNEL_4);
 8001ee2:	4b4d      	ldr	r3, [pc, #308]	@ (8002018 <PWMTimerStarter+0x208>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	210c      	movs	r1, #12
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f003 f9d9 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001eee:	e084      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 4:
			if (whichPWMisOn[4] == 1) {
 8001ef0:	4b48      	ldr	r3, [pc, #288]	@ (8002014 <PWMTimerStarter+0x204>)
 8001ef2:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d106      	bne.n	8001f08 <PWMTimerStarter+0xf8>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_1);
 8001efa:	4b48      	ldr	r3, [pc, #288]	@ (800201c <PWMTimerStarter+0x20c>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	2100      	movs	r1, #0
 8001f00:	4618      	mov	r0, r3
 8001f02:	f003 f905 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
			}
			break;
 8001f06:	e078      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_1);
 8001f08:	4b44      	ldr	r3, [pc, #272]	@ (800201c <PWMTimerStarter+0x20c>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	4618      	mov	r0, r3
 8001f10:	f003 f9c6 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001f14:	e071      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 5:
			if (whichPWMisOn[5] == 1) {
 8001f16:	4b3f      	ldr	r3, [pc, #252]	@ (8002014 <PWMTimerStarter+0x204>)
 8001f18:	f993 3005 	ldrsb.w	r3, [r3, #5]
 8001f1c:	2b01      	cmp	r3, #1
 8001f1e:	d106      	bne.n	8001f2e <PWMTimerStarter+0x11e>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_2);
 8001f20:	4b3e      	ldr	r3, [pc, #248]	@ (800201c <PWMTimerStarter+0x20c>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2104      	movs	r1, #4
 8001f26:	4618      	mov	r0, r3
 8001f28:	f003 f8f2 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
			}
			break;
 8001f2c:	e065      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_2);
 8001f2e:	4b3b      	ldr	r3, [pc, #236]	@ (800201c <PWMTimerStarter+0x20c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2104      	movs	r1, #4
 8001f34:	4618      	mov	r0, r3
 8001f36:	f003 f9b3 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001f3a:	e05e      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 6:
			if (whichPWMisOn[6] == 1) {
 8001f3c:	4b35      	ldr	r3, [pc, #212]	@ (8002014 <PWMTimerStarter+0x204>)
 8001f3e:	f993 3006 	ldrsb.w	r3, [r3, #6]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d106      	bne.n	8001f54 <PWMTimerStarter+0x144>
				HAL_TIM_PWM_Start(tim8, TIM_CHANNEL_3);
 8001f46:	4b35      	ldr	r3, [pc, #212]	@ (800201c <PWMTimerStarter+0x20c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f003 f8df 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
			}
			break;
 8001f52:	e052      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim8, TIM_CHANNEL_3);
 8001f54:	4b31      	ldr	r3, [pc, #196]	@ (800201c <PWMTimerStarter+0x20c>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2108      	movs	r1, #8
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f003 f9a0 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001f60:	e04b      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 7:
			if (whichPWMisOn[7] == 1) {
 8001f62:	4b2c      	ldr	r3, [pc, #176]	@ (8002014 <PWMTimerStarter+0x204>)
 8001f64:	f993 3007 	ldrsb.w	r3, [r3, #7]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d106      	bne.n	8001f7a <PWMTimerStarter+0x16a>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_1);
 8001f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <PWMTimerStarter+0x210>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	2100      	movs	r1, #0
 8001f72:	4618      	mov	r0, r3
 8001f74:	f003 f8cc 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
			}
			break;
 8001f78:	e03f      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_1);
 8001f7a:	4b29      	ldr	r3, [pc, #164]	@ (8002020 <PWMTimerStarter+0x210>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2100      	movs	r1, #0
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 f98d 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001f86:	e038      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 8:
			if (whichPWMisOn[8] == 1) {
 8001f88:	4b22      	ldr	r3, [pc, #136]	@ (8002014 <PWMTimerStarter+0x204>)
 8001f8a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d106      	bne.n	8001fa0 <PWMTimerStarter+0x190>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_2);
 8001f92:	4b23      	ldr	r3, [pc, #140]	@ (8002020 <PWMTimerStarter+0x210>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2104      	movs	r1, #4
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f003 f8b9 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
			}
			break;
 8001f9e:	e02c      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_2);
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <PWMTimerStarter+0x210>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2104      	movs	r1, #4
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f003 f97a 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001fac:	e025      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 9:
			if (whichPWMisOn[9] == 1) {
 8001fae:	4b19      	ldr	r3, [pc, #100]	@ (8002014 <PWMTimerStarter+0x204>)
 8001fb0:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d106      	bne.n	8001fc6 <PWMTimerStarter+0x1b6>
				HAL_TIM_PWM_Start(tim5, TIM_CHANNEL_3);
 8001fb8:	4b19      	ldr	r3, [pc, #100]	@ (8002020 <PWMTimerStarter+0x210>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2108      	movs	r1, #8
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f003 f8a6 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
			}
			// usart_printf("Returned1\r\n");
			break;
 8001fc4:	e019      	b.n	8001ffa <PWMTimerStarter+0x1ea>
				HAL_TIM_PWM_Stop(tim5, TIM_CHANNEL_3);
 8001fc6:	4b16      	ldr	r3, [pc, #88]	@ (8002020 <PWMTimerStarter+0x210>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2108      	movs	r1, #8
 8001fcc:	4618      	mov	r0, r3
 8001fce:	f003 f967 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001fd2:	e012      	b.n	8001ffa <PWMTimerStarter+0x1ea>
		case 10:
			if (whichPWMisOn[10] == 1) {
 8001fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <PWMTimerStarter+0x204>)
 8001fd6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d106      	bne.n	8001fec <PWMTimerStarter+0x1dc>
				HAL_TIM_PWM_Start(tim4, TIM_CHANNEL_3);
 8001fde:	4b11      	ldr	r3, [pc, #68]	@ (8002024 <PWMTimerStarter+0x214>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2108      	movs	r1, #8
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f003 f893 	bl	8005110 <HAL_TIM_PWM_Start>
			} else {
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
			}
			// usart_printf("Returned2\r\n");
			break;
 8001fea:	e005      	b.n	8001ff8 <PWMTimerStarter+0x1e8>
				HAL_TIM_PWM_Stop(tim4, TIM_CHANNEL_3);
 8001fec:	4b0d      	ldr	r3, [pc, #52]	@ (8002024 <PWMTimerStarter+0x214>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2108      	movs	r1, #8
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f003 f954 	bl	80052a0 <HAL_TIM_PWM_Stop>
			break;
 8001ff8:	bf00      	nop
	for (int i = 0; i < 11; i++) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	607b      	str	r3, [r7, #4]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	2b0a      	cmp	r3, #10
 8002004:	f77f af0a 	ble.w	8001e1c <PWMTimerStarter+0xc>
		}
	}
}
 8002008:	bf00      	nop
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	200008ac 	.word	0x200008ac
 8002018:	2000089c 	.word	0x2000089c
 800201c:	200008a8 	.word	0x200008a8
 8002020:	200008a4 	.word	0x200008a4
 8002024:	200008a0 	.word	0x200008a0

08002028 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
 8002032:	4b12      	ldr	r3, [pc, #72]	@ (800207c <HAL_MspInit+0x54>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a11      	ldr	r2, [pc, #68]	@ (800207c <HAL_MspInit+0x54>)
 8002038:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b0f      	ldr	r3, [pc, #60]	@ (800207c <HAL_MspInit+0x54>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002046:	607b      	str	r3, [r7, #4]
 8002048:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	603b      	str	r3, [r7, #0]
 800204e:	4b0b      	ldr	r3, [pc, #44]	@ (800207c <HAL_MspInit+0x54>)
 8002050:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002052:	4a0a      	ldr	r2, [pc, #40]	@ (800207c <HAL_MspInit+0x54>)
 8002054:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002058:	6413      	str	r3, [r2, #64]	@ 0x40
 800205a:	4b08      	ldr	r3, [pc, #32]	@ (800207c <HAL_MspInit+0x54>)
 800205c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002062:	603b      	str	r3, [r7, #0]
 8002064:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	210f      	movs	r1, #15
 800206a:	f06f 0001 	mvn.w	r0, #1
 800206e:	f001 fad0 	bl	8003612 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002072:	bf00      	nop
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	40023800 	.word	0x40023800

08002080 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b08c      	sub	sp, #48	@ 0x30
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002088:	f107 031c 	add.w	r3, r7, #28
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a4a      	ldr	r2, [pc, #296]	@ (80021c8 <HAL_CAN_MspInit+0x148>)
 800209e:	4293      	cmp	r3, r2
 80020a0:	d13d      	bne.n	800211e <HAL_CAN_MspInit+0x9e>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80020a2:	4b4a      	ldr	r3, [pc, #296]	@ (80021cc <HAL_CAN_MspInit+0x14c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	3301      	adds	r3, #1
 80020a8:	4a48      	ldr	r2, [pc, #288]	@ (80021cc <HAL_CAN_MspInit+0x14c>)
 80020aa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80020ac:	4b47      	ldr	r3, [pc, #284]	@ (80021cc <HAL_CAN_MspInit+0x14c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10d      	bne.n	80020d0 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80020b4:	2300      	movs	r3, #0
 80020b6:	61bb      	str	r3, [r7, #24]
 80020b8:	4b45      	ldr	r3, [pc, #276]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 80020ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020bc:	4a44      	ldr	r2, [pc, #272]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 80020be:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020c2:	6413      	str	r3, [r2, #64]	@ 0x40
 80020c4:	4b42      	ldr	r3, [pc, #264]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 80020c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	4b3e      	ldr	r3, [pc, #248]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 80020d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d8:	4a3d      	ldr	r2, [pc, #244]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 80020da:	f043 0308 	orr.w	r3, r3, #8
 80020de:	6313      	str	r3, [r2, #48]	@ 0x30
 80020e0:	4b3b      	ldr	r3, [pc, #236]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 80020e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e4:	f003 0308 	and.w	r3, r3, #8
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80020ec:	2303      	movs	r3, #3
 80020ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020f0:	2302      	movs	r3, #2
 80020f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f4:	2300      	movs	r3, #0
 80020f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020f8:	2303      	movs	r3, #3
 80020fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80020fc:	2309      	movs	r3, #9
 80020fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002100:	f107 031c 	add.w	r3, r7, #28
 8002104:	4619      	mov	r1, r3
 8002106:	4833      	ldr	r0, [pc, #204]	@ (80021d4 <HAL_CAN_MspInit+0x154>)
 8002108:	f001 febc 	bl	8003e84 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 800210c:	2200      	movs	r2, #0
 800210e:	2105      	movs	r1, #5
 8002110:	2014      	movs	r0, #20
 8002112:	f001 fa7e 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8002116:	2014      	movs	r0, #20
 8002118:	f001 fa97 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }

}
 800211c:	e04f      	b.n	80021be <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a2d      	ldr	r2, [pc, #180]	@ (80021d8 <HAL_CAN_MspInit+0x158>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d14a      	bne.n	80021be <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8002128:	2300      	movs	r3, #0
 800212a:	613b      	str	r3, [r7, #16]
 800212c:	4b28      	ldr	r3, [pc, #160]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	4a27      	ldr	r2, [pc, #156]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 8002132:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002136:	6413      	str	r3, [r2, #64]	@ 0x40
 8002138:	4b25      	ldr	r3, [pc, #148]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 800213a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800213c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_CAN_MspInit+0x14c>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	3301      	adds	r3, #1
 800214a:	4a20      	ldr	r2, [pc, #128]	@ (80021cc <HAL_CAN_MspInit+0x14c>)
 800214c:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 800214e:	4b1f      	ldr	r3, [pc, #124]	@ (80021cc <HAL_CAN_MspInit+0x14c>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b01      	cmp	r3, #1
 8002154:	d10d      	bne.n	8002172 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b1d      	ldr	r3, [pc, #116]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	4a1c      	ldr	r2, [pc, #112]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 8002160:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002164:	6413      	str	r3, [r2, #64]	@ 0x40
 8002166:	4b1a      	ldr	r3, [pc, #104]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 8002168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	4b16      	ldr	r3, [pc, #88]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a15      	ldr	r2, [pc, #84]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b13      	ldr	r3, [pc, #76]	@ (80021d0 <HAL_CAN_MspInit+0x150>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	60bb      	str	r3, [r7, #8]
 800218c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800218e:	2360      	movs	r3, #96	@ 0x60
 8002190:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002192:	2302      	movs	r3, #2
 8002194:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800219a:	2303      	movs	r3, #3
 800219c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800219e:	2309      	movs	r3, #9
 80021a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a2:	f107 031c 	add.w	r3, r7, #28
 80021a6:	4619      	mov	r1, r3
 80021a8:	480c      	ldr	r0, [pc, #48]	@ (80021dc <HAL_CAN_MspInit+0x15c>)
 80021aa:	f001 fe6b 	bl	8003e84 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 80021ae:	2200      	movs	r2, #0
 80021b0:	2105      	movs	r1, #5
 80021b2:	2040      	movs	r0, #64	@ 0x40
 80021b4:	f001 fa2d 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 80021b8:	2040      	movs	r0, #64	@ 0x40
 80021ba:	f001 fa46 	bl	800364a <HAL_NVIC_EnableIRQ>
}
 80021be:	bf00      	nop
 80021c0:	3730      	adds	r7, #48	@ 0x30
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40006400 	.word	0x40006400
 80021cc:	20000910 	.word	0x20000910
 80021d0:	40023800 	.word	0x40023800
 80021d4:	40020c00 	.word	0x40020c00
 80021d8:	40006800 	.word	0x40006800
 80021dc:	40020400 	.word	0x40020400

080021e0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b08a      	sub	sp, #40	@ 0x28
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021e8:	f107 0314 	add.w	r3, r7, #20
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
 80021f2:	609a      	str	r2, [r3, #8]
 80021f4:	60da      	str	r2, [r3, #12]
 80021f6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a29      	ldr	r2, [pc, #164]	@ (80022a4 <HAL_I2C_MspInit+0xc4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d14b      	bne.n	800229a <HAL_I2C_MspInit+0xba>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002202:	2300      	movs	r3, #0
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	4b28      	ldr	r3, [pc, #160]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220a:	4a27      	ldr	r2, [pc, #156]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 800220c:	f043 0304 	orr.w	r3, r3, #4
 8002210:	6313      	str	r3, [r2, #48]	@ 0x30
 8002212:	4b25      	ldr	r3, [pc, #148]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002216:	f003 0304 	and.w	r3, r3, #4
 800221a:	613b      	str	r3, [r7, #16]
 800221c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b21      	ldr	r3, [pc, #132]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002226:	4a20      	ldr	r2, [pc, #128]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002228:	f043 0301 	orr.w	r3, r3, #1
 800222c:	6313      	str	r3, [r2, #48]	@ 0x30
 800222e:	4b1e      	ldr	r3, [pc, #120]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002232:	f003 0301 	and.w	r3, r3, #1
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800223a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002240:	2312      	movs	r3, #18
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800224c:	2304      	movs	r3, #4
 800224e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	4815      	ldr	r0, [pc, #84]	@ (80022ac <HAL_I2C_MspInit+0xcc>)
 8002258:	f001 fe14 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800225c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002260:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002262:	2312      	movs	r3, #18
 8002264:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800226a:	2303      	movs	r3, #3
 800226c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800226e:	2304      	movs	r3, #4
 8002270:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002272:	f107 0314 	add.w	r3, r7, #20
 8002276:	4619      	mov	r1, r3
 8002278:	480d      	ldr	r0, [pc, #52]	@ (80022b0 <HAL_I2C_MspInit+0xd0>)
 800227a:	f001 fe03 	bl	8003e84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800227e:	2300      	movs	r3, #0
 8002280:	60bb      	str	r3, [r7, #8]
 8002282:	4b09      	ldr	r3, [pc, #36]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4a08      	ldr	r2, [pc, #32]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002288:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800228c:	6413      	str	r3, [r2, #64]	@ 0x40
 800228e:	4b06      	ldr	r3, [pc, #24]	@ (80022a8 <HAL_I2C_MspInit+0xc8>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002292:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002296:	60bb      	str	r3, [r7, #8]
 8002298:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800229a:	bf00      	nop
 800229c:	3728      	adds	r7, #40	@ 0x28
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	40005c00 	.word	0x40005c00
 80022a8:	40023800 	.word	0x40023800
 80022ac:	40020800 	.word	0x40020800
 80022b0:	40020000 	.word	0x40020000

080022b4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b08a      	sub	sp, #40	@ 0x28
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022bc:	f107 0314 	add.w	r3, r7, #20
 80022c0:	2200      	movs	r2, #0
 80022c2:	601a      	str	r2, [r3, #0]
 80022c4:	605a      	str	r2, [r3, #4]
 80022c6:	609a      	str	r2, [r3, #8]
 80022c8:	60da      	str	r2, [r3, #12]
 80022ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a28      	ldr	r2, [pc, #160]	@ (8002374 <HAL_SPI_MspInit+0xc0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d149      	bne.n	800236a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	613b      	str	r3, [r7, #16]
 80022da:	4b27      	ldr	r3, [pc, #156]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 80022dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022de:	4a26      	ldr	r2, [pc, #152]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 80022e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e6:	4b24      	ldr	r3, [pc, #144]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	4b20      	ldr	r3, [pc, #128]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022fa:	4a1f      	ldr	r2, [pc, #124]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 80022fc:	f043 0302 	orr.w	r3, r3, #2
 8002300:	6313      	str	r3, [r2, #48]	@ 0x30
 8002302:	4b1d      	ldr	r3, [pc, #116]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f003 0302 	and.w	r3, r3, #2
 800230a:	60fb      	str	r3, [r7, #12]
 800230c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800230e:	2300      	movs	r3, #0
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	4b19      	ldr	r3, [pc, #100]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002316:	4a18      	ldr	r2, [pc, #96]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6313      	str	r3, [r2, #48]	@ 0x30
 800231e:	4b16      	ldr	r3, [pc, #88]	@ (8002378 <HAL_SPI_MspInit+0xc4>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	60bb      	str	r3, [r7, #8]
 8002328:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 800232a:	2318      	movs	r3, #24
 800232c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800232e:	2302      	movs	r3, #2
 8002330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002332:	2300      	movs	r3, #0
 8002334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002336:	2303      	movs	r3, #3
 8002338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800233a:	2305      	movs	r3, #5
 800233c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800233e:	f107 0314 	add.w	r3, r7, #20
 8002342:	4619      	mov	r1, r3
 8002344:	480d      	ldr	r0, [pc, #52]	@ (800237c <HAL_SPI_MspInit+0xc8>)
 8002346:	f001 fd9d 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800234a:	2380      	movs	r3, #128	@ 0x80
 800234c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002356:	2303      	movs	r3, #3
 8002358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800235a:	2305      	movs	r3, #5
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800235e:	f107 0314 	add.w	r3, r7, #20
 8002362:	4619      	mov	r1, r3
 8002364:	4806      	ldr	r0, [pc, #24]	@ (8002380 <HAL_SPI_MspInit+0xcc>)
 8002366:	f001 fd8d 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3728      	adds	r7, #40	@ 0x28
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40013000 	.word	0x40013000
 8002378:	40023800 	.word	0x40023800
 800237c:	40020400 	.word	0x40020400
 8002380:	40020000 	.word	0x40020000

08002384 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b086      	sub	sp, #24
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a3b      	ldr	r2, [pc, #236]	@ (8002480 <HAL_TIM_PWM_MspInit+0xfc>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10e      	bne.n	80023b4 <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	617b      	str	r3, [r7, #20]
 800239a:	4b3a      	ldr	r3, [pc, #232]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800239e:	4a39      	ldr	r2, [pc, #228]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023a6:	4b37      	ldr	r3, [pc, #220]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	617b      	str	r3, [r7, #20]
 80023b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80023b2:	e061      	b.n	8002478 <HAL_TIM_PWM_MspInit+0xf4>
  else if(htim_pwm->Instance==TIM5)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	4a33      	ldr	r2, [pc, #204]	@ (8002488 <HAL_TIM_PWM_MspInit+0x104>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d10e      	bne.n	80023dc <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023be:	2300      	movs	r3, #0
 80023c0:	613b      	str	r3, [r7, #16]
 80023c2:	4b30      	ldr	r3, [pc, #192]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c6:	4a2f      	ldr	r2, [pc, #188]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023c8:	f043 0308 	orr.w	r3, r3, #8
 80023cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80023ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	693b      	ldr	r3, [r7, #16]
}
 80023da:	e04d      	b.n	8002478 <HAL_TIM_PWM_MspInit+0xf4>
  else if(htim_pwm->Instance==TIM8)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a2a      	ldr	r2, [pc, #168]	@ (800248c <HAL_TIM_PWM_MspInit+0x108>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d148      	bne.n	8002478 <HAL_TIM_PWM_MspInit+0xf4>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b26      	ldr	r3, [pc, #152]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ee:	4a25      	ldr	r2, [pc, #148]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f6:	4b23      	ldr	r3, [pc, #140]	@ (8002484 <HAL_TIM_PWM_MspInit+0x100>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
    hdma_tim8_ch1_ch2_ch3.Instance = DMA2_Stream2;
 8002402:	4b23      	ldr	r3, [pc, #140]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002404:	4a23      	ldr	r2, [pc, #140]	@ (8002494 <HAL_TIM_PWM_MspInit+0x110>)
 8002406:	601a      	str	r2, [r3, #0]
    hdma_tim8_ch1_ch2_ch3.Init.Channel = DMA_CHANNEL_0;
 8002408:	4b21      	ldr	r3, [pc, #132]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 800240a:	2200      	movs	r2, #0
 800240c:	605a      	str	r2, [r3, #4]
    hdma_tim8_ch1_ch2_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800240e:	4b20      	ldr	r3, [pc, #128]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002410:	2200      	movs	r2, #0
 8002412:	609a      	str	r2, [r3, #8]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 8002414:	4b1e      	ldr	r3, [pc, #120]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002416:	2200      	movs	r2, #0
 8002418:	60da      	str	r2, [r3, #12]
    hdma_tim8_ch1_ch2_ch3.Init.MemInc = DMA_MINC_ENABLE;
 800241a:	4b1d      	ldr	r3, [pc, #116]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 800241c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002420:	611a      	str	r2, [r3, #16]
    hdma_tim8_ch1_ch2_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002422:	4b1b      	ldr	r3, [pc, #108]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002424:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002428:	615a      	str	r2, [r3, #20]
    hdma_tim8_ch1_ch2_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800242a:	4b19      	ldr	r3, [pc, #100]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 800242c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002430:	619a      	str	r2, [r3, #24]
    hdma_tim8_ch1_ch2_ch3.Init.Mode = DMA_NORMAL;
 8002432:	4b17      	ldr	r3, [pc, #92]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002434:	2200      	movs	r2, #0
 8002436:	61da      	str	r2, [r3, #28]
    hdma_tim8_ch1_ch2_ch3.Init.Priority = DMA_PRIORITY_LOW;
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 800243a:	2200      	movs	r2, #0
 800243c:	621a      	str	r2, [r3, #32]
    hdma_tim8_ch1_ch2_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800243e:	4b14      	ldr	r3, [pc, #80]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002440:	2200      	movs	r2, #0
 8002442:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim8_ch1_ch2_ch3) != HAL_OK)
 8002444:	4812      	ldr	r0, [pc, #72]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002446:	f001 f91b 	bl	8003680 <HAL_DMA_Init>
 800244a:	4603      	mov	r3, r0
 800244c:	2b00      	cmp	r3, #0
 800244e:	d001      	beq.n	8002454 <HAL_TIM_PWM_MspInit+0xd0>
      Error_Handler();
 8002450:	f7ff fa6a 	bl	8001928 <Error_Handler>
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim8_ch1_ch2_ch3);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	4a0e      	ldr	r2, [pc, #56]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002458:	625a      	str	r2, [r3, #36]	@ 0x24
 800245a:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC2],hdma_tim8_ch1_ch2_ch3);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	4a0b      	ldr	r2, [pc, #44]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002464:	629a      	str	r2, [r3, #40]	@ 0x28
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6393      	str	r3, [r2, #56]	@ 0x38
    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC3],hdma_tim8_ch1_ch2_ch3);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	4a08      	ldr	r2, [pc, #32]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002470:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_TIM_PWM_MspInit+0x10c>)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8002478:	bf00      	nop
 800247a:	3718      	adds	r7, #24
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}
 8002480:	40010000 	.word	0x40010000
 8002484:	40023800 	.word	0x40023800
 8002488:	40000c00 	.word	0x40000c00
 800248c:	40010400 	.word	0x40010400
 8002490:	20000574 	.word	0x20000574
 8002494:	40026440 	.word	0x40026440

08002498 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a2c      	ldr	r2, [pc, #176]	@ (8002558 <HAL_TIM_Base_MspInit+0xc0>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d13e      	bne.n	8002528 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80024aa:	2300      	movs	r3, #0
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	4b2b      	ldr	r3, [pc, #172]	@ (800255c <HAL_TIM_Base_MspInit+0xc4>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	4a2a      	ldr	r2, [pc, #168]	@ (800255c <HAL_TIM_Base_MspInit+0xc4>)
 80024b4:	f043 0304 	orr.w	r3, r3, #4
 80024b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ba:	4b28      	ldr	r3, [pc, #160]	@ (800255c <HAL_TIM_Base_MspInit+0xc4>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024be:	f003 0304 	and.w	r3, r3, #4
 80024c2:	60fb      	str	r3, [r7, #12]
 80024c4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH3 Init */
    hdma_tim4_ch3.Instance = DMA1_Stream7;
 80024c6:	4b26      	ldr	r3, [pc, #152]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024c8:	4a26      	ldr	r2, [pc, #152]	@ (8002564 <HAL_TIM_Base_MspInit+0xcc>)
 80024ca:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch3.Init.Channel = DMA_CHANNEL_2;
 80024cc:	4b24      	ldr	r3, [pc, #144]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024ce:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024d2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d4:	4b22      	ldr	r3, [pc, #136]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch3.Init.PeriphInc = DMA_PINC_DISABLE;
 80024da:	4b21      	ldr	r3, [pc, #132]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch3.Init.MemInc = DMA_MINC_ENABLE;
 80024e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80024e6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80024e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024ea:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80024ee:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80024f0:	4b1b      	ldr	r3, [pc, #108]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024f2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80024f6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch3.Init.Mode = DMA_NORMAL;
 80024f8:	4b19      	ldr	r3, [pc, #100]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch3.Init.Priority = DMA_PRIORITY_LOW;
 80024fe:	4b18      	ldr	r3, [pc, #96]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 8002500:	2200      	movs	r2, #0
 8002502:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002504:	4b16      	ldr	r3, [pc, #88]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 8002506:	2200      	movs	r2, #0
 8002508:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch3) != HAL_OK)
 800250a:	4815      	ldr	r0, [pc, #84]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 800250c:	f001 f8b8 	bl	8003680 <HAL_DMA_Init>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002516:	f7ff fa07 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC3],hdma_tim4_ch3);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a10      	ldr	r2, [pc, #64]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 800251e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8002520:	4a0f      	ldr	r2, [pc, #60]	@ (8002560 <HAL_TIM_Base_MspInit+0xc8>)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002526:	e012      	b.n	800254e <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM10)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a0e      	ldr	r2, [pc, #56]	@ (8002568 <HAL_TIM_Base_MspInit+0xd0>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d10d      	bne.n	800254e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b09      	ldr	r3, [pc, #36]	@ (800255c <HAL_TIM_Base_MspInit+0xc4>)
 8002538:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800253a:	4a08      	ldr	r2, [pc, #32]	@ (800255c <HAL_TIM_Base_MspInit+0xc4>)
 800253c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002540:	6453      	str	r3, [r2, #68]	@ 0x44
 8002542:	4b06      	ldr	r3, [pc, #24]	@ (800255c <HAL_TIM_Base_MspInit+0xc4>)
 8002544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]
}
 800254e:	bf00      	nop
 8002550:	3710      	adds	r7, #16
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	40000800 	.word	0x40000800
 800255c:	40023800 	.word	0x40023800
 8002560:	20000514 	.word	0x20000514
 8002564:	400260b8 	.word	0x400260b8
 8002568:	40014400 	.word	0x40014400

0800256c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b08e      	sub	sp, #56	@ 0x38
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002574:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002578:	2200      	movs	r2, #0
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	605a      	str	r2, [r3, #4]
 800257e:	609a      	str	r2, [r3, #8]
 8002580:	60da      	str	r2, [r3, #12]
 8002582:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6a      	ldr	r2, [pc, #424]	@ (8002734 <HAL_TIM_MspPostInit+0x1c8>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d11f      	bne.n	80025ce <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	623b      	str	r3, [r7, #32]
 8002592:	4b69      	ldr	r3, [pc, #420]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002596:	4a68      	ldr	r2, [pc, #416]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002598:	f043 0310 	orr.w	r3, r3, #16
 800259c:	6313      	str	r3, [r2, #48]	@ 0x30
 800259e:	4b66      	ldr	r3, [pc, #408]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a2:	f003 0310 	and.w	r3, r3, #16
 80025a6:	623b      	str	r3, [r7, #32]
 80025a8:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 80025aa:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 80025ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80025bc:	2301      	movs	r3, #1
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80025c4:	4619      	mov	r1, r3
 80025c6:	485d      	ldr	r0, [pc, #372]	@ (800273c <HAL_TIM_MspPostInit+0x1d0>)
 80025c8:	f001 fc5c 	bl	8003e84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 80025cc:	e0ae      	b.n	800272c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a5b      	ldr	r2, [pc, #364]	@ (8002740 <HAL_TIM_MspPostInit+0x1d4>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d11f      	bne.n	8002618 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d8:	2300      	movs	r3, #0
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	4b56      	ldr	r3, [pc, #344]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025e0:	4a55      	ldr	r2, [pc, #340]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 80025e2:	f043 0308 	orr.w	r3, r3, #8
 80025e6:	6313      	str	r3, [r2, #48]	@ 0x30
 80025e8:	4b53      	ldr	r3, [pc, #332]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 80025ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80025f4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80025f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025fa:	2302      	movs	r3, #2
 80025fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fe:	2300      	movs	r3, #0
 8002600:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002602:	2300      	movs	r3, #0
 8002604:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002606:	2302      	movs	r3, #2
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800260a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800260e:	4619      	mov	r1, r3
 8002610:	484c      	ldr	r0, [pc, #304]	@ (8002744 <HAL_TIM_MspPostInit+0x1d8>)
 8002612:	f001 fc37 	bl	8003e84 <HAL_GPIO_Init>
}
 8002616:	e089      	b.n	800272c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a4a      	ldr	r2, [pc, #296]	@ (8002748 <HAL_TIM_MspPostInit+0x1dc>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d11f      	bne.n	8002662 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	61bb      	str	r3, [r7, #24]
 8002626:	4b44      	ldr	r3, [pc, #272]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800262a:	4a43      	ldr	r2, [pc, #268]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 800262c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002630:	6313      	str	r3, [r2, #48]	@ 0x30
 8002632:	4b41      	ldr	r3, [pc, #260]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263a:	61bb      	str	r3, [r7, #24]
 800263c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800263e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8002642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002644:	2302      	movs	r3, #2
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800264c:	2300      	movs	r3, #0
 800264e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002650:	2302      	movs	r3, #2
 8002652:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002654:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002658:	4619      	mov	r1, r3
 800265a:	483c      	ldr	r0, [pc, #240]	@ (800274c <HAL_TIM_MspPostInit+0x1e0>)
 800265c:	f001 fc12 	bl	8003e84 <HAL_GPIO_Init>
}
 8002660:	e064      	b.n	800272c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4a3a      	ldr	r2, [pc, #232]	@ (8002750 <HAL_TIM_MspPostInit+0x1e4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d13c      	bne.n	80026e6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800266c:	2300      	movs	r3, #0
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	4b31      	ldr	r3, [pc, #196]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002674:	4a30      	ldr	r2, [pc, #192]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002676:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800267a:	6313      	str	r3, [r2, #48]	@ 0x30
 800267c:	4b2e      	ldr	r3, [pc, #184]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 800267e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002680:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002688:	2300      	movs	r3, #0
 800268a:	613b      	str	r3, [r7, #16]
 800268c:	4b2a      	ldr	r3, [pc, #168]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 800268e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002690:	4a29      	ldr	r2, [pc, #164]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002692:	f043 0304 	orr.w	r3, r3, #4
 8002696:	6313      	str	r3, [r2, #48]	@ 0x30
 8002698:	4b27      	ldr	r3, [pc, #156]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269c:	f003 0304 	and.w	r3, r3, #4
 80026a0:	613b      	str	r3, [r7, #16]
 80026a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80026a4:	23c0      	movs	r3, #192	@ 0xc0
 80026a6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a8:	2302      	movs	r3, #2
 80026aa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026ac:	2300      	movs	r3, #0
 80026ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026b0:	2300      	movs	r3, #0
 80026b2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026b4:	2303      	movs	r3, #3
 80026b6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80026b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026bc:	4619      	mov	r1, r3
 80026be:	4825      	ldr	r0, [pc, #148]	@ (8002754 <HAL_TIM_MspPostInit+0x1e8>)
 80026c0:	f001 fbe0 	bl	8003e84 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80026c4:	2340      	movs	r3, #64	@ 0x40
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80026d4:	2303      	movs	r3, #3
 80026d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	481e      	ldr	r0, [pc, #120]	@ (8002758 <HAL_TIM_MspPostInit+0x1ec>)
 80026e0:	f001 fbd0 	bl	8003e84 <HAL_GPIO_Init>
}
 80026e4:	e022      	b.n	800272c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1c      	ldr	r2, [pc, #112]	@ (800275c <HAL_TIM_MspPostInit+0x1f0>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d11d      	bne.n	800272c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	60fb      	str	r3, [r7, #12]
 80026f4:	4b10      	ldr	r3, [pc, #64]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 80026f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002700:	4b0d      	ldr	r3, [pc, #52]	@ (8002738 <HAL_TIM_MspPostInit+0x1cc>)
 8002702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800270c:	2340      	movs	r3, #64	@ 0x40
 800270e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002710:	2302      	movs	r3, #2
 8002712:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002714:	2301      	movs	r3, #1
 8002716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002718:	2302      	movs	r3, #2
 800271a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800271c:	2303      	movs	r3, #3
 800271e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002724:	4619      	mov	r1, r3
 8002726:	480e      	ldr	r0, [pc, #56]	@ (8002760 <HAL_TIM_MspPostInit+0x1f4>)
 8002728:	f001 fbac 	bl	8003e84 <HAL_GPIO_Init>
}
 800272c:	bf00      	nop
 800272e:	3738      	adds	r7, #56	@ 0x38
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40010000 	.word	0x40010000
 8002738:	40023800 	.word	0x40023800
 800273c:	40021000 	.word	0x40021000
 8002740:	40000800 	.word	0x40000800
 8002744:	40020c00 	.word	0x40020c00
 8002748:	40000c00 	.word	0x40000c00
 800274c:	40021c00 	.word	0x40021c00
 8002750:	40010400 	.word	0x40010400
 8002754:	40022000 	.word	0x40022000
 8002758:	40020800 	.word	0x40020800
 800275c:	40014400 	.word	0x40014400
 8002760:	40021400 	.word	0x40021400

08002764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b08e      	sub	sp, #56	@ 0x38
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800276c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002770:	2200      	movs	r2, #0
 8002772:	601a      	str	r2, [r3, #0]
 8002774:	605a      	str	r2, [r3, #4]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	60da      	str	r2, [r3, #12]
 800277a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4a90      	ldr	r2, [pc, #576]	@ (80029c4 <HAL_UART_MspInit+0x260>)
 8002782:	4293      	cmp	r3, r2
 8002784:	f040 80b2 	bne.w	80028ec <HAL_UART_MspInit+0x188>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002788:	2300      	movs	r3, #0
 800278a:	623b      	str	r3, [r7, #32]
 800278c:	4b8e      	ldr	r3, [pc, #568]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 800278e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002790:	4a8d      	ldr	r2, [pc, #564]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 8002792:	f043 0310 	orr.w	r3, r3, #16
 8002796:	6453      	str	r3, [r2, #68]	@ 0x44
 8002798:	4b8b      	ldr	r3, [pc, #556]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 800279a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800279c:	f003 0310 	and.w	r3, r3, #16
 80027a0:	623b      	str	r3, [r7, #32]
 80027a2:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a4:	2300      	movs	r3, #0
 80027a6:	61fb      	str	r3, [r7, #28]
 80027a8:	4b87      	ldr	r3, [pc, #540]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 80027aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ac:	4a86      	ldr	r2, [pc, #536]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 80027ae:	f043 0302 	orr.w	r3, r3, #2
 80027b2:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b4:	4b84      	ldr	r3, [pc, #528]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 80027b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b8:	f003 0302 	and.w	r3, r3, #2
 80027bc:	61fb      	str	r3, [r7, #28]
 80027be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
 80027c4:	4b80      	ldr	r3, [pc, #512]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 80027c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c8:	4a7f      	ldr	r2, [pc, #508]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80027d0:	4b7d      	ldr	r3, [pc, #500]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 80027d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	61bb      	str	r3, [r7, #24]
 80027da:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80027dc:	2380      	movs	r3, #128	@ 0x80
 80027de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027e0:	2302      	movs	r3, #2
 80027e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e4:	2300      	movs	r3, #0
 80027e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e8:	2303      	movs	r3, #3
 80027ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027ec:	2307      	movs	r3, #7
 80027ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80027f4:	4619      	mov	r1, r3
 80027f6:	4875      	ldr	r0, [pc, #468]	@ (80029cc <HAL_UART_MspInit+0x268>)
 80027f8:	f001 fb44 	bl	8003e84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80027fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002802:	2302      	movs	r3, #2
 8002804:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280a:	2303      	movs	r3, #3
 800280c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800280e:	2307      	movs	r3, #7
 8002810:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002812:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002816:	4619      	mov	r1, r3
 8002818:	486d      	ldr	r0, [pc, #436]	@ (80029d0 <HAL_UART_MspInit+0x26c>)
 800281a:	f001 fb33 	bl	8003e84 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA2_Stream7;
 800281e:	4b6d      	ldr	r3, [pc, #436]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002820:	4a6d      	ldr	r2, [pc, #436]	@ (80029d8 <HAL_UART_MspInit+0x274>)
 8002822:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002824:	4b6b      	ldr	r3, [pc, #428]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002826:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800282a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800282c:	4b69      	ldr	r3, [pc, #420]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 800282e:	2240      	movs	r2, #64	@ 0x40
 8002830:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002832:	4b68      	ldr	r3, [pc, #416]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002834:	2200      	movs	r2, #0
 8002836:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002838:	4b66      	ldr	r3, [pc, #408]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 800283a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800283e:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002840:	4b64      	ldr	r3, [pc, #400]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002842:	2200      	movs	r2, #0
 8002844:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002846:	4b63      	ldr	r3, [pc, #396]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002848:	2200      	movs	r2, #0
 800284a:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 800284c:	4b61      	ldr	r3, [pc, #388]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 800284e:	2200      	movs	r2, #0
 8002850:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002852:	4b60      	ldr	r3, [pc, #384]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002854:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002858:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800285a:	4b5e      	ldr	r3, [pc, #376]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 800285c:	2200      	movs	r2, #0
 800285e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002860:	485c      	ldr	r0, [pc, #368]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002862:	f000 ff0d 	bl	8003680 <HAL_DMA_Init>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d001      	beq.n	8002870 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800286c:	f7ff f85c 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a58      	ldr	r2, [pc, #352]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002874:	639a      	str	r2, [r3, #56]	@ 0x38
 8002876:	4a57      	ldr	r2, [pc, #348]	@ (80029d4 <HAL_UART_MspInit+0x270>)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream5;
 800287c:	4b57      	ldr	r3, [pc, #348]	@ (80029dc <HAL_UART_MspInit+0x278>)
 800287e:	4a58      	ldr	r2, [pc, #352]	@ (80029e0 <HAL_UART_MspInit+0x27c>)
 8002880:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002882:	4b56      	ldr	r3, [pc, #344]	@ (80029dc <HAL_UART_MspInit+0x278>)
 8002884:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002888:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800288a:	4b54      	ldr	r3, [pc, #336]	@ (80029dc <HAL_UART_MspInit+0x278>)
 800288c:	2200      	movs	r2, #0
 800288e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002890:	4b52      	ldr	r3, [pc, #328]	@ (80029dc <HAL_UART_MspInit+0x278>)
 8002892:	2200      	movs	r2, #0
 8002894:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002896:	4b51      	ldr	r3, [pc, #324]	@ (80029dc <HAL_UART_MspInit+0x278>)
 8002898:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800289c:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800289e:	4b4f      	ldr	r3, [pc, #316]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028a4:	4b4d      	ldr	r3, [pc, #308]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80028aa:	4b4c      	ldr	r3, [pc, #304]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80028b0:	4b4a      	ldr	r3, [pc, #296]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028b2:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80028b6:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028b8:	4b48      	ldr	r3, [pc, #288]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028ba:	2200      	movs	r2, #0
 80028bc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80028be:	4847      	ldr	r0, [pc, #284]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028c0:	f000 fede 	bl	8003680 <HAL_DMA_Init>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_UART_MspInit+0x16a>
    {
      Error_Handler();
 80028ca:	f7ff f82d 	bl	8001928 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a42      	ldr	r2, [pc, #264]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028d2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80028d4:	4a41      	ldr	r2, [pc, #260]	@ (80029dc <HAL_UART_MspInit+0x278>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80028da:	2200      	movs	r2, #0
 80028dc:	2105      	movs	r1, #5
 80028de:	2025      	movs	r0, #37	@ 0x25
 80028e0:	f000 fe97 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80028e4:	2025      	movs	r0, #37	@ 0x25
 80028e6:	f000 feb0 	bl	800364a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80028ea:	e11c      	b.n	8002b26 <HAL_UART_MspInit+0x3c2>
  else if(huart->Instance==USART3)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3c      	ldr	r2, [pc, #240]	@ (80029e4 <HAL_UART_MspInit+0x280>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d17e      	bne.n	80029f4 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	617b      	str	r3, [r7, #20]
 80028fa:	4b33      	ldr	r3, [pc, #204]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 80028fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fe:	4a32      	ldr	r2, [pc, #200]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 8002900:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002904:	6413      	str	r3, [r2, #64]	@ 0x40
 8002906:	4b30      	ldr	r3, [pc, #192]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800290e:	617b      	str	r3, [r7, #20]
 8002910:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b2c      	ldr	r3, [pc, #176]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a2b      	ldr	r2, [pc, #172]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b29      	ldr	r3, [pc, #164]	@ (80029c8 <HAL_UART_MspInit+0x264>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 800292e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002932:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002934:	2302      	movs	r3, #2
 8002936:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002938:	2300      	movs	r3, #0
 800293a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293c:	2303      	movs	r3, #3
 800293e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002940:	2307      	movs	r3, #7
 8002942:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002944:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002948:	4619      	mov	r1, r3
 800294a:	4827      	ldr	r0, [pc, #156]	@ (80029e8 <HAL_UART_MspInit+0x284>)
 800294c:	f001 fa9a 	bl	8003e84 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002950:	4b26      	ldr	r3, [pc, #152]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002952:	4a27      	ldr	r2, [pc, #156]	@ (80029f0 <HAL_UART_MspInit+0x28c>)
 8002954:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8002956:	4b25      	ldr	r3, [pc, #148]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002958:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800295c:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800295e:	4b23      	ldr	r3, [pc, #140]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002960:	2200      	movs	r2, #0
 8002962:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002964:	4b21      	ldr	r3, [pc, #132]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002966:	2200      	movs	r2, #0
 8002968:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800296a:	4b20      	ldr	r3, [pc, #128]	@ (80029ec <HAL_UART_MspInit+0x288>)
 800296c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002970:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002972:	4b1e      	ldr	r3, [pc, #120]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002974:	2200      	movs	r2, #0
 8002976:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002978:	4b1c      	ldr	r3, [pc, #112]	@ (80029ec <HAL_UART_MspInit+0x288>)
 800297a:	2200      	movs	r2, #0
 800297c:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800297e:	4b1b      	ldr	r3, [pc, #108]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002984:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002986:	4b19      	ldr	r3, [pc, #100]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002988:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800298c:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800298e:	4b17      	ldr	r3, [pc, #92]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002990:	2200      	movs	r2, #0
 8002992:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002994:	4815      	ldr	r0, [pc, #84]	@ (80029ec <HAL_UART_MspInit+0x288>)
 8002996:	f000 fe73 	bl	8003680 <HAL_DMA_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d001      	beq.n	80029a4 <HAL_UART_MspInit+0x240>
      Error_Handler();
 80029a0:	f7fe ffc2 	bl	8001928 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	4a11      	ldr	r2, [pc, #68]	@ (80029ec <HAL_UART_MspInit+0x288>)
 80029a8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80029aa:	4a10      	ldr	r2, [pc, #64]	@ (80029ec <HAL_UART_MspInit+0x288>)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 80029b0:	2200      	movs	r2, #0
 80029b2:	2105      	movs	r1, #5
 80029b4:	2027      	movs	r0, #39	@ 0x27
 80029b6:	f000 fe2c 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80029ba:	2027      	movs	r0, #39	@ 0x27
 80029bc:	f000 fe45 	bl	800364a <HAL_NVIC_EnableIRQ>
}
 80029c0:	e0b1      	b.n	8002b26 <HAL_UART_MspInit+0x3c2>
 80029c2:	bf00      	nop
 80029c4:	40011000 	.word	0x40011000
 80029c8:	40023800 	.word	0x40023800
 80029cc:	40020400 	.word	0x40020400
 80029d0:	40020000 	.word	0x40020000
 80029d4:	200006ac 	.word	0x200006ac
 80029d8:	400264b8 	.word	0x400264b8
 80029dc:	2000070c 	.word	0x2000070c
 80029e0:	40026488 	.word	0x40026488
 80029e4:	40004800 	.word	0x40004800
 80029e8:	40020800 	.word	0x40020800
 80029ec:	2000076c 	.word	0x2000076c
 80029f0:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a4d      	ldr	r2, [pc, #308]	@ (8002b30 <HAL_UART_MspInit+0x3cc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	f040 8093 	bne.w	8002b26 <HAL_UART_MspInit+0x3c2>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002a00:	2300      	movs	r3, #0
 8002a02:	60fb      	str	r3, [r7, #12]
 8002a04:	4b4b      	ldr	r3, [pc, #300]	@ (8002b34 <HAL_UART_MspInit+0x3d0>)
 8002a06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a08:	4a4a      	ldr	r2, [pc, #296]	@ (8002b34 <HAL_UART_MspInit+0x3d0>)
 8002a0a:	f043 0320 	orr.w	r3, r3, #32
 8002a0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a10:	4b48      	ldr	r3, [pc, #288]	@ (8002b34 <HAL_UART_MspInit+0x3d0>)
 8002a12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	60fb      	str	r3, [r7, #12]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	4b44      	ldr	r3, [pc, #272]	@ (8002b34 <HAL_UART_MspInit+0x3d0>)
 8002a22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a24:	4a43      	ldr	r2, [pc, #268]	@ (8002b34 <HAL_UART_MspInit+0x3d0>)
 8002a26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002a2a:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a2c:	4b41      	ldr	r3, [pc, #260]	@ (8002b34 <HAL_UART_MspInit+0x3d0>)
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a34:	60bb      	str	r3, [r7, #8]
 8002a36:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8002a38:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8002a3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a3e:	2302      	movs	r3, #2
 8002a40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a42:	2300      	movs	r3, #0
 8002a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a46:	2303      	movs	r3, #3
 8002a48:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a4a:	2308      	movs	r3, #8
 8002a4c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002a4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a52:	4619      	mov	r1, r3
 8002a54:	4838      	ldr	r0, [pc, #224]	@ (8002b38 <HAL_UART_MspInit+0x3d4>)
 8002a56:	f001 fa15 	bl	8003e84 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002a5a:	4b38      	ldr	r3, [pc, #224]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a5c:	4a38      	ldr	r2, [pc, #224]	@ (8002b40 <HAL_UART_MspInit+0x3dc>)
 8002a5e:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002a60:	4b36      	ldr	r3, [pc, #216]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a62:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002a66:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a68:	4b34      	ldr	r3, [pc, #208]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a6e:	4b33      	ldr	r3, [pc, #204]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a70:	2200      	movs	r2, #0
 8002a72:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a74:	4b31      	ldr	r3, [pc, #196]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a76:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a7a:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a7c:	4b2f      	ldr	r3, [pc, #188]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a7e:	2200      	movs	r2, #0
 8002a80:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a82:	4b2e      	ldr	r3, [pc, #184]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002a88:	4b2c      	ldr	r3, [pc, #176]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002a8e:	4b2b      	ldr	r3, [pc, #172]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a90:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002a94:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a96:	4b29      	ldr	r3, [pc, #164]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002a9c:	4827      	ldr	r0, [pc, #156]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002a9e:	f000 fdef 	bl	8003680 <HAL_DMA_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d001      	beq.n	8002aac <HAL_UART_MspInit+0x348>
      Error_Handler();
 8002aa8:	f7fe ff3e 	bl	8001928 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a23      	ldr	r2, [pc, #140]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002ab0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002ab2:	4a22      	ldr	r2, [pc, #136]	@ (8002b3c <HAL_UART_MspInit+0x3d8>)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6393      	str	r3, [r2, #56]	@ 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002ab8:	4b22      	ldr	r3, [pc, #136]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002aba:	4a23      	ldr	r2, [pc, #140]	@ (8002b48 <HAL_UART_MspInit+0x3e4>)
 8002abc:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002abe:	4b21      	ldr	r3, [pc, #132]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002ac0:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8002ac4:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002ac8:	2240      	movs	r2, #64	@ 0x40
 8002aca:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002acc:	4b1d      	ldr	r3, [pc, #116]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002ace:	2200      	movs	r2, #0
 8002ad0:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ad2:	4b1c      	ldr	r3, [pc, #112]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002ad4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002ad8:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ada:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ae0:	4b18      	ldr	r3, [pc, #96]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002ae6:	4b17      	ldr	r3, [pc, #92]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002aec:	4b15      	ldr	r3, [pc, #84]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002aee:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002af2:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002af4:	4b13      	ldr	r3, [pc, #76]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002afa:	4812      	ldr	r0, [pc, #72]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002afc:	f000 fdc0 	bl	8003680 <HAL_DMA_Init>
 8002b00:	4603      	mov	r3, r0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d001      	beq.n	8002b0a <HAL_UART_MspInit+0x3a6>
      Error_Handler();
 8002b06:	f7fe ff0f 	bl	8001928 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart6_tx);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002b0e:	639a      	str	r2, [r3, #56]	@ 0x38
 8002b10:	4a0c      	ldr	r2, [pc, #48]	@ (8002b44 <HAL_UART_MspInit+0x3e0>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002b16:	2200      	movs	r2, #0
 8002b18:	2105      	movs	r1, #5
 8002b1a:	2047      	movs	r0, #71	@ 0x47
 8002b1c:	f000 fd79 	bl	8003612 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002b20:	2047      	movs	r0, #71	@ 0x47
 8002b22:	f000 fd92 	bl	800364a <HAL_NVIC_EnableIRQ>
}
 8002b26:	bf00      	nop
 8002b28:	3738      	adds	r7, #56	@ 0x38
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	40011400 	.word	0x40011400
 8002b34:	40023800 	.word	0x40023800
 8002b38:	40021800 	.word	0x40021800
 8002b3c:	200007cc 	.word	0x200007cc
 8002b40:	40026428 	.word	0x40026428
 8002b44:	2000082c 	.word	0x2000082c
 8002b48:	400264a0 	.word	0x400264a0

08002b4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002b50:	f002 f932 	bl	8004db8 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002b54:	bf00      	nop
 8002b56:	e7fd      	b.n	8002b54 <NMI_Handler+0x8>

08002b58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <HardFault_Handler+0x4>

08002b60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b64:	bf00      	nop
 8002b66:	e7fd      	b.n	8002b64 <MemManage_Handler+0x4>

08002b68 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6c:	bf00      	nop
 8002b6e:	e7fd      	b.n	8002b6c <BusFault_Handler+0x4>

08002b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b74:	bf00      	nop
 8002b76:	e7fd      	b.n	8002b74 <UsageFault_Handler+0x4>

08002b78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7c:	bf00      	nop
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr

08002b86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b86:	b580      	push	{r7, lr}
 8002b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b8a:	f000 f913 	bl	8002db4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002b8e:	f006 f80b 	bl	8008ba8 <xTaskGetSchedulerState>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d001      	beq.n	8002b9c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002b98:	f006 fe06 	bl	80097a8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b9c:	bf00      	nop
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002ba4:	2008      	movs	r0, #8
 8002ba6:	f001 fb3b 	bl	8004220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}

08002bae <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002bae:	b580      	push	{r7, lr}
 8002bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8002bb2:	2010      	movs	r0, #16
 8002bb4:	f001 fb34 	bl	8004220 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8002bb8:	bf00      	nop
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002bc0:	4802      	ldr	r0, [pc, #8]	@ (8002bcc <DMA1_Stream1_IRQHandler+0x10>)
 8002bc2:	f000 fef5 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002bc6:	bf00      	nop
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	2000076c 	.word	0x2000076c

08002bd0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002bd4:	4802      	ldr	r0, [pc, #8]	@ (8002be0 <CAN1_RX0_IRQHandler+0x10>)
 8002bd6:	f000 fa08 	bl	8002fea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8002bda:	bf00      	nop
 8002bdc:	bd80      	pop	{r7, pc}
 8002bde:	bf00      	nop
 8002be0:	200002b0 	.word	0x200002b0

08002be4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002be8:	4802      	ldr	r0, [pc, #8]	@ (8002bf4 <USART1_IRQHandler+0x10>)
 8002bea:	f003 f9eb 	bl	8005fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bee:	bf00      	nop
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	200005d4 	.word	0x200005d4

08002bf8 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch3);
 8002bfc:	4802      	ldr	r0, [pc, #8]	@ (8002c08 <DMA1_Stream7_IRQHandler+0x10>)
 8002bfe:	f000 fed7 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002c02:	bf00      	nop
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	20000514 	.word	0x20000514

08002c0c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <DMA2_Stream1_IRQHandler+0x10>)
 8002c12:	f000 fecd 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	200007cc 	.word	0x200007cc

08002c20 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim8_ch1_ch2_ch3);
 8002c24:	4802      	ldr	r0, [pc, #8]	@ (8002c30 <DMA2_Stream2_IRQHandler+0x10>)
 8002c26:	f000 fec3 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c2a:	bf00      	nop
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	20000574 	.word	0x20000574

08002c34 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8002c38:	4802      	ldr	r0, [pc, #8]	@ (8002c44 <CAN2_RX0_IRQHandler+0x10>)
 8002c3a:	f000 f9d6 	bl	8002fea <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8002c3e:	bf00      	nop
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	200002d8 	.word	0x200002d8

08002c48 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c4c:	4802      	ldr	r0, [pc, #8]	@ (8002c58 <DMA2_Stream5_IRQHandler+0x10>)
 8002c4e:	f000 feaf 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	2000070c 	.word	0x2000070c

08002c5c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002c60:	4802      	ldr	r0, [pc, #8]	@ (8002c6c <DMA2_Stream6_IRQHandler+0x10>)
 8002c62:	f000 fea5 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	2000082c 	.word	0x2000082c

08002c70 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002c74:	4802      	ldr	r0, [pc, #8]	@ (8002c80 <DMA2_Stream7_IRQHandler+0x10>)
 8002c76:	f000 fe9b 	bl	80039b0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200006ac 	.word	0x200006ac

08002c84 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002c88:	4802      	ldr	r0, [pc, #8]	@ (8002c94 <USART6_IRQHandler+0x10>)
 8002c8a:	f003 f99b 	bl	8005fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000664 	.word	0x20000664

08002c98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c9c:	4b06      	ldr	r3, [pc, #24]	@ (8002cb8 <SystemInit+0x20>)
 8002c9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ca2:	4a05      	ldr	r2, [pc, #20]	@ (8002cb8 <SystemInit+0x20>)
 8002ca4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ca8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cac:	bf00      	nop
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	e000ed00 	.word	0xe000ed00

08002cbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cbc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002cf4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002cc0:	f7ff ffea 	bl	8002c98 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cc4:	480c      	ldr	r0, [pc, #48]	@ (8002cf8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cc6:	490d      	ldr	r1, [pc, #52]	@ (8002cfc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cc8:	4a0d      	ldr	r2, [pc, #52]	@ (8002d00 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ccc:	e002      	b.n	8002cd4 <LoopCopyDataInit>

08002cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cd2:	3304      	adds	r3, #4

08002cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cd8:	d3f9      	bcc.n	8002cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cda:	4a0a      	ldr	r2, [pc, #40]	@ (8002d04 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002cdc:	4c0a      	ldr	r4, [pc, #40]	@ (8002d08 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ce0:	e001      	b.n	8002ce6 <LoopFillZerobss>

08002ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ce4:	3204      	adds	r2, #4

08002ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002ce8:	d3fb      	bcc.n	8002ce2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cea:	f007 f83b 	bl	8009d64 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cee:	f7fd fde3 	bl	80008b8 <main>
  bx  lr    
 8002cf2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cf4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002cf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cfc:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002d00:	0800a048 	.word	0x0800a048
  ldr r2, =_sbss
 8002d04:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002d08:	20005440 	.word	0x20005440

08002d0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d0c:	e7fe      	b.n	8002d0c <ADC_IRQHandler>
	...

08002d10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d14:	4b0e      	ldr	r3, [pc, #56]	@ (8002d50 <HAL_Init+0x40>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	4a0d      	ldr	r2, [pc, #52]	@ (8002d50 <HAL_Init+0x40>)
 8002d1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d20:	4b0b      	ldr	r3, [pc, #44]	@ (8002d50 <HAL_Init+0x40>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a0a      	ldr	r2, [pc, #40]	@ (8002d50 <HAL_Init+0x40>)
 8002d26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d2c:	4b08      	ldr	r3, [pc, #32]	@ (8002d50 <HAL_Init+0x40>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a07      	ldr	r2, [pc, #28]	@ (8002d50 <HAL_Init+0x40>)
 8002d32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d38:	2003      	movs	r0, #3
 8002d3a:	f000 fc5f 	bl	80035fc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d3e:	200f      	movs	r0, #15
 8002d40:	f000 f808 	bl	8002d54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d44:	f7ff f970 	bl	8002028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	40023c00 	.word	0x40023c00

08002d54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d5c:	4b12      	ldr	r3, [pc, #72]	@ (8002da8 <HAL_InitTick+0x54>)
 8002d5e:	681a      	ldr	r2, [r3, #0]
 8002d60:	4b12      	ldr	r3, [pc, #72]	@ (8002dac <HAL_InitTick+0x58>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	4619      	mov	r1, r3
 8002d66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d72:	4618      	mov	r0, r3
 8002d74:	f000 fc77 	bl	8003666 <HAL_SYSTICK_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d001      	beq.n	8002d82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e00e      	b.n	8002da0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b0f      	cmp	r3, #15
 8002d86:	d80a      	bhi.n	8002d9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d88:	2200      	movs	r2, #0
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d90:	f000 fc3f 	bl	8003612 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d94:	4a06      	ldr	r2, [pc, #24]	@ (8002db0 <HAL_InitTick+0x5c>)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	e000      	b.n	8002da0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3708      	adds	r7, #8
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	20000000 	.word	0x20000000
 8002dac:	20000008 	.word	0x20000008
 8002db0:	20000004 	.word	0x20000004

08002db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002db4:	b480      	push	{r7}
 8002db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002db8:	4b06      	ldr	r3, [pc, #24]	@ (8002dd4 <HAL_IncTick+0x20>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b06      	ldr	r3, [pc, #24]	@ (8002dd8 <HAL_IncTick+0x24>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <HAL_IncTick+0x24>)
 8002dc6:	6013      	str	r3, [r2, #0]
}
 8002dc8:	bf00      	nop
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	20000008 	.word	0x20000008
 8002dd8:	20000914 	.word	0x20000914

08002ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return uwTick;
 8002de0:	4b03      	ldr	r3, [pc, #12]	@ (8002df0 <HAL_GetTick+0x14>)
 8002de2:	681b      	ldr	r3, [r3, #0]
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	20000914 	.word	0x20000914

08002df4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e0ed      	b.n	8002fe2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d102      	bne.n	8002e18 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f7ff f934 	bl	8002080 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e28:	f7ff ffd8 	bl	8002ddc <HAL_GetTick>
 8002e2c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e2e:	e012      	b.n	8002e56 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e30:	f7ff ffd4 	bl	8002ddc <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b0a      	cmp	r3, #10
 8002e3c:	d90b      	bls.n	8002e56 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e42:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2205      	movs	r2, #5
 8002e4e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e0c5      	b.n	8002fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d0e5      	beq.n	8002e30 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 0202 	bic.w	r2, r2, #2
 8002e72:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002e74:	f7ff ffb2 	bl	8002ddc <HAL_GetTick>
 8002e78:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002e7a:	e012      	b.n	8002ea2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002e7c:	f7ff ffae 	bl	8002ddc <HAL_GetTick>
 8002e80:	4602      	mov	r2, r0
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	2b0a      	cmp	r3, #10
 8002e88:	d90b      	bls.n	8002ea2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2205      	movs	r2, #5
 8002e9a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e09f      	b.n	8002fe2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0302 	and.w	r3, r3, #2
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1e5      	bne.n	8002e7c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	7e1b      	ldrb	r3, [r3, #24]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d108      	bne.n	8002eca <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e007      	b.n	8002eda <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	7e5b      	ldrb	r3, [r3, #25]
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d108      	bne.n	8002ef4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	e007      	b.n	8002f04 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002f02:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	7e9b      	ldrb	r3, [r3, #26]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	d108      	bne.n	8002f1e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f042 0220 	orr.w	r2, r2, #32
 8002f1a:	601a      	str	r2, [r3, #0]
 8002f1c:	e007      	b.n	8002f2e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0220 	bic.w	r2, r2, #32
 8002f2c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	7edb      	ldrb	r3, [r3, #27]
 8002f32:	2b01      	cmp	r3, #1
 8002f34:	d108      	bne.n	8002f48 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f022 0210 	bic.w	r2, r2, #16
 8002f44:	601a      	str	r2, [r3, #0]
 8002f46:	e007      	b.n	8002f58 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0210 	orr.w	r2, r2, #16
 8002f56:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	7f1b      	ldrb	r3, [r3, #28]
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d108      	bne.n	8002f72 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0208 	orr.w	r2, r2, #8
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	e007      	b.n	8002f82 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	681a      	ldr	r2, [r3, #0]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f022 0208 	bic.w	r2, r2, #8
 8002f80:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	7f5b      	ldrb	r3, [r3, #29]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d108      	bne.n	8002f9c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f042 0204 	orr.w	r2, r2, #4
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e007      	b.n	8002fac <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0204 	bic.w	r2, r2, #4
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	695b      	ldr	r3, [r3, #20]
 8002fc0:	ea42 0103 	orr.w	r1, r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	1e5a      	subs	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002fea:	b580      	push	{r7, lr}
 8002fec:	b08a      	sub	sp, #40	@ 0x28
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	695b      	ldr	r3, [r3, #20]
 8002ffc:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691b      	ldr	r3, [r3, #16]
 800301c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b00      	cmp	r3, #0
 800302e:	d07c      	beq.n	800312a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	f003 0301 	and.w	r3, r3, #1
 8003036:	2b00      	cmp	r3, #0
 8003038:	d023      	beq.n	8003082 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	2201      	movs	r2, #1
 8003040:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f003 0302 	and.w	r3, r3, #2
 8003048:	2b00      	cmp	r3, #0
 800304a:	d003      	beq.n	8003054 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800304c:	6878      	ldr	r0, [r7, #4]
 800304e:	f000 f983 	bl	8003358 <HAL_CAN_TxMailbox0CompleteCallback>
 8003052:	e016      	b.n	8003082 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	f003 0304 	and.w	r3, r3, #4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d004      	beq.n	8003068 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800305e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003060:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003064:	627b      	str	r3, [r7, #36]	@ 0x24
 8003066:	e00c      	b.n	8003082 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d004      	beq.n	800307c <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003074:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003078:	627b      	str	r3, [r7, #36]	@ 0x24
 800307a:	e002      	b.n	8003082 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f989 	bl	8003394 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003082:	69bb      	ldr	r3, [r7, #24]
 8003084:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003088:	2b00      	cmp	r3, #0
 800308a:	d024      	beq.n	80030d6 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003094:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003096:	69bb      	ldr	r3, [r7, #24]
 8003098:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800309c:	2b00      	cmp	r3, #0
 800309e:	d003      	beq.n	80030a8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f000 f963 	bl	800336c <HAL_CAN_TxMailbox1CompleteCallback>
 80030a6:	e016      	b.n	80030d6 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d004      	beq.n	80030bc <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80030b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ba:	e00c      	b.n	80030d6 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d004      	beq.n	80030d0 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80030c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80030ce:	e002      	b.n	80030d6 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f000 f969 	bl	80033a8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80030d6:	69bb      	ldr	r3, [r7, #24]
 80030d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d024      	beq.n	800312a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80030e8:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d003      	beq.n	80030fc <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 f943 	bl	8003380 <HAL_CAN_TxMailbox2CompleteCallback>
 80030fa:	e016      	b.n	800312a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d004      	beq.n	8003110 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800310c:	627b      	str	r3, [r7, #36]	@ 0x24
 800310e:	e00c      	b.n	800312a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003110:	69bb      	ldr	r3, [r7, #24]
 8003112:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d004      	beq.n	8003124 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800311a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800311c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003120:	627b      	str	r3, [r7, #36]	@ 0x24
 8003122:	e002      	b.n	800312a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f000 f949 	bl	80033bc <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	f003 0308 	and.w	r3, r3, #8
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00c      	beq.n	800314e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	f003 0310 	and.w	r3, r3, #16
 800313a:	2b00      	cmp	r3, #0
 800313c:	d007      	beq.n	800314e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800313e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003140:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003144:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2210      	movs	r2, #16
 800314c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800314e:	6a3b      	ldr	r3, [r7, #32]
 8003150:	f003 0304 	and.w	r3, r3, #4
 8003154:	2b00      	cmp	r3, #0
 8003156:	d00b      	beq.n	8003170 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	f003 0308 	and.w	r3, r3, #8
 800315e:	2b00      	cmp	r3, #0
 8003160:	d006      	beq.n	8003170 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2208      	movs	r2, #8
 8003168:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f000 f93a 	bl	80033e4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003170:	6a3b      	ldr	r3, [r7, #32]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d009      	beq.n	800318e <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	68db      	ldr	r3, [r3, #12]
 8003180:	f003 0303 	and.w	r3, r3, #3
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 f921 	bl	80033d0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800318e:	6a3b      	ldr	r3, [r7, #32]
 8003190:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003194:	2b00      	cmp	r3, #0
 8003196:	d00c      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	f003 0310 	and.w	r3, r3, #16
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d007      	beq.n	80031b2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80031a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031a4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80031a8:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2210      	movs	r2, #16
 80031b0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80031b2:	6a3b      	ldr	r3, [r7, #32]
 80031b4:	f003 0320 	and.w	r3, r3, #32
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	f003 0308 	and.w	r3, r3, #8
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	2208      	movs	r2, #8
 80031cc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f91c 	bl	800340c <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80031d4:	6a3b      	ldr	r3, [r7, #32]
 80031d6:	f003 0310 	and.w	r3, r3, #16
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d009      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	691b      	ldr	r3, [r3, #16]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f903 	bl	80033f8 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00b      	beq.n	8003214 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0310 	and.w	r3, r3, #16
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	2210      	movs	r2, #16
 800320c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 f906 	bl	8003420 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800321a:	2b00      	cmp	r3, #0
 800321c:	d00b      	beq.n	8003236 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2208      	movs	r2, #8
 800322e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f8ff 	bl	8003434 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d07b      	beq.n	8003338 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8003240:	69fb      	ldr	r3, [r7, #28]
 8003242:	f003 0304 	and.w	r3, r3, #4
 8003246:	2b00      	cmp	r3, #0
 8003248:	d072      	beq.n	8003330 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800324a:	6a3b      	ldr	r3, [r7, #32]
 800324c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003250:	2b00      	cmp	r3, #0
 8003252:	d008      	beq.n	8003266 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800325a:	2b00      	cmp	r3, #0
 800325c:	d003      	beq.n	8003266 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	f043 0301 	orr.w	r3, r3, #1
 8003264:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003266:	6a3b      	ldr	r3, [r7, #32]
 8003268:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800326c:	2b00      	cmp	r3, #0
 800326e:	d008      	beq.n	8003282 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8003276:	2b00      	cmp	r3, #0
 8003278:	d003      	beq.n	8003282 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	f043 0302 	orr.w	r3, r3, #2
 8003280:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003282:	6a3b      	ldr	r3, [r7, #32]
 8003284:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8003292:	2b00      	cmp	r3, #0
 8003294:	d003      	beq.n	800329e <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8003296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d043      	beq.n	8003330 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03e      	beq.n	8003330 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80032b8:	2b60      	cmp	r3, #96	@ 0x60
 80032ba:	d02b      	beq.n	8003314 <HAL_CAN_IRQHandler+0x32a>
 80032bc:	2b60      	cmp	r3, #96	@ 0x60
 80032be:	d82e      	bhi.n	800331e <HAL_CAN_IRQHandler+0x334>
 80032c0:	2b50      	cmp	r3, #80	@ 0x50
 80032c2:	d022      	beq.n	800330a <HAL_CAN_IRQHandler+0x320>
 80032c4:	2b50      	cmp	r3, #80	@ 0x50
 80032c6:	d82a      	bhi.n	800331e <HAL_CAN_IRQHandler+0x334>
 80032c8:	2b40      	cmp	r3, #64	@ 0x40
 80032ca:	d019      	beq.n	8003300 <HAL_CAN_IRQHandler+0x316>
 80032cc:	2b40      	cmp	r3, #64	@ 0x40
 80032ce:	d826      	bhi.n	800331e <HAL_CAN_IRQHandler+0x334>
 80032d0:	2b30      	cmp	r3, #48	@ 0x30
 80032d2:	d010      	beq.n	80032f6 <HAL_CAN_IRQHandler+0x30c>
 80032d4:	2b30      	cmp	r3, #48	@ 0x30
 80032d6:	d822      	bhi.n	800331e <HAL_CAN_IRQHandler+0x334>
 80032d8:	2b10      	cmp	r3, #16
 80032da:	d002      	beq.n	80032e2 <HAL_CAN_IRQHandler+0x2f8>
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d005      	beq.n	80032ec <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80032e0:	e01d      	b.n	800331e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80032e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e4:	f043 0308 	orr.w	r3, r3, #8
 80032e8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032ea:	e019      	b.n	8003320 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80032ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ee:	f043 0310 	orr.w	r3, r3, #16
 80032f2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032f4:	e014      	b.n	8003320 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80032f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032f8:	f043 0320 	orr.w	r3, r3, #32
 80032fc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80032fe:	e00f      	b.n	8003320 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8003300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003302:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003308:	e00a      	b.n	8003320 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800330a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800330c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003310:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8003312:	e005      	b.n	8003320 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8003314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003316:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800331a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800331c:	e000      	b.n	8003320 <HAL_CAN_IRQHandler+0x336>
            break;
 800331e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	699a      	ldr	r2, [r3, #24]
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800332e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2204      	movs	r2, #4
 8003336:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8003338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d008      	beq.n	8003350 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f87c 	bl	8003448 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8003350:	bf00      	nop
 8003352:	3728      	adds	r7, #40	@ 0x28
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800336c:	b480      	push	{r7}
 800336e:	b083      	sub	sp, #12
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8003374:	bf00      	nop
 8003376:	370c      	adds	r7, #12
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr

08003380 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8003380:	b480      	push	{r7}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800339c:	bf00      	nop
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a6:	4770      	bx	lr

080033a8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033a8:	b480      	push	{r7}
 80033aa:	b083      	sub	sp, #12
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80033b0:	bf00      	nop
 80033b2:	370c      	adds	r7, #12
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80033c4:	bf00      	nop
 80033c6:	370c      	adds	r7, #12
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033d0:	b480      	push	{r7}
 80033d2:	b083      	sub	sp, #12
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80033d8:	bf00      	nop
 80033da:	370c      	adds	r7, #12
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr

080033e4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8003400:	bf00      	nop
 8003402:	370c      	adds	r7, #12
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr

0800340c <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8003414:	bf00      	nop
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8003428:	bf00      	nop
 800342a:	370c      	adds	r7, #12
 800342c:	46bd      	mov	sp, r7
 800342e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003432:	4770      	bx	lr

08003434 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8003434:	b480      	push	{r7}
 8003436:	b083      	sub	sp, #12
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800343c:	bf00      	nop
 800343e:	370c      	adds	r7, #12
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr

08003448 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8003448:	b480      	push	{r7}
 800344a:	b083      	sub	sp, #12
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8003450:	bf00      	nop
 8003452:	370c      	adds	r7, #12
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800345c:	b480      	push	{r7}
 800345e:	b085      	sub	sp, #20
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f003 0307 	and.w	r3, r3, #7
 800346a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800346c:	4b0c      	ldr	r3, [pc, #48]	@ (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003472:	68ba      	ldr	r2, [r7, #8]
 8003474:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003478:	4013      	ands	r3, r2
 800347a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003484:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003488:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800348e:	4a04      	ldr	r2, [pc, #16]	@ (80034a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	60d3      	str	r3, [r2, #12]
}
 8003494:	bf00      	nop
 8003496:	3714      	adds	r7, #20
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	e000ed00 	.word	0xe000ed00

080034a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80034a4:	b480      	push	{r7}
 80034a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80034a8:	4b04      	ldr	r3, [pc, #16]	@ (80034bc <__NVIC_GetPriorityGrouping+0x18>)
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	0a1b      	lsrs	r3, r3, #8
 80034ae:	f003 0307 	and.w	r3, r3, #7
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr
 80034bc:	e000ed00 	.word	0xe000ed00

080034c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	4603      	mov	r3, r0
 80034c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80034ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	db0b      	blt.n	80034ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80034d2:	79fb      	ldrb	r3, [r7, #7]
 80034d4:	f003 021f 	and.w	r2, r3, #31
 80034d8:	4907      	ldr	r1, [pc, #28]	@ (80034f8 <__NVIC_EnableIRQ+0x38>)
 80034da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	2001      	movs	r0, #1
 80034e2:	fa00 f202 	lsl.w	r2, r0, r2
 80034e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80034ea:	bf00      	nop
 80034ec:	370c      	adds	r7, #12
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	e000e100 	.word	0xe000e100

080034fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80034fc:	b480      	push	{r7}
 80034fe:	b083      	sub	sp, #12
 8003500:	af00      	add	r7, sp, #0
 8003502:	4603      	mov	r3, r0
 8003504:	6039      	str	r1, [r7, #0]
 8003506:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800350c:	2b00      	cmp	r3, #0
 800350e:	db0a      	blt.n	8003526 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	b2da      	uxtb	r2, r3
 8003514:	490c      	ldr	r1, [pc, #48]	@ (8003548 <__NVIC_SetPriority+0x4c>)
 8003516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800351a:	0112      	lsls	r2, r2, #4
 800351c:	b2d2      	uxtb	r2, r2
 800351e:	440b      	add	r3, r1
 8003520:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003524:	e00a      	b.n	800353c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4908      	ldr	r1, [pc, #32]	@ (800354c <__NVIC_SetPriority+0x50>)
 800352c:	79fb      	ldrb	r3, [r7, #7]
 800352e:	f003 030f 	and.w	r3, r3, #15
 8003532:	3b04      	subs	r3, #4
 8003534:	0112      	lsls	r2, r2, #4
 8003536:	b2d2      	uxtb	r2, r2
 8003538:	440b      	add	r3, r1
 800353a:	761a      	strb	r2, [r3, #24]
}
 800353c:	bf00      	nop
 800353e:	370c      	adds	r7, #12
 8003540:	46bd      	mov	sp, r7
 8003542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003546:	4770      	bx	lr
 8003548:	e000e100 	.word	0xe000e100
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003550:	b480      	push	{r7}
 8003552:	b089      	sub	sp, #36	@ 0x24
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f003 0307 	and.w	r3, r3, #7
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	f1c3 0307 	rsb	r3, r3, #7
 800356a:	2b04      	cmp	r3, #4
 800356c:	bf28      	it	cs
 800356e:	2304      	movcs	r3, #4
 8003570:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	3304      	adds	r3, #4
 8003576:	2b06      	cmp	r3, #6
 8003578:	d902      	bls.n	8003580 <NVIC_EncodePriority+0x30>
 800357a:	69fb      	ldr	r3, [r7, #28]
 800357c:	3b03      	subs	r3, #3
 800357e:	e000      	b.n	8003582 <NVIC_EncodePriority+0x32>
 8003580:	2300      	movs	r3, #0
 8003582:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003584:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003588:	69bb      	ldr	r3, [r7, #24]
 800358a:	fa02 f303 	lsl.w	r3, r2, r3
 800358e:	43da      	mvns	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	401a      	ands	r2, r3
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003598:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	fa01 f303 	lsl.w	r3, r1, r3
 80035a2:	43d9      	mvns	r1, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80035a8:	4313      	orrs	r3, r2
         );
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3724      	adds	r7, #36	@ 0x24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b4:	4770      	bx	lr
	...

080035b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	3b01      	subs	r3, #1
 80035c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80035c8:	d301      	bcc.n	80035ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80035ca:	2301      	movs	r3, #1
 80035cc:	e00f      	b.n	80035ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80035ce:	4a0a      	ldr	r2, [pc, #40]	@ (80035f8 <SysTick_Config+0x40>)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80035d6:	210f      	movs	r1, #15
 80035d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80035dc:	f7ff ff8e 	bl	80034fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80035e0:	4b05      	ldr	r3, [pc, #20]	@ (80035f8 <SysTick_Config+0x40>)
 80035e2:	2200      	movs	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80035e6:	4b04      	ldr	r3, [pc, #16]	@ (80035f8 <SysTick_Config+0x40>)
 80035e8:	2207      	movs	r2, #7
 80035ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	e000e010 	.word	0xe000e010

080035fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b082      	sub	sp, #8
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003604:	6878      	ldr	r0, [r7, #4]
 8003606:	f7ff ff29 	bl	800345c <__NVIC_SetPriorityGrouping>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}

08003612 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003612:	b580      	push	{r7, lr}
 8003614:	b086      	sub	sp, #24
 8003616:	af00      	add	r7, sp, #0
 8003618:	4603      	mov	r3, r0
 800361a:	60b9      	str	r1, [r7, #8]
 800361c:	607a      	str	r2, [r7, #4]
 800361e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003620:	2300      	movs	r3, #0
 8003622:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003624:	f7ff ff3e 	bl	80034a4 <__NVIC_GetPriorityGrouping>
 8003628:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	68b9      	ldr	r1, [r7, #8]
 800362e:	6978      	ldr	r0, [r7, #20]
 8003630:	f7ff ff8e 	bl	8003550 <NVIC_EncodePriority>
 8003634:	4602      	mov	r2, r0
 8003636:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800363a:	4611      	mov	r1, r2
 800363c:	4618      	mov	r0, r3
 800363e:	f7ff ff5d 	bl	80034fc <__NVIC_SetPriority>
}
 8003642:	bf00      	nop
 8003644:	3718      	adds	r7, #24
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b082      	sub	sp, #8
 800364e:	af00      	add	r7, sp, #0
 8003650:	4603      	mov	r3, r0
 8003652:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003654:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003658:	4618      	mov	r0, r3
 800365a:	f7ff ff31 	bl	80034c0 <__NVIC_EnableIRQ>
}
 800365e:	bf00      	nop
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}

08003666 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003666:	b580      	push	{r7, lr}
 8003668:	b082      	sub	sp, #8
 800366a:	af00      	add	r7, sp, #0
 800366c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f7ff ffa2 	bl	80035b8 <SysTick_Config>
 8003674:	4603      	mov	r3, r0
}
 8003676:	4618      	mov	r0, r3
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800368c:	f7ff fba6 	bl	8002ddc <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d101      	bne.n	800369c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e099      	b.n	80037d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2202      	movs	r2, #2
 80036a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f022 0201 	bic.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036bc:	e00f      	b.n	80036de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036be:	f7ff fb8d 	bl	8002ddc <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	2b05      	cmp	r3, #5
 80036ca:	d908      	bls.n	80036de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2220      	movs	r2, #32
 80036d0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2203      	movs	r2, #3
 80036d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80036da:	2303      	movs	r3, #3
 80036dc:	e078      	b.n	80037d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0301 	and.w	r3, r3, #1
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e8      	bne.n	80036be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80036f4:	697a      	ldr	r2, [r7, #20]
 80036f6:	4b38      	ldr	r3, [pc, #224]	@ (80037d8 <HAL_DMA_Init+0x158>)
 80036f8:	4013      	ands	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800370a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	691b      	ldr	r3, [r3, #16]
 8003710:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003716:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	699b      	ldr	r3, [r3, #24]
 800371c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003722:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	6a1b      	ldr	r3, [r3, #32]
 8003728:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800372a:	697a      	ldr	r2, [r7, #20]
 800372c:	4313      	orrs	r3, r2
 800372e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003734:	2b04      	cmp	r3, #4
 8003736:	d107      	bne.n	8003748 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003740:	4313      	orrs	r3, r2
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4313      	orrs	r3, r2
 8003746:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	697a      	ldr	r2, [r7, #20]
 800374e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	695b      	ldr	r3, [r3, #20]
 8003756:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	f023 0307 	bic.w	r3, r3, #7
 800375e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	697a      	ldr	r2, [r7, #20]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376e:	2b04      	cmp	r3, #4
 8003770:	d117      	bne.n	80037a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003780:	2b00      	cmp	r3, #0
 8003782:	d00e      	beq.n	80037a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003784:	6878      	ldr	r0, [r7, #4]
 8003786:	f000 fb01 	bl	8003d8c <DMA_CheckFifoParam>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d008      	beq.n	80037a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2240      	movs	r2, #64	@ 0x40
 8003794:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2201      	movs	r2, #1
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800379e:	2301      	movs	r3, #1
 80037a0:	e016      	b.n	80037d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	697a      	ldr	r2, [r7, #20]
 80037a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 fab8 	bl	8003d20 <DMA_CalcBaseAndBitshift>
 80037b0:	4603      	mov	r3, r0
 80037b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b8:	223f      	movs	r2, #63	@ 0x3f
 80037ba:	409a      	lsls	r2, r3
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80037ce:	2300      	movs	r3, #0
}
 80037d0:	4618      	mov	r0, r3
 80037d2:	3718      	adds	r7, #24
 80037d4:	46bd      	mov	sp, r7
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	f010803f 	.word	0xf010803f

080037dc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037f2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d101      	bne.n	8003802 <HAL_DMA_Start_IT+0x26>
 80037fe:	2302      	movs	r3, #2
 8003800:	e040      	b.n	8003884 <HAL_DMA_Start_IT+0xa8>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b01      	cmp	r3, #1
 8003814:	d12f      	bne.n	8003876 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2202      	movs	r2, #2
 800381a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	68b9      	ldr	r1, [r7, #8]
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fa4a 	bl	8003cc4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003834:	223f      	movs	r2, #63	@ 0x3f
 8003836:	409a      	lsls	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f042 0216 	orr.w	r2, r2, #22
 800384a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003850:	2b00      	cmp	r3, #0
 8003852:	d007      	beq.n	8003864 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0208 	orr.w	r2, r2, #8
 8003862:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]
 8003874:	e005      	b.n	8003882 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2200      	movs	r2, #0
 800387a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800387e:	2302      	movs	r3, #2
 8003880:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003882:	7dfb      	ldrb	r3, [r7, #23]
}
 8003884:	4618      	mov	r0, r3
 8003886:	3718      	adds	r7, #24
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003898:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800389a:	f7ff fa9f 	bl	8002ddc <HAL_GetTick>
 800389e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	2b02      	cmp	r3, #2
 80038aa:	d008      	beq.n	80038be <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2280      	movs	r2, #128	@ 0x80
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e052      	b.n	8003964 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0216 	bic.w	r2, r2, #22
 80038cc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038dc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <HAL_DMA_Abort+0x62>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0208 	bic.w	r2, r2, #8
 80038fc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681a      	ldr	r2, [r3, #0]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f022 0201 	bic.w	r2, r2, #1
 800390c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800390e:	e013      	b.n	8003938 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003910:	f7ff fa64 	bl	8002ddc <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b05      	cmp	r3, #5
 800391c:	d90c      	bls.n	8003938 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2220      	movs	r2, #32
 8003922:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2203      	movs	r2, #3
 8003928:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003934:	2303      	movs	r3, #3
 8003936:	e015      	b.n	8003964 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0301 	and.w	r3, r3, #1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d1e4      	bne.n	8003910 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	223f      	movs	r2, #63	@ 0x3f
 800394c:	409a      	lsls	r2, r3
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003962:	2300      	movs	r3, #0
}
 8003964:	4618      	mov	r0, r3
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800397a:	b2db      	uxtb	r3, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d004      	beq.n	800398a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2280      	movs	r2, #128	@ 0x80
 8003984:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003986:	2301      	movs	r3, #1
 8003988:	e00c      	b.n	80039a4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2205      	movs	r2, #5
 800398e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681a      	ldr	r2, [r3, #0]
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f022 0201 	bic.w	r2, r2, #1
 80039a0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039a2:	2300      	movs	r3, #0
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	370c      	adds	r7, #12
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80039bc:	4b8e      	ldr	r3, [pc, #568]	@ (8003bf8 <HAL_DMA_IRQHandler+0x248>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a8e      	ldr	r2, [pc, #568]	@ (8003bfc <HAL_DMA_IRQHandler+0x24c>)
 80039c2:	fba2 2303 	umull	r2, r3, r2, r3
 80039c6:	0a9b      	lsrs	r3, r3, #10
 80039c8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039ce:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039da:	2208      	movs	r2, #8
 80039dc:	409a      	lsls	r2, r3
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	4013      	ands	r3, r2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d01a      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f003 0304 	and.w	r3, r3, #4
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d013      	beq.n	8003a1c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0204 	bic.w	r2, r2, #4
 8003a02:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a08:	2208      	movs	r2, #8
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a14:	f043 0201 	orr.w	r2, r3, #1
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	2201      	movs	r2, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	4013      	ands	r3, r2
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d012      	beq.n	8003a52 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	695b      	ldr	r3, [r3, #20]
 8003a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00b      	beq.n	8003a52 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3e:	2201      	movs	r2, #1
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a4a:	f043 0202 	orr.w	r2, r3, #2
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a56:	2204      	movs	r2, #4
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d012      	beq.n	8003a88 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0302 	and.w	r3, r3, #2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00b      	beq.n	8003a88 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a74:	2204      	movs	r2, #4
 8003a76:	409a      	lsls	r2, r3
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a80:	f043 0204 	orr.w	r2, r3, #4
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a8c:	2210      	movs	r2, #16
 8003a8e:	409a      	lsls	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	4013      	ands	r3, r2
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d043      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f003 0308 	and.w	r3, r3, #8
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d03c      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003aaa:	2210      	movs	r2, #16
 8003aac:	409a      	lsls	r2, r3
 8003aae:	693b      	ldr	r3, [r7, #16]
 8003ab0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d018      	beq.n	8003af2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d108      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d024      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	4798      	blx	r3
 8003ade:	e01f      	b.n	8003b20 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d01b      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
 8003af0:	e016      	b.n	8003b20 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d107      	bne.n	8003b10 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 0208 	bic.w	r2, r2, #8
 8003b0e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	2220      	movs	r2, #32
 8003b26:	409a      	lsls	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	f000 808f 	beq.w	8003c50 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	f000 8087 	beq.w	8003c50 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b46:	2220      	movs	r2, #32
 8003b48:	409a      	lsls	r2, r3
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d136      	bne.n	8003bc8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681a      	ldr	r2, [r3, #0]
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f022 0216 	bic.w	r2, r2, #22
 8003b68:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	695a      	ldr	r2, [r3, #20]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b78:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <HAL_DMA_IRQHandler+0x1da>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f022 0208 	bic.w	r2, r2, #8
 8003b98:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b9e:	223f      	movs	r2, #63	@ 0x3f
 8003ba0:	409a      	lsls	r2, r3
 8003ba2:	693b      	ldr	r3, [r7, #16]
 8003ba4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2201      	movs	r2, #1
 8003baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d07e      	beq.n	8003cbc <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	4798      	blx	r3
        }
        return;
 8003bc6:	e079      	b.n	8003cbc <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d01d      	beq.n	8003c12 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d10d      	bne.n	8003c00 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d031      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
 8003bf4:	e02c      	b.n	8003c50 <HAL_DMA_IRQHandler+0x2a0>
 8003bf6:	bf00      	nop
 8003bf8:	20000000 	.word	0x20000000
 8003bfc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d023      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	4798      	blx	r3
 8003c10:	e01e      	b.n	8003c50 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d10f      	bne.n	8003c40 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	681a      	ldr	r2, [r3, #0]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 0210 	bic.w	r2, r2, #16
 8003c2e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d003      	beq.n	8003c50 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d032      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c5c:	f003 0301 	and.w	r3, r3, #1
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d022      	beq.n	8003caa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2205      	movs	r2, #5
 8003c68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 0201 	bic.w	r2, r2, #1
 8003c7a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	3301      	adds	r3, #1
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	697a      	ldr	r2, [r7, #20]
 8003c84:	429a      	cmp	r2, r3
 8003c86:	d307      	bcc.n	8003c98 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f2      	bne.n	8003c7c <HAL_DMA_IRQHandler+0x2cc>
 8003c96:	e000      	b.n	8003c9a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c98:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d005      	beq.n	8003cbe <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	4798      	blx	r3
 8003cba:	e000      	b.n	8003cbe <HAL_DMA_IRQHandler+0x30e>
        return;
 8003cbc:	bf00      	nop
    }
  }
}
 8003cbe:	3718      	adds	r7, #24
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}

08003cc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003cc4:	b480      	push	{r7}
 8003cc6:	b085      	sub	sp, #20
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	60f8      	str	r0, [r7, #12]
 8003ccc:	60b9      	str	r1, [r7, #8]
 8003cce:	607a      	str	r2, [r7, #4]
 8003cd0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	681a      	ldr	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003ce0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b40      	cmp	r3, #64	@ 0x40
 8003cf0:	d108      	bne.n	8003d04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	687a      	ldr	r2, [r7, #4]
 8003cf8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68ba      	ldr	r2, [r7, #8]
 8003d00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d02:	e007      	b.n	8003d14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	60da      	str	r2, [r3, #12]
}
 8003d14:	bf00      	nop
 8003d16:	3714      	adds	r7, #20
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1e:	4770      	bx	lr

08003d20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d20:	b480      	push	{r7}
 8003d22:	b085      	sub	sp, #20
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	3b10      	subs	r3, #16
 8003d30:	4a14      	ldr	r2, [pc, #80]	@ (8003d84 <DMA_CalcBaseAndBitshift+0x64>)
 8003d32:	fba2 2303 	umull	r2, r3, r2, r3
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003d3a:	4a13      	ldr	r2, [pc, #76]	@ (8003d88 <DMA_CalcBaseAndBitshift+0x68>)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	4413      	add	r3, r2
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2b03      	cmp	r3, #3
 8003d4c:	d909      	bls.n	8003d62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d56:	f023 0303 	bic.w	r3, r3, #3
 8003d5a:	1d1a      	adds	r2, r3, #4
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	659a      	str	r2, [r3, #88]	@ 0x58
 8003d60:	e007      	b.n	8003d72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003d6a:	f023 0303 	bic.w	r3, r3, #3
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3714      	adds	r7, #20
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d80:	4770      	bx	lr
 8003d82:	bf00      	nop
 8003d84:	aaaaaaab 	.word	0xaaaaaaab
 8003d88:	0800a030 	.word	0x0800a030

08003d8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d94:	2300      	movs	r3, #0
 8003d96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d11f      	bne.n	8003de6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	2b03      	cmp	r3, #3
 8003daa:	d856      	bhi.n	8003e5a <DMA_CheckFifoParam+0xce>
 8003dac:	a201      	add	r2, pc, #4	@ (adr r2, 8003db4 <DMA_CheckFifoParam+0x28>)
 8003dae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003db2:	bf00      	nop
 8003db4:	08003dc5 	.word	0x08003dc5
 8003db8:	08003dd7 	.word	0x08003dd7
 8003dbc:	08003dc5 	.word	0x08003dc5
 8003dc0:	08003e5b 	.word	0x08003e5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d046      	beq.n	8003e5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003dd4:	e043      	b.n	8003e5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dda:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003dde:	d140      	bne.n	8003e62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003de4:	e03d      	b.n	8003e62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003dee:	d121      	bne.n	8003e34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	2b03      	cmp	r3, #3
 8003df4:	d837      	bhi.n	8003e66 <DMA_CheckFifoParam+0xda>
 8003df6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dfc <DMA_CheckFifoParam+0x70>)
 8003df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfc:	08003e0d 	.word	0x08003e0d
 8003e00:	08003e13 	.word	0x08003e13
 8003e04:	08003e0d 	.word	0x08003e0d
 8003e08:	08003e25 	.word	0x08003e25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8003e10:	e030      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e16:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d025      	beq.n	8003e6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e22:	e022      	b.n	8003e6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e28:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003e2c:	d11f      	bne.n	8003e6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e32:	e01c      	b.n	8003e6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d903      	bls.n	8003e42 <DMA_CheckFifoParam+0xb6>
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b03      	cmp	r3, #3
 8003e3e:	d003      	beq.n	8003e48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003e40:	e018      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
      break;
 8003e46:	e015      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e4c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00e      	beq.n	8003e72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	73fb      	strb	r3, [r7, #15]
      break;
 8003e58:	e00b      	b.n	8003e72 <DMA_CheckFifoParam+0xe6>
      break;
 8003e5a:	bf00      	nop
 8003e5c:	e00a      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e5e:	bf00      	nop
 8003e60:	e008      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e62:	bf00      	nop
 8003e64:	e006      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e66:	bf00      	nop
 8003e68:	e004      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e6a:	bf00      	nop
 8003e6c:	e002      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;   
 8003e6e:	bf00      	nop
 8003e70:	e000      	b.n	8003e74 <DMA_CheckFifoParam+0xe8>
      break;
 8003e72:	bf00      	nop
    }
  } 
  
  return status; 
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3714      	adds	r7, #20
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop

08003e84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b089      	sub	sp, #36	@ 0x24
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
 8003e8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003e92:	2300      	movs	r3, #0
 8003e94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
 8003e9e:	e16b      	b.n	8004178 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	69fb      	ldr	r3, [r7, #28]
 8003ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	f040 815a 	bne.w	8004172 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f003 0303 	and.w	r3, r3, #3
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d005      	beq.n	8003ed6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003ed2:	2b02      	cmp	r3, #2
 8003ed4:	d130      	bne.n	8003f38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	005b      	lsls	r3, r3, #1
 8003ee0:	2203      	movs	r2, #3
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43db      	mvns	r3, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4013      	ands	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	68da      	ldr	r2, [r3, #12]
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	005b      	lsls	r3, r3, #1
 8003ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8003efa:	69ba      	ldr	r2, [r7, #24]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	69ba      	ldr	r2, [r7, #24]
 8003f04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	4013      	ands	r3, r2
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	685b      	ldr	r3, [r3, #4]
 8003f20:	091b      	lsrs	r3, r3, #4
 8003f22:	f003 0201 	and.w	r2, r3, #1
 8003f26:	69fb      	ldr	r3, [r7, #28]
 8003f28:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2c:	69ba      	ldr	r2, [r7, #24]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 0303 	and.w	r3, r3, #3
 8003f40:	2b03      	cmp	r3, #3
 8003f42:	d017      	beq.n	8003f74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f4a:	69fb      	ldr	r3, [r7, #28]
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	2203      	movs	r2, #3
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689a      	ldr	r2, [r3, #8]
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	005b      	lsls	r3, r3, #1
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	69ba      	ldr	r2, [r7, #24]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f003 0303 	and.w	r3, r3, #3
 8003f7c:	2b02      	cmp	r3, #2
 8003f7e:	d123      	bne.n	8003fc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	08da      	lsrs	r2, r3, #3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	3208      	adds	r2, #8
 8003f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	f003 0307 	and.w	r3, r3, #7
 8003f94:	009b      	lsls	r3, r3, #2
 8003f96:	220f      	movs	r2, #15
 8003f98:	fa02 f303 	lsl.w	r3, r2, r3
 8003f9c:	43db      	mvns	r3, r3
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	009b      	lsls	r3, r3, #2
 8003fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	08da      	lsrs	r2, r3, #3
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	3208      	adds	r2, #8
 8003fc2:	69b9      	ldr	r1, [r7, #24]
 8003fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	005b      	lsls	r3, r3, #1
 8003fd2:	2203      	movs	r2, #3
 8003fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd8:	43db      	mvns	r3, r3
 8003fda:	69ba      	ldr	r2, [r7, #24]
 8003fdc:	4013      	ands	r3, r2
 8003fde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0203 	and.w	r2, r3, #3
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff0:	69ba      	ldr	r2, [r7, #24]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	69ba      	ldr	r2, [r7, #24]
 8003ffa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004004:	2b00      	cmp	r3, #0
 8004006:	f000 80b4 	beq.w	8004172 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800400a:	2300      	movs	r3, #0
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	4b60      	ldr	r3, [pc, #384]	@ (8004190 <HAL_GPIO_Init+0x30c>)
 8004010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004012:	4a5f      	ldr	r2, [pc, #380]	@ (8004190 <HAL_GPIO_Init+0x30c>)
 8004014:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004018:	6453      	str	r3, [r2, #68]	@ 0x44
 800401a:	4b5d      	ldr	r3, [pc, #372]	@ (8004190 <HAL_GPIO_Init+0x30c>)
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004026:	4a5b      	ldr	r2, [pc, #364]	@ (8004194 <HAL_GPIO_Init+0x310>)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	089b      	lsrs	r3, r3, #2
 800402c:	3302      	adds	r3, #2
 800402e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004032:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	f003 0303 	and.w	r3, r3, #3
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	220f      	movs	r2, #15
 800403e:	fa02 f303 	lsl.w	r3, r2, r3
 8004042:	43db      	mvns	r3, r3
 8004044:	69ba      	ldr	r2, [r7, #24]
 8004046:	4013      	ands	r3, r2
 8004048:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a52      	ldr	r2, [pc, #328]	@ (8004198 <HAL_GPIO_Init+0x314>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d02b      	beq.n	80040aa <HAL_GPIO_Init+0x226>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a51      	ldr	r2, [pc, #324]	@ (800419c <HAL_GPIO_Init+0x318>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d025      	beq.n	80040a6 <HAL_GPIO_Init+0x222>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a50      	ldr	r2, [pc, #320]	@ (80041a0 <HAL_GPIO_Init+0x31c>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d01f      	beq.n	80040a2 <HAL_GPIO_Init+0x21e>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a4f      	ldr	r2, [pc, #316]	@ (80041a4 <HAL_GPIO_Init+0x320>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d019      	beq.n	800409e <HAL_GPIO_Init+0x21a>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a4e      	ldr	r2, [pc, #312]	@ (80041a8 <HAL_GPIO_Init+0x324>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d013      	beq.n	800409a <HAL_GPIO_Init+0x216>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a4d      	ldr	r2, [pc, #308]	@ (80041ac <HAL_GPIO_Init+0x328>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d00d      	beq.n	8004096 <HAL_GPIO_Init+0x212>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a4c      	ldr	r2, [pc, #304]	@ (80041b0 <HAL_GPIO_Init+0x32c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d007      	beq.n	8004092 <HAL_GPIO_Init+0x20e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a4b      	ldr	r2, [pc, #300]	@ (80041b4 <HAL_GPIO_Init+0x330>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d101      	bne.n	800408e <HAL_GPIO_Init+0x20a>
 800408a:	2307      	movs	r3, #7
 800408c:	e00e      	b.n	80040ac <HAL_GPIO_Init+0x228>
 800408e:	2308      	movs	r3, #8
 8004090:	e00c      	b.n	80040ac <HAL_GPIO_Init+0x228>
 8004092:	2306      	movs	r3, #6
 8004094:	e00a      	b.n	80040ac <HAL_GPIO_Init+0x228>
 8004096:	2305      	movs	r3, #5
 8004098:	e008      	b.n	80040ac <HAL_GPIO_Init+0x228>
 800409a:	2304      	movs	r3, #4
 800409c:	e006      	b.n	80040ac <HAL_GPIO_Init+0x228>
 800409e:	2303      	movs	r3, #3
 80040a0:	e004      	b.n	80040ac <HAL_GPIO_Init+0x228>
 80040a2:	2302      	movs	r3, #2
 80040a4:	e002      	b.n	80040ac <HAL_GPIO_Init+0x228>
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HAL_GPIO_Init+0x228>
 80040aa:	2300      	movs	r3, #0
 80040ac:	69fa      	ldr	r2, [r7, #28]
 80040ae:	f002 0203 	and.w	r2, r2, #3
 80040b2:	0092      	lsls	r2, r2, #2
 80040b4:	4093      	lsls	r3, r2
 80040b6:	69ba      	ldr	r2, [r7, #24]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040bc:	4935      	ldr	r1, [pc, #212]	@ (8004194 <HAL_GPIO_Init+0x310>)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	089b      	lsrs	r3, r3, #2
 80040c2:	3302      	adds	r3, #2
 80040c4:	69ba      	ldr	r2, [r7, #24]
 80040c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80040ca:	4b3b      	ldr	r3, [pc, #236]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	43db      	mvns	r3, r3
 80040d4:	69ba      	ldr	r2, [r7, #24]
 80040d6:	4013      	ands	r3, r2
 80040d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d003      	beq.n	80040ee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80040ee:	4a32      	ldr	r2, [pc, #200]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80040f4:	4b30      	ldr	r3, [pc, #192]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 80040f6:	68db      	ldr	r3, [r3, #12]
 80040f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	43db      	mvns	r3, r3
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4013      	ands	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d003      	beq.n	8004118 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004110:	69ba      	ldr	r2, [r7, #24]
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	4313      	orrs	r3, r2
 8004116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004118:	4a27      	ldr	r2, [pc, #156]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800411e:	4b26      	ldr	r3, [pc, #152]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	43db      	mvns	r3, r3
 8004128:	69ba      	ldr	r2, [r7, #24]
 800412a:	4013      	ands	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800413a:	69ba      	ldr	r2, [r7, #24]
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	4313      	orrs	r3, r2
 8004140:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004142:	4a1d      	ldr	r2, [pc, #116]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 8004144:	69bb      	ldr	r3, [r7, #24]
 8004146:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004148:	4b1b      	ldr	r3, [pc, #108]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	43db      	mvns	r3, r3
 8004152:	69ba      	ldr	r2, [r7, #24]
 8004154:	4013      	ands	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d003      	beq.n	800416c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004164:	69ba      	ldr	r2, [r7, #24]
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800416c:	4a12      	ldr	r2, [pc, #72]	@ (80041b8 <HAL_GPIO_Init+0x334>)
 800416e:	69bb      	ldr	r3, [r7, #24]
 8004170:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	3301      	adds	r3, #1
 8004176:	61fb      	str	r3, [r7, #28]
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b0f      	cmp	r3, #15
 800417c:	f67f ae90 	bls.w	8003ea0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004180:	bf00      	nop
 8004182:	bf00      	nop
 8004184:	3724      	adds	r7, #36	@ 0x24
 8004186:	46bd      	mov	sp, r7
 8004188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418c:	4770      	bx	lr
 800418e:	bf00      	nop
 8004190:	40023800 	.word	0x40023800
 8004194:	40013800 	.word	0x40013800
 8004198:	40020000 	.word	0x40020000
 800419c:	40020400 	.word	0x40020400
 80041a0:	40020800 	.word	0x40020800
 80041a4:	40020c00 	.word	0x40020c00
 80041a8:	40021000 	.word	0x40021000
 80041ac:	40021400 	.word	0x40021400
 80041b0:	40021800 	.word	0x40021800
 80041b4:	40021c00 	.word	0x40021c00
 80041b8:	40013c00 	.word	0x40013c00

080041bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041bc:	b480      	push	{r7}
 80041be:	b085      	sub	sp, #20
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	460b      	mov	r3, r1
 80041c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	887b      	ldrh	r3, [r7, #2]
 80041ce:	4013      	ands	r3, r2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d002      	beq.n	80041da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80041d4:	2301      	movs	r3, #1
 80041d6:	73fb      	strb	r3, [r7, #15]
 80041d8:	e001      	b.n	80041de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80041de:	7bfb      	ldrb	r3, [r7, #15]
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3714      	adds	r7, #20
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	460b      	mov	r3, r1
 80041f6:	807b      	strh	r3, [r7, #2]
 80041f8:	4613      	mov	r3, r2
 80041fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80041fc:	787b      	ldrb	r3, [r7, #1]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d003      	beq.n	800420a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004202:	887a      	ldrh	r2, [r7, #2]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004208:	e003      	b.n	8004212 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800420a:	887b      	ldrh	r3, [r7, #2]
 800420c:	041a      	lsls	r2, r3, #16
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	619a      	str	r2, [r3, #24]
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
	...

08004220 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b082      	sub	sp, #8
 8004224:	af00      	add	r7, sp, #0
 8004226:	4603      	mov	r3, r0
 8004228:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800422a:	4b08      	ldr	r3, [pc, #32]	@ (800424c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800422c:	695a      	ldr	r2, [r3, #20]
 800422e:	88fb      	ldrh	r3, [r7, #6]
 8004230:	4013      	ands	r3, r2
 8004232:	2b00      	cmp	r3, #0
 8004234:	d006      	beq.n	8004244 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004236:	4a05      	ldr	r2, [pc, #20]	@ (800424c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800423c:	88fb      	ldrh	r3, [r7, #6]
 800423e:	4618      	mov	r0, r3
 8004240:	f000 f806 	bl	8004250 <HAL_GPIO_EXTI_Callback>
  }
}
 8004244:	bf00      	nop
 8004246:	3708      	adds	r7, #8
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40013c00 	.word	0x40013c00

08004250 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	4603      	mov	r3, r0
 8004258:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800425a:	bf00      	nop
 800425c:	370c      	adds	r7, #12
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d101      	bne.n	800427a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e12b      	b.n	80044d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004280:	b2db      	uxtb	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d106      	bne.n	8004294 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2200      	movs	r2, #0
 800428a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7fd ffa6 	bl	80021e0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2224      	movs	r2, #36	@ 0x24
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80042ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80042cc:	f000 fd4c 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 80042d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	4a81      	ldr	r2, [pc, #516]	@ (80044dc <HAL_I2C_Init+0x274>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d807      	bhi.n	80042ec <HAL_I2C_Init+0x84>
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4a80      	ldr	r2, [pc, #512]	@ (80044e0 <HAL_I2C_Init+0x278>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	bf94      	ite	ls
 80042e4:	2301      	movls	r3, #1
 80042e6:	2300      	movhi	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e006      	b.n	80042fa <HAL_I2C_Init+0x92>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4a7d      	ldr	r2, [pc, #500]	@ (80044e4 <HAL_I2C_Init+0x27c>)
 80042f0:	4293      	cmp	r3, r2
 80042f2:	bf94      	ite	ls
 80042f4:	2301      	movls	r3, #1
 80042f6:	2300      	movhi	r3, #0
 80042f8:	b2db      	uxtb	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d001      	beq.n	8004302 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e0e7      	b.n	80044d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	4a78      	ldr	r2, [pc, #480]	@ (80044e8 <HAL_I2C_Init+0x280>)
 8004306:	fba2 2303 	umull	r2, r3, r2, r3
 800430a:	0c9b      	lsrs	r3, r3, #18
 800430c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	430a      	orrs	r2, r1
 8004320:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6a1b      	ldr	r3, [r3, #32]
 8004328:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	4a6a      	ldr	r2, [pc, #424]	@ (80044dc <HAL_I2C_Init+0x274>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d802      	bhi.n	800433c <HAL_I2C_Init+0xd4>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	3301      	adds	r3, #1
 800433a:	e009      	b.n	8004350 <HAL_I2C_Init+0xe8>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004342:	fb02 f303 	mul.w	r3, r2, r3
 8004346:	4a69      	ldr	r2, [pc, #420]	@ (80044ec <HAL_I2C_Init+0x284>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	3301      	adds	r3, #1
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	6812      	ldr	r2, [r2, #0]
 8004354:	430b      	orrs	r3, r1
 8004356:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004362:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	495c      	ldr	r1, [pc, #368]	@ (80044dc <HAL_I2C_Init+0x274>)
 800436c:	428b      	cmp	r3, r1
 800436e:	d819      	bhi.n	80043a4 <HAL_I2C_Init+0x13c>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	1e59      	subs	r1, r3, #1
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	fbb1 f3f3 	udiv	r3, r1, r3
 800437e:	1c59      	adds	r1, r3, #1
 8004380:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004384:	400b      	ands	r3, r1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00a      	beq.n	80043a0 <HAL_I2C_Init+0x138>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	1e59      	subs	r1, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	005b      	lsls	r3, r3, #1
 8004394:	fbb1 f3f3 	udiv	r3, r1, r3
 8004398:	3301      	adds	r3, #1
 800439a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800439e:	e051      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043a0:	2304      	movs	r3, #4
 80043a2:	e04f      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d111      	bne.n	80043d0 <HAL_I2C_Init+0x168>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e58      	subs	r0, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6859      	ldr	r1, [r3, #4]
 80043b4:	460b      	mov	r3, r1
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	440b      	add	r3, r1
 80043ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80043be:	3301      	adds	r3, #1
 80043c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	bf0c      	ite	eq
 80043c8:	2301      	moveq	r3, #1
 80043ca:	2300      	movne	r3, #0
 80043cc:	b2db      	uxtb	r3, r3
 80043ce:	e012      	b.n	80043f6 <HAL_I2C_Init+0x18e>
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	1e58      	subs	r0, r3, #1
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6859      	ldr	r1, [r3, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	009b      	lsls	r3, r3, #2
 80043dc:	440b      	add	r3, r1
 80043de:	0099      	lsls	r1, r3, #2
 80043e0:	440b      	add	r3, r1
 80043e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80043e6:	3301      	adds	r3, #1
 80043e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	bf0c      	ite	eq
 80043f0:	2301      	moveq	r3, #1
 80043f2:	2300      	movne	r3, #0
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <HAL_I2C_Init+0x196>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e022      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	689b      	ldr	r3, [r3, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d10e      	bne.n	8004424 <HAL_I2C_Init+0x1bc>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	1e58      	subs	r0, r3, #1
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6859      	ldr	r1, [r3, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	005b      	lsls	r3, r3, #1
 8004412:	440b      	add	r3, r1
 8004414:	fbb0 f3f3 	udiv	r3, r0, r3
 8004418:	3301      	adds	r3, #1
 800441a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800441e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004422:	e00f      	b.n	8004444 <HAL_I2C_Init+0x1dc>
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	1e58      	subs	r0, r3, #1
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6859      	ldr	r1, [r3, #4]
 800442c:	460b      	mov	r3, r1
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	440b      	add	r3, r1
 8004432:	0099      	lsls	r1, r3, #2
 8004434:	440b      	add	r3, r1
 8004436:	fbb0 f3f3 	udiv	r3, r0, r3
 800443a:	3301      	adds	r3, #1
 800443c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004440:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004444:	6879      	ldr	r1, [r7, #4]
 8004446:	6809      	ldr	r1, [r1, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	69da      	ldr	r2, [r3, #28]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004472:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	6911      	ldr	r1, [r2, #16]
 800447a:	687a      	ldr	r2, [r7, #4]
 800447c:	68d2      	ldr	r2, [r2, #12]
 800447e:	4311      	orrs	r1, r2
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	6812      	ldr	r2, [r2, #0]
 8004484:	430b      	orrs	r3, r1
 8004486:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	695a      	ldr	r2, [r3, #20]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2220      	movs	r2, #32
 80044be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3710      	adds	r7, #16
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	000186a0 	.word	0x000186a0
 80044e0:	001e847f 	.word	0x001e847f
 80044e4:	003d08ff 	.word	0x003d08ff
 80044e8:	431bde83 	.word	0x431bde83
 80044ec:	10624dd3 	.word	0x10624dd3

080044f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e267      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b00      	cmp	r3, #0
 800450c:	d075      	beq.n	80045fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800450e:	4b88      	ldr	r3, [pc, #544]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	f003 030c 	and.w	r3, r3, #12
 8004516:	2b04      	cmp	r3, #4
 8004518:	d00c      	beq.n	8004534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800451a:	4b85      	ldr	r3, [pc, #532]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004522:	2b08      	cmp	r3, #8
 8004524:	d112      	bne.n	800454c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004526:	4b82      	ldr	r3, [pc, #520]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800452e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004532:	d10b      	bne.n	800454c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004534:	4b7e      	ldr	r3, [pc, #504]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d05b      	beq.n	80045f8 <HAL_RCC_OscConfig+0x108>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d157      	bne.n	80045f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e242      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004554:	d106      	bne.n	8004564 <HAL_RCC_OscConfig+0x74>
 8004556:	4b76      	ldr	r3, [pc, #472]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4a75      	ldr	r2, [pc, #468]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800455c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004560:	6013      	str	r3, [r2, #0]
 8004562:	e01d      	b.n	80045a0 <HAL_RCC_OscConfig+0xb0>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800456c:	d10c      	bne.n	8004588 <HAL_RCC_OscConfig+0x98>
 800456e:	4b70      	ldr	r3, [pc, #448]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4a6f      	ldr	r2, [pc, #444]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004574:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004578:	6013      	str	r3, [r2, #0]
 800457a:	4b6d      	ldr	r3, [pc, #436]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	4a6c      	ldr	r2, [pc, #432]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004580:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004584:	6013      	str	r3, [r2, #0]
 8004586:	e00b      	b.n	80045a0 <HAL_RCC_OscConfig+0xb0>
 8004588:	4b69      	ldr	r3, [pc, #420]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	4a68      	ldr	r2, [pc, #416]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800458e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004592:	6013      	str	r3, [r2, #0]
 8004594:	4b66      	ldr	r3, [pc, #408]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	4a65      	ldr	r2, [pc, #404]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800459a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800459e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d013      	beq.n	80045d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a8:	f7fe fc18 	bl	8002ddc <HAL_GetTick>
 80045ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	e008      	b.n	80045c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045b0:	f7fe fc14 	bl	8002ddc <HAL_GetTick>
 80045b4:	4602      	mov	r2, r0
 80045b6:	693b      	ldr	r3, [r7, #16]
 80045b8:	1ad3      	subs	r3, r2, r3
 80045ba:	2b64      	cmp	r3, #100	@ 0x64
 80045bc:	d901      	bls.n	80045c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045be:	2303      	movs	r3, #3
 80045c0:	e207      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045c2:	4b5b      	ldr	r3, [pc, #364]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d0f0      	beq.n	80045b0 <HAL_RCC_OscConfig+0xc0>
 80045ce:	e014      	b.n	80045fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7fe fc04 	bl	8002ddc <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045d8:	f7fe fc00 	bl	8002ddc <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b64      	cmp	r3, #100	@ 0x64
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e1f3      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ea:	4b51      	ldr	r3, [pc, #324]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0xe8>
 80045f6:	e000      	b.n	80045fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f003 0302 	and.w	r3, r3, #2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d063      	beq.n	80046ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004606:	4b4a      	ldr	r3, [pc, #296]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004608:	689b      	ldr	r3, [r3, #8]
 800460a:	f003 030c 	and.w	r3, r3, #12
 800460e:	2b00      	cmp	r3, #0
 8004610:	d00b      	beq.n	800462a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004612:	4b47      	ldr	r3, [pc, #284]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800461a:	2b08      	cmp	r3, #8
 800461c:	d11c      	bne.n	8004658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800461e:	4b44      	ldr	r3, [pc, #272]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d116      	bne.n	8004658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800462a:	4b41      	ldr	r3, [pc, #260]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0302 	and.w	r3, r3, #2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_RCC_OscConfig+0x152>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	e1c7      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004642:	4b3b      	ldr	r3, [pc, #236]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4937      	ldr	r1, [pc, #220]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004652:	4313      	orrs	r3, r2
 8004654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004656:	e03a      	b.n	80046ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d020      	beq.n	80046a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004660:	4b34      	ldr	r3, [pc, #208]	@ (8004734 <HAL_RCC_OscConfig+0x244>)
 8004662:	2201      	movs	r2, #1
 8004664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004666:	f7fe fbb9 	bl	8002ddc <HAL_GetTick>
 800466a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800466c:	e008      	b.n	8004680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800466e:	f7fe fbb5 	bl	8002ddc <HAL_GetTick>
 8004672:	4602      	mov	r2, r0
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	2b02      	cmp	r3, #2
 800467a:	d901      	bls.n	8004680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800467c:	2303      	movs	r3, #3
 800467e:	e1a8      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004680:	4b2b      	ldr	r3, [pc, #172]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0f0      	beq.n	800466e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800468c:	4b28      	ldr	r3, [pc, #160]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	00db      	lsls	r3, r3, #3
 800469a:	4925      	ldr	r1, [pc, #148]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 800469c:	4313      	orrs	r3, r2
 800469e:	600b      	str	r3, [r1, #0]
 80046a0:	e015      	b.n	80046ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046a2:	4b24      	ldr	r3, [pc, #144]	@ (8004734 <HAL_RCC_OscConfig+0x244>)
 80046a4:	2200      	movs	r2, #0
 80046a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046a8:	f7fe fb98 	bl	8002ddc <HAL_GetTick>
 80046ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046ae:	e008      	b.n	80046c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046b0:	f7fe fb94 	bl	8002ddc <HAL_GetTick>
 80046b4:	4602      	mov	r2, r0
 80046b6:	693b      	ldr	r3, [r7, #16]
 80046b8:	1ad3      	subs	r3, r2, r3
 80046ba:	2b02      	cmp	r3, #2
 80046bc:	d901      	bls.n	80046c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046be:	2303      	movs	r3, #3
 80046c0:	e187      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0302 	and.w	r3, r3, #2
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1f0      	bne.n	80046b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f003 0308 	and.w	r3, r3, #8
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d036      	beq.n	8004748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d016      	beq.n	8004710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046e2:	4b15      	ldr	r3, [pc, #84]	@ (8004738 <HAL_RCC_OscConfig+0x248>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046e8:	f7fe fb78 	bl	8002ddc <HAL_GetTick>
 80046ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046ee:	e008      	b.n	8004702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046f0:	f7fe fb74 	bl	8002ddc <HAL_GetTick>
 80046f4:	4602      	mov	r2, r0
 80046f6:	693b      	ldr	r3, [r7, #16]
 80046f8:	1ad3      	subs	r3, r2, r3
 80046fa:	2b02      	cmp	r3, #2
 80046fc:	d901      	bls.n	8004702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e167      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004702:	4b0b      	ldr	r3, [pc, #44]	@ (8004730 <HAL_RCC_OscConfig+0x240>)
 8004704:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0f0      	beq.n	80046f0 <HAL_RCC_OscConfig+0x200>
 800470e:	e01b      	b.n	8004748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004710:	4b09      	ldr	r3, [pc, #36]	@ (8004738 <HAL_RCC_OscConfig+0x248>)
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004716:	f7fe fb61 	bl	8002ddc <HAL_GetTick>
 800471a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800471c:	e00e      	b.n	800473c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800471e:	f7fe fb5d 	bl	8002ddc <HAL_GetTick>
 8004722:	4602      	mov	r2, r0
 8004724:	693b      	ldr	r3, [r7, #16]
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	2b02      	cmp	r3, #2
 800472a:	d907      	bls.n	800473c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e150      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
 8004730:	40023800 	.word	0x40023800
 8004734:	42470000 	.word	0x42470000
 8004738:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800473c:	4b88      	ldr	r3, [pc, #544]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800473e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004740:	f003 0302 	and.w	r3, r3, #2
 8004744:	2b00      	cmp	r3, #0
 8004746:	d1ea      	bne.n	800471e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f003 0304 	and.w	r3, r3, #4
 8004750:	2b00      	cmp	r3, #0
 8004752:	f000 8097 	beq.w	8004884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004756:	2300      	movs	r3, #0
 8004758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800475a:	4b81      	ldr	r3, [pc, #516]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800475c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d10f      	bne.n	8004786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	4b7d      	ldr	r3, [pc, #500]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800476c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476e:	4a7c      	ldr	r2, [pc, #496]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 8004770:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004774:	6413      	str	r3, [r2, #64]	@ 0x40
 8004776:	4b7a      	ldr	r3, [pc, #488]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 8004778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800477e:	60bb      	str	r3, [r7, #8]
 8004780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004782:	2301      	movs	r3, #1
 8004784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004786:	4b77      	ldr	r3, [pc, #476]	@ (8004964 <HAL_RCC_OscConfig+0x474>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478e:	2b00      	cmp	r3, #0
 8004790:	d118      	bne.n	80047c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004792:	4b74      	ldr	r3, [pc, #464]	@ (8004964 <HAL_RCC_OscConfig+0x474>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a73      	ldr	r2, [pc, #460]	@ (8004964 <HAL_RCC_OscConfig+0x474>)
 8004798:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800479c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800479e:	f7fe fb1d 	bl	8002ddc <HAL_GetTick>
 80047a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047a4:	e008      	b.n	80047b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047a6:	f7fe fb19 	bl	8002ddc <HAL_GetTick>
 80047aa:	4602      	mov	r2, r0
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	1ad3      	subs	r3, r2, r3
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d901      	bls.n	80047b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047b4:	2303      	movs	r3, #3
 80047b6:	e10c      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	4b6a      	ldr	r3, [pc, #424]	@ (8004964 <HAL_RCC_OscConfig+0x474>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0f0      	beq.n	80047a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	689b      	ldr	r3, [r3, #8]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d106      	bne.n	80047da <HAL_RCC_OscConfig+0x2ea>
 80047cc:	4b64      	ldr	r3, [pc, #400]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	4a63      	ldr	r2, [pc, #396]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f043 0301 	orr.w	r3, r3, #1
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80047d8:	e01c      	b.n	8004814 <HAL_RCC_OscConfig+0x324>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	2b05      	cmp	r3, #5
 80047e0:	d10c      	bne.n	80047fc <HAL_RCC_OscConfig+0x30c>
 80047e2:	4b5f      	ldr	r3, [pc, #380]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80047e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047e6:	4a5e      	ldr	r2, [pc, #376]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80047e8:	f043 0304 	orr.w	r3, r3, #4
 80047ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80047ee:	4b5c      	ldr	r3, [pc, #368]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80047f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047f2:	4a5b      	ldr	r2, [pc, #364]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80047f4:	f043 0301 	orr.w	r3, r3, #1
 80047f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80047fa:	e00b      	b.n	8004814 <HAL_RCC_OscConfig+0x324>
 80047fc:	4b58      	ldr	r3, [pc, #352]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80047fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004800:	4a57      	ldr	r2, [pc, #348]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 8004802:	f023 0301 	bic.w	r3, r3, #1
 8004806:	6713      	str	r3, [r2, #112]	@ 0x70
 8004808:	4b55      	ldr	r3, [pc, #340]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800480a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800480c:	4a54      	ldr	r2, [pc, #336]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800480e:	f023 0304 	bic.w	r3, r3, #4
 8004812:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d015      	beq.n	8004848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800481c:	f7fe fade 	bl	8002ddc <HAL_GetTick>
 8004820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004822:	e00a      	b.n	800483a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004824:	f7fe fada 	bl	8002ddc <HAL_GetTick>
 8004828:	4602      	mov	r2, r0
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	1ad3      	subs	r3, r2, r3
 800482e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004832:	4293      	cmp	r3, r2
 8004834:	d901      	bls.n	800483a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004836:	2303      	movs	r3, #3
 8004838:	e0cb      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800483a:	4b49      	ldr	r3, [pc, #292]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800483c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800483e:	f003 0302 	and.w	r3, r3, #2
 8004842:	2b00      	cmp	r3, #0
 8004844:	d0ee      	beq.n	8004824 <HAL_RCC_OscConfig+0x334>
 8004846:	e014      	b.n	8004872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004848:	f7fe fac8 	bl	8002ddc <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800484e:	e00a      	b.n	8004866 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004850:	f7fe fac4 	bl	8002ddc <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e0b5      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004866:	4b3e      	ldr	r3, [pc, #248]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 8004868:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486a:	f003 0302 	and.w	r3, r3, #2
 800486e:	2b00      	cmp	r3, #0
 8004870:	d1ee      	bne.n	8004850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004872:	7dfb      	ldrb	r3, [r7, #23]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d105      	bne.n	8004884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004878:	4b39      	ldr	r3, [pc, #228]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800487a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800487c:	4a38      	ldr	r2, [pc, #224]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800487e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004882:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	699b      	ldr	r3, [r3, #24]
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80a1 	beq.w	80049d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800488e:	4b34      	ldr	r3, [pc, #208]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b08      	cmp	r3, #8
 8004898:	d05c      	beq.n	8004954 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d141      	bne.n	8004926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048a2:	4b31      	ldr	r3, [pc, #196]	@ (8004968 <HAL_RCC_OscConfig+0x478>)
 80048a4:	2200      	movs	r2, #0
 80048a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048a8:	f7fe fa98 	bl	8002ddc <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048b0:	f7fe fa94 	bl	8002ddc <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e087      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048c2:	4b27      	ldr	r3, [pc, #156]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1f0      	bne.n	80048b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69da      	ldr	r2, [r3, #28]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	431a      	orrs	r2, r3
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048dc:	019b      	lsls	r3, r3, #6
 80048de:	431a      	orrs	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048e4:	085b      	lsrs	r3, r3, #1
 80048e6:	3b01      	subs	r3, #1
 80048e8:	041b      	lsls	r3, r3, #16
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048f0:	061b      	lsls	r3, r3, #24
 80048f2:	491b      	ldr	r1, [pc, #108]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 80048f4:	4313      	orrs	r3, r2
 80048f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048f8:	4b1b      	ldr	r3, [pc, #108]	@ (8004968 <HAL_RCC_OscConfig+0x478>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048fe:	f7fe fa6d 	bl	8002ddc <HAL_GetTick>
 8004902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004904:	e008      	b.n	8004918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004906:	f7fe fa69 	bl	8002ddc <HAL_GetTick>
 800490a:	4602      	mov	r2, r0
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	1ad3      	subs	r3, r2, r3
 8004910:	2b02      	cmp	r3, #2
 8004912:	d901      	bls.n	8004918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004914:	2303      	movs	r3, #3
 8004916:	e05c      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004918:	4b11      	ldr	r3, [pc, #68]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004920:	2b00      	cmp	r3, #0
 8004922:	d0f0      	beq.n	8004906 <HAL_RCC_OscConfig+0x416>
 8004924:	e054      	b.n	80049d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004926:	4b10      	ldr	r3, [pc, #64]	@ (8004968 <HAL_RCC_OscConfig+0x478>)
 8004928:	2200      	movs	r2, #0
 800492a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800492c:	f7fe fa56 	bl	8002ddc <HAL_GetTick>
 8004930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004932:	e008      	b.n	8004946 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004934:	f7fe fa52 	bl	8002ddc <HAL_GetTick>
 8004938:	4602      	mov	r2, r0
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	2b02      	cmp	r3, #2
 8004940:	d901      	bls.n	8004946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004942:	2303      	movs	r3, #3
 8004944:	e045      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004946:	4b06      	ldr	r3, [pc, #24]	@ (8004960 <HAL_RCC_OscConfig+0x470>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d1f0      	bne.n	8004934 <HAL_RCC_OscConfig+0x444>
 8004952:	e03d      	b.n	80049d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	699b      	ldr	r3, [r3, #24]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d107      	bne.n	800496c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e038      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
 8004960:	40023800 	.word	0x40023800
 8004964:	40007000 	.word	0x40007000
 8004968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800496c:	4b1b      	ldr	r3, [pc, #108]	@ (80049dc <HAL_RCC_OscConfig+0x4ec>)
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b01      	cmp	r3, #1
 8004978:	d028      	beq.n	80049cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004984:	429a      	cmp	r2, r3
 8004986:	d121      	bne.n	80049cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004992:	429a      	cmp	r2, r3
 8004994:	d11a      	bne.n	80049cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004996:	68fa      	ldr	r2, [r7, #12]
 8004998:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800499c:	4013      	ands	r3, r2
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d111      	bne.n	80049cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	3b01      	subs	r3, #1
 80049b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d107      	bne.n	80049cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049c8:	429a      	cmp	r2, r3
 80049ca:	d001      	beq.n	80049d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3718      	adds	r7, #24
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	40023800 	.word	0x40023800

080049e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0cc      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049f4:	4b68      	ldr	r3, [pc, #416]	@ (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d90c      	bls.n	8004a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b65      	ldr	r3, [pc, #404]	@ (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a04:	683a      	ldr	r2, [r7, #0]
 8004a06:	b2d2      	uxtb	r2, r2
 8004a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a0a:	4b63      	ldr	r3, [pc, #396]	@ (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d001      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e0b8      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0302 	and.w	r3, r3, #2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d020      	beq.n	8004a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f003 0304 	and.w	r3, r3, #4
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d005      	beq.n	8004a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a34:	4b59      	ldr	r3, [pc, #356]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	4a58      	ldr	r2, [pc, #352]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a3a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0308 	and.w	r3, r3, #8
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d005      	beq.n	8004a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a4c:	4b53      	ldr	r3, [pc, #332]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	4a52      	ldr	r2, [pc, #328]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a52:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a58:	4b50      	ldr	r3, [pc, #320]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	494d      	ldr	r1, [pc, #308]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f003 0301 	and.w	r3, r3, #1
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d044      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d107      	bne.n	8004a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b47      	ldr	r3, [pc, #284]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d119      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e07f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	685b      	ldr	r3, [r3, #4]
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d003      	beq.n	8004a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9e:	4b3f      	ldr	r3, [pc, #252]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e06f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	4b3b      	ldr	r3, [pc, #236]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e067      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b37      	ldr	r3, [pc, #220]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4934      	ldr	r1, [pc, #208]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad0:	f7fe f984 	bl	8002ddc <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fe f980 	bl	8002ddc <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e04f      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b2b      	ldr	r3, [pc, #172]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b00:	4b25      	ldr	r3, [pc, #148]	@ (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d20c      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b22      	ldr	r3, [pc, #136]	@ (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b20      	ldr	r3, [pc, #128]	@ (8004b98 <HAL_RCC_ClockConfig+0x1b8>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e032      	b.n	8004b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b19      	ldr	r3, [pc, #100]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4916      	ldr	r1, [pc, #88]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b12      	ldr	r3, [pc, #72]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	490e      	ldr	r1, [pc, #56]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b66:	f000 f82d 	bl	8004bc4 <HAL_RCC_GetSysClockFreq>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b9c <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	490a      	ldr	r1, [pc, #40]	@ (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b78:	5ccb      	ldrb	r3, [r1, r3]
 8004b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004b7e:	4a09      	ldr	r2, [pc, #36]	@ (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b82:	4b09      	ldr	r3, [pc, #36]	@ (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f7fe f8e4 	bl	8002d54 <HAL_InitTick>

  return HAL_OK;
 8004b8c:	2300      	movs	r3, #0
}
 8004b8e:	4618      	mov	r0, r3
 8004b90:	3710      	adds	r7, #16
 8004b92:	46bd      	mov	sp, r7
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	40023c00 	.word	0x40023c00
 8004b9c:	40023800 	.word	0x40023800
 8004ba0:	0800a018 	.word	0x0800a018
 8004ba4:	20000000 	.word	0x20000000
 8004ba8:	20000004 	.word	0x20000004

08004bac <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8004bac:	b480      	push	{r7}
 8004bae:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004bb0:	4b03      	ldr	r3, [pc, #12]	@ (8004bc0 <HAL_RCC_EnableCSS+0x14>)
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	601a      	str	r2, [r3, #0]
}
 8004bb6:	bf00      	nop
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bbe:	4770      	bx	lr
 8004bc0:	4247004c 	.word	0x4247004c

08004bc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bc8:	b090      	sub	sp, #64	@ 0x40
 8004bca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	637b      	str	r3, [r7, #52]	@ 0x34
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bdc:	4b59      	ldr	r3, [pc, #356]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bde:	689b      	ldr	r3, [r3, #8]
 8004be0:	f003 030c 	and.w	r3, r3, #12
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d00d      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0x40>
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	f200 80a1 	bhi.w	8004d30 <HAL_RCC_GetSysClockFreq+0x16c>
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d002      	beq.n	8004bf8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0x3a>
 8004bf6:	e09b      	b.n	8004d30 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004bf8:	4b53      	ldr	r3, [pc, #332]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8004bfa:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004bfc:	e09b      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004bfe:	4b53      	ldr	r3, [pc, #332]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c00:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c02:	e098      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c04:	4b4f      	ldr	r3, [pc, #316]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c06:	685b      	ldr	r3, [r3, #4]
 8004c08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c0c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c0e:	4b4d      	ldr	r3, [pc, #308]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d028      	beq.n	8004c6c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c1a:	4b4a      	ldr	r3, [pc, #296]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	099b      	lsrs	r3, r3, #6
 8004c20:	2200      	movs	r2, #0
 8004c22:	623b      	str	r3, [r7, #32]
 8004c24:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c26:	6a3b      	ldr	r3, [r7, #32]
 8004c28:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	4b47      	ldr	r3, [pc, #284]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c30:	fb03 f201 	mul.w	r2, r3, r1
 8004c34:	2300      	movs	r3, #0
 8004c36:	fb00 f303 	mul.w	r3, r0, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	4a43      	ldr	r2, [pc, #268]	@ (8004d4c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c3e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c42:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c44:	460a      	mov	r2, r1
 8004c46:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c4a:	4413      	add	r3, r2
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c50:	2200      	movs	r2, #0
 8004c52:	61bb      	str	r3, [r7, #24]
 8004c54:	61fa      	str	r2, [r7, #28]
 8004c56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c5a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c5e:	f7fb fab7 	bl	80001d0 <__aeabi_uldivmod>
 8004c62:	4602      	mov	r2, r0
 8004c64:	460b      	mov	r3, r1
 8004c66:	4613      	mov	r3, r2
 8004c68:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c6a:	e053      	b.n	8004d14 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c6c:	4b35      	ldr	r3, [pc, #212]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	099b      	lsrs	r3, r3, #6
 8004c72:	2200      	movs	r2, #0
 8004c74:	613b      	str	r3, [r7, #16]
 8004c76:	617a      	str	r2, [r7, #20]
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c7e:	f04f 0b00 	mov.w	fp, #0
 8004c82:	4652      	mov	r2, sl
 8004c84:	465b      	mov	r3, fp
 8004c86:	f04f 0000 	mov.w	r0, #0
 8004c8a:	f04f 0100 	mov.w	r1, #0
 8004c8e:	0159      	lsls	r1, r3, #5
 8004c90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c94:	0150      	lsls	r0, r2, #5
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	ebb2 080a 	subs.w	r8, r2, sl
 8004c9e:	eb63 090b 	sbc.w	r9, r3, fp
 8004ca2:	f04f 0200 	mov.w	r2, #0
 8004ca6:	f04f 0300 	mov.w	r3, #0
 8004caa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cb2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cb6:	ebb2 0408 	subs.w	r4, r2, r8
 8004cba:	eb63 0509 	sbc.w	r5, r3, r9
 8004cbe:	f04f 0200 	mov.w	r2, #0
 8004cc2:	f04f 0300 	mov.w	r3, #0
 8004cc6:	00eb      	lsls	r3, r5, #3
 8004cc8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ccc:	00e2      	lsls	r2, r4, #3
 8004cce:	4614      	mov	r4, r2
 8004cd0:	461d      	mov	r5, r3
 8004cd2:	eb14 030a 	adds.w	r3, r4, sl
 8004cd6:	603b      	str	r3, [r7, #0]
 8004cd8:	eb45 030b 	adc.w	r3, r5, fp
 8004cdc:	607b      	str	r3, [r7, #4]
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004cea:	4629      	mov	r1, r5
 8004cec:	028b      	lsls	r3, r1, #10
 8004cee:	4621      	mov	r1, r4
 8004cf0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004cf4:	4621      	mov	r1, r4
 8004cf6:	028a      	lsls	r2, r1, #10
 8004cf8:	4610      	mov	r0, r2
 8004cfa:	4619      	mov	r1, r3
 8004cfc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60bb      	str	r3, [r7, #8]
 8004d02:	60fa      	str	r2, [r7, #12]
 8004d04:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d08:	f7fb fa62 	bl	80001d0 <__aeabi_uldivmod>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	460b      	mov	r3, r1
 8004d10:	4613      	mov	r3, r2
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d14:	4b0b      	ldr	r3, [pc, #44]	@ (8004d44 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	0c1b      	lsrs	r3, r3, #16
 8004d1a:	f003 0303 	and.w	r3, r3, #3
 8004d1e:	3301      	adds	r3, #1
 8004d20:	005b      	lsls	r3, r3, #1
 8004d22:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004d24:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d28:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d2e:	e002      	b.n	8004d36 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d30:	4b05      	ldr	r3, [pc, #20]	@ (8004d48 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d32:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d38:	4618      	mov	r0, r3
 8004d3a:	3740      	adds	r7, #64	@ 0x40
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d42:	bf00      	nop
 8004d44:	40023800 	.word	0x40023800
 8004d48:	00f42400 	.word	0x00f42400
 8004d4c:	00b71b00 	.word	0x00b71b00

08004d50 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d50:	b480      	push	{r7}
 8004d52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d54:	4b03      	ldr	r3, [pc, #12]	@ (8004d64 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d56:	681b      	ldr	r3, [r3, #0]
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	20000000 	.word	0x20000000

08004d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d6c:	f7ff fff0 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d70:	4602      	mov	r2, r0
 8004d72:	4b05      	ldr	r3, [pc, #20]	@ (8004d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	0a9b      	lsrs	r3, r3, #10
 8004d78:	f003 0307 	and.w	r3, r3, #7
 8004d7c:	4903      	ldr	r1, [pc, #12]	@ (8004d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d7e:	5ccb      	ldrb	r3, [r1, r3]
 8004d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	0800a028 	.word	0x0800a028

08004d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d90:	b580      	push	{r7, lr}
 8004d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d94:	f7ff ffdc 	bl	8004d50 <HAL_RCC_GetHCLKFreq>
 8004d98:	4602      	mov	r2, r0
 8004d9a:	4b05      	ldr	r3, [pc, #20]	@ (8004db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	0b5b      	lsrs	r3, r3, #13
 8004da0:	f003 0307 	and.w	r3, r3, #7
 8004da4:	4903      	ldr	r1, [pc, #12]	@ (8004db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004da6:	5ccb      	ldrb	r3, [r1, r3]
 8004da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	bd80      	pop	{r7, pc}
 8004db0:	40023800 	.word	0x40023800
 8004db4:	0800a028 	.word	0x0800a028

08004db8 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8004dbc:	4b06      	ldr	r3, [pc, #24]	@ (8004dd8 <HAL_RCC_NMI_IRQHandler+0x20>)
 8004dbe:	68db      	ldr	r3, [r3, #12]
 8004dc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc4:	2b80      	cmp	r3, #128	@ 0x80
 8004dc6:	d104      	bne.n	8004dd2 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8004dc8:	f000 f80a 	bl	8004de0 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8004dcc:	4b03      	ldr	r3, [pc, #12]	@ (8004ddc <HAL_RCC_NMI_IRQHandler+0x24>)
 8004dce:	2280      	movs	r2, #128	@ 0x80
 8004dd0:	701a      	strb	r2, [r3, #0]
  }
}
 8004dd2:	bf00      	nop
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	40023800 	.word	0x40023800
 8004ddc:	4002380e 	.word	0x4002380e

08004de0 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8004de0:	b480      	push	{r7}
 8004de2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8004de4:	bf00      	nop
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b082      	sub	sp, #8
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d101      	bne.n	8004e00 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e07b      	b.n	8004ef8 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d108      	bne.n	8004e1a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	685b      	ldr	r3, [r3, #4]
 8004e0c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e10:	d009      	beq.n	8004e26 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	2200      	movs	r2, #0
 8004e16:	61da      	str	r2, [r3, #28]
 8004e18:	e005      	b.n	8004e26 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2200      	movs	r2, #0
 8004e24:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fd fa37 	bl	80022b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2202      	movs	r2, #2
 8004e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e5c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	f003 0302 	and.w	r3, r3, #2
 8004e82:	431a      	orrs	r2, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	695b      	ldr	r3, [r3, #20]
 8004e88:	f003 0301 	and.w	r3, r3, #1
 8004e8c:	431a      	orrs	r2, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	699b      	ldr	r3, [r3, #24]
 8004e92:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004e96:	431a      	orrs	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	69db      	ldr	r3, [r3, #28]
 8004e9c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004ea0:	431a      	orrs	r2, r3
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6a1b      	ldr	r3, [r3, #32]
 8004ea6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eaa:	ea42 0103 	orr.w	r1, r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb2:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	430a      	orrs	r2, r1
 8004ebc:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	0c1b      	lsrs	r3, r3, #16
 8004ec4:	f003 0104 	and.w	r1, r3, #4
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ecc:	f003 0210 	and.w	r2, r3, #16
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	69da      	ldr	r2, [r3, #28]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004ee6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2200      	movs	r2, #0
 8004eec:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2201      	movs	r2, #1
 8004ef2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004ef6:	2300      	movs	r3, #0
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3708      	adds	r7, #8
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b082      	sub	sp, #8
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d101      	bne.n	8004f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e041      	b.n	8004f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d106      	bne.n	8004f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f26:	6878      	ldr	r0, [r7, #4]
 8004f28:	f7fd fab6 	bl	8002498 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2202      	movs	r2, #2
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	3304      	adds	r3, #4
 8004f3c:	4619      	mov	r1, r3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	f000 fba8 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2201      	movs	r2, #1
 8004f60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	2201      	movs	r2, #1
 8004f68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2201      	movs	r2, #1
 8004f70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2201      	movs	r2, #1
 8004f88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	3708      	adds	r7, #8
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
	...

08004fa0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fae:	b2db      	uxtb	r3, r3
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d001      	beq.n	8004fb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e046      	b.n	8005046 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2202      	movs	r2, #2
 8004fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a23      	ldr	r2, [pc, #140]	@ (8005054 <HAL_TIM_Base_Start+0xb4>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d022      	beq.n	8005010 <HAL_TIM_Base_Start+0x70>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd2:	d01d      	beq.n	8005010 <HAL_TIM_Base_Start+0x70>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a1f      	ldr	r2, [pc, #124]	@ (8005058 <HAL_TIM_Base_Start+0xb8>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d018      	beq.n	8005010 <HAL_TIM_Base_Start+0x70>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1e      	ldr	r2, [pc, #120]	@ (800505c <HAL_TIM_Base_Start+0xbc>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d013      	beq.n	8005010 <HAL_TIM_Base_Start+0x70>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a1c      	ldr	r2, [pc, #112]	@ (8005060 <HAL_TIM_Base_Start+0xc0>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d00e      	beq.n	8005010 <HAL_TIM_Base_Start+0x70>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a1b      	ldr	r2, [pc, #108]	@ (8005064 <HAL_TIM_Base_Start+0xc4>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d009      	beq.n	8005010 <HAL_TIM_Base_Start+0x70>
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a19      	ldr	r2, [pc, #100]	@ (8005068 <HAL_TIM_Base_Start+0xc8>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d004      	beq.n	8005010 <HAL_TIM_Base_Start+0x70>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	4a18      	ldr	r2, [pc, #96]	@ (800506c <HAL_TIM_Base_Start+0xcc>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d111      	bne.n	8005034 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 0307 	and.w	r3, r3, #7
 800501a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2b06      	cmp	r3, #6
 8005020:	d010      	beq.n	8005044 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f042 0201 	orr.w	r2, r2, #1
 8005030:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005032:	e007      	b.n	8005044 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0201 	orr.w	r2, r2, #1
 8005042:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005044:	2300      	movs	r3, #0
}
 8005046:	4618      	mov	r0, r3
 8005048:	3714      	adds	r7, #20
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40010000 	.word	0x40010000
 8005058:	40000400 	.word	0x40000400
 800505c:	40000800 	.word	0x40000800
 8005060:	40000c00 	.word	0x40000c00
 8005064:	40010400 	.word	0x40010400
 8005068:	40014000 	.word	0x40014000
 800506c:	40001800 	.word	0x40001800

08005070 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b082      	sub	sp, #8
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e041      	b.n	8005106 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005088:	b2db      	uxtb	r3, r3
 800508a:	2b00      	cmp	r3, #0
 800508c:	d106      	bne.n	800509c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f7fd f974 	bl	8002384 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681a      	ldr	r2, [r3, #0]
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	3304      	adds	r3, #4
 80050ac:	4619      	mov	r1, r3
 80050ae:	4610      	mov	r0, r2
 80050b0:	f000 faf0 	bl	8005694 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2201      	movs	r2, #1
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b084      	sub	sp, #16
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
 8005118:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d109      	bne.n	8005134 <HAL_TIM_PWM_Start+0x24>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005126:	b2db      	uxtb	r3, r3
 8005128:	2b01      	cmp	r3, #1
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	e022      	b.n	800517a <HAL_TIM_PWM_Start+0x6a>
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	2b04      	cmp	r3, #4
 8005138:	d109      	bne.n	800514e <HAL_TIM_PWM_Start+0x3e>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005140:	b2db      	uxtb	r3, r3
 8005142:	2b01      	cmp	r3, #1
 8005144:	bf14      	ite	ne
 8005146:	2301      	movne	r3, #1
 8005148:	2300      	moveq	r3, #0
 800514a:	b2db      	uxtb	r3, r3
 800514c:	e015      	b.n	800517a <HAL_TIM_PWM_Start+0x6a>
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	2b08      	cmp	r3, #8
 8005152:	d109      	bne.n	8005168 <HAL_TIM_PWM_Start+0x58>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800515a:	b2db      	uxtb	r3, r3
 800515c:	2b01      	cmp	r3, #1
 800515e:	bf14      	ite	ne
 8005160:	2301      	movne	r3, #1
 8005162:	2300      	moveq	r3, #0
 8005164:	b2db      	uxtb	r3, r3
 8005166:	e008      	b.n	800517a <HAL_TIM_PWM_Start+0x6a>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b01      	cmp	r3, #1
 8005172:	bf14      	ite	ne
 8005174:	2301      	movne	r3, #1
 8005176:	2300      	moveq	r3, #0
 8005178:	b2db      	uxtb	r3, r3
 800517a:	2b00      	cmp	r3, #0
 800517c:	d001      	beq.n	8005182 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e07c      	b.n	800527c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d104      	bne.n	8005192 <HAL_TIM_PWM_Start+0x82>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2202      	movs	r2, #2
 800518c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005190:	e013      	b.n	80051ba <HAL_TIM_PWM_Start+0xaa>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b04      	cmp	r3, #4
 8005196:	d104      	bne.n	80051a2 <HAL_TIM_PWM_Start+0x92>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2202      	movs	r2, #2
 800519c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051a0:	e00b      	b.n	80051ba <HAL_TIM_PWM_Start+0xaa>
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d104      	bne.n	80051b2 <HAL_TIM_PWM_Start+0xa2>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	2202      	movs	r2, #2
 80051ac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051b0:	e003      	b.n	80051ba <HAL_TIM_PWM_Start+0xaa>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2202      	movs	r2, #2
 80051b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2201      	movs	r2, #1
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	4618      	mov	r0, r3
 80051c4:	f000 fd5c 	bl	8005c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	4a2d      	ldr	r2, [pc, #180]	@ (8005284 <HAL_TIM_PWM_Start+0x174>)
 80051ce:	4293      	cmp	r3, r2
 80051d0:	d004      	beq.n	80051dc <HAL_TIM_PWM_Start+0xcc>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a2c      	ldr	r2, [pc, #176]	@ (8005288 <HAL_TIM_PWM_Start+0x178>)
 80051d8:	4293      	cmp	r3, r2
 80051da:	d101      	bne.n	80051e0 <HAL_TIM_PWM_Start+0xd0>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <HAL_TIM_PWM_Start+0xd2>
 80051e0:	2300      	movs	r3, #0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d007      	beq.n	80051f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80051f4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a22      	ldr	r2, [pc, #136]	@ (8005284 <HAL_TIM_PWM_Start+0x174>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d022      	beq.n	8005246 <HAL_TIM_PWM_Start+0x136>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005208:	d01d      	beq.n	8005246 <HAL_TIM_PWM_Start+0x136>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	4a1f      	ldr	r2, [pc, #124]	@ (800528c <HAL_TIM_PWM_Start+0x17c>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d018      	beq.n	8005246 <HAL_TIM_PWM_Start+0x136>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	4a1d      	ldr	r2, [pc, #116]	@ (8005290 <HAL_TIM_PWM_Start+0x180>)
 800521a:	4293      	cmp	r3, r2
 800521c:	d013      	beq.n	8005246 <HAL_TIM_PWM_Start+0x136>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a1c      	ldr	r2, [pc, #112]	@ (8005294 <HAL_TIM_PWM_Start+0x184>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d00e      	beq.n	8005246 <HAL_TIM_PWM_Start+0x136>
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a16      	ldr	r2, [pc, #88]	@ (8005288 <HAL_TIM_PWM_Start+0x178>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d009      	beq.n	8005246 <HAL_TIM_PWM_Start+0x136>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a18      	ldr	r2, [pc, #96]	@ (8005298 <HAL_TIM_PWM_Start+0x188>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d004      	beq.n	8005246 <HAL_TIM_PWM_Start+0x136>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a16      	ldr	r2, [pc, #88]	@ (800529c <HAL_TIM_PWM_Start+0x18c>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d111      	bne.n	800526a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 0307 	and.w	r3, r3, #7
 8005250:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2b06      	cmp	r3, #6
 8005256:	d010      	beq.n	800527a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	681a      	ldr	r2, [r3, #0]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0201 	orr.w	r2, r2, #1
 8005266:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005268:	e007      	b.n	800527a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f042 0201 	orr.w	r2, r2, #1
 8005278:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3710      	adds	r7, #16
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}
 8005284:	40010000 	.word	0x40010000
 8005288:	40010400 	.word	0x40010400
 800528c:	40000400 	.word	0x40000400
 8005290:	40000800 	.word	0x40000800
 8005294:	40000c00 	.word	0x40000c00
 8005298:	40014000 	.word	0x40014000
 800529c:	40001800 	.word	0x40001800

080052a0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b082      	sub	sp, #8
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
 80052a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 fce4 	bl	8005c80 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005378 <HAL_TIM_PWM_Stop+0xd8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIM_PWM_Stop+0x2c>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2d      	ldr	r2, [pc, #180]	@ (800537c <HAL_TIM_PWM_Stop+0xdc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_PWM_Stop+0x30>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_TIM_PWM_Stop+0x32>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d017      	beq.n	8005306 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6a1a      	ldr	r2, [r3, #32]
 80052dc:	f241 1311 	movw	r3, #4369	@ 0x1111
 80052e0:	4013      	ands	r3, r2
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10f      	bne.n	8005306 <HAL_TIM_PWM_Stop+0x66>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	6a1a      	ldr	r2, [r3, #32]
 80052ec:	f240 4344 	movw	r3, #1092	@ 0x444
 80052f0:	4013      	ands	r3, r2
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d107      	bne.n	8005306 <HAL_TIM_PWM_Stop+0x66>
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005304:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6a1a      	ldr	r2, [r3, #32]
 800530c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8005310:	4013      	ands	r3, r2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d10f      	bne.n	8005336 <HAL_TIM_PWM_Stop+0x96>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6a1a      	ldr	r2, [r3, #32]
 800531c:	f240 4344 	movw	r3, #1092	@ 0x444
 8005320:	4013      	ands	r3, r2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d107      	bne.n	8005336 <HAL_TIM_PWM_Stop+0x96>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681a      	ldr	r2, [r3, #0]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f022 0201 	bic.w	r2, r2, #1
 8005334:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <HAL_TIM_PWM_Stop+0xa6>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2201      	movs	r2, #1
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005344:	e013      	b.n	800536e <HAL_TIM_PWM_Stop+0xce>
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	2b04      	cmp	r3, #4
 800534a:	d104      	bne.n	8005356 <HAL_TIM_PWM_Stop+0xb6>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005354:	e00b      	b.n	800536e <HAL_TIM_PWM_Stop+0xce>
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	2b08      	cmp	r3, #8
 800535a:	d104      	bne.n	8005366 <HAL_TIM_PWM_Stop+0xc6>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2201      	movs	r2, #1
 8005360:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005364:	e003      	b.n	800536e <HAL_TIM_PWM_Stop+0xce>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2201      	movs	r2, #1
 800536a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	40010000 	.word	0x40010000
 800537c:	40010400 	.word	0x40010400

08005380 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	60f8      	str	r0, [r7, #12]
 8005388:	60b9      	str	r1, [r7, #8]
 800538a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800538c:	2300      	movs	r3, #0
 800538e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005396:	2b01      	cmp	r3, #1
 8005398:	d101      	bne.n	800539e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800539a:	2302      	movs	r3, #2
 800539c:	e0ae      	b.n	80054fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2b0c      	cmp	r3, #12
 80053aa:	f200 809f 	bhi.w	80054ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80053ae:	a201      	add	r2, pc, #4	@ (adr r2, 80053b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80053b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b4:	080053e9 	.word	0x080053e9
 80053b8:	080054ed 	.word	0x080054ed
 80053bc:	080054ed 	.word	0x080054ed
 80053c0:	080054ed 	.word	0x080054ed
 80053c4:	08005429 	.word	0x08005429
 80053c8:	080054ed 	.word	0x080054ed
 80053cc:	080054ed 	.word	0x080054ed
 80053d0:	080054ed 	.word	0x080054ed
 80053d4:	0800546b 	.word	0x0800546b
 80053d8:	080054ed 	.word	0x080054ed
 80053dc:	080054ed 	.word	0x080054ed
 80053e0:	080054ed 	.word	0x080054ed
 80053e4:	080054ab 	.word	0x080054ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	68b9      	ldr	r1, [r7, #8]
 80053ee:	4618      	mov	r0, r3
 80053f0:	f000 f9fc 	bl	80057ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	699a      	ldr	r2, [r3, #24]
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0208 	orr.w	r2, r2, #8
 8005402:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f022 0204 	bic.w	r2, r2, #4
 8005412:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	6999      	ldr	r1, [r3, #24]
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	691a      	ldr	r2, [r3, #16]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	430a      	orrs	r2, r1
 8005424:	619a      	str	r2, [r3, #24]
      break;
 8005426:	e064      	b.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	4618      	mov	r0, r3
 8005430:	f000 fa4c 	bl	80058cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	699a      	ldr	r2, [r3, #24]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005442:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	699a      	ldr	r2, [r3, #24]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005452:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6999      	ldr	r1, [r3, #24]
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	021a      	lsls	r2, r3, #8
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	430a      	orrs	r2, r1
 8005466:	619a      	str	r2, [r3, #24]
      break;
 8005468:	e043      	b.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	68b9      	ldr	r1, [r7, #8]
 8005470:	4618      	mov	r0, r3
 8005472:	f000 faa1 	bl	80059b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	69da      	ldr	r2, [r3, #28]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f042 0208 	orr.w	r2, r2, #8
 8005484:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	69da      	ldr	r2, [r3, #28]
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f022 0204 	bic.w	r2, r2, #4
 8005494:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69d9      	ldr	r1, [r3, #28]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	691a      	ldr	r2, [r3, #16]
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	61da      	str	r2, [r3, #28]
      break;
 80054a8:	e023      	b.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68b9      	ldr	r1, [r7, #8]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 faf5 	bl	8005aa0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	69da      	ldr	r2, [r3, #28]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	69da      	ldr	r2, [r3, #28]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	69d9      	ldr	r1, [r3, #28]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	691b      	ldr	r3, [r3, #16]
 80054e0:	021a      	lsls	r2, r3, #8
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	61da      	str	r2, [r3, #28]
      break;
 80054ea:	e002      	b.n	80054f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80054ec:	2301      	movs	r3, #1
 80054ee:	75fb      	strb	r3, [r7, #23]
      break;
 80054f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3718      	adds	r7, #24
 8005500:	46bd      	mov	sp, r7
 8005502:	bd80      	pop	{r7, pc}

08005504 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800550e:	2300      	movs	r3, #0
 8005510:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005518:	2b01      	cmp	r3, #1
 800551a:	d101      	bne.n	8005520 <HAL_TIM_ConfigClockSource+0x1c>
 800551c:	2302      	movs	r3, #2
 800551e:	e0b4      	b.n	800568a <HAL_TIM_ConfigClockSource+0x186>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2202      	movs	r2, #2
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	689b      	ldr	r3, [r3, #8]
 8005536:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800553e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005546:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	68ba      	ldr	r2, [r7, #8]
 800554e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005558:	d03e      	beq.n	80055d8 <HAL_TIM_ConfigClockSource+0xd4>
 800555a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800555e:	f200 8087 	bhi.w	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005562:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005566:	f000 8086 	beq.w	8005676 <HAL_TIM_ConfigClockSource+0x172>
 800556a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800556e:	d87f      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005570:	2b70      	cmp	r3, #112	@ 0x70
 8005572:	d01a      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0xa6>
 8005574:	2b70      	cmp	r3, #112	@ 0x70
 8005576:	d87b      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005578:	2b60      	cmp	r3, #96	@ 0x60
 800557a:	d050      	beq.n	800561e <HAL_TIM_ConfigClockSource+0x11a>
 800557c:	2b60      	cmp	r3, #96	@ 0x60
 800557e:	d877      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005580:	2b50      	cmp	r3, #80	@ 0x50
 8005582:	d03c      	beq.n	80055fe <HAL_TIM_ConfigClockSource+0xfa>
 8005584:	2b50      	cmp	r3, #80	@ 0x50
 8005586:	d873      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005588:	2b40      	cmp	r3, #64	@ 0x40
 800558a:	d058      	beq.n	800563e <HAL_TIM_ConfigClockSource+0x13a>
 800558c:	2b40      	cmp	r3, #64	@ 0x40
 800558e:	d86f      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005590:	2b30      	cmp	r3, #48	@ 0x30
 8005592:	d064      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 8005594:	2b30      	cmp	r3, #48	@ 0x30
 8005596:	d86b      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 8005598:	2b20      	cmp	r3, #32
 800559a:	d060      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 800559c:	2b20      	cmp	r3, #32
 800559e:	d867      	bhi.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d05c      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 80055a4:	2b10      	cmp	r3, #16
 80055a6:	d05a      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x15a>
 80055a8:	e062      	b.n	8005670 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055ba:	f000 fb41 	bl	8005c40 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80055cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	609a      	str	r2, [r3, #8]
      break;
 80055d6:	e04f      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80055e8:	f000 fb2a 	bl	8005c40 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	689a      	ldr	r2, [r3, #8]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80055fa:	609a      	str	r2, [r3, #8]
      break;
 80055fc:	e03c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800560a:	461a      	mov	r2, r3
 800560c:	f000 fa9e 	bl	8005b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2150      	movs	r1, #80	@ 0x50
 8005616:	4618      	mov	r0, r3
 8005618:	f000 faf7 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 800561c:	e02c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005626:	683b      	ldr	r3, [r7, #0]
 8005628:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800562a:	461a      	mov	r2, r3
 800562c:	f000 fabd 	bl	8005baa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2160      	movs	r1, #96	@ 0x60
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fae7 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 800563c:	e01c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800564a:	461a      	mov	r2, r3
 800564c:	f000 fa7e 	bl	8005b4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2140      	movs	r1, #64	@ 0x40
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fad7 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 800565c:	e00c      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	4619      	mov	r1, r3
 8005668:	4610      	mov	r0, r2
 800566a:	f000 face 	bl	8005c0a <TIM_ITRx_SetConfig>
      break;
 800566e:	e003      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005670:	2301      	movs	r3, #1
 8005672:	73fb      	strb	r3, [r7, #15]
      break;
 8005674:	e000      	b.n	8005678 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005676:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	2201      	movs	r2, #1
 800567c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
	...

08005694 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a46      	ldr	r2, [pc, #280]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d013      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056b2:	d00f      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	4a43      	ldr	r2, [pc, #268]	@ (80057c4 <TIM_Base_SetConfig+0x130>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00b      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a42      	ldr	r2, [pc, #264]	@ (80057c8 <TIM_Base_SetConfig+0x134>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d007      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a41      	ldr	r2, [pc, #260]	@ (80057cc <TIM_Base_SetConfig+0x138>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d003      	beq.n	80056d4 <TIM_Base_SetConfig+0x40>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	4a40      	ldr	r2, [pc, #256]	@ (80057d0 <TIM_Base_SetConfig+0x13c>)
 80056d0:	4293      	cmp	r3, r2
 80056d2:	d108      	bne.n	80056e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	685b      	ldr	r3, [r3, #4]
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a35      	ldr	r2, [pc, #212]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d02b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80056f4:	d027      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a32      	ldr	r2, [pc, #200]	@ (80057c4 <TIM_Base_SetConfig+0x130>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d023      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a31      	ldr	r2, [pc, #196]	@ (80057c8 <TIM_Base_SetConfig+0x134>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d01f      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a30      	ldr	r2, [pc, #192]	@ (80057cc <TIM_Base_SetConfig+0x138>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d01b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a2f      	ldr	r2, [pc, #188]	@ (80057d0 <TIM_Base_SetConfig+0x13c>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d017      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a2e      	ldr	r2, [pc, #184]	@ (80057d4 <TIM_Base_SetConfig+0x140>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d013      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a2d      	ldr	r2, [pc, #180]	@ (80057d8 <TIM_Base_SetConfig+0x144>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d00f      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a2c      	ldr	r2, [pc, #176]	@ (80057dc <TIM_Base_SetConfig+0x148>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d00b      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	4a2b      	ldr	r2, [pc, #172]	@ (80057e0 <TIM_Base_SetConfig+0x14c>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d007      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	4a2a      	ldr	r2, [pc, #168]	@ (80057e4 <TIM_Base_SetConfig+0x150>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d003      	beq.n	8005746 <TIM_Base_SetConfig+0xb2>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	4a29      	ldr	r2, [pc, #164]	@ (80057e8 <TIM_Base_SetConfig+0x154>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d108      	bne.n	8005758 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800574c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	4313      	orrs	r3, r2
 8005756:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	695b      	ldr	r3, [r3, #20]
 8005762:	4313      	orrs	r3, r2
 8005764:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68fa      	ldr	r2, [r7, #12]
 800576a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	4a10      	ldr	r2, [pc, #64]	@ (80057c0 <TIM_Base_SetConfig+0x12c>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d003      	beq.n	800578c <TIM_Base_SetConfig+0xf8>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a12      	ldr	r2, [pc, #72]	@ (80057d0 <TIM_Base_SetConfig+0x13c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d103      	bne.n	8005794 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	691a      	ldr	r2, [r3, #16]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d105      	bne.n	80057b2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	691b      	ldr	r3, [r3, #16]
 80057aa:	f023 0201 	bic.w	r2, r3, #1
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	611a      	str	r2, [r3, #16]
  }
}
 80057b2:	bf00      	nop
 80057b4:	3714      	adds	r7, #20
 80057b6:	46bd      	mov	sp, r7
 80057b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057bc:	4770      	bx	lr
 80057be:	bf00      	nop
 80057c0:	40010000 	.word	0x40010000
 80057c4:	40000400 	.word	0x40000400
 80057c8:	40000800 	.word	0x40000800
 80057cc:	40000c00 	.word	0x40000c00
 80057d0:	40010400 	.word	0x40010400
 80057d4:	40014000 	.word	0x40014000
 80057d8:	40014400 	.word	0x40014400
 80057dc:	40014800 	.word	0x40014800
 80057e0:	40001800 	.word	0x40001800
 80057e4:	40001c00 	.word	0x40001c00
 80057e8:	40002000 	.word	0x40002000

080057ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
 80057f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6a1b      	ldr	r3, [r3, #32]
 80057fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1b      	ldr	r3, [r3, #32]
 8005800:	f023 0201 	bic.w	r2, r3, #1
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	699b      	ldr	r3, [r3, #24]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800581a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f023 0303 	bic.w	r3, r3, #3
 8005822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	4313      	orrs	r3, r2
 800582c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	f023 0302 	bic.w	r3, r3, #2
 8005834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	697a      	ldr	r2, [r7, #20]
 800583c:	4313      	orrs	r3, r2
 800583e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a20      	ldr	r2, [pc, #128]	@ (80058c4 <TIM_OC1_SetConfig+0xd8>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d003      	beq.n	8005850 <TIM_OC1_SetConfig+0x64>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a1f      	ldr	r2, [pc, #124]	@ (80058c8 <TIM_OC1_SetConfig+0xdc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d10c      	bne.n	800586a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	f023 0308 	bic.w	r3, r3, #8
 8005856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	697a      	ldr	r2, [r7, #20]
 800585e:	4313      	orrs	r3, r2
 8005860:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f023 0304 	bic.w	r3, r3, #4
 8005868:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	4a15      	ldr	r2, [pc, #84]	@ (80058c4 <TIM_OC1_SetConfig+0xd8>)
 800586e:	4293      	cmp	r3, r2
 8005870:	d003      	beq.n	800587a <TIM_OC1_SetConfig+0x8e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a14      	ldr	r2, [pc, #80]	@ (80058c8 <TIM_OC1_SetConfig+0xdc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d111      	bne.n	800589e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800587a:	693b      	ldr	r3, [r7, #16]
 800587c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005880:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005888:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	695b      	ldr	r3, [r3, #20]
 800588e:	693a      	ldr	r2, [r7, #16]
 8005890:	4313      	orrs	r3, r2
 8005892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685a      	ldr	r2, [r3, #4]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	697a      	ldr	r2, [r7, #20]
 80058b6:	621a      	str	r2, [r3, #32]
}
 80058b8:	bf00      	nop
 80058ba:	371c      	adds	r7, #28
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr
 80058c4:	40010000 	.word	0x40010000
 80058c8:	40010400 	.word	0x40010400

080058cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b087      	sub	sp, #28
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
 80058d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a1b      	ldr	r3, [r3, #32]
 80058da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a1b      	ldr	r3, [r3, #32]
 80058e0:	f023 0210 	bic.w	r2, r3, #16
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	699b      	ldr	r3, [r3, #24]
 80058f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80058fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	021b      	lsls	r3, r3, #8
 800590a:	68fa      	ldr	r2, [r7, #12]
 800590c:	4313      	orrs	r3, r2
 800590e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005910:	697b      	ldr	r3, [r7, #20]
 8005912:	f023 0320 	bic.w	r3, r3, #32
 8005916:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	689b      	ldr	r3, [r3, #8]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	697a      	ldr	r2, [r7, #20]
 8005920:	4313      	orrs	r3, r2
 8005922:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a22      	ldr	r2, [pc, #136]	@ (80059b0 <TIM_OC2_SetConfig+0xe4>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d003      	beq.n	8005934 <TIM_OC2_SetConfig+0x68>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	4a21      	ldr	r2, [pc, #132]	@ (80059b4 <TIM_OC2_SetConfig+0xe8>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d10d      	bne.n	8005950 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800593a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800594e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a17      	ldr	r2, [pc, #92]	@ (80059b0 <TIM_OC2_SetConfig+0xe4>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d003      	beq.n	8005960 <TIM_OC2_SetConfig+0x94>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a16      	ldr	r2, [pc, #88]	@ (80059b4 <TIM_OC2_SetConfig+0xe8>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d113      	bne.n	8005988 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005966:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800596e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	695b      	ldr	r3, [r3, #20]
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	693a      	ldr	r2, [r7, #16]
 8005978:	4313      	orrs	r3, r2
 800597a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800597c:	683b      	ldr	r3, [r7, #0]
 800597e:	699b      	ldr	r3, [r3, #24]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	693a      	ldr	r2, [r7, #16]
 800598c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	68fa      	ldr	r2, [r7, #12]
 8005992:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	697a      	ldr	r2, [r7, #20]
 80059a0:	621a      	str	r2, [r3, #32]
}
 80059a2:	bf00      	nop
 80059a4:	371c      	adds	r7, #28
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40010000 	.word	0x40010000
 80059b4:	40010400 	.word	0x40010400

080059b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
 80059c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a1b      	ldr	r3, [r3, #32]
 80059c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6a1b      	ldr	r3, [r3, #32]
 80059cc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80059e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	f023 0303 	bic.w	r3, r3, #3
 80059ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68fa      	ldr	r2, [r7, #12]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005a00:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	021b      	lsls	r3, r3, #8
 8005a08:	697a      	ldr	r2, [r7, #20]
 8005a0a:	4313      	orrs	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	4a21      	ldr	r2, [pc, #132]	@ (8005a98 <TIM_OC3_SetConfig+0xe0>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d003      	beq.n	8005a1e <TIM_OC3_SetConfig+0x66>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	4a20      	ldr	r2, [pc, #128]	@ (8005a9c <TIM_OC3_SetConfig+0xe4>)
 8005a1a:	4293      	cmp	r3, r2
 8005a1c:	d10d      	bne.n	8005a3a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a24:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	68db      	ldr	r3, [r3, #12]
 8005a2a:	021b      	lsls	r3, r3, #8
 8005a2c:	697a      	ldr	r2, [r7, #20]
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a38:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a16      	ldr	r2, [pc, #88]	@ (8005a98 <TIM_OC3_SetConfig+0xe0>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d003      	beq.n	8005a4a <TIM_OC3_SetConfig+0x92>
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	4a15      	ldr	r2, [pc, #84]	@ (8005a9c <TIM_OC3_SetConfig+0xe4>)
 8005a46:	4293      	cmp	r3, r2
 8005a48:	d113      	bne.n	8005a72 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a50:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005a58:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	011b      	lsls	r3, r3, #4
 8005a60:	693a      	ldr	r2, [r7, #16]
 8005a62:	4313      	orrs	r3, r2
 8005a64:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	011b      	lsls	r3, r3, #4
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	68fa      	ldr	r2, [r7, #12]
 8005a7c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685a      	ldr	r2, [r3, #4]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	697a      	ldr	r2, [r7, #20]
 8005a8a:	621a      	str	r2, [r3, #32]
}
 8005a8c:	bf00      	nop
 8005a8e:	371c      	adds	r7, #28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr
 8005a98:	40010000 	.word	0x40010000
 8005a9c:	40010400 	.word	0x40010400

08005aa0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b087      	sub	sp, #28
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	6a1b      	ldr	r3, [r3, #32]
 8005aae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6a1b      	ldr	r3, [r3, #32]
 8005ab4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	69db      	ldr	r3, [r3, #28]
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005ace:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	021b      	lsls	r3, r3, #8
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005aea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	689b      	ldr	r3, [r3, #8]
 8005af0:	031b      	lsls	r3, r3, #12
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	4a12      	ldr	r2, [pc, #72]	@ (8005b44 <TIM_OC4_SetConfig+0xa4>)
 8005afc:	4293      	cmp	r3, r2
 8005afe:	d003      	beq.n	8005b08 <TIM_OC4_SetConfig+0x68>
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4a11      	ldr	r2, [pc, #68]	@ (8005b48 <TIM_OC4_SetConfig+0xa8>)
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d109      	bne.n	8005b1c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005b0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	695b      	ldr	r3, [r3, #20]
 8005b14:	019b      	lsls	r3, r3, #6
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	697a      	ldr	r2, [r7, #20]
 8005b20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	68fa      	ldr	r2, [r7, #12]
 8005b26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685a      	ldr	r2, [r3, #4]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	693a      	ldr	r2, [r7, #16]
 8005b34:	621a      	str	r2, [r3, #32]
}
 8005b36:	bf00      	nop
 8005b38:	371c      	adds	r7, #28
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
 8005b42:	bf00      	nop
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	6a1b      	ldr	r3, [r3, #32]
 8005b62:	f023 0201 	bic.w	r2, r3, #1
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	699b      	ldr	r3, [r3, #24]
 8005b6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b70:	693b      	ldr	r3, [r7, #16]
 8005b72:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	693a      	ldr	r2, [r7, #16]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f023 030a 	bic.w	r3, r3, #10
 8005b88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	693a      	ldr	r2, [r7, #16]
 8005b96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	697a      	ldr	r2, [r7, #20]
 8005b9c:	621a      	str	r2, [r3, #32]
}
 8005b9e:	bf00      	nop
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr

08005baa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005baa:	b480      	push	{r7}
 8005bac:	b087      	sub	sp, #28
 8005bae:	af00      	add	r7, sp, #0
 8005bb0:	60f8      	str	r0, [r7, #12]
 8005bb2:	60b9      	str	r1, [r7, #8]
 8005bb4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6a1b      	ldr	r3, [r3, #32]
 8005bba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	6a1b      	ldr	r3, [r3, #32]
 8005bc0:	f023 0210 	bic.w	r2, r3, #16
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005bce:	693b      	ldr	r3, [r7, #16]
 8005bd0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005bd4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	031b      	lsls	r3, r3, #12
 8005bda:	693a      	ldr	r2, [r7, #16]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005be6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	011b      	lsls	r3, r3, #4
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	693a      	ldr	r2, [r7, #16]
 8005bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	697a      	ldr	r2, [r7, #20]
 8005bfc:	621a      	str	r2, [r3, #32]
}
 8005bfe:	bf00      	nop
 8005c00:	371c      	adds	r7, #28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c08:	4770      	bx	lr

08005c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005c0a:	b480      	push	{r7}
 8005c0c:	b085      	sub	sp, #20
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
 8005c12:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c20:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005c22:	683a      	ldr	r2, [r7, #0]
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	f043 0307 	orr.w	r3, r3, #7
 8005c2c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68fa      	ldr	r2, [r7, #12]
 8005c32:	609a      	str	r2, [r3, #8]
}
 8005c34:	bf00      	nop
 8005c36:	3714      	adds	r7, #20
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c40:	b480      	push	{r7}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
 8005c4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005c5a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	021a      	lsls	r2, r3, #8
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	431a      	orrs	r2, r3
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	4313      	orrs	r3, r2
 8005c6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	697a      	ldr	r2, [r7, #20]
 8005c72:	609a      	str	r2, [r3, #8]
}
 8005c74:	bf00      	nop
 8005c76:	371c      	adds	r7, #28
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b087      	sub	sp, #28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	60f8      	str	r0, [r7, #12]
 8005c88:	60b9      	str	r1, [r7, #8]
 8005c8a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	f003 031f 	and.w	r3, r3, #31
 8005c92:	2201      	movs	r2, #1
 8005c94:	fa02 f303 	lsl.w	r3, r2, r3
 8005c98:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1a      	ldr	r2, [r3, #32]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	43db      	mvns	r3, r3
 8005ca2:	401a      	ands	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a1a      	ldr	r2, [r3, #32]
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	f003 031f 	and.w	r3, r3, #31
 8005cb2:	6879      	ldr	r1, [r7, #4]
 8005cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
}
 8005cbe:	bf00      	nop
 8005cc0:	371c      	adds	r7, #28
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
	...

08005ccc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d101      	bne.n	8005ce4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	e05a      	b.n	8005d9a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	689b      	ldr	r3, [r3, #8]
 8005d02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	68fa      	ldr	r2, [r7, #12]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a21      	ldr	r2, [pc, #132]	@ (8005da8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d022      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d30:	d01d      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	4a1d      	ldr	r2, [pc, #116]	@ (8005dac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d018      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a1b      	ldr	r2, [pc, #108]	@ (8005db0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d013      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	4a1a      	ldr	r2, [pc, #104]	@ (8005db4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d4c:	4293      	cmp	r3, r2
 8005d4e:	d00e      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	4a18      	ldr	r2, [pc, #96]	@ (8005db8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d56:	4293      	cmp	r3, r2
 8005d58:	d009      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a17      	ldr	r2, [pc, #92]	@ (8005dbc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d004      	beq.n	8005d6e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	4a15      	ldr	r2, [pc, #84]	@ (8005dc0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d10c      	bne.n	8005d88 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005d74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	68ba      	ldr	r2, [r7, #8]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	68ba      	ldr	r2, [r7, #8]
 8005d86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005d98:	2300      	movs	r3, #0
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3714      	adds	r7, #20
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	bf00      	nop
 8005da8:	40010000 	.word	0x40010000
 8005dac:	40000400 	.word	0x40000400
 8005db0:	40000800 	.word	0x40000800
 8005db4:	40000c00 	.word	0x40000c00
 8005db8:	40010400 	.word	0x40010400
 8005dbc:	40014000 	.word	0x40014000
 8005dc0:	40001800 	.word	0x40001800

08005dc4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005dc4:	b480      	push	{r7}
 8005dc6:	b085      	sub	sp, #20
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
 8005dcc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005dce:	2300      	movs	r3, #0
 8005dd0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d101      	bne.n	8005de0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ddc:	2302      	movs	r3, #2
 8005dde:	e03d      	b.n	8005e5c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2201      	movs	r2, #1
 8005de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	68db      	ldr	r3, [r3, #12]
 8005df2:	4313      	orrs	r3, r2
 8005df4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	4313      	orrs	r3, r2
 8005e02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005e0a:	683b      	ldr	r3, [r7, #0]
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	695b      	ldr	r3, [r3, #20]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	69db      	ldr	r3, [r3, #28]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e5a:	2300      	movs	r3, #0
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	3714      	adds	r7, #20
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b082      	sub	sp, #8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e042      	b.n	8005f00 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005e80:	b2db      	uxtb	r3, r3
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d106      	bne.n	8005e94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fc fc68 	bl	8002764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2224      	movs	r2, #36	@ 0x24
 8005e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	68da      	ldr	r2, [r3, #12]
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005eaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f000 fea1 	bl	8006bf4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	691a      	ldr	r2, [r3, #16]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005ec0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695a      	ldr	r2, [r3, #20]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005ed0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68da      	ldr	r2, [r3, #12]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005ee0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2220      	movs	r2, #32
 8005eec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2200      	movs	r2, #0
 8005efc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005efe:	2300      	movs	r3, #0
}
 8005f00:	4618      	mov	r0, r3
 8005f02:	3708      	adds	r7, #8
 8005f04:	46bd      	mov	sp, r7
 8005f06:	bd80      	pop	{r7, pc}

08005f08 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b08c      	sub	sp, #48	@ 0x30
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	60f8      	str	r0, [r7, #12]
 8005f10:	60b9      	str	r1, [r7, #8]
 8005f12:	4613      	mov	r3, r2
 8005f14:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	2b20      	cmp	r3, #32
 8005f20:	d14a      	bne.n	8005fb8 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d002      	beq.n	8005f2e <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8005f28:	88fb      	ldrh	r3, [r7, #6]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e043      	b.n	8005fba <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2201      	movs	r2, #1
 8005f36:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8005f3e:	88fb      	ldrh	r3, [r7, #6]
 8005f40:	461a      	mov	r2, r3
 8005f42:	68b9      	ldr	r1, [r7, #8]
 8005f44:	68f8      	ldr	r0, [r7, #12]
 8005f46:	f000 fbf5 	bl	8006734 <UART_Start_Receive_DMA>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005f50:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d12c      	bne.n	8005fb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d125      	bne.n	8005fac <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f60:	2300      	movs	r3, #0
 8005f62:	613b      	str	r3, [r7, #16]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	613b      	str	r3, [r7, #16]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	685b      	ldr	r3, [r3, #4]
 8005f72:	613b      	str	r3, [r7, #16]
 8005f74:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	330c      	adds	r3, #12
 8005f7c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7e:	69bb      	ldr	r3, [r7, #24]
 8005f80:	e853 3f00 	ldrex	r3, [r3]
 8005f84:	617b      	str	r3, [r7, #20]
   return(result);
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f043 0310 	orr.w	r3, r3, #16
 8005f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	330c      	adds	r3, #12
 8005f94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005f96:	627a      	str	r2, [r7, #36]	@ 0x24
 8005f98:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f9a:	6a39      	ldr	r1, [r7, #32]
 8005f9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f9e:	e841 2300 	strex	r3, r2, [r1]
 8005fa2:	61fb      	str	r3, [r7, #28]
   return(result);
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d1e5      	bne.n	8005f76 <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8005faa:	e002      	b.n	8005fb2 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8005fb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005fb6:	e000      	b.n	8005fba <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8005fb8:	2302      	movs	r3, #2
  }
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3730      	adds	r7, #48	@ 0x30
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b0ba      	sub	sp, #232	@ 0xe8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	695b      	ldr	r3, [r3, #20]
 8005fe6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ff6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ffa:	f003 030f 	and.w	r3, r3, #15
 8005ffe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8006002:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10f      	bne.n	800602a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800600a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d009      	beq.n	800602a <HAL_UART_IRQHandler+0x66>
 8006016:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fd27 	bl	8006a76 <UART_Receive_IT>
      return;
 8006028:	e25b      	b.n	80064e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800602a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80de 	beq.w	80061f0 <HAL_UART_IRQHandler+0x22c>
 8006034:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006038:	f003 0301 	and.w	r3, r3, #1
 800603c:	2b00      	cmp	r3, #0
 800603e:	d106      	bne.n	800604e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006044:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 80d1 	beq.w	80061f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800604e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <HAL_UART_IRQHandler+0xae>
 800605a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800605e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800606a:	f043 0201 	orr.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006076:	f003 0304 	and.w	r3, r3, #4
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00b      	beq.n	8006096 <HAL_UART_IRQHandler+0xd2>
 800607e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006082:	f003 0301 	and.w	r3, r3, #1
 8006086:	2b00      	cmp	r3, #0
 8006088:	d005      	beq.n	8006096 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800608e:	f043 0202 	orr.w	r2, r3, #2
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006096:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00b      	beq.n	80060ba <HAL_UART_IRQHandler+0xf6>
 80060a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d005      	beq.n	80060ba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060b2:	f043 0204 	orr.w	r2, r3, #4
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80060ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060be:	f003 0308 	and.w	r3, r3, #8
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d011      	beq.n	80060ea <HAL_UART_IRQHandler+0x126>
 80060c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80060ca:	f003 0320 	and.w	r3, r3, #32
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d105      	bne.n	80060de <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80060d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d005      	beq.n	80060ea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060e2:	f043 0208 	orr.w	r2, r3, #8
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f000 81f2 	beq.w	80064d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060f8:	f003 0320 	and.w	r3, r3, #32
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d008      	beq.n	8006112 <HAL_UART_IRQHandler+0x14e>
 8006100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006104:	f003 0320 	and.w	r3, r3, #32
 8006108:	2b00      	cmp	r3, #0
 800610a:	d002      	beq.n	8006112 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f000 fcb2 	bl	8006a76 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	695b      	ldr	r3, [r3, #20]
 8006118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800611c:	2b40      	cmp	r3, #64	@ 0x40
 800611e:	bf0c      	ite	eq
 8006120:	2301      	moveq	r3, #1
 8006122:	2300      	movne	r3, #0
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612e:	f003 0308 	and.w	r3, r3, #8
 8006132:	2b00      	cmp	r3, #0
 8006134:	d103      	bne.n	800613e <HAL_UART_IRQHandler+0x17a>
 8006136:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800613a:	2b00      	cmp	r3, #0
 800613c:	d04f      	beq.n	80061de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800613e:	6878      	ldr	r0, [r7, #4]
 8006140:	f000 fbba 	bl	80068b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	695b      	ldr	r3, [r3, #20]
 800614a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800614e:	2b40      	cmp	r3, #64	@ 0x40
 8006150:	d141      	bne.n	80061d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3314      	adds	r3, #20
 8006158:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800615c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006160:	e853 3f00 	ldrex	r3, [r3]
 8006164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006168:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800616c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006170:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	3314      	adds	r3, #20
 800617a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800617e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006182:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800618a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800618e:	e841 2300 	strex	r3, r2, [r1]
 8006192:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006196:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d1d9      	bne.n	8006152 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d013      	beq.n	80061ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061aa:	4a7e      	ldr	r2, [pc, #504]	@ (80063a4 <HAL_UART_IRQHandler+0x3e0>)
 80061ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061b2:	4618      	mov	r0, r3
 80061b4:	f7fd fbda 	bl	800396c <HAL_DMA_Abort_IT>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d016      	beq.n	80061ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80061c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80061c4:	687a      	ldr	r2, [r7, #4]
 80061c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80061c8:	4610      	mov	r0, r2
 80061ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061cc:	e00e      	b.n	80061ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 f9a8 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d4:	e00a      	b.n	80061ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f9a4 	bl	8006524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061dc:	e006      	b.n	80061ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f000 f9a0 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80061ea:	e175      	b.n	80064d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061ec:	bf00      	nop
    return;
 80061ee:	e173      	b.n	80064d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	f040 814f 	bne.w	8006498 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80061fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80061fe:	f003 0310 	and.w	r3, r3, #16
 8006202:	2b00      	cmp	r3, #0
 8006204:	f000 8148 	beq.w	8006498 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006208:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b00      	cmp	r3, #0
 8006212:	f000 8141 	beq.w	8006498 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006216:	2300      	movs	r3, #0
 8006218:	60bb      	str	r3, [r7, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	60bb      	str	r3, [r7, #8]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	685b      	ldr	r3, [r3, #4]
 8006228:	60bb      	str	r3, [r7, #8]
 800622a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	695b      	ldr	r3, [r3, #20]
 8006232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006236:	2b40      	cmp	r3, #64	@ 0x40
 8006238:	f040 80b6 	bne.w	80063a8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006248:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8145 	beq.w	80064dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800625a:	429a      	cmp	r2, r3
 800625c:	f080 813e 	bcs.w	80064dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006266:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800626c:	69db      	ldr	r3, [r3, #28]
 800626e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006272:	f000 8088 	beq.w	8006386 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	330c      	adds	r3, #12
 800627c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006280:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006284:	e853 3f00 	ldrex	r3, [r3]
 8006288:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800628c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006290:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006294:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	330c      	adds	r3, #12
 800629e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80062a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80062a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80062ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80062ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1d9      	bne.n	8006276 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	3314      	adds	r3, #20
 80062c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80062cc:	e853 3f00 	ldrex	r3, [r3]
 80062d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80062d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80062d4:	f023 0301 	bic.w	r3, r3, #1
 80062d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	3314      	adds	r3, #20
 80062e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80062e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80062ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80062ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80062f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e1      	bne.n	80062c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3314      	adds	r3, #20
 8006304:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800630e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006310:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006314:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3314      	adds	r3, #20
 800631e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006322:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006324:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006328:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006330:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e3      	bne.n	80062fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	2220      	movs	r2, #32
 800633a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2200      	movs	r2, #0
 8006342:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	330c      	adds	r3, #12
 800634a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800634e:	e853 3f00 	ldrex	r3, [r3]
 8006352:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006354:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006356:	f023 0310 	bic.w	r3, r3, #16
 800635a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	330c      	adds	r3, #12
 8006364:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006368:	65ba      	str	r2, [r7, #88]	@ 0x58
 800636a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800636c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800636e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006370:	e841 2300 	strex	r3, r2, [r1]
 8006374:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006376:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1e3      	bne.n	8006344 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006380:	4618      	mov	r0, r3
 8006382:	f7fd fa83 	bl	800388c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2202      	movs	r2, #2
 800638a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006394:	b29b      	uxth	r3, r3
 8006396:	1ad3      	subs	r3, r2, r3
 8006398:	b29b      	uxth	r3, r3
 800639a:	4619      	mov	r1, r3
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f7fa f8a7 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063a2:	e09b      	b.n	80064dc <HAL_UART_IRQHandler+0x518>
 80063a4:	0800697f 	.word	0x0800697f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063b0:	b29b      	uxth	r3, r3
 80063b2:	1ad3      	subs	r3, r2, r3
 80063b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80063bc:	b29b      	uxth	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 808e 	beq.w	80064e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80063c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 8089 	beq.w	80064e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	330c      	adds	r3, #12
 80063d4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80063d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d8:	e853 3f00 	ldrex	r3, [r3]
 80063dc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80063de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80063e4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	330c      	adds	r3, #12
 80063ee:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80063f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80063f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063f6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80063f8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80063fa:	e841 2300 	strex	r3, r2, [r1]
 80063fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006400:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006402:	2b00      	cmp	r3, #0
 8006404:	d1e3      	bne.n	80063ce <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3314      	adds	r3, #20
 800640c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	e853 3f00 	ldrex	r3, [r3]
 8006414:	623b      	str	r3, [r7, #32]
   return(result);
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	f023 0301 	bic.w	r3, r3, #1
 800641c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	3314      	adds	r3, #20
 8006426:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800642a:	633a      	str	r2, [r7, #48]	@ 0x30
 800642c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800642e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006430:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006432:	e841 2300 	strex	r3, r2, [r1]
 8006436:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	2b00      	cmp	r3, #0
 800643c:	d1e3      	bne.n	8006406 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2220      	movs	r2, #32
 8006442:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	330c      	adds	r3, #12
 8006452:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	e853 3f00 	ldrex	r3, [r3]
 800645a:	60fb      	str	r3, [r7, #12]
   return(result);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	f023 0310 	bic.w	r3, r3, #16
 8006462:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	330c      	adds	r3, #12
 800646c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006470:	61fa      	str	r2, [r7, #28]
 8006472:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006474:	69b9      	ldr	r1, [r7, #24]
 8006476:	69fa      	ldr	r2, [r7, #28]
 8006478:	e841 2300 	strex	r3, r2, [r1]
 800647c:	617b      	str	r3, [r7, #20]
   return(result);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d1e3      	bne.n	800644c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2202      	movs	r2, #2
 8006488:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800648a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800648e:	4619      	mov	r1, r3
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f7fa f82d 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006496:	e023      	b.n	80064e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006498:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800649c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d009      	beq.n	80064b8 <HAL_UART_IRQHandler+0x4f4>
 80064a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 fa78 	bl	80069a6 <UART_Transmit_IT>
    return;
 80064b6:	e014      	b.n	80064e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80064b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d00e      	beq.n	80064e2 <HAL_UART_IRQHandler+0x51e>
 80064c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d008      	beq.n	80064e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80064d0:	6878      	ldr	r0, [r7, #4]
 80064d2:	f000 fab8 	bl	8006a46 <UART_EndTransmit_IT>
    return;
 80064d6:	e004      	b.n	80064e2 <HAL_UART_IRQHandler+0x51e>
    return;
 80064d8:	bf00      	nop
 80064da:	e002      	b.n	80064e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80064dc:	bf00      	nop
 80064de:	e000      	b.n	80064e2 <HAL_UART_IRQHandler+0x51e>
      return;
 80064e0:	bf00      	nop
  }
}
 80064e2:	37e8      	adds	r7, #232	@ 0xe8
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b083      	sub	sp, #12
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80064f0:	bf00      	nop
 80064f2:	370c      	adds	r7, #12
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr

080064fc <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b083      	sub	sp, #12
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8006504:	bf00      	nop
 8006506:	370c      	adds	r7, #12
 8006508:	46bd      	mov	sp, r7
 800650a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650e:	4770      	bx	lr

08006510 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006510:	b480      	push	{r7}
 8006512:	b083      	sub	sp, #12
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006518:	bf00      	nop
 800651a:	370c      	adds	r7, #12
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr

08006524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800652c:	bf00      	nop
 800652e:	370c      	adds	r7, #12
 8006530:	46bd      	mov	sp, r7
 8006532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006536:	4770      	bx	lr

08006538 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b09c      	sub	sp, #112	@ 0x70
 800653c:	af00      	add	r7, sp, #0
 800653e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006544:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006550:	2b00      	cmp	r3, #0
 8006552:	d172      	bne.n	800663a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006554:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006556:	2200      	movs	r2, #0
 8006558:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800655a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	330c      	adds	r3, #12
 8006560:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006564:	e853 3f00 	ldrex	r3, [r3]
 8006568:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800656a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800656c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006570:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006572:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	330c      	adds	r3, #12
 8006578:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800657a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800657c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800657e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006580:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006582:	e841 2300 	strex	r3, r2, [r1]
 8006586:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006588:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800658a:	2b00      	cmp	r3, #0
 800658c:	d1e5      	bne.n	800655a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800658e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3314      	adds	r3, #20
 8006594:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800659e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065a0:	f023 0301 	bic.w	r3, r3, #1
 80065a4:	667b      	str	r3, [r7, #100]	@ 0x64
 80065a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3314      	adds	r3, #20
 80065ac:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80065ae:	647a      	str	r2, [r7, #68]	@ 0x44
 80065b0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80065b4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80065bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e5      	bne.n	800658e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	3314      	adds	r3, #20
 80065c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	e853 3f00 	ldrex	r3, [r3]
 80065d0:	623b      	str	r3, [r7, #32]
   return(result);
 80065d2:	6a3b      	ldr	r3, [r7, #32]
 80065d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80065da:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	3314      	adds	r3, #20
 80065e0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80065e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80065e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ea:	e841 2300 	strex	r3, r2, [r1]
 80065ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d1e5      	bne.n	80065c2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80065f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80065f8:	2220      	movs	r2, #32
 80065fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065fe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006602:	2b01      	cmp	r3, #1
 8006604:	d119      	bne.n	800663a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006606:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	330c      	adds	r3, #12
 800660c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	e853 3f00 	ldrex	r3, [r3]
 8006614:	60fb      	str	r3, [r7, #12]
   return(result);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f023 0310 	bic.w	r3, r3, #16
 800661c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800661e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	330c      	adds	r3, #12
 8006624:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006626:	61fa      	str	r2, [r7, #28]
 8006628:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662a:	69b9      	ldr	r1, [r7, #24]
 800662c:	69fa      	ldr	r2, [r7, #28]
 800662e:	e841 2300 	strex	r3, r2, [r1]
 8006632:	617b      	str	r3, [r7, #20]
   return(result);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d1e5      	bne.n	8006606 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800663a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800663c:	2200      	movs	r2, #0
 800663e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006640:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006644:	2b01      	cmp	r3, #1
 8006646:	d106      	bne.n	8006656 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006648:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800664a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800664c:	4619      	mov	r1, r3
 800664e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006650:	f7f9 ff4e 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006654:	e002      	b.n	800665c <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006656:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006658:	f7ff ff50 	bl	80064fc <HAL_UART_RxCpltCallback>
}
 800665c:	bf00      	nop
 800665e:	3770      	adds	r7, #112	@ 0x70
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}

08006664 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006670:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2201      	movs	r2, #1
 8006676:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800667c:	2b01      	cmp	r3, #1
 800667e:	d108      	bne.n	8006692 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006684:	085b      	lsrs	r3, r3, #1
 8006686:	b29b      	uxth	r3, r3
 8006688:	4619      	mov	r1, r3
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f7f9 ff30 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006690:	e002      	b.n	8006698 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8006692:	68f8      	ldr	r0, [r7, #12]
 8006694:	f7ff ff3c 	bl	8006510 <HAL_UART_RxHalfCpltCallback>
}
 8006698:	bf00      	nop
 800669a:	3710      	adds	r7, #16
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}

080066a0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80066a8:	2300      	movs	r3, #0
 80066aa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066b0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80066b2:	68bb      	ldr	r3, [r7, #8]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695b      	ldr	r3, [r3, #20]
 80066b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80066bc:	2b80      	cmp	r3, #128	@ 0x80
 80066be:	bf0c      	ite	eq
 80066c0:	2301      	moveq	r3, #1
 80066c2:	2300      	movne	r3, #0
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ce:	b2db      	uxtb	r3, r3
 80066d0:	2b21      	cmp	r3, #33	@ 0x21
 80066d2:	d108      	bne.n	80066e6 <UART_DMAError+0x46>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d005      	beq.n	80066e6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	2200      	movs	r2, #0
 80066de:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80066e0:	68b8      	ldr	r0, [r7, #8]
 80066e2:	f000 f8c1 	bl	8006868 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066f0:	2b40      	cmp	r3, #64	@ 0x40
 80066f2:	bf0c      	ite	eq
 80066f4:	2301      	moveq	r3, #1
 80066f6:	2300      	movne	r3, #0
 80066f8:	b2db      	uxtb	r3, r3
 80066fa:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006702:	b2db      	uxtb	r3, r3
 8006704:	2b22      	cmp	r3, #34	@ 0x22
 8006706:	d108      	bne.n	800671a <UART_DMAError+0x7a>
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d005      	beq.n	800671a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	2200      	movs	r2, #0
 8006712:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006714:	68b8      	ldr	r0, [r7, #8]
 8006716:	f000 f8cf 	bl	80068b8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800671e:	f043 0210 	orr.w	r2, r3, #16
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006726:	68b8      	ldr	r0, [r7, #8]
 8006728:	f7ff fefc 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800672c:	bf00      	nop
 800672e:	3710      	adds	r7, #16
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b098      	sub	sp, #96	@ 0x60
 8006738:	af00      	add	r7, sp, #0
 800673a:	60f8      	str	r0, [r7, #12]
 800673c:	60b9      	str	r1, [r7, #8]
 800673e:	4613      	mov	r3, r2
 8006740:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006742:	68ba      	ldr	r2, [r7, #8]
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	88fa      	ldrh	r2, [r7, #6]
 800674c:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2222      	movs	r2, #34	@ 0x22
 8006758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006760:	4a3e      	ldr	r2, [pc, #248]	@ (800685c <UART_Start_Receive_DMA+0x128>)
 8006762:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006768:	4a3d      	ldr	r2, [pc, #244]	@ (8006860 <UART_Start_Receive_DMA+0x12c>)
 800676a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006770:	4a3c      	ldr	r2, [pc, #240]	@ (8006864 <UART_Start_Receive_DMA+0x130>)
 8006772:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006778:	2200      	movs	r2, #0
 800677a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800677c:	f107 0308 	add.w	r3, r7, #8
 8006780:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006790:	681a      	ldr	r2, [r3, #0]
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	f7fd f822 	bl	80037dc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006798:	2300      	movs	r3, #0
 800679a:	613b      	str	r3, [r7, #16]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	613b      	str	r3, [r7, #16]
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	613b      	str	r3, [r7, #16]
 80067ac:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d019      	beq.n	80067ea <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	330c      	adds	r3, #12
 80067bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80067c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80067c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80067cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	330c      	adds	r3, #12
 80067d4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80067d6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80067d8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80067dc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80067e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3314      	adds	r3, #20
 80067f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80067fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067fc:	f043 0301 	orr.w	r3, r3, #1
 8006800:	657b      	str	r3, [r7, #84]	@ 0x54
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	3314      	adds	r3, #20
 8006808:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800680a:	63ba      	str	r2, [r7, #56]	@ 0x38
 800680c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800680e:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006810:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006812:	e841 2300 	strex	r3, r2, [r1]
 8006816:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	2b00      	cmp	r3, #0
 800681c:	d1e5      	bne.n	80067ea <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	3314      	adds	r3, #20
 8006824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006826:	69bb      	ldr	r3, [r7, #24]
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	617b      	str	r3, [r7, #20]
   return(result);
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006834:	653b      	str	r3, [r7, #80]	@ 0x50
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	3314      	adds	r3, #20
 800683c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800683e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006840:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006842:	6a39      	ldr	r1, [r7, #32]
 8006844:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006846:	e841 2300 	strex	r3, r2, [r1]
 800684a:	61fb      	str	r3, [r7, #28]
   return(result);
 800684c:	69fb      	ldr	r3, [r7, #28]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d1e5      	bne.n	800681e <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3760      	adds	r7, #96	@ 0x60
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}
 800685c:	08006539 	.word	0x08006539
 8006860:	08006665 	.word	0x08006665
 8006864:	080066a1 	.word	0x080066a1

08006868 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006868:	b480      	push	{r7}
 800686a:	b089      	sub	sp, #36	@ 0x24
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	330c      	adds	r3, #12
 8006876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	e853 3f00 	ldrex	r3, [r3]
 800687e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006886:	61fb      	str	r3, [r7, #28]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	330c      	adds	r3, #12
 800688e:	69fa      	ldr	r2, [r7, #28]
 8006890:	61ba      	str	r2, [r7, #24]
 8006892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006894:	6979      	ldr	r1, [r7, #20]
 8006896:	69ba      	ldr	r2, [r7, #24]
 8006898:	e841 2300 	strex	r3, r2, [r1]
 800689c:	613b      	str	r3, [r7, #16]
   return(result);
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d1e5      	bne.n	8006870 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2220      	movs	r2, #32
 80068a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80068ac:	bf00      	nop
 80068ae:	3724      	adds	r7, #36	@ 0x24
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b095      	sub	sp, #84	@ 0x54
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	330c      	adds	r3, #12
 80068c6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ca:	e853 3f00 	ldrex	r3, [r3]
 80068ce:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80068d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80068d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	330c      	adds	r3, #12
 80068de:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80068e0:	643a      	str	r2, [r7, #64]	@ 0x40
 80068e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80068e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80068e8:	e841 2300 	strex	r3, r2, [r1]
 80068ec:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80068ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1e5      	bne.n	80068c0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	3314      	adds	r3, #20
 80068fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6a3b      	ldr	r3, [r7, #32]
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	61fb      	str	r3, [r7, #28]
   return(result);
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	f023 0301 	bic.w	r3, r3, #1
 800690a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	3314      	adds	r3, #20
 8006912:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006914:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006916:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006918:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800691a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800691c:	e841 2300 	strex	r3, r2, [r1]
 8006920:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006924:	2b00      	cmp	r3, #0
 8006926:	d1e5      	bne.n	80068f4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800692c:	2b01      	cmp	r3, #1
 800692e:	d119      	bne.n	8006964 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	330c      	adds	r3, #12
 8006936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	e853 3f00 	ldrex	r3, [r3]
 800693e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f023 0310 	bic.w	r3, r3, #16
 8006946:	647b      	str	r3, [r7, #68]	@ 0x44
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	330c      	adds	r3, #12
 800694e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006950:	61ba      	str	r2, [r7, #24]
 8006952:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6979      	ldr	r1, [r7, #20]
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	613b      	str	r3, [r7, #16]
   return(result);
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e5      	bne.n	8006930 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006972:	bf00      	nop
 8006974:	3754      	adds	r7, #84	@ 0x54
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr

0800697e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800697e:	b580      	push	{r7, lr}
 8006980:	b084      	sub	sp, #16
 8006982:	af00      	add	r7, sp, #0
 8006984:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800698a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2200      	movs	r2, #0
 8006996:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006998:	68f8      	ldr	r0, [r7, #12]
 800699a:	f7ff fdc3 	bl	8006524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800699e:	bf00      	nop
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b085      	sub	sp, #20
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b21      	cmp	r3, #33	@ 0x21
 80069b8:	d13e      	bne.n	8006a38 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80069c2:	d114      	bne.n	80069ee <UART_Transmit_IT+0x48>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d110      	bne.n	80069ee <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a1b      	ldr	r3, [r3, #32]
 80069d0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	881b      	ldrh	r3, [r3, #0]
 80069d6:	461a      	mov	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069e0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	1c9a      	adds	r2, r3, #2
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	621a      	str	r2, [r3, #32]
 80069ec:	e008      	b.n	8006a00 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	1c59      	adds	r1, r3, #1
 80069f4:	687a      	ldr	r2, [r7, #4]
 80069f6:	6211      	str	r1, [r2, #32]
 80069f8:	781a      	ldrb	r2, [r3, #0]
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29b      	uxth	r3, r3
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d10f      	bne.n	8006a34 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	68da      	ldr	r2, [r3, #12]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006a22:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68da      	ldr	r2, [r3, #12]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006a32:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006a34:	2300      	movs	r3, #0
 8006a36:	e000      	b.n	8006a3a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a38:	2302      	movs	r3, #2
  }
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006a46:	b580      	push	{r7, lr}
 8006a48:	b082      	sub	sp, #8
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	68da      	ldr	r2, [r3, #12]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a5c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2220      	movs	r2, #32
 8006a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f7ff fd3e 	bl	80064e8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3708      	adds	r7, #8
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}

08006a76 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b08c      	sub	sp, #48	@ 0x30
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	2b22      	cmp	r3, #34	@ 0x22
 8006a88:	f040 80ae 	bne.w	8006be8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a94:	d117      	bne.n	8006ac6 <UART_Receive_IT+0x50>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	691b      	ldr	r3, [r3, #16]
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d113      	bne.n	8006ac6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	b29b      	uxth	r3, r3
 8006ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ab8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006abe:	1c9a      	adds	r2, r3, #2
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	629a      	str	r2, [r3, #40]	@ 0x28
 8006ac4:	e026      	b.n	8006b14 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006acc:	2300      	movs	r3, #0
 8006ace:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	689b      	ldr	r3, [r3, #8]
 8006ad4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006ad8:	d007      	beq.n	8006aea <UART_Receive_IT+0x74>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	689b      	ldr	r3, [r3, #8]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d10a      	bne.n	8006af8 <UART_Receive_IT+0x82>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	691b      	ldr	r3, [r3, #16]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d106      	bne.n	8006af8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	685b      	ldr	r3, [r3, #4]
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006af4:	701a      	strb	r2, [r3, #0]
 8006af6:	e008      	b.n	8006b0a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	b2db      	uxtb	r3, r3
 8006b00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006b04:	b2da      	uxtb	r2, r3
 8006b06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b08:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0e:	1c5a      	adds	r2, r3, #1
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	3b01      	subs	r3, #1
 8006b1c:	b29b      	uxth	r3, r3
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	4619      	mov	r1, r3
 8006b22:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d15d      	bne.n	8006be4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68da      	ldr	r2, [r3, #12]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 0220 	bic.w	r2, r2, #32
 8006b36:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	68da      	ldr	r2, [r3, #12]
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	695a      	ldr	r2, [r3, #20]
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f022 0201 	bic.w	r2, r2, #1
 8006b56:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2200      	movs	r2, #0
 8006b64:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d135      	bne.n	8006bda <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2200      	movs	r2, #0
 8006b72:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	330c      	adds	r3, #12
 8006b7a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	e853 3f00 	ldrex	r3, [r3]
 8006b82:	613b      	str	r3, [r7, #16]
   return(result);
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f023 0310 	bic.w	r3, r3, #16
 8006b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	330c      	adds	r3, #12
 8006b92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b94:	623a      	str	r2, [r7, #32]
 8006b96:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b98:	69f9      	ldr	r1, [r7, #28]
 8006b9a:	6a3a      	ldr	r2, [r7, #32]
 8006b9c:	e841 2300 	strex	r3, r2, [r1]
 8006ba0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d1e5      	bne.n	8006b74 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0310 	and.w	r3, r3, #16
 8006bb2:	2b10      	cmp	r3, #16
 8006bb4:	d10a      	bne.n	8006bcc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006bb6:	2300      	movs	r3, #0
 8006bb8:	60fb      	str	r3, [r7, #12]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	60fb      	str	r3, [r7, #12]
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	685b      	ldr	r3, [r3, #4]
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	f7f9 fc8c 	bl	80004f0 <HAL_UARTEx_RxEventCallback>
 8006bd8:	e002      	b.n	8006be0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f7ff fc8e 	bl	80064fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006be0:	2300      	movs	r3, #0
 8006be2:	e002      	b.n	8006bea <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006be4:	2300      	movs	r3, #0
 8006be6:	e000      	b.n	8006bea <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8006be8:	2302      	movs	r3, #2
  }
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3730      	adds	r7, #48	@ 0x30
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006bf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006bf8:	b0c0      	sub	sp, #256	@ 0x100
 8006bfa:	af00      	add	r7, sp, #0
 8006bfc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	691b      	ldr	r3, [r3, #16]
 8006c08:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006c0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c10:	68d9      	ldr	r1, [r3, #12]
 8006c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	ea40 0301 	orr.w	r3, r0, r1
 8006c1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c28:	691b      	ldr	r3, [r3, #16]
 8006c2a:	431a      	orrs	r2, r3
 8006c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	431a      	orrs	r2, r3
 8006c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c4c:	f021 010c 	bic.w	r1, r1, #12
 8006c50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c5a:	430b      	orrs	r3, r1
 8006c5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	695b      	ldr	r3, [r3, #20]
 8006c66:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c6e:	6999      	ldr	r1, [r3, #24]
 8006c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c74:	681a      	ldr	r2, [r3, #0]
 8006c76:	ea40 0301 	orr.w	r3, r0, r1
 8006c7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	4b8f      	ldr	r3, [pc, #572]	@ (8006ec0 <UART_SetConfig+0x2cc>)
 8006c84:	429a      	cmp	r2, r3
 8006c86:	d005      	beq.n	8006c94 <UART_SetConfig+0xa0>
 8006c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	4b8d      	ldr	r3, [pc, #564]	@ (8006ec4 <UART_SetConfig+0x2d0>)
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d104      	bne.n	8006c9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c94:	f7fe f87c 	bl	8004d90 <HAL_RCC_GetPCLK2Freq>
 8006c98:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c9c:	e003      	b.n	8006ca6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c9e:	f7fe f863 	bl	8004d68 <HAL_RCC_GetPCLK1Freq>
 8006ca2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006caa:	69db      	ldr	r3, [r3, #28]
 8006cac:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006cb0:	f040 810c 	bne.w	8006ecc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006cb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cb8:	2200      	movs	r2, #0
 8006cba:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006cbe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006cc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006cc6:	4622      	mov	r2, r4
 8006cc8:	462b      	mov	r3, r5
 8006cca:	1891      	adds	r1, r2, r2
 8006ccc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006cce:	415b      	adcs	r3, r3
 8006cd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006cd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006cd6:	4621      	mov	r1, r4
 8006cd8:	eb12 0801 	adds.w	r8, r2, r1
 8006cdc:	4629      	mov	r1, r5
 8006cde:	eb43 0901 	adc.w	r9, r3, r1
 8006ce2:	f04f 0200 	mov.w	r2, #0
 8006ce6:	f04f 0300 	mov.w	r3, #0
 8006cea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cf2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cf6:	4690      	mov	r8, r2
 8006cf8:	4699      	mov	r9, r3
 8006cfa:	4623      	mov	r3, r4
 8006cfc:	eb18 0303 	adds.w	r3, r8, r3
 8006d00:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d04:	462b      	mov	r3, r5
 8006d06:	eb49 0303 	adc.w	r3, r9, r3
 8006d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006d0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006d1a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006d1e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006d22:	460b      	mov	r3, r1
 8006d24:	18db      	adds	r3, r3, r3
 8006d26:	653b      	str	r3, [r7, #80]	@ 0x50
 8006d28:	4613      	mov	r3, r2
 8006d2a:	eb42 0303 	adc.w	r3, r2, r3
 8006d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8006d30:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006d34:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006d38:	f7f9 fa4a 	bl	80001d0 <__aeabi_uldivmod>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	460b      	mov	r3, r1
 8006d40:	4b61      	ldr	r3, [pc, #388]	@ (8006ec8 <UART_SetConfig+0x2d4>)
 8006d42:	fba3 2302 	umull	r2, r3, r3, r2
 8006d46:	095b      	lsrs	r3, r3, #5
 8006d48:	011c      	lsls	r4, r3, #4
 8006d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d54:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d58:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d5c:	4642      	mov	r2, r8
 8006d5e:	464b      	mov	r3, r9
 8006d60:	1891      	adds	r1, r2, r2
 8006d62:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d64:	415b      	adcs	r3, r3
 8006d66:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d68:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	eb12 0a01 	adds.w	sl, r2, r1
 8006d72:	4649      	mov	r1, r9
 8006d74:	eb43 0b01 	adc.w	fp, r3, r1
 8006d78:	f04f 0200 	mov.w	r2, #0
 8006d7c:	f04f 0300 	mov.w	r3, #0
 8006d80:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d84:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d8c:	4692      	mov	sl, r2
 8006d8e:	469b      	mov	fp, r3
 8006d90:	4643      	mov	r3, r8
 8006d92:	eb1a 0303 	adds.w	r3, sl, r3
 8006d96:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d9a:	464b      	mov	r3, r9
 8006d9c:	eb4b 0303 	adc.w	r3, fp, r3
 8006da0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da8:	685b      	ldr	r3, [r3, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006db0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006db4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006db8:	460b      	mov	r3, r1
 8006dba:	18db      	adds	r3, r3, r3
 8006dbc:	643b      	str	r3, [r7, #64]	@ 0x40
 8006dbe:	4613      	mov	r3, r2
 8006dc0:	eb42 0303 	adc.w	r3, r2, r3
 8006dc4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006dc6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006dca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006dce:	f7f9 f9ff 	bl	80001d0 <__aeabi_uldivmod>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	460b      	mov	r3, r1
 8006dd6:	4611      	mov	r1, r2
 8006dd8:	4b3b      	ldr	r3, [pc, #236]	@ (8006ec8 <UART_SetConfig+0x2d4>)
 8006dda:	fba3 2301 	umull	r2, r3, r3, r1
 8006dde:	095b      	lsrs	r3, r3, #5
 8006de0:	2264      	movs	r2, #100	@ 0x64
 8006de2:	fb02 f303 	mul.w	r3, r2, r3
 8006de6:	1acb      	subs	r3, r1, r3
 8006de8:	00db      	lsls	r3, r3, #3
 8006dea:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dee:	4b36      	ldr	r3, [pc, #216]	@ (8006ec8 <UART_SetConfig+0x2d4>)
 8006df0:	fba3 2302 	umull	r2, r3, r3, r2
 8006df4:	095b      	lsrs	r3, r3, #5
 8006df6:	005b      	lsls	r3, r3, #1
 8006df8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dfc:	441c      	add	r4, r3
 8006dfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e02:	2200      	movs	r2, #0
 8006e04:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e08:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006e0c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006e10:	4642      	mov	r2, r8
 8006e12:	464b      	mov	r3, r9
 8006e14:	1891      	adds	r1, r2, r2
 8006e16:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006e18:	415b      	adcs	r3, r3
 8006e1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006e20:	4641      	mov	r1, r8
 8006e22:	1851      	adds	r1, r2, r1
 8006e24:	6339      	str	r1, [r7, #48]	@ 0x30
 8006e26:	4649      	mov	r1, r9
 8006e28:	414b      	adcs	r3, r1
 8006e2a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e2c:	f04f 0200 	mov.w	r2, #0
 8006e30:	f04f 0300 	mov.w	r3, #0
 8006e34:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006e38:	4659      	mov	r1, fp
 8006e3a:	00cb      	lsls	r3, r1, #3
 8006e3c:	4651      	mov	r1, sl
 8006e3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e42:	4651      	mov	r1, sl
 8006e44:	00ca      	lsls	r2, r1, #3
 8006e46:	4610      	mov	r0, r2
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	4642      	mov	r2, r8
 8006e4e:	189b      	adds	r3, r3, r2
 8006e50:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e54:	464b      	mov	r3, r9
 8006e56:	460a      	mov	r2, r1
 8006e58:	eb42 0303 	adc.w	r3, r2, r3
 8006e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2200      	movs	r2, #0
 8006e68:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e6c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e70:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e74:	460b      	mov	r3, r1
 8006e76:	18db      	adds	r3, r3, r3
 8006e78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	eb42 0303 	adc.w	r3, r2, r3
 8006e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e86:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e8a:	f7f9 f9a1 	bl	80001d0 <__aeabi_uldivmod>
 8006e8e:	4602      	mov	r2, r0
 8006e90:	460b      	mov	r3, r1
 8006e92:	4b0d      	ldr	r3, [pc, #52]	@ (8006ec8 <UART_SetConfig+0x2d4>)
 8006e94:	fba3 1302 	umull	r1, r3, r3, r2
 8006e98:	095b      	lsrs	r3, r3, #5
 8006e9a:	2164      	movs	r1, #100	@ 0x64
 8006e9c:	fb01 f303 	mul.w	r3, r1, r3
 8006ea0:	1ad3      	subs	r3, r2, r3
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	3332      	adds	r3, #50	@ 0x32
 8006ea6:	4a08      	ldr	r2, [pc, #32]	@ (8006ec8 <UART_SetConfig+0x2d4>)
 8006ea8:	fba2 2303 	umull	r2, r3, r2, r3
 8006eac:	095b      	lsrs	r3, r3, #5
 8006eae:	f003 0207 	and.w	r2, r3, #7
 8006eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	4422      	add	r2, r4
 8006eba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ebc:	e106      	b.n	80070cc <UART_SetConfig+0x4d8>
 8006ebe:	bf00      	nop
 8006ec0:	40011000 	.word	0x40011000
 8006ec4:	40011400 	.word	0x40011400
 8006ec8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ecc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006ed6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006eda:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ede:	4642      	mov	r2, r8
 8006ee0:	464b      	mov	r3, r9
 8006ee2:	1891      	adds	r1, r2, r2
 8006ee4:	6239      	str	r1, [r7, #32]
 8006ee6:	415b      	adcs	r3, r3
 8006ee8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eee:	4641      	mov	r1, r8
 8006ef0:	1854      	adds	r4, r2, r1
 8006ef2:	4649      	mov	r1, r9
 8006ef4:	eb43 0501 	adc.w	r5, r3, r1
 8006ef8:	f04f 0200 	mov.w	r2, #0
 8006efc:	f04f 0300 	mov.w	r3, #0
 8006f00:	00eb      	lsls	r3, r5, #3
 8006f02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f06:	00e2      	lsls	r2, r4, #3
 8006f08:	4614      	mov	r4, r2
 8006f0a:	461d      	mov	r5, r3
 8006f0c:	4643      	mov	r3, r8
 8006f0e:	18e3      	adds	r3, r4, r3
 8006f10:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006f14:	464b      	mov	r3, r9
 8006f16:	eb45 0303 	adc.w	r3, r5, r3
 8006f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f22:	685b      	ldr	r3, [r3, #4]
 8006f24:	2200      	movs	r2, #0
 8006f26:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006f2a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006f2e:	f04f 0200 	mov.w	r2, #0
 8006f32:	f04f 0300 	mov.w	r3, #0
 8006f36:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006f3a:	4629      	mov	r1, r5
 8006f3c:	008b      	lsls	r3, r1, #2
 8006f3e:	4621      	mov	r1, r4
 8006f40:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f44:	4621      	mov	r1, r4
 8006f46:	008a      	lsls	r2, r1, #2
 8006f48:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f4c:	f7f9 f940 	bl	80001d0 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4b60      	ldr	r3, [pc, #384]	@ (80070d8 <UART_SetConfig+0x4e4>)
 8006f56:	fba3 2302 	umull	r2, r3, r3, r2
 8006f5a:	095b      	lsrs	r3, r3, #5
 8006f5c:	011c      	lsls	r4, r3, #4
 8006f5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f62:	2200      	movs	r2, #0
 8006f64:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f68:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f6c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f70:	4642      	mov	r2, r8
 8006f72:	464b      	mov	r3, r9
 8006f74:	1891      	adds	r1, r2, r2
 8006f76:	61b9      	str	r1, [r7, #24]
 8006f78:	415b      	adcs	r3, r3
 8006f7a:	61fb      	str	r3, [r7, #28]
 8006f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f80:	4641      	mov	r1, r8
 8006f82:	1851      	adds	r1, r2, r1
 8006f84:	6139      	str	r1, [r7, #16]
 8006f86:	4649      	mov	r1, r9
 8006f88:	414b      	adcs	r3, r1
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f98:	4659      	mov	r1, fp
 8006f9a:	00cb      	lsls	r3, r1, #3
 8006f9c:	4651      	mov	r1, sl
 8006f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006fa2:	4651      	mov	r1, sl
 8006fa4:	00ca      	lsls	r2, r1, #3
 8006fa6:	4610      	mov	r0, r2
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4603      	mov	r3, r0
 8006fac:	4642      	mov	r2, r8
 8006fae:	189b      	adds	r3, r3, r2
 8006fb0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006fb4:	464b      	mov	r3, r9
 8006fb6:	460a      	mov	r2, r1
 8006fb8:	eb42 0303 	adc.w	r3, r2, r3
 8006fbc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006fc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc4:	685b      	ldr	r3, [r3, #4]
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006fca:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006fcc:	f04f 0200 	mov.w	r2, #0
 8006fd0:	f04f 0300 	mov.w	r3, #0
 8006fd4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006fd8:	4649      	mov	r1, r9
 8006fda:	008b      	lsls	r3, r1, #2
 8006fdc:	4641      	mov	r1, r8
 8006fde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fe2:	4641      	mov	r1, r8
 8006fe4:	008a      	lsls	r2, r1, #2
 8006fe6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fea:	f7f9 f8f1 	bl	80001d0 <__aeabi_uldivmod>
 8006fee:	4602      	mov	r2, r0
 8006ff0:	460b      	mov	r3, r1
 8006ff2:	4611      	mov	r1, r2
 8006ff4:	4b38      	ldr	r3, [pc, #224]	@ (80070d8 <UART_SetConfig+0x4e4>)
 8006ff6:	fba3 2301 	umull	r2, r3, r3, r1
 8006ffa:	095b      	lsrs	r3, r3, #5
 8006ffc:	2264      	movs	r2, #100	@ 0x64
 8006ffe:	fb02 f303 	mul.w	r3, r2, r3
 8007002:	1acb      	subs	r3, r1, r3
 8007004:	011b      	lsls	r3, r3, #4
 8007006:	3332      	adds	r3, #50	@ 0x32
 8007008:	4a33      	ldr	r2, [pc, #204]	@ (80070d8 <UART_SetConfig+0x4e4>)
 800700a:	fba2 2303 	umull	r2, r3, r2, r3
 800700e:	095b      	lsrs	r3, r3, #5
 8007010:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007014:	441c      	add	r4, r3
 8007016:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800701a:	2200      	movs	r2, #0
 800701c:	673b      	str	r3, [r7, #112]	@ 0x70
 800701e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007020:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007024:	4642      	mov	r2, r8
 8007026:	464b      	mov	r3, r9
 8007028:	1891      	adds	r1, r2, r2
 800702a:	60b9      	str	r1, [r7, #8]
 800702c:	415b      	adcs	r3, r3
 800702e:	60fb      	str	r3, [r7, #12]
 8007030:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007034:	4641      	mov	r1, r8
 8007036:	1851      	adds	r1, r2, r1
 8007038:	6039      	str	r1, [r7, #0]
 800703a:	4649      	mov	r1, r9
 800703c:	414b      	adcs	r3, r1
 800703e:	607b      	str	r3, [r7, #4]
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800704c:	4659      	mov	r1, fp
 800704e:	00cb      	lsls	r3, r1, #3
 8007050:	4651      	mov	r1, sl
 8007052:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007056:	4651      	mov	r1, sl
 8007058:	00ca      	lsls	r2, r1, #3
 800705a:	4610      	mov	r0, r2
 800705c:	4619      	mov	r1, r3
 800705e:	4603      	mov	r3, r0
 8007060:	4642      	mov	r2, r8
 8007062:	189b      	adds	r3, r3, r2
 8007064:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007066:	464b      	mov	r3, r9
 8007068:	460a      	mov	r2, r1
 800706a:	eb42 0303 	adc.w	r3, r2, r3
 800706e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007070:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007074:	685b      	ldr	r3, [r3, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	663b      	str	r3, [r7, #96]	@ 0x60
 800707a:	667a      	str	r2, [r7, #100]	@ 0x64
 800707c:	f04f 0200 	mov.w	r2, #0
 8007080:	f04f 0300 	mov.w	r3, #0
 8007084:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007088:	4649      	mov	r1, r9
 800708a:	008b      	lsls	r3, r1, #2
 800708c:	4641      	mov	r1, r8
 800708e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007092:	4641      	mov	r1, r8
 8007094:	008a      	lsls	r2, r1, #2
 8007096:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800709a:	f7f9 f899 	bl	80001d0 <__aeabi_uldivmod>
 800709e:	4602      	mov	r2, r0
 80070a0:	460b      	mov	r3, r1
 80070a2:	4b0d      	ldr	r3, [pc, #52]	@ (80070d8 <UART_SetConfig+0x4e4>)
 80070a4:	fba3 1302 	umull	r1, r3, r3, r2
 80070a8:	095b      	lsrs	r3, r3, #5
 80070aa:	2164      	movs	r1, #100	@ 0x64
 80070ac:	fb01 f303 	mul.w	r3, r1, r3
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	011b      	lsls	r3, r3, #4
 80070b4:	3332      	adds	r3, #50	@ 0x32
 80070b6:	4a08      	ldr	r2, [pc, #32]	@ (80070d8 <UART_SetConfig+0x4e4>)
 80070b8:	fba2 2303 	umull	r2, r3, r2, r3
 80070bc:	095b      	lsrs	r3, r3, #5
 80070be:	f003 020f 	and.w	r2, r3, #15
 80070c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	4422      	add	r2, r4
 80070ca:	609a      	str	r2, [r3, #8]
}
 80070cc:	bf00      	nop
 80070ce:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80070d2:	46bd      	mov	sp, r7
 80070d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070d8:	51eb851f 	.word	0x51eb851f

080070dc <__NVIC_SetPriority>:
{
 80070dc:	b480      	push	{r7}
 80070de:	b083      	sub	sp, #12
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	4603      	mov	r3, r0
 80070e4:	6039      	str	r1, [r7, #0]
 80070e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80070e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	db0a      	blt.n	8007106 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80070f0:	683b      	ldr	r3, [r7, #0]
 80070f2:	b2da      	uxtb	r2, r3
 80070f4:	490c      	ldr	r1, [pc, #48]	@ (8007128 <__NVIC_SetPriority+0x4c>)
 80070f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070fa:	0112      	lsls	r2, r2, #4
 80070fc:	b2d2      	uxtb	r2, r2
 80070fe:	440b      	add	r3, r1
 8007100:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007104:	e00a      	b.n	800711c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	b2da      	uxtb	r2, r3
 800710a:	4908      	ldr	r1, [pc, #32]	@ (800712c <__NVIC_SetPriority+0x50>)
 800710c:	79fb      	ldrb	r3, [r7, #7]
 800710e:	f003 030f 	and.w	r3, r3, #15
 8007112:	3b04      	subs	r3, #4
 8007114:	0112      	lsls	r2, r2, #4
 8007116:	b2d2      	uxtb	r2, r2
 8007118:	440b      	add	r3, r1
 800711a:	761a      	strb	r2, [r3, #24]
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr
 8007128:	e000e100 	.word	0xe000e100
 800712c:	e000ed00 	.word	0xe000ed00

08007130 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007130:	b580      	push	{r7, lr}
 8007132:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007134:	2100      	movs	r1, #0
 8007136:	f06f 0004 	mvn.w	r0, #4
 800713a:	f7ff ffcf 	bl	80070dc <__NVIC_SetPriority>
#endif
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
	...

08007144 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800714a:	f3ef 8305 	mrs	r3, IPSR
 800714e:	603b      	str	r3, [r7, #0]
  return(result);
 8007150:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007152:	2b00      	cmp	r3, #0
 8007154:	d003      	beq.n	800715e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007156:	f06f 0305 	mvn.w	r3, #5
 800715a:	607b      	str	r3, [r7, #4]
 800715c:	e00c      	b.n	8007178 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800715e:	4b0a      	ldr	r3, [pc, #40]	@ (8007188 <osKernelInitialize+0x44>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d105      	bne.n	8007172 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007166:	4b08      	ldr	r3, [pc, #32]	@ (8007188 <osKernelInitialize+0x44>)
 8007168:	2201      	movs	r2, #1
 800716a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800716c:	2300      	movs	r3, #0
 800716e:	607b      	str	r3, [r7, #4]
 8007170:	e002      	b.n	8007178 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007172:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007176:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007178:	687b      	ldr	r3, [r7, #4]
}
 800717a:	4618      	mov	r0, r3
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
 8007186:	bf00      	nop
 8007188:	20000918 	.word	0x20000918

0800718c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007192:	f3ef 8305 	mrs	r3, IPSR
 8007196:	603b      	str	r3, [r7, #0]
  return(result);
 8007198:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800719a:	2b00      	cmp	r3, #0
 800719c:	d003      	beq.n	80071a6 <osKernelStart+0x1a>
    stat = osErrorISR;
 800719e:	f06f 0305 	mvn.w	r3, #5
 80071a2:	607b      	str	r3, [r7, #4]
 80071a4:	e010      	b.n	80071c8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80071a6:	4b0b      	ldr	r3, [pc, #44]	@ (80071d4 <osKernelStart+0x48>)
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	2b01      	cmp	r3, #1
 80071ac:	d109      	bne.n	80071c2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80071ae:	f7ff ffbf 	bl	8007130 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80071b2:	4b08      	ldr	r3, [pc, #32]	@ (80071d4 <osKernelStart+0x48>)
 80071b4:	2202      	movs	r2, #2
 80071b6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80071b8:	f001 f892 	bl	80082e0 <vTaskStartScheduler>
      stat = osOK;
 80071bc:	2300      	movs	r3, #0
 80071be:	607b      	str	r3, [r7, #4]
 80071c0:	e002      	b.n	80071c8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80071c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80071c8:	687b      	ldr	r3, [r7, #4]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3708      	adds	r7, #8
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}
 80071d2:	bf00      	nop
 80071d4:	20000918 	.word	0x20000918

080071d8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80071d8:	b580      	push	{r7, lr}
 80071da:	b08e      	sub	sp, #56	@ 0x38
 80071dc:	af04      	add	r7, sp, #16
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80071e4:	2300      	movs	r3, #0
 80071e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071e8:	f3ef 8305 	mrs	r3, IPSR
 80071ec:	617b      	str	r3, [r7, #20]
  return(result);
 80071ee:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d17e      	bne.n	80072f2 <osThreadNew+0x11a>
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d07b      	beq.n	80072f2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80071fa:	2380      	movs	r3, #128	@ 0x80
 80071fc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80071fe:	2318      	movs	r3, #24
 8007200:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007206:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800720a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d045      	beq.n	800729e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d002      	beq.n	8007220 <osThreadNew+0x48>
        name = attr->name;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d002      	beq.n	800722e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	699b      	ldr	r3, [r3, #24]
 800722c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800722e:	69fb      	ldr	r3, [r7, #28]
 8007230:	2b00      	cmp	r3, #0
 8007232:	d008      	beq.n	8007246 <osThreadNew+0x6e>
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	2b38      	cmp	r3, #56	@ 0x38
 8007238:	d805      	bhi.n	8007246 <osThreadNew+0x6e>
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	685b      	ldr	r3, [r3, #4]
 800723e:	f003 0301 	and.w	r3, r3, #1
 8007242:	2b00      	cmp	r3, #0
 8007244:	d001      	beq.n	800724a <osThreadNew+0x72>
        return (NULL);
 8007246:	2300      	movs	r3, #0
 8007248:	e054      	b.n	80072f4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	695b      	ldr	r3, [r3, #20]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d003      	beq.n	800725a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	695b      	ldr	r3, [r3, #20]
 8007256:	089b      	lsrs	r3, r3, #2
 8007258:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	689b      	ldr	r3, [r3, #8]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d00e      	beq.n	8007280 <osThreadNew+0xa8>
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	2ba7      	cmp	r3, #167	@ 0xa7
 8007268:	d90a      	bls.n	8007280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800726e:	2b00      	cmp	r3, #0
 8007270:	d006      	beq.n	8007280 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d002      	beq.n	8007280 <osThreadNew+0xa8>
        mem = 1;
 800727a:	2301      	movs	r3, #1
 800727c:	61bb      	str	r3, [r7, #24]
 800727e:	e010      	b.n	80072a2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	2b00      	cmp	r3, #0
 8007286:	d10c      	bne.n	80072a2 <osThreadNew+0xca>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	68db      	ldr	r3, [r3, #12]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d108      	bne.n	80072a2 <osThreadNew+0xca>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <osThreadNew+0xca>
          mem = 0;
 8007298:	2300      	movs	r3, #0
 800729a:	61bb      	str	r3, [r7, #24]
 800729c:	e001      	b.n	80072a2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800729e:	2300      	movs	r3, #0
 80072a0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d110      	bne.n	80072ca <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80072ac:	687a      	ldr	r2, [r7, #4]
 80072ae:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80072b0:	9202      	str	r2, [sp, #8]
 80072b2:	9301      	str	r3, [sp, #4]
 80072b4:	69fb      	ldr	r3, [r7, #28]
 80072b6:	9300      	str	r3, [sp, #0]
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	6a3a      	ldr	r2, [r7, #32]
 80072bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072be:	68f8      	ldr	r0, [r7, #12]
 80072c0:	f000 fe1a 	bl	8007ef8 <xTaskCreateStatic>
 80072c4:	4603      	mov	r3, r0
 80072c6:	613b      	str	r3, [r7, #16]
 80072c8:	e013      	b.n	80072f2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80072ca:	69bb      	ldr	r3, [r7, #24]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d110      	bne.n	80072f2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80072d0:	6a3b      	ldr	r3, [r7, #32]
 80072d2:	b29a      	uxth	r2, r3
 80072d4:	f107 0310 	add.w	r3, r7, #16
 80072d8:	9301      	str	r3, [sp, #4]
 80072da:	69fb      	ldr	r3, [r7, #28]
 80072dc:	9300      	str	r3, [sp, #0]
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80072e2:	68f8      	ldr	r0, [r7, #12]
 80072e4:	f000 fe68 	bl	8007fb8 <xTaskCreate>
 80072e8:	4603      	mov	r3, r0
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d001      	beq.n	80072f2 <osThreadNew+0x11a>
            hTask = NULL;
 80072ee:	2300      	movs	r3, #0
 80072f0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80072f2:	693b      	ldr	r3, [r7, #16]
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3728      	adds	r7, #40	@ 0x28
 80072f8:	46bd      	mov	sp, r7
 80072fa:	bd80      	pop	{r7, pc}

080072fc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80072fc:	b580      	push	{r7, lr}
 80072fe:	b084      	sub	sp, #16
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007304:	f3ef 8305 	mrs	r3, IPSR
 8007308:	60bb      	str	r3, [r7, #8]
  return(result);
 800730a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800730c:	2b00      	cmp	r3, #0
 800730e:	d003      	beq.n	8007318 <osDelay+0x1c>
    stat = osErrorISR;
 8007310:	f06f 0305 	mvn.w	r3, #5
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e007      	b.n	8007328 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d002      	beq.n	8007328 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007322:	6878      	ldr	r0, [r7, #4]
 8007324:	f000 ffa6 	bl	8008274 <vTaskDelay>
    }
  }

  return (stat);
 8007328:	68fb      	ldr	r3, [r7, #12]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}
	...

08007334 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007334:	b480      	push	{r7}
 8007336:	b085      	sub	sp, #20
 8007338:	af00      	add	r7, sp, #0
 800733a:	60f8      	str	r0, [r7, #12]
 800733c:	60b9      	str	r1, [r7, #8]
 800733e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	4a07      	ldr	r2, [pc, #28]	@ (8007360 <vApplicationGetIdleTaskMemory+0x2c>)
 8007344:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	4a06      	ldr	r2, [pc, #24]	@ (8007364 <vApplicationGetIdleTaskMemory+0x30>)
 800734a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2280      	movs	r2, #128	@ 0x80
 8007350:	601a      	str	r2, [r3, #0]
}
 8007352:	bf00      	nop
 8007354:	3714      	adds	r7, #20
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	2000091c 	.word	0x2000091c
 8007364:	200009c4 	.word	0x200009c4

08007368 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007368:	b480      	push	{r7}
 800736a:	b085      	sub	sp, #20
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	4a07      	ldr	r2, [pc, #28]	@ (8007394 <vApplicationGetTimerTaskMemory+0x2c>)
 8007378:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800737a:	68bb      	ldr	r3, [r7, #8]
 800737c:	4a06      	ldr	r2, [pc, #24]	@ (8007398 <vApplicationGetTimerTaskMemory+0x30>)
 800737e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007386:	601a      	str	r2, [r3, #0]
}
 8007388:	bf00      	nop
 800738a:	3714      	adds	r7, #20
 800738c:	46bd      	mov	sp, r7
 800738e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007392:	4770      	bx	lr
 8007394:	20000bc4 	.word	0x20000bc4
 8007398:	20000c6c 	.word	0x20000c6c

0800739c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800739c:	b480      	push	{r7}
 800739e:	b083      	sub	sp, #12
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f103 0208 	add.w	r2, r3, #8
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80073b4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f103 0208 	add.w	r2, r3, #8
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	f103 0208 	add.w	r2, r3, #8
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	2200      	movs	r2, #0
 80073ce:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2200      	movs	r2, #0
 80073e8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr

080073f6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80073f6:	b480      	push	{r7}
 80073f8:	b085      	sub	sp, #20
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	683a      	ldr	r2, [r7, #0]
 800741a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	601a      	str	r2, [r3, #0]
}
 8007432:	bf00      	nop
 8007434:	3714      	adds	r7, #20
 8007436:	46bd      	mov	sp, r7
 8007438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743c:	4770      	bx	lr

0800743e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800743e:	b480      	push	{r7}
 8007440:	b085      	sub	sp, #20
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
 8007446:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800744e:	68bb      	ldr	r3, [r7, #8]
 8007450:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007454:	d103      	bne.n	800745e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	60fb      	str	r3, [r7, #12]
 800745c:	e00c      	b.n	8007478 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	3308      	adds	r3, #8
 8007462:	60fb      	str	r3, [r7, #12]
 8007464:	e002      	b.n	800746c <vListInsert+0x2e>
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	685b      	ldr	r3, [r3, #4]
 800746a:	60fb      	str	r3, [r7, #12]
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	68ba      	ldr	r2, [r7, #8]
 8007474:	429a      	cmp	r2, r3
 8007476:	d2f6      	bcs.n	8007466 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	685a      	ldr	r2, [r3, #4]
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	68fa      	ldr	r2, [r7, #12]
 800748c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	683a      	ldr	r2, [r7, #0]
 8007492:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	1c5a      	adds	r2, r3, #1
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	601a      	str	r2, [r3, #0]
}
 80074a4:	bf00      	nop
 80074a6:	3714      	adds	r7, #20
 80074a8:	46bd      	mov	sp, r7
 80074aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ae:	4770      	bx	lr

080074b0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80074b0:	b480      	push	{r7}
 80074b2:	b085      	sub	sp, #20
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	691b      	ldr	r3, [r3, #16]
 80074bc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	687a      	ldr	r2, [r7, #4]
 80074c4:	6892      	ldr	r2, [r2, #8]
 80074c6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	689b      	ldr	r3, [r3, #8]
 80074cc:	687a      	ldr	r2, [r7, #4]
 80074ce:	6852      	ldr	r2, [r2, #4]
 80074d0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	687a      	ldr	r2, [r7, #4]
 80074d8:	429a      	cmp	r2, r3
 80074da:	d103      	bne.n	80074e4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689a      	ldr	r2, [r3, #8]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	1e5a      	subs	r2, r3, #1
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3714      	adds	r7, #20
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr

08007504 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10b      	bne.n	8007530 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751c:	f383 8811 	msr	BASEPRI, r3
 8007520:	f3bf 8f6f 	isb	sy
 8007524:	f3bf 8f4f 	dsb	sy
 8007528:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800752a:	bf00      	nop
 800752c:	bf00      	nop
 800752e:	e7fd      	b.n	800752c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007530:	f002 f8aa 	bl	8009688 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681a      	ldr	r2, [r3, #0]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800753c:	68f9      	ldr	r1, [r7, #12]
 800753e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007540:	fb01 f303 	mul.w	r3, r1, r3
 8007544:	441a      	add	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	681a      	ldr	r2, [r3, #0]
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007560:	3b01      	subs	r3, #1
 8007562:	68f9      	ldr	r1, [r7, #12]
 8007564:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007566:	fb01 f303 	mul.w	r3, r1, r3
 800756a:	441a      	add	r2, r3
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	22ff      	movs	r2, #255	@ 0xff
 8007574:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	22ff      	movs	r2, #255	@ 0xff
 800757c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d114      	bne.n	80075b0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d01a      	beq.n	80075c4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	3310      	adds	r3, #16
 8007592:	4618      	mov	r0, r3
 8007594:	f001 f942 	bl	800881c <xTaskRemoveFromEventList>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d012      	beq.n	80075c4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800759e:	4b0d      	ldr	r3, [pc, #52]	@ (80075d4 <xQueueGenericReset+0xd0>)
 80075a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	f3bf 8f6f 	isb	sy
 80075ae:	e009      	b.n	80075c4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	3310      	adds	r3, #16
 80075b4:	4618      	mov	r0, r3
 80075b6:	f7ff fef1 	bl	800739c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	3324      	adds	r3, #36	@ 0x24
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff feec 	bl	800739c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80075c4:	f002 f892 	bl	80096ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80075c8:	2301      	movs	r3, #1
}
 80075ca:	4618      	mov	r0, r3
 80075cc:	3710      	adds	r7, #16
 80075ce:	46bd      	mov	sp, r7
 80075d0:	bd80      	pop	{r7, pc}
 80075d2:	bf00      	nop
 80075d4:	e000ed04 	.word	0xe000ed04

080075d8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b08e      	sub	sp, #56	@ 0x38
 80075dc:	af02      	add	r7, sp, #8
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
 80075e4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d10b      	bne.n	8007604 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80075ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075fe:	bf00      	nop
 8007600:	bf00      	nop
 8007602:	e7fd      	b.n	8007600 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10b      	bne.n	8007622 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800761c:	bf00      	nop
 800761e:	bf00      	nop
 8007620:	e7fd      	b.n	800761e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d002      	beq.n	800762e <xQueueGenericCreateStatic+0x56>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d001      	beq.n	8007632 <xQueueGenericCreateStatic+0x5a>
 800762e:	2301      	movs	r3, #1
 8007630:	e000      	b.n	8007634 <xQueueGenericCreateStatic+0x5c>
 8007632:	2300      	movs	r3, #0
 8007634:	2b00      	cmp	r3, #0
 8007636:	d10b      	bne.n	8007650 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8007638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763c:	f383 8811 	msr	BASEPRI, r3
 8007640:	f3bf 8f6f 	isb	sy
 8007644:	f3bf 8f4f 	dsb	sy
 8007648:	623b      	str	r3, [r7, #32]
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	e7fd      	b.n	800764c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d102      	bne.n	800765c <xQueueGenericCreateStatic+0x84>
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d101      	bne.n	8007660 <xQueueGenericCreateStatic+0x88>
 800765c:	2301      	movs	r3, #1
 800765e:	e000      	b.n	8007662 <xQueueGenericCreateStatic+0x8a>
 8007660:	2300      	movs	r3, #0
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	61fb      	str	r3, [r7, #28]
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	e7fd      	b.n	800767a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800767e:	2350      	movs	r3, #80	@ 0x50
 8007680:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007682:	697b      	ldr	r3, [r7, #20]
 8007684:	2b50      	cmp	r3, #80	@ 0x50
 8007686:	d00b      	beq.n	80076a0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	61bb      	str	r3, [r7, #24]
}
 800769a:	bf00      	nop
 800769c:	bf00      	nop
 800769e:	e7fd      	b.n	800769c <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80076a0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80076a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d00d      	beq.n	80076c8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80076ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ae:	2201      	movs	r2, #1
 80076b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80076b4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80076b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	4613      	mov	r3, r2
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	68b9      	ldr	r1, [r7, #8]
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f000 f805 	bl	80076d2 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80076c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80076ca:	4618      	mov	r0, r3
 80076cc:	3730      	adds	r7, #48	@ 0x30
 80076ce:	46bd      	mov	sp, r7
 80076d0:	bd80      	pop	{r7, pc}

080076d2 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80076d2:	b580      	push	{r7, lr}
 80076d4:	b084      	sub	sp, #16
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	60f8      	str	r0, [r7, #12]
 80076da:	60b9      	str	r1, [r7, #8]
 80076dc:	607a      	str	r2, [r7, #4]
 80076de:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80076e6:	69bb      	ldr	r3, [r7, #24]
 80076e8:	69ba      	ldr	r2, [r7, #24]
 80076ea:	601a      	str	r2, [r3, #0]
 80076ec:	e002      	b.n	80076f4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80076ee:	69bb      	ldr	r3, [r7, #24]
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	68fa      	ldr	r2, [r7, #12]
 80076f8:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80076fa:	69bb      	ldr	r3, [r7, #24]
 80076fc:	68ba      	ldr	r2, [r7, #8]
 80076fe:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007700:	2101      	movs	r1, #1
 8007702:	69b8      	ldr	r0, [r7, #24]
 8007704:	f7ff fefe 	bl	8007504 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007710:	bf00      	nop
 8007712:	3710      	adds	r7, #16
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b08e      	sub	sp, #56	@ 0x38
 800771c:	af00      	add	r7, sp, #0
 800771e:	60f8      	str	r0, [r7, #12]
 8007720:	60b9      	str	r1, [r7, #8]
 8007722:	607a      	str	r2, [r7, #4]
 8007724:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007726:	2300      	movs	r3, #0
 8007728:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800772e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007730:	2b00      	cmp	r3, #0
 8007732:	d10b      	bne.n	800774c <xQueueGenericSend+0x34>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d103      	bne.n	800775a <xQueueGenericSend+0x42>
 8007752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <xQueueGenericSend+0x46>
 800775a:	2301      	movs	r3, #1
 800775c:	e000      	b.n	8007760 <xQueueGenericSend+0x48>
 800775e:	2300      	movs	r3, #0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10b      	bne.n	800777c <xQueueGenericSend+0x64>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007776:	bf00      	nop
 8007778:	bf00      	nop
 800777a:	e7fd      	b.n	8007778 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	2b02      	cmp	r3, #2
 8007780:	d103      	bne.n	800778a <xQueueGenericSend+0x72>
 8007782:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007784:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007786:	2b01      	cmp	r3, #1
 8007788:	d101      	bne.n	800778e <xQueueGenericSend+0x76>
 800778a:	2301      	movs	r3, #1
 800778c:	e000      	b.n	8007790 <xQueueGenericSend+0x78>
 800778e:	2300      	movs	r3, #0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d10b      	bne.n	80077ac <xQueueGenericSend+0x94>
	__asm volatile
 8007794:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007798:	f383 8811 	msr	BASEPRI, r3
 800779c:	f3bf 8f6f 	isb	sy
 80077a0:	f3bf 8f4f 	dsb	sy
 80077a4:	623b      	str	r3, [r7, #32]
}
 80077a6:	bf00      	nop
 80077a8:	bf00      	nop
 80077aa:	e7fd      	b.n	80077a8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80077ac:	f001 f9fc 	bl	8008ba8 <xTaskGetSchedulerState>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <xQueueGenericSend+0xa4>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d101      	bne.n	80077c0 <xQueueGenericSend+0xa8>
 80077bc:	2301      	movs	r3, #1
 80077be:	e000      	b.n	80077c2 <xQueueGenericSend+0xaa>
 80077c0:	2300      	movs	r3, #0
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d10b      	bne.n	80077de <xQueueGenericSend+0xc6>
	__asm volatile
 80077c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ca:	f383 8811 	msr	BASEPRI, r3
 80077ce:	f3bf 8f6f 	isb	sy
 80077d2:	f3bf 8f4f 	dsb	sy
 80077d6:	61fb      	str	r3, [r7, #28]
}
 80077d8:	bf00      	nop
 80077da:	bf00      	nop
 80077dc:	e7fd      	b.n	80077da <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80077de:	f001 ff53 	bl	8009688 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80077e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80077e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80077e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d302      	bcc.n	80077f4 <xQueueGenericSend+0xdc>
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	2b02      	cmp	r3, #2
 80077f2:	d129      	bne.n	8007848 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80077f4:	683a      	ldr	r2, [r7, #0]
 80077f6:	68b9      	ldr	r1, [r7, #8]
 80077f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077fa:	f000 fa0f 	bl	8007c1c <prvCopyDataToQueue>
 80077fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007804:	2b00      	cmp	r3, #0
 8007806:	d010      	beq.n	800782a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800780a:	3324      	adds	r3, #36	@ 0x24
 800780c:	4618      	mov	r0, r3
 800780e:	f001 f805 	bl	800881c <xTaskRemoveFromEventList>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d013      	beq.n	8007840 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007818:	4b3f      	ldr	r3, [pc, #252]	@ (8007918 <xQueueGenericSend+0x200>)
 800781a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800781e:	601a      	str	r2, [r3, #0]
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	f3bf 8f6f 	isb	sy
 8007828:	e00a      	b.n	8007840 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800782a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800782c:	2b00      	cmp	r3, #0
 800782e:	d007      	beq.n	8007840 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007830:	4b39      	ldr	r3, [pc, #228]	@ (8007918 <xQueueGenericSend+0x200>)
 8007832:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007836:	601a      	str	r2, [r3, #0]
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007840:	f001 ff54 	bl	80096ec <vPortExitCritical>
				return pdPASS;
 8007844:	2301      	movs	r3, #1
 8007846:	e063      	b.n	8007910 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d103      	bne.n	8007856 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800784e:	f001 ff4d 	bl	80096ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007852:	2300      	movs	r3, #0
 8007854:	e05c      	b.n	8007910 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007856:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007858:	2b00      	cmp	r3, #0
 800785a:	d106      	bne.n	800786a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800785c:	f107 0314 	add.w	r3, r7, #20
 8007860:	4618      	mov	r0, r3
 8007862:	f001 f83f 	bl	80088e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007866:	2301      	movs	r3, #1
 8007868:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800786a:	f001 ff3f 	bl	80096ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800786e:	f000 fda7 	bl	80083c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007872:	f001 ff09 	bl	8009688 <vPortEnterCritical>
 8007876:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007878:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800787c:	b25b      	sxtb	r3, r3
 800787e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007882:	d103      	bne.n	800788c <xQueueGenericSend+0x174>
 8007884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007886:	2200      	movs	r2, #0
 8007888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800788c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800788e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007892:	b25b      	sxtb	r3, r3
 8007894:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007898:	d103      	bne.n	80078a2 <xQueueGenericSend+0x18a>
 800789a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800789c:	2200      	movs	r2, #0
 800789e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80078a2:	f001 ff23 	bl	80096ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80078a6:	1d3a      	adds	r2, r7, #4
 80078a8:	f107 0314 	add.w	r3, r7, #20
 80078ac:	4611      	mov	r1, r2
 80078ae:	4618      	mov	r0, r3
 80078b0:	f001 f82e 	bl	8008910 <xTaskCheckForTimeOut>
 80078b4:	4603      	mov	r3, r0
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d124      	bne.n	8007904 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80078ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078bc:	f000 faa6 	bl	8007e0c <prvIsQueueFull>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d018      	beq.n	80078f8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80078c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80078c8:	3310      	adds	r3, #16
 80078ca:	687a      	ldr	r2, [r7, #4]
 80078cc:	4611      	mov	r1, r2
 80078ce:	4618      	mov	r0, r3
 80078d0:	f000 ff52 	bl	8008778 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80078d4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078d6:	f000 fa31 	bl	8007d3c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80078da:	f000 fd7f 	bl	80083dc <xTaskResumeAll>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f47f af7c 	bne.w	80077de <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80078e6:	4b0c      	ldr	r3, [pc, #48]	@ (8007918 <xQueueGenericSend+0x200>)
 80078e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078ec:	601a      	str	r2, [r3, #0]
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	f3bf 8f6f 	isb	sy
 80078f6:	e772      	b.n	80077de <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80078f8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80078fa:	f000 fa1f 	bl	8007d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80078fe:	f000 fd6d 	bl	80083dc <xTaskResumeAll>
 8007902:	e76c      	b.n	80077de <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007904:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007906:	f000 fa19 	bl	8007d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800790a:	f000 fd67 	bl	80083dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800790e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007910:	4618      	mov	r0, r3
 8007912:	3738      	adds	r7, #56	@ 0x38
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}
 8007918:	e000ed04 	.word	0xe000ed04

0800791c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b090      	sub	sp, #64	@ 0x40
 8007920:	af00      	add	r7, sp, #0
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800792e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10b      	bne.n	800794c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8007946:	bf00      	nop
 8007948:	bf00      	nop
 800794a:	e7fd      	b.n	8007948 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <xQueueGenericSendFromISR+0x3e>
 8007952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <xQueueGenericSendFromISR+0x42>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <xQueueGenericSendFromISR+0x44>
 800795e:	2300      	movs	r3, #0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10b      	bne.n	800797c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8007976:	bf00      	nop
 8007978:	bf00      	nop
 800797a:	e7fd      	b.n	8007978 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	2b02      	cmp	r3, #2
 8007980:	d103      	bne.n	800798a <xQueueGenericSendFromISR+0x6e>
 8007982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007986:	2b01      	cmp	r3, #1
 8007988:	d101      	bne.n	800798e <xQueueGenericSendFromISR+0x72>
 800798a:	2301      	movs	r3, #1
 800798c:	e000      	b.n	8007990 <xQueueGenericSendFromISR+0x74>
 800798e:	2300      	movs	r3, #0
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10b      	bne.n	80079ac <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8007994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007998:	f383 8811 	msr	BASEPRI, r3
 800799c:	f3bf 8f6f 	isb	sy
 80079a0:	f3bf 8f4f 	dsb	sy
 80079a4:	623b      	str	r3, [r7, #32]
}
 80079a6:	bf00      	nop
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80079ac:	f001 ff4c 	bl	8009848 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80079b0:	f3ef 8211 	mrs	r2, BASEPRI
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	61fa      	str	r2, [r7, #28]
 80079c6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80079c8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80079ca:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80079cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079d4:	429a      	cmp	r2, r3
 80079d6:	d302      	bcc.n	80079de <xQueueGenericSendFromISR+0xc2>
 80079d8:	683b      	ldr	r3, [r7, #0]
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d12f      	bne.n	8007a3e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80079de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079e0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80079e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80079e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80079ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	68b9      	ldr	r1, [r7, #8]
 80079f2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80079f4:	f000 f912 	bl	8007c1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80079f8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80079fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a00:	d112      	bne.n	8007a28 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007a02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d016      	beq.n	8007a38 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007a0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a0c:	3324      	adds	r3, #36	@ 0x24
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 ff04 	bl	800881c <xTaskRemoveFromEventList>
 8007a14:	4603      	mov	r3, r0
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00e      	beq.n	8007a38 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d00b      	beq.n	8007a38 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]
 8007a26:	e007      	b.n	8007a38 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007a28:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b2db      	uxtb	r3, r3
 8007a30:	b25a      	sxtb	r2, r3
 8007a32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8007a38:	2301      	movs	r3, #1
 8007a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8007a3c:	e001      	b.n	8007a42 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007a42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a44:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007a46:	697b      	ldr	r3, [r7, #20]
 8007a48:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007a4c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007a4e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3740      	adds	r7, #64	@ 0x40
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b08c      	sub	sp, #48	@ 0x30
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	60b9      	str	r1, [r7, #8]
 8007a62:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007a64:	2300      	movs	r3, #0
 8007a66:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d10b      	bne.n	8007a8a <xQueueReceive+0x32>
	__asm volatile
 8007a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a76:	f383 8811 	msr	BASEPRI, r3
 8007a7a:	f3bf 8f6f 	isb	sy
 8007a7e:	f3bf 8f4f 	dsb	sy
 8007a82:	623b      	str	r3, [r7, #32]
}
 8007a84:	bf00      	nop
 8007a86:	bf00      	nop
 8007a88:	e7fd      	b.n	8007a86 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d103      	bne.n	8007a98 <xQueueReceive+0x40>
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <xQueueReceive+0x44>
 8007a98:	2301      	movs	r3, #1
 8007a9a:	e000      	b.n	8007a9e <xQueueReceive+0x46>
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d10b      	bne.n	8007aba <xQueueReceive+0x62>
	__asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	61fb      	str	r3, [r7, #28]
}
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007aba:	f001 f875 	bl	8008ba8 <xTaskGetSchedulerState>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d102      	bne.n	8007aca <xQueueReceive+0x72>
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <xQueueReceive+0x76>
 8007aca:	2301      	movs	r3, #1
 8007acc:	e000      	b.n	8007ad0 <xQueueReceive+0x78>
 8007ace:	2300      	movs	r3, #0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d10b      	bne.n	8007aec <xQueueReceive+0x94>
	__asm volatile
 8007ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ad8:	f383 8811 	msr	BASEPRI, r3
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f3bf 8f4f 	dsb	sy
 8007ae4:	61bb      	str	r3, [r7, #24]
}
 8007ae6:	bf00      	nop
 8007ae8:	bf00      	nop
 8007aea:	e7fd      	b.n	8007ae8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007aec:	f001 fdcc 	bl	8009688 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007af0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007af2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007af4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d01f      	beq.n	8007b3c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007afc:	68b9      	ldr	r1, [r7, #8]
 8007afe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007b00:	f000 f8f6 	bl	8007cf0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b06:	1e5a      	subs	r2, r3, #1
 8007b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d00f      	beq.n	8007b34 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b16:	3310      	adds	r3, #16
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f000 fe7f 	bl	800881c <xTaskRemoveFromEventList>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d007      	beq.n	8007b34 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007b24:	4b3c      	ldr	r3, [pc, #240]	@ (8007c18 <xQueueReceive+0x1c0>)
 8007b26:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b2a:	601a      	str	r2, [r3, #0]
 8007b2c:	f3bf 8f4f 	dsb	sy
 8007b30:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007b34:	f001 fdda 	bl	80096ec <vPortExitCritical>
				return pdPASS;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	e069      	b.n	8007c10 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d103      	bne.n	8007b4a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007b42:	f001 fdd3 	bl	80096ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007b46:	2300      	movs	r3, #0
 8007b48:	e062      	b.n	8007c10 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007b4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d106      	bne.n	8007b5e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007b50:	f107 0310 	add.w	r3, r7, #16
 8007b54:	4618      	mov	r0, r3
 8007b56:	f000 fec5 	bl	80088e4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007b5a:	2301      	movs	r3, #1
 8007b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007b5e:	f001 fdc5 	bl	80096ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007b62:	f000 fc2d 	bl	80083c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007b66:	f001 fd8f 	bl	8009688 <vPortEnterCritical>
 8007b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b6c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007b70:	b25b      	sxtb	r3, r3
 8007b72:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b76:	d103      	bne.n	8007b80 <xQueueReceive+0x128>
 8007b78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b82:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007b86:	b25b      	sxtb	r3, r3
 8007b88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b8c:	d103      	bne.n	8007b96 <xQueueReceive+0x13e>
 8007b8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b90:	2200      	movs	r2, #0
 8007b92:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007b96:	f001 fda9 	bl	80096ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007b9a:	1d3a      	adds	r2, r7, #4
 8007b9c:	f107 0310 	add.w	r3, r7, #16
 8007ba0:	4611      	mov	r1, r2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 feb4 	bl	8008910 <xTaskCheckForTimeOut>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d123      	bne.n	8007bf6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb0:	f000 f916 	bl	8007de0 <prvIsQueueEmpty>
 8007bb4:	4603      	mov	r3, r0
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d017      	beq.n	8007bea <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007bba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bbc:	3324      	adds	r3, #36	@ 0x24
 8007bbe:	687a      	ldr	r2, [r7, #4]
 8007bc0:	4611      	mov	r1, r2
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fdd8 	bl	8008778 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007bc8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bca:	f000 f8b7 	bl	8007d3c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007bce:	f000 fc05 	bl	80083dc <xTaskResumeAll>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d189      	bne.n	8007aec <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007bd8:	4b0f      	ldr	r3, [pc, #60]	@ (8007c18 <xQueueReceive+0x1c0>)
 8007bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007bde:	601a      	str	r2, [r3, #0]
 8007be0:	f3bf 8f4f 	dsb	sy
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	e780      	b.n	8007aec <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007bea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bec:	f000 f8a6 	bl	8007d3c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007bf0:	f000 fbf4 	bl	80083dc <xTaskResumeAll>
 8007bf4:	e77a      	b.n	8007aec <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007bf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bf8:	f000 f8a0 	bl	8007d3c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007bfc:	f000 fbee 	bl	80083dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007c00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c02:	f000 f8ed 	bl	8007de0 <prvIsQueueEmpty>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	f43f af6f 	beq.w	8007aec <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007c0e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007c10:	4618      	mov	r0, r3
 8007c12:	3730      	adds	r7, #48	@ 0x30
 8007c14:	46bd      	mov	sp, r7
 8007c16:	bd80      	pop	{r7, pc}
 8007c18:	e000ed04 	.word	0xe000ed04

08007c1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b086      	sub	sp, #24
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	60f8      	str	r0, [r7, #12]
 8007c24:	60b9      	str	r1, [r7, #8]
 8007c26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007c28:	2300      	movs	r3, #0
 8007c2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d10d      	bne.n	8007c56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d14d      	bne.n	8007cde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	4618      	mov	r0, r3
 8007c48:	f000 ffcc 	bl	8008be4 <xTaskPriorityDisinherit>
 8007c4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2200      	movs	r2, #0
 8007c52:	609a      	str	r2, [r3, #8]
 8007c54:	e043      	b.n	8007cde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d119      	bne.n	8007c90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6858      	ldr	r0, [r3, #4]
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c64:	461a      	mov	r2, r3
 8007c66:	68b9      	ldr	r1, [r7, #8]
 8007c68:	f002 f8a2 	bl	8009db0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	685a      	ldr	r2, [r3, #4]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c74:	441a      	add	r2, r3
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	685a      	ldr	r2, [r3, #4]
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	429a      	cmp	r2, r3
 8007c84:	d32b      	bcc.n	8007cde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	605a      	str	r2, [r3, #4]
 8007c8e:	e026      	b.n	8007cde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	68d8      	ldr	r0, [r3, #12]
 8007c94:	68fb      	ldr	r3, [r7, #12]
 8007c96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c98:	461a      	mov	r2, r3
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	f002 f888 	bl	8009db0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	68da      	ldr	r2, [r3, #12]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ca8:	425b      	negs	r3, r3
 8007caa:	441a      	add	r2, r3
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	68da      	ldr	r2, [r3, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	429a      	cmp	r2, r3
 8007cba:	d207      	bcs.n	8007ccc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689a      	ldr	r2, [r3, #8]
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cc4:	425b      	negs	r3, r3
 8007cc6:	441a      	add	r2, r3
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2b02      	cmp	r3, #2
 8007cd0:	d105      	bne.n	8007cde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007cd2:	693b      	ldr	r3, [r7, #16]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d002      	beq.n	8007cde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	3b01      	subs	r3, #1
 8007cdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007cde:	693b      	ldr	r3, [r7, #16]
 8007ce0:	1c5a      	adds	r2, r3, #1
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007ce6:	697b      	ldr	r3, [r7, #20]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d018      	beq.n	8007d34 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	68da      	ldr	r2, [r3, #12]
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d0a:	441a      	add	r2, r3
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	68da      	ldr	r2, [r3, #12]
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d303      	bcc.n	8007d24 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681a      	ldr	r2, [r3, #0]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68d9      	ldr	r1, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d2c:	461a      	mov	r2, r3
 8007d2e:	6838      	ldr	r0, [r7, #0]
 8007d30:	f002 f83e 	bl	8009db0 <memcpy>
	}
}
 8007d34:	bf00      	nop
 8007d36:	3708      	adds	r7, #8
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	bd80      	pop	{r7, pc}

08007d3c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007d3c:	b580      	push	{r7, lr}
 8007d3e:	b084      	sub	sp, #16
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007d44:	f001 fca0 	bl	8009688 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d4e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d50:	e011      	b.n	8007d76 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d012      	beq.n	8007d80 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	3324      	adds	r3, #36	@ 0x24
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 fd5c 	bl	800881c <xTaskRemoveFromEventList>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d001      	beq.n	8007d6e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007d6a:	f000 fe35 	bl	80089d8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007d6e:	7bfb      	ldrb	r3, [r7, #15]
 8007d70:	3b01      	subs	r3, #1
 8007d72:	b2db      	uxtb	r3, r3
 8007d74:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007d76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	dce9      	bgt.n	8007d52 <prvUnlockQueue+0x16>
 8007d7e:	e000      	b.n	8007d82 <prvUnlockQueue+0x46>
					break;
 8007d80:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	22ff      	movs	r2, #255	@ 0xff
 8007d86:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007d8a:	f001 fcaf 	bl	80096ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007d8e:	f001 fc7b 	bl	8009688 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d98:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007d9a:	e011      	b.n	8007dc0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	691b      	ldr	r3, [r3, #16]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d012      	beq.n	8007dca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	3310      	adds	r3, #16
 8007da8:	4618      	mov	r0, r3
 8007daa:	f000 fd37 	bl	800881c <xTaskRemoveFromEventList>
 8007dae:	4603      	mov	r3, r0
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d001      	beq.n	8007db8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007db4:	f000 fe10 	bl	80089d8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007db8:	7bbb      	ldrb	r3, [r7, #14]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007dc0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	dce9      	bgt.n	8007d9c <prvUnlockQueue+0x60>
 8007dc8:	e000      	b.n	8007dcc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007dca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	22ff      	movs	r2, #255	@ 0xff
 8007dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007dd4:	f001 fc8a 	bl	80096ec <vPortExitCritical>
}
 8007dd8:	bf00      	nop
 8007dda:	3710      	adds	r7, #16
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	bd80      	pop	{r7, pc}

08007de0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007de0:	b580      	push	{r7, lr}
 8007de2:	b084      	sub	sp, #16
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007de8:	f001 fc4e 	bl	8009688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d102      	bne.n	8007dfa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007df4:	2301      	movs	r3, #1
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	e001      	b.n	8007dfe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007dfe:	f001 fc75 	bl	80096ec <vPortExitCritical>

	return xReturn;
 8007e02:	68fb      	ldr	r3, [r7, #12]
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	3710      	adds	r7, #16
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bd80      	pop	{r7, pc}

08007e0c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b084      	sub	sp, #16
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007e14:	f001 fc38 	bl	8009688 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d102      	bne.n	8007e2a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007e24:	2301      	movs	r3, #1
 8007e26:	60fb      	str	r3, [r7, #12]
 8007e28:	e001      	b.n	8007e2e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007e2e:	f001 fc5d 	bl	80096ec <vPortExitCritical>

	return xReturn;
 8007e32:	68fb      	ldr	r3, [r7, #12]
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3710      	adds	r7, #16
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b085      	sub	sp, #20
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e46:	2300      	movs	r3, #0
 8007e48:	60fb      	str	r3, [r7, #12]
 8007e4a:	e014      	b.n	8007e76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007e4c:	4a0f      	ldr	r2, [pc, #60]	@ (8007e8c <vQueueAddToRegistry+0x50>)
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d10b      	bne.n	8007e70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007e58:	490c      	ldr	r1, [pc, #48]	@ (8007e8c <vQueueAddToRegistry+0x50>)
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	683a      	ldr	r2, [r7, #0]
 8007e5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007e62:	4a0a      	ldr	r2, [pc, #40]	@ (8007e8c <vQueueAddToRegistry+0x50>)
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	00db      	lsls	r3, r3, #3
 8007e68:	4413      	add	r3, r2
 8007e6a:	687a      	ldr	r2, [r7, #4]
 8007e6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007e6e:	e006      	b.n	8007e7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	3301      	adds	r3, #1
 8007e74:	60fb      	str	r3, [r7, #12]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	2b07      	cmp	r3, #7
 8007e7a:	d9e7      	bls.n	8007e4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007e7c:	bf00      	nop
 8007e7e:	bf00      	nop
 8007e80:	3714      	adds	r7, #20
 8007e82:	46bd      	mov	sp, r7
 8007e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e88:	4770      	bx	lr
 8007e8a:	bf00      	nop
 8007e8c:	2000106c 	.word	0x2000106c

08007e90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b086      	sub	sp, #24
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007ea0:	f001 fbf2 	bl	8009688 <vPortEnterCritical>
 8007ea4:	697b      	ldr	r3, [r7, #20]
 8007ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007eaa:	b25b      	sxtb	r3, r3
 8007eac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007eb0:	d103      	bne.n	8007eba <vQueueWaitForMessageRestricted+0x2a>
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	2200      	movs	r2, #0
 8007eb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007eba:	697b      	ldr	r3, [r7, #20]
 8007ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007ec0:	b25b      	sxtb	r3, r3
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec6:	d103      	bne.n	8007ed0 <vQueueWaitForMessageRestricted+0x40>
 8007ec8:	697b      	ldr	r3, [r7, #20]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007ed0:	f001 fc0c 	bl	80096ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d106      	bne.n	8007eea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	3324      	adds	r3, #36	@ 0x24
 8007ee0:	687a      	ldr	r2, [r7, #4]
 8007ee2:	68b9      	ldr	r1, [r7, #8]
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	f000 fc6d 	bl	80087c4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007eea:	6978      	ldr	r0, [r7, #20]
 8007eec:	f7ff ff26 	bl	8007d3c <prvUnlockQueue>
	}
 8007ef0:	bf00      	nop
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}

08007ef8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007ef8:	b580      	push	{r7, lr}
 8007efa:	b08e      	sub	sp, #56	@ 0x38
 8007efc:	af04      	add	r7, sp, #16
 8007efe:	60f8      	str	r0, [r7, #12]
 8007f00:	60b9      	str	r1, [r7, #8]
 8007f02:	607a      	str	r2, [r7, #4]
 8007f04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d10b      	bne.n	8007f24 <xTaskCreateStatic+0x2c>
	__asm volatile
 8007f0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f10:	f383 8811 	msr	BASEPRI, r3
 8007f14:	f3bf 8f6f 	isb	sy
 8007f18:	f3bf 8f4f 	dsb	sy
 8007f1c:	623b      	str	r3, [r7, #32]
}
 8007f1e:	bf00      	nop
 8007f20:	bf00      	nop
 8007f22:	e7fd      	b.n	8007f20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <xTaskCreateStatic+0x4a>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	61fb      	str	r3, [r7, #28]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007f42:	23a8      	movs	r3, #168	@ 0xa8
 8007f44:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007f46:	693b      	ldr	r3, [r7, #16]
 8007f48:	2ba8      	cmp	r3, #168	@ 0xa8
 8007f4a:	d00b      	beq.n	8007f64 <xTaskCreateStatic+0x6c>
	__asm volatile
 8007f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f50:	f383 8811 	msr	BASEPRI, r3
 8007f54:	f3bf 8f6f 	isb	sy
 8007f58:	f3bf 8f4f 	dsb	sy
 8007f5c:	61bb      	str	r3, [r7, #24]
}
 8007f5e:	bf00      	nop
 8007f60:	bf00      	nop
 8007f62:	e7fd      	b.n	8007f60 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007f64:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007f66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d01e      	beq.n	8007faa <xTaskCreateStatic+0xb2>
 8007f6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d01b      	beq.n	8007faa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007f72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f74:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f78:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f7a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007f84:	2300      	movs	r3, #0
 8007f86:	9303      	str	r3, [sp, #12]
 8007f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8a:	9302      	str	r3, [sp, #8]
 8007f8c:	f107 0314 	add.w	r3, r7, #20
 8007f90:	9301      	str	r3, [sp, #4]
 8007f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f94:	9300      	str	r3, [sp, #0]
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	68b9      	ldr	r1, [r7, #8]
 8007f9c:	68f8      	ldr	r0, [r7, #12]
 8007f9e:	f000 f851 	bl	8008044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007fa2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007fa4:	f000 f8f6 	bl	8008194 <prvAddNewTaskToReadyList>
 8007fa8:	e001      	b.n	8007fae <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007faa:	2300      	movs	r3, #0
 8007fac:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007fae:	697b      	ldr	r3, [r7, #20]
	}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3728      	adds	r7, #40	@ 0x28
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08c      	sub	sp, #48	@ 0x30
 8007fbc:	af04      	add	r7, sp, #16
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	603b      	str	r3, [r7, #0]
 8007fc4:	4613      	mov	r3, r2
 8007fc6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fc8:	88fb      	ldrh	r3, [r7, #6]
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f001 fc7d 	bl	80098cc <pvPortMalloc>
 8007fd2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007fd4:	697b      	ldr	r3, [r7, #20]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d00e      	beq.n	8007ff8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fda:	20a8      	movs	r0, #168	@ 0xa8
 8007fdc:	f001 fc76 	bl	80098cc <pvPortMalloc>
 8007fe0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d003      	beq.n	8007ff0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	697a      	ldr	r2, [r7, #20]
 8007fec:	631a      	str	r2, [r3, #48]	@ 0x30
 8007fee:	e005      	b.n	8007ffc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007ff0:	6978      	ldr	r0, [r7, #20]
 8007ff2:	f001 fd39 	bl	8009a68 <vPortFree>
 8007ff6:	e001      	b.n	8007ffc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d017      	beq.n	8008032 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	2200      	movs	r2, #0
 8008006:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800800a:	88fa      	ldrh	r2, [r7, #6]
 800800c:	2300      	movs	r3, #0
 800800e:	9303      	str	r3, [sp, #12]
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	9302      	str	r3, [sp, #8]
 8008014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008016:	9301      	str	r3, [sp, #4]
 8008018:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800801a:	9300      	str	r3, [sp, #0]
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	68b9      	ldr	r1, [r7, #8]
 8008020:	68f8      	ldr	r0, [r7, #12]
 8008022:	f000 f80f 	bl	8008044 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008026:	69f8      	ldr	r0, [r7, #28]
 8008028:	f000 f8b4 	bl	8008194 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800802c:	2301      	movs	r3, #1
 800802e:	61bb      	str	r3, [r7, #24]
 8008030:	e002      	b.n	8008038 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008032:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008036:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008038:	69bb      	ldr	r3, [r7, #24]
	}
 800803a:	4618      	mov	r0, r3
 800803c:	3720      	adds	r7, #32
 800803e:	46bd      	mov	sp, r7
 8008040:	bd80      	pop	{r7, pc}
	...

08008044 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b088      	sub	sp, #32
 8008048:	af00      	add	r7, sp, #0
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	60b9      	str	r1, [r7, #8]
 800804e:	607a      	str	r2, [r7, #4]
 8008050:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008052:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008054:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	009b      	lsls	r3, r3, #2
 800805a:	461a      	mov	r2, r3
 800805c:	21a5      	movs	r1, #165	@ 0xa5
 800805e:	f001 fe23 	bl	8009ca8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800806c:	3b01      	subs	r3, #1
 800806e:	009b      	lsls	r3, r3, #2
 8008070:	4413      	add	r3, r2
 8008072:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008074:	69bb      	ldr	r3, [r7, #24]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800807c:	69bb      	ldr	r3, [r7, #24]
 800807e:	f003 0307 	and.w	r3, r3, #7
 8008082:	2b00      	cmp	r3, #0
 8008084:	d00b      	beq.n	800809e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008086:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808a:	f383 8811 	msr	BASEPRI, r3
 800808e:	f3bf 8f6f 	isb	sy
 8008092:	f3bf 8f4f 	dsb	sy
 8008096:	617b      	str	r3, [r7, #20]
}
 8008098:	bf00      	nop
 800809a:	bf00      	nop
 800809c:	e7fd      	b.n	800809a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d01f      	beq.n	80080e4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080a4:	2300      	movs	r3, #0
 80080a6:	61fb      	str	r3, [r7, #28]
 80080a8:	e012      	b.n	80080d0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80080aa:	68ba      	ldr	r2, [r7, #8]
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	4413      	add	r3, r2
 80080b0:	7819      	ldrb	r1, [r3, #0]
 80080b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80080b4:	69fb      	ldr	r3, [r7, #28]
 80080b6:	4413      	add	r3, r2
 80080b8:	3334      	adds	r3, #52	@ 0x34
 80080ba:	460a      	mov	r2, r1
 80080bc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80080be:	68ba      	ldr	r2, [r7, #8]
 80080c0:	69fb      	ldr	r3, [r7, #28]
 80080c2:	4413      	add	r3, r2
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d006      	beq.n	80080d8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	3301      	adds	r3, #1
 80080ce:	61fb      	str	r3, [r7, #28]
 80080d0:	69fb      	ldr	r3, [r7, #28]
 80080d2:	2b0f      	cmp	r3, #15
 80080d4:	d9e9      	bls.n	80080aa <prvInitialiseNewTask+0x66>
 80080d6:	e000      	b.n	80080da <prvInitialiseNewTask+0x96>
			{
				break;
 80080d8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80080da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080e2:	e003      	b.n	80080ec <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080e6:	2200      	movs	r2, #0
 80080e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080ee:	2b37      	cmp	r3, #55	@ 0x37
 80080f0:	d901      	bls.n	80080f6 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080f2:	2337      	movs	r3, #55	@ 0x37
 80080f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80080fa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80080fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008100:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008104:	2200      	movs	r2, #0
 8008106:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008108:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800810a:	3304      	adds	r3, #4
 800810c:	4618      	mov	r0, r3
 800810e:	f7ff f965 	bl	80073dc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008114:	3318      	adds	r3, #24
 8008116:	4618      	mov	r0, r3
 8008118:	f7ff f960 	bl	80073dc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800811c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800811e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008120:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008124:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800812c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800812e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008130:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008132:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008134:	2200      	movs	r2, #0
 8008136:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800813a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800813c:	2200      	movs	r2, #0
 800813e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008144:	3354      	adds	r3, #84	@ 0x54
 8008146:	224c      	movs	r2, #76	@ 0x4c
 8008148:	2100      	movs	r1, #0
 800814a:	4618      	mov	r0, r3
 800814c:	f001 fdac 	bl	8009ca8 <memset>
 8008150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008152:	4a0d      	ldr	r2, [pc, #52]	@ (8008188 <prvInitialiseNewTask+0x144>)
 8008154:	659a      	str	r2, [r3, #88]	@ 0x58
 8008156:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008158:	4a0c      	ldr	r2, [pc, #48]	@ (800818c <prvInitialiseNewTask+0x148>)
 800815a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800815c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800815e:	4a0c      	ldr	r2, [pc, #48]	@ (8008190 <prvInitialiseNewTask+0x14c>)
 8008160:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008162:	683a      	ldr	r2, [r7, #0]
 8008164:	68f9      	ldr	r1, [r7, #12]
 8008166:	69b8      	ldr	r0, [r7, #24]
 8008168:	f001 f95a 	bl	8009420 <pxPortInitialiseStack>
 800816c:	4602      	mov	r2, r0
 800816e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008170:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008174:	2b00      	cmp	r3, #0
 8008176:	d002      	beq.n	800817e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008178:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800817a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800817c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800817e:	bf00      	nop
 8008180:	3720      	adds	r7, #32
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	20005300 	.word	0x20005300
 800818c:	20005368 	.word	0x20005368
 8008190:	200053d0 	.word	0x200053d0

08008194 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800819c:	f001 fa74 	bl	8009688 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80081a0:	4b2d      	ldr	r3, [pc, #180]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	3301      	adds	r3, #1
 80081a6:	4a2c      	ldr	r2, [pc, #176]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081a8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80081aa:	4b2c      	ldr	r3, [pc, #176]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d109      	bne.n	80081c6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80081b2:	4a2a      	ldr	r2, [pc, #168]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80081b8:	4b27      	ldr	r3, [pc, #156]	@ (8008258 <prvAddNewTaskToReadyList+0xc4>)
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d110      	bne.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80081c0:	f000 fc2e 	bl	8008a20 <prvInitialiseTaskLists>
 80081c4:	e00d      	b.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80081c6:	4b26      	ldr	r3, [pc, #152]	@ (8008260 <prvAddNewTaskToReadyList+0xcc>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d109      	bne.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80081ce:	4b23      	ldr	r3, [pc, #140]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80081d8:	429a      	cmp	r2, r3
 80081da:	d802      	bhi.n	80081e2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80081dc:	4a1f      	ldr	r2, [pc, #124]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80081e2:	4b20      	ldr	r3, [pc, #128]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	3301      	adds	r3, #1
 80081e8:	4a1e      	ldr	r2, [pc, #120]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081ea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80081ec:	4b1d      	ldr	r3, [pc, #116]	@ (8008264 <prvAddNewTaskToReadyList+0xd0>)
 80081ee:	681a      	ldr	r2, [r3, #0]
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081f8:	4b1b      	ldr	r3, [pc, #108]	@ (8008268 <prvAddNewTaskToReadyList+0xd4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	429a      	cmp	r2, r3
 80081fe:	d903      	bls.n	8008208 <prvAddNewTaskToReadyList+0x74>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008204:	4a18      	ldr	r2, [pc, #96]	@ (8008268 <prvAddNewTaskToReadyList+0xd4>)
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800820c:	4613      	mov	r3, r2
 800820e:	009b      	lsls	r3, r3, #2
 8008210:	4413      	add	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4a15      	ldr	r2, [pc, #84]	@ (800826c <prvAddNewTaskToReadyList+0xd8>)
 8008216:	441a      	add	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	3304      	adds	r3, #4
 800821c:	4619      	mov	r1, r3
 800821e:	4610      	mov	r0, r2
 8008220:	f7ff f8e9 	bl	80073f6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008224:	f001 fa62 	bl	80096ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008228:	4b0d      	ldr	r3, [pc, #52]	@ (8008260 <prvAddNewTaskToReadyList+0xcc>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d00e      	beq.n	800824e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008230:	4b0a      	ldr	r3, [pc, #40]	@ (800825c <prvAddNewTaskToReadyList+0xc8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800823a:	429a      	cmp	r2, r3
 800823c:	d207      	bcs.n	800824e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800823e:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <prvAddNewTaskToReadyList+0xdc>)
 8008240:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008244:	601a      	str	r2, [r3, #0]
 8008246:	f3bf 8f4f 	dsb	sy
 800824a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800824e:	bf00      	nop
 8008250:	3708      	adds	r7, #8
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20001580 	.word	0x20001580
 800825c:	200010ac 	.word	0x200010ac
 8008260:	2000158c 	.word	0x2000158c
 8008264:	2000159c 	.word	0x2000159c
 8008268:	20001588 	.word	0x20001588
 800826c:	200010b0 	.word	0x200010b0
 8008270:	e000ed04 	.word	0xe000ed04

08008274 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800827c:	2300      	movs	r3, #0
 800827e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d018      	beq.n	80082b8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008286:	4b14      	ldr	r3, [pc, #80]	@ (80082d8 <vTaskDelay+0x64>)
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d00b      	beq.n	80082a6 <vTaskDelay+0x32>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	60bb      	str	r3, [r7, #8]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80082a6:	f000 f88b 	bl	80083c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80082aa:	2100      	movs	r1, #0
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 fd09 	bl	8008cc4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80082b2:	f000 f893 	bl	80083dc <xTaskResumeAll>
 80082b6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d107      	bne.n	80082ce <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80082be:	4b07      	ldr	r3, [pc, #28]	@ (80082dc <vTaskDelay+0x68>)
 80082c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082c4:	601a      	str	r2, [r3, #0]
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80082ce:	bf00      	nop
 80082d0:	3710      	adds	r7, #16
 80082d2:	46bd      	mov	sp, r7
 80082d4:	bd80      	pop	{r7, pc}
 80082d6:	bf00      	nop
 80082d8:	200015a8 	.word	0x200015a8
 80082dc:	e000ed04 	.word	0xe000ed04

080082e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	@ 0x28
 80082e4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80082e6:	2300      	movs	r3, #0
 80082e8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80082ea:	2300      	movs	r3, #0
 80082ec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80082ee:	463a      	mov	r2, r7
 80082f0:	1d39      	adds	r1, r7, #4
 80082f2:	f107 0308 	add.w	r3, r7, #8
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7ff f81c 	bl	8007334 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80082fc:	6839      	ldr	r1, [r7, #0]
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	9202      	str	r2, [sp, #8]
 8008304:	9301      	str	r3, [sp, #4]
 8008306:	2300      	movs	r3, #0
 8008308:	9300      	str	r3, [sp, #0]
 800830a:	2300      	movs	r3, #0
 800830c:	460a      	mov	r2, r1
 800830e:	4924      	ldr	r1, [pc, #144]	@ (80083a0 <vTaskStartScheduler+0xc0>)
 8008310:	4824      	ldr	r0, [pc, #144]	@ (80083a4 <vTaskStartScheduler+0xc4>)
 8008312:	f7ff fdf1 	bl	8007ef8 <xTaskCreateStatic>
 8008316:	4603      	mov	r3, r0
 8008318:	4a23      	ldr	r2, [pc, #140]	@ (80083a8 <vTaskStartScheduler+0xc8>)
 800831a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800831c:	4b22      	ldr	r3, [pc, #136]	@ (80083a8 <vTaskStartScheduler+0xc8>)
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d002      	beq.n	800832a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008324:	2301      	movs	r3, #1
 8008326:	617b      	str	r3, [r7, #20]
 8008328:	e001      	b.n	800832e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800832a:	2300      	movs	r3, #0
 800832c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800832e:	697b      	ldr	r3, [r7, #20]
 8008330:	2b01      	cmp	r3, #1
 8008332:	d102      	bne.n	800833a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008334:	f000 fd1a 	bl	8008d6c <xTimerCreateTimerTask>
 8008338:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	2b01      	cmp	r3, #1
 800833e:	d11b      	bne.n	8008378 <vTaskStartScheduler+0x98>
	__asm volatile
 8008340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008344:	f383 8811 	msr	BASEPRI, r3
 8008348:	f3bf 8f6f 	isb	sy
 800834c:	f3bf 8f4f 	dsb	sy
 8008350:	613b      	str	r3, [r7, #16]
}
 8008352:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008354:	4b15      	ldr	r3, [pc, #84]	@ (80083ac <vTaskStartScheduler+0xcc>)
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	3354      	adds	r3, #84	@ 0x54
 800835a:	4a15      	ldr	r2, [pc, #84]	@ (80083b0 <vTaskStartScheduler+0xd0>)
 800835c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800835e:	4b15      	ldr	r3, [pc, #84]	@ (80083b4 <vTaskStartScheduler+0xd4>)
 8008360:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008364:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008366:	4b14      	ldr	r3, [pc, #80]	@ (80083b8 <vTaskStartScheduler+0xd8>)
 8008368:	2201      	movs	r2, #1
 800836a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800836c:	4b13      	ldr	r3, [pc, #76]	@ (80083bc <vTaskStartScheduler+0xdc>)
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008372:	f001 f8e5 	bl	8009540 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008376:	e00f      	b.n	8008398 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008378:	697b      	ldr	r3, [r7, #20]
 800837a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800837e:	d10b      	bne.n	8008398 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008384:	f383 8811 	msr	BASEPRI, r3
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	f3bf 8f4f 	dsb	sy
 8008390:	60fb      	str	r3, [r7, #12]
}
 8008392:	bf00      	nop
 8008394:	bf00      	nop
 8008396:	e7fd      	b.n	8008394 <vTaskStartScheduler+0xb4>
}
 8008398:	bf00      	nop
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	08009f70 	.word	0x08009f70
 80083a4:	080089f1 	.word	0x080089f1
 80083a8:	200015a4 	.word	0x200015a4
 80083ac:	200010ac 	.word	0x200010ac
 80083b0:	20000010 	.word	0x20000010
 80083b4:	200015a0 	.word	0x200015a0
 80083b8:	2000158c 	.word	0x2000158c
 80083bc:	20001584 	.word	0x20001584

080083c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80083c4:	4b04      	ldr	r3, [pc, #16]	@ (80083d8 <vTaskSuspendAll+0x18>)
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3301      	adds	r3, #1
 80083ca:	4a03      	ldr	r2, [pc, #12]	@ (80083d8 <vTaskSuspendAll+0x18>)
 80083cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80083ce:	bf00      	nop
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr
 80083d8:	200015a8 	.word	0x200015a8

080083dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80083e2:	2300      	movs	r3, #0
 80083e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80083ea:	4b42      	ldr	r3, [pc, #264]	@ (80084f4 <xTaskResumeAll+0x118>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d10b      	bne.n	800840a <xTaskResumeAll+0x2e>
	__asm volatile
 80083f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f6:	f383 8811 	msr	BASEPRI, r3
 80083fa:	f3bf 8f6f 	isb	sy
 80083fe:	f3bf 8f4f 	dsb	sy
 8008402:	603b      	str	r3, [r7, #0]
}
 8008404:	bf00      	nop
 8008406:	bf00      	nop
 8008408:	e7fd      	b.n	8008406 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800840a:	f001 f93d 	bl	8009688 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800840e:	4b39      	ldr	r3, [pc, #228]	@ (80084f4 <xTaskResumeAll+0x118>)
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3b01      	subs	r3, #1
 8008414:	4a37      	ldr	r2, [pc, #220]	@ (80084f4 <xTaskResumeAll+0x118>)
 8008416:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008418:	4b36      	ldr	r3, [pc, #216]	@ (80084f4 <xTaskResumeAll+0x118>)
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d162      	bne.n	80084e6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008420:	4b35      	ldr	r3, [pc, #212]	@ (80084f8 <xTaskResumeAll+0x11c>)
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d05e      	beq.n	80084e6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008428:	e02f      	b.n	800848a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800842a:	4b34      	ldr	r3, [pc, #208]	@ (80084fc <xTaskResumeAll+0x120>)
 800842c:	68db      	ldr	r3, [r3, #12]
 800842e:	68db      	ldr	r3, [r3, #12]
 8008430:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3318      	adds	r3, #24
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff f83a 	bl	80074b0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	3304      	adds	r3, #4
 8008440:	4618      	mov	r0, r3
 8008442:	f7ff f835 	bl	80074b0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800844a:	4b2d      	ldr	r3, [pc, #180]	@ (8008500 <xTaskResumeAll+0x124>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	429a      	cmp	r2, r3
 8008450:	d903      	bls.n	800845a <xTaskResumeAll+0x7e>
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008456:	4a2a      	ldr	r2, [pc, #168]	@ (8008500 <xTaskResumeAll+0x124>)
 8008458:	6013      	str	r3, [r2, #0]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800845e:	4613      	mov	r3, r2
 8008460:	009b      	lsls	r3, r3, #2
 8008462:	4413      	add	r3, r2
 8008464:	009b      	lsls	r3, r3, #2
 8008466:	4a27      	ldr	r2, [pc, #156]	@ (8008504 <xTaskResumeAll+0x128>)
 8008468:	441a      	add	r2, r3
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	3304      	adds	r3, #4
 800846e:	4619      	mov	r1, r3
 8008470:	4610      	mov	r0, r2
 8008472:	f7fe ffc0 	bl	80073f6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800847a:	4b23      	ldr	r3, [pc, #140]	@ (8008508 <xTaskResumeAll+0x12c>)
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008480:	429a      	cmp	r2, r3
 8008482:	d302      	bcc.n	800848a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8008484:	4b21      	ldr	r3, [pc, #132]	@ (800850c <xTaskResumeAll+0x130>)
 8008486:	2201      	movs	r2, #1
 8008488:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800848a:	4b1c      	ldr	r3, [pc, #112]	@ (80084fc <xTaskResumeAll+0x120>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d1cb      	bne.n	800842a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d001      	beq.n	800849c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008498:	f000 fb66 	bl	8008b68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800849c:	4b1c      	ldr	r3, [pc, #112]	@ (8008510 <xTaskResumeAll+0x134>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d010      	beq.n	80084ca <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80084a8:	f000 f846 	bl	8008538 <xTaskIncrementTick>
 80084ac:	4603      	mov	r3, r0
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d002      	beq.n	80084b8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80084b2:	4b16      	ldr	r3, [pc, #88]	@ (800850c <xTaskResumeAll+0x130>)
 80084b4:	2201      	movs	r2, #1
 80084b6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	3b01      	subs	r3, #1
 80084bc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d1f1      	bne.n	80084a8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80084c4:	4b12      	ldr	r3, [pc, #72]	@ (8008510 <xTaskResumeAll+0x134>)
 80084c6:	2200      	movs	r2, #0
 80084c8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80084ca:	4b10      	ldr	r3, [pc, #64]	@ (800850c <xTaskResumeAll+0x130>)
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80084d2:	2301      	movs	r3, #1
 80084d4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80084d6:	4b0f      	ldr	r3, [pc, #60]	@ (8008514 <xTaskResumeAll+0x138>)
 80084d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80084dc:	601a      	str	r2, [r3, #0]
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80084e6:	f001 f901 	bl	80096ec <vPortExitCritical>

	return xAlreadyYielded;
 80084ea:	68bb      	ldr	r3, [r7, #8]
}
 80084ec:	4618      	mov	r0, r3
 80084ee:	3710      	adds	r7, #16
 80084f0:	46bd      	mov	sp, r7
 80084f2:	bd80      	pop	{r7, pc}
 80084f4:	200015a8 	.word	0x200015a8
 80084f8:	20001580 	.word	0x20001580
 80084fc:	20001540 	.word	0x20001540
 8008500:	20001588 	.word	0x20001588
 8008504:	200010b0 	.word	0x200010b0
 8008508:	200010ac 	.word	0x200010ac
 800850c:	20001594 	.word	0x20001594
 8008510:	20001590 	.word	0x20001590
 8008514:	e000ed04 	.word	0xe000ed04

08008518 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800851e:	4b05      	ldr	r3, [pc, #20]	@ (8008534 <xTaskGetTickCount+0x1c>)
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008524:	687b      	ldr	r3, [r7, #4]
}
 8008526:	4618      	mov	r0, r3
 8008528:	370c      	adds	r7, #12
 800852a:	46bd      	mov	sp, r7
 800852c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008530:	4770      	bx	lr
 8008532:	bf00      	nop
 8008534:	20001584 	.word	0x20001584

08008538 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b086      	sub	sp, #24
 800853c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800853e:	2300      	movs	r3, #0
 8008540:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008542:	4b4f      	ldr	r3, [pc, #316]	@ (8008680 <xTaskIncrementTick+0x148>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	2b00      	cmp	r3, #0
 8008548:	f040 8090 	bne.w	800866c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800854c:	4b4d      	ldr	r3, [pc, #308]	@ (8008684 <xTaskIncrementTick+0x14c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008554:	4a4b      	ldr	r2, [pc, #300]	@ (8008684 <xTaskIncrementTick+0x14c>)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800855a:	693b      	ldr	r3, [r7, #16]
 800855c:	2b00      	cmp	r3, #0
 800855e:	d121      	bne.n	80085a4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008560:	4b49      	ldr	r3, [pc, #292]	@ (8008688 <xTaskIncrementTick+0x150>)
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00b      	beq.n	8008582 <xTaskIncrementTick+0x4a>
	__asm volatile
 800856a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800856e:	f383 8811 	msr	BASEPRI, r3
 8008572:	f3bf 8f6f 	isb	sy
 8008576:	f3bf 8f4f 	dsb	sy
 800857a:	603b      	str	r3, [r7, #0]
}
 800857c:	bf00      	nop
 800857e:	bf00      	nop
 8008580:	e7fd      	b.n	800857e <xTaskIncrementTick+0x46>
 8008582:	4b41      	ldr	r3, [pc, #260]	@ (8008688 <xTaskIncrementTick+0x150>)
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60fb      	str	r3, [r7, #12]
 8008588:	4b40      	ldr	r3, [pc, #256]	@ (800868c <xTaskIncrementTick+0x154>)
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a3e      	ldr	r2, [pc, #248]	@ (8008688 <xTaskIncrementTick+0x150>)
 800858e:	6013      	str	r3, [r2, #0]
 8008590:	4a3e      	ldr	r2, [pc, #248]	@ (800868c <xTaskIncrementTick+0x154>)
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6013      	str	r3, [r2, #0]
 8008596:	4b3e      	ldr	r3, [pc, #248]	@ (8008690 <xTaskIncrementTick+0x158>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3301      	adds	r3, #1
 800859c:	4a3c      	ldr	r2, [pc, #240]	@ (8008690 <xTaskIncrementTick+0x158>)
 800859e:	6013      	str	r3, [r2, #0]
 80085a0:	f000 fae2 	bl	8008b68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80085a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008694 <xTaskIncrementTick+0x15c>)
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	429a      	cmp	r2, r3
 80085ac:	d349      	bcc.n	8008642 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80085ae:	4b36      	ldr	r3, [pc, #216]	@ (8008688 <xTaskIncrementTick+0x150>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d104      	bne.n	80085c2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085b8:	4b36      	ldr	r3, [pc, #216]	@ (8008694 <xTaskIncrementTick+0x15c>)
 80085ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80085be:	601a      	str	r2, [r3, #0]
					break;
 80085c0:	e03f      	b.n	8008642 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085c2:	4b31      	ldr	r3, [pc, #196]	@ (8008688 <xTaskIncrementTick+0x150>)
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	68db      	ldr	r3, [r3, #12]
 80085ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	429a      	cmp	r2, r3
 80085d8:	d203      	bcs.n	80085e2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80085da:	4a2e      	ldr	r2, [pc, #184]	@ (8008694 <xTaskIncrementTick+0x15c>)
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80085e0:	e02f      	b.n	8008642 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80085e2:	68bb      	ldr	r3, [r7, #8]
 80085e4:	3304      	adds	r3, #4
 80085e6:	4618      	mov	r0, r3
 80085e8:	f7fe ff62 	bl	80074b0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d004      	beq.n	80085fe <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	3318      	adds	r3, #24
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7fe ff59 	bl	80074b0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008602:	4b25      	ldr	r3, [pc, #148]	@ (8008698 <xTaskIncrementTick+0x160>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	429a      	cmp	r2, r3
 8008608:	d903      	bls.n	8008612 <xTaskIncrementTick+0xda>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800860e:	4a22      	ldr	r2, [pc, #136]	@ (8008698 <xTaskIncrementTick+0x160>)
 8008610:	6013      	str	r3, [r2, #0]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008616:	4613      	mov	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4413      	add	r3, r2
 800861c:	009b      	lsls	r3, r3, #2
 800861e:	4a1f      	ldr	r2, [pc, #124]	@ (800869c <xTaskIncrementTick+0x164>)
 8008620:	441a      	add	r2, r3
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	3304      	adds	r3, #4
 8008626:	4619      	mov	r1, r3
 8008628:	4610      	mov	r0, r2
 800862a:	f7fe fee4 	bl	80073f6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008632:	4b1b      	ldr	r3, [pc, #108]	@ (80086a0 <xTaskIncrementTick+0x168>)
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008638:	429a      	cmp	r2, r3
 800863a:	d3b8      	bcc.n	80085ae <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800863c:	2301      	movs	r3, #1
 800863e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008640:	e7b5      	b.n	80085ae <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008642:	4b17      	ldr	r3, [pc, #92]	@ (80086a0 <xTaskIncrementTick+0x168>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008648:	4914      	ldr	r1, [pc, #80]	@ (800869c <xTaskIncrementTick+0x164>)
 800864a:	4613      	mov	r3, r2
 800864c:	009b      	lsls	r3, r3, #2
 800864e:	4413      	add	r3, r2
 8008650:	009b      	lsls	r3, r3, #2
 8008652:	440b      	add	r3, r1
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	2b01      	cmp	r3, #1
 8008658:	d901      	bls.n	800865e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800865a:	2301      	movs	r3, #1
 800865c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800865e:	4b11      	ldr	r3, [pc, #68]	@ (80086a4 <xTaskIncrementTick+0x16c>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	2b00      	cmp	r3, #0
 8008664:	d007      	beq.n	8008676 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8008666:	2301      	movs	r3, #1
 8008668:	617b      	str	r3, [r7, #20]
 800866a:	e004      	b.n	8008676 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800866c:	4b0e      	ldr	r3, [pc, #56]	@ (80086a8 <xTaskIncrementTick+0x170>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3301      	adds	r3, #1
 8008672:	4a0d      	ldr	r2, [pc, #52]	@ (80086a8 <xTaskIncrementTick+0x170>)
 8008674:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008676:	697b      	ldr	r3, [r7, #20]
}
 8008678:	4618      	mov	r0, r3
 800867a:	3718      	adds	r7, #24
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	200015a8 	.word	0x200015a8
 8008684:	20001584 	.word	0x20001584
 8008688:	20001538 	.word	0x20001538
 800868c:	2000153c 	.word	0x2000153c
 8008690:	20001598 	.word	0x20001598
 8008694:	200015a0 	.word	0x200015a0
 8008698:	20001588 	.word	0x20001588
 800869c:	200010b0 	.word	0x200010b0
 80086a0:	200010ac 	.word	0x200010ac
 80086a4:	20001594 	.word	0x20001594
 80086a8:	20001590 	.word	0x20001590

080086ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80086b2:	4b2b      	ldr	r3, [pc, #172]	@ (8008760 <vTaskSwitchContext+0xb4>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d003      	beq.n	80086c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80086ba:	4b2a      	ldr	r3, [pc, #168]	@ (8008764 <vTaskSwitchContext+0xb8>)
 80086bc:	2201      	movs	r2, #1
 80086be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80086c0:	e047      	b.n	8008752 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80086c2:	4b28      	ldr	r3, [pc, #160]	@ (8008764 <vTaskSwitchContext+0xb8>)
 80086c4:	2200      	movs	r2, #0
 80086c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086c8:	4b27      	ldr	r3, [pc, #156]	@ (8008768 <vTaskSwitchContext+0xbc>)
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	e011      	b.n	80086f4 <vTaskSwitchContext+0x48>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d10b      	bne.n	80086ee <vTaskSwitchContext+0x42>
	__asm volatile
 80086d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086da:	f383 8811 	msr	BASEPRI, r3
 80086de:	f3bf 8f6f 	isb	sy
 80086e2:	f3bf 8f4f 	dsb	sy
 80086e6:	607b      	str	r3, [r7, #4]
}
 80086e8:	bf00      	nop
 80086ea:	bf00      	nop
 80086ec:	e7fd      	b.n	80086ea <vTaskSwitchContext+0x3e>
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3b01      	subs	r3, #1
 80086f2:	60fb      	str	r3, [r7, #12]
 80086f4:	491d      	ldr	r1, [pc, #116]	@ (800876c <vTaskSwitchContext+0xc0>)
 80086f6:	68fa      	ldr	r2, [r7, #12]
 80086f8:	4613      	mov	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4413      	add	r3, r2
 80086fe:	009b      	lsls	r3, r3, #2
 8008700:	440b      	add	r3, r1
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d0e3      	beq.n	80086d0 <vTaskSwitchContext+0x24>
 8008708:	68fa      	ldr	r2, [r7, #12]
 800870a:	4613      	mov	r3, r2
 800870c:	009b      	lsls	r3, r3, #2
 800870e:	4413      	add	r3, r2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4a16      	ldr	r2, [pc, #88]	@ (800876c <vTaskSwitchContext+0xc0>)
 8008714:	4413      	add	r3, r2
 8008716:	60bb      	str	r3, [r7, #8]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	685a      	ldr	r2, [r3, #4]
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	605a      	str	r2, [r3, #4]
 8008722:	68bb      	ldr	r3, [r7, #8]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	3308      	adds	r3, #8
 800872a:	429a      	cmp	r2, r3
 800872c:	d104      	bne.n	8008738 <vTaskSwitchContext+0x8c>
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	685b      	ldr	r3, [r3, #4]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	605a      	str	r2, [r3, #4]
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	685b      	ldr	r3, [r3, #4]
 800873c:	68db      	ldr	r3, [r3, #12]
 800873e:	4a0c      	ldr	r2, [pc, #48]	@ (8008770 <vTaskSwitchContext+0xc4>)
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	4a09      	ldr	r2, [pc, #36]	@ (8008768 <vTaskSwitchContext+0xbc>)
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008748:	4b09      	ldr	r3, [pc, #36]	@ (8008770 <vTaskSwitchContext+0xc4>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	3354      	adds	r3, #84	@ 0x54
 800874e:	4a09      	ldr	r2, [pc, #36]	@ (8008774 <vTaskSwitchContext+0xc8>)
 8008750:	6013      	str	r3, [r2, #0]
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	200015a8 	.word	0x200015a8
 8008764:	20001594 	.word	0x20001594
 8008768:	20001588 	.word	0x20001588
 800876c:	200010b0 	.word	0x200010b0
 8008770:	200010ac 	.word	0x200010ac
 8008774:	20000010 	.word	0x20000010

08008778 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d10b      	bne.n	80087a0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800878c:	f383 8811 	msr	BASEPRI, r3
 8008790:	f3bf 8f6f 	isb	sy
 8008794:	f3bf 8f4f 	dsb	sy
 8008798:	60fb      	str	r3, [r7, #12]
}
 800879a:	bf00      	nop
 800879c:	bf00      	nop
 800879e:	e7fd      	b.n	800879c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087a0:	4b07      	ldr	r3, [pc, #28]	@ (80087c0 <vTaskPlaceOnEventList+0x48>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3318      	adds	r3, #24
 80087a6:	4619      	mov	r1, r3
 80087a8:	6878      	ldr	r0, [r7, #4]
 80087aa:	f7fe fe48 	bl	800743e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80087ae:	2101      	movs	r1, #1
 80087b0:	6838      	ldr	r0, [r7, #0]
 80087b2:	f000 fa87 	bl	8008cc4 <prvAddCurrentTaskToDelayedList>
}
 80087b6:	bf00      	nop
 80087b8:	3710      	adds	r7, #16
 80087ba:	46bd      	mov	sp, r7
 80087bc:	bd80      	pop	{r7, pc}
 80087be:	bf00      	nop
 80087c0:	200010ac 	.word	0x200010ac

080087c4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b086      	sub	sp, #24
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	60f8      	str	r0, [r7, #12]
 80087cc:	60b9      	str	r1, [r7, #8]
 80087ce:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d10b      	bne.n	80087ee <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80087d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087da:	f383 8811 	msr	BASEPRI, r3
 80087de:	f3bf 8f6f 	isb	sy
 80087e2:	f3bf 8f4f 	dsb	sy
 80087e6:	617b      	str	r3, [r7, #20]
}
 80087e8:	bf00      	nop
 80087ea:	bf00      	nop
 80087ec:	e7fd      	b.n	80087ea <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80087ee:	4b0a      	ldr	r3, [pc, #40]	@ (8008818 <vTaskPlaceOnEventListRestricted+0x54>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	3318      	adds	r3, #24
 80087f4:	4619      	mov	r1, r3
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7fe fdfd 	bl	80073f6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d002      	beq.n	8008808 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8008802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008806:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008808:	6879      	ldr	r1, [r7, #4]
 800880a:	68b8      	ldr	r0, [r7, #8]
 800880c:	f000 fa5a 	bl	8008cc4 <prvAddCurrentTaskToDelayedList>
	}
 8008810:	bf00      	nop
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}
 8008818:	200010ac 	.word	0x200010ac

0800881c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800881c:	b580      	push	{r7, lr}
 800881e:	b086      	sub	sp, #24
 8008820:	af00      	add	r7, sp, #0
 8008822:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	68db      	ldr	r3, [r3, #12]
 8008828:	68db      	ldr	r3, [r3, #12]
 800882a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d10b      	bne.n	800884a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8008832:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008836:	f383 8811 	msr	BASEPRI, r3
 800883a:	f3bf 8f6f 	isb	sy
 800883e:	f3bf 8f4f 	dsb	sy
 8008842:	60fb      	str	r3, [r7, #12]
}
 8008844:	bf00      	nop
 8008846:	bf00      	nop
 8008848:	e7fd      	b.n	8008846 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	3318      	adds	r3, #24
 800884e:	4618      	mov	r0, r3
 8008850:	f7fe fe2e 	bl	80074b0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008854:	4b1d      	ldr	r3, [pc, #116]	@ (80088cc <xTaskRemoveFromEventList+0xb0>)
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d11d      	bne.n	8008898 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	3304      	adds	r3, #4
 8008860:	4618      	mov	r0, r3
 8008862:	f7fe fe25 	bl	80074b0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800886a:	4b19      	ldr	r3, [pc, #100]	@ (80088d0 <xTaskRemoveFromEventList+0xb4>)
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	429a      	cmp	r2, r3
 8008870:	d903      	bls.n	800887a <xTaskRemoveFromEventList+0x5e>
 8008872:	693b      	ldr	r3, [r7, #16]
 8008874:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008876:	4a16      	ldr	r2, [pc, #88]	@ (80088d0 <xTaskRemoveFromEventList+0xb4>)
 8008878:	6013      	str	r3, [r2, #0]
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800887e:	4613      	mov	r3, r2
 8008880:	009b      	lsls	r3, r3, #2
 8008882:	4413      	add	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4a13      	ldr	r2, [pc, #76]	@ (80088d4 <xTaskRemoveFromEventList+0xb8>)
 8008888:	441a      	add	r2, r3
 800888a:	693b      	ldr	r3, [r7, #16]
 800888c:	3304      	adds	r3, #4
 800888e:	4619      	mov	r1, r3
 8008890:	4610      	mov	r0, r2
 8008892:	f7fe fdb0 	bl	80073f6 <vListInsertEnd>
 8008896:	e005      	b.n	80088a4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	3318      	adds	r3, #24
 800889c:	4619      	mov	r1, r3
 800889e:	480e      	ldr	r0, [pc, #56]	@ (80088d8 <xTaskRemoveFromEventList+0xbc>)
 80088a0:	f7fe fda9 	bl	80073f6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a8:	4b0c      	ldr	r3, [pc, #48]	@ (80088dc <xTaskRemoveFromEventList+0xc0>)
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088ae:	429a      	cmp	r2, r3
 80088b0:	d905      	bls.n	80088be <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80088b2:	2301      	movs	r3, #1
 80088b4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80088b6:	4b0a      	ldr	r3, [pc, #40]	@ (80088e0 <xTaskRemoveFromEventList+0xc4>)
 80088b8:	2201      	movs	r2, #1
 80088ba:	601a      	str	r2, [r3, #0]
 80088bc:	e001      	b.n	80088c2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80088c2:	697b      	ldr	r3, [r7, #20]
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3718      	adds	r7, #24
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}
 80088cc:	200015a8 	.word	0x200015a8
 80088d0:	20001588 	.word	0x20001588
 80088d4:	200010b0 	.word	0x200010b0
 80088d8:	20001540 	.word	0x20001540
 80088dc:	200010ac 	.word	0x200010ac
 80088e0:	20001594 	.word	0x20001594

080088e4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80088e4:	b480      	push	{r7}
 80088e6:	b083      	sub	sp, #12
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80088ec:	4b06      	ldr	r3, [pc, #24]	@ (8008908 <vTaskInternalSetTimeOutState+0x24>)
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80088f4:	4b05      	ldr	r3, [pc, #20]	@ (800890c <vTaskInternalSetTimeOutState+0x28>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	605a      	str	r2, [r3, #4]
}
 80088fc:	bf00      	nop
 80088fe:	370c      	adds	r7, #12
 8008900:	46bd      	mov	sp, r7
 8008902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008906:	4770      	bx	lr
 8008908:	20001598 	.word	0x20001598
 800890c:	20001584 	.word	0x20001584

08008910 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008910:	b580      	push	{r7, lr}
 8008912:	b088      	sub	sp, #32
 8008914:	af00      	add	r7, sp, #0
 8008916:	6078      	str	r0, [r7, #4]
 8008918:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d10b      	bne.n	8008938 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8008920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008924:	f383 8811 	msr	BASEPRI, r3
 8008928:	f3bf 8f6f 	isb	sy
 800892c:	f3bf 8f4f 	dsb	sy
 8008930:	613b      	str	r3, [r7, #16]
}
 8008932:	bf00      	nop
 8008934:	bf00      	nop
 8008936:	e7fd      	b.n	8008934 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d10b      	bne.n	8008956 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800893e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008942:	f383 8811 	msr	BASEPRI, r3
 8008946:	f3bf 8f6f 	isb	sy
 800894a:	f3bf 8f4f 	dsb	sy
 800894e:	60fb      	str	r3, [r7, #12]
}
 8008950:	bf00      	nop
 8008952:	bf00      	nop
 8008954:	e7fd      	b.n	8008952 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8008956:	f000 fe97 	bl	8009688 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800895a:	4b1d      	ldr	r3, [pc, #116]	@ (80089d0 <xTaskCheckForTimeOut+0xc0>)
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	685b      	ldr	r3, [r3, #4]
 8008964:	69ba      	ldr	r2, [r7, #24]
 8008966:	1ad3      	subs	r3, r2, r3
 8008968:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800896a:	683b      	ldr	r3, [r7, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008972:	d102      	bne.n	800897a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008974:	2300      	movs	r3, #0
 8008976:	61fb      	str	r3, [r7, #28]
 8008978:	e023      	b.n	80089c2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681a      	ldr	r2, [r3, #0]
 800897e:	4b15      	ldr	r3, [pc, #84]	@ (80089d4 <xTaskCheckForTimeOut+0xc4>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	429a      	cmp	r2, r3
 8008984:	d007      	beq.n	8008996 <xTaskCheckForTimeOut+0x86>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	69ba      	ldr	r2, [r7, #24]
 800898c:	429a      	cmp	r2, r3
 800898e:	d302      	bcc.n	8008996 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008990:	2301      	movs	r3, #1
 8008992:	61fb      	str	r3, [r7, #28]
 8008994:	e015      	b.n	80089c2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	429a      	cmp	r2, r3
 800899e:	d20b      	bcs.n	80089b8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	697b      	ldr	r3, [r7, #20]
 80089a6:	1ad2      	subs	r2, r2, r3
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f7ff ff99 	bl	80088e4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80089b2:	2300      	movs	r3, #0
 80089b4:	61fb      	str	r3, [r7, #28]
 80089b6:	e004      	b.n	80089c2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	2200      	movs	r2, #0
 80089bc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80089be:	2301      	movs	r3, #1
 80089c0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80089c2:	f000 fe93 	bl	80096ec <vPortExitCritical>

	return xReturn;
 80089c6:	69fb      	ldr	r3, [r7, #28]
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3720      	adds	r7, #32
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20001584 	.word	0x20001584
 80089d4:	20001598 	.word	0x20001598

080089d8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80089dc:	4b03      	ldr	r3, [pc, #12]	@ (80089ec <vTaskMissedYield+0x14>)
 80089de:	2201      	movs	r2, #1
 80089e0:	601a      	str	r2, [r3, #0]
}
 80089e2:	bf00      	nop
 80089e4:	46bd      	mov	sp, r7
 80089e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ea:	4770      	bx	lr
 80089ec:	20001594 	.word	0x20001594

080089f0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b082      	sub	sp, #8
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80089f8:	f000 f852 	bl	8008aa0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80089fc:	4b06      	ldr	r3, [pc, #24]	@ (8008a18 <prvIdleTask+0x28>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d9f9      	bls.n	80089f8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a04:	4b05      	ldr	r3, [pc, #20]	@ (8008a1c <prvIdleTask+0x2c>)
 8008a06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a0a:	601a      	str	r2, [r3, #0]
 8008a0c:	f3bf 8f4f 	dsb	sy
 8008a10:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a14:	e7f0      	b.n	80089f8 <prvIdleTask+0x8>
 8008a16:	bf00      	nop
 8008a18:	200010b0 	.word	0x200010b0
 8008a1c:	e000ed04 	.word	0xe000ed04

08008a20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b082      	sub	sp, #8
 8008a24:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a26:	2300      	movs	r3, #0
 8008a28:	607b      	str	r3, [r7, #4]
 8008a2a:	e00c      	b.n	8008a46 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008a2c:	687a      	ldr	r2, [r7, #4]
 8008a2e:	4613      	mov	r3, r2
 8008a30:	009b      	lsls	r3, r3, #2
 8008a32:	4413      	add	r3, r2
 8008a34:	009b      	lsls	r3, r3, #2
 8008a36:	4a12      	ldr	r2, [pc, #72]	@ (8008a80 <prvInitialiseTaskLists+0x60>)
 8008a38:	4413      	add	r3, r2
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f7fe fcae 	bl	800739c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	3301      	adds	r3, #1
 8008a44:	607b      	str	r3, [r7, #4]
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2b37      	cmp	r3, #55	@ 0x37
 8008a4a:	d9ef      	bls.n	8008a2c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008a4c:	480d      	ldr	r0, [pc, #52]	@ (8008a84 <prvInitialiseTaskLists+0x64>)
 8008a4e:	f7fe fca5 	bl	800739c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008a52:	480d      	ldr	r0, [pc, #52]	@ (8008a88 <prvInitialiseTaskLists+0x68>)
 8008a54:	f7fe fca2 	bl	800739c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008a58:	480c      	ldr	r0, [pc, #48]	@ (8008a8c <prvInitialiseTaskLists+0x6c>)
 8008a5a:	f7fe fc9f 	bl	800739c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008a5e:	480c      	ldr	r0, [pc, #48]	@ (8008a90 <prvInitialiseTaskLists+0x70>)
 8008a60:	f7fe fc9c 	bl	800739c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008a64:	480b      	ldr	r0, [pc, #44]	@ (8008a94 <prvInitialiseTaskLists+0x74>)
 8008a66:	f7fe fc99 	bl	800739c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008a6a:	4b0b      	ldr	r3, [pc, #44]	@ (8008a98 <prvInitialiseTaskLists+0x78>)
 8008a6c:	4a05      	ldr	r2, [pc, #20]	@ (8008a84 <prvInitialiseTaskLists+0x64>)
 8008a6e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008a70:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <prvInitialiseTaskLists+0x7c>)
 8008a72:	4a05      	ldr	r2, [pc, #20]	@ (8008a88 <prvInitialiseTaskLists+0x68>)
 8008a74:	601a      	str	r2, [r3, #0]
}
 8008a76:	bf00      	nop
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
 8008a7e:	bf00      	nop
 8008a80:	200010b0 	.word	0x200010b0
 8008a84:	20001510 	.word	0x20001510
 8008a88:	20001524 	.word	0x20001524
 8008a8c:	20001540 	.word	0x20001540
 8008a90:	20001554 	.word	0x20001554
 8008a94:	2000156c 	.word	0x2000156c
 8008a98:	20001538 	.word	0x20001538
 8008a9c:	2000153c 	.word	0x2000153c

08008aa0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	b082      	sub	sp, #8
 8008aa4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008aa6:	e019      	b.n	8008adc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008aa8:	f000 fdee 	bl	8009688 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008aac:	4b10      	ldr	r3, [pc, #64]	@ (8008af0 <prvCheckTasksWaitingTermination+0x50>)
 8008aae:	68db      	ldr	r3, [r3, #12]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	3304      	adds	r3, #4
 8008ab8:	4618      	mov	r0, r3
 8008aba:	f7fe fcf9 	bl	80074b0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008abe:	4b0d      	ldr	r3, [pc, #52]	@ (8008af4 <prvCheckTasksWaitingTermination+0x54>)
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	3b01      	subs	r3, #1
 8008ac4:	4a0b      	ldr	r2, [pc, #44]	@ (8008af4 <prvCheckTasksWaitingTermination+0x54>)
 8008ac6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8008af8 <prvCheckTasksWaitingTermination+0x58>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3b01      	subs	r3, #1
 8008ace:	4a0a      	ldr	r2, [pc, #40]	@ (8008af8 <prvCheckTasksWaitingTermination+0x58>)
 8008ad0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ad2:	f000 fe0b 	bl	80096ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ad6:	6878      	ldr	r0, [r7, #4]
 8008ad8:	f000 f810 	bl	8008afc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008adc:	4b06      	ldr	r3, [pc, #24]	@ (8008af8 <prvCheckTasksWaitingTermination+0x58>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1e1      	bne.n	8008aa8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ae4:	bf00      	nop
 8008ae6:	bf00      	nop
 8008ae8:	3708      	adds	r7, #8
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20001554 	.word	0x20001554
 8008af4:	20001580 	.word	0x20001580
 8008af8:	20001568 	.word	0x20001568

08008afc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b084      	sub	sp, #16
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	3354      	adds	r3, #84	@ 0x54
 8008b08:	4618      	mov	r0, r3
 8008b0a:	f001 f8d5 	bl	8009cb8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d108      	bne.n	8008b2a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f000 ffa3 	bl	8009a68 <vPortFree>
				vPortFree( pxTCB );
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 ffa0 	bl	8009a68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b28:	e019      	b.n	8008b5e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d103      	bne.n	8008b3c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8008b34:	6878      	ldr	r0, [r7, #4]
 8008b36:	f000 ff97 	bl	8009a68 <vPortFree>
	}
 8008b3a:	e010      	b.n	8008b5e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8008b42:	2b02      	cmp	r3, #2
 8008b44:	d00b      	beq.n	8008b5e <prvDeleteTCB+0x62>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	60fb      	str	r3, [r7, #12]
}
 8008b58:	bf00      	nop
 8008b5a:	bf00      	nop
 8008b5c:	e7fd      	b.n	8008b5a <prvDeleteTCB+0x5e>
	}
 8008b5e:	bf00      	nop
 8008b60:	3710      	adds	r7, #16
 8008b62:	46bd      	mov	sp, r7
 8008b64:	bd80      	pop	{r7, pc}
	...

08008b68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b083      	sub	sp, #12
 8008b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008b6e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ba0 <prvResetNextTaskUnblockTime+0x38>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d104      	bne.n	8008b82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008b78:	4b0a      	ldr	r3, [pc, #40]	@ (8008ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8008b7a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008b7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008b80:	e008      	b.n	8008b94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b82:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <prvResetNextTaskUnblockTime+0x38>)
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	68db      	ldr	r3, [r3, #12]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	685b      	ldr	r3, [r3, #4]
 8008b90:	4a04      	ldr	r2, [pc, #16]	@ (8008ba4 <prvResetNextTaskUnblockTime+0x3c>)
 8008b92:	6013      	str	r3, [r2, #0]
}
 8008b94:	bf00      	nop
 8008b96:	370c      	adds	r7, #12
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9e:	4770      	bx	lr
 8008ba0:	20001538 	.word	0x20001538
 8008ba4:	200015a0 	.word	0x200015a0

08008ba8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008ba8:	b480      	push	{r7}
 8008baa:	b083      	sub	sp, #12
 8008bac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008bae:	4b0b      	ldr	r3, [pc, #44]	@ (8008bdc <xTaskGetSchedulerState+0x34>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d102      	bne.n	8008bbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	607b      	str	r3, [r7, #4]
 8008bba:	e008      	b.n	8008bce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bbc:	4b08      	ldr	r3, [pc, #32]	@ (8008be0 <xTaskGetSchedulerState+0x38>)
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d102      	bne.n	8008bca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	607b      	str	r3, [r7, #4]
 8008bc8:	e001      	b.n	8008bce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008bca:	2300      	movs	r3, #0
 8008bcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008bce:	687b      	ldr	r3, [r7, #4]
	}
 8008bd0:	4618      	mov	r0, r3
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr
 8008bdc:	2000158c 	.word	0x2000158c
 8008be0:	200015a8 	.word	0x200015a8

08008be4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b086      	sub	sp, #24
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d058      	beq.n	8008cac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8008cb8 <xTaskPriorityDisinherit+0xd4>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	429a      	cmp	r2, r3
 8008c02:	d00b      	beq.n	8008c1c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c08:	f383 8811 	msr	BASEPRI, r3
 8008c0c:	f3bf 8f6f 	isb	sy
 8008c10:	f3bf 8f4f 	dsb	sy
 8008c14:	60fb      	str	r3, [r7, #12]
}
 8008c16:	bf00      	nop
 8008c18:	bf00      	nop
 8008c1a:	e7fd      	b.n	8008c18 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c20:	2b00      	cmp	r3, #0
 8008c22:	d10b      	bne.n	8008c3c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c28:	f383 8811 	msr	BASEPRI, r3
 8008c2c:	f3bf 8f6f 	isb	sy
 8008c30:	f3bf 8f4f 	dsb	sy
 8008c34:	60bb      	str	r3, [r7, #8]
}
 8008c36:	bf00      	nop
 8008c38:	bf00      	nop
 8008c3a:	e7fd      	b.n	8008c38 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c40:	1e5a      	subs	r2, r3, #1
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008c46:	693b      	ldr	r3, [r7, #16]
 8008c48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c4e:	429a      	cmp	r2, r3
 8008c50:	d02c      	beq.n	8008cac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d128      	bne.n	8008cac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	3304      	adds	r3, #4
 8008c5e:	4618      	mov	r0, r3
 8008c60:	f7fe fc26 	bl	80074b0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008c64:	693b      	ldr	r3, [r7, #16]
 8008c66:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c70:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8008cbc <xTaskPriorityDisinherit+0xd8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	429a      	cmp	r2, r3
 8008c82:	d903      	bls.n	8008c8c <xTaskPriorityDisinherit+0xa8>
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c88:	4a0c      	ldr	r2, [pc, #48]	@ (8008cbc <xTaskPriorityDisinherit+0xd8>)
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008c90:	4613      	mov	r3, r2
 8008c92:	009b      	lsls	r3, r3, #2
 8008c94:	4413      	add	r3, r2
 8008c96:	009b      	lsls	r3, r3, #2
 8008c98:	4a09      	ldr	r2, [pc, #36]	@ (8008cc0 <xTaskPriorityDisinherit+0xdc>)
 8008c9a:	441a      	add	r2, r3
 8008c9c:	693b      	ldr	r3, [r7, #16]
 8008c9e:	3304      	adds	r3, #4
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	4610      	mov	r0, r2
 8008ca4:	f7fe fba7 	bl	80073f6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008ca8:	2301      	movs	r3, #1
 8008caa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008cac:	697b      	ldr	r3, [r7, #20]
	}
 8008cae:	4618      	mov	r0, r3
 8008cb0:	3718      	adds	r7, #24
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bd80      	pop	{r7, pc}
 8008cb6:	bf00      	nop
 8008cb8:	200010ac 	.word	0x200010ac
 8008cbc:	20001588 	.word	0x20001588
 8008cc0:	200010b0 	.word	0x200010b0

08008cc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008cce:	4b21      	ldr	r3, [pc, #132]	@ (8008d54 <prvAddCurrentTaskToDelayedList+0x90>)
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008cd4:	4b20      	ldr	r3, [pc, #128]	@ (8008d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	3304      	adds	r3, #4
 8008cda:	4618      	mov	r0, r3
 8008cdc:	f7fe fbe8 	bl	80074b0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008ce6:	d10a      	bne.n	8008cfe <prvAddCurrentTaskToDelayedList+0x3a>
 8008ce8:	683b      	ldr	r3, [r7, #0]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d007      	beq.n	8008cfe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cee:	4b1a      	ldr	r3, [pc, #104]	@ (8008d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	3304      	adds	r3, #4
 8008cf4:	4619      	mov	r1, r3
 8008cf6:	4819      	ldr	r0, [pc, #100]	@ (8008d5c <prvAddCurrentTaskToDelayedList+0x98>)
 8008cf8:	f7fe fb7d 	bl	80073f6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008cfc:	e026      	b.n	8008d4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	4413      	add	r3, r2
 8008d04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008d06:	4b14      	ldr	r3, [pc, #80]	@ (8008d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68ba      	ldr	r2, [r7, #8]
 8008d0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	429a      	cmp	r2, r3
 8008d14:	d209      	bcs.n	8008d2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d16:	4b12      	ldr	r3, [pc, #72]	@ (8008d60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008d18:	681a      	ldr	r2, [r3, #0]
 8008d1a:	4b0f      	ldr	r3, [pc, #60]	@ (8008d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	3304      	adds	r3, #4
 8008d20:	4619      	mov	r1, r3
 8008d22:	4610      	mov	r0, r2
 8008d24:	f7fe fb8b 	bl	800743e <vListInsert>
}
 8008d28:	e010      	b.n	8008d4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	@ (8008d64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008d2c:	681a      	ldr	r2, [r3, #0]
 8008d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8008d58 <prvAddCurrentTaskToDelayedList+0x94>)
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3304      	adds	r3, #4
 8008d34:	4619      	mov	r1, r3
 8008d36:	4610      	mov	r0, r2
 8008d38:	f7fe fb81 	bl	800743e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008d3c:	4b0a      	ldr	r3, [pc, #40]	@ (8008d68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	68ba      	ldr	r2, [r7, #8]
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d202      	bcs.n	8008d4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008d46:	4a08      	ldr	r2, [pc, #32]	@ (8008d68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	6013      	str	r3, [r2, #0]
}
 8008d4c:	bf00      	nop
 8008d4e:	3710      	adds	r7, #16
 8008d50:	46bd      	mov	sp, r7
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	20001584 	.word	0x20001584
 8008d58:	200010ac 	.word	0x200010ac
 8008d5c:	2000156c 	.word	0x2000156c
 8008d60:	2000153c 	.word	0x2000153c
 8008d64:	20001538 	.word	0x20001538
 8008d68:	200015a0 	.word	0x200015a0

08008d6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08a      	sub	sp, #40	@ 0x28
 8008d70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008d72:	2300      	movs	r3, #0
 8008d74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008d76:	f000 fb13 	bl	80093a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008d7a:	4b1d      	ldr	r3, [pc, #116]	@ (8008df0 <xTimerCreateTimerTask+0x84>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d021      	beq.n	8008dc6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008d86:	2300      	movs	r3, #0
 8008d88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008d8a:	1d3a      	adds	r2, r7, #4
 8008d8c:	f107 0108 	add.w	r1, r7, #8
 8008d90:	f107 030c 	add.w	r3, r7, #12
 8008d94:	4618      	mov	r0, r3
 8008d96:	f7fe fae7 	bl	8007368 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008d9a:	6879      	ldr	r1, [r7, #4]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	68fa      	ldr	r2, [r7, #12]
 8008da0:	9202      	str	r2, [sp, #8]
 8008da2:	9301      	str	r3, [sp, #4]
 8008da4:	2302      	movs	r3, #2
 8008da6:	9300      	str	r3, [sp, #0]
 8008da8:	2300      	movs	r3, #0
 8008daa:	460a      	mov	r2, r1
 8008dac:	4911      	ldr	r1, [pc, #68]	@ (8008df4 <xTimerCreateTimerTask+0x88>)
 8008dae:	4812      	ldr	r0, [pc, #72]	@ (8008df8 <xTimerCreateTimerTask+0x8c>)
 8008db0:	f7ff f8a2 	bl	8007ef8 <xTaskCreateStatic>
 8008db4:	4603      	mov	r3, r0
 8008db6:	4a11      	ldr	r2, [pc, #68]	@ (8008dfc <xTimerCreateTimerTask+0x90>)
 8008db8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008dba:	4b10      	ldr	r3, [pc, #64]	@ (8008dfc <xTimerCreateTimerTask+0x90>)
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008dc2:	2301      	movs	r3, #1
 8008dc4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d10b      	bne.n	8008de4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008dcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd0:	f383 8811 	msr	BASEPRI, r3
 8008dd4:	f3bf 8f6f 	isb	sy
 8008dd8:	f3bf 8f4f 	dsb	sy
 8008ddc:	613b      	str	r3, [r7, #16]
}
 8008dde:	bf00      	nop
 8008de0:	bf00      	nop
 8008de2:	e7fd      	b.n	8008de0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008de4:	697b      	ldr	r3, [r7, #20]
}
 8008de6:	4618      	mov	r0, r3
 8008de8:	3718      	adds	r7, #24
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}
 8008dee:	bf00      	nop
 8008df0:	200015dc 	.word	0x200015dc
 8008df4:	08009f78 	.word	0x08009f78
 8008df8:	08008f39 	.word	0x08008f39
 8008dfc:	200015e0 	.word	0x200015e0

08008e00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b08a      	sub	sp, #40	@ 0x28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	60f8      	str	r0, [r7, #12]
 8008e08:	60b9      	str	r1, [r7, #8]
 8008e0a:	607a      	str	r2, [r7, #4]
 8008e0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d10b      	bne.n	8008e30 <xTimerGenericCommand+0x30>
	__asm volatile
 8008e18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e1c:	f383 8811 	msr	BASEPRI, r3
 8008e20:	f3bf 8f6f 	isb	sy
 8008e24:	f3bf 8f4f 	dsb	sy
 8008e28:	623b      	str	r3, [r7, #32]
}
 8008e2a:	bf00      	nop
 8008e2c:	bf00      	nop
 8008e2e:	e7fd      	b.n	8008e2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008e30:	4b19      	ldr	r3, [pc, #100]	@ (8008e98 <xTimerGenericCommand+0x98>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d02a      	beq.n	8008e8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	2b05      	cmp	r3, #5
 8008e48:	dc18      	bgt.n	8008e7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008e4a:	f7ff fead 	bl	8008ba8 <xTaskGetSchedulerState>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	2b02      	cmp	r3, #2
 8008e52:	d109      	bne.n	8008e68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008e54:	4b10      	ldr	r3, [pc, #64]	@ (8008e98 <xTimerGenericCommand+0x98>)
 8008e56:	6818      	ldr	r0, [r3, #0]
 8008e58:	f107 0110 	add.w	r1, r7, #16
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e60:	f7fe fc5a 	bl	8007718 <xQueueGenericSend>
 8008e64:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e66:	e012      	b.n	8008e8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008e68:	4b0b      	ldr	r3, [pc, #44]	@ (8008e98 <xTimerGenericCommand+0x98>)
 8008e6a:	6818      	ldr	r0, [r3, #0]
 8008e6c:	f107 0110 	add.w	r1, r7, #16
 8008e70:	2300      	movs	r3, #0
 8008e72:	2200      	movs	r2, #0
 8008e74:	f7fe fc50 	bl	8007718 <xQueueGenericSend>
 8008e78:	6278      	str	r0, [r7, #36]	@ 0x24
 8008e7a:	e008      	b.n	8008e8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008e7c:	4b06      	ldr	r3, [pc, #24]	@ (8008e98 <xTimerGenericCommand+0x98>)
 8008e7e:	6818      	ldr	r0, [r3, #0]
 8008e80:	f107 0110 	add.w	r1, r7, #16
 8008e84:	2300      	movs	r3, #0
 8008e86:	683a      	ldr	r2, [r7, #0]
 8008e88:	f7fe fd48 	bl	800791c <xQueueGenericSendFromISR>
 8008e8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e90:	4618      	mov	r0, r3
 8008e92:	3728      	adds	r7, #40	@ 0x28
 8008e94:	46bd      	mov	sp, r7
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	200015dc 	.word	0x200015dc

08008e9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af02      	add	r7, sp, #8
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea6:	4b23      	ldr	r3, [pc, #140]	@ (8008f34 <prvProcessExpiredTimer+0x98>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	68db      	ldr	r3, [r3, #12]
 8008eae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	3304      	adds	r3, #4
 8008eb4:	4618      	mov	r0, r3
 8008eb6:	f7fe fafb 	bl	80074b0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008ec0:	f003 0304 	and.w	r3, r3, #4
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d023      	beq.n	8008f10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008ec8:	697b      	ldr	r3, [r7, #20]
 8008eca:	699a      	ldr	r2, [r3, #24]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	18d1      	adds	r1, r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	683a      	ldr	r2, [r7, #0]
 8008ed4:	6978      	ldr	r0, [r7, #20]
 8008ed6:	f000 f8d5 	bl	8009084 <prvInsertTimerInActiveList>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d020      	beq.n	8008f22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	9300      	str	r3, [sp, #0]
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	2100      	movs	r1, #0
 8008eea:	6978      	ldr	r0, [r7, #20]
 8008eec:	f7ff ff88 	bl	8008e00 <xTimerGenericCommand>
 8008ef0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008ef2:	693b      	ldr	r3, [r7, #16]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d114      	bne.n	8008f22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008ef8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008efc:	f383 8811 	msr	BASEPRI, r3
 8008f00:	f3bf 8f6f 	isb	sy
 8008f04:	f3bf 8f4f 	dsb	sy
 8008f08:	60fb      	str	r3, [r7, #12]
}
 8008f0a:	bf00      	nop
 8008f0c:	bf00      	nop
 8008f0e:	e7fd      	b.n	8008f0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008f16:	f023 0301 	bic.w	r3, r3, #1
 8008f1a:	b2da      	uxtb	r2, r3
 8008f1c:	697b      	ldr	r3, [r7, #20]
 8008f1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008f22:	697b      	ldr	r3, [r7, #20]
 8008f24:	6a1b      	ldr	r3, [r3, #32]
 8008f26:	6978      	ldr	r0, [r7, #20]
 8008f28:	4798      	blx	r3
}
 8008f2a:	bf00      	nop
 8008f2c:	3718      	adds	r7, #24
 8008f2e:	46bd      	mov	sp, r7
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	bf00      	nop
 8008f34:	200015d4 	.word	0x200015d4

08008f38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f40:	f107 0308 	add.w	r3, r7, #8
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f859 	bl	8008ffc <prvGetNextExpireTime>
 8008f4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	68f8      	ldr	r0, [r7, #12]
 8008f52:	f000 f805 	bl	8008f60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008f56:	f000 f8d7 	bl	8009108 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008f5a:	bf00      	nop
 8008f5c:	e7f0      	b.n	8008f40 <prvTimerTask+0x8>
	...

08008f60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b084      	sub	sp, #16
 8008f64:	af00      	add	r7, sp, #0
 8008f66:	6078      	str	r0, [r7, #4]
 8008f68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008f6a:	f7ff fa29 	bl	80083c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008f6e:	f107 0308 	add.w	r3, r7, #8
 8008f72:	4618      	mov	r0, r3
 8008f74:	f000 f866 	bl	8009044 <prvSampleTimeNow>
 8008f78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d130      	bne.n	8008fe2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d10a      	bne.n	8008f9c <prvProcessTimerOrBlockTask+0x3c>
 8008f86:	687a      	ldr	r2, [r7, #4]
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	d806      	bhi.n	8008f9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008f8e:	f7ff fa25 	bl	80083dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008f92:	68f9      	ldr	r1, [r7, #12]
 8008f94:	6878      	ldr	r0, [r7, #4]
 8008f96:	f7ff ff81 	bl	8008e9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008f9a:	e024      	b.n	8008fe6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d008      	beq.n	8008fb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008fa2:	4b13      	ldr	r3, [pc, #76]	@ (8008ff0 <prvProcessTimerOrBlockTask+0x90>)
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d101      	bne.n	8008fb0 <prvProcessTimerOrBlockTask+0x50>
 8008fac:	2301      	movs	r3, #1
 8008fae:	e000      	b.n	8008fb2 <prvProcessTimerOrBlockTask+0x52>
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008fb4:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff4 <prvProcessTimerOrBlockTask+0x94>)
 8008fb6:	6818      	ldr	r0, [r3, #0]
 8008fb8:	687a      	ldr	r2, [r7, #4]
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	683a      	ldr	r2, [r7, #0]
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	f7fe ff65 	bl	8007e90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008fc6:	f7ff fa09 	bl	80083dc <xTaskResumeAll>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d10a      	bne.n	8008fe6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008fd0:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <prvProcessTimerOrBlockTask+0x98>)
 8008fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fd6:	601a      	str	r2, [r3, #0]
 8008fd8:	f3bf 8f4f 	dsb	sy
 8008fdc:	f3bf 8f6f 	isb	sy
}
 8008fe0:	e001      	b.n	8008fe6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008fe2:	f7ff f9fb 	bl	80083dc <xTaskResumeAll>
}
 8008fe6:	bf00      	nop
 8008fe8:	3710      	adds	r7, #16
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	200015d8 	.word	0x200015d8
 8008ff4:	200015dc 	.word	0x200015dc
 8008ff8:	e000ed04 	.word	0xe000ed04

08008ffc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b085      	sub	sp, #20
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009004:	4b0e      	ldr	r3, [pc, #56]	@ (8009040 <prvGetNextExpireTime+0x44>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <prvGetNextExpireTime+0x16>
 800900e:	2201      	movs	r2, #1
 8009010:	e000      	b.n	8009014 <prvGetNextExpireTime+0x18>
 8009012:	2200      	movs	r2, #0
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d105      	bne.n	800902c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009020:	4b07      	ldr	r3, [pc, #28]	@ (8009040 <prvGetNextExpireTime+0x44>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	60fb      	str	r3, [r7, #12]
 800902a:	e001      	b.n	8009030 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009030:	68fb      	ldr	r3, [r7, #12]
}
 8009032:	4618      	mov	r0, r3
 8009034:	3714      	adds	r7, #20
 8009036:	46bd      	mov	sp, r7
 8009038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903c:	4770      	bx	lr
 800903e:	bf00      	nop
 8009040:	200015d4 	.word	0x200015d4

08009044 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800904c:	f7ff fa64 	bl	8008518 <xTaskGetTickCount>
 8009050:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009052:	4b0b      	ldr	r3, [pc, #44]	@ (8009080 <prvSampleTimeNow+0x3c>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68fa      	ldr	r2, [r7, #12]
 8009058:	429a      	cmp	r2, r3
 800905a:	d205      	bcs.n	8009068 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800905c:	f000 f93a 	bl	80092d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	601a      	str	r2, [r3, #0]
 8009066:	e002      	b.n	800906e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2200      	movs	r2, #0
 800906c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800906e:	4a04      	ldr	r2, [pc, #16]	@ (8009080 <prvSampleTimeNow+0x3c>)
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009074:	68fb      	ldr	r3, [r7, #12]
}
 8009076:	4618      	mov	r0, r3
 8009078:	3710      	adds	r7, #16
 800907a:	46bd      	mov	sp, r7
 800907c:	bd80      	pop	{r7, pc}
 800907e:	bf00      	nop
 8009080:	200015e4 	.word	0x200015e4

08009084 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009084:	b580      	push	{r7, lr}
 8009086:	b086      	sub	sp, #24
 8009088:	af00      	add	r7, sp, #0
 800908a:	60f8      	str	r0, [r7, #12]
 800908c:	60b9      	str	r1, [r7, #8]
 800908e:	607a      	str	r2, [r7, #4]
 8009090:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009092:	2300      	movs	r3, #0
 8009094:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	68ba      	ldr	r2, [r7, #8]
 800909a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68fa      	ldr	r2, [r7, #12]
 80090a0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d812      	bhi.n	80090d0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090aa:	687a      	ldr	r2, [r7, #4]
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	1ad2      	subs	r2, r2, r3
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	699b      	ldr	r3, [r3, #24]
 80090b4:	429a      	cmp	r2, r3
 80090b6:	d302      	bcc.n	80090be <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80090b8:	2301      	movs	r3, #1
 80090ba:	617b      	str	r3, [r7, #20]
 80090bc:	e01b      	b.n	80090f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80090be:	4b10      	ldr	r3, [pc, #64]	@ (8009100 <prvInsertTimerInActiveList+0x7c>)
 80090c0:	681a      	ldr	r2, [r3, #0]
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4619      	mov	r1, r3
 80090c8:	4610      	mov	r0, r2
 80090ca:	f7fe f9b8 	bl	800743e <vListInsert>
 80090ce:	e012      	b.n	80090f6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80090d0:	687a      	ldr	r2, [r7, #4]
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	429a      	cmp	r2, r3
 80090d6:	d206      	bcs.n	80090e6 <prvInsertTimerInActiveList+0x62>
 80090d8:	68ba      	ldr	r2, [r7, #8]
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d302      	bcc.n	80090e6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80090e0:	2301      	movs	r3, #1
 80090e2:	617b      	str	r3, [r7, #20]
 80090e4:	e007      	b.n	80090f6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80090e6:	4b07      	ldr	r3, [pc, #28]	@ (8009104 <prvInsertTimerInActiveList+0x80>)
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	3304      	adds	r3, #4
 80090ee:	4619      	mov	r1, r3
 80090f0:	4610      	mov	r0, r2
 80090f2:	f7fe f9a4 	bl	800743e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80090f6:	697b      	ldr	r3, [r7, #20]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3718      	adds	r7, #24
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bd80      	pop	{r7, pc}
 8009100:	200015d8 	.word	0x200015d8
 8009104:	200015d4 	.word	0x200015d4

08009108 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b08e      	sub	sp, #56	@ 0x38
 800910c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800910e:	e0ce      	b.n	80092ae <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2b00      	cmp	r3, #0
 8009114:	da19      	bge.n	800914a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009116:	1d3b      	adds	r3, r7, #4
 8009118:	3304      	adds	r3, #4
 800911a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800911c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800911e:	2b00      	cmp	r3, #0
 8009120:	d10b      	bne.n	800913a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009126:	f383 8811 	msr	BASEPRI, r3
 800912a:	f3bf 8f6f 	isb	sy
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	61fb      	str	r3, [r7, #28]
}
 8009134:	bf00      	nop
 8009136:	bf00      	nop
 8009138:	e7fd      	b.n	8009136 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800913a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009140:	6850      	ldr	r0, [r2, #4]
 8009142:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009144:	6892      	ldr	r2, [r2, #8]
 8009146:	4611      	mov	r1, r2
 8009148:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	f2c0 80ae 	blt.w	80092ae <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d004      	beq.n	8009168 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800915e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009160:	3304      	adds	r3, #4
 8009162:	4618      	mov	r0, r3
 8009164:	f7fe f9a4 	bl	80074b0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009168:	463b      	mov	r3, r7
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff ff6a 	bl	8009044 <prvSampleTimeNow>
 8009170:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	2b09      	cmp	r3, #9
 8009176:	f200 8097 	bhi.w	80092a8 <prvProcessReceivedCommands+0x1a0>
 800917a:	a201      	add	r2, pc, #4	@ (adr r2, 8009180 <prvProcessReceivedCommands+0x78>)
 800917c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009180:	080091a9 	.word	0x080091a9
 8009184:	080091a9 	.word	0x080091a9
 8009188:	080091a9 	.word	0x080091a9
 800918c:	0800921f 	.word	0x0800921f
 8009190:	08009233 	.word	0x08009233
 8009194:	0800927f 	.word	0x0800927f
 8009198:	080091a9 	.word	0x080091a9
 800919c:	080091a9 	.word	0x080091a9
 80091a0:	0800921f 	.word	0x0800921f
 80091a4:	08009233 	.word	0x08009233
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80091a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091ae:	f043 0301 	orr.w	r3, r3, #1
 80091b2:	b2da      	uxtb	r2, r3
 80091b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80091ba:	68ba      	ldr	r2, [r7, #8]
 80091bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091be:	699b      	ldr	r3, [r3, #24]
 80091c0:	18d1      	adds	r1, r2, r3
 80091c2:	68bb      	ldr	r3, [r7, #8]
 80091c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091c8:	f7ff ff5c 	bl	8009084 <prvInsertTimerInActiveList>
 80091cc:	4603      	mov	r3, r0
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d06c      	beq.n	80092ac <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091d4:	6a1b      	ldr	r3, [r3, #32]
 80091d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091d8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091e0:	f003 0304 	and.w	r3, r3, #4
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d061      	beq.n	80092ac <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80091e8:	68ba      	ldr	r2, [r7, #8]
 80091ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	441a      	add	r2, r3
 80091f0:	2300      	movs	r3, #0
 80091f2:	9300      	str	r3, [sp, #0]
 80091f4:	2300      	movs	r3, #0
 80091f6:	2100      	movs	r1, #0
 80091f8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80091fa:	f7ff fe01 	bl	8008e00 <xTimerGenericCommand>
 80091fe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009200:	6a3b      	ldr	r3, [r7, #32]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d152      	bne.n	80092ac <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009206:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800920a:	f383 8811 	msr	BASEPRI, r3
 800920e:	f3bf 8f6f 	isb	sy
 8009212:	f3bf 8f4f 	dsb	sy
 8009216:	61bb      	str	r3, [r7, #24]
}
 8009218:	bf00      	nop
 800921a:	bf00      	nop
 800921c:	e7fd      	b.n	800921a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800921e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009220:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009224:	f023 0301 	bic.w	r3, r3, #1
 8009228:	b2da      	uxtb	r2, r3
 800922a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800922c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009230:	e03d      	b.n	80092ae <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009238:	f043 0301 	orr.w	r3, r3, #1
 800923c:	b2da      	uxtb	r2, r3
 800923e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009240:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009244:	68ba      	ldr	r2, [r7, #8]
 8009246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009248:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	699b      	ldr	r3, [r3, #24]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10b      	bne.n	800926a <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009256:	f383 8811 	msr	BASEPRI, r3
 800925a:	f3bf 8f6f 	isb	sy
 800925e:	f3bf 8f4f 	dsb	sy
 8009262:	617b      	str	r3, [r7, #20]
}
 8009264:	bf00      	nop
 8009266:	bf00      	nop
 8009268:	e7fd      	b.n	8009266 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800926a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009270:	18d1      	adds	r1, r2, r3
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009276:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009278:	f7ff ff04 	bl	8009084 <prvInsertTimerInActiveList>
					break;
 800927c:	e017      	b.n	80092ae <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009284:	f003 0302 	and.w	r3, r3, #2
 8009288:	2b00      	cmp	r3, #0
 800928a:	d103      	bne.n	8009294 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800928c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800928e:	f000 fbeb 	bl	8009a68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009292:	e00c      	b.n	80092ae <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009296:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800929a:	f023 0301 	bic.w	r3, r3, #1
 800929e:	b2da      	uxtb	r2, r3
 80092a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80092a6:	e002      	b.n	80092ae <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80092a8:	bf00      	nop
 80092aa:	e000      	b.n	80092ae <prvProcessReceivedCommands+0x1a6>
					break;
 80092ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80092ae:	4b08      	ldr	r3, [pc, #32]	@ (80092d0 <prvProcessReceivedCommands+0x1c8>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	1d39      	adds	r1, r7, #4
 80092b4:	2200      	movs	r2, #0
 80092b6:	4618      	mov	r0, r3
 80092b8:	f7fe fbce 	bl	8007a58 <xQueueReceive>
 80092bc:	4603      	mov	r3, r0
 80092be:	2b00      	cmp	r3, #0
 80092c0:	f47f af26 	bne.w	8009110 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	3730      	adds	r7, #48	@ 0x30
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	200015dc 	.word	0x200015dc

080092d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b088      	sub	sp, #32
 80092d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80092da:	e049      	b.n	8009370 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80092dc:	4b2e      	ldr	r3, [pc, #184]	@ (8009398 <prvSwitchTimerLists+0xc4>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092e6:	4b2c      	ldr	r3, [pc, #176]	@ (8009398 <prvSwitchTimerLists+0xc4>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	68db      	ldr	r3, [r3, #12]
 80092ec:	68db      	ldr	r3, [r3, #12]
 80092ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	3304      	adds	r3, #4
 80092f4:	4618      	mov	r0, r3
 80092f6:	f7fe f8db 	bl	80074b0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6a1b      	ldr	r3, [r3, #32]
 80092fe:	68f8      	ldr	r0, [r7, #12]
 8009300:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009308:	f003 0304 	and.w	r3, r3, #4
 800930c:	2b00      	cmp	r3, #0
 800930e:	d02f      	beq.n	8009370 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	699b      	ldr	r3, [r3, #24]
 8009314:	693a      	ldr	r2, [r7, #16]
 8009316:	4413      	add	r3, r2
 8009318:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800931a:	68ba      	ldr	r2, [r7, #8]
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	429a      	cmp	r2, r3
 8009320:	d90e      	bls.n	8009340 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	68ba      	ldr	r2, [r7, #8]
 8009326:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800932e:	4b1a      	ldr	r3, [pc, #104]	@ (8009398 <prvSwitchTimerLists+0xc4>)
 8009330:	681a      	ldr	r2, [r3, #0]
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	3304      	adds	r3, #4
 8009336:	4619      	mov	r1, r3
 8009338:	4610      	mov	r0, r2
 800933a:	f7fe f880 	bl	800743e <vListInsert>
 800933e:	e017      	b.n	8009370 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009340:	2300      	movs	r3, #0
 8009342:	9300      	str	r3, [sp, #0]
 8009344:	2300      	movs	r3, #0
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	2100      	movs	r1, #0
 800934a:	68f8      	ldr	r0, [r7, #12]
 800934c:	f7ff fd58 	bl	8008e00 <xTimerGenericCommand>
 8009350:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10b      	bne.n	8009370 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	603b      	str	r3, [r7, #0]
}
 800936a:	bf00      	nop
 800936c:	bf00      	nop
 800936e:	e7fd      	b.n	800936c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009370:	4b09      	ldr	r3, [pc, #36]	@ (8009398 <prvSwitchTimerLists+0xc4>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1b0      	bne.n	80092dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800937a:	4b07      	ldr	r3, [pc, #28]	@ (8009398 <prvSwitchTimerLists+0xc4>)
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009380:	4b06      	ldr	r3, [pc, #24]	@ (800939c <prvSwitchTimerLists+0xc8>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a04      	ldr	r2, [pc, #16]	@ (8009398 <prvSwitchTimerLists+0xc4>)
 8009386:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009388:	4a04      	ldr	r2, [pc, #16]	@ (800939c <prvSwitchTimerLists+0xc8>)
 800938a:	697b      	ldr	r3, [r7, #20]
 800938c:	6013      	str	r3, [r2, #0]
}
 800938e:	bf00      	nop
 8009390:	3718      	adds	r7, #24
 8009392:	46bd      	mov	sp, r7
 8009394:	bd80      	pop	{r7, pc}
 8009396:	bf00      	nop
 8009398:	200015d4 	.word	0x200015d4
 800939c:	200015d8 	.word	0x200015d8

080093a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80093a6:	f000 f96f 	bl	8009688 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80093aa:	4b15      	ldr	r3, [pc, #84]	@ (8009400 <prvCheckForValidListAndQueue+0x60>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d120      	bne.n	80093f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80093b2:	4814      	ldr	r0, [pc, #80]	@ (8009404 <prvCheckForValidListAndQueue+0x64>)
 80093b4:	f7fd fff2 	bl	800739c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80093b8:	4813      	ldr	r0, [pc, #76]	@ (8009408 <prvCheckForValidListAndQueue+0x68>)
 80093ba:	f7fd ffef 	bl	800739c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80093be:	4b13      	ldr	r3, [pc, #76]	@ (800940c <prvCheckForValidListAndQueue+0x6c>)
 80093c0:	4a10      	ldr	r2, [pc, #64]	@ (8009404 <prvCheckForValidListAndQueue+0x64>)
 80093c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80093c4:	4b12      	ldr	r3, [pc, #72]	@ (8009410 <prvCheckForValidListAndQueue+0x70>)
 80093c6:	4a10      	ldr	r2, [pc, #64]	@ (8009408 <prvCheckForValidListAndQueue+0x68>)
 80093c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80093ca:	2300      	movs	r3, #0
 80093cc:	9300      	str	r3, [sp, #0]
 80093ce:	4b11      	ldr	r3, [pc, #68]	@ (8009414 <prvCheckForValidListAndQueue+0x74>)
 80093d0:	4a11      	ldr	r2, [pc, #68]	@ (8009418 <prvCheckForValidListAndQueue+0x78>)
 80093d2:	2110      	movs	r1, #16
 80093d4:	200a      	movs	r0, #10
 80093d6:	f7fe f8ff 	bl	80075d8 <xQueueGenericCreateStatic>
 80093da:	4603      	mov	r3, r0
 80093dc:	4a08      	ldr	r2, [pc, #32]	@ (8009400 <prvCheckForValidListAndQueue+0x60>)
 80093de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80093e0:	4b07      	ldr	r3, [pc, #28]	@ (8009400 <prvCheckForValidListAndQueue+0x60>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d005      	beq.n	80093f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80093e8:	4b05      	ldr	r3, [pc, #20]	@ (8009400 <prvCheckForValidListAndQueue+0x60>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	490b      	ldr	r1, [pc, #44]	@ (800941c <prvCheckForValidListAndQueue+0x7c>)
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7fe fd24 	bl	8007e3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80093f4:	f000 f97a 	bl	80096ec <vPortExitCritical>
}
 80093f8:	bf00      	nop
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	200015dc 	.word	0x200015dc
 8009404:	200015ac 	.word	0x200015ac
 8009408:	200015c0 	.word	0x200015c0
 800940c:	200015d4 	.word	0x200015d4
 8009410:	200015d8 	.word	0x200015d8
 8009414:	20001688 	.word	0x20001688
 8009418:	200015e8 	.word	0x200015e8
 800941c:	08009f80 	.word	0x08009f80

08009420 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
 8009426:	60f8      	str	r0, [r7, #12]
 8009428:	60b9      	str	r1, [r7, #8]
 800942a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3b04      	subs	r3, #4
 8009430:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009438:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3b04      	subs	r3, #4
 800943e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009440:	68bb      	ldr	r3, [r7, #8]
 8009442:	f023 0201 	bic.w	r2, r3, #1
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3b04      	subs	r3, #4
 800944e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009450:	4a0c      	ldr	r2, [pc, #48]	@ (8009484 <pxPortInitialiseStack+0x64>)
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	3b14      	subs	r3, #20
 800945a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800945c:	687a      	ldr	r2, [r7, #4]
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3b04      	subs	r3, #4
 8009466:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f06f 0202 	mvn.w	r2, #2
 800946e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3b20      	subs	r3, #32
 8009474:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009476:	68fb      	ldr	r3, [r7, #12]
}
 8009478:	4618      	mov	r0, r3
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	08009489 	.word	0x08009489

08009488 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009488:	b480      	push	{r7}
 800948a:	b085      	sub	sp, #20
 800948c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800948e:	2300      	movs	r3, #0
 8009490:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009492:	4b13      	ldr	r3, [pc, #76]	@ (80094e0 <prvTaskExitError+0x58>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800949a:	d00b      	beq.n	80094b4 <prvTaskExitError+0x2c>
	__asm volatile
 800949c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094a0:	f383 8811 	msr	BASEPRI, r3
 80094a4:	f3bf 8f6f 	isb	sy
 80094a8:	f3bf 8f4f 	dsb	sy
 80094ac:	60fb      	str	r3, [r7, #12]
}
 80094ae:	bf00      	nop
 80094b0:	bf00      	nop
 80094b2:	e7fd      	b.n	80094b0 <prvTaskExitError+0x28>
	__asm volatile
 80094b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094b8:	f383 8811 	msr	BASEPRI, r3
 80094bc:	f3bf 8f6f 	isb	sy
 80094c0:	f3bf 8f4f 	dsb	sy
 80094c4:	60bb      	str	r3, [r7, #8]
}
 80094c6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80094c8:	bf00      	nop
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d0fc      	beq.n	80094ca <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80094d0:	bf00      	nop
 80094d2:	bf00      	nop
 80094d4:	3714      	adds	r7, #20
 80094d6:	46bd      	mov	sp, r7
 80094d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094dc:	4770      	bx	lr
 80094de:	bf00      	nop
 80094e0:	2000000c 	.word	0x2000000c
	...

080094f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80094f0:	4b07      	ldr	r3, [pc, #28]	@ (8009510 <pxCurrentTCBConst2>)
 80094f2:	6819      	ldr	r1, [r3, #0]
 80094f4:	6808      	ldr	r0, [r1, #0]
 80094f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094fa:	f380 8809 	msr	PSP, r0
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f04f 0000 	mov.w	r0, #0
 8009506:	f380 8811 	msr	BASEPRI, r0
 800950a:	4770      	bx	lr
 800950c:	f3af 8000 	nop.w

08009510 <pxCurrentTCBConst2>:
 8009510:	200010ac 	.word	0x200010ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009514:	bf00      	nop
 8009516:	bf00      	nop

08009518 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009518:	4808      	ldr	r0, [pc, #32]	@ (800953c <prvPortStartFirstTask+0x24>)
 800951a:	6800      	ldr	r0, [r0, #0]
 800951c:	6800      	ldr	r0, [r0, #0]
 800951e:	f380 8808 	msr	MSP, r0
 8009522:	f04f 0000 	mov.w	r0, #0
 8009526:	f380 8814 	msr	CONTROL, r0
 800952a:	b662      	cpsie	i
 800952c:	b661      	cpsie	f
 800952e:	f3bf 8f4f 	dsb	sy
 8009532:	f3bf 8f6f 	isb	sy
 8009536:	df00      	svc	0
 8009538:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800953a:	bf00      	nop
 800953c:	e000ed08 	.word	0xe000ed08

08009540 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009540:	b580      	push	{r7, lr}
 8009542:	b086      	sub	sp, #24
 8009544:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009546:	4b47      	ldr	r3, [pc, #284]	@ (8009664 <xPortStartScheduler+0x124>)
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a47      	ldr	r2, [pc, #284]	@ (8009668 <xPortStartScheduler+0x128>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d10b      	bne.n	8009568 <xPortStartScheduler+0x28>
	__asm volatile
 8009550:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009554:	f383 8811 	msr	BASEPRI, r3
 8009558:	f3bf 8f6f 	isb	sy
 800955c:	f3bf 8f4f 	dsb	sy
 8009560:	613b      	str	r3, [r7, #16]
}
 8009562:	bf00      	nop
 8009564:	bf00      	nop
 8009566:	e7fd      	b.n	8009564 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009568:	4b3e      	ldr	r3, [pc, #248]	@ (8009664 <xPortStartScheduler+0x124>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a3f      	ldr	r2, [pc, #252]	@ (800966c <xPortStartScheduler+0x12c>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d10b      	bne.n	800958a <xPortStartScheduler+0x4a>
	__asm volatile
 8009572:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009576:	f383 8811 	msr	BASEPRI, r3
 800957a:	f3bf 8f6f 	isb	sy
 800957e:	f3bf 8f4f 	dsb	sy
 8009582:	60fb      	str	r3, [r7, #12]
}
 8009584:	bf00      	nop
 8009586:	bf00      	nop
 8009588:	e7fd      	b.n	8009586 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800958a:	4b39      	ldr	r3, [pc, #228]	@ (8009670 <xPortStartScheduler+0x130>)
 800958c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	781b      	ldrb	r3, [r3, #0]
 8009592:	b2db      	uxtb	r3, r3
 8009594:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	22ff      	movs	r2, #255	@ 0xff
 800959a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800959c:	697b      	ldr	r3, [r7, #20]
 800959e:	781b      	ldrb	r3, [r3, #0]
 80095a0:	b2db      	uxtb	r3, r3
 80095a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80095a4:	78fb      	ldrb	r3, [r7, #3]
 80095a6:	b2db      	uxtb	r3, r3
 80095a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80095ac:	b2da      	uxtb	r2, r3
 80095ae:	4b31      	ldr	r3, [pc, #196]	@ (8009674 <xPortStartScheduler+0x134>)
 80095b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80095b2:	4b31      	ldr	r3, [pc, #196]	@ (8009678 <xPortStartScheduler+0x138>)
 80095b4:	2207      	movs	r2, #7
 80095b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095b8:	e009      	b.n	80095ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80095ba:	4b2f      	ldr	r3, [pc, #188]	@ (8009678 <xPortStartScheduler+0x138>)
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	3b01      	subs	r3, #1
 80095c0:	4a2d      	ldr	r2, [pc, #180]	@ (8009678 <xPortStartScheduler+0x138>)
 80095c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80095c4:	78fb      	ldrb	r3, [r7, #3]
 80095c6:	b2db      	uxtb	r3, r3
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	b2db      	uxtb	r3, r3
 80095cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80095ce:	78fb      	ldrb	r3, [r7, #3]
 80095d0:	b2db      	uxtb	r3, r3
 80095d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80095d6:	2b80      	cmp	r3, #128	@ 0x80
 80095d8:	d0ef      	beq.n	80095ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80095da:	4b27      	ldr	r3, [pc, #156]	@ (8009678 <xPortStartScheduler+0x138>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f1c3 0307 	rsb	r3, r3, #7
 80095e2:	2b04      	cmp	r3, #4
 80095e4:	d00b      	beq.n	80095fe <xPortStartScheduler+0xbe>
	__asm volatile
 80095e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80095ea:	f383 8811 	msr	BASEPRI, r3
 80095ee:	f3bf 8f6f 	isb	sy
 80095f2:	f3bf 8f4f 	dsb	sy
 80095f6:	60bb      	str	r3, [r7, #8]
}
 80095f8:	bf00      	nop
 80095fa:	bf00      	nop
 80095fc:	e7fd      	b.n	80095fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80095fe:	4b1e      	ldr	r3, [pc, #120]	@ (8009678 <xPortStartScheduler+0x138>)
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	021b      	lsls	r3, r3, #8
 8009604:	4a1c      	ldr	r2, [pc, #112]	@ (8009678 <xPortStartScheduler+0x138>)
 8009606:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009608:	4b1b      	ldr	r3, [pc, #108]	@ (8009678 <xPortStartScheduler+0x138>)
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009610:	4a19      	ldr	r2, [pc, #100]	@ (8009678 <xPortStartScheduler+0x138>)
 8009612:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	b2da      	uxtb	r2, r3
 8009618:	697b      	ldr	r3, [r7, #20]
 800961a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800961c:	4b17      	ldr	r3, [pc, #92]	@ (800967c <xPortStartScheduler+0x13c>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a16      	ldr	r2, [pc, #88]	@ (800967c <xPortStartScheduler+0x13c>)
 8009622:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009626:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009628:	4b14      	ldr	r3, [pc, #80]	@ (800967c <xPortStartScheduler+0x13c>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	4a13      	ldr	r2, [pc, #76]	@ (800967c <xPortStartScheduler+0x13c>)
 800962e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009632:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009634:	f000 f8da 	bl	80097ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009638:	4b11      	ldr	r3, [pc, #68]	@ (8009680 <xPortStartScheduler+0x140>)
 800963a:	2200      	movs	r2, #0
 800963c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800963e:	f000 f8f9 	bl	8009834 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009642:	4b10      	ldr	r3, [pc, #64]	@ (8009684 <xPortStartScheduler+0x144>)
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a0f      	ldr	r2, [pc, #60]	@ (8009684 <xPortStartScheduler+0x144>)
 8009648:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800964c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800964e:	f7ff ff63 	bl	8009518 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009652:	f7ff f82b 	bl	80086ac <vTaskSwitchContext>
	prvTaskExitError();
 8009656:	f7ff ff17 	bl	8009488 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800965a:	2300      	movs	r3, #0
}
 800965c:	4618      	mov	r0, r3
 800965e:	3718      	adds	r7, #24
 8009660:	46bd      	mov	sp, r7
 8009662:	bd80      	pop	{r7, pc}
 8009664:	e000ed00 	.word	0xe000ed00
 8009668:	410fc271 	.word	0x410fc271
 800966c:	410fc270 	.word	0x410fc270
 8009670:	e000e400 	.word	0xe000e400
 8009674:	200016d8 	.word	0x200016d8
 8009678:	200016dc 	.word	0x200016dc
 800967c:	e000ed20 	.word	0xe000ed20
 8009680:	2000000c 	.word	0x2000000c
 8009684:	e000ef34 	.word	0xe000ef34

08009688 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
	__asm volatile
 800968e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009692:	f383 8811 	msr	BASEPRI, r3
 8009696:	f3bf 8f6f 	isb	sy
 800969a:	f3bf 8f4f 	dsb	sy
 800969e:	607b      	str	r3, [r7, #4]
}
 80096a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80096a2:	4b10      	ldr	r3, [pc, #64]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	3301      	adds	r3, #1
 80096a8:	4a0e      	ldr	r2, [pc, #56]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80096ac:	4b0d      	ldr	r3, [pc, #52]	@ (80096e4 <vPortEnterCritical+0x5c>)
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d110      	bne.n	80096d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80096b4:	4b0c      	ldr	r3, [pc, #48]	@ (80096e8 <vPortEnterCritical+0x60>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	b2db      	uxtb	r3, r3
 80096ba:	2b00      	cmp	r3, #0
 80096bc:	d00b      	beq.n	80096d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	603b      	str	r3, [r7, #0]
}
 80096d0:	bf00      	nop
 80096d2:	bf00      	nop
 80096d4:	e7fd      	b.n	80096d2 <vPortEnterCritical+0x4a>
	}
}
 80096d6:	bf00      	nop
 80096d8:	370c      	adds	r7, #12
 80096da:	46bd      	mov	sp, r7
 80096dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e0:	4770      	bx	lr
 80096e2:	bf00      	nop
 80096e4:	2000000c 	.word	0x2000000c
 80096e8:	e000ed04 	.word	0xe000ed04

080096ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80096ec:	b480      	push	{r7}
 80096ee:	b083      	sub	sp, #12
 80096f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80096f2:	4b12      	ldr	r3, [pc, #72]	@ (800973c <vPortExitCritical+0x50>)
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d10b      	bne.n	8009712 <vPortExitCritical+0x26>
	__asm volatile
 80096fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096fe:	f383 8811 	msr	BASEPRI, r3
 8009702:	f3bf 8f6f 	isb	sy
 8009706:	f3bf 8f4f 	dsb	sy
 800970a:	607b      	str	r3, [r7, #4]
}
 800970c:	bf00      	nop
 800970e:	bf00      	nop
 8009710:	e7fd      	b.n	800970e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009712:	4b0a      	ldr	r3, [pc, #40]	@ (800973c <vPortExitCritical+0x50>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	3b01      	subs	r3, #1
 8009718:	4a08      	ldr	r2, [pc, #32]	@ (800973c <vPortExitCritical+0x50>)
 800971a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800971c:	4b07      	ldr	r3, [pc, #28]	@ (800973c <vPortExitCritical+0x50>)
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d105      	bne.n	8009730 <vPortExitCritical+0x44>
 8009724:	2300      	movs	r3, #0
 8009726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	f383 8811 	msr	BASEPRI, r3
}
 800972e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009730:	bf00      	nop
 8009732:	370c      	adds	r7, #12
 8009734:	46bd      	mov	sp, r7
 8009736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973a:	4770      	bx	lr
 800973c:	2000000c 	.word	0x2000000c

08009740 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009740:	f3ef 8009 	mrs	r0, PSP
 8009744:	f3bf 8f6f 	isb	sy
 8009748:	4b15      	ldr	r3, [pc, #84]	@ (80097a0 <pxCurrentTCBConst>)
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	f01e 0f10 	tst.w	lr, #16
 8009750:	bf08      	it	eq
 8009752:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009756:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800975a:	6010      	str	r0, [r2, #0]
 800975c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009760:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009764:	f380 8811 	msr	BASEPRI, r0
 8009768:	f3bf 8f4f 	dsb	sy
 800976c:	f3bf 8f6f 	isb	sy
 8009770:	f7fe ff9c 	bl	80086ac <vTaskSwitchContext>
 8009774:	f04f 0000 	mov.w	r0, #0
 8009778:	f380 8811 	msr	BASEPRI, r0
 800977c:	bc09      	pop	{r0, r3}
 800977e:	6819      	ldr	r1, [r3, #0]
 8009780:	6808      	ldr	r0, [r1, #0]
 8009782:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009786:	f01e 0f10 	tst.w	lr, #16
 800978a:	bf08      	it	eq
 800978c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009790:	f380 8809 	msr	PSP, r0
 8009794:	f3bf 8f6f 	isb	sy
 8009798:	4770      	bx	lr
 800979a:	bf00      	nop
 800979c:	f3af 8000 	nop.w

080097a0 <pxCurrentTCBConst>:
 80097a0:	200010ac 	.word	0x200010ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80097a4:	bf00      	nop
 80097a6:	bf00      	nop

080097a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80097a8:	b580      	push	{r7, lr}
 80097aa:	b082      	sub	sp, #8
 80097ac:	af00      	add	r7, sp, #0
	__asm volatile
 80097ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097b2:	f383 8811 	msr	BASEPRI, r3
 80097b6:	f3bf 8f6f 	isb	sy
 80097ba:	f3bf 8f4f 	dsb	sy
 80097be:	607b      	str	r3, [r7, #4]
}
 80097c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80097c2:	f7fe feb9 	bl	8008538 <xTaskIncrementTick>
 80097c6:	4603      	mov	r3, r0
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80097cc:	4b06      	ldr	r3, [pc, #24]	@ (80097e8 <xPortSysTickHandler+0x40>)
 80097ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097d2:	601a      	str	r2, [r3, #0]
 80097d4:	2300      	movs	r3, #0
 80097d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80097d8:	683b      	ldr	r3, [r7, #0]
 80097da:	f383 8811 	msr	BASEPRI, r3
}
 80097de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80097e0:	bf00      	nop
 80097e2:	3708      	adds	r7, #8
 80097e4:	46bd      	mov	sp, r7
 80097e6:	bd80      	pop	{r7, pc}
 80097e8:	e000ed04 	.word	0xe000ed04

080097ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80097ec:	b480      	push	{r7}
 80097ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80097f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009820 <vPortSetupTimerInterrupt+0x34>)
 80097f2:	2200      	movs	r2, #0
 80097f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80097f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <vPortSetupTimerInterrupt+0x38>)
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80097fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009828 <vPortSetupTimerInterrupt+0x3c>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0a      	ldr	r2, [pc, #40]	@ (800982c <vPortSetupTimerInterrupt+0x40>)
 8009802:	fba2 2303 	umull	r2, r3, r2, r3
 8009806:	099b      	lsrs	r3, r3, #6
 8009808:	4a09      	ldr	r2, [pc, #36]	@ (8009830 <vPortSetupTimerInterrupt+0x44>)
 800980a:	3b01      	subs	r3, #1
 800980c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800980e:	4b04      	ldr	r3, [pc, #16]	@ (8009820 <vPortSetupTimerInterrupt+0x34>)
 8009810:	2207      	movs	r2, #7
 8009812:	601a      	str	r2, [r3, #0]
}
 8009814:	bf00      	nop
 8009816:	46bd      	mov	sp, r7
 8009818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981c:	4770      	bx	lr
 800981e:	bf00      	nop
 8009820:	e000e010 	.word	0xe000e010
 8009824:	e000e018 	.word	0xe000e018
 8009828:	20000000 	.word	0x20000000
 800982c:	10624dd3 	.word	0x10624dd3
 8009830:	e000e014 	.word	0xe000e014

08009834 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009834:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009844 <vPortEnableVFP+0x10>
 8009838:	6801      	ldr	r1, [r0, #0]
 800983a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800983e:	6001      	str	r1, [r0, #0]
 8009840:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009842:	bf00      	nop
 8009844:	e000ed88 	.word	0xe000ed88

08009848 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009848:	b480      	push	{r7}
 800984a:	b085      	sub	sp, #20
 800984c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800984e:	f3ef 8305 	mrs	r3, IPSR
 8009852:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009854:	68fb      	ldr	r3, [r7, #12]
 8009856:	2b0f      	cmp	r3, #15
 8009858:	d915      	bls.n	8009886 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800985a:	4a18      	ldr	r2, [pc, #96]	@ (80098bc <vPortValidateInterruptPriority+0x74>)
 800985c:	68fb      	ldr	r3, [r7, #12]
 800985e:	4413      	add	r3, r2
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009864:	4b16      	ldr	r3, [pc, #88]	@ (80098c0 <vPortValidateInterruptPriority+0x78>)
 8009866:	781b      	ldrb	r3, [r3, #0]
 8009868:	7afa      	ldrb	r2, [r7, #11]
 800986a:	429a      	cmp	r2, r3
 800986c:	d20b      	bcs.n	8009886 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800986e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009872:	f383 8811 	msr	BASEPRI, r3
 8009876:	f3bf 8f6f 	isb	sy
 800987a:	f3bf 8f4f 	dsb	sy
 800987e:	607b      	str	r3, [r7, #4]
}
 8009880:	bf00      	nop
 8009882:	bf00      	nop
 8009884:	e7fd      	b.n	8009882 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009886:	4b0f      	ldr	r3, [pc, #60]	@ (80098c4 <vPortValidateInterruptPriority+0x7c>)
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800988e:	4b0e      	ldr	r3, [pc, #56]	@ (80098c8 <vPortValidateInterruptPriority+0x80>)
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	429a      	cmp	r2, r3
 8009894:	d90b      	bls.n	80098ae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800989a:	f383 8811 	msr	BASEPRI, r3
 800989e:	f3bf 8f6f 	isb	sy
 80098a2:	f3bf 8f4f 	dsb	sy
 80098a6:	603b      	str	r3, [r7, #0]
}
 80098a8:	bf00      	nop
 80098aa:	bf00      	nop
 80098ac:	e7fd      	b.n	80098aa <vPortValidateInterruptPriority+0x62>
	}
 80098ae:	bf00      	nop
 80098b0:	3714      	adds	r7, #20
 80098b2:	46bd      	mov	sp, r7
 80098b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098b8:	4770      	bx	lr
 80098ba:	bf00      	nop
 80098bc:	e000e3f0 	.word	0xe000e3f0
 80098c0:	200016d8 	.word	0x200016d8
 80098c4:	e000ed0c 	.word	0xe000ed0c
 80098c8:	200016dc 	.word	0x200016dc

080098cc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08a      	sub	sp, #40	@ 0x28
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80098d4:	2300      	movs	r3, #0
 80098d6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80098d8:	f7fe fd72 	bl	80083c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80098dc:	4b5c      	ldr	r3, [pc, #368]	@ (8009a50 <pvPortMalloc+0x184>)
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d101      	bne.n	80098e8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80098e4:	f000 f924 	bl	8009b30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80098e8:	4b5a      	ldr	r3, [pc, #360]	@ (8009a54 <pvPortMalloc+0x188>)
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4013      	ands	r3, r2
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	f040 8095 	bne.w	8009a20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d01e      	beq.n	800993a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80098fc:	2208      	movs	r2, #8
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	4413      	add	r3, r2
 8009902:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f003 0307 	and.w	r3, r3, #7
 800990a:	2b00      	cmp	r3, #0
 800990c:	d015      	beq.n	800993a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f023 0307 	bic.w	r3, r3, #7
 8009914:	3308      	adds	r3, #8
 8009916:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <pvPortMalloc+0x6e>
	__asm volatile
 8009922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009926:	f383 8811 	msr	BASEPRI, r3
 800992a:	f3bf 8f6f 	isb	sy
 800992e:	f3bf 8f4f 	dsb	sy
 8009932:	617b      	str	r3, [r7, #20]
}
 8009934:	bf00      	nop
 8009936:	bf00      	nop
 8009938:	e7fd      	b.n	8009936 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2b00      	cmp	r3, #0
 800993e:	d06f      	beq.n	8009a20 <pvPortMalloc+0x154>
 8009940:	4b45      	ldr	r3, [pc, #276]	@ (8009a58 <pvPortMalloc+0x18c>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	429a      	cmp	r2, r3
 8009948:	d86a      	bhi.n	8009a20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800994a:	4b44      	ldr	r3, [pc, #272]	@ (8009a5c <pvPortMalloc+0x190>)
 800994c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800994e:	4b43      	ldr	r3, [pc, #268]	@ (8009a5c <pvPortMalloc+0x190>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009954:	e004      	b.n	8009960 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8009956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009958:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800995a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	429a      	cmp	r2, r3
 8009968:	d903      	bls.n	8009972 <pvPortMalloc+0xa6>
 800996a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2b00      	cmp	r3, #0
 8009970:	d1f1      	bne.n	8009956 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009972:	4b37      	ldr	r3, [pc, #220]	@ (8009a50 <pvPortMalloc+0x184>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009978:	429a      	cmp	r2, r3
 800997a:	d051      	beq.n	8009a20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2208      	movs	r2, #8
 8009982:	4413      	add	r3, r2
 8009984:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	6a3b      	ldr	r3, [r7, #32]
 800998c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800998e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009990:	685a      	ldr	r2, [r3, #4]
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	1ad2      	subs	r2, r2, r3
 8009996:	2308      	movs	r3, #8
 8009998:	005b      	lsls	r3, r3, #1
 800999a:	429a      	cmp	r2, r3
 800999c:	d920      	bls.n	80099e0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800999e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	4413      	add	r3, r2
 80099a4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f003 0307 	and.w	r3, r3, #7
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d00b      	beq.n	80099c8 <pvPortMalloc+0xfc>
	__asm volatile
 80099b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b4:	f383 8811 	msr	BASEPRI, r3
 80099b8:	f3bf 8f6f 	isb	sy
 80099bc:	f3bf 8f4f 	dsb	sy
 80099c0:	613b      	str	r3, [r7, #16]
}
 80099c2:	bf00      	nop
 80099c4:	bf00      	nop
 80099c6:	e7fd      	b.n	80099c4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80099c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	1ad2      	subs	r2, r2, r3
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80099d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099d6:	687a      	ldr	r2, [r7, #4]
 80099d8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80099da:	69b8      	ldr	r0, [r7, #24]
 80099dc:	f000 f90a 	bl	8009bf4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80099e0:	4b1d      	ldr	r3, [pc, #116]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80099e6:	685b      	ldr	r3, [r3, #4]
 80099e8:	1ad3      	subs	r3, r2, r3
 80099ea:	4a1b      	ldr	r2, [pc, #108]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099ec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80099ee:	4b1a      	ldr	r3, [pc, #104]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	4b1b      	ldr	r3, [pc, #108]	@ (8009a60 <pvPortMalloc+0x194>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d203      	bcs.n	8009a02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80099fa:	4b17      	ldr	r3, [pc, #92]	@ (8009a58 <pvPortMalloc+0x18c>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a18      	ldr	r2, [pc, #96]	@ (8009a60 <pvPortMalloc+0x194>)
 8009a00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a04:	685a      	ldr	r2, [r3, #4]
 8009a06:	4b13      	ldr	r3, [pc, #76]	@ (8009a54 <pvPortMalloc+0x188>)
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	431a      	orrs	r2, r3
 8009a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009a12:	2200      	movs	r2, #0
 8009a14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009a16:	4b13      	ldr	r3, [pc, #76]	@ (8009a64 <pvPortMalloc+0x198>)
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	4a11      	ldr	r2, [pc, #68]	@ (8009a64 <pvPortMalloc+0x198>)
 8009a1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009a20:	f7fe fcdc 	bl	80083dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a24:	69fb      	ldr	r3, [r7, #28]
 8009a26:	f003 0307 	and.w	r3, r3, #7
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d00b      	beq.n	8009a46 <pvPortMalloc+0x17a>
	__asm volatile
 8009a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a32:	f383 8811 	msr	BASEPRI, r3
 8009a36:	f3bf 8f6f 	isb	sy
 8009a3a:	f3bf 8f4f 	dsb	sy
 8009a3e:	60fb      	str	r3, [r7, #12]
}
 8009a40:	bf00      	nop
 8009a42:	bf00      	nop
 8009a44:	e7fd      	b.n	8009a42 <pvPortMalloc+0x176>
	return pvReturn;
 8009a46:	69fb      	ldr	r3, [r7, #28]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3728      	adds	r7, #40	@ 0x28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	200052e8 	.word	0x200052e8
 8009a54:	200052fc 	.word	0x200052fc
 8009a58:	200052ec 	.word	0x200052ec
 8009a5c:	200052e0 	.word	0x200052e0
 8009a60:	200052f0 	.word	0x200052f0
 8009a64:	200052f4 	.word	0x200052f4

08009a68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d04f      	beq.n	8009b1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009a7a:	2308      	movs	r3, #8
 8009a7c:	425b      	negs	r3, r3
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	4413      	add	r3, r2
 8009a82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009a84:	697b      	ldr	r3, [r7, #20]
 8009a86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009a88:	693b      	ldr	r3, [r7, #16]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	4b25      	ldr	r3, [pc, #148]	@ (8009b24 <vPortFree+0xbc>)
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	4013      	ands	r3, r2
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d10b      	bne.n	8009aae <vPortFree+0x46>
	__asm volatile
 8009a96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a9a:	f383 8811 	msr	BASEPRI, r3
 8009a9e:	f3bf 8f6f 	isb	sy
 8009aa2:	f3bf 8f4f 	dsb	sy
 8009aa6:	60fb      	str	r3, [r7, #12]
}
 8009aa8:	bf00      	nop
 8009aaa:	bf00      	nop
 8009aac:	e7fd      	b.n	8009aaa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009aae:	693b      	ldr	r3, [r7, #16]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d00b      	beq.n	8009ace <vPortFree+0x66>
	__asm volatile
 8009ab6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aba:	f383 8811 	msr	BASEPRI, r3
 8009abe:	f3bf 8f6f 	isb	sy
 8009ac2:	f3bf 8f4f 	dsb	sy
 8009ac6:	60bb      	str	r3, [r7, #8]
}
 8009ac8:	bf00      	nop
 8009aca:	bf00      	nop
 8009acc:	e7fd      	b.n	8009aca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	685a      	ldr	r2, [r3, #4]
 8009ad2:	4b14      	ldr	r3, [pc, #80]	@ (8009b24 <vPortFree+0xbc>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4013      	ands	r3, r2
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	d01e      	beq.n	8009b1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009adc:	693b      	ldr	r3, [r7, #16]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d11a      	bne.n	8009b1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	685a      	ldr	r2, [r3, #4]
 8009ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8009b24 <vPortFree+0xbc>)
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	43db      	mvns	r3, r3
 8009aee:	401a      	ands	r2, r3
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009af4:	f7fe fc64 	bl	80083c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	685a      	ldr	r2, [r3, #4]
 8009afc:	4b0a      	ldr	r3, [pc, #40]	@ (8009b28 <vPortFree+0xc0>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	4413      	add	r3, r2
 8009b02:	4a09      	ldr	r2, [pc, #36]	@ (8009b28 <vPortFree+0xc0>)
 8009b04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f000 f874 	bl	8009bf4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b0c:	4b07      	ldr	r3, [pc, #28]	@ (8009b2c <vPortFree+0xc4>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	3301      	adds	r3, #1
 8009b12:	4a06      	ldr	r2, [pc, #24]	@ (8009b2c <vPortFree+0xc4>)
 8009b14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009b16:	f7fe fc61 	bl	80083dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b1a:	bf00      	nop
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	200052fc 	.word	0x200052fc
 8009b28:	200052ec 	.word	0x200052ec
 8009b2c:	200052f8 	.word	0x200052f8

08009b30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b30:	b480      	push	{r7}
 8009b32:	b085      	sub	sp, #20
 8009b34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8009b3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b3c:	4b27      	ldr	r3, [pc, #156]	@ (8009bdc <prvHeapInit+0xac>)
 8009b3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	f003 0307 	and.w	r3, r3, #7
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d00c      	beq.n	8009b64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3307      	adds	r3, #7
 8009b4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	f023 0307 	bic.w	r3, r3, #7
 8009b56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	1ad3      	subs	r3, r2, r3
 8009b5e:	4a1f      	ldr	r2, [pc, #124]	@ (8009bdc <prvHeapInit+0xac>)
 8009b60:	4413      	add	r3, r2
 8009b62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009b68:	4a1d      	ldr	r2, [pc, #116]	@ (8009be0 <prvHeapInit+0xb0>)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8009be0 <prvHeapInit+0xb0>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	68ba      	ldr	r2, [r7, #8]
 8009b78:	4413      	add	r3, r2
 8009b7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009b7c:	2208      	movs	r2, #8
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	1a9b      	subs	r3, r3, r2
 8009b82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	f023 0307 	bic.w	r3, r3, #7
 8009b8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4a15      	ldr	r2, [pc, #84]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009b92:	4b14      	ldr	r3, [pc, #80]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	2200      	movs	r2, #0
 8009b98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009b9a:	4b12      	ldr	r3, [pc, #72]	@ (8009be4 <prvHeapInit+0xb4>)
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009ba6:	683b      	ldr	r3, [r7, #0]
 8009ba8:	68fa      	ldr	r2, [r7, #12]
 8009baa:	1ad2      	subs	r2, r2, r3
 8009bac:	683b      	ldr	r3, [r7, #0]
 8009bae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8009be4 <prvHeapInit+0xb4>)
 8009bb2:	681a      	ldr	r2, [r3, #0]
 8009bb4:	683b      	ldr	r3, [r7, #0]
 8009bb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8009be8 <prvHeapInit+0xb8>)
 8009bbe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	4a09      	ldr	r2, [pc, #36]	@ (8009bec <prvHeapInit+0xbc>)
 8009bc6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009bc8:	4b09      	ldr	r3, [pc, #36]	@ (8009bf0 <prvHeapInit+0xc0>)
 8009bca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009bce:	601a      	str	r2, [r3, #0]
}
 8009bd0:	bf00      	nop
 8009bd2:	3714      	adds	r7, #20
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr
 8009bdc:	200016e0 	.word	0x200016e0
 8009be0:	200052e0 	.word	0x200052e0
 8009be4:	200052e8 	.word	0x200052e8
 8009be8:	200052f0 	.word	0x200052f0
 8009bec:	200052ec 	.word	0x200052ec
 8009bf0:	200052fc 	.word	0x200052fc

08009bf4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009bf4:	b480      	push	{r7}
 8009bf6:	b085      	sub	sp, #20
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009bfc:	4b28      	ldr	r3, [pc, #160]	@ (8009ca0 <prvInsertBlockIntoFreeList+0xac>)
 8009bfe:	60fb      	str	r3, [r7, #12]
 8009c00:	e002      	b.n	8009c08 <prvInsertBlockIntoFreeList+0x14>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	60fb      	str	r3, [r7, #12]
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	429a      	cmp	r2, r3
 8009c10:	d8f7      	bhi.n	8009c02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	685b      	ldr	r3, [r3, #4]
 8009c1a:	68ba      	ldr	r2, [r7, #8]
 8009c1c:	4413      	add	r3, r2
 8009c1e:	687a      	ldr	r2, [r7, #4]
 8009c20:	429a      	cmp	r2, r3
 8009c22:	d108      	bne.n	8009c36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	685a      	ldr	r2, [r3, #4]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	685b      	ldr	r3, [r3, #4]
 8009c2c:	441a      	add	r2, r3
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	68ba      	ldr	r2, [r7, #8]
 8009c40:	441a      	add	r2, r3
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	429a      	cmp	r2, r3
 8009c48:	d118      	bne.n	8009c7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	4b15      	ldr	r3, [pc, #84]	@ (8009ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	429a      	cmp	r2, r3
 8009c54:	d00d      	beq.n	8009c72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	685a      	ldr	r2, [r3, #4]
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	685b      	ldr	r3, [r3, #4]
 8009c60:	441a      	add	r2, r3
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	681a      	ldr	r2, [r3, #0]
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	601a      	str	r2, [r3, #0]
 8009c70:	e008      	b.n	8009c84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009c72:	4b0c      	ldr	r3, [pc, #48]	@ (8009ca4 <prvInsertBlockIntoFreeList+0xb0>)
 8009c74:	681a      	ldr	r2, [r3, #0]
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	601a      	str	r2, [r3, #0]
 8009c7a:	e003      	b.n	8009c84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	681a      	ldr	r2, [r3, #0]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009c84:	68fa      	ldr	r2, [r7, #12]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	d002      	beq.n	8009c92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009c92:	bf00      	nop
 8009c94:	3714      	adds	r7, #20
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	200052e0 	.word	0x200052e0
 8009ca4:	200052e8 	.word	0x200052e8

08009ca8 <memset>:
 8009ca8:	4402      	add	r2, r0
 8009caa:	4603      	mov	r3, r0
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d100      	bne.n	8009cb2 <memset+0xa>
 8009cb0:	4770      	bx	lr
 8009cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb6:	e7f9      	b.n	8009cac <memset+0x4>

08009cb8 <_reclaim_reent>:
 8009cb8:	4b29      	ldr	r3, [pc, #164]	@ (8009d60 <_reclaim_reent+0xa8>)
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	4283      	cmp	r3, r0
 8009cbe:	b570      	push	{r4, r5, r6, lr}
 8009cc0:	4604      	mov	r4, r0
 8009cc2:	d04b      	beq.n	8009d5c <_reclaim_reent+0xa4>
 8009cc4:	69c3      	ldr	r3, [r0, #28]
 8009cc6:	b1ab      	cbz	r3, 8009cf4 <_reclaim_reent+0x3c>
 8009cc8:	68db      	ldr	r3, [r3, #12]
 8009cca:	b16b      	cbz	r3, 8009ce8 <_reclaim_reent+0x30>
 8009ccc:	2500      	movs	r5, #0
 8009cce:	69e3      	ldr	r3, [r4, #28]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	5959      	ldr	r1, [r3, r5]
 8009cd4:	2900      	cmp	r1, #0
 8009cd6:	d13b      	bne.n	8009d50 <_reclaim_reent+0x98>
 8009cd8:	3504      	adds	r5, #4
 8009cda:	2d80      	cmp	r5, #128	@ 0x80
 8009cdc:	d1f7      	bne.n	8009cce <_reclaim_reent+0x16>
 8009cde:	69e3      	ldr	r3, [r4, #28]
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	68d9      	ldr	r1, [r3, #12]
 8009ce4:	f000 f872 	bl	8009dcc <_free_r>
 8009ce8:	69e3      	ldr	r3, [r4, #28]
 8009cea:	6819      	ldr	r1, [r3, #0]
 8009cec:	b111      	cbz	r1, 8009cf4 <_reclaim_reent+0x3c>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 f86c 	bl	8009dcc <_free_r>
 8009cf4:	6961      	ldr	r1, [r4, #20]
 8009cf6:	b111      	cbz	r1, 8009cfe <_reclaim_reent+0x46>
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 f867 	bl	8009dcc <_free_r>
 8009cfe:	69e1      	ldr	r1, [r4, #28]
 8009d00:	b111      	cbz	r1, 8009d08 <_reclaim_reent+0x50>
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 f862 	bl	8009dcc <_free_r>
 8009d08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009d0a:	b111      	cbz	r1, 8009d12 <_reclaim_reent+0x5a>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 f85d 	bl	8009dcc <_free_r>
 8009d12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009d14:	b111      	cbz	r1, 8009d1c <_reclaim_reent+0x64>
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 f858 	bl	8009dcc <_free_r>
 8009d1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009d1e:	b111      	cbz	r1, 8009d26 <_reclaim_reent+0x6e>
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 f853 	bl	8009dcc <_free_r>
 8009d26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009d28:	b111      	cbz	r1, 8009d30 <_reclaim_reent+0x78>
 8009d2a:	4620      	mov	r0, r4
 8009d2c:	f000 f84e 	bl	8009dcc <_free_r>
 8009d30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009d32:	b111      	cbz	r1, 8009d3a <_reclaim_reent+0x82>
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 f849 	bl	8009dcc <_free_r>
 8009d3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009d3c:	b111      	cbz	r1, 8009d44 <_reclaim_reent+0x8c>
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f000 f844 	bl	8009dcc <_free_r>
 8009d44:	6a23      	ldr	r3, [r4, #32]
 8009d46:	b14b      	cbz	r3, 8009d5c <_reclaim_reent+0xa4>
 8009d48:	4620      	mov	r0, r4
 8009d4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d4e:	4718      	bx	r3
 8009d50:	680e      	ldr	r6, [r1, #0]
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 f83a 	bl	8009dcc <_free_r>
 8009d58:	4631      	mov	r1, r6
 8009d5a:	e7bb      	b.n	8009cd4 <_reclaim_reent+0x1c>
 8009d5c:	bd70      	pop	{r4, r5, r6, pc}
 8009d5e:	bf00      	nop
 8009d60:	20000010 	.word	0x20000010

08009d64 <__libc_init_array>:
 8009d64:	b570      	push	{r4, r5, r6, lr}
 8009d66:	4d0d      	ldr	r5, [pc, #52]	@ (8009d9c <__libc_init_array+0x38>)
 8009d68:	4c0d      	ldr	r4, [pc, #52]	@ (8009da0 <__libc_init_array+0x3c>)
 8009d6a:	1b64      	subs	r4, r4, r5
 8009d6c:	10a4      	asrs	r4, r4, #2
 8009d6e:	2600      	movs	r6, #0
 8009d70:	42a6      	cmp	r6, r4
 8009d72:	d109      	bne.n	8009d88 <__libc_init_array+0x24>
 8009d74:	4d0b      	ldr	r5, [pc, #44]	@ (8009da4 <__libc_init_array+0x40>)
 8009d76:	4c0c      	ldr	r4, [pc, #48]	@ (8009da8 <__libc_init_array+0x44>)
 8009d78:	f000 f87e 	bl	8009e78 <_init>
 8009d7c:	1b64      	subs	r4, r4, r5
 8009d7e:	10a4      	asrs	r4, r4, #2
 8009d80:	2600      	movs	r6, #0
 8009d82:	42a6      	cmp	r6, r4
 8009d84:	d105      	bne.n	8009d92 <__libc_init_array+0x2e>
 8009d86:	bd70      	pop	{r4, r5, r6, pc}
 8009d88:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d8c:	4798      	blx	r3
 8009d8e:	3601      	adds	r6, #1
 8009d90:	e7ee      	b.n	8009d70 <__libc_init_array+0xc>
 8009d92:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d96:	4798      	blx	r3
 8009d98:	3601      	adds	r6, #1
 8009d9a:	e7f2      	b.n	8009d82 <__libc_init_array+0x1e>
 8009d9c:	0800a040 	.word	0x0800a040
 8009da0:	0800a040 	.word	0x0800a040
 8009da4:	0800a040 	.word	0x0800a040
 8009da8:	0800a044 	.word	0x0800a044

08009dac <__retarget_lock_acquire_recursive>:
 8009dac:	4770      	bx	lr

08009dae <__retarget_lock_release_recursive>:
 8009dae:	4770      	bx	lr

08009db0 <memcpy>:
 8009db0:	440a      	add	r2, r1
 8009db2:	4291      	cmp	r1, r2
 8009db4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009db8:	d100      	bne.n	8009dbc <memcpy+0xc>
 8009dba:	4770      	bx	lr
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009dc2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009dc6:	4291      	cmp	r1, r2
 8009dc8:	d1f9      	bne.n	8009dbe <memcpy+0xe>
 8009dca:	bd10      	pop	{r4, pc}

08009dcc <_free_r>:
 8009dcc:	b538      	push	{r3, r4, r5, lr}
 8009dce:	4605      	mov	r5, r0
 8009dd0:	2900      	cmp	r1, #0
 8009dd2:	d041      	beq.n	8009e58 <_free_r+0x8c>
 8009dd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dd8:	1f0c      	subs	r4, r1, #4
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfb8      	it	lt
 8009dde:	18e4      	addlt	r4, r4, r3
 8009de0:	f000 f83e 	bl	8009e60 <__malloc_lock>
 8009de4:	4a1d      	ldr	r2, [pc, #116]	@ (8009e5c <_free_r+0x90>)
 8009de6:	6813      	ldr	r3, [r2, #0]
 8009de8:	b933      	cbnz	r3, 8009df8 <_free_r+0x2c>
 8009dea:	6063      	str	r3, [r4, #4]
 8009dec:	6014      	str	r4, [r2, #0]
 8009dee:	4628      	mov	r0, r5
 8009df0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009df4:	f000 b83a 	b.w	8009e6c <__malloc_unlock>
 8009df8:	42a3      	cmp	r3, r4
 8009dfa:	d908      	bls.n	8009e0e <_free_r+0x42>
 8009dfc:	6820      	ldr	r0, [r4, #0]
 8009dfe:	1821      	adds	r1, r4, r0
 8009e00:	428b      	cmp	r3, r1
 8009e02:	bf01      	itttt	eq
 8009e04:	6819      	ldreq	r1, [r3, #0]
 8009e06:	685b      	ldreq	r3, [r3, #4]
 8009e08:	1809      	addeq	r1, r1, r0
 8009e0a:	6021      	streq	r1, [r4, #0]
 8009e0c:	e7ed      	b.n	8009dea <_free_r+0x1e>
 8009e0e:	461a      	mov	r2, r3
 8009e10:	685b      	ldr	r3, [r3, #4]
 8009e12:	b10b      	cbz	r3, 8009e18 <_free_r+0x4c>
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d9fa      	bls.n	8009e0e <_free_r+0x42>
 8009e18:	6811      	ldr	r1, [r2, #0]
 8009e1a:	1850      	adds	r0, r2, r1
 8009e1c:	42a0      	cmp	r0, r4
 8009e1e:	d10b      	bne.n	8009e38 <_free_r+0x6c>
 8009e20:	6820      	ldr	r0, [r4, #0]
 8009e22:	4401      	add	r1, r0
 8009e24:	1850      	adds	r0, r2, r1
 8009e26:	4283      	cmp	r3, r0
 8009e28:	6011      	str	r1, [r2, #0]
 8009e2a:	d1e0      	bne.n	8009dee <_free_r+0x22>
 8009e2c:	6818      	ldr	r0, [r3, #0]
 8009e2e:	685b      	ldr	r3, [r3, #4]
 8009e30:	6053      	str	r3, [r2, #4]
 8009e32:	4408      	add	r0, r1
 8009e34:	6010      	str	r0, [r2, #0]
 8009e36:	e7da      	b.n	8009dee <_free_r+0x22>
 8009e38:	d902      	bls.n	8009e40 <_free_r+0x74>
 8009e3a:	230c      	movs	r3, #12
 8009e3c:	602b      	str	r3, [r5, #0]
 8009e3e:	e7d6      	b.n	8009dee <_free_r+0x22>
 8009e40:	6820      	ldr	r0, [r4, #0]
 8009e42:	1821      	adds	r1, r4, r0
 8009e44:	428b      	cmp	r3, r1
 8009e46:	bf04      	itt	eq
 8009e48:	6819      	ldreq	r1, [r3, #0]
 8009e4a:	685b      	ldreq	r3, [r3, #4]
 8009e4c:	6063      	str	r3, [r4, #4]
 8009e4e:	bf04      	itt	eq
 8009e50:	1809      	addeq	r1, r1, r0
 8009e52:	6021      	streq	r1, [r4, #0]
 8009e54:	6054      	str	r4, [r2, #4]
 8009e56:	e7ca      	b.n	8009dee <_free_r+0x22>
 8009e58:	bd38      	pop	{r3, r4, r5, pc}
 8009e5a:	bf00      	nop
 8009e5c:	2000543c 	.word	0x2000543c

08009e60 <__malloc_lock>:
 8009e60:	4801      	ldr	r0, [pc, #4]	@ (8009e68 <__malloc_lock+0x8>)
 8009e62:	f7ff bfa3 	b.w	8009dac <__retarget_lock_acquire_recursive>
 8009e66:	bf00      	nop
 8009e68:	20005438 	.word	0x20005438

08009e6c <__malloc_unlock>:
 8009e6c:	4801      	ldr	r0, [pc, #4]	@ (8009e74 <__malloc_unlock+0x8>)
 8009e6e:	f7ff bf9e 	b.w	8009dae <__retarget_lock_release_recursive>
 8009e72:	bf00      	nop
 8009e74:	20005438 	.word	0x20005438

08009e78 <_init>:
 8009e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e7a:	bf00      	nop
 8009e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e7e:	bc08      	pop	{r3}
 8009e80:	469e      	mov	lr, r3
 8009e82:	4770      	bx	lr

08009e84 <_fini>:
 8009e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e86:	bf00      	nop
 8009e88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e8a:	bc08      	pop	{r3}
 8009e8c:	469e      	mov	lr, r3
 8009e8e:	4770      	bx	lr
