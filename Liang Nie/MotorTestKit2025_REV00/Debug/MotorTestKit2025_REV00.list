
MotorTestKit2025_REV00.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010200  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  08010390  08010390  00011390  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080109e4  080109e4  00012218  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080109e4  080109e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080109ec  080109ec  00012218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080109ec  080109ec  000119ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080109f0  080109f0  000119f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  080109f4  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012218  2**0
                  CONTENTS
 10 .bss          000056e8  20000218  20000218  00012218  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005900  20005900  00012218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012218  2**0
                  CONTENTS, READONLY
 13 .debug_info   00025bc4  00000000  00000000  00012248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000509a  00000000  00000000  00037e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002190  00000000  00000000  0003cea8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001a21  00000000  00000000  0003f038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026423  00000000  00000000  00040a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024d7d  00000000  00000000  00066e7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e31bb  00000000  00000000  0008bbf9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016edb4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009ee4  00000000  00000000  0016edf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00178cdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010378 	.word	0x08010378

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	08010378 	.word	0x08010378

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 8000ede:	e003      	b.n	8000ee8 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 8000ee0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ee4:	f000 f80a 	bl	8000efc <BMI088_delay_us>
    while(ms--)
 8000ee8:	88fb      	ldrh	r3, [r7, #6]
 8000eea:	1e5a      	subs	r2, r3, #1
 8000eec:	80fa      	strh	r2, [r7, #6]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d1f6      	bne.n	8000ee0 <BMI088_delay_ms+0xc>
    }
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b089      	sub	sp, #36	@ 0x24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 8000f1a:	4b19      	ldr	r3, [pc, #100]	@ (8000f80 <BMI088_delay_us+0x84>)
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 8000f20:	88fb      	ldrh	r3, [r7, #6]
 8000f22:	22a8      	movs	r2, #168	@ 0xa8
 8000f24:	fb02 f303 	mul.w	r3, r2, r3
 8000f28:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <BMI088_delay_us+0x84>)
 8000f2c:	689b      	ldr	r3, [r3, #8]
 8000f2e:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <BMI088_delay_us+0x84>)
 8000f32:	689b      	ldr	r3, [r3, #8]
 8000f34:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d0f8      	beq.n	8000f30 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	429a      	cmp	r2, r3
 8000f44:	d206      	bcs.n	8000f54 <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 8000f46:	69fa      	ldr	r2, [r7, #28]
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	1ad3      	subs	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4413      	add	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
 8000f52:	e007      	b.n	8000f64 <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	693b      	ldr	r3, [r7, #16]
 8000f58:	1ad2      	subs	r2, r2, r3
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	4413      	add	r3, r2
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4413      	add	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	697b      	ldr	r3, [r7, #20]
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	d200      	bcs.n	8000f72 <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000f70:	e7de      	b.n	8000f30 <BMI088_delay_us+0x34>
            {
                break;
 8000f72:	bf00      	nop
            }
        }
    }


}
 8000f74:	bf00      	nop
 8000f76:	3724      	adds	r7, #36	@ 0x24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	e000e010 	.word	0xe000e010

08000f84 <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000f88:	4b04      	ldr	r3, [pc, #16]	@ (8000f9c <BMI088_ACCEL_NS_L+0x18>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a04      	ldr	r2, [pc, #16]	@ (8000fa0 <BMI088_ACCEL_NS_L+0x1c>)
 8000f8e:	8811      	ldrh	r1, [r2, #0]
 8000f90:	2200      	movs	r2, #0
 8000f92:	4618      	mov	r0, r3
 8000f94:	f006 fa3c 	bl	8007410 <HAL_GPIO_WritePin>
}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000000 	.word	0x20000000
 8000fa0:	20000004 	.word	0x20000004

08000fa4 <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000fa8:	4b04      	ldr	r3, [pc, #16]	@ (8000fbc <BMI088_ACCEL_NS_H+0x18>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <BMI088_ACCEL_NS_H+0x1c>)
 8000fae:	8811      	ldrh	r1, [r2, #0]
 8000fb0:	2201      	movs	r2, #1
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f006 fa2c 	bl	8007410 <HAL_GPIO_WritePin>
}
 8000fb8:	bf00      	nop
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	20000000 	.word	0x20000000
 8000fc0:	20000004 	.word	0x20000004

08000fc4 <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <BMI088_GYRO_NS_L+0x18>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a04      	ldr	r2, [pc, #16]	@ (8000fe0 <BMI088_GYRO_NS_L+0x1c>)
 8000fce:	8811      	ldrh	r1, [r2, #0]
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f006 fa1c 	bl	8007410 <HAL_GPIO_WritePin>
}
 8000fd8:	bf00      	nop
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	20000008 	.word	0x20000008
 8000fe0:	2000000c 	.word	0x2000000c

08000fe4 <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 8000fe8:	4b04      	ldr	r3, [pc, #16]	@ (8000ffc <BMI088_GYRO_NS_H+0x18>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a04      	ldr	r2, [pc, #16]	@ (8001000 <BMI088_GYRO_NS_H+0x1c>)
 8000fee:	8811      	ldrh	r1, [r2, #0]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f006 fa0c 	bl	8007410 <HAL_GPIO_WritePin>
}
 8000ff8:	bf00      	nop
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000008 	.word	0x20000008
 8001000:	2000000c 	.word	0x2000000c

08001004 <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af02      	add	r7, sp, #8
 800100a:	4603      	mov	r3, r0
 800100c:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 800100e:	f107 020f 	add.w	r2, r7, #15
 8001012:	1df9      	adds	r1, r7, #7
 8001014:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001018:	9300      	str	r3, [sp, #0]
 800101a:	2301      	movs	r3, #1
 800101c:	4803      	ldr	r0, [pc, #12]	@ (800102c <BMI088_read_write_byte+0x28>)
 800101e:	f007 f875 	bl	800810c <HAL_SPI_TransmitReceive>
    return rx_data;
 8001022:	7bfb      	ldrb	r3, [r7, #15]
}
 8001024:	4618      	mov	r0, r3
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	200009fc 	.word	0x200009fc

08001030 <BMI088_accel_init>:

    return error;
}

uint8_t BMI088_accel_init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
    uint8_t res = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	71bb      	strb	r3, [r7, #6]
    uint8_t write_reg_num = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	71fb      	strb	r3, [r7, #7]

    //check communication
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800103e:	f7ff ffa1 	bl	8000f84 <BMI088_ACCEL_NS_L>
 8001042:	2080      	movs	r0, #128	@ 0x80
 8001044:	f7ff ffde 	bl	8001004 <BMI088_read_write_byte>
 8001048:	2055      	movs	r0, #85	@ 0x55
 800104a:	f7ff ffdb 	bl	8001004 <BMI088_read_write_byte>
 800104e:	2055      	movs	r0, #85	@ 0x55
 8001050:	f7ff ffd8 	bl	8001004 <BMI088_read_write_byte>
 8001054:	4603      	mov	r3, r0
 8001056:	71bb      	strb	r3, [r7, #6]
 8001058:	f7ff ffa4 	bl	8000fa4 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800105c:	2096      	movs	r0, #150	@ 0x96
 800105e:	f7ff ff4d 	bl	8000efc <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 8001062:	f7ff ff8f 	bl	8000f84 <BMI088_ACCEL_NS_L>
 8001066:	2080      	movs	r0, #128	@ 0x80
 8001068:	f7ff ffcc 	bl	8001004 <BMI088_read_write_byte>
 800106c:	2055      	movs	r0, #85	@ 0x55
 800106e:	f7ff ffc9 	bl	8001004 <BMI088_read_write_byte>
 8001072:	2055      	movs	r0, #85	@ 0x55
 8001074:	f7ff ffc6 	bl	8001004 <BMI088_read_write_byte>
 8001078:	4603      	mov	r3, r0
 800107a:	71bb      	strb	r3, [r7, #6]
 800107c:	f7ff ff92 	bl	8000fa4 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001080:	2096      	movs	r0, #150	@ 0x96
 8001082:	f7ff ff3b 	bl	8000efc <BMI088_delay_us>

    //accel software reset
    BMI088_accel_write_single_reg(BMI088_ACC_SOFTRESET, BMI088_ACC_SOFTRESET_VALUE);
 8001086:	f7ff ff7d 	bl	8000f84 <BMI088_ACCEL_NS_L>
 800108a:	21b6      	movs	r1, #182	@ 0xb6
 800108c:	207e      	movs	r0, #126	@ 0x7e
 800108e:	f000 faa3 	bl	80015d8 <BMI088_write_single_reg>
 8001092:	f7ff ff87 	bl	8000fa4 <BMI088_ACCEL_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8001096:	2050      	movs	r0, #80	@ 0x50
 8001098:	f7ff ff1c 	bl	8000ed4 <BMI088_delay_ms>

    //check communication is normal after reset
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 800109c:	f7ff ff72 	bl	8000f84 <BMI088_ACCEL_NS_L>
 80010a0:	2080      	movs	r0, #128	@ 0x80
 80010a2:	f7ff ffaf 	bl	8001004 <BMI088_read_write_byte>
 80010a6:	2055      	movs	r0, #85	@ 0x55
 80010a8:	f7ff ffac 	bl	8001004 <BMI088_read_write_byte>
 80010ac:	2055      	movs	r0, #85	@ 0x55
 80010ae:	f7ff ffa9 	bl	8001004 <BMI088_read_write_byte>
 80010b2:	4603      	mov	r3, r0
 80010b4:	71bb      	strb	r3, [r7, #6]
 80010b6:	f7ff ff75 	bl	8000fa4 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010ba:	2096      	movs	r0, #150	@ 0x96
 80010bc:	f7ff ff1e 	bl	8000efc <BMI088_delay_us>
    BMI088_accel_read_single_reg(BMI088_ACC_CHIP_ID, res);
 80010c0:	f7ff ff60 	bl	8000f84 <BMI088_ACCEL_NS_L>
 80010c4:	2080      	movs	r0, #128	@ 0x80
 80010c6:	f7ff ff9d 	bl	8001004 <BMI088_read_write_byte>
 80010ca:	2055      	movs	r0, #85	@ 0x55
 80010cc:	f7ff ff9a 	bl	8001004 <BMI088_read_write_byte>
 80010d0:	2055      	movs	r0, #85	@ 0x55
 80010d2:	f7ff ff97 	bl	8001004 <BMI088_read_write_byte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	71bb      	strb	r3, [r7, #6]
 80010da:	f7ff ff63 	bl	8000fa4 <BMI088_ACCEL_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80010de:	2096      	movs	r0, #150	@ 0x96
 80010e0:	f7ff ff0c 	bl	8000efc <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_ACC_CHIP_ID_VALUE)
 80010e4:	79bb      	ldrb	r3, [r7, #6]
 80010e6:	2b1e      	cmp	r3, #30
 80010e8:	d001      	beq.n	80010ee <BMI088_accel_init+0xbe>
    {
        return BMI088_NO_SENSOR;
 80010ea:	23ff      	movs	r3, #255	@ 0xff
 80010ec:	e052      	b.n	8001194 <BMI088_accel_init+0x164>
    }

    //set accel sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
 80010f2:	e04b      	b.n	800118c <BMI088_accel_init+0x15c>
    {

        BMI088_accel_write_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], write_BMI088_accel_reg_data_error[write_reg_num][1]);
 80010f4:	f7ff ff46 	bl	8000f84 <BMI088_ACCEL_NS_L>
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	4928      	ldr	r1, [pc, #160]	@ (800119c <BMI088_accel_init+0x16c>)
 80010fc:	4613      	mov	r3, r2
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	4413      	add	r3, r2
 8001102:	440b      	add	r3, r1
 8001104:	7818      	ldrb	r0, [r3, #0]
 8001106:	79fa      	ldrb	r2, [r7, #7]
 8001108:	4924      	ldr	r1, [pc, #144]	@ (800119c <BMI088_accel_init+0x16c>)
 800110a:	4613      	mov	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	4413      	add	r3, r2
 8001110:	440b      	add	r3, r1
 8001112:	3301      	adds	r3, #1
 8001114:	781b      	ldrb	r3, [r3, #0]
 8001116:	4619      	mov	r1, r3
 8001118:	f000 fa5e 	bl	80015d8 <BMI088_write_single_reg>
 800111c:	f7ff ff42 	bl	8000fa4 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001120:	2096      	movs	r0, #150	@ 0x96
 8001122:	f7ff feeb 	bl	8000efc <BMI088_delay_us>

        BMI088_accel_read_single_reg(write_BMI088_accel_reg_data_error[write_reg_num][0], res);
 8001126:	f7ff ff2d 	bl	8000f84 <BMI088_ACCEL_NS_L>
 800112a:	79fa      	ldrb	r2, [r7, #7]
 800112c:	491b      	ldr	r1, [pc, #108]	@ (800119c <BMI088_accel_init+0x16c>)
 800112e:	4613      	mov	r3, r2
 8001130:	005b      	lsls	r3, r3, #1
 8001132:	4413      	add	r3, r2
 8001134:	440b      	add	r3, r1
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800113c:	b2db      	uxtb	r3, r3
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff ff60 	bl	8001004 <BMI088_read_write_byte>
 8001144:	2055      	movs	r0, #85	@ 0x55
 8001146:	f7ff ff5d 	bl	8001004 <BMI088_read_write_byte>
 800114a:	2055      	movs	r0, #85	@ 0x55
 800114c:	f7ff ff5a 	bl	8001004 <BMI088_read_write_byte>
 8001150:	4603      	mov	r3, r0
 8001152:	71bb      	strb	r3, [r7, #6]
 8001154:	f7ff ff26 	bl	8000fa4 <BMI088_ACCEL_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001158:	2096      	movs	r0, #150	@ 0x96
 800115a:	f7ff fecf 	bl	8000efc <BMI088_delay_us>

        if (res != write_BMI088_accel_reg_data_error[write_reg_num][1])
 800115e:	79fa      	ldrb	r2, [r7, #7]
 8001160:	490e      	ldr	r1, [pc, #56]	@ (800119c <BMI088_accel_init+0x16c>)
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	440b      	add	r3, r1
 800116a:	3301      	adds	r3, #1
 800116c:	781b      	ldrb	r3, [r3, #0]
 800116e:	79ba      	ldrb	r2, [r7, #6]
 8001170:	429a      	cmp	r2, r3
 8001172:	d008      	beq.n	8001186 <BMI088_accel_init+0x156>
        {
            return write_BMI088_accel_reg_data_error[write_reg_num][2];
 8001174:	79fa      	ldrb	r2, [r7, #7]
 8001176:	4909      	ldr	r1, [pc, #36]	@ (800119c <BMI088_accel_init+0x16c>)
 8001178:	4613      	mov	r3, r2
 800117a:	005b      	lsls	r3, r3, #1
 800117c:	4413      	add	r3, r2
 800117e:	440b      	add	r3, r1
 8001180:	3302      	adds	r3, #2
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	e006      	b.n	8001194 <BMI088_accel_init+0x164>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_ACCEL_REG_NUM; write_reg_num++)
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	3301      	adds	r3, #1
 800118a:	71fb      	strb	r3, [r7, #7]
 800118c:	79fb      	ldrb	r3, [r7, #7]
 800118e:	2b05      	cmp	r3, #5
 8001190:	d9b0      	bls.n	80010f4 <BMI088_accel_init+0xc4>
        }
    }
    return BMI088_NO_ERROR;
 8001192:	2300      	movs	r3, #0
}
 8001194:	4618      	mov	r0, r3
 8001196:	3708      	adds	r7, #8
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000018 	.word	0x20000018

080011a0 <BMI088_gyro_init>:

uint8_t BMI088_gyro_init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011ae:	f7ff ff09 	bl	8000fc4 <BMI088_GYRO_NS_L>
 80011b2:	1dbb      	adds	r3, r7, #6
 80011b4:	4619      	mov	r1, r3
 80011b6:	2000      	movs	r0, #0
 80011b8:	f000 fa22 	bl	8001600 <BMI088_read_single_reg>
 80011bc:	f7ff ff12 	bl	8000fe4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011c0:	2096      	movs	r0, #150	@ 0x96
 80011c2:	f7ff fe9b 	bl	8000efc <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011c6:	f7ff fefd 	bl	8000fc4 <BMI088_GYRO_NS_L>
 80011ca:	1dbb      	adds	r3, r7, #6
 80011cc:	4619      	mov	r1, r3
 80011ce:	2000      	movs	r0, #0
 80011d0:	f000 fa16 	bl	8001600 <BMI088_read_single_reg>
 80011d4:	f7ff ff06 	bl	8000fe4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80011d8:	2096      	movs	r0, #150	@ 0x96
 80011da:	f7ff fe8f 	bl	8000efc <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 80011de:	f7ff fef1 	bl	8000fc4 <BMI088_GYRO_NS_L>
 80011e2:	21b6      	movs	r1, #182	@ 0xb6
 80011e4:	2014      	movs	r0, #20
 80011e6:	f000 f9f7 	bl	80015d8 <BMI088_write_single_reg>
 80011ea:	f7ff fefb 	bl	8000fe4 <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 80011ee:	2050      	movs	r0, #80	@ 0x50
 80011f0:	f7ff fe70 	bl	8000ed4 <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 80011f4:	f7ff fee6 	bl	8000fc4 <BMI088_GYRO_NS_L>
 80011f8:	1dbb      	adds	r3, r7, #6
 80011fa:	4619      	mov	r1, r3
 80011fc:	2000      	movs	r0, #0
 80011fe:	f000 f9ff 	bl	8001600 <BMI088_read_single_reg>
 8001202:	f7ff feef 	bl	8000fe4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001206:	2096      	movs	r0, #150	@ 0x96
 8001208:	f7ff fe78 	bl	8000efc <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800120c:	f7ff feda 	bl	8000fc4 <BMI088_GYRO_NS_L>
 8001210:	1dbb      	adds	r3, r7, #6
 8001212:	4619      	mov	r1, r3
 8001214:	2000      	movs	r0, #0
 8001216:	f000 f9f3 	bl	8001600 <BMI088_read_single_reg>
 800121a:	f7ff fee3 	bl	8000fe4 <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800121e:	2096      	movs	r0, #150	@ 0x96
 8001220:	f7ff fe6c 	bl	8000efc <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 8001224:	79bb      	ldrb	r3, [r7, #6]
 8001226:	2b0f      	cmp	r3, #15
 8001228:	d001      	beq.n	800122e <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 800122a:	23ff      	movs	r3, #255	@ 0xff
 800122c:	e049      	b.n	80012c2 <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 800122e:	2300      	movs	r3, #0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	e042      	b.n	80012ba <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 8001234:	f7ff fec6 	bl	8000fc4 <BMI088_GYRO_NS_L>
 8001238:	79fa      	ldrb	r2, [r7, #7]
 800123a:	4924      	ldr	r1, [pc, #144]	@ (80012cc <BMI088_gyro_init+0x12c>)
 800123c:	4613      	mov	r3, r2
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	4413      	add	r3, r2
 8001242:	440b      	add	r3, r1
 8001244:	7818      	ldrb	r0, [r3, #0]
 8001246:	79fa      	ldrb	r2, [r7, #7]
 8001248:	4920      	ldr	r1, [pc, #128]	@ (80012cc <BMI088_gyro_init+0x12c>)
 800124a:	4613      	mov	r3, r2
 800124c:	005b      	lsls	r3, r3, #1
 800124e:	4413      	add	r3, r2
 8001250:	440b      	add	r3, r1
 8001252:	3301      	adds	r3, #1
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	4619      	mov	r1, r3
 8001258:	f000 f9be 	bl	80015d8 <BMI088_write_single_reg>
 800125c:	f7ff fec2 	bl	8000fe4 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001260:	2096      	movs	r0, #150	@ 0x96
 8001262:	f7ff fe4b 	bl	8000efc <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 8001266:	f7ff fead 	bl	8000fc4 <BMI088_GYRO_NS_L>
 800126a:	79fa      	ldrb	r2, [r7, #7]
 800126c:	4917      	ldr	r1, [pc, #92]	@ (80012cc <BMI088_gyro_init+0x12c>)
 800126e:	4613      	mov	r3, r2
 8001270:	005b      	lsls	r3, r3, #1
 8001272:	4413      	add	r3, r2
 8001274:	440b      	add	r3, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	1dba      	adds	r2, r7, #6
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f9bf 	bl	8001600 <BMI088_read_single_reg>
 8001282:	f7ff feaf 	bl	8000fe4 <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8001286:	2096      	movs	r0, #150	@ 0x96
 8001288:	f7ff fe38 	bl	8000efc <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 800128c:	79fa      	ldrb	r2, [r7, #7]
 800128e:	490f      	ldr	r1, [pc, #60]	@ (80012cc <BMI088_gyro_init+0x12c>)
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	440b      	add	r3, r1
 8001298:	3301      	adds	r3, #1
 800129a:	781a      	ldrb	r2, [r3, #0]
 800129c:	79bb      	ldrb	r3, [r7, #6]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d008      	beq.n	80012b4 <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	4909      	ldr	r1, [pc, #36]	@ (80012cc <BMI088_gyro_init+0x12c>)
 80012a6:	4613      	mov	r3, r2
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	4413      	add	r3, r2
 80012ac:	440b      	add	r3, r1
 80012ae:	3302      	adds	r3, #2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	e006      	b.n	80012c2 <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	3301      	adds	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	2b05      	cmp	r3, #5
 80012be:	d9b9      	bls.n	8001234 <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	2000002c 	.word	0x2000002c

080012d0 <IMU_get_gyro>:
int16_t IMU_get_gyro(uint8_t axis) {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
    BMI088_read(gyro, accel, &temp);
 80012da:	4a26      	ldr	r2, [pc, #152]	@ (8001374 <IMU_get_gyro+0xa4>)
 80012dc:	4926      	ldr	r1, [pc, #152]	@ (8001378 <IMU_get_gyro+0xa8>)
 80012de:	4827      	ldr	r0, [pc, #156]	@ (800137c <IMU_get_gyro+0xac>)
 80012e0:	f000 f890 	bl	8001404 <BMI088_read>
    if(axis == 0){
 80012e4:	79fb      	ldrb	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d112      	bne.n	8001310 <IMU_get_gyro+0x40>
        return (100.0*gyro[0]);
 80012ea:	4b24      	ldr	r3, [pc, #144]	@ (800137c <IMU_get_gyro+0xac>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4618      	mov	r0, r3
 80012f0:	f7ff f92a 	bl	8000548 <__aeabi_f2d>
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	4b21      	ldr	r3, [pc, #132]	@ (8001380 <IMU_get_gyro+0xb0>)
 80012fa:	f7ff f97d 	bl	80005f8 <__aeabi_dmul>
 80012fe:	4602      	mov	r2, r0
 8001300:	460b      	mov	r3, r1
 8001302:	4610      	mov	r0, r2
 8001304:	4619      	mov	r1, r3
 8001306:	f7ff fc27 	bl	8000b58 <__aeabi_d2iz>
 800130a:	4603      	mov	r3, r0
 800130c:	b21b      	sxth	r3, r3
 800130e:	e02c      	b.n	800136a <IMU_get_gyro+0x9a>
    } else if (axis == 1) {
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b01      	cmp	r3, #1
 8001314:	d112      	bne.n	800133c <IMU_get_gyro+0x6c>
        return (100.0*gyro[1]);
 8001316:	4b19      	ldr	r3, [pc, #100]	@ (800137c <IMU_get_gyro+0xac>)
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff f914 	bl	8000548 <__aeabi_f2d>
 8001320:	f04f 0200 	mov.w	r2, #0
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <IMU_get_gyro+0xb0>)
 8001326:	f7ff f967 	bl	80005f8 <__aeabi_dmul>
 800132a:	4602      	mov	r2, r0
 800132c:	460b      	mov	r3, r1
 800132e:	4610      	mov	r0, r2
 8001330:	4619      	mov	r1, r3
 8001332:	f7ff fc11 	bl	8000b58 <__aeabi_d2iz>
 8001336:	4603      	mov	r3, r0
 8001338:	b21b      	sxth	r3, r3
 800133a:	e016      	b.n	800136a <IMU_get_gyro+0x9a>
    } else if (axis == 2) {
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b02      	cmp	r3, #2
 8001340:	d112      	bne.n	8001368 <IMU_get_gyro+0x98>
        return (100.0*gyro[2]);
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <IMU_get_gyro+0xac>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff f8fe 	bl	8000548 <__aeabi_f2d>
 800134c:	f04f 0200 	mov.w	r2, #0
 8001350:	4b0b      	ldr	r3, [pc, #44]	@ (8001380 <IMU_get_gyro+0xb0>)
 8001352:	f7ff f951 	bl	80005f8 <__aeabi_dmul>
 8001356:	4602      	mov	r2, r0
 8001358:	460b      	mov	r3, r1
 800135a:	4610      	mov	r0, r2
 800135c:	4619      	mov	r1, r3
 800135e:	f7ff fbfb 	bl	8000b58 <__aeabi_d2iz>
 8001362:	4603      	mov	r3, r0
 8001364:	b21b      	sxth	r3, r3
 8001366:	e000      	b.n	800136a <IMU_get_gyro+0x9a>
    } else {
        return 0;
 8001368:	2300      	movs	r3, #0
    }
}
 800136a:	4618      	mov	r0, r3
 800136c:	3708      	adds	r7, #8
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	2000024c 	.word	0x2000024c
 8001378:	20000240 	.word	0x20000240
 800137c:	20000234 	.word	0x20000234
 8001380:	40590000 	.word	0x40590000

08001384 <IMU_get_accel>:

float IMU_get_accel(uint8_t axis) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	71fb      	strb	r3, [r7, #7]
    BMI088_read(gyro, accel, &temp);
 800138e:	4a10      	ldr	r2, [pc, #64]	@ (80013d0 <IMU_get_accel+0x4c>)
 8001390:	4910      	ldr	r1, [pc, #64]	@ (80013d4 <IMU_get_accel+0x50>)
 8001392:	4811      	ldr	r0, [pc, #68]	@ (80013d8 <IMU_get_accel+0x54>)
 8001394:	f000 f836 	bl	8001404 <BMI088_read>
    if(axis == 0){
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <IMU_get_accel+0x20>
        return accel[0];
 800139e:	4b0d      	ldr	r3, [pc, #52]	@ (80013d4 <IMU_get_accel+0x50>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	e00d      	b.n	80013c0 <IMU_get_accel+0x3c>
    } else if (axis == 1) {
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	2b01      	cmp	r3, #1
 80013a8:	d102      	bne.n	80013b0 <IMU_get_accel+0x2c>
        return accel[1];
 80013aa:	4b0a      	ldr	r3, [pc, #40]	@ (80013d4 <IMU_get_accel+0x50>)
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	e007      	b.n	80013c0 <IMU_get_accel+0x3c>
    } else if (axis == 2) {
 80013b0:	79fb      	ldrb	r3, [r7, #7]
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d102      	bne.n	80013bc <IMU_get_accel+0x38>
        return accel[2];
 80013b6:	4b07      	ldr	r3, [pc, #28]	@ (80013d4 <IMU_get_accel+0x50>)
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	e001      	b.n	80013c0 <IMU_get_accel+0x3c>
    } else {
        return 0;
 80013bc:	f04f 0300 	mov.w	r3, #0
    }
}
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eeb0 0a67 	vmov.f32	s0, s15
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000024c 	.word	0x2000024c
 80013d4:	20000240 	.word	0x20000240
 80013d8:	20000234 	.word	0x20000234

080013dc <IMU_get_temp>:
float IMU_get_temp(void) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 80013e0:	4a05      	ldr	r2, [pc, #20]	@ (80013f8 <IMU_get_temp+0x1c>)
 80013e2:	4906      	ldr	r1, [pc, #24]	@ (80013fc <IMU_get_temp+0x20>)
 80013e4:	4806      	ldr	r0, [pc, #24]	@ (8001400 <IMU_get_temp+0x24>)
 80013e6:	f000 f80d 	bl	8001404 <BMI088_read>
	return temp;
 80013ea:	4b03      	ldr	r3, [pc, #12]	@ (80013f8 <IMU_get_temp+0x1c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	ee07 3a90 	vmov	s15, r3
}
 80013f2:	eeb0 0a67 	vmov.f32	s0, s15
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	2000024c 	.word	0x2000024c
 80013fc:	20000240 	.word	0x20000240
 8001400:	20000234 	.word	0x20000234

08001404 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b088      	sub	sp, #32
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 8001410:	f107 0314 	add.w	r3, r7, #20
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 800141a:	f7ff fdb3 	bl	8000f84 <BMI088_ACCEL_NS_L>
 800141e:	2092      	movs	r0, #146	@ 0x92
 8001420:	f7ff fdf0 	bl	8001004 <BMI088_read_write_byte>
 8001424:	f107 0314 	add.w	r3, r7, #20
 8001428:	2206      	movs	r2, #6
 800142a:	4619      	mov	r1, r3
 800142c:	2012      	movs	r0, #18
 800142e:	f000 f8ff 	bl	8001630 <BMI088_read_muli_reg>
 8001432:	f7ff fdb7 	bl	8000fa4 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8001436:	7d7b      	ldrb	r3, [r7, #21]
 8001438:	b21b      	sxth	r3, r3
 800143a:	021b      	lsls	r3, r3, #8
 800143c:	b21a      	sxth	r2, r3
 800143e:	7d3b      	ldrb	r3, [r7, #20]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001446:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800144a:	ee07 3a90 	vmov	s15, r3
 800144e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001452:	4b5f      	ldr	r3, [pc, #380]	@ (80015d0 <BMI088_read+0x1cc>)
 8001454:	edd3 7a00 	vldr	s15, [r3]
 8001458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145c:	68bb      	ldr	r3, [r7, #8]
 800145e:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8001462:	7dfb      	ldrb	r3, [r7, #23]
 8001464:	b21b      	sxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b21a      	sxth	r2, r3
 800146a:	7dbb      	ldrb	r3, [r7, #22]
 800146c:	b21b      	sxth	r3, r3
 800146e:	4313      	orrs	r3, r2
 8001470:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 8001472:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001476:	ee07 3a90 	vmov	s15, r3
 800147a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800147e:	4b54      	ldr	r3, [pc, #336]	@ (80015d0 <BMI088_read+0x1cc>)
 8001480:	edd3 7a00 	vldr	s15, [r3]
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	3304      	adds	r3, #4
 8001488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800148c:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001490:	7e7b      	ldrb	r3, [r7, #25]
 8001492:	b21b      	sxth	r3, r3
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	7e3b      	ldrb	r3, [r7, #24]
 800149a:	b21b      	sxth	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80014a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014a4:	ee07 3a90 	vmov	s15, r3
 80014a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014ac:	4b48      	ldr	r3, [pc, #288]	@ (80015d0 <BMI088_read+0x1cc>)
 80014ae:	edd3 7a00 	vldr	s15, [r3]
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	3308      	adds	r3, #8
 80014b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014ba:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 80014be:	f7ff fd81 	bl	8000fc4 <BMI088_GYRO_NS_L>
 80014c2:	f107 0314 	add.w	r3, r7, #20
 80014c6:	2208      	movs	r2, #8
 80014c8:	4619      	mov	r1, r3
 80014ca:	2000      	movs	r0, #0
 80014cc:	f000 f8b0 	bl	8001630 <BMI088_read_muli_reg>
 80014d0:	f7ff fd88 	bl	8000fe4 <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 80014d4:	7d3b      	ldrb	r3, [r7, #20]
 80014d6:	2b0f      	cmp	r3, #15
 80014d8:	d143      	bne.n	8001562 <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80014da:	7dfb      	ldrb	r3, [r7, #23]
 80014dc:	b21b      	sxth	r3, r3
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	7dbb      	ldrb	r3, [r7, #22]
 80014e4:	b21b      	sxth	r3, r3
 80014e6:	4313      	orrs	r3, r2
 80014e8:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80014ea:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80014ee:	ee07 3a90 	vmov	s15, r3
 80014f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014f6:	4b37      	ldr	r3, [pc, #220]	@ (80015d4 <BMI088_read+0x1d0>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8001506:	7e7b      	ldrb	r3, [r7, #25]
 8001508:	b21b      	sxth	r3, r3
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	7e3b      	ldrb	r3, [r7, #24]
 8001510:	b21b      	sxth	r3, r3
 8001512:	4313      	orrs	r3, r2
 8001514:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001516:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800151a:	ee07 3a90 	vmov	s15, r3
 800151e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001522:	4b2c      	ldr	r3, [pc, #176]	@ (80015d4 <BMI088_read+0x1d0>)
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3304      	adds	r3, #4
 800152c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001530:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8001534:	7efb      	ldrb	r3, [r7, #27]
 8001536:	b21b      	sxth	r3, r3
 8001538:	021b      	lsls	r3, r3, #8
 800153a:	b21a      	sxth	r2, r3
 800153c:	7ebb      	ldrb	r3, [r7, #26]
 800153e:	b21b      	sxth	r3, r3
 8001540:	4313      	orrs	r3, r2
 8001542:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8001544:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001548:	ee07 3a90 	vmov	s15, r3
 800154c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001550:	4b20      	ldr	r3, [pc, #128]	@ (80015d4 <BMI088_read+0x1d0>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	3308      	adds	r3, #8
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 8001562:	f7ff fd0f 	bl	8000f84 <BMI088_ACCEL_NS_L>
 8001566:	20a2      	movs	r0, #162	@ 0xa2
 8001568:	f7ff fd4c 	bl	8001004 <BMI088_read_write_byte>
 800156c:	f107 0314 	add.w	r3, r7, #20
 8001570:	2202      	movs	r2, #2
 8001572:	4619      	mov	r1, r3
 8001574:	2022      	movs	r0, #34	@ 0x22
 8001576:	f000 f85b 	bl	8001630 <BMI088_read_muli_reg>
 800157a:	f7ff fd13 	bl	8000fa4 <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 800157e:	7d3b      	ldrb	r3, [r7, #20]
 8001580:	b21b      	sxth	r3, r3
 8001582:	00db      	lsls	r3, r3, #3
 8001584:	b21a      	sxth	r2, r3
 8001586:	7d7b      	ldrb	r3, [r7, #21]
 8001588:	095b      	lsrs	r3, r3, #5
 800158a:	b2db      	uxtb	r3, r3
 800158c:	b21b      	sxth	r3, r3
 800158e:	4313      	orrs	r3, r2
 8001590:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 8001592:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159a:	db04      	blt.n	80015a6 <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 800159c:	8bfb      	ldrh	r3, [r7, #30]
 800159e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80015a2:	b29b      	uxth	r3, r3
 80015a4:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 80015a6:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b2:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 80015b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015ba:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 80015be:	ee77 7a87 	vadd.f32	s15, s15, s14
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	edc3 7a00 	vstr	s15, [r3]
}
 80015c8:	bf00      	nop
 80015ca:	3720      	adds	r7, #32
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}
 80015d0:	20000010 	.word	0x20000010
 80015d4:	20000014 	.word	0x20000014

080015d8 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	460a      	mov	r2, r1
 80015e2:	71fb      	strb	r3, [r7, #7]
 80015e4:	4613      	mov	r3, r2
 80015e6:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 80015e8:	79fb      	ldrb	r3, [r7, #7]
 80015ea:	4618      	mov	r0, r3
 80015ec:	f7ff fd0a 	bl	8001004 <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 80015f0:	79bb      	ldrb	r3, [r7, #6]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f7ff fd06 	bl	8001004 <BMI088_read_write_byte>
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}

08001600 <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	4603      	mov	r3, r0
 8001608:	6039      	str	r1, [r7, #0]
 800160a:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001612:	b2db      	uxtb	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fcf5 	bl	8001004 <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 800161a:	2055      	movs	r0, #85	@ 0x55
 800161c:	f7ff fcf2 	bl	8001004 <BMI088_read_write_byte>
 8001620:	4603      	mov	r3, r0
 8001622:	461a      	mov	r2, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	701a      	strb	r2, [r3, #0]
}
 8001628:	bf00      	nop
 800162a:	3708      	adds	r7, #8
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	4603      	mov	r3, r0
 8001638:	6039      	str	r1, [r7, #0]
 800163a:	71fb      	strb	r3, [r7, #7]
 800163c:	4613      	mov	r3, r2
 800163e:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8001640:	79fb      	ldrb	r3, [r7, #7]
 8001642:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001646:	b2db      	uxtb	r3, r3
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fcdb 	bl	8001004 <BMI088_read_write_byte>

    while (len != 0)
 800164e:	e00c      	b.n	800166a <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8001650:	2055      	movs	r0, #85	@ 0x55
 8001652:	f7ff fcd7 	bl	8001004 <BMI088_read_write_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	701a      	strb	r2, [r3, #0]
        buf++;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	3301      	adds	r3, #1
 8001662:	603b      	str	r3, [r7, #0]
        len--;
 8001664:	79bb      	ldrb	r3, [r7, #6]
 8001666:	3b01      	subs	r3, #1
 8001668:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 800166a:	79bb      	ldrb	r3, [r7, #6]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d1ef      	bne.n	8001650 <BMI088_read_muli_reg+0x20>
    }
}
 8001670:	bf00      	nop
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <CAL_Update>:
int16_t dCounter = 0;

int16_t mouseX = 0;
int16_t mouseY = 0;

void CAL_Update(){
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 8001680:	f000 ffa2 	bl	80025c8 <getDR16_S2>
 8001684:	4603      	mov	r3, r0
 8001686:	2b01      	cmp	r3, #1
 8001688:	d13b      	bne.n	8001702 <CAL_Update+0x86>
		isWPressed = getDR16_W();
 800168a:	f000 ffab 	bl	80025e4 <getDR16_W>
 800168e:	4603      	mov	r3, r0
 8001690:	461a      	mov	r2, r3
 8001692:	4b90      	ldr	r3, [pc, #576]	@ (80018d4 <CAL_Update+0x258>)
 8001694:	701a      	strb	r2, [r3, #0]
		isAPressed = getDR16_A();
 8001696:	f000 ffc1 	bl	800261c <getDR16_A>
 800169a:	4603      	mov	r3, r0
 800169c:	461a      	mov	r2, r3
 800169e:	4b8e      	ldr	r3, [pc, #568]	@ (80018d8 <CAL_Update+0x25c>)
 80016a0:	701a      	strb	r2, [r3, #0]
		isSPressed = getDR16_S();
 80016a2:	f000 ffad 	bl	8002600 <getDR16_S>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b8c      	ldr	r3, [pc, #560]	@ (80018dc <CAL_Update+0x260>)
 80016ac:	701a      	strb	r2, [r3, #0]
		isDPressed = getDR16_D();
 80016ae:	f000 ffc3 	bl	8002638 <getDR16_D>
 80016b2:	4603      	mov	r3, r0
 80016b4:	461a      	mov	r2, r3
 80016b6:	4b8a      	ldr	r3, [pc, #552]	@ (80018e0 <CAL_Update+0x264>)
 80016b8:	701a      	strb	r2, [r3, #0]
		mouseX = (int16_t)(((float)getDR16_MouseX())*MOUSE_SCALER);
 80016ba:	f000 ffcb 	bl	8002654 <getDR16_MouseX>
 80016be:	4603      	mov	r3, r0
 80016c0:	ee07 3a90 	vmov	s15, r3
 80016c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d4:	ee17 3a90 	vmov	r3, s15
 80016d8:	b21a      	sxth	r2, r3
 80016da:	4b82      	ldr	r3, [pc, #520]	@ (80018e4 <CAL_Update+0x268>)
 80016dc:	801a      	strh	r2, [r3, #0]
		mouseY = (int16_t)(((float)getDR16_MouseY())*MOUSE_SCALER);
 80016de:	f000 ffc5 	bl	800266c <getDR16_MouseY>
 80016e2:	4603      	mov	r3, r0
 80016e4:	ee07 3a90 	vmov	s15, r3
 80016e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ec:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80016f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80016f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016f8:	ee17 3a90 	vmov	r3, s15
 80016fc:	b21a      	sxth	r2, r3
 80016fe:	4b7a      	ldr	r3, [pc, #488]	@ (80018e8 <CAL_Update+0x26c>)
 8001700:	801a      	strh	r2, [r3, #0]
	}
	if(isWPressed ==1){
 8001702:	4b74      	ldr	r3, [pc, #464]	@ (80018d4 <CAL_Update+0x258>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d115      	bne.n	8001736 <CAL_Update+0xba>
		wCounter = wCounter + RISING_SCALER;
 800170a:	4b78      	ldr	r3, [pc, #480]	@ (80018ec <CAL_Update+0x270>)
 800170c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001710:	b29a      	uxth	r2, r3
 8001712:	2305      	movs	r3, #5
 8001714:	b29b      	uxth	r3, r3
 8001716:	4413      	add	r3, r2
 8001718:	b29b      	uxth	r3, r3
 800171a:	b21a      	sxth	r2, r3
 800171c:	4b73      	ldr	r3, [pc, #460]	@ (80018ec <CAL_Update+0x270>)
 800171e:	801a      	strh	r2, [r3, #0]
		if(wCounter>660){
 8001720:	4b72      	ldr	r3, [pc, #456]	@ (80018ec <CAL_Update+0x270>)
 8001722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001726:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800172a:	dd1c      	ble.n	8001766 <CAL_Update+0xea>
			wCounter = 660;
 800172c:	4b6f      	ldr	r3, [pc, #444]	@ (80018ec <CAL_Update+0x270>)
 800172e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001732:	801a      	strh	r2, [r3, #0]
 8001734:	e017      	b.n	8001766 <CAL_Update+0xea>
		}
	}else{
		if(wCounter>0){
 8001736:	4b6d      	ldr	r3, [pc, #436]	@ (80018ec <CAL_Update+0x270>)
 8001738:	f9b3 3000 	ldrsh.w	r3, [r3]
 800173c:	2b00      	cmp	r3, #0
 800173e:	dd0a      	ble.n	8001756 <CAL_Update+0xda>
			wCounter = wCounter - FALLING_SCALER;
 8001740:	4b6a      	ldr	r3, [pc, #424]	@ (80018ec <CAL_Update+0x270>)
 8001742:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001746:	b29a      	uxth	r2, r3
 8001748:	230a      	movs	r3, #10
 800174a:	b29b      	uxth	r3, r3
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	b29b      	uxth	r3, r3
 8001750:	b21a      	sxth	r2, r3
 8001752:	4b66      	ldr	r3, [pc, #408]	@ (80018ec <CAL_Update+0x270>)
 8001754:	801a      	strh	r2, [r3, #0]
		}
		if(wCounter<0){
 8001756:	4b65      	ldr	r3, [pc, #404]	@ (80018ec <CAL_Update+0x270>)
 8001758:	f9b3 3000 	ldrsh.w	r3, [r3]
 800175c:	2b00      	cmp	r3, #0
 800175e:	da02      	bge.n	8001766 <CAL_Update+0xea>
			wCounter = 0;
 8001760:	4b62      	ldr	r3, [pc, #392]	@ (80018ec <CAL_Update+0x270>)
 8001762:	2200      	movs	r2, #0
 8001764:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isDPressed ==1){
 8001766:	4b5e      	ldr	r3, [pc, #376]	@ (80018e0 <CAL_Update+0x264>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d115      	bne.n	800179a <CAL_Update+0x11e>
		dCounter = dCounter + RISING_SCALER;
 800176e:	4b60      	ldr	r3, [pc, #384]	@ (80018f0 <CAL_Update+0x274>)
 8001770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001774:	b29a      	uxth	r2, r3
 8001776:	2305      	movs	r3, #5
 8001778:	b29b      	uxth	r3, r3
 800177a:	4413      	add	r3, r2
 800177c:	b29b      	uxth	r3, r3
 800177e:	b21a      	sxth	r2, r3
 8001780:	4b5b      	ldr	r3, [pc, #364]	@ (80018f0 <CAL_Update+0x274>)
 8001782:	801a      	strh	r2, [r3, #0]
		if(dCounter>660){
 8001784:	4b5a      	ldr	r3, [pc, #360]	@ (80018f0 <CAL_Update+0x274>)
 8001786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800178a:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800178e:	dd1c      	ble.n	80017ca <CAL_Update+0x14e>
			dCounter = 660;
 8001790:	4b57      	ldr	r3, [pc, #348]	@ (80018f0 <CAL_Update+0x274>)
 8001792:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001796:	801a      	strh	r2, [r3, #0]
 8001798:	e017      	b.n	80017ca <CAL_Update+0x14e>
		}
	}else{
		if(dCounter>0){
 800179a:	4b55      	ldr	r3, [pc, #340]	@ (80018f0 <CAL_Update+0x274>)
 800179c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	dd0a      	ble.n	80017ba <CAL_Update+0x13e>
			dCounter = dCounter - FALLING_SCALER;
 80017a4:	4b52      	ldr	r3, [pc, #328]	@ (80018f0 <CAL_Update+0x274>)
 80017a6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	230a      	movs	r3, #10
 80017ae:	b29b      	uxth	r3, r3
 80017b0:	1ad3      	subs	r3, r2, r3
 80017b2:	b29b      	uxth	r3, r3
 80017b4:	b21a      	sxth	r2, r3
 80017b6:	4b4e      	ldr	r3, [pc, #312]	@ (80018f0 <CAL_Update+0x274>)
 80017b8:	801a      	strh	r2, [r3, #0]
		}
		if(dCounter<0){
 80017ba:	4b4d      	ldr	r3, [pc, #308]	@ (80018f0 <CAL_Update+0x274>)
 80017bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	da02      	bge.n	80017ca <CAL_Update+0x14e>
			dCounter = 0;
 80017c4:	4b4a      	ldr	r3, [pc, #296]	@ (80018f0 <CAL_Update+0x274>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isSPressed ==1){
 80017ca:	4b44      	ldr	r3, [pc, #272]	@ (80018dc <CAL_Update+0x260>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d115      	bne.n	80017fe <CAL_Update+0x182>
		sCounter = sCounter + RISING_SCALER;
 80017d2:	4b48      	ldr	r3, [pc, #288]	@ (80018f4 <CAL_Update+0x278>)
 80017d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	2305      	movs	r3, #5
 80017dc:	b29b      	uxth	r3, r3
 80017de:	4413      	add	r3, r2
 80017e0:	b29b      	uxth	r3, r3
 80017e2:	b21a      	sxth	r2, r3
 80017e4:	4b43      	ldr	r3, [pc, #268]	@ (80018f4 <CAL_Update+0x278>)
 80017e6:	801a      	strh	r2, [r3, #0]
		if(sCounter>660){
 80017e8:	4b42      	ldr	r3, [pc, #264]	@ (80018f4 <CAL_Update+0x278>)
 80017ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017ee:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80017f2:	dd1c      	ble.n	800182e <CAL_Update+0x1b2>
			sCounter = 660;
 80017f4:	4b3f      	ldr	r3, [pc, #252]	@ (80018f4 <CAL_Update+0x278>)
 80017f6:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80017fa:	801a      	strh	r2, [r3, #0]
 80017fc:	e017      	b.n	800182e <CAL_Update+0x1b2>
		}
	}else{
		if(sCounter>0){
 80017fe:	4b3d      	ldr	r3, [pc, #244]	@ (80018f4 <CAL_Update+0x278>)
 8001800:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001804:	2b00      	cmp	r3, #0
 8001806:	dd0a      	ble.n	800181e <CAL_Update+0x1a2>
			sCounter = sCounter - FALLING_SCALER;
 8001808:	4b3a      	ldr	r3, [pc, #232]	@ (80018f4 <CAL_Update+0x278>)
 800180a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800180e:	b29a      	uxth	r2, r3
 8001810:	230a      	movs	r3, #10
 8001812:	b29b      	uxth	r3, r3
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b29b      	uxth	r3, r3
 8001818:	b21a      	sxth	r2, r3
 800181a:	4b36      	ldr	r3, [pc, #216]	@ (80018f4 <CAL_Update+0x278>)
 800181c:	801a      	strh	r2, [r3, #0]
		}
		if(sCounter<0){
 800181e:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <CAL_Update+0x278>)
 8001820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001824:	2b00      	cmp	r3, #0
 8001826:	da02      	bge.n	800182e <CAL_Update+0x1b2>
			sCounter = 0;
 8001828:	4b32      	ldr	r3, [pc, #200]	@ (80018f4 <CAL_Update+0x278>)
 800182a:	2200      	movs	r2, #0
 800182c:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isAPressed ==1){
 800182e:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <CAL_Update+0x25c>)
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d115      	bne.n	8001862 <CAL_Update+0x1e6>
		aCounter = aCounter + RISING_SCALER;
 8001836:	4b30      	ldr	r3, [pc, #192]	@ (80018f8 <CAL_Update+0x27c>)
 8001838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183c:	b29a      	uxth	r2, r3
 800183e:	2305      	movs	r3, #5
 8001840:	b29b      	uxth	r3, r3
 8001842:	4413      	add	r3, r2
 8001844:	b29b      	uxth	r3, r3
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b2b      	ldr	r3, [pc, #172]	@ (80018f8 <CAL_Update+0x27c>)
 800184a:	801a      	strh	r2, [r3, #0]
		if(aCounter>660){
 800184c:	4b2a      	ldr	r3, [pc, #168]	@ (80018f8 <CAL_Update+0x27c>)
 800184e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001852:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001856:	dd1c      	ble.n	8001892 <CAL_Update+0x216>
			aCounter = 660;
 8001858:	4b27      	ldr	r3, [pc, #156]	@ (80018f8 <CAL_Update+0x27c>)
 800185a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 800185e:	801a      	strh	r2, [r3, #0]
 8001860:	e017      	b.n	8001892 <CAL_Update+0x216>
		}
	}else{
		if(aCounter>0){
 8001862:	4b25      	ldr	r3, [pc, #148]	@ (80018f8 <CAL_Update+0x27c>)
 8001864:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001868:	2b00      	cmp	r3, #0
 800186a:	dd0a      	ble.n	8001882 <CAL_Update+0x206>
			aCounter = aCounter - FALLING_SCALER;
 800186c:	4b22      	ldr	r3, [pc, #136]	@ (80018f8 <CAL_Update+0x27c>)
 800186e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001872:	b29a      	uxth	r2, r3
 8001874:	230a      	movs	r3, #10
 8001876:	b29b      	uxth	r3, r3
 8001878:	1ad3      	subs	r3, r2, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	b21a      	sxth	r2, r3
 800187e:	4b1e      	ldr	r3, [pc, #120]	@ (80018f8 <CAL_Update+0x27c>)
 8001880:	801a      	strh	r2, [r3, #0]
		}
		if(aCounter<0){
 8001882:	4b1d      	ldr	r3, [pc, #116]	@ (80018f8 <CAL_Update+0x27c>)
 8001884:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001888:	2b00      	cmp	r3, #0
 800188a:	da02      	bge.n	8001892 <CAL_Update+0x216>
			aCounter = 0;
 800188c:	4b1a      	ldr	r3, [pc, #104]	@ (80018f8 <CAL_Update+0x27c>)
 800188e:	2200      	movs	r2, #0
 8001890:	801a      	strh	r2, [r3, #0]
		}
	}

	if(mouseX>660){
 8001892:	4b14      	ldr	r3, [pc, #80]	@ (80018e4 <CAL_Update+0x268>)
 8001894:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001898:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800189c:	dd04      	ble.n	80018a8 <CAL_Update+0x22c>
		mouseX = 660;
 800189e:	4b11      	ldr	r3, [pc, #68]	@ (80018e4 <CAL_Update+0x268>)
 80018a0:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80018a4:	801a      	strh	r2, [r3, #0]
 80018a6:	e009      	b.n	80018bc <CAL_Update+0x240>
	}else if(mouseX<-660){
 80018a8:	4b0e      	ldr	r3, [pc, #56]	@ (80018e4 <CAL_Update+0x268>)
 80018aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018ae:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80018b2:	da03      	bge.n	80018bc <CAL_Update+0x240>
		mouseX = -660;
 80018b4:	4b0b      	ldr	r3, [pc, #44]	@ (80018e4 <CAL_Update+0x268>)
 80018b6:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80018ba:	801a      	strh	r2, [r3, #0]
	}
	if(mouseY>660){
 80018bc:	4b0a      	ldr	r3, [pc, #40]	@ (80018e8 <CAL_Update+0x26c>)
 80018be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018c2:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80018c6:	dd19      	ble.n	80018fc <CAL_Update+0x280>
		mouseY = 660;
 80018c8:	4b07      	ldr	r3, [pc, #28]	@ (80018e8 <CAL_Update+0x26c>)
 80018ca:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80018ce:	801a      	strh	r2, [r3, #0]
 80018d0:	e01e      	b.n	8001910 <CAL_Update+0x294>
 80018d2:	bf00      	nop
 80018d4:	2000028c 	.word	0x2000028c
 80018d8:	2000028d 	.word	0x2000028d
 80018dc:	2000028e 	.word	0x2000028e
 80018e0:	2000028f 	.word	0x2000028f
 80018e4:	20000298 	.word	0x20000298
 80018e8:	2000029a 	.word	0x2000029a
 80018ec:	20000290 	.word	0x20000290
 80018f0:	20000296 	.word	0x20000296
 80018f4:	20000294 	.word	0x20000294
 80018f8:	20000292 	.word	0x20000292
	}else if(mouseY<-660){
 80018fc:	4b4f      	ldr	r3, [pc, #316]	@ (8001a3c <CAL_Update+0x3c0>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001906:	da03      	bge.n	8001910 <CAL_Update+0x294>
		mouseY = -660;
 8001908:	4b4c      	ldr	r3, [pc, #304]	@ (8001a3c <CAL_Update+0x3c0>)
 800190a:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 800190e:	801a      	strh	r2, [r3, #0]
	}


	CAL_CH0 = getDR16_CH0() + dCounter - aCounter;
 8001910:	f000 fdea 	bl	80024e8 <getDR16_CH0>
 8001914:	4603      	mov	r3, r0
 8001916:	b29a      	uxth	r2, r3
 8001918:	4b49      	ldr	r3, [pc, #292]	@ (8001a40 <CAL_Update+0x3c4>)
 800191a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800191e:	b29b      	uxth	r3, r3
 8001920:	4413      	add	r3, r2
 8001922:	b29a      	uxth	r2, r3
 8001924:	4b47      	ldr	r3, [pc, #284]	@ (8001a44 <CAL_Update+0x3c8>)
 8001926:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192a:	b29b      	uxth	r3, r3
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	b29b      	uxth	r3, r3
 8001930:	b21a      	sxth	r2, r3
 8001932:	4b45      	ldr	r3, [pc, #276]	@ (8001a48 <CAL_Update+0x3cc>)
 8001934:	801a      	strh	r2, [r3, #0]
	CAL_CH1 = getDR16_CH1() + wCounter - sCounter;
 8001936:	f000 fdf3 	bl	8002520 <getDR16_CH1>
 800193a:	4603      	mov	r3, r0
 800193c:	b29a      	uxth	r2, r3
 800193e:	4b43      	ldr	r3, [pc, #268]	@ (8001a4c <CAL_Update+0x3d0>)
 8001940:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4413      	add	r3, r2
 8001948:	b29a      	uxth	r2, r3
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <CAL_Update+0x3d4>)
 800194c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001950:	b29b      	uxth	r3, r3
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	b29b      	uxth	r3, r3
 8001956:	b21a      	sxth	r2, r3
 8001958:	4b3e      	ldr	r3, [pc, #248]	@ (8001a54 <CAL_Update+0x3d8>)
 800195a:	801a      	strh	r2, [r3, #0]
	CAL_CH2 = getDR16_CH2()+mouseX;
 800195c:	f000 fdfc 	bl	8002558 <getDR16_CH2>
 8001960:	4603      	mov	r3, r0
 8001962:	b29a      	uxth	r2, r3
 8001964:	4b3c      	ldr	r3, [pc, #240]	@ (8001a58 <CAL_Update+0x3dc>)
 8001966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800196a:	b29b      	uxth	r3, r3
 800196c:	4413      	add	r3, r2
 800196e:	b29b      	uxth	r3, r3
 8001970:	b21a      	sxth	r2, r3
 8001972:	4b3a      	ldr	r3, [pc, #232]	@ (8001a5c <CAL_Update+0x3e0>)
 8001974:	801a      	strh	r2, [r3, #0]
	CAL_CH3 = getDR16_CH3()+mouseY;
 8001976:	f000 fe0b 	bl	8002590 <getDR16_CH3>
 800197a:	4603      	mov	r3, r0
 800197c:	b29a      	uxth	r2, r3
 800197e:	4b2f      	ldr	r3, [pc, #188]	@ (8001a3c <CAL_Update+0x3c0>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4413      	add	r3, r2
 8001988:	b29b      	uxth	r3, r3
 800198a:	b21a      	sxth	r2, r3
 800198c:	4b34      	ldr	r3, [pc, #208]	@ (8001a60 <CAL_Update+0x3e4>)
 800198e:	801a      	strh	r2, [r3, #0]

	if(CAL_CH0>660){
 8001990:	4b2d      	ldr	r3, [pc, #180]	@ (8001a48 <CAL_Update+0x3cc>)
 8001992:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001996:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 800199a:	dd04      	ble.n	80019a6 <CAL_Update+0x32a>
		CAL_CH0 = 660;
 800199c:	4b2a      	ldr	r3, [pc, #168]	@ (8001a48 <CAL_Update+0x3cc>)
 800199e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80019a2:	801a      	strh	r2, [r3, #0]
 80019a4:	e009      	b.n	80019ba <CAL_Update+0x33e>
	}else if(CAL_CH0<-660){
 80019a6:	4b28      	ldr	r3, [pc, #160]	@ (8001a48 <CAL_Update+0x3cc>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80019b0:	da03      	bge.n	80019ba <CAL_Update+0x33e>
		CAL_CH0 = -660;
 80019b2:	4b25      	ldr	r3, [pc, #148]	@ (8001a48 <CAL_Update+0x3cc>)
 80019b4:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80019b8:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH1>660){
 80019ba:	4b26      	ldr	r3, [pc, #152]	@ (8001a54 <CAL_Update+0x3d8>)
 80019bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c0:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80019c4:	dd04      	ble.n	80019d0 <CAL_Update+0x354>
		CAL_CH1 = 660;
 80019c6:	4b23      	ldr	r3, [pc, #140]	@ (8001a54 <CAL_Update+0x3d8>)
 80019c8:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80019cc:	801a      	strh	r2, [r3, #0]
 80019ce:	e009      	b.n	80019e4 <CAL_Update+0x368>
	}else if(CAL_CH1<-660){
 80019d0:	4b20      	ldr	r3, [pc, #128]	@ (8001a54 <CAL_Update+0x3d8>)
 80019d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019d6:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 80019da:	da03      	bge.n	80019e4 <CAL_Update+0x368>
		CAL_CH1 = -660;
 80019dc:	4b1d      	ldr	r3, [pc, #116]	@ (8001a54 <CAL_Update+0x3d8>)
 80019de:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 80019e2:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH2>660){
 80019e4:	4b1d      	ldr	r3, [pc, #116]	@ (8001a5c <CAL_Update+0x3e0>)
 80019e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ea:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 80019ee:	dd04      	ble.n	80019fa <CAL_Update+0x37e>
		CAL_CH2 = 660;
 80019f0:	4b1a      	ldr	r3, [pc, #104]	@ (8001a5c <CAL_Update+0x3e0>)
 80019f2:	f44f 7225 	mov.w	r2, #660	@ 0x294
 80019f6:	801a      	strh	r2, [r3, #0]
 80019f8:	e009      	b.n	8001a0e <CAL_Update+0x392>
	}else if(CAL_CH2<-660){
 80019fa:	4b18      	ldr	r3, [pc, #96]	@ (8001a5c <CAL_Update+0x3e0>)
 80019fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a00:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001a04:	da03      	bge.n	8001a0e <CAL_Update+0x392>
		CAL_CH2 = -660;
 8001a06:	4b15      	ldr	r3, [pc, #84]	@ (8001a5c <CAL_Update+0x3e0>)
 8001a08:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001a0c:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH3>660){
 8001a0e:	4b14      	ldr	r3, [pc, #80]	@ (8001a60 <CAL_Update+0x3e4>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8001a18:	dd04      	ble.n	8001a24 <CAL_Update+0x3a8>
		CAL_CH3 = 660;
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <CAL_Update+0x3e4>)
 8001a1c:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8001a20:	801a      	strh	r2, [r3, #0]
	}else if(CAL_CH3<-660){
		CAL_CH3 = -660;
	}


}
 8001a22:	e009      	b.n	8001a38 <CAL_Update+0x3bc>
	}else if(CAL_CH3<-660){
 8001a24:	4b0e      	ldr	r3, [pc, #56]	@ (8001a60 <CAL_Update+0x3e4>)
 8001a26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2a:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8001a2e:	da03      	bge.n	8001a38 <CAL_Update+0x3bc>
		CAL_CH3 = -660;
 8001a30:	4b0b      	ldr	r3, [pc, #44]	@ (8001a60 <CAL_Update+0x3e4>)
 8001a32:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8001a36:	801a      	strh	r2, [r3, #0]
}
 8001a38:	bf00      	nop
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	2000029a 	.word	0x2000029a
 8001a40:	20000296 	.word	0x20000296
 8001a44:	20000292 	.word	0x20000292
 8001a48:	20000250 	.word	0x20000250
 8001a4c:	20000290 	.word	0x20000290
 8001a50:	20000294 	.word	0x20000294
 8001a54:	20000252 	.word	0x20000252
 8001a58:	20000298 	.word	0x20000298
 8001a5c:	20000254 	.word	0x20000254
 8001a60:	20000256 	.word	0x20000256

08001a64 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:





void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 8001a64:	b480      	push	{r7}
 8001a66:	b083      	sub	sp, #12
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]

}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <PC_CONTROL_RxEventCallback>:




void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4604      	mov	r4, r0
 8001a80:	4608      	mov	r0, r1
 8001a82:	4611      	mov	r1, r2
 8001a84:	461a      	mov	r2, r3
 8001a86:	4623      	mov	r3, r4
 8001a88:	80fb      	strh	r3, [r7, #6]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	80bb      	strh	r3, [r7, #4]
 8001a8e:	460b      	mov	r3, r1
 8001a90:	807b      	strh	r3, [r7, #2]
 8001a92:	4613      	mov	r3, r2
 8001a94:	707b      	strb	r3, [r7, #1]
	if(getDR16_S2()==3||getDR16_S2()==0){
 8001a96:	f000 fd97 	bl	80025c8 <getDR16_S2>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	2b03      	cmp	r3, #3
 8001a9e:	d004      	beq.n	8001aaa <PC_CONTROL_RxEventCallback+0x32>
 8001aa0:	f000 fd92 	bl	80025c8 <getDR16_S2>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d16a      	bne.n	8001b80 <PC_CONTROL_RxEventCallback+0x108>
		mouseY = (int16_t)(((float)mouse_y)*MOUSE_SCALER);
 8001aaa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001aae:	ee07 3a90 	vmov	s15, r3
 8001ab2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ab6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001aba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001abe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ac2:	ee17 3a90 	vmov	r3, s15
 8001ac6:	b21a      	sxth	r2, r3
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8001b88 <PC_CONTROL_RxEventCallback+0x110>)
 8001aca:	801a      	strh	r2, [r3, #0]
		mouseX = (int16_t)(((float)mouse_x)*MOUSE_SCALER);
 8001acc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ad8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001adc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ae0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ae4:	ee17 3a90 	vmov	r3, s15
 8001ae8:	b21a      	sxth	r2, r3
 8001aea:	4b28      	ldr	r3, [pc, #160]	@ (8001b8c <PC_CONTROL_RxEventCallback+0x114>)
 8001aec:	801a      	strh	r2, [r3, #0]
		CAL_MouseZ = mouse_z;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	b2da      	uxtb	r2, r3
 8001af2:	4b27      	ldr	r3, [pc, #156]	@ (8001b90 <PC_CONTROL_RxEventCallback+0x118>)
 8001af4:	701a      	strb	r2, [r3, #0]
		CAL_lb = left_button_down;
 8001af6:	4a27      	ldr	r2, [pc, #156]	@ (8001b94 <PC_CONTROL_RxEventCallback+0x11c>)
 8001af8:	787b      	ldrb	r3, [r7, #1]
 8001afa:	7013      	strb	r3, [r2, #0]
		CAL_rb = right_button_down;
 8001afc:	4a26      	ldr	r2, [pc, #152]	@ (8001b98 <PC_CONTROL_RxEventCallback+0x120>)
 8001afe:	7e3b      	ldrb	r3, [r7, #24]
 8001b00:	7013      	strb	r3, [r2, #0]
		isWPressed = w;
 8001b02:	4a26      	ldr	r2, [pc, #152]	@ (8001b9c <PC_CONTROL_RxEventCallback+0x124>)
 8001b04:	7f3b      	ldrb	r3, [r7, #28]
 8001b06:	7013      	strb	r3, [r2, #0]
		isAPressed = a;
 8001b08:	4a25      	ldr	r2, [pc, #148]	@ (8001ba0 <PC_CONTROL_RxEventCallback+0x128>)
 8001b0a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b0e:	7013      	strb	r3, [r2, #0]
		isSPressed = s;
 8001b10:	4a24      	ldr	r2, [pc, #144]	@ (8001ba4 <PC_CONTROL_RxEventCallback+0x12c>)
 8001b12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b16:	7013      	strb	r3, [r2, #0]
		isDPressed = d;
 8001b18:	4a23      	ldr	r2, [pc, #140]	@ (8001ba8 <PC_CONTROL_RxEventCallback+0x130>)
 8001b1a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001b1e:	7013      	strb	r3, [r2, #0]
		CAL_shift = shift;
 8001b20:	4a22      	ldr	r2, [pc, #136]	@ (8001bac <PC_CONTROL_RxEventCallback+0x134>)
 8001b22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001b26:	7013      	strb	r3, [r2, #0]
		CAL_ctrl = ctrl;
 8001b28:	4a21      	ldr	r2, [pc, #132]	@ (8001bb0 <PC_CONTROL_RxEventCallback+0x138>)
 8001b2a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8001b2e:	7013      	strb	r3, [r2, #0]
		CAL_q = q;
 8001b30:	4a20      	ldr	r2, [pc, #128]	@ (8001bb4 <PC_CONTROL_RxEventCallback+0x13c>)
 8001b32:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001b36:	7013      	strb	r3, [r2, #0]
		CAL_e = e;
 8001b38:	4a1f      	ldr	r2, [pc, #124]	@ (8001bb8 <PC_CONTROL_RxEventCallback+0x140>)
 8001b3a:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001b3e:	7013      	strb	r3, [r2, #0]
		CAL_r = r;
 8001b40:	4a1e      	ldr	r2, [pc, #120]	@ (8001bbc <PC_CONTROL_RxEventCallback+0x144>)
 8001b42:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8001b46:	7013      	strb	r3, [r2, #0]
		CAL_f = f;
 8001b48:	4a1d      	ldr	r2, [pc, #116]	@ (8001bc0 <PC_CONTROL_RxEventCallback+0x148>)
 8001b4a:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8001b4e:	7013      	strb	r3, [r2, #0]
		CAL_g = g;
 8001b50:	4a1c      	ldr	r2, [pc, #112]	@ (8001bc4 <PC_CONTROL_RxEventCallback+0x14c>)
 8001b52:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001b56:	7013      	strb	r3, [r2, #0]
		CAL_z = z;
 8001b58:	4a1b      	ldr	r2, [pc, #108]	@ (8001bc8 <PC_CONTROL_RxEventCallback+0x150>)
 8001b5a:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001b5e:	7013      	strb	r3, [r2, #0]
		CAL_x = x;
 8001b60:	4a1a      	ldr	r2, [pc, #104]	@ (8001bcc <PC_CONTROL_RxEventCallback+0x154>)
 8001b62:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8001b66:	7013      	strb	r3, [r2, #0]
		CAL_c = c;
 8001b68:	4a19      	ldr	r2, [pc, #100]	@ (8001bd0 <PC_CONTROL_RxEventCallback+0x158>)
 8001b6a:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8001b6e:	7013      	strb	r3, [r2, #0]
		CAL_v = v;
 8001b70:	4a18      	ldr	r2, [pc, #96]	@ (8001bd4 <PC_CONTROL_RxEventCallback+0x15c>)
 8001b72:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001b76:	7013      	strb	r3, [r2, #0]
		CAL_b = b;
 8001b78:	4a17      	ldr	r2, [pc, #92]	@ (8001bd8 <PC_CONTROL_RxEventCallback+0x160>)
 8001b7a:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8001b7e:	7013      	strb	r3, [r2, #0]
	}
}
 8001b80:	bf00      	nop
 8001b82:	370c      	adds	r7, #12
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd90      	pop	{r4, r7, pc}
 8001b88:	2000029a 	.word	0x2000029a
 8001b8c:	20000298 	.word	0x20000298
 8001b90:	20000266 	.word	0x20000266
 8001b94:	20000264 	.word	0x20000264
 8001b98:	20000265 	.word	0x20000265
 8001b9c:	2000028c 	.word	0x2000028c
 8001ba0:	2000028d 	.word	0x2000028d
 8001ba4:	2000028e 	.word	0x2000028e
 8001ba8:	2000028f 	.word	0x2000028f
 8001bac:	20000258 	.word	0x20000258
 8001bb0:	20000259 	.word	0x20000259
 8001bb4:	2000025a 	.word	0x2000025a
 8001bb8:	2000025b 	.word	0x2000025b
 8001bbc:	2000025c 	.word	0x2000025c
 8001bc0:	2000025d 	.word	0x2000025d
 8001bc4:	2000025e 	.word	0x2000025e
 8001bc8:	2000025f 	.word	0x2000025f
 8001bcc:	20000260 	.word	0x20000260
 8001bd0:	20000261 	.word	0x20000261
 8001bd4:	20000262 	.word	0x20000262
 8001bd8:	20000263 	.word	0x20000263

08001bdc <GAME_STATUS_RxEventCallback>:


void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 8001bdc:	b590      	push	{r4, r7, lr}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4604      	mov	r4, r0
 8001be4:	4608      	mov	r0, r1
 8001be6:	4611      	mov	r1, r2
 8001be8:	461a      	mov	r2, r3
 8001bea:	4623      	mov	r3, r4
 8001bec:	71fb      	strb	r3, [r7, #7]
 8001bee:	4603      	mov	r3, r0
 8001bf0:	71bb      	strb	r3, [r7, #6]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	717b      	strb	r3, [r7, #5]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	807b      	strh	r3, [r7, #2]
	CAL_game_type = game_type;
 8001bfa:	79fa      	ldrb	r2, [r7, #7]
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	@ (8001c30 <GAME_STATUS_RxEventCallback+0x54>)
 8001bfe:	701a      	strb	r2, [r3, #0]
	CAL_current_stage = current_stage;
 8001c00:	79ba      	ldrb	r2, [r7, #6]
 8001c02:	4b0c      	ldr	r3, [pc, #48]	@ (8001c34 <GAME_STATUS_RxEventCallback+0x58>)
 8001c04:	701a      	strb	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001c06:	f107 0308 	add.w	r3, r7, #8
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	601a      	str	r2, [r3, #0]
 8001c0e:	605a      	str	r2, [r3, #4]
	memcpy(&txData[1],&game_type,1);
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[0],&current_stage,1);
 8001c14:	79bb      	ldrb	r3, [r7, #6]
 8001c16:	723b      	strb	r3, [r7, #8]
	CAN_transmit(bus, CAL_GAME_STATUS,txData);
 8001c18:	2002      	movs	r0, #2
 8001c1a:	f107 0308 	add.w	r3, r7, #8
 8001c1e:	461a      	mov	r2, r3
 8001c20:	f240 2111 	movw	r1, #529	@ 0x211
 8001c24:	f000 fab8 	bl	8002198 <CAN_transmit>
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd90      	pop	{r4, r7, pc}
 8001c30:	20000267 	.word	0x20000267
 8001c34:	20000268 	.word	0x20000268

08001c38 <ROBOT_STATUS_RxEventCallback>:

void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	4604      	mov	r4, r0
 8001c40:	4608      	mov	r0, r1
 8001c42:	4611      	mov	r1, r2
 8001c44:	461a      	mov	r2, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	71fb      	strb	r3, [r7, #7]
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	71bb      	strb	r3, [r7, #6]
 8001c4e:	460b      	mov	r3, r1
 8001c50:	80bb      	strh	r3, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	807b      	strh	r3, [r7, #2]
	CAL_robot_id = robot_id;
 8001c56:	79fa      	ldrb	r2, [r7, #7]
 8001c58:	4b14      	ldr	r3, [pc, #80]	@ (8001cac <ROBOT_STATUS_RxEventCallback+0x74>)
 8001c5a:	701a      	strb	r2, [r3, #0]
	CAL_robot_level = robot_level;
 8001c5c:	79ba      	ldrb	r2, [r7, #6]
 8001c5e:	4b14      	ldr	r3, [pc, #80]	@ (8001cb0 <ROBOT_STATUS_RxEventCallback+0x78>)
 8001c60:	701a      	strb	r2, [r3, #0]
	CAL_shooter_barrel_cooling_value = shooter_barrel_cooling_value;
 8001c62:	8c3a      	ldrh	r2, [r7, #32]
 8001c64:	4b13      	ldr	r3, [pc, #76]	@ (8001cb4 <ROBOT_STATUS_RxEventCallback+0x7c>)
 8001c66:	801a      	strh	r2, [r3, #0]
	CAL_shooter_barrel_heat_limit = shooter_barrel_heat_limit;
 8001c68:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001c6a:	4b13      	ldr	r3, [pc, #76]	@ (8001cb8 <ROBOT_STATUS_RxEventCallback+0x80>)
 8001c6c:	801a      	strh	r2, [r3, #0]
	CAL_chassis_power_limit = chassis_power_limit;
 8001c6e:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <ROBOT_STATUS_RxEventCallback+0x84>)
 8001c72:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001c74:	f107 0308 	add.w	r3, r7, #8
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&robot_id,1);
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	723b      	strb	r3, [r7, #8]
	memcpy(&txData[1],&robot_level,1);
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[2],&shooter_barrel_cooling_value,2);
 8001c86:	8c3b      	ldrh	r3, [r7, #32]
 8001c88:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_barrel_heat_limit,2);
 8001c8a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001c8c:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&chassis_power_limit,2);
 8001c8e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001c90:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_ROBOT_STATUS,txData);
 8001c92:	2002      	movs	r0, #2
 8001c94:	f107 0308 	add.w	r3, r7, #8
 8001c98:	461a      	mov	r2, r3
 8001c9a:	f240 2112 	movw	r1, #530	@ 0x212
 8001c9e:	f000 fa7b 	bl	8002198 <CAN_transmit>
}
 8001ca2:	bf00      	nop
 8001ca4:	3714      	adds	r7, #20
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd90      	pop	{r4, r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000272 	.word	0x20000272
 8001cb0:	20000273 	.word	0x20000273
 8001cb4:	20000274 	.word	0x20000274
 8001cb8:	20000278 	.word	0x20000278
 8001cbc:	20000276 	.word	0x20000276

08001cc0 <POWER_HEAT_DATA_RxEventCallback>:

void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 8001cc0:	b590      	push	{r4, r7, lr}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4604      	mov	r4, r0
 8001cc8:	4608      	mov	r0, r1
 8001cca:	4611      	mov	r1, r2
 8001ccc:	461a      	mov	r2, r3
 8001cce:	4623      	mov	r3, r4
 8001cd0:	80fb      	strh	r3, [r7, #6]
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	80bb      	strh	r3, [r7, #4]
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	807b      	strh	r3, [r7, #2]
 8001cda:	4613      	mov	r3, r2
 8001cdc:	803b      	strh	r3, [r7, #0]
	CAL_buffer_energy = buffer_energy;
 8001cde:	88fa      	ldrh	r2, [r7, #6]
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <POWER_HEAT_DATA_RxEventCallback+0x68>)
 8001ce2:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_1_barrel_heat = shooter_17mm_1_barrel_heat;
 8001ce4:	88ba      	ldrh	r2, [r7, #4]
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <POWER_HEAT_DATA_RxEventCallback+0x6c>)
 8001ce8:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_2_barrel_heat = shooter_17mm_2_barrel_heat;
 8001cea:	887a      	ldrh	r2, [r7, #2]
 8001cec:	4b10      	ldr	r3, [pc, #64]	@ (8001d30 <POWER_HEAT_DATA_RxEventCallback+0x70>)
 8001cee:	801a      	strh	r2, [r3, #0]
	CAL_shooter_42mm_barrel_heat = shooter_42mm_barrel_heat;
 8001cf0:	883a      	ldrh	r2, [r7, #0]
 8001cf2:	4b10      	ldr	r3, [pc, #64]	@ (8001d34 <POWER_HEAT_DATA_RxEventCallback+0x74>)
 8001cf4:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001cf6:	f107 0308 	add.w	r3, r7, #8
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&buffer_energy,2);
 8001d00:	88fb      	ldrh	r3, [r7, #6]
 8001d02:	813b      	strh	r3, [r7, #8]
	memcpy(&txData[2],&shooter_17mm_1_barrel_heat,2);
 8001d04:	88bb      	ldrh	r3, [r7, #4]
 8001d06:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_17mm_2_barrel_heat,2);
 8001d08:	887b      	ldrh	r3, [r7, #2]
 8001d0a:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&shooter_42mm_barrel_heat,2);
 8001d0c:	883b      	ldrh	r3, [r7, #0]
 8001d0e:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_POWER_HEAT_DATA,txData);
 8001d10:	2002      	movs	r0, #2
 8001d12:	f107 0308 	add.w	r3, r7, #8
 8001d16:	461a      	mov	r2, r3
 8001d18:	f240 2113 	movw	r1, #531	@ 0x213
 8001d1c:	f000 fa3c 	bl	8002198 <CAN_transmit>
}
 8001d20:	bf00      	nop
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd90      	pop	{r4, r7, pc}
 8001d28:	2000026a 	.word	0x2000026a
 8001d2c:	2000026c 	.word	0x2000026c
 8001d30:	2000026e 	.word	0x2000026e
 8001d34:	20000270 	.word	0x20000270

08001d38 <CAN_RxEventCallbackPT>:



void CAN_RxEventCallbackPT(uint32_t StdId, uint8_t rxData[8]){
 8001d38:	b590      	push	{r4, r7, lr}
 8001d3a:	b089      	sub	sp, #36	@ 0x24
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
	switch(StdId){
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8001d48:	2b03      	cmp	r3, #3
 8001d4a:	f200 8117 	bhi.w	8001f7c <CAN_RxEventCallbackPT+0x244>
 8001d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d54 <CAN_RxEventCallbackPT+0x1c>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d79 	.word	0x08001d79
 8001d5c:	08001db1 	.word	0x08001db1
 8001d60:	08001de1 	.word	0x08001de1
		case(CAL_GAME_STATUS):{
			memcpy(&CAL_game_type,&rxData[0],1);
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	781a      	ldrb	r2, [r3, #0]
 8001d68:	4b87      	ldr	r3, [pc, #540]	@ (8001f88 <CAN_RxEventCallbackPT+0x250>)
 8001d6a:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_current_stage,&rxData[1],1);
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	3301      	adds	r3, #1
 8001d70:	781a      	ldrb	r2, [r3, #0]
 8001d72:	4b86      	ldr	r3, [pc, #536]	@ (8001f8c <CAN_RxEventCallbackPT+0x254>)
 8001d74:	701a      	strb	r2, [r3, #0]
			break;
 8001d76:	e102      	b.n	8001f7e <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_ROBOT_STATUS):{
			memcpy(&CAL_robot_id,&rxData[0],1);
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	781a      	ldrb	r2, [r3, #0]
 8001d7c:	4b84      	ldr	r3, [pc, #528]	@ (8001f90 <CAN_RxEventCallbackPT+0x258>)
 8001d7e:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_robot_level,&rxData[1],1);
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	3301      	adds	r3, #1
 8001d84:	781a      	ldrb	r2, [r3, #0]
 8001d86:	4b83      	ldr	r3, [pc, #524]	@ (8001f94 <CAN_RxEventCallbackPT+0x25c>)
 8001d88:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_cooling_value,&rxData[2],2);
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	3302      	adds	r3, #2
 8001d8e:	881b      	ldrh	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b81      	ldr	r3, [pc, #516]	@ (8001f98 <CAN_RxEventCallbackPT+0x260>)
 8001d94:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_heat_limit,&rxData[4],2);
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	881b      	ldrh	r3, [r3, #0]
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	4b7f      	ldr	r3, [pc, #508]	@ (8001f9c <CAN_RxEventCallbackPT+0x264>)
 8001da0:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_chassis_power_limit,&rxData[6],2);
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	3306      	adds	r3, #6
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29a      	uxth	r2, r3
 8001daa:	4b7d      	ldr	r3, [pc, #500]	@ (8001fa0 <CAN_RxEventCallbackPT+0x268>)
 8001dac:	801a      	strh	r2, [r3, #0]
			break;
 8001dae:	e0e6      	b.n	8001f7e <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_POWER_HEAT_DATA):{
			memcpy(&CAL_buffer_energy,&rxData[0],2);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b7b      	ldr	r3, [pc, #492]	@ (8001fa4 <CAN_RxEventCallbackPT+0x26c>)
 8001db8:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_1_barrel_heat,&rxData[2],2);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	3302      	adds	r3, #2
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	b29a      	uxth	r2, r3
 8001dc2:	4b79      	ldr	r3, [pc, #484]	@ (8001fa8 <CAN_RxEventCallbackPT+0x270>)
 8001dc4:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_2_barrel_heat,&rxData[4],2);
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	3304      	adds	r3, #4
 8001dca:	881b      	ldrh	r3, [r3, #0]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	4b77      	ldr	r3, [pc, #476]	@ (8001fac <CAN_RxEventCallbackPT+0x274>)
 8001dd0:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_42mm_barrel_heat,&rxData[6],2);
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	3306      	adds	r3, #6
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b75      	ldr	r3, [pc, #468]	@ (8001fb0 <CAN_RxEventCallbackPT+0x278>)
 8001ddc:	801a      	strh	r2, [r3, #0]
			break;
 8001dde:	e0ce      	b.n	8001f7e <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_CHASSIS_CONTROL_DATA):{

			uint8_t frontBackBuff[2] = {0};
 8001de0:	2300      	movs	r3, #0
 8001de2:	83bb      	strh	r3, [r7, #28]
			frontBackBuff[0] = rxData[0];
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	773b      	strb	r3, [r7, #28]
			frontBackBuff[1] = CAL_getBits(rxData[1],0,4);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	3301      	adds	r3, #1
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	2204      	movs	r2, #4
 8001df2:	2100      	movs	r1, #0
 8001df4:	4618      	mov	r0, r3
 8001df6:	f000 f8eb 	bl	8001fd0 <CAL_getBits>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	777b      	strb	r3, [r7, #29]
			memcpy(&CAL_FrontBack,frontBackBuff,2);
 8001dfe:	8bba      	ldrh	r2, [r7, #28]
 8001e00:	4b6c      	ldr	r3, [pc, #432]	@ (8001fb4 <CAN_RxEventCallbackPT+0x27c>)
 8001e02:	801a      	strh	r2, [r3, #0]
			CAL_FrontBack = CAL_FrontBack - 2047;
 8001e04:	4b6b      	ldr	r3, [pc, #428]	@ (8001fb4 <CAN_RxEventCallbackPT+0x27c>)
 8001e06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e0a:	b29b      	uxth	r3, r3
 8001e0c:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001e10:	b29b      	uxth	r3, r3
 8001e12:	b21a      	sxth	r2, r3
 8001e14:	4b67      	ldr	r3, [pc, #412]	@ (8001fb4 <CAN_RxEventCallbackPT+0x27c>)
 8001e16:	801a      	strh	r2, [r3, #0]

			uint8_t rightLeftBuff[2] = {0};
 8001e18:	2300      	movs	r3, #0
 8001e1a:	833b      	strh	r3, [r7, #24]
			rightLeftBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2204      	movs	r2, #4
 8001e24:	2104      	movs	r1, #4
 8001e26:	4618      	mov	r0, r3
 8001e28:	f000 f8d2 	bl	8001fd0 <CAL_getBits>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	b25c      	sxtb	r4, r3
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	3302      	adds	r3, #2
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	2204      	movs	r2, #4
 8001e38:	2100      	movs	r1, #0
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f000 f8c8 	bl	8001fd0 <CAL_getBits>
 8001e40:	4603      	mov	r3, r0
 8001e42:	b25b      	sxtb	r3, r3
 8001e44:	011b      	lsls	r3, r3, #4
 8001e46:	b25b      	sxtb	r3, r3
 8001e48:	4323      	orrs	r3, r4
 8001e4a:	b25b      	sxtb	r3, r3
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	763b      	strb	r3, [r7, #24]
			rightLeftBuff[1] = CAL_getBits(rxData[2],4,4);
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	3302      	adds	r3, #2
 8001e54:	781b      	ldrb	r3, [r3, #0]
 8001e56:	2204      	movs	r2, #4
 8001e58:	2104      	movs	r1, #4
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f8b8 	bl	8001fd0 <CAL_getBits>
 8001e60:	4603      	mov	r3, r0
 8001e62:	767b      	strb	r3, [r7, #25]
			memcpy(&CAL_RightLeft,rightLeftBuff,2);
 8001e64:	8b3a      	ldrh	r2, [r7, #24]
 8001e66:	4b54      	ldr	r3, [pc, #336]	@ (8001fb8 <CAN_RxEventCallbackPT+0x280>)
 8001e68:	801a      	strh	r2, [r3, #0]
			CAL_RightLeft = CAL_RightLeft - 2047;
 8001e6a:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <CAN_RxEventCallbackPT+0x280>)
 8001e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001e76:	b29b      	uxth	r3, r3
 8001e78:	b21a      	sxth	r2, r3
 8001e7a:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb8 <CAN_RxEventCallbackPT+0x280>)
 8001e7c:	801a      	strh	r2, [r3, #0]

			uint8_t chassisSpinBuff[2] = {0};
 8001e7e:	2300      	movs	r3, #0
 8001e80:	82bb      	strh	r3, [r7, #20]
			chassisSpinBuff[0] = rxData[3];
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	78db      	ldrb	r3, [r3, #3]
 8001e86:	753b      	strb	r3, [r7, #20]
			chassisSpinBuff[1] = CAL_getBits(rxData[4],0,4);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	781b      	ldrb	r3, [r3, #0]
 8001e8e:	2204      	movs	r2, #4
 8001e90:	2100      	movs	r1, #0
 8001e92:	4618      	mov	r0, r3
 8001e94:	f000 f89c 	bl	8001fd0 <CAL_getBits>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	757b      	strb	r3, [r7, #21]
			memcpy(&CAL_ChassisSpin,chassisSpinBuff,2);
 8001e9c:	8aba      	ldrh	r2, [r7, #20]
 8001e9e:	4b47      	ldr	r3, [pc, #284]	@ (8001fbc <CAN_RxEventCallbackPT+0x284>)
 8001ea0:	801a      	strh	r2, [r3, #0]
			CAL_ChassisSpin = CAL_ChassisSpin - 2047;
 8001ea2:	4b46      	ldr	r3, [pc, #280]	@ (8001fbc <CAN_RxEventCallbackPT+0x284>)
 8001ea4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	b21a      	sxth	r2, r3
 8001eb2:	4b42      	ldr	r3, [pc, #264]	@ (8001fbc <CAN_RxEventCallbackPT+0x284>)
 8001eb4:	801a      	strh	r2, [r3, #0]

			uint8_t turretSpinBuff[2] = {0};
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	823b      	strh	r3, [r7, #16]
			turretSpinBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	2204      	movs	r2, #4
 8001ec2:	2104      	movs	r1, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f000 f883 	bl	8001fd0 <CAL_getBits>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	b25c      	sxtb	r4, r3
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	3305      	adds	r3, #5
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2204      	movs	r2, #4
 8001ed6:	2100      	movs	r1, #0
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 f879 	bl	8001fd0 <CAL_getBits>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	b25b      	sxtb	r3, r3
 8001ee2:	011b      	lsls	r3, r3, #4
 8001ee4:	b25b      	sxtb	r3, r3
 8001ee6:	4323      	orrs	r3, r4
 8001ee8:	b25b      	sxtb	r3, r3
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	743b      	strb	r3, [r7, #16]
			turretSpinBuff[1] = CAL_getBits(rxData[5],4,4);
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	3305      	adds	r3, #5
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	2104      	movs	r1, #4
 8001ef8:	4618      	mov	r0, r3
 8001efa:	f000 f869 	bl	8001fd0 <CAL_getBits>
 8001efe:	4603      	mov	r3, r0
 8001f00:	747b      	strb	r3, [r7, #17]
			memcpy(&CAL_TurretSpin,turretSpinBuff,2);
 8001f02:	8a3a      	ldrh	r2, [r7, #16]
 8001f04:	4b2e      	ldr	r3, [pc, #184]	@ (8001fc0 <CAN_RxEventCallbackPT+0x288>)
 8001f06:	801a      	strh	r2, [r3, #0]
			CAL_TurretSpin = CAL_TurretSpin;
 8001f08:	4b2d      	ldr	r3, [pc, #180]	@ (8001fc0 <CAN_RxEventCallbackPT+0x288>)
 8001f0a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001f0e:	4b2c      	ldr	r3, [pc, #176]	@ (8001fc0 <CAN_RxEventCallbackPT+0x288>)
 8001f10:	801a      	strh	r2, [r3, #0]

			uint8_t currentGyroBuff[2] = {0};
 8001f12:	2300      	movs	r3, #0
 8001f14:	81bb      	strh	r3, [r7, #12]
			currentGyroBuff[0] = rxData[6];
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	799b      	ldrb	r3, [r3, #6]
 8001f1a:	733b      	strb	r3, [r7, #12]
			currentGyroBuff[1] = CAL_getBits(rxData[7],0,4);
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	3307      	adds	r3, #7
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2204      	movs	r2, #4
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 f852 	bl	8001fd0 <CAL_getBits>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	737b      	strb	r3, [r7, #13]
			memcpy(&CAL_CurrentGyro,currentGyroBuff,2);
 8001f30:	89ba      	ldrh	r2, [r7, #12]
 8001f32:	4b24      	ldr	r3, [pc, #144]	@ (8001fc4 <CAN_RxEventCallbackPT+0x28c>)
 8001f34:	801a      	strh	r2, [r3, #0]
			CAL_CurrentGyro = CAL_CurrentGyro - 2047;
 8001f36:	4b23      	ldr	r3, [pc, #140]	@ (8001fc4 <CAN_RxEventCallbackPT+0x28c>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	b29b      	uxth	r3, r3
 8001f3e:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	b21a      	sxth	r2, r3
 8001f46:	4b1f      	ldr	r3, [pc, #124]	@ (8001fc4 <CAN_RxEventCallbackPT+0x28c>)
 8001f48:	801a      	strh	r2, [r3, #0]

			CAL_TriggerPressed = CAL_getBits(rxData[7],4,1);
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	3307      	adds	r3, #7
 8001f4e:	781b      	ldrb	r3, [r3, #0]
 8001f50:	2201      	movs	r2, #1
 8001f52:	2104      	movs	r1, #4
 8001f54:	4618      	mov	r0, r3
 8001f56:	f000 f83b 	bl	8001fd0 <CAL_getBits>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fc8 <CAN_RxEventCallbackPT+0x290>)
 8001f60:	701a      	strb	r2, [r3, #0]
			CAL_FireMode = CAL_getBits(rxData[7],5,3);
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	3307      	adds	r3, #7
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	2203      	movs	r2, #3
 8001f6a:	2105      	movs	r1, #5
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f000 f82f 	bl	8001fd0 <CAL_getBits>
 8001f72:	4603      	mov	r3, r0
 8001f74:	461a      	mov	r2, r3
 8001f76:	4b15      	ldr	r3, [pc, #84]	@ (8001fcc <CAN_RxEventCallbackPT+0x294>)
 8001f78:	701a      	strb	r2, [r3, #0]
			break;
 8001f7a:	e000      	b.n	8001f7e <CAN_RxEventCallbackPT+0x246>
		}
		default:{

			break;
 8001f7c:	bf00      	nop
		}
	}
}
 8001f7e:	bf00      	nop
 8001f80:	3724      	adds	r7, #36	@ 0x24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd90      	pop	{r4, r7, pc}
 8001f86:	bf00      	nop
 8001f88:	20000267 	.word	0x20000267
 8001f8c:	20000268 	.word	0x20000268
 8001f90:	20000272 	.word	0x20000272
 8001f94:	20000273 	.word	0x20000273
 8001f98:	20000274 	.word	0x20000274
 8001f9c:	20000278 	.word	0x20000278
 8001fa0:	20000276 	.word	0x20000276
 8001fa4:	2000026a 	.word	0x2000026a
 8001fa8:	2000026c 	.word	0x2000026c
 8001fac:	2000026e 	.word	0x2000026e
 8001fb0:	20000270 	.word	0x20000270
 8001fb4:	20000280 	.word	0x20000280
 8001fb8:	20000282 	.word	0x20000282
 8001fbc:	20000284 	.word	0x20000284
 8001fc0:	20000286 	.word	0x20000286
 8001fc4:	20000288 	.word	0x20000288
 8001fc8:	2000028a 	.word	0x2000028a
 8001fcc:	2000028b 	.word	0x2000028b

08001fd0 <CAL_getBits>:

	CAN_transmit(Bus2, CAL_CHASSIS_CONTROL_DATA,txData);
}


uint8_t CAL_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	71fb      	strb	r3, [r7, #7]
 8001fda:	460b      	mov	r3, r1
 8001fdc:	71bb      	strb	r3, [r7, #6]
 8001fde:	4613      	mov	r3, r2
 8001fe0:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	73bb      	strb	r3, [r7, #14]
 8001fea:	e013      	b.n	8002014 <CAL_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8001fec:	79fa      	ldrb	r2, [r7, #7]
 8001fee:	79b9      	ldrb	r1, [r7, #6]
 8001ff0:	7bbb      	ldrb	r3, [r7, #14]
 8001ff2:	440b      	add	r3, r1
 8001ff4:	fa42 f303 	asr.w	r3, r2, r3
 8001ff8:	f003 0201 	and.w	r2, r3, #1
 8001ffc:	7bbb      	ldrb	r3, [r7, #14]
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	b25a      	sxtb	r2, r3
 8002004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002008:	4313      	orrs	r3, r2
 800200a:	b25b      	sxtb	r3, r3
 800200c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800200e:	7bbb      	ldrb	r3, [r7, #14]
 8002010:	3301      	adds	r3, #1
 8002012:	73bb      	strb	r3, [r7, #14]
 8002014:	7bba      	ldrb	r2, [r7, #14]
 8002016:	797b      	ldrb	r3, [r7, #5]
 8002018:	429a      	cmp	r2, r3
 800201a:	d3e7      	bcc.n	8001fec <CAL_getBits+0x1c>
	}
	return result;
 800201c:	7bfb      	ldrb	r3, [r7, #15]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3714      	adds	r7, #20
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
	...

0800202c <PROJECTILE_INFO_RxEventCallback>:

void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	4603      	mov	r3, r0
 8002034:	ed87 0a00 	vstr	s0, [r7]
 8002038:	71fb      	strb	r3, [r7, #7]
 800203a:	460b      	mov	r3, r1
 800203c:	71bb      	strb	r3, [r7, #6]
 800203e:	4613      	mov	r3, r2
 8002040:	717b      	strb	r3, [r7, #5]
	CAL_initialSpeed = initial_speed;
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <PROJECTILE_INFO_RxEventCallback+0x28>)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	6013      	str	r3, [r2, #0]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	2000027c 	.word	0x2000027c

08002058 <HAL_CAN_RxFifo0MsgPendingCallback>:
int16_t RCVAL[7] = {0, 0, 0, 0, 0, 0, 0};

//For CAN Debugger
extern UART_HandleTypeDef huart1;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8002058:	b580      	push	{r7, lr}
 800205a:	b08c      	sub	sp, #48	@ 0x30
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 8002060:	f107 0308 	add.w	r3, r7, #8
 8002064:	f107 0210 	add.w	r2, r7, #16
 8002068:	2100      	movs	r1, #0
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f003 ffa8 	bl	8005fc0 <HAL_CAN_GetRxMessage>
		// UART_Printf(&huart1,"CAN Received-------stdID:   %X    --------DATA: %X,   %X,   %X,   %X,   %X,   %X,   %X,   %X \n", rx_header.StdId,rx_data[0],rx_data[1],rx_data[2],rx_data[3],rx_data[4],rx_data[5],rx_data[6],rx_data[7]);


    // UART_Printf(&huart1, "%X\r\n", rx_header.StdId);

    switch (rx_header.StdId) {
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002076:	2b0a      	cmp	r3, #10
 8002078:	d87a      	bhi.n	8002170 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	b2db      	uxtb	r3, r3
 800207e:	3b01      	subs	r3, #1
 8002080:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a41      	ldr	r2, [pc, #260]	@ (800218c <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d134      	bne.n	80020f6 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 800208c:	7a3b      	ldrb	r3, [r7, #8]
 800208e:	b21b      	sxth	r3, r3
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	b21a      	sxth	r2, r3
 8002094:	7a7b      	ldrb	r3, [r7, #9]
 8002096:	b21b      	sxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b21a      	sxth	r2, r3
 800209c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020a0:	b291      	uxth	r1, r2
 80020a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80020a4:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 80020a8:	7abb      	ldrb	r3, [r7, #10]
 80020aa:	b21b      	sxth	r3, r3
 80020ac:	021b      	lsls	r3, r3, #8
 80020ae:	b219      	sxth	r1, r3
 80020b0:	7afb      	ldrb	r3, [r7, #11]
 80020b2:	b21a      	sxth	r2, r3
 80020b4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020b8:	430a      	orrs	r2, r1
 80020ba:	b211      	sxth	r1, r2
 80020bc:	4a34      	ldr	r2, [pc, #208]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	460a      	mov	r2, r1
 80020c4:	805a      	strh	r2, [r3, #2]
 80020c6:	7b3b      	ldrb	r3, [r7, #12]
 80020c8:	b21b      	sxth	r3, r3
 80020ca:	021b      	lsls	r3, r3, #8
 80020cc:	b219      	sxth	r1, r3
 80020ce:	7b7b      	ldrb	r3, [r7, #13]
 80020d0:	b21a      	sxth	r2, r3
 80020d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020d6:	430a      	orrs	r2, r1
 80020d8:	b211      	sxth	r1, r2
 80020da:	4a2d      	ldr	r2, [pc, #180]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80020dc:	00db      	lsls	r3, r3, #3
 80020de:	4413      	add	r3, r2
 80020e0:	460a      	mov	r2, r1
 80020e2:	809a      	strh	r2, [r3, #4]
 80020e4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80020e8:	7bb9      	ldrb	r1, [r7, #14]
 80020ea:	4a29      	ldr	r2, [pc, #164]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	460a      	mov	r2, r1
 80020f2:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 80020f4:	e044      	b.n	8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
            } else if (hcan == &hcan2) {
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a26      	ldr	r2, [pc, #152]	@ (8002194 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d140      	bne.n	8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 80020fe:	7a3b      	ldrb	r3, [r7, #8]
 8002100:	b21b      	sxth	r3, r3
 8002102:	021b      	lsls	r3, r3, #8
 8002104:	b21a      	sxth	r2, r3
 8002106:	7a7b      	ldrb	r3, [r7, #9]
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21a      	sxth	r2, r3
 800210e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002112:	b291      	uxth	r1, r2
 8002114:	4a1e      	ldr	r2, [pc, #120]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002116:	330b      	adds	r3, #11
 8002118:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 800211c:	7abb      	ldrb	r3, [r7, #10]
 800211e:	b21b      	sxth	r3, r3
 8002120:	021b      	lsls	r3, r3, #8
 8002122:	b219      	sxth	r1, r3
 8002124:	7afb      	ldrb	r3, [r7, #11]
 8002126:	b21a      	sxth	r2, r3
 8002128:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800212c:	430a      	orrs	r2, r1
 800212e:	b211      	sxth	r1, r2
 8002130:	4a17      	ldr	r2, [pc, #92]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002132:	330b      	adds	r3, #11
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	460a      	mov	r2, r1
 800213a:	805a      	strh	r2, [r3, #2]
 800213c:	7b3b      	ldrb	r3, [r7, #12]
 800213e:	b21b      	sxth	r3, r3
 8002140:	021b      	lsls	r3, r3, #8
 8002142:	b219      	sxth	r1, r3
 8002144:	7b7b      	ldrb	r3, [r7, #13]
 8002146:	b21a      	sxth	r2, r3
 8002148:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800214c:	430a      	orrs	r2, r1
 800214e:	b211      	sxth	r1, r2
 8002150:	4a0f      	ldr	r2, [pc, #60]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002152:	330b      	adds	r3, #11
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	4413      	add	r3, r2
 8002158:	460a      	mov	r2, r1
 800215a:	809a      	strh	r2, [r3, #4]
 800215c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002160:	7bb9      	ldrb	r1, [r7, #14]
 8002162:	4a0b      	ldr	r2, [pc, #44]	@ (8002190 <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8002164:	330b      	adds	r3, #11
 8002166:	00db      	lsls	r3, r3, #3
 8002168:	4413      	add	r3, r2
 800216a:	460a      	mov	r2, r1
 800216c:	719a      	strb	r2, [r3, #6]
            break;
 800216e:	e007      	b.n	8002180 <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        }
        default: {
        	CAN_RxEventCallbackPT(rx_header.StdId,rx_data);
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	f107 0208 	add.w	r2, r7, #8
 8002176:	4611      	mov	r1, r2
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fddd 	bl	8001d38 <CAN_RxEventCallbackPT>
            break;
 800217e:	e000      	b.n	8002182 <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            break;
 8002180:	bf00      	nop
        }
    }
}
 8002182:	bf00      	nop
 8002184:	3730      	adds	r7, #48	@ 0x30
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000958 	.word	0x20000958
 8002190:	200002b4 	.word	0x200002b4
 8002194:	20000980 	.word	0x20000980

08002198 <CAN_transmit>:

// CAN_transmit needs some work, right now it's "CAN1_sendFloats"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint8_t data[8]) {
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	4603      	mov	r3, r0
 80021a0:	603a      	str	r2, [r7, #0]
 80021a2:	71fb      	strb	r3, [r7, #7]
 80021a4:	460b      	mov	r3, r1
 80021a6:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 80021a8:	88bb      	ldrh	r3, [r7, #4]
 80021aa:	4a11      	ldr	r2, [pc, #68]	@ (80021f0 <CAN_transmit+0x58>)
 80021ac:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 80021ae:	4b10      	ldr	r3, [pc, #64]	@ (80021f0 <CAN_transmit+0x58>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 80021b4:	4b0e      	ldr	r3, [pc, #56]	@ (80021f0 <CAN_transmit+0x58>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 80021ba:	4b0d      	ldr	r3, [pc, #52]	@ (80021f0 <CAN_transmit+0x58>)
 80021bc:	2208      	movs	r2, #8
 80021be:	611a      	str	r2, [r3, #16]
    if(bus == 1){
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d106      	bne.n	80021d4 <CAN_transmit+0x3c>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, data, &send_mail_box);
 80021c6:	f107 030c 	add.w	r3, r7, #12
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	4908      	ldr	r1, [pc, #32]	@ (80021f0 <CAN_transmit+0x58>)
 80021ce:	4809      	ldr	r0, [pc, #36]	@ (80021f4 <CAN_transmit+0x5c>)
 80021d0:	f003 fe26 	bl	8005e20 <HAL_CAN_AddTxMessage>
    }
    if(bus == 2){
 80021d4:	79fb      	ldrb	r3, [r7, #7]
 80021d6:	2b02      	cmp	r3, #2
 80021d8:	d106      	bne.n	80021e8 <CAN_transmit+0x50>
		HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, data, &send_mail_box);
 80021da:	f107 030c 	add.w	r3, r7, #12
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	4903      	ldr	r1, [pc, #12]	@ (80021f0 <CAN_transmit+0x58>)
 80021e2:	4805      	ldr	r0, [pc, #20]	@ (80021f8 <CAN_transmit+0x60>)
 80021e4:	f003 fe1c 	bl	8005e20 <HAL_CAN_AddTxMessage>
	}
}
 80021e8:	bf00      	nop
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	2000029c 	.word	0x2000029c
 80021f4:	20000958 	.word	0x20000958
 80021f8:	20000980 	.word	0x20000980

080021fc <getRotorPosition>:

void setMotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t positionTarget, PID_preset_t preset) {
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcPosition_PID(bus, motorType, motorID, positionTarget, preset));
}

uint16_t getRotorPosition(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 80021fc:	b480      	push	{r7}
 80021fe:	b083      	sub	sp, #12
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
 8002206:	460b      	mov	r3, r1
 8002208:	71bb      	strb	r3, [r7, #6]
 800220a:	4613      	mov	r3, r2
 800220c:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 800220e:	79bb      	ldrb	r3, [r7, #6]
 8002210:	2b02      	cmp	r3, #2
 8002212:	dc02      	bgt.n	800221a <getRotorPosition+0x1e>
 8002214:	2b00      	cmp	r3, #0
 8002216:	dc04      	bgt.n	8002222 <getRotorPosition+0x26>
 8002218:	e034      	b.n	8002284 <getRotorPosition+0x88>
 800221a:	3b03      	subs	r3, #3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d831      	bhi.n	8002284 <getRotorPosition+0x88>
 8002220:	e016      	b.n	8002250 <getRotorPosition+0x54>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8002222:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002226:	2b00      	cmp	r3, #0
 8002228:	dd29      	ble.n	800227e <getRotorPosition+0x82>
 800222a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800222e:	2b08      	cmp	r3, #8
 8002230:	dc25      	bgt.n	800227e <getRotorPosition+0x82>
				return motorFeedback[bus - 1][motorID - 1].rotor_position;
 8002232:	79fb      	ldrb	r3, [r7, #7]
 8002234:	1e5a      	subs	r2, r3, #1
 8002236:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800223a:	1e59      	subs	r1, r3, #1
 800223c:	4815      	ldr	r0, [pc, #84]	@ (8002294 <getRotorPosition+0x98>)
 800223e:	4613      	mov	r3, r2
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	440b      	add	r3, r1
 800224a:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800224e:	e01b      	b.n	8002288 <getRotorPosition+0x8c>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8002250:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002254:	2b00      	cmp	r3, #0
 8002256:	dd14      	ble.n	8002282 <getRotorPosition+0x86>
 8002258:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800225c:	2b07      	cmp	r3, #7
 800225e:	dc10      	bgt.n	8002282 <getRotorPosition+0x86>
				return motorFeedback[bus - 1][motorID + 3].rotor_position;
 8002260:	79fb      	ldrb	r3, [r7, #7]
 8002262:	1e5a      	subs	r2, r3, #1
 8002264:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002268:	1cd9      	adds	r1, r3, #3
 800226a:	480a      	ldr	r0, [pc, #40]	@ (8002294 <getRotorPosition+0x98>)
 800226c:	4613      	mov	r3, r2
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	4413      	add	r3, r2
 8002272:	005b      	lsls	r3, r3, #1
 8002274:	4413      	add	r3, r2
 8002276:	440b      	add	r3, r1
 8002278:	f830 3033 	ldrh.w	r3, [r0, r3, lsl #3]
 800227c:	e004      	b.n	8002288 <getRotorPosition+0x8c>
			break;
 800227e:	bf00      	nop
 8002280:	e000      	b.n	8002284 <getRotorPosition+0x88>
			}
			break;
 8002282:	bf00      	nop
		}
	}
	return -1;
 8002284:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8002288:	4618      	mov	r0, r3
 800228a:	370c      	adds	r7, #12
 800228c:	46bd      	mov	sp, r7
 800228e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002292:	4770      	bx	lr
 8002294:	200002b4 	.word	0x200002b4

08002298 <CAN_Init>:
	}
	return -1;
}


void CAN_Init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8002298:	b580      	push	{r7, lr}
 800229a:	b08a      	sub	sp, #40	@ 0x28
 800229c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 800229e:	2301      	movs	r3, #1
 80022a0:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 80022a2:	2300      	movs	r3, #0
 80022a4:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 80022a6:	2301      	movs	r3, #1
 80022a8:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 80022aa:	2300      	movs	r3, #0
 80022ac:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 80022ae:	2300      	movs	r3, #0
 80022b0:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
    can_filter_st.SlaveStartFilterBank = 0;
 80022ba:	2300      	movs	r3, #0
 80022bc:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 0;
 80022be:	2300      	movs	r3, #0
 80022c0:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 80022c2:	2300      	movs	r3, #0
 80022c4:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 80022c6:	463b      	mov	r3, r7
 80022c8:	4619      	mov	r1, r3
 80022ca:	480f      	ldr	r0, [pc, #60]	@ (8002308 <CAN_Init+0x70>)
 80022cc:	f003 fc86 	bl	8005bdc <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 80022d0:	480d      	ldr	r0, [pc, #52]	@ (8002308 <CAN_Init+0x70>)
 80022d2:	f003 fd61 	bl	8005d98 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022d6:	2102      	movs	r1, #2
 80022d8:	480b      	ldr	r0, [pc, #44]	@ (8002308 <CAN_Init+0x70>)
 80022da:	f003 ff93 	bl	8006204 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 13;
 80022de:	230d      	movs	r3, #13
 80022e0:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 13;
 80022e2:	230d      	movs	r3, #13
 80022e4:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 80022e6:	463b      	mov	r3, r7
 80022e8:	4619      	mov	r1, r3
 80022ea:	4808      	ldr	r0, [pc, #32]	@ (800230c <CAN_Init+0x74>)
 80022ec:	f003 fc76 	bl	8005bdc <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 80022f0:	4806      	ldr	r0, [pc, #24]	@ (800230c <CAN_Init+0x74>)
 80022f2:	f003 fd51 	bl	8005d98 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 80022f6:	2102      	movs	r1, #2
 80022f8:	4804      	ldr	r0, [pc, #16]	@ (800230c <CAN_Init+0x74>)
 80022fa:	f003 ff83 	bl	8006204 <HAL_CAN_ActivateNotification>
}
 80022fe:	bf00      	nop
 8002300:	3728      	adds	r7, #40	@ 0x28
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	20000958 	.word	0x20000958
 800230c:	20000980 	.word	0x20000980

08002310 <DBUS_Rx_Init>:
uint8_t DBUS_Buff[128];

uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len);


void DBUS_Rx_Init(UART_HandleTypeDef* huart){
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (huart, DBUS_Buff, 18);
 8002318:	2212      	movs	r2, #18
 800231a:	4914      	ldr	r1, [pc, #80]	@ (800236c <DBUS_Rx_Init+0x5c>)
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f007 f83c 	bl	800939a <HAL_UART_Receive_DMA>
	DR16_DBUS.CH0 = 1024;
 8002322:	4a13      	ldr	r2, [pc, #76]	@ (8002370 <DBUS_Rx_Init+0x60>)
 8002324:	8813      	ldrh	r3, [r2, #0]
 8002326:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800232a:	f361 030a 	bfi	r3, r1, #0, #11
 800232e:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = 1024;
 8002330:	4a0f      	ldr	r2, [pc, #60]	@ (8002370 <DBUS_Rx_Init+0x60>)
 8002332:	8853      	ldrh	r3, [r2, #2]
 8002334:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002338:	f361 030a 	bfi	r3, r1, #0, #11
 800233c:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = 1024;
 800233e:	4a0c      	ldr	r2, [pc, #48]	@ (8002370 <DBUS_Rx_Init+0x60>)
 8002340:	8893      	ldrh	r3, [r2, #4]
 8002342:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002346:	f361 030a 	bfi	r3, r1, #0, #11
 800234a:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = 1024;
 800234c:	4a08      	ldr	r2, [pc, #32]	@ (8002370 <DBUS_Rx_Init+0x60>)
 800234e:	88d3      	ldrh	r3, [r2, #6]
 8002350:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8002354:	f361 030a 	bfi	r3, r1, #0, #11
 8002358:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.RESERVED = 1024;
 800235a:	4b05      	ldr	r3, [pc, #20]	@ (8002370 <DBUS_Rx_Init+0x60>)
 800235c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002360:	825a      	strh	r2, [r3, #18]
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000378 	.word	0x20000378
 8002370:	20000364 	.word	0x20000364

08002374 <DBUS_Update>:


void DBUS_Update(){
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
	DR16_DBUS.CH0 = (DBUS_Buff[0] | (DBUS_Buff[1] << 8)) & 0x07ff;        //!< Channel 0
 8002378:	4b59      	ldr	r3, [pc, #356]	@ (80024e0 <DBUS_Update+0x16c>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b21a      	sxth	r2, r3
 800237e:	4b58      	ldr	r3, [pc, #352]	@ (80024e0 <DBUS_Update+0x16c>)
 8002380:	785b      	ldrb	r3, [r3, #1]
 8002382:	b21b      	sxth	r3, r3
 8002384:	021b      	lsls	r3, r3, #8
 8002386:	b21b      	sxth	r3, r3
 8002388:	4313      	orrs	r3, r2
 800238a:	b21b      	sxth	r3, r3
 800238c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002390:	b299      	uxth	r1, r3
 8002392:	4a54      	ldr	r2, [pc, #336]	@ (80024e4 <DBUS_Update+0x170>)
 8002394:	8813      	ldrh	r3, [r2, #0]
 8002396:	f361 030a 	bfi	r3, r1, #0, #11
 800239a:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = ((DBUS_Buff[1] >> 3) | (DBUS_Buff[2] << 5)) & 0x07ff; //!< Channel 1
 800239c:	4b50      	ldr	r3, [pc, #320]	@ (80024e0 <DBUS_Update+0x16c>)
 800239e:	785b      	ldrb	r3, [r3, #1]
 80023a0:	08db      	lsrs	r3, r3, #3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	b21a      	sxth	r2, r3
 80023a6:	4b4e      	ldr	r3, [pc, #312]	@ (80024e0 <DBUS_Update+0x16c>)
 80023a8:	789b      	ldrb	r3, [r3, #2]
 80023aa:	b21b      	sxth	r3, r3
 80023ac:	015b      	lsls	r3, r3, #5
 80023ae:	b21b      	sxth	r3, r3
 80023b0:	4313      	orrs	r3, r2
 80023b2:	b21b      	sxth	r3, r3
 80023b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b8:	b299      	uxth	r1, r3
 80023ba:	4a4a      	ldr	r2, [pc, #296]	@ (80024e4 <DBUS_Update+0x170>)
 80023bc:	8853      	ldrh	r3, [r2, #2]
 80023be:	f361 030a 	bfi	r3, r1, #0, #11
 80023c2:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = ((DBUS_Buff[2] >> 6) | (DBUS_Buff[3] << 2) | (DBUS_Buff[4] << 10)) &0x07ff;       //!< Channel 2
 80023c4:	4b46      	ldr	r3, [pc, #280]	@ (80024e0 <DBUS_Update+0x16c>)
 80023c6:	789b      	ldrb	r3, [r3, #2]
 80023c8:	099b      	lsrs	r3, r3, #6
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	b21a      	sxth	r2, r3
 80023ce:	4b44      	ldr	r3, [pc, #272]	@ (80024e0 <DBUS_Update+0x16c>)
 80023d0:	78db      	ldrb	r3, [r3, #3]
 80023d2:	b21b      	sxth	r3, r3
 80023d4:	009b      	lsls	r3, r3, #2
 80023d6:	b21b      	sxth	r3, r3
 80023d8:	4313      	orrs	r3, r2
 80023da:	b21a      	sxth	r2, r3
 80023dc:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <DBUS_Update+0x16c>)
 80023de:	791b      	ldrb	r3, [r3, #4]
 80023e0:	b21b      	sxth	r3, r3
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	b21b      	sxth	r3, r3
 80023e6:	4313      	orrs	r3, r2
 80023e8:	b21b      	sxth	r3, r3
 80023ea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023ee:	b299      	uxth	r1, r3
 80023f0:	4a3c      	ldr	r2, [pc, #240]	@ (80024e4 <DBUS_Update+0x170>)
 80023f2:	8893      	ldrh	r3, [r2, #4]
 80023f4:	f361 030a 	bfi	r3, r1, #0, #11
 80023f8:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = ((DBUS_Buff[4] >> 1) | (DBUS_Buff[5] << 7)) & 0x07ff; //!< Channel 3
 80023fa:	4b39      	ldr	r3, [pc, #228]	@ (80024e0 <DBUS_Update+0x16c>)
 80023fc:	791b      	ldrb	r3, [r3, #4]
 80023fe:	085b      	lsrs	r3, r3, #1
 8002400:	b2db      	uxtb	r3, r3
 8002402:	b21a      	sxth	r2, r3
 8002404:	4b36      	ldr	r3, [pc, #216]	@ (80024e0 <DBUS_Update+0x16c>)
 8002406:	795b      	ldrb	r3, [r3, #5]
 8002408:	b21b      	sxth	r3, r3
 800240a:	01db      	lsls	r3, r3, #7
 800240c:	b21b      	sxth	r3, r3
 800240e:	4313      	orrs	r3, r2
 8002410:	b21b      	sxth	r3, r3
 8002412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002416:	b299      	uxth	r1, r3
 8002418:	4a32      	ldr	r2, [pc, #200]	@ (80024e4 <DBUS_Update+0x170>)
 800241a:	88d3      	ldrh	r3, [r2, #6]
 800241c:	f361 030a 	bfi	r3, r1, #0, #11
 8002420:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.S1 = ((DBUS_Buff[5] >> 4) & 0x0003);                  //!< Switch left
 8002422:	4b2f      	ldr	r3, [pc, #188]	@ (80024e0 <DBUS_Update+0x16c>)
 8002424:	795b      	ldrb	r3, [r3, #5]
 8002426:	091b      	lsrs	r3, r3, #4
 8002428:	b2db      	uxtb	r3, r3
 800242a:	f003 0303 	and.w	r3, r3, #3
 800242e:	b2d9      	uxtb	r1, r3
 8002430:	4a2c      	ldr	r2, [pc, #176]	@ (80024e4 <DBUS_Update+0x170>)
 8002432:	79d3      	ldrb	r3, [r2, #7]
 8002434:	f361 03c4 	bfi	r3, r1, #3, #2
 8002438:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.S2 = ((DBUS_Buff[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 800243a:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <DBUS_Update+0x16c>)
 800243c:	795b      	ldrb	r3, [r3, #5]
 800243e:	091b      	lsrs	r3, r3, #4
 8002440:	b2db      	uxtb	r3, r3
 8002442:	109b      	asrs	r3, r3, #2
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	b2d9      	uxtb	r1, r3
 800244a:	4a26      	ldr	r2, [pc, #152]	@ (80024e4 <DBUS_Update+0x170>)
 800244c:	79d3      	ldrb	r3, [r2, #7]
 800244e:	f361 1346 	bfi	r3, r1, #5, #2
 8002452:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.MouseX = DBUS_Buff[6] | (DBUS_Buff[7] << 8);                    //!< Mouse X axis
 8002454:	4b22      	ldr	r3, [pc, #136]	@ (80024e0 <DBUS_Update+0x16c>)
 8002456:	799b      	ldrb	r3, [r3, #6]
 8002458:	b21a      	sxth	r2, r3
 800245a:	4b21      	ldr	r3, [pc, #132]	@ (80024e0 <DBUS_Update+0x16c>)
 800245c:	79db      	ldrb	r3, [r3, #7]
 800245e:	b21b      	sxth	r3, r3
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	b21b      	sxth	r3, r3
 8002464:	4313      	orrs	r3, r2
 8002466:	b21a      	sxth	r2, r3
 8002468:	4b1e      	ldr	r3, [pc, #120]	@ (80024e4 <DBUS_Update+0x170>)
 800246a:	811a      	strh	r2, [r3, #8]
	DR16_DBUS.MouseY = DBUS_Buff[8] | (DBUS_Buff[9] << 8);                    //!< Mouse Y axis
 800246c:	4b1c      	ldr	r3, [pc, #112]	@ (80024e0 <DBUS_Update+0x16c>)
 800246e:	7a1b      	ldrb	r3, [r3, #8]
 8002470:	b21a      	sxth	r2, r3
 8002472:	4b1b      	ldr	r3, [pc, #108]	@ (80024e0 <DBUS_Update+0x16c>)
 8002474:	7a5b      	ldrb	r3, [r3, #9]
 8002476:	b21b      	sxth	r3, r3
 8002478:	021b      	lsls	r3, r3, #8
 800247a:	b21b      	sxth	r3, r3
 800247c:	4313      	orrs	r3, r2
 800247e:	b21a      	sxth	r2, r3
 8002480:	4b18      	ldr	r3, [pc, #96]	@ (80024e4 <DBUS_Update+0x170>)
 8002482:	815a      	strh	r2, [r3, #10]
	DR16_DBUS.MouseZ = DBUS_Buff[10] | (DBUS_Buff[11] << 8);                  //!< Mouse Z axis
 8002484:	4b16      	ldr	r3, [pc, #88]	@ (80024e0 <DBUS_Update+0x16c>)
 8002486:	7a9b      	ldrb	r3, [r3, #10]
 8002488:	b21a      	sxth	r2, r3
 800248a:	4b15      	ldr	r3, [pc, #84]	@ (80024e0 <DBUS_Update+0x16c>)
 800248c:	7adb      	ldrb	r3, [r3, #11]
 800248e:	b21b      	sxth	r3, r3
 8002490:	021b      	lsls	r3, r3, #8
 8002492:	b21b      	sxth	r3, r3
 8002494:	4313      	orrs	r3, r2
 8002496:	b21a      	sxth	r2, r3
 8002498:	4b12      	ldr	r3, [pc, #72]	@ (80024e4 <DBUS_Update+0x170>)
 800249a:	819a      	strh	r2, [r3, #12]
	DR16_DBUS.MouseL = DBUS_Buff[12];                                  //!< Mouse Left Is Pressed ?
 800249c:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <DBUS_Update+0x16c>)
 800249e:	7b1a      	ldrb	r2, [r3, #12]
 80024a0:	4b10      	ldr	r3, [pc, #64]	@ (80024e4 <DBUS_Update+0x170>)
 80024a2:	739a      	strb	r2, [r3, #14]
	DR16_DBUS.MouseR = DBUS_Buff[13];                                  //!< Mouse Right Is Pressed ?
 80024a4:	4b0e      	ldr	r3, [pc, #56]	@ (80024e0 <DBUS_Update+0x16c>)
 80024a6:	7b5a      	ldrb	r2, [r3, #13]
 80024a8:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <DBUS_Update+0x170>)
 80024aa:	73da      	strb	r2, [r3, #15]
	DR16_DBUS.KeyData1 = DBUS_Buff[14];                    //!< KeyBoard value lower bits
 80024ac:	4b0c      	ldr	r3, [pc, #48]	@ (80024e0 <DBUS_Update+0x16c>)
 80024ae:	7b9a      	ldrb	r2, [r3, #14]
 80024b0:	4b0c      	ldr	r3, [pc, #48]	@ (80024e4 <DBUS_Update+0x170>)
 80024b2:	741a      	strb	r2, [r3, #16]
	DR16_DBUS.KeyData2 = DBUS_Buff[15];                    //!< KeyBoard value higher bits
 80024b4:	4b0a      	ldr	r3, [pc, #40]	@ (80024e0 <DBUS_Update+0x16c>)
 80024b6:	7bda      	ldrb	r2, [r3, #15]
 80024b8:	4b0a      	ldr	r3, [pc, #40]	@ (80024e4 <DBUS_Update+0x170>)
 80024ba:	745a      	strb	r2, [r3, #17]
	DR16_DBUS.RESERVED = DBUS_Buff[16] | (DBUS_Buff[17] << 8);                 //NULL
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <DBUS_Update+0x16c>)
 80024be:	7c1b      	ldrb	r3, [r3, #16]
 80024c0:	b21a      	sxth	r2, r3
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <DBUS_Update+0x16c>)
 80024c4:	7c5b      	ldrb	r3, [r3, #17]
 80024c6:	b21b      	sxth	r3, r3
 80024c8:	021b      	lsls	r3, r3, #8
 80024ca:	b21b      	sxth	r3, r3
 80024cc:	4313      	orrs	r3, r2
 80024ce:	b21b      	sxth	r3, r3
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	4b04      	ldr	r3, [pc, #16]	@ (80024e4 <DBUS_Update+0x170>)
 80024d4:	825a      	strh	r2, [r3, #18]
}
 80024d6:	bf00      	nop
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr
 80024e0:	20000378 	.word	0x20000378
 80024e4:	20000364 	.word	0x20000364

080024e8 <getDR16_CH0>:

int16_t getDR16_CH0(){
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH0>0){
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <getDR16_CH0+0x34>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024f4:	b29b      	uxth	r3, r3
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d009      	beq.n	800250e <getDR16_CH0+0x26>
		return (int16_t)DR16_DBUS.CH0-1024;
 80024fa:	4b08      	ldr	r3, [pc, #32]	@ (800251c <getDR16_CH0+0x34>)
 80024fc:	881b      	ldrh	r3, [r3, #0]
 80024fe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002502:	b29b      	uxth	r3, r3
 8002504:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002508:	b29b      	uxth	r3, r3
 800250a:	b21b      	sxth	r3, r3
 800250c:	e000      	b.n	8002510 <getDR16_CH0+0x28>
	}
	else{
		return 0;
 800250e:	2300      	movs	r3, #0
	}
}
 8002510:	4618      	mov	r0, r3
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr
 800251a:	bf00      	nop
 800251c:	20000364 	.word	0x20000364

08002520 <getDR16_CH1>:

int16_t getDR16_CH1(){
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH1>0){
 8002524:	4b0b      	ldr	r3, [pc, #44]	@ (8002554 <getDR16_CH1+0x34>)
 8002526:	885b      	ldrh	r3, [r3, #2]
 8002528:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800252c:	b29b      	uxth	r3, r3
 800252e:	2b00      	cmp	r3, #0
 8002530:	d009      	beq.n	8002546 <getDR16_CH1+0x26>
		return (int16_t)DR16_DBUS.CH1-1024;
 8002532:	4b08      	ldr	r3, [pc, #32]	@ (8002554 <getDR16_CH1+0x34>)
 8002534:	885b      	ldrh	r3, [r3, #2]
 8002536:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800253a:	b29b      	uxth	r3, r3
 800253c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002540:	b29b      	uxth	r3, r3
 8002542:	b21b      	sxth	r3, r3
 8002544:	e000      	b.n	8002548 <getDR16_CH1+0x28>
	}
	else{
		return 0;
 8002546:	2300      	movs	r3, #0
	}
}
 8002548:	4618      	mov	r0, r3
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr
 8002552:	bf00      	nop
 8002554:	20000364 	.word	0x20000364

08002558 <getDR16_CH2>:

int16_t getDR16_CH2(){
 8002558:	b480      	push	{r7}
 800255a:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH2>0){
 800255c:	4b0b      	ldr	r3, [pc, #44]	@ (800258c <getDR16_CH2+0x34>)
 800255e:	889b      	ldrh	r3, [r3, #4]
 8002560:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d009      	beq.n	800257e <getDR16_CH2+0x26>
		return (int16_t)DR16_DBUS.CH2-1024;
 800256a:	4b08      	ldr	r3, [pc, #32]	@ (800258c <getDR16_CH2+0x34>)
 800256c:	889b      	ldrh	r3, [r3, #4]
 800256e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002572:	b29b      	uxth	r3, r3
 8002574:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002578:	b29b      	uxth	r3, r3
 800257a:	b21b      	sxth	r3, r3
 800257c:	e000      	b.n	8002580 <getDR16_CH2+0x28>
	}
	else{
		return 0;
 800257e:	2300      	movs	r3, #0
	}
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	20000364 	.word	0x20000364

08002590 <getDR16_CH3>:

int16_t getDR16_CH3(){
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH3>0){
 8002594:	4b0b      	ldr	r3, [pc, #44]	@ (80025c4 <getDR16_CH3+0x34>)
 8002596:	88db      	ldrh	r3, [r3, #6]
 8002598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800259c:	b29b      	uxth	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d009      	beq.n	80025b6 <getDR16_CH3+0x26>
		return (int16_t)DR16_DBUS.CH3-1024;
 80025a2:	4b08      	ldr	r3, [pc, #32]	@ (80025c4 <getDR16_CH3+0x34>)
 80025a4:	88db      	ldrh	r3, [r3, #6]
 80025a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80025b0:	b29b      	uxth	r3, r3
 80025b2:	b21b      	sxth	r3, r3
 80025b4:	e000      	b.n	80025b8 <getDR16_CH3+0x28>
	}
	else{
		return 0;
 80025b6:	2300      	movs	r3, #0
	}
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	20000364 	.word	0x20000364

080025c8 <getDR16_S2>:

uint8_t getDR16_S1(){
	return DR16_DBUS.S1;
}

uint8_t getDR16_S2(){
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
	return DR16_DBUS.S2;
 80025cc:	4b04      	ldr	r3, [pc, #16]	@ (80025e0 <getDR16_S2+0x18>)
 80025ce:	79db      	ldrb	r3, [r3, #7]
 80025d0:	f3c3 1341 	ubfx	r3, r3, #5, #2
 80025d4:	b2db      	uxtb	r3, r3
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	46bd      	mov	sp, r7
 80025da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025de:	4770      	bx	lr
 80025e0:	20000364 	.word	0x20000364

080025e4 <getDR16_W>:
	else{
		return 0;
	}
}

uint8_t getDR16_W(){
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,0,1);
 80025e8:	4b04      	ldr	r3, [pc, #16]	@ (80025fc <getDR16_W+0x18>)
 80025ea:	7c1b      	ldrb	r3, [r3, #16]
 80025ec:	2201      	movs	r2, #1
 80025ee:	2100      	movs	r1, #0
 80025f0:	4618      	mov	r0, r3
 80025f2:	f000 f847 	bl	8002684 <DBUS_getBits>
 80025f6:	4603      	mov	r3, r0
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20000364 	.word	0x20000364

08002600 <getDR16_S>:

uint8_t getDR16_S(){
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,1,1);
 8002604:	4b04      	ldr	r3, [pc, #16]	@ (8002618 <getDR16_S+0x18>)
 8002606:	7c1b      	ldrb	r3, [r3, #16]
 8002608:	2201      	movs	r2, #1
 800260a:	2101      	movs	r1, #1
 800260c:	4618      	mov	r0, r3
 800260e:	f000 f839 	bl	8002684 <DBUS_getBits>
 8002612:	4603      	mov	r3, r0
}
 8002614:	4618      	mov	r0, r3
 8002616:	bd80      	pop	{r7, pc}
 8002618:	20000364 	.word	0x20000364

0800261c <getDR16_A>:

uint8_t getDR16_A(){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,2,1);
 8002620:	4b04      	ldr	r3, [pc, #16]	@ (8002634 <getDR16_A+0x18>)
 8002622:	7c1b      	ldrb	r3, [r3, #16]
 8002624:	2201      	movs	r2, #1
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f82b 	bl	8002684 <DBUS_getBits>
 800262e:	4603      	mov	r3, r0
}
 8002630:	4618      	mov	r0, r3
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000364 	.word	0x20000364

08002638 <getDR16_D>:

uint8_t getDR16_D(){
 8002638:	b580      	push	{r7, lr}
 800263a:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,3,1);
 800263c:	4b04      	ldr	r3, [pc, #16]	@ (8002650 <getDR16_D+0x18>)
 800263e:	7c1b      	ldrb	r3, [r3, #16]
 8002640:	2201      	movs	r2, #1
 8002642:	2103      	movs	r1, #3
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f81d 	bl	8002684 <DBUS_getBits>
 800264a:	4603      	mov	r3, r0
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	20000364 	.word	0x20000364

08002654 <getDR16_MouseX>:
uint8_t getDR16_B(){
	return DBUS_getBits(DR16_DBUS.KeyData2,7,1); //b
}

//mouse
int16_t getDR16_MouseX(){
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseX;
 8002658:	4b03      	ldr	r3, [pc, #12]	@ (8002668 <getDR16_MouseX+0x14>)
 800265a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 800265e:	4618      	mov	r0, r3
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr
 8002668:	20000364 	.word	0x20000364

0800266c <getDR16_MouseY>:

int16_t getDR16_MouseY(){
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseY;
 8002670:	4b03      	ldr	r3, [pc, #12]	@ (8002680 <getDR16_MouseY+0x14>)
 8002672:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 8002676:	4618      	mov	r0, r3
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr
 8002680:	20000364 	.word	0x20000364

08002684 <DBUS_getBits>:
uint8_t getDR16_MouseR(){
	return DR16_DBUS.MouseR;
}


uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	71fb      	strb	r3, [r7, #7]
 800268e:	460b      	mov	r3, r1
 8002690:	71bb      	strb	r3, [r7, #6]
 8002692:	4613      	mov	r3, r2
 8002694:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8002696:	2300      	movs	r3, #0
 8002698:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800269a:	2300      	movs	r3, #0
 800269c:	73bb      	strb	r3, [r7, #14]
 800269e:	e013      	b.n	80026c8 <DBUS_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 80026a0:	79fa      	ldrb	r2, [r7, #7]
 80026a2:	79b9      	ldrb	r1, [r7, #6]
 80026a4:	7bbb      	ldrb	r3, [r7, #14]
 80026a6:	440b      	add	r3, r1
 80026a8:	fa42 f303 	asr.w	r3, r2, r3
 80026ac:	f003 0201 	and.w	r2, r3, #1
 80026b0:	7bbb      	ldrb	r3, [r7, #14]
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	b25a      	sxtb	r2, r3
 80026b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026bc:	4313      	orrs	r3, r2
 80026be:	b25b      	sxtb	r3, r3
 80026c0:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 80026c2:	7bbb      	ldrb	r3, [r7, #14]
 80026c4:	3301      	adds	r3, #1
 80026c6:	73bb      	strb	r3, [r7, #14]
 80026c8:	7bba      	ldrb	r2, [r7, #14]
 80026ca:	797b      	ldrb	r3, [r7, #5]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	d3e7      	bcc.n	80026a0 <DBUS_getBits+0x1c>
	}
	return result;
 80026d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80026d2:	4618      	mov	r0, r3
 80026d4:	3714      	adds	r7, #20
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 80026e0:	b480      	push	{r7}
 80026e2:	b087      	sub	sp, #28
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	4613      	mov	r3, r2
 80026ec:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d116      	bne.n	8002722 <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 80026f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026f8:	e017      	b.n	800272a <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	60fa      	str	r2, [r7, #12]
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	b29a      	uxth	r2, r3
 800270a:	88f9      	ldrh	r1, [r7, #6]
 800270c:	7dfb      	ldrb	r3, [r7, #23]
 800270e:	404b      	eors	r3, r1
 8002710:	b2db      	uxtb	r3, r3
 8002712:	4909      	ldr	r1, [pc, #36]	@ (8002738 <Get_CRC16_Check_Sum+0x58>)
 8002714:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002718:	4053      	eors	r3, r2
 800271a:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	3b01      	subs	r3, #1
 8002720:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d1e8      	bne.n	80026fa <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 8002728:	88fb      	ldrh	r3, [r7, #6]
}
 800272a:	4618      	mov	r0, r3
 800272c:	371c      	adds	r7, #28
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	080103d8 	.word	0x080103d8

0800273c <UART_Printf>:
/*
** Descriptions: Send a message in fmt format over chosen uart instance
** Input: UART instance to send over, message to send in fmt format
** Output: message transmitted over uart
*/
void UART_Printf(UART_HandleTypeDef *huart,const char *fmt,...) {
 800273c:	b40e      	push	{r1, r2, r3}
 800273e:	b580      	push	{r7, lr}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 8002746:	f107 0318 	add.w	r3, r7, #24
 800274a:	4a0d      	ldr	r2, [pc, #52]	@ (8002780 <UART_Printf+0x44>)
 800274c:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);
 800274e:	4b0c      	ldr	r3, [pc, #48]	@ (8002780 <UART_Printf+0x44>)
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	6979      	ldr	r1, [r7, #20]
 8002754:	480b      	ldr	r0, [pc, #44]	@ (8002784 <UART_Printf+0x48>)
 8002756:	f00b fc77 	bl	800e048 <vsiprintf>
 800275a:	4603      	mov	r3, r0
 800275c:	b29a      	uxth	r2, r3
 800275e:	4b0a      	ldr	r3, [pc, #40]	@ (8002788 <UART_Printf+0x4c>)
 8002760:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit(huart, tx_buf, len,100);
 8002762:	4b09      	ldr	r3, [pc, #36]	@ (8002788 <UART_Printf+0x4c>)
 8002764:	881a      	ldrh	r2, [r3, #0]
 8002766:	2364      	movs	r3, #100	@ 0x64
 8002768:	4906      	ldr	r1, [pc, #24]	@ (8002784 <UART_Printf+0x48>)
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f006 fd8a 	bl	8009284 <HAL_UART_Transmit>
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800277a:	b003      	add	sp, #12
 800277c:	4770      	bx	lr
 800277e:	bf00      	nop
 8002780:	200007fc 	.word	0x200007fc
 8002784:	20000800 	.word	0x20000800
 8002788:	20000900 	.word	0x20000900

0800278c <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 800278c:	b580      	push	{r7, lr}
 800278e:	b082      	sub	sp, #8
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 8002794:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002798:	4903      	ldr	r1, [pc, #12]	@ (80027a8 <UART_Ex_Init+0x1c>)
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f006 fe22 	bl	80093e4 <HAL_UARTEx_ReceiveToIdle_DMA>

}
 80027a0:	bf00      	nop
 80027a2:	3708      	adds	r7, #8
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	200003f8 	.word	0x200003f8

080027ac <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 80027ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027b0:	b0af      	sub	sp, #188	@ 0xbc
 80027b2:	af12      	add	r7, sp, #72	@ 0x48
 80027b4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 80027b6:	460b      	mov	r3, r1
 80027b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80027ba:	466b      	mov	r3, sp
 80027bc:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 80027be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027c2:	49b7      	ldr	r1, [pc, #732]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80027c4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80027c6:	f006 fe0d 	bl	80093e4 <HAL_UARTEx_ReceiveToIdle_DMA>
	UART_RxEventCallback_RM25Passthrough(huart,RxBuff);
 80027ca:	49b5      	ldr	r1, [pc, #724]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80027cc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80027ce:	f001 f9a3 	bl	8003b18 <UART_RxEventCallback_RM25Passthrough>
	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 80027d2:	4bb3      	ldr	r3, [pc, #716]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80027d4:	799b      	ldrb	r3, [r3, #6]
 80027d6:	b21b      	sxth	r3, r3
 80027d8:	021b      	lsls	r3, r3, #8
 80027da:	b21a      	sxth	r2, r3
 80027dc:	4bb0      	ldr	r3, [pc, #704]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80027de:	795b      	ldrb	r3, [r3, #5]
 80027e0:	b21b      	sxth	r3, r3
 80027e2:	4313      	orrs	r3, r2
 80027e4:	b21b      	sxth	r3, r3
 80027e6:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 80027ea:	4bad      	ldr	r3, [pc, #692]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80027ec:	789b      	ldrb	r3, [r3, #2]
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	021b      	lsls	r3, r3, #8
 80027f2:	b21a      	sxth	r2, r3
 80027f4:	4baa      	ldr	r3, [pc, #680]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80027f6:	785b      	ldrb	r3, [r3, #1]
 80027f8:	b21b      	sxth	r3, r3
 80027fa:	4313      	orrs	r3, r2
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 8002802:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002806:	3308      	adds	r3, #8
 8002808:	4aa5      	ldr	r2, [pc, #660]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800280a:	5cd3      	ldrb	r3, [r2, r3]
 800280c:	b21b      	sxth	r3, r3
 800280e:	021b      	lsls	r3, r3, #8
 8002810:	b21a      	sxth	r2, r3
 8002812:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002816:	3307      	adds	r3, #7
 8002818:	49a1      	ldr	r1, [pc, #644]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800281a:	5ccb      	ldrb	r3, [r1, r3]
 800281c:	b21b      	sxth	r3, r3
 800281e:	4313      	orrs	r3, r2
 8002820:	b21b      	sxth	r3, r3
 8002822:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 8002826:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800282a:	1dd9      	adds	r1, r3, #7
 800282c:	1e4b      	subs	r3, r1, #1
 800282e:	667b      	str	r3, [r7, #100]	@ 0x64
 8002830:	460a      	mov	r2, r1
 8002832:	2300      	movs	r3, #0
 8002834:	633a      	str	r2, [r7, #48]	@ 0x30
 8002836:	637b      	str	r3, [r7, #52]	@ 0x34
 8002838:	f04f 0200 	mov.w	r2, #0
 800283c:	f04f 0300 	mov.w	r3, #0
 8002840:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8002842:	00c3      	lsls	r3, r0, #3
 8002844:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002846:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800284a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800284c:	00c2      	lsls	r2, r0, #3
 800284e:	460a      	mov	r2, r1
 8002850:	2300      	movs	r3, #0
 8002852:	4692      	mov	sl, r2
 8002854:	469b      	mov	fp, r3
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	f04f 0300 	mov.w	r3, #0
 800285e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002862:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002866:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800286a:	460b      	mov	r3, r1
 800286c:	3307      	adds	r3, #7
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	00db      	lsls	r3, r3, #3
 8002872:	ebad 0d03 	sub.w	sp, sp, r3
 8002876:	ab12      	add	r3, sp, #72	@ 0x48
 8002878:	3300      	adds	r3, #0
 800287a:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 800287c:	2300      	movs	r3, #0
 800287e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 8002882:	e00c      	b.n	800289e <HAL_UARTEx_RxEventCallback+0xf2>
		transmissionBuff[i] = RxBuff[i];
 8002884:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 8002888:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 800288c:	4984      	ldr	r1, [pc, #528]	@ (8002aa0 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800288e:	5c89      	ldrb	r1, [r1, r2]
 8002890:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002892:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 8002894:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002898:	3301      	adds	r3, #1
 800289a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800289e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80028a2:	1d9a      	adds	r2, r3, #6
 80028a4:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80028a8:	429a      	cmp	r2, r3
 80028aa:	daeb      	bge.n	8002884 <HAL_UARTEx_RxEventCallback+0xd8>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 80028ac:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 80028b0:	3307      	adds	r3, #7
 80028b2:	4619      	mov	r1, r3
 80028b4:	4b7b      	ldr	r3, [pc, #492]	@ (8002aa4 <HAL_UARTEx_RxEventCallback+0x2f8>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	461a      	mov	r2, r3
 80028ba:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80028bc:	f7ff ff10 	bl	80026e0 <Get_CRC16_Check_Sum>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 80028c6:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 80028ca:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 80028ce:	429a      	cmp	r2, r3
 80028d0:	f040 87b7 	bne.w	8003842 <HAL_UARTEx_RxEventCallback+0x1096>
 80028d4:	466b      	mov	r3, sp
 80028d6:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 80028d8:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 80028dc:	460b      	mov	r3, r1
 80028de:	3b01      	subs	r3, #1
 80028e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80028e2:	b28b      	uxth	r3, r1
 80028e4:	2200      	movs	r2, #0
 80028e6:	4698      	mov	r8, r3
 80028e8:	4691      	mov	r9, r2
 80028ea:	f04f 0200 	mov.w	r2, #0
 80028ee:	f04f 0300 	mov.w	r3, #0
 80028f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80028f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80028fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80028fe:	b28b      	uxth	r3, r1
 8002900:	2200      	movs	r2, #0
 8002902:	461c      	mov	r4, r3
 8002904:	4615      	mov	r5, r2
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	00eb      	lsls	r3, r5, #3
 8002910:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002914:	00e2      	lsls	r2, r4, #3
 8002916:	460b      	mov	r3, r1
 8002918:	3307      	adds	r3, #7
 800291a:	08db      	lsrs	r3, r3, #3
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	ebad 0d03 	sub.w	sp, sp, r3
 8002922:	ab12      	add	r3, sp, #72	@ 0x48
 8002924:	3300      	adds	r3, #0
 8002926:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 8002928:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800292c:	461a      	mov	r2, r3
 800292e:	495e      	ldr	r1, [pc, #376]	@ (8002aa8 <HAL_UARTEx_RxEventCallback+0x2fc>)
 8002930:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8002932:	f00b fc49 	bl	800e1c8 <memcpy>

		switch (cmd_id) {
 8002936:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 800293a:	f240 4201 	movw	r2, #1025	@ 0x401
 800293e:	4293      	cmp	r3, r2
 8002940:	f000 8772 	beq.w	8003828 <HAL_UARTEx_RxEventCallback+0x107c>
 8002944:	f240 4201 	movw	r2, #1025	@ 0x401
 8002948:	4293      	cmp	r3, r2
 800294a:	f300 8779 	bgt.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 800294e:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 8002952:	f280 8775 	bge.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800295a:	dc1c      	bgt.n	8002996 <HAL_UARTEx_RxEventCallback+0x1ea>
 800295c:	f240 220e 	movw	r2, #526	@ 0x20e
 8002960:	4293      	cmp	r3, r2
 8002962:	f300 876d 	bgt.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002966:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800296a:	dc2b      	bgt.n	80029c4 <HAL_UARTEx_RxEventCallback+0x218>
 800296c:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 8002970:	f280 8766 	bge.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002978:	dc48      	bgt.n	8002a0c <HAL_UARTEx_RxEventCallback+0x260>
 800297a:	2b03      	cmp	r3, #3
 800297c:	f000 80db 	beq.w	8002b36 <HAL_UARTEx_RxEventCallback+0x38a>
 8002980:	2b03      	cmp	r3, #3
 8002982:	f300 875d 	bgt.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002986:	2b01      	cmp	r3, #1
 8002988:	f000 8090 	beq.w	8002aac <HAL_UARTEx_RxEventCallback+0x300>
 800298c:	2b02      	cmp	r3, #2
 800298e:	f000 80c7 	beq.w	8002b20 <HAL_UARTEx_RxEventCallback+0x374>
 8002992:	f000 bf55 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002996:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 800299a:	2b06      	cmp	r3, #6
 800299c:	f200 8750 	bhi.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 80029a0:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <HAL_UARTEx_RxEventCallback+0x1fc>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	08003841 	.word	0x08003841
 80029ac:	08003485 	.word	0x08003485
 80029b0:	080034ab 	.word	0x080034ab
 80029b4:	08003519 	.word	0x08003519
 80029b8:	08003841 	.word	0x08003841
 80029bc:	08003841 	.word	0x08003841
 80029c0:	08003775 	.word	0x08003775
 80029c4:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80029c8:	2b0d      	cmp	r3, #13
 80029ca:	f200 8739 	bhi.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 80029ce:	a201      	add	r2, pc, #4	@ (adr r2, 80029d4 <HAL_UARTEx_RxEventCallback+0x228>)
 80029d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d4:	08002e55 	.word	0x08002e55
 80029d8:	08002f63 	.word	0x08002f63
 80029dc:	08002fab 	.word	0x08002fab
 80029e0:	08002fef 	.word	0x08002fef
 80029e4:	08003841 	.word	0x08003841
 80029e8:	08003051 	.word	0x08003051
 80029ec:	0800308f 	.word	0x0800308f
 80029f0:	080030ed 	.word	0x080030ed
 80029f4:	08003123 	.word	0x08003123
 80029f8:	08003139 	.word	0x08003139
 80029fc:	0800316d 	.word	0x0800316d
 8002a00:	08003225 	.word	0x08003225
 8002a04:	080032c5 	.word	0x080032c5
 8002a08:	08003447 	.word	0x08003447
 8002a0c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8002a10:	2b20      	cmp	r3, #32
 8002a12:	f200 8715 	bhi.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002a16:	a201      	add	r2, pc, #4	@ (adr r2, 8002a1c <HAL_UARTEx_RxEventCallback+0x270>)
 8002a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a1c:	08002c59 	.word	0x08002c59
 8002a20:	08003841 	.word	0x08003841
 8002a24:	08003841 	.word	0x08003841
 8002a28:	08002db5 	.word	0x08002db5
 8002a2c:	08002de7 	.word	0x08002de7
 8002a30:	08003841 	.word	0x08003841
 8002a34:	08003841 	.word	0x08003841
 8002a38:	08003841 	.word	0x08003841
 8002a3c:	08003841 	.word	0x08003841
 8002a40:	08003841 	.word	0x08003841
 8002a44:	08003841 	.word	0x08003841
 8002a48:	08003841 	.word	0x08003841
 8002a4c:	08003841 	.word	0x08003841
 8002a50:	08003841 	.word	0x08003841
 8002a54:	08003841 	.word	0x08003841
 8002a58:	08003841 	.word	0x08003841
 8002a5c:	08003841 	.word	0x08003841
 8002a60:	08003841 	.word	0x08003841
 8002a64:	08003841 	.word	0x08003841
 8002a68:	08003841 	.word	0x08003841
 8002a6c:	08003841 	.word	0x08003841
 8002a70:	08003841 	.word	0x08003841
 8002a74:	08003841 	.word	0x08003841
 8002a78:	08003841 	.word	0x08003841
 8002a7c:	08003841 	.word	0x08003841
 8002a80:	08003841 	.word	0x08003841
 8002a84:	08003841 	.word	0x08003841
 8002a88:	08003841 	.word	0x08003841
 8002a8c:	08003841 	.word	0x08003841
 8002a90:	08003841 	.word	0x08003841
 8002a94:	08003841 	.word	0x08003841
 8002a98:	08003841 	.word	0x08003841
 8002a9c:	08003841 	.word	0x08003841
 8002aa0:	200004f8 	.word	0x200004f8
 8002aa4:	2000003e 	.word	0x2000003e
 8002aa8:	200004ff 	.word	0x200004ff
			case GAME_STATUS_HEADER : {
				game_status.game_type = UART_RM25_getBits(data[0],0,4);
 8002aac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2204      	movs	r2, #4
 8002ab2:	2100      	movs	r1, #0
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 fed3 	bl	8003860 <UART_RM25_getBits>
 8002aba:	4603      	mov	r3, r0
 8002abc:	461a      	mov	r2, r3
 8002abe:	4b63      	ldr	r3, [pc, #396]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002ac0:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = UART_RM25_getBits(data[0],4,4);
 8002ac2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	2204      	movs	r2, #4
 8002ac8:	2104      	movs	r1, #4
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 fec8 	bl	8003860 <UART_RM25_getBits>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	461a      	mov	r2, r3
 8002ad4:	4b5d      	ldr	r3, [pc, #372]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002ad6:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 8002ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ada:	3301      	adds	r3, #1
 8002adc:	881b      	ldrh	r3, [r3, #0]
 8002ade:	b29a      	uxth	r2, r3
 8002ae0:	4b5a      	ldr	r3, [pc, #360]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002ae2:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 8002ae4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae6:	3303      	adds	r3, #3
 8002ae8:	681a      	ldr	r2, [r3, #0]
 8002aea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002af0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002af4:	4955      	ldr	r1, [pc, #340]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002af6:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 8002afa:	4b54      	ldr	r3, [pc, #336]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002afc:	7818      	ldrb	r0, [r3, #0]
 8002afe:	4b53      	ldr	r3, [pc, #332]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002b00:	7859      	ldrb	r1, [r3, #1]
 8002b02:	4b52      	ldr	r3, [pc, #328]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002b04:	789c      	ldrb	r4, [r3, #2]
 8002b06:	4b51      	ldr	r3, [pc, #324]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002b08:	889d      	ldrh	r5, [r3, #4]
 8002b0a:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002b0c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002b10:	e9cd 2300 	strd	r2, r3, [sp]
 8002b14:	462b      	mov	r3, r5
 8002b16:	4622      	mov	r2, r4
 8002b18:	f7ff f860 	bl	8001bdc <GAME_STATUS_RxEventCallback>
				break;
 8002b1c:	f000 be90 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 8002b20:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b22:	781a      	ldrb	r2, [r3, #0]
 8002b24:	4b4a      	ldr	r3, [pc, #296]	@ (8002c50 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8002b26:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 8002b28:	4b49      	ldr	r3, [pc, #292]	@ (8002c50 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f000 fec4 	bl	80038ba <GAME_RESULT_RxEventCallback>
				break;
 8002b32:	f000 be85 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 8002b36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b38:	881b      	ldrh	r3, [r3, #0]
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	4b45      	ldr	r3, [pc, #276]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b3e:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 8002b40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b42:	3302      	adds	r3, #2
 8002b44:	881b      	ldrh	r3, [r3, #0]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	4b42      	ldr	r3, [pc, #264]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b4a:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 8002b4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b4e:	3304      	adds	r3, #4
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	4b3f      	ldr	r3, [pc, #252]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b56:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 8002b58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b5a:	3306      	adds	r3, #6
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	4b3c      	ldr	r3, [pc, #240]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b62:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 8002b64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b66:	330a      	adds	r3, #10
 8002b68:	881b      	ldrh	r3, [r3, #0]
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	4b39      	ldr	r3, [pc, #228]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b6e:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 8002b70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b72:	330c      	adds	r3, #12
 8002b74:	881b      	ldrh	r3, [r3, #0]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	4b36      	ldr	r3, [pc, #216]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b7a:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 8002b7c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b7e:	330e      	adds	r3, #14
 8002b80:	881b      	ldrh	r3, [r3, #0]
 8002b82:	b29a      	uxth	r2, r3
 8002b84:	4b33      	ldr	r3, [pc, #204]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b86:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 8002b88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b8a:	3310      	adds	r3, #16
 8002b8c:	881b      	ldrh	r3, [r3, #0]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	4b30      	ldr	r3, [pc, #192]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b92:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 8002b94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b96:	3312      	adds	r3, #18
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	4b2d      	ldr	r3, [pc, #180]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002b9e:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8002ba0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ba2:	3314      	adds	r3, #20
 8002ba4:	881b      	ldrh	r3, [r3, #0]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002baa:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 8002bac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bae:	3316      	adds	r3, #22
 8002bb0:	881b      	ldrh	r3, [r3, #0]
 8002bb2:	b29a      	uxth	r2, r3
 8002bb4:	4b27      	ldr	r3, [pc, #156]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bb6:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 8002bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bba:	331a      	adds	r3, #26
 8002bbc:	881b      	ldrh	r3, [r3, #0]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	4b24      	ldr	r3, [pc, #144]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bc2:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 8002bc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bc6:	331c      	adds	r3, #28
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	b29a      	uxth	r2, r3
 8002bcc:	4b21      	ldr	r3, [pc, #132]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bce:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8002bd0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd2:	331e      	adds	r3, #30
 8002bd4:	881b      	ldrh	r3, [r3, #0]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bda:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 8002bdc:	4b1d      	ldr	r3, [pc, #116]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bde:	f8b3 c000 	ldrh.w	ip, [r3]
 8002be2:	4b1c      	ldr	r3, [pc, #112]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002be4:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8002be8:	4b1a      	ldr	r3, [pc, #104]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bea:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8002bee:	4b19      	ldr	r3, [pc, #100]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bf0:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8002bf4:	4b17      	ldr	r3, [pc, #92]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bf6:	8918      	ldrh	r0, [r3, #8]
 8002bf8:	4b16      	ldr	r3, [pc, #88]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bfa:	895c      	ldrh	r4, [r3, #10]
 8002bfc:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002bfe:	899d      	ldrh	r5, [r3, #12]
 8002c00:	4b14      	ldr	r3, [pc, #80]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002c02:	89de      	ldrh	r6, [r3, #14]
 8002c04:	4b13      	ldr	r3, [pc, #76]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002c06:	8a1b      	ldrh	r3, [r3, #16]
 8002c08:	633b      	str	r3, [r7, #48]	@ 0x30
 8002c0a:	4b12      	ldr	r3, [pc, #72]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002c0c:	8a5a      	ldrh	r2, [r3, #18]
 8002c0e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002c10:	4b10      	ldr	r3, [pc, #64]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002c12:	8a99      	ldrh	r1, [r3, #20]
 8002c14:	6279      	str	r1, [r7, #36]	@ 0x24
 8002c16:	4b0f      	ldr	r3, [pc, #60]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002c18:	8ad9      	ldrh	r1, [r3, #22]
 8002c1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002c1c:	8b1a      	ldrh	r2, [r3, #24]
 8002c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8002c54 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002c20:	8b5b      	ldrh	r3, [r3, #26]
 8002c22:	9309      	str	r3, [sp, #36]	@ 0x24
 8002c24:	9208      	str	r2, [sp, #32]
 8002c26:	9107      	str	r1, [sp, #28]
 8002c28:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c2a:	9106      	str	r1, [sp, #24]
 8002c2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002c2e:	9205      	str	r2, [sp, #20]
 8002c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c32:	9304      	str	r3, [sp, #16]
 8002c34:	9603      	str	r6, [sp, #12]
 8002c36:	9502      	str	r5, [sp, #8]
 8002c38:	9401      	str	r4, [sp, #4]
 8002c3a:	9000      	str	r0, [sp, #0]
 8002c3c:	464b      	mov	r3, r9
 8002c3e:	4642      	mov	r2, r8
 8002c40:	4671      	mov	r1, lr
 8002c42:	4660      	mov	r0, ip
 8002c44:	f000 fe44 	bl	80038d0 <ROBOT_HP_HEADER_RxEventCallback>
				break;
 8002c48:	f000 bdfa 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002c4c:	200005f8 	.word	0x200005f8
 8002c50:	20000608 	.word	0x20000608
 8002c54:	2000060c 	.word	0x2000060c
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = UART_RM25_getBits(data[0],0,1);
 8002c58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2100      	movs	r1, #0
 8002c60:	4618      	mov	r0, r3
 8002c62:	f000 fdfd 	bl	8003860 <UART_RM25_getBits>
 8002c66:	4603      	mov	r3, r0
 8002c68:	461a      	mov	r2, r3
 8002c6a:	4b77      	ldr	r3, [pc, #476]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002c6c:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = UART_RM25_getBits(data[0],1,1);
 8002c6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	2201      	movs	r2, #1
 8002c74:	2101      	movs	r1, #1
 8002c76:	4618      	mov	r0, r3
 8002c78:	f000 fdf2 	bl	8003860 <UART_RM25_getBits>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	461a      	mov	r2, r3
 8002c80:	4b71      	ldr	r3, [pc, #452]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002c82:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = UART_RM25_getBits(data[0],2,1);
 8002c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	2102      	movs	r1, #2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f000 fde7 	bl	8003860 <UART_RM25_getBits>
 8002c92:	4603      	mov	r3, r0
 8002c94:	461a      	mov	r2, r3
 8002c96:	4b6c      	ldr	r3, [pc, #432]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002c98:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = UART_RM25_getBits(data[0],3,1);
 8002c9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	2103      	movs	r1, #3
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fddc 	bl	8003860 <UART_RM25_getBits>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	461a      	mov	r2, r3
 8002cac:	4b66      	ldr	r3, [pc, #408]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002cae:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = UART_RM25_getBits(data[0],4,1);
 8002cb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cb2:	781b      	ldrb	r3, [r3, #0]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	2104      	movs	r1, #4
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f000 fdd1 	bl	8003860 <UART_RM25_getBits>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4b61      	ldr	r3, [pc, #388]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002cc4:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = UART_RM25_getBits(data[0],5,2);
 8002cc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	2105      	movs	r1, #5
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f000 fdc6 	bl	8003860 <UART_RM25_getBits>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	461a      	mov	r2, r3
 8002cd8:	4b5b      	ldr	r3, [pc, #364]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002cda:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = UART_RM25_getBits(data[0],7,1) | (UART_RM25_getBits(data[1],0,1)<<1);
 8002cdc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2201      	movs	r2, #1
 8002ce2:	2107      	movs	r1, #7
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f000 fdbb 	bl	8003860 <UART_RM25_getBits>
 8002cea:	4603      	mov	r3, r0
 8002cec:	b25c      	sxtb	r4, r3
 8002cee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cf0:	785b      	ldrb	r3, [r3, #1]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	2100      	movs	r1, #0
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fdb2 	bl	8003860 <UART_RM25_getBits>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	b25b      	sxtb	r3, r3
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	b25b      	sxtb	r3, r3
 8002d04:	4323      	orrs	r3, r4
 8002d06:	b25b      	sxtb	r3, r3
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d0c:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {UART_RM25_getBits(data[1],1,8),UART_RM25_getBits(data[2],0,2)};
 8002d0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d10:	785b      	ldrb	r3, [r3, #1]
 8002d12:	2208      	movs	r2, #8
 8002d14:	2101      	movs	r1, #1
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fda2 	bl	8003860 <UART_RM25_getBits>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8002d22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d24:	789b      	ldrb	r3, [r3, #2]
 8002d26:	2202      	movs	r2, #2
 8002d28:	2100      	movs	r1, #0
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 fd98 	bl	8003860 <UART_RM25_getBits>
 8002d30:	4603      	mov	r3, r0
 8002d32:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 8002d36:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 8002d3a:	4b43      	ldr	r3, [pc, #268]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d3c:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = UART_RM25_getBits(data[2],2,3);
 8002d3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d40:	789b      	ldrb	r3, [r3, #2]
 8002d42:	2203      	movs	r2, #3
 8002d44:	2102      	movs	r1, #2
 8002d46:	4618      	mov	r0, r3
 8002d48:	f000 fd8a 	bl	8003860 <UART_RM25_getBits>
 8002d4c:	4603      	mov	r3, r0
 8002d4e:	461a      	mov	r2, r3
 8002d50:	4b3d      	ldr	r3, [pc, #244]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d52:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = UART_RM25_getBits(data[2],5,2);
 8002d54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d56:	789b      	ldrb	r3, [r3, #2]
 8002d58:	2202      	movs	r2, #2
 8002d5a:	2105      	movs	r1, #5
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f000 fd7f 	bl	8003860 <UART_RM25_getBits>
 8002d62:	4603      	mov	r3, r0
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b38      	ldr	r3, [pc, #224]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d68:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 8002d6a:	4b37      	ldr	r3, [pc, #220]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d6c:	781e      	ldrb	r6, [r3, #0]
 8002d6e:	4b36      	ldr	r3, [pc, #216]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d70:	f893 c001 	ldrb.w	ip, [r3, #1]
 8002d74:	4b34      	ldr	r3, [pc, #208]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d76:	f893 e002 	ldrb.w	lr, [r3, #2]
 8002d7a:	4b33      	ldr	r3, [pc, #204]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d7c:	f893 8003 	ldrb.w	r8, [r3, #3]
 8002d80:	4b31      	ldr	r3, [pc, #196]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d82:	791b      	ldrb	r3, [r3, #4]
 8002d84:	4a30      	ldr	r2, [pc, #192]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d86:	7952      	ldrb	r2, [r2, #5]
 8002d88:	492f      	ldr	r1, [pc, #188]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d8a:	7989      	ldrb	r1, [r1, #6]
 8002d8c:	482e      	ldr	r0, [pc, #184]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d8e:	8900      	ldrh	r0, [r0, #8]
 8002d90:	4c2d      	ldr	r4, [pc, #180]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d92:	7aa4      	ldrb	r4, [r4, #10]
 8002d94:	4d2c      	ldr	r5, [pc, #176]	@ (8002e48 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002d96:	7aed      	ldrb	r5, [r5, #11]
 8002d98:	9505      	str	r5, [sp, #20]
 8002d9a:	9404      	str	r4, [sp, #16]
 8002d9c:	9003      	str	r0, [sp, #12]
 8002d9e:	9102      	str	r1, [sp, #8]
 8002da0:	9201      	str	r2, [sp, #4]
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	4643      	mov	r3, r8
 8002da6:	4672      	mov	r2, lr
 8002da8:	4661      	mov	r1, ip
 8002daa:	4630      	mov	r0, r6
 8002dac:	f000 fda4 	bl	80038f8 <EVENT_DATA_RxEventCallback>
				break;
 8002db0:	f000 bd46 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 8002db4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db6:	781a      	ldrb	r2, [r3, #0]
 8002db8:	4b24      	ldr	r3, [pc, #144]	@ (8002e4c <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002dba:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	781a      	ldrb	r2, [r3, #0]
 8002dc2:	4b22      	ldr	r3, [pc, #136]	@ (8002e4c <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002dc4:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 8002dc6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dc8:	3302      	adds	r3, #2
 8002dca:	781a      	ldrb	r2, [r3, #0]
 8002dcc:	4b1f      	ldr	r3, [pc, #124]	@ (8002e4c <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002dce:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 8002dd0:	4b1e      	ldr	r3, [pc, #120]	@ (8002e4c <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4a1d      	ldr	r2, [pc, #116]	@ (8002e4c <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002dd6:	7851      	ldrb	r1, [r2, #1]
 8002dd8:	4a1c      	ldr	r2, [pc, #112]	@ (8002e4c <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002dda:	7892      	ldrb	r2, [r2, #2]
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f000 fd9f 	bl	8003920 <REFEREE_WARNING_RxEventCallback>
				break;
 8002de2:	f000 bd2d 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 8002de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de8:	781a      	ldrb	r2, [r3, #0]
 8002dea:	4b19      	ldr	r3, [pc, #100]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002dec:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = UART_RM25_getBits(data[1],0,3);
 8002dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df0:	785b      	ldrb	r3, [r3, #1]
 8002df2:	2203      	movs	r2, #3
 8002df4:	2100      	movs	r1, #0
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 fd32 	bl	8003860 <UART_RM25_getBits>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b13      	ldr	r3, [pc, #76]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002e02:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = UART_RM25_getBits(data[1],3,3);
 8002e04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e06:	785b      	ldrb	r3, [r3, #1]
 8002e08:	2203      	movs	r2, #3
 8002e0a:	2103      	movs	r1, #3
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	f000 fd27 	bl	8003860 <UART_RM25_getBits>
 8002e12:	4603      	mov	r3, r0
 8002e14:	461a      	mov	r2, r3
 8002e16:	4b0e      	ldr	r3, [pc, #56]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002e18:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = UART_RM25_getBits(data[1],6,2);
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e1c:	785b      	ldrb	r3, [r3, #1]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	2106      	movs	r1, #6
 8002e22:	4618      	mov	r0, r3
 8002e24:	f000 fd1c 	bl	8003860 <UART_RM25_getBits>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002e2e:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 8002e30:	4b07      	ldr	r3, [pc, #28]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002e32:	7818      	ldrb	r0, [r3, #0]
 8002e34:	4b06      	ldr	r3, [pc, #24]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002e36:	7859      	ldrb	r1, [r3, #1]
 8002e38:	4b05      	ldr	r3, [pc, #20]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002e3a:	789a      	ldrb	r2, [r3, #2]
 8002e3c:	4b04      	ldr	r3, [pc, #16]	@ (8002e50 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002e3e:	78db      	ldrb	r3, [r3, #3]
 8002e40:	f000 fd7d 	bl	800393e <DART_INFO_RxEventCallback>
				break;
 8002e44:	f000 bcfc 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8002e48:	20000628 	.word	0x20000628
 8002e4c:	20000634 	.word	0x20000634
 8002e50:	20000638 	.word	0x20000638
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 8002e54:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	4b9e      	ldr	r3, [pc, #632]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002e5a:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 8002e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e5e:	3301      	adds	r3, #1
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	4b9c      	ldr	r3, [pc, #624]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002e64:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 8002e66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e68:	3302      	adds	r3, #2
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	b29a      	uxth	r2, r3
 8002e6e:	4b99      	ldr	r3, [pc, #612]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002e70:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 8002e72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e74:	3304      	adds	r3, #4
 8002e76:	881b      	ldrh	r3, [r3, #0]
 8002e78:	b29a      	uxth	r2, r3
 8002e7a:	4b96      	ldr	r3, [pc, #600]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002e7c:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 8002e7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e80:	3306      	adds	r3, #6
 8002e82:	881b      	ldrh	r3, [r3, #0]
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	4b93      	ldr	r3, [pc, #588]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002e88:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	3308      	adds	r3, #8
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	4b90      	ldr	r3, [pc, #576]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002e94:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 8002e96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e98:	330a      	adds	r3, #10
 8002e9a:	881b      	ldrh	r3, [r3, #0]
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	4b8d      	ldr	r3, [pc, #564]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002ea0:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = UART_RM25_getBits(data[12],0,1);
 8002ea2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ea4:	7b1b      	ldrb	r3, [r3, #12]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	2100      	movs	r1, #0
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fcd8 	bl	8003860 <UART_RM25_getBits>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f003 0301 	and.w	r3, r3, #1
 8002eb6:	b2d9      	uxtb	r1, r3
 8002eb8:	4a86      	ldr	r2, [pc, #536]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002eba:	7b13      	ldrb	r3, [r2, #12]
 8002ebc:	f361 0300 	bfi	r3, r1, #0, #1
 8002ec0:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = UART_RM25_getBits(data[12],1,1);
 8002ec2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec4:	7b1b      	ldrb	r3, [r3, #12]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	2101      	movs	r1, #1
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f000 fcc8 	bl	8003860 <UART_RM25_getBits>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	f003 0301 	and.w	r3, r3, #1
 8002ed6:	b2d9      	uxtb	r1, r3
 8002ed8:	4a7e      	ldr	r2, [pc, #504]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002eda:	7b13      	ldrb	r3, [r2, #12]
 8002edc:	f361 0341 	bfi	r3, r1, #1, #1
 8002ee0:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = UART_RM25_getBits(data[12],2,1);
 8002ee2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ee4:	7b1b      	ldrb	r3, [r3, #12]
 8002ee6:	2201      	movs	r2, #1
 8002ee8:	2102      	movs	r1, #2
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fcb8 	bl	8003860 <UART_RM25_getBits>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	b2d9      	uxtb	r1, r3
 8002ef8:	4a76      	ldr	r2, [pc, #472]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002efa:	7b13      	ldrb	r3, [r2, #12]
 8002efc:	f361 0382 	bfi	r3, r1, #2, #1
 8002f00:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 8002f02:	4b74      	ldr	r3, [pc, #464]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f04:	781c      	ldrb	r4, [r3, #0]
 8002f06:	4b73      	ldr	r3, [pc, #460]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f08:	785d      	ldrb	r5, [r3, #1]
 8002f0a:	4b72      	ldr	r3, [pc, #456]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f0c:	885e      	ldrh	r6, [r3, #2]
 8002f0e:	4b71      	ldr	r3, [pc, #452]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f10:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8002f14:	4b6f      	ldr	r3, [pc, #444]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f16:	88db      	ldrh	r3, [r3, #6]
 8002f18:	4a6e      	ldr	r2, [pc, #440]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f1a:	8912      	ldrh	r2, [r2, #8]
 8002f1c:	496d      	ldr	r1, [pc, #436]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f1e:	8949      	ldrh	r1, [r1, #10]
 8002f20:	486c      	ldr	r0, [pc, #432]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f22:	7b00      	ldrb	r0, [r0, #12]
 8002f24:	f3c0 0000 	ubfx	r0, r0, #0, #1
 8002f28:	b2c0      	uxtb	r0, r0
 8002f2a:	6338      	str	r0, [r7, #48]	@ 0x30
 8002f2c:	4869      	ldr	r0, [pc, #420]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f2e:	7b00      	ldrb	r0, [r0, #12]
 8002f30:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002f34:	b2c0      	uxtb	r0, r0
 8002f36:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002f38:	4866      	ldr	r0, [pc, #408]	@ (80030d4 <HAL_UARTEx_RxEventCallback+0x928>)
 8002f3a:	7b00      	ldrb	r0, [r0, #12]
 8002f3c:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002f40:	b2c0      	uxtb	r0, r0
 8002f42:	9005      	str	r0, [sp, #20]
 8002f44:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002f46:	9004      	str	r0, [sp, #16]
 8002f48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f4a:	9003      	str	r0, [sp, #12]
 8002f4c:	9102      	str	r1, [sp, #8]
 8002f4e:	9201      	str	r2, [sp, #4]
 8002f50:	9300      	str	r3, [sp, #0]
 8002f52:	4663      	mov	r3, ip
 8002f54:	4632      	mov	r2, r6
 8002f56:	4629      	mov	r1, r5
 8002f58:	4620      	mov	r0, r4
 8002f5a:	f7fe fe6d 	bl	8001c38 <ROBOT_STATUS_RxEventCallback>
				break;
 8002f5e:	f000 bc6f 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 8002f62:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f64:	3308      	adds	r3, #8
 8002f66:	881b      	ldrh	r3, [r3, #0]
 8002f68:	b29a      	uxth	r2, r3
 8002f6a:	4b5b      	ldr	r3, [pc, #364]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002f6c:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	330a      	adds	r3, #10
 8002f72:	881b      	ldrh	r3, [r3, #0]
 8002f74:	b29a      	uxth	r2, r3
 8002f76:	4b58      	ldr	r3, [pc, #352]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002f78:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 8002f7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f7c:	330c      	adds	r3, #12
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	b29a      	uxth	r2, r3
 8002f82:	4b55      	ldr	r3, [pc, #340]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002f84:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 8002f86:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f88:	330e      	adds	r3, #14
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	4b52      	ldr	r3, [pc, #328]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002f90:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 8002f92:	4b51      	ldr	r3, [pc, #324]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002f94:	8818      	ldrh	r0, [r3, #0]
 8002f96:	4b50      	ldr	r3, [pc, #320]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002f98:	8859      	ldrh	r1, [r3, #2]
 8002f9a:	4b4f      	ldr	r3, [pc, #316]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002f9c:	889a      	ldrh	r2, [r3, #4]
 8002f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80030d8 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002fa0:	88db      	ldrh	r3, [r3, #6]
 8002fa2:	f7fe fe8d 	bl	8001cc0 <POWER_HEAT_DATA_RxEventCallback>
				break;
 8002fa6:	f000 bc4b 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 8002faa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	461a      	mov	r2, r3
 8002fb0:	4b4a      	ldr	r3, [pc, #296]	@ (80030dc <HAL_UARTEx_RxEventCallback+0x930>)
 8002fb2:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 8002fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	461a      	mov	r2, r3
 8002fba:	4b48      	ldr	r3, [pc, #288]	@ (80030dc <HAL_UARTEx_RxEventCallback+0x930>)
 8002fbc:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 8002fbe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	461a      	mov	r2, r3
 8002fc4:	4b45      	ldr	r3, [pc, #276]	@ (80030dc <HAL_UARTEx_RxEventCallback+0x930>)
 8002fc6:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 8002fc8:	4b44      	ldr	r3, [pc, #272]	@ (80030dc <HAL_UARTEx_RxEventCallback+0x930>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	4b43      	ldr	r3, [pc, #268]	@ (80030dc <HAL_UARTEx_RxEventCallback+0x930>)
 8002fd0:	ed93 7a01 	vldr	s14, [r3, #4]
 8002fd4:	4b41      	ldr	r3, [pc, #260]	@ (80030dc <HAL_UARTEx_RxEventCallback+0x930>)
 8002fd6:	edd3 6a02 	vldr	s13, [r3, #8]
 8002fda:	eeb0 1a66 	vmov.f32	s2, s13
 8002fde:	eef0 0a47 	vmov.f32	s1, s14
 8002fe2:	eeb0 0a67 	vmov.f32	s0, s15
 8002fe6:	f000 fcbe 	bl	8003966 <ROBOT_POSITION_RxEventCallback>
				break;
 8002fea:	f000 bc29 	b.w	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 8002fee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff0:	781a      	ldrb	r2, [r3, #0]
 8002ff2:	4b3b      	ldr	r3, [pc, #236]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8002ff4:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 8002ff6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	781a      	ldrb	r2, [r3, #0]
 8002ffc:	4b38      	ldr	r3, [pc, #224]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8002ffe:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 8003000:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003002:	3302      	adds	r3, #2
 8003004:	781a      	ldrb	r2, [r3, #0]
 8003006:	4b36      	ldr	r3, [pc, #216]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8003008:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 800300a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800300c:	3303      	adds	r3, #3
 800300e:	781a      	ldrb	r2, [r3, #0]
 8003010:	4b33      	ldr	r3, [pc, #204]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8003012:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 8003014:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003016:	3304      	adds	r3, #4
 8003018:	881b      	ldrh	r3, [r3, #0]
 800301a:	b29a      	uxth	r2, r3
 800301c:	4b30      	ldr	r3, [pc, #192]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 800301e:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 8003020:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003022:	3305      	adds	r3, #5
 8003024:	781a      	ldrb	r2, [r3, #0]
 8003026:	4b2e      	ldr	r3, [pc, #184]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8003028:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 800302a:	4b2d      	ldr	r3, [pc, #180]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 800302c:	7818      	ldrb	r0, [r3, #0]
 800302e:	4b2c      	ldr	r3, [pc, #176]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8003030:	7859      	ldrb	r1, [r3, #1]
 8003032:	4b2b      	ldr	r3, [pc, #172]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8003034:	789c      	ldrb	r4, [r3, #2]
 8003036:	4b2a      	ldr	r3, [pc, #168]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8003038:	78dd      	ldrb	r5, [r3, #3]
 800303a:	4b29      	ldr	r3, [pc, #164]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 800303c:	889b      	ldrh	r3, [r3, #4]
 800303e:	4a28      	ldr	r2, [pc, #160]	@ (80030e0 <HAL_UARTEx_RxEventCallback+0x934>)
 8003040:	7992      	ldrb	r2, [r2, #6]
 8003042:	9201      	str	r2, [sp, #4]
 8003044:	9300      	str	r3, [sp, #0]
 8003046:	462b      	mov	r3, r5
 8003048:	4622      	mov	r2, r4
 800304a:	f000 fc9b 	bl	8003984 <BUFF_RxEventCallback>
				break;
 800304e:	e3f7      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = UART_RM25_getBits(data[0],0,4);
 8003050:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003052:	781b      	ldrb	r3, [r3, #0]
 8003054:	2204      	movs	r2, #4
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f000 fc01 	bl	8003860 <UART_RM25_getBits>
 800305e:	4603      	mov	r3, r0
 8003060:	461a      	mov	r2, r3
 8003062:	4b20      	ldr	r3, [pc, #128]	@ (80030e4 <HAL_UARTEx_RxEventCallback+0x938>)
 8003064:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = UART_RM25_getBits(data[0],4,4);
 8003066:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003068:	781b      	ldrb	r3, [r3, #0]
 800306a:	2204      	movs	r2, #4
 800306c:	2104      	movs	r1, #4
 800306e:	4618      	mov	r0, r3
 8003070:	f000 fbf6 	bl	8003860 <UART_RM25_getBits>
 8003074:	4603      	mov	r3, r0
 8003076:	461a      	mov	r2, r3
 8003078:	4b1a      	ldr	r3, [pc, #104]	@ (80030e4 <HAL_UARTEx_RxEventCallback+0x938>)
 800307a:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 800307c:	4b19      	ldr	r3, [pc, #100]	@ (80030e4 <HAL_UARTEx_RxEventCallback+0x938>)
 800307e:	781b      	ldrb	r3, [r3, #0]
 8003080:	4a18      	ldr	r2, [pc, #96]	@ (80030e4 <HAL_UARTEx_RxEventCallback+0x938>)
 8003082:	7852      	ldrb	r2, [r2, #1]
 8003084:	4611      	mov	r1, r2
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fc90 	bl	80039ac <DAMAGE_SOURCE_RxEventCallback>
				break;
 800308c:	e3d8      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 800308e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003090:	781a      	ldrb	r2, [r3, #0]
 8003092:	4b15      	ldr	r3, [pc, #84]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 8003094:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 8003096:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003098:	3301      	adds	r3, #1
 800309a:	781a      	ldrb	r2, [r3, #0]
 800309c:	4b12      	ldr	r3, [pc, #72]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 800309e:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 80030a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030a2:	3302      	adds	r3, #2
 80030a4:	781a      	ldrb	r2, [r3, #0]
 80030a6:	4b10      	ldr	r3, [pc, #64]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 80030a8:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 80030aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ac:	3303      	adds	r3, #3
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	461a      	mov	r2, r3
 80030b2:	4b0d      	ldr	r3, [pc, #52]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 80030b4:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 80030b6:	4b0c      	ldr	r3, [pc, #48]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	4a0b      	ldr	r2, [pc, #44]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 80030bc:	7851      	ldrb	r1, [r2, #1]
 80030be:	4a0a      	ldr	r2, [pc, #40]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 80030c0:	7892      	ldrb	r2, [r2, #2]
 80030c2:	4809      	ldr	r0, [pc, #36]	@ (80030e8 <HAL_UARTEx_RxEventCallback+0x93c>)
 80030c4:	edd0 7a01 	vldr	s15, [r0, #4]
 80030c8:	eeb0 0a67 	vmov.f32	s0, s15
 80030cc:	4618      	mov	r0, r3
 80030ce:	f7fe ffad 	bl	800202c <PROJECTILE_INFO_RxEventCallback>
				break;
 80030d2:	e3b5      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 80030d4:	2000063c 	.word	0x2000063c
 80030d8:	2000064c 	.word	0x2000064c
 80030dc:	20000654 	.word	0x20000654
 80030e0:	20000660 	.word	0x20000660
 80030e4:	20000668 	.word	0x20000668
 80030e8:	2000066c 	.word	0x2000066c
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 80030ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b29a      	uxth	r2, r3
 80030f2:	4b6f      	ldr	r3, [pc, #444]	@ (80032b0 <HAL_UARTEx_RxEventCallback+0xb04>)
 80030f4:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	3302      	adds	r3, #2
 80030fa:	881b      	ldrh	r3, [r3, #0]
 80030fc:	b29a      	uxth	r2, r3
 80030fe:	4b6c      	ldr	r3, [pc, #432]	@ (80032b0 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003100:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 8003102:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003104:	3304      	adds	r3, #4
 8003106:	881b      	ldrh	r3, [r3, #0]
 8003108:	b29a      	uxth	r2, r3
 800310a:	4b69      	ldr	r3, [pc, #420]	@ (80032b0 <HAL_UARTEx_RxEventCallback+0xb04>)
 800310c:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 800310e:	4b68      	ldr	r3, [pc, #416]	@ (80032b0 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003110:	881b      	ldrh	r3, [r3, #0]
 8003112:	4a67      	ldr	r2, [pc, #412]	@ (80032b0 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003114:	8851      	ldrh	r1, [r2, #2]
 8003116:	4a66      	ldr	r2, [pc, #408]	@ (80032b0 <HAL_UARTEx_RxEventCallback+0xb04>)
 8003118:	8892      	ldrh	r2, [r2, #4]
 800311a:	4618      	mov	r0, r3
 800311c:	f000 fc54 	bl	80039c8 <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 8003120:	e38e      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 8003122:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	4b62      	ldr	r3, [pc, #392]	@ (80032b4 <HAL_UARTEx_RxEventCallback+0xb08>)
 800312a:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 800312c:	4b61      	ldr	r3, [pc, #388]	@ (80032b4 <HAL_UARTEx_RxEventCallback+0xb08>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4618      	mov	r0, r3
 8003132:	f000 fc58 	bl	80039e6 <RFID_RxEventCallback>
				break;
 8003136:	e383      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 8003138:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313a:	781a      	ldrb	r2, [r3, #0]
 800313c:	4b5e      	ldr	r3, [pc, #376]	@ (80032b8 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800313e:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 8003140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003142:	3302      	adds	r3, #2
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	b29a      	uxth	r2, r3
 8003148:	4b5b      	ldr	r3, [pc, #364]	@ (80032b8 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800314a:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 800314c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800314e:	3304      	adds	r3, #4
 8003150:	881b      	ldrh	r3, [r3, #0]
 8003152:	b29a      	uxth	r2, r3
 8003154:	4b58      	ldr	r3, [pc, #352]	@ (80032b8 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003156:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 8003158:	4b57      	ldr	r3, [pc, #348]	@ (80032b8 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4a56      	ldr	r2, [pc, #344]	@ (80032b8 <HAL_UARTEx_RxEventCallback+0xb0c>)
 800315e:	8851      	ldrh	r1, [r2, #2]
 8003160:	4a55      	ldr	r2, [pc, #340]	@ (80032b8 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8003162:	8892      	ldrh	r2, [r2, #4]
 8003164:	4618      	mov	r0, r3
 8003166:	f000 fc48 	bl	80039fa <DART_COMMAND_RxEventCallback>
				break;
 800316a:	e369      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 800316c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	461a      	mov	r2, r3
 8003172:	4b52      	ldr	r3, [pc, #328]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 8003174:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 8003176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003178:	3304      	adds	r3, #4
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b4f      	ldr	r3, [pc, #316]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 8003180:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 8003182:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003184:	3308      	adds	r3, #8
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	461a      	mov	r2, r3
 800318a:	4b4c      	ldr	r3, [pc, #304]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 800318c:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 800318e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003190:	330c      	adds	r3, #12
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	461a      	mov	r2, r3
 8003196:	4b49      	ldr	r3, [pc, #292]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 8003198:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 800319a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800319c:	3310      	adds	r3, #16
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b46      	ldr	r3, [pc, #280]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031a4:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 80031a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a8:	3314      	adds	r3, #20
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	461a      	mov	r2, r3
 80031ae:	4b43      	ldr	r3, [pc, #268]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031b0:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 80031b2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b4:	3318      	adds	r3, #24
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	461a      	mov	r2, r3
 80031ba:	4b40      	ldr	r3, [pc, #256]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031bc:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 80031be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c0:	331c      	adds	r3, #28
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	461a      	mov	r2, r3
 80031c6:	4b3d      	ldr	r3, [pc, #244]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031c8:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 80031ca:	4b3c      	ldr	r3, [pc, #240]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031cc:	edd3 7a00 	vldr	s15, [r3]
 80031d0:	4b3a      	ldr	r3, [pc, #232]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80031d6:	4b39      	ldr	r3, [pc, #228]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031d8:	edd3 6a02 	vldr	s13, [r3, #8]
 80031dc:	4b37      	ldr	r3, [pc, #220]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031de:	ed93 6a03 	vldr	s12, [r3, #12]
 80031e2:	4b36      	ldr	r3, [pc, #216]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031e4:	edd3 5a04 	vldr	s11, [r3, #16]
 80031e8:	4b34      	ldr	r3, [pc, #208]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031ea:	ed93 5a05 	vldr	s10, [r3, #20]
 80031ee:	4b33      	ldr	r3, [pc, #204]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031f0:	ed93 3a06 	vldr	s6, [r3, #24]
 80031f4:	4b31      	ldr	r3, [pc, #196]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031f6:	edd3 3a07 	vldr	s7, [r3, #28]
 80031fa:	4b30      	ldr	r3, [pc, #192]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 80031fc:	ed93 4a08 	vldr	s8, [r3, #32]
 8003200:	4b2e      	ldr	r3, [pc, #184]	@ (80032bc <HAL_UARTEx_RxEventCallback+0xb10>)
 8003202:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 8003206:	eef0 2a45 	vmov.f32	s5, s10
 800320a:	eeb0 2a65 	vmov.f32	s4, s11
 800320e:	eef0 1a46 	vmov.f32	s3, s12
 8003212:	eeb0 1a66 	vmov.f32	s2, s13
 8003216:	eef0 0a47 	vmov.f32	s1, s14
 800321a:	eeb0 0a67 	vmov.f32	s0, s15
 800321e:	f000 fbfb 	bl	8003a18 <TEAM_POSITION_RxEventCallback>
				break;
 8003222:	e30d      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = UART_RM25_getBits(data[0],0,1);
 8003224:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2201      	movs	r2, #1
 800322a:	2100      	movs	r1, #0
 800322c:	4618      	mov	r0, r3
 800322e:	f000 fb17 	bl	8003860 <UART_RM25_getBits>
 8003232:	4603      	mov	r3, r0
 8003234:	461a      	mov	r2, r3
 8003236:	4b22      	ldr	r3, [pc, #136]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 8003238:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = UART_RM25_getBits(data[0],1,1);
 800323a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2201      	movs	r2, #1
 8003240:	2101      	movs	r1, #1
 8003242:	4618      	mov	r0, r3
 8003244:	f000 fb0c 	bl	8003860 <UART_RM25_getBits>
 8003248:	4603      	mov	r3, r0
 800324a:	461a      	mov	r2, r3
 800324c:	4b1c      	ldr	r3, [pc, #112]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 800324e:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = UART_RM25_getBits(data[0],2,1);
 8003250:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2201      	movs	r2, #1
 8003256:	2102      	movs	r1, #2
 8003258:	4618      	mov	r0, r3
 800325a:	f000 fb01 	bl	8003860 <UART_RM25_getBits>
 800325e:	4603      	mov	r3, r0
 8003260:	461a      	mov	r2, r3
 8003262:	4b17      	ldr	r3, [pc, #92]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 8003264:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = UART_RM25_getBits(data[0],3,1);
 8003266:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2201      	movs	r2, #1
 800326c:	2103      	movs	r1, #3
 800326e:	4618      	mov	r0, r3
 8003270:	f000 faf6 	bl	8003860 <UART_RM25_getBits>
 8003274:	4603      	mov	r3, r0
 8003276:	461a      	mov	r2, r3
 8003278:	4b11      	ldr	r3, [pc, #68]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 800327a:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = UART_RM25_getBits(data[0],4,1);
 800327c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2201      	movs	r2, #1
 8003282:	2104      	movs	r1, #4
 8003284:	4618      	mov	r0, r3
 8003286:	f000 faeb 	bl	8003860 <UART_RM25_getBits>
 800328a:	4603      	mov	r3, r0
 800328c:	461a      	mov	r2, r3
 800328e:	4b0c      	ldr	r3, [pc, #48]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 8003290:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 8003292:	4b0b      	ldr	r3, [pc, #44]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 8003294:	7818      	ldrb	r0, [r3, #0]
 8003296:	4b0a      	ldr	r3, [pc, #40]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 8003298:	7859      	ldrb	r1, [r3, #1]
 800329a:	4b09      	ldr	r3, [pc, #36]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 800329c:	789a      	ldrb	r2, [r3, #2]
 800329e:	4b08      	ldr	r3, [pc, #32]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 80032a0:	78dc      	ldrb	r4, [r3, #3]
 80032a2:	4b07      	ldr	r3, [pc, #28]	@ (80032c0 <HAL_UARTEx_RxEventCallback+0xb14>)
 80032a4:	791b      	ldrb	r3, [r3, #4]
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4623      	mov	r3, r4
 80032aa:	f000 fbd2 	bl	8003a52 <RADAR_MARKING_RxEventCallback>
				break;
 80032ae:	e2c7      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 80032b0:	20000674 	.word	0x20000674
 80032b4:	2000067c 	.word	0x2000067c
 80032b8:	20000680 	.word	0x20000680
 80032bc:	20000688 	.word	0x20000688
 80032c0:	200006b0 	.word	0x200006b0
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],UART_RM25_getBits(data[1],0,3)};
 80032c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 80032cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ce:	785b      	ldrb	r3, [r3, #1]
 80032d0:	2203      	movs	r2, #3
 80032d2:	2100      	movs	r1, #0
 80032d4:	4618      	mov	r0, r3
 80032d6:	f000 fac3 	bl	8003860 <UART_RM25_getBits>
 80032da:	4603      	mov	r3, r0
 80032dc:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 80032e0:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 80032e4:	4b88      	ldr	r3, [pc, #544]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80032e6:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = UART_RM25_getBits(data[1],3,4);
 80032e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032ea:	785b      	ldrb	r3, [r3, #1]
 80032ec:	2204      	movs	r2, #4
 80032ee:	2103      	movs	r1, #3
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 fab5 	bl	8003860 <UART_RM25_getBits>
 80032f6:	4603      	mov	r3, r0
 80032f8:	461a      	mov	r2, r3
 80032fa:	4b83      	ldr	r3, [pc, #524]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80032fc:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = UART_RM25_getBits(data[1],7,1) | (UART_RM25_getBits(data[2],0,3)<<1);
 80032fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003300:	785b      	ldrb	r3, [r3, #1]
 8003302:	2201      	movs	r2, #1
 8003304:	2107      	movs	r1, #7
 8003306:	4618      	mov	r0, r3
 8003308:	f000 faaa 	bl	8003860 <UART_RM25_getBits>
 800330c:	4603      	mov	r3, r0
 800330e:	b25c      	sxtb	r4, r3
 8003310:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003312:	789b      	ldrb	r3, [r3, #2]
 8003314:	2203      	movs	r2, #3
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f000 faa1 	bl	8003860 <UART_RM25_getBits>
 800331e:	4603      	mov	r3, r0
 8003320:	b25b      	sxtb	r3, r3
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	b25b      	sxtb	r3, r3
 8003326:	4323      	orrs	r3, r4
 8003328:	b25b      	sxtb	r3, r3
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b76      	ldr	r3, [pc, #472]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800332e:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = UART_RM25_getBits(data[2],3,1);
 8003330:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003332:	789b      	ldrb	r3, [r3, #2]
 8003334:	2201      	movs	r2, #1
 8003336:	2103      	movs	r1, #3
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fa91 	bl	8003860 <UART_RM25_getBits>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	4b71      	ldr	r3, [pc, #452]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003344:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = UART_RM25_getBits(data[2],4,1);
 8003346:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003348:	789b      	ldrb	r3, [r3, #2]
 800334a:	2201      	movs	r2, #1
 800334c:	2104      	movs	r1, #4
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fa86 	bl	8003860 <UART_RM25_getBits>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	4b6b      	ldr	r3, [pc, #428]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800335a:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {UART_RM25_getBits(data[2],5,3)| (UART_RM25_getBits(data[3],0,5)<<3),UART_RM25_getBits(data[3],5,2)};
 800335c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800335e:	789b      	ldrb	r3, [r3, #2]
 8003360:	2203      	movs	r2, #3
 8003362:	2105      	movs	r1, #5
 8003364:	4618      	mov	r0, r3
 8003366:	f000 fa7b 	bl	8003860 <UART_RM25_getBits>
 800336a:	4603      	mov	r3, r0
 800336c:	b25c      	sxtb	r4, r3
 800336e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003370:	78db      	ldrb	r3, [r3, #3]
 8003372:	2205      	movs	r2, #5
 8003374:	2100      	movs	r1, #0
 8003376:	4618      	mov	r0, r3
 8003378:	f000 fa72 	bl	8003860 <UART_RM25_getBits>
 800337c:	4603      	mov	r3, r0
 800337e:	b25b      	sxtb	r3, r3
 8003380:	00db      	lsls	r3, r3, #3
 8003382:	b25b      	sxtb	r3, r3
 8003384:	4323      	orrs	r3, r4
 8003386:	b25b      	sxtb	r3, r3
 8003388:	b2db      	uxtb	r3, r3
 800338a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 800338e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003390:	78db      	ldrb	r3, [r3, #3]
 8003392:	2202      	movs	r2, #2
 8003394:	2105      	movs	r1, #5
 8003396:	4618      	mov	r0, r3
 8003398:	f000 fa62 	bl	8003860 <UART_RM25_getBits>
 800339c:	4603      	mov	r3, r0
 800339e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 80033a2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 80033a6:	4b58      	ldr	r3, [pc, #352]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80033a8:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = UART_RM25_getBits(data[4],0,1);
 80033aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ac:	791b      	ldrb	r3, [r3, #4]
 80033ae:	2201      	movs	r2, #1
 80033b0:	2100      	movs	r1, #0
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa54 	bl	8003860 <UART_RM25_getBits>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	4b52      	ldr	r3, [pc, #328]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 80033be:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {UART_RM25_getBits(data[4],1,7)|(UART_RM25_getBits(data[5],0,1)<<7),UART_RM25_getBits(data[5],1,3)};
 80033c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033c2:	791b      	ldrb	r3, [r3, #4]
 80033c4:	2207      	movs	r2, #7
 80033c6:	2101      	movs	r1, #1
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fa49 	bl	8003860 <UART_RM25_getBits>
 80033ce:	4603      	mov	r3, r0
 80033d0:	b25c      	sxtb	r4, r3
 80033d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033d4:	795b      	ldrb	r3, [r3, #5]
 80033d6:	2201      	movs	r2, #1
 80033d8:	2100      	movs	r1, #0
 80033da:	4618      	mov	r0, r3
 80033dc:	f000 fa40 	bl	8003860 <UART_RM25_getBits>
 80033e0:	4603      	mov	r3, r0
 80033e2:	b25b      	sxtb	r3, r3
 80033e4:	01db      	lsls	r3, r3, #7
 80033e6:	b25b      	sxtb	r3, r3
 80033e8:	4323      	orrs	r3, r4
 80033ea:	b25b      	sxtb	r3, r3
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 80033f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033f4:	795b      	ldrb	r3, [r3, #5]
 80033f6:	2203      	movs	r2, #3
 80033f8:	2101      	movs	r1, #1
 80033fa:	4618      	mov	r0, r3
 80033fc:	f000 fa30 	bl	8003860 <UART_RM25_getBits>
 8003400:	4603      	mov	r3, r0
 8003402:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 8003406:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800340a:	4b3f      	ldr	r3, [pc, #252]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800340c:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 800340e:	4b3e      	ldr	r3, [pc, #248]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003410:	881c      	ldrh	r4, [r3, #0]
 8003412:	4b3d      	ldr	r3, [pc, #244]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003414:	789d      	ldrb	r5, [r3, #2]
 8003416:	4b3c      	ldr	r3, [pc, #240]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003418:	78de      	ldrb	r6, [r3, #3]
 800341a:	4b3b      	ldr	r3, [pc, #236]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800341c:	f893 c004 	ldrb.w	ip, [r3, #4]
 8003420:	4b39      	ldr	r3, [pc, #228]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003422:	795b      	ldrb	r3, [r3, #5]
 8003424:	4a38      	ldr	r2, [pc, #224]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003426:	88d2      	ldrh	r2, [r2, #6]
 8003428:	4937      	ldr	r1, [pc, #220]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800342a:	7a09      	ldrb	r1, [r1, #8]
 800342c:	4836      	ldr	r0, [pc, #216]	@ (8003508 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800342e:	8940      	ldrh	r0, [r0, #10]
 8003430:	9003      	str	r0, [sp, #12]
 8003432:	9102      	str	r1, [sp, #8]
 8003434:	9201      	str	r2, [sp, #4]
 8003436:	9300      	str	r3, [sp, #0]
 8003438:	4663      	mov	r3, ip
 800343a:	4632      	mov	r2, r6
 800343c:	4629      	mov	r1, r5
 800343e:	4620      	mov	r0, r4
 8003440:	f000 fb1b 	bl	8003a7a <SENTRY_RxEventCallback>
				break;
 8003444:	e1fc      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = UART_RM25_getBits(data[0],0,1);
 8003446:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2201      	movs	r2, #1
 800344c:	2100      	movs	r1, #0
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fa06 	bl	8003860 <UART_RM25_getBits>
 8003454:	4603      	mov	r3, r0
 8003456:	461a      	mov	r2, r3
 8003458:	4b2c      	ldr	r3, [pc, #176]	@ (800350c <HAL_UARTEx_RxEventCallback+0xd60>)
 800345a:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = UART_RM25_getBits(data[0],1,1);
 800345c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2201      	movs	r2, #1
 8003462:	2101      	movs	r1, #1
 8003464:	4618      	mov	r0, r3
 8003466:	f000 f9fb 	bl	8003860 <UART_RM25_getBits>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	4b27      	ldr	r3, [pc, #156]	@ (800350c <HAL_UARTEx_RxEventCallback+0xd60>)
 8003470:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 8003472:	4b26      	ldr	r3, [pc, #152]	@ (800350c <HAL_UARTEx_RxEventCallback+0xd60>)
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	4a25      	ldr	r2, [pc, #148]	@ (800350c <HAL_UARTEx_RxEventCallback+0xd60>)
 8003478:	7852      	ldrb	r2, [r2, #1]
 800347a:	4611      	mov	r1, r2
 800347c:	4618      	mov	r0, r3
 800347e:	f000 fb10 	bl	8003aa2 <RADAR_BUFF_RxEventCallback>
				break;
 8003482:	e1dd      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 8003484:	4a22      	ldr	r2, [pc, #136]	@ (8003510 <HAL_UARTEx_RxEventCallback+0xd64>)
 8003486:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003488:	4614      	mov	r4, r2
 800348a:	461d      	mov	r5, r3
 800348c:	6828      	ldr	r0, [r5, #0]
 800348e:	6869      	ldr	r1, [r5, #4]
 8003490:	68aa      	ldr	r2, [r5, #8]
 8003492:	68eb      	ldr	r3, [r5, #12]
 8003494:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003496:	6928      	ldr	r0, [r5, #16]
 8003498:	6969      	ldr	r1, [r5, #20]
 800349a:	69aa      	ldr	r2, [r5, #24]
 800349c:	c407      	stmia	r4!, {r0, r1, r2}
 800349e:	8bab      	ldrh	r3, [r5, #28]
 80034a0:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 80034a2:	481b      	ldr	r0, [pc, #108]	@ (8003510 <HAL_UARTEx_RxEventCallback+0xd64>)
 80034a4:	f7fe fade 	bl	8001a64 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 80034a8:	e1ca      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 80034aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b18      	ldr	r3, [pc, #96]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034b2:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 80034b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034b6:	3304      	adds	r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	461a      	mov	r2, r3
 80034bc:	4b15      	ldr	r3, [pc, #84]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034be:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 80034c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034c2:	3308      	adds	r3, #8
 80034c4:	781a      	ldrb	r2, [r3, #0]
 80034c6:	4b13      	ldr	r3, [pc, #76]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034c8:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 80034ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034cc:	3309      	adds	r3, #9
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	4b10      	ldr	r3, [pc, #64]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034d2:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 80034d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034d6:	330a      	adds	r3, #10
 80034d8:	881b      	ldrh	r3, [r3, #0]
 80034da:	b29a      	uxth	r2, r3
 80034dc:	4b0d      	ldr	r3, [pc, #52]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034de:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 80034e0:	4b0c      	ldr	r3, [pc, #48]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034e2:	edd3 7a00 	vldr	s15, [r3]
 80034e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034e8:	ed93 7a01 	vldr	s14, [r3, #4]
 80034ec:	4b09      	ldr	r3, [pc, #36]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034ee:	7a1b      	ldrb	r3, [r3, #8]
 80034f0:	4a08      	ldr	r2, [pc, #32]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034f2:	7a51      	ldrb	r1, [r2, #9]
 80034f4:	4a07      	ldr	r2, [pc, #28]	@ (8003514 <HAL_UARTEx_RxEventCallback+0xd68>)
 80034f6:	8952      	ldrh	r2, [r2, #10]
 80034f8:	4618      	mov	r0, r3
 80034fa:	eef0 0a47 	vmov.f32	s1, s14
 80034fe:	eeb0 0a67 	vmov.f32	s0, s15
 8003502:	f000 fadc 	bl	8003abe <MINIMAP_COMMAND_RxEventCallback>
				break;
 8003506:	e19b      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 8003508:	200006b8 	.word	0x200006b8
 800350c:	200006c4 	.word	0x200006c4
 8003510:	2000075c 	.word	0x2000075c
 8003514:	200006c8 	.word	0x200006c8
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 8003518:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	b29a      	uxth	r2, r3
 800351e:	4b94      	ldr	r3, [pc, #592]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003520:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 8003522:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003524:	3302      	adds	r3, #2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	b29a      	uxth	r2, r3
 800352a:	4b91      	ldr	r3, [pc, #580]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800352c:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 800352e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003530:	3304      	adds	r3, #4
 8003532:	881b      	ldrh	r3, [r3, #0]
 8003534:	b29a      	uxth	r2, r3
 8003536:	4b8e      	ldr	r3, [pc, #568]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003538:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 800353a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800353c:	3306      	adds	r3, #6
 800353e:	781a      	ldrb	r2, [r3, #0]
 8003540:	4b8b      	ldr	r3, [pc, #556]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003542:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 8003544:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003546:	3307      	adds	r3, #7
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	4b89      	ldr	r3, [pc, #548]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800354c:	71da      	strb	r2, [r3, #7]
				pc_control.w = UART_RM25_getBits(data[8],0,1);
 800354e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003550:	7a1b      	ldrb	r3, [r3, #8]
 8003552:	2201      	movs	r2, #1
 8003554:	2100      	movs	r1, #0
 8003556:	4618      	mov	r0, r3
 8003558:	f000 f982 	bl	8003860 <UART_RM25_getBits>
 800355c:	4603      	mov	r3, r0
 800355e:	461a      	mov	r2, r3
 8003560:	4b83      	ldr	r3, [pc, #524]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003562:	731a      	strb	r2, [r3, #12]
				pc_control.s = UART_RM25_getBits(data[8],1,1);
 8003564:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003566:	7a1b      	ldrb	r3, [r3, #8]
 8003568:	2201      	movs	r2, #1
 800356a:	2101      	movs	r1, #1
 800356c:	4618      	mov	r0, r3
 800356e:	f000 f977 	bl	8003860 <UART_RM25_getBits>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	4b7e      	ldr	r3, [pc, #504]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003578:	735a      	strb	r2, [r3, #13]
				pc_control.a = UART_RM25_getBits(data[8],2,1);
 800357a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800357c:	7a1b      	ldrb	r3, [r3, #8]
 800357e:	2201      	movs	r2, #1
 8003580:	2102      	movs	r1, #2
 8003582:	4618      	mov	r0, r3
 8003584:	f000 f96c 	bl	8003860 <UART_RM25_getBits>
 8003588:	4603      	mov	r3, r0
 800358a:	461a      	mov	r2, r3
 800358c:	4b78      	ldr	r3, [pc, #480]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800358e:	739a      	strb	r2, [r3, #14]
				pc_control.d = UART_RM25_getBits(data[8],3,1);
 8003590:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003592:	7a1b      	ldrb	r3, [r3, #8]
 8003594:	2201      	movs	r2, #1
 8003596:	2103      	movs	r1, #3
 8003598:	4618      	mov	r0, r3
 800359a:	f000 f961 	bl	8003860 <UART_RM25_getBits>
 800359e:	4603      	mov	r3, r0
 80035a0:	461a      	mov	r2, r3
 80035a2:	4b73      	ldr	r3, [pc, #460]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80035a4:	73da      	strb	r2, [r3, #15]
				pc_control.shift = UART_RM25_getBits(data[8],4,1);
 80035a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035a8:	7a1b      	ldrb	r3, [r3, #8]
 80035aa:	2201      	movs	r2, #1
 80035ac:	2104      	movs	r1, #4
 80035ae:	4618      	mov	r0, r3
 80035b0:	f000 f956 	bl	8003860 <UART_RM25_getBits>
 80035b4:	4603      	mov	r3, r0
 80035b6:	461a      	mov	r2, r3
 80035b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80035ba:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = UART_RM25_getBits(data[8],5,1);
 80035bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035be:	7a1b      	ldrb	r3, [r3, #8]
 80035c0:	2201      	movs	r2, #1
 80035c2:	2105      	movs	r1, #5
 80035c4:	4618      	mov	r0, r3
 80035c6:	f000 f94b 	bl	8003860 <UART_RM25_getBits>
 80035ca:	4603      	mov	r3, r0
 80035cc:	461a      	mov	r2, r3
 80035ce:	4b68      	ldr	r3, [pc, #416]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80035d0:	745a      	strb	r2, [r3, #17]
				pc_control.q = UART_RM25_getBits(data[8],6,1);
 80035d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035d4:	7a1b      	ldrb	r3, [r3, #8]
 80035d6:	2201      	movs	r2, #1
 80035d8:	2106      	movs	r1, #6
 80035da:	4618      	mov	r0, r3
 80035dc:	f000 f940 	bl	8003860 <UART_RM25_getBits>
 80035e0:	4603      	mov	r3, r0
 80035e2:	461a      	mov	r2, r3
 80035e4:	4b62      	ldr	r3, [pc, #392]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80035e6:	749a      	strb	r2, [r3, #18]
				pc_control.e = UART_RM25_getBits(data[8],7,1);
 80035e8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035ea:	7a1b      	ldrb	r3, [r3, #8]
 80035ec:	2201      	movs	r2, #1
 80035ee:	2107      	movs	r1, #7
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 f935 	bl	8003860 <UART_RM25_getBits>
 80035f6:	4603      	mov	r3, r0
 80035f8:	461a      	mov	r2, r3
 80035fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80035fc:	74da      	strb	r2, [r3, #19]
				pc_control.r = UART_RM25_getBits(data[9],0,1);
 80035fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003600:	7a5b      	ldrb	r3, [r3, #9]
 8003602:	2201      	movs	r2, #1
 8003604:	2100      	movs	r1, #0
 8003606:	4618      	mov	r0, r3
 8003608:	f000 f92a 	bl	8003860 <UART_RM25_getBits>
 800360c:	4603      	mov	r3, r0
 800360e:	461a      	mov	r2, r3
 8003610:	4b57      	ldr	r3, [pc, #348]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003612:	751a      	strb	r2, [r3, #20]
				pc_control.f = UART_RM25_getBits(data[9],1,1);
 8003614:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003616:	7a5b      	ldrb	r3, [r3, #9]
 8003618:	2201      	movs	r2, #1
 800361a:	2101      	movs	r1, #1
 800361c:	4618      	mov	r0, r3
 800361e:	f000 f91f 	bl	8003860 <UART_RM25_getBits>
 8003622:	4603      	mov	r3, r0
 8003624:	461a      	mov	r2, r3
 8003626:	4b52      	ldr	r3, [pc, #328]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003628:	755a      	strb	r2, [r3, #21]
				pc_control.g = UART_RM25_getBits(data[9],2,1);
 800362a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800362c:	7a5b      	ldrb	r3, [r3, #9]
 800362e:	2201      	movs	r2, #1
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f914 	bl	8003860 <UART_RM25_getBits>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	4b4c      	ldr	r3, [pc, #304]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800363e:	759a      	strb	r2, [r3, #22]
				pc_control.z = UART_RM25_getBits(data[9],3,1);
 8003640:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003642:	7a5b      	ldrb	r3, [r3, #9]
 8003644:	2201      	movs	r2, #1
 8003646:	2103      	movs	r1, #3
 8003648:	4618      	mov	r0, r3
 800364a:	f000 f909 	bl	8003860 <UART_RM25_getBits>
 800364e:	4603      	mov	r3, r0
 8003650:	461a      	mov	r2, r3
 8003652:	4b47      	ldr	r3, [pc, #284]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003654:	75da      	strb	r2, [r3, #23]
				pc_control.x = UART_RM25_getBits(data[9],4,1);
 8003656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003658:	7a5b      	ldrb	r3, [r3, #9]
 800365a:	2201      	movs	r2, #1
 800365c:	2104      	movs	r1, #4
 800365e:	4618      	mov	r0, r3
 8003660:	f000 f8fe 	bl	8003860 <UART_RM25_getBits>
 8003664:	4603      	mov	r3, r0
 8003666:	461a      	mov	r2, r3
 8003668:	4b41      	ldr	r3, [pc, #260]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800366a:	761a      	strb	r2, [r3, #24]
				pc_control.c = UART_RM25_getBits(data[9],5,1);
 800366c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800366e:	7a5b      	ldrb	r3, [r3, #9]
 8003670:	2201      	movs	r2, #1
 8003672:	2105      	movs	r1, #5
 8003674:	4618      	mov	r0, r3
 8003676:	f000 f8f3 	bl	8003860 <UART_RM25_getBits>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	4b3c      	ldr	r3, [pc, #240]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003680:	765a      	strb	r2, [r3, #25]
				pc_control.v = UART_RM25_getBits(data[9],6,1);
 8003682:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003684:	7a5b      	ldrb	r3, [r3, #9]
 8003686:	2201      	movs	r2, #1
 8003688:	2106      	movs	r1, #6
 800368a:	4618      	mov	r0, r3
 800368c:	f000 f8e8 	bl	8003860 <UART_RM25_getBits>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	4b36      	ldr	r3, [pc, #216]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003696:	769a      	strb	r2, [r3, #26]
				pc_control.b = UART_RM25_getBits(data[9],7,1);
 8003698:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800369a:	7a5b      	ldrb	r3, [r3, #9]
 800369c:	2201      	movs	r2, #1
 800369e:	2107      	movs	r1, #7
 80036a0:	4618      	mov	r0, r3
 80036a2:	f000 f8dd 	bl	8003860 <UART_RM25_getBits>
 80036a6:	4603      	mov	r3, r0
 80036a8:	461a      	mov	r2, r3
 80036aa:	4b31      	ldr	r3, [pc, #196]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036ac:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 80036ae:	4b30      	ldr	r3, [pc, #192]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036b0:	f9b3 c000 	ldrsh.w	ip, [r3]
 80036b4:	4b2e      	ldr	r3, [pc, #184]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036b6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80036ba:	4b2d      	ldr	r3, [pc, #180]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036bc:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 80036c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036c2:	f893 9006 	ldrb.w	r9, [r3, #6]
 80036c6:	4b2a      	ldr	r3, [pc, #168]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036c8:	79db      	ldrb	r3, [r3, #7]
 80036ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80036cc:	4b28      	ldr	r3, [pc, #160]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036ce:	7b1a      	ldrb	r2, [r3, #12]
 80036d0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80036d2:	4b27      	ldr	r3, [pc, #156]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036d4:	7b59      	ldrb	r1, [r3, #13]
 80036d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80036d8:	4b25      	ldr	r3, [pc, #148]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036da:	7b98      	ldrb	r0, [r3, #14]
 80036dc:	6238      	str	r0, [r7, #32]
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036e0:	7bdc      	ldrb	r4, [r3, #15]
 80036e2:	61fc      	str	r4, [r7, #28]
 80036e4:	4b22      	ldr	r3, [pc, #136]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036e6:	7c1d      	ldrb	r5, [r3, #16]
 80036e8:	61bd      	str	r5, [r7, #24]
 80036ea:	4b21      	ldr	r3, [pc, #132]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036ec:	7c5e      	ldrb	r6, [r3, #17]
 80036ee:	617e      	str	r6, [r7, #20]
 80036f0:	4b1f      	ldr	r3, [pc, #124]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036f2:	f893 b012 	ldrb.w	fp, [r3, #18]
 80036f6:	465b      	mov	r3, fp
 80036f8:	613b      	str	r3, [r7, #16]
 80036fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80036fc:	f893 b013 	ldrb.w	fp, [r3, #19]
 8003700:	465a      	mov	r2, fp
 8003702:	60fa      	str	r2, [r7, #12]
 8003704:	4b1a      	ldr	r3, [pc, #104]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003706:	f893 b014 	ldrb.w	fp, [r3, #20]
 800370a:	4659      	mov	r1, fp
 800370c:	60b9      	str	r1, [r7, #8]
 800370e:	4b18      	ldr	r3, [pc, #96]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003710:	7d5e      	ldrb	r6, [r3, #21]
 8003712:	4b17      	ldr	r3, [pc, #92]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003714:	7d9d      	ldrb	r5, [r3, #22]
 8003716:	4b16      	ldr	r3, [pc, #88]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003718:	7ddc      	ldrb	r4, [r3, #23]
 800371a:	4b15      	ldr	r3, [pc, #84]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800371c:	7e18      	ldrb	r0, [r3, #24]
 800371e:	4b14      	ldr	r3, [pc, #80]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003720:	7e59      	ldrb	r1, [r3, #25]
 8003722:	4b13      	ldr	r3, [pc, #76]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003724:	7e9a      	ldrb	r2, [r3, #26]
 8003726:	4b12      	ldr	r3, [pc, #72]	@ (8003770 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003728:	7edb      	ldrb	r3, [r3, #27]
 800372a:	9310      	str	r3, [sp, #64]	@ 0x40
 800372c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800372e:	910e      	str	r1, [sp, #56]	@ 0x38
 8003730:	900d      	str	r0, [sp, #52]	@ 0x34
 8003732:	940c      	str	r4, [sp, #48]	@ 0x30
 8003734:	950b      	str	r5, [sp, #44]	@ 0x2c
 8003736:	960a      	str	r6, [sp, #40]	@ 0x28
 8003738:	68b9      	ldr	r1, [r7, #8]
 800373a:	9109      	str	r1, [sp, #36]	@ 0x24
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	9208      	str	r2, [sp, #32]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	9307      	str	r3, [sp, #28]
 8003744:	697e      	ldr	r6, [r7, #20]
 8003746:	9606      	str	r6, [sp, #24]
 8003748:	69bd      	ldr	r5, [r7, #24]
 800374a:	9505      	str	r5, [sp, #20]
 800374c:	69fc      	ldr	r4, [r7, #28]
 800374e:	9404      	str	r4, [sp, #16]
 8003750:	6a38      	ldr	r0, [r7, #32]
 8003752:	9003      	str	r0, [sp, #12]
 8003754:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003756:	9102      	str	r1, [sp, #8]
 8003758:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800375a:	9201      	str	r2, [sp, #4]
 800375c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800375e:	9300      	str	r3, [sp, #0]
 8003760:	464b      	mov	r3, r9
 8003762:	4642      	mov	r2, r8
 8003764:	4671      	mov	r1, lr
 8003766:	4660      	mov	r0, ip
 8003768:	f7fe f986 	bl	8001a78 <PC_CONTROL_RxEventCallback>
				break;
 800376c:	e068      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
 800376e:	bf00      	nop
 8003770:	20000740 	.word	0x20000740
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 8003774:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003776:	781a      	ldrb	r2, [r3, #0]
 8003778:	4b35      	ldr	r3, [pc, #212]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800377a:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 800377c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800377e:	3301      	adds	r3, #1
 8003780:	881b      	ldrh	r3, [r3, #0]
 8003782:	b29a      	uxth	r2, r3
 8003784:	4b32      	ldr	r3, [pc, #200]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003786:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 8003788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800378a:	3303      	adds	r3, #3
 800378c:	881b      	ldrh	r3, [r3, #0]
 800378e:	b29a      	uxth	r2, r3
 8003790:	4b2f      	ldr	r3, [pc, #188]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003792:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 8003794:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003796:	3305      	adds	r3, #5
 8003798:	4a2d      	ldr	r2, [pc, #180]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800379a:	1d90      	adds	r0, r2, #6
 800379c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80037a0:	4602      	mov	r2, r0
 80037a2:	4619      	mov	r1, r3
 80037a4:	f8d1 c000 	ldr.w	ip, [r1]
 80037a8:	684e      	ldr	r6, [r1, #4]
 80037aa:	688d      	ldr	r5, [r1, #8]
 80037ac:	68c9      	ldr	r1, [r1, #12]
 80037ae:	f8c2 c000 	str.w	ip, [r2]
 80037b2:	6056      	str	r6, [r2, #4]
 80037b4:	6095      	str	r5, [r2, #8]
 80037b6:	60d1      	str	r1, [r2, #12]
 80037b8:	3310      	adds	r3, #16
 80037ba:	3010      	adds	r0, #16
 80037bc:	42a3      	cmp	r3, r4
 80037be:	d1ef      	bne.n	80037a0 <HAL_UARTEx_RxEventCallback+0xff4>
 80037c0:	4602      	mov	r2, r0
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 80037c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037c8:	3336      	adds	r3, #54	@ 0x36
 80037ca:	4a21      	ldr	r2, [pc, #132]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80037cc:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 80037d0:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 80037d4:	4602      	mov	r2, r0
 80037d6:	4619      	mov	r1, r3
 80037d8:	f8d1 c000 	ldr.w	ip, [r1]
 80037dc:	684e      	ldr	r6, [r1, #4]
 80037de:	688d      	ldr	r5, [r1, #8]
 80037e0:	68c9      	ldr	r1, [r1, #12]
 80037e2:	f8c2 c000 	str.w	ip, [r2]
 80037e6:	6056      	str	r6, [r2, #4]
 80037e8:	6095      	str	r5, [r2, #8]
 80037ea:	60d1      	str	r1, [r2, #12]
 80037ec:	3310      	adds	r3, #16
 80037ee:	3010      	adds	r0, #16
 80037f0:	42a3      	cmp	r3, r4
 80037f2:	d1ef      	bne.n	80037d4 <HAL_UARTEx_RxEventCallback+0x1028>
 80037f4:	4602      	mov	r2, r0
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 80037fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80037fc:	3367      	adds	r3, #103	@ 0x67
 80037fe:	881b      	ldrh	r3, [r3, #0]
 8003800:	b29a      	uxth	r2, r3
 8003802:	4b13      	ldr	r3, [pc, #76]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003804:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 8003808:	4b11      	ldr	r3, [pc, #68]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800380a:	7818      	ldrb	r0, [r3, #0]
 800380c:	4b10      	ldr	r3, [pc, #64]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800380e:	8859      	ldrh	r1, [r3, #2]
 8003810:	4b0f      	ldr	r3, [pc, #60]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003812:	889a      	ldrh	r2, [r3, #4]
 8003814:	4b0e      	ldr	r3, [pc, #56]	@ (8003850 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003816:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800381a:	9301      	str	r3, [sp, #4]
 800381c:	4b0d      	ldr	r3, [pc, #52]	@ (8003854 <HAL_UARTEx_RxEventCallback+0x10a8>)
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	4b0d      	ldr	r3, [pc, #52]	@ (8003858 <HAL_UARTEx_RxEventCallback+0x10ac>)
 8003822:	f000 f95f 	bl	8003ae4 <MINIMAP_DATA_RxEventCallback>
				break;
 8003826:	e00b      	b.n	8003840 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 8003828:	4a0c      	ldr	r2, [pc, #48]	@ (800385c <HAL_UARTEx_RxEventCallback+0x10b0>)
 800382a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800382c:	4610      	mov	r0, r2
 800382e:	4619      	mov	r1, r3
 8003830:	2380      	movs	r3, #128	@ 0x80
 8003832:	461a      	mov	r2, r3
 8003834:	f00a fcc8 	bl	800e1c8 <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 8003838:	4808      	ldr	r0, [pc, #32]	@ (800385c <HAL_UARTEx_RxEventCallback+0x10b0>)
 800383a:	f000 f963 	bl	8003b04 <CUSTOM_MESSAGE_RxEventCallback>
				break;
 800383e:	bf00      	nop
 8003840:	46d5      	mov	sp, sl
 8003842:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}
}
 8003846:	bf00      	nop
 8003848:	3774      	adds	r7, #116	@ 0x74
 800384a:	46bd      	mov	sp, r7
 800384c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003850:	200006d4 	.word	0x200006d4
 8003854:	2000070b 	.word	0x2000070b
 8003858:	200006da 	.word	0x200006da
 800385c:	2000077c 	.word	0x2000077c

08003860 <UART_RM25_getBits>:
		seq=0;
	}
}


uint8_t UART_RM25_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	4603      	mov	r3, r0
 8003868:	71fb      	strb	r3, [r7, #7]
 800386a:	460b      	mov	r3, r1
 800386c:	71bb      	strb	r3, [r7, #6]
 800386e:	4613      	mov	r3, r2
 8003870:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8003876:	2300      	movs	r3, #0
 8003878:	73bb      	strb	r3, [r7, #14]
 800387a:	e013      	b.n	80038a4 <UART_RM25_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 800387c:	79fa      	ldrb	r2, [r7, #7]
 800387e:	79b9      	ldrb	r1, [r7, #6]
 8003880:	7bbb      	ldrb	r3, [r7, #14]
 8003882:	440b      	add	r3, r1
 8003884:	fa42 f303 	asr.w	r3, r2, r3
 8003888:	f003 0201 	and.w	r2, r3, #1
 800388c:	7bbb      	ldrb	r3, [r7, #14]
 800388e:	fa02 f303 	lsl.w	r3, r2, r3
 8003892:	b25a      	sxtb	r2, r3
 8003894:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003898:	4313      	orrs	r3, r2
 800389a:	b25b      	sxtb	r3, r3
 800389c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800389e:	7bbb      	ldrb	r3, [r7, #14]
 80038a0:	3301      	adds	r3, #1
 80038a2:	73bb      	strb	r3, [r7, #14]
 80038a4:	7bba      	ldrb	r2, [r7, #14]
 80038a6:	797b      	ldrb	r3, [r7, #5]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d3e7      	bcc.n	800387c <UART_RM25_getBits+0x1c>
	}
	return result;
 80038ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3714      	adds	r7, #20
 80038b2:	46bd      	mov	sp, r7
 80038b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b8:	4770      	bx	lr

080038ba <GAME_RESULT_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
	//NOTE: This function should not be modified
}

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 80038ba:	b480      	push	{r7}
 80038bc:	b083      	sub	sp, #12
 80038be:	af00      	add	r7, sp, #0
 80038c0:	4603      	mov	r3, r0
 80038c2:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ce:	4770      	bx	lr

080038d0 <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 80038d0:	b490      	push	{r4, r7}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	4604      	mov	r4, r0
 80038d8:	4608      	mov	r0, r1
 80038da:	4611      	mov	r1, r2
 80038dc:	461a      	mov	r2, r3
 80038de:	4623      	mov	r3, r4
 80038e0:	80fb      	strh	r3, [r7, #6]
 80038e2:	4603      	mov	r3, r0
 80038e4:	80bb      	strh	r3, [r7, #4]
 80038e6:	460b      	mov	r3, r1
 80038e8:	807b      	strh	r3, [r7, #2]
 80038ea:	4613      	mov	r3, r2
 80038ec:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 80038ee:	bf00      	nop
 80038f0:	3708      	adds	r7, #8
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bc90      	pop	{r4, r7}
 80038f6:	4770      	bx	lr

080038f8 <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 80038f8:	b490      	push	{r4, r7}
 80038fa:	b082      	sub	sp, #8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4604      	mov	r4, r0
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4623      	mov	r3, r4
 8003908:	71fb      	strb	r3, [r7, #7]
 800390a:	4603      	mov	r3, r0
 800390c:	71bb      	strb	r3, [r7, #6]
 800390e:	460b      	mov	r3, r1
 8003910:	717b      	strb	r3, [r7, #5]
 8003912:	4613      	mov	r3, r2
 8003914:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8003916:	bf00      	nop
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bc90      	pop	{r4, r7}
 800391e:	4770      	bx	lr

08003920 <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
 800392a:	460b      	mov	r3, r1
 800392c:	71bb      	strb	r3, [r7, #6]
 800392e:	4613      	mov	r3, r2
 8003930:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 800393e:	b490      	push	{r4, r7}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4604      	mov	r4, r0
 8003946:	4608      	mov	r0, r1
 8003948:	4611      	mov	r1, r2
 800394a:	461a      	mov	r2, r3
 800394c:	4623      	mov	r3, r4
 800394e:	71fb      	strb	r3, [r7, #7]
 8003950:	4603      	mov	r3, r0
 8003952:	71bb      	strb	r3, [r7, #6]
 8003954:	460b      	mov	r3, r1
 8003956:	717b      	strb	r3, [r7, #5]
 8003958:	4613      	mov	r3, r2
 800395a:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bc90      	pop	{r4, r7}
 8003964:	4770      	bx	lr

08003966 <ROBOT_POSITION_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
	//NOTE: This function should not be modified
}

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 8003966:	b480      	push	{r7}
 8003968:	b085      	sub	sp, #20
 800396a:	af00      	add	r7, sp, #0
 800396c:	ed87 0a03 	vstr	s0, [r7, #12]
 8003970:	edc7 0a02 	vstr	s1, [r7, #8]
 8003974:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 8003978:	bf00      	nop
 800397a:	3714      	adds	r7, #20
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr

08003984 <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 8003984:	b490      	push	{r4, r7}
 8003986:	b082      	sub	sp, #8
 8003988:	af00      	add	r7, sp, #0
 800398a:	4604      	mov	r4, r0
 800398c:	4608      	mov	r0, r1
 800398e:	4611      	mov	r1, r2
 8003990:	461a      	mov	r2, r3
 8003992:	4623      	mov	r3, r4
 8003994:	71fb      	strb	r3, [r7, #7]
 8003996:	4603      	mov	r3, r0
 8003998:	71bb      	strb	r3, [r7, #6]
 800399a:	460b      	mov	r3, r1
 800399c:	717b      	strb	r3, [r7, #5]
 800399e:	4613      	mov	r3, r2
 80039a0:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bc90      	pop	{r4, r7}
 80039aa:	4770      	bx	lr

080039ac <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 80039ac:	b480      	push	{r7}
 80039ae:	b083      	sub	sp, #12
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	4603      	mov	r3, r0
 80039b4:	460a      	mov	r2, r1
 80039b6:	71fb      	strb	r3, [r7, #7]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 80039bc:	bf00      	nop
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
	//NOTE: This function should not be modified
}

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	4603      	mov	r3, r0
 80039d0:	80fb      	strh	r3, [r7, #6]
 80039d2:	460b      	mov	r3, r1
 80039d4:	80bb      	strh	r3, [r7, #4]
 80039d6:	4613      	mov	r3, r2
 80039d8:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	4603      	mov	r3, r0
 8003a02:	71fb      	strb	r3, [r7, #7]
 8003a04:	460b      	mov	r3, r1
 8003a06:	80bb      	strh	r3, [r7, #4]
 8003a08:	4613      	mov	r3, r2
 8003a0a:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 8003a18:	b480      	push	{r7}
 8003a1a:	b08b      	sub	sp, #44	@ 0x2c
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003a22:	edc7 0a08 	vstr	s1, [r7, #32]
 8003a26:	ed87 1a07 	vstr	s2, [r7, #28]
 8003a2a:	edc7 1a06 	vstr	s3, [r7, #24]
 8003a2e:	ed87 2a05 	vstr	s4, [r7, #20]
 8003a32:	edc7 2a04 	vstr	s5, [r7, #16]
 8003a36:	ed87 3a03 	vstr	s6, [r7, #12]
 8003a3a:	edc7 3a02 	vstr	s7, [r7, #8]
 8003a3e:	ed87 4a01 	vstr	s8, [r7, #4]
 8003a42:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 8003a46:	bf00      	nop
 8003a48:	372c      	adds	r7, #44	@ 0x2c
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a50:	4770      	bx	lr

08003a52 <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 8003a52:	b490      	push	{r4, r7}
 8003a54:	b082      	sub	sp, #8
 8003a56:	af00      	add	r7, sp, #0
 8003a58:	4604      	mov	r4, r0
 8003a5a:	4608      	mov	r0, r1
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	461a      	mov	r2, r3
 8003a60:	4623      	mov	r3, r4
 8003a62:	71fb      	strb	r3, [r7, #7]
 8003a64:	4603      	mov	r3, r0
 8003a66:	71bb      	strb	r3, [r7, #6]
 8003a68:	460b      	mov	r3, r1
 8003a6a:	717b      	strb	r3, [r7, #5]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc90      	pop	{r4, r7}
 8003a78:	4770      	bx	lr

08003a7a <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 8003a7a:	b490      	push	{r4, r7}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	4604      	mov	r4, r0
 8003a82:	4608      	mov	r0, r1
 8003a84:	4611      	mov	r1, r2
 8003a86:	461a      	mov	r2, r3
 8003a88:	4623      	mov	r3, r4
 8003a8a:	80fb      	strh	r3, [r7, #6]
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	717b      	strb	r3, [r7, #5]
 8003a90:	460b      	mov	r3, r1
 8003a92:	713b      	strb	r3, [r7, #4]
 8003a94:	4613      	mov	r3, r2
 8003a96:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 8003a98:	bf00      	nop
 8003a9a:	3708      	adds	r7, #8
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bc90      	pop	{r4, r7}
 8003aa0:	4770      	bx	lr

08003aa2 <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 8003aa2:	b480      	push	{r7}
 8003aa4:	b083      	sub	sp, #12
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	460a      	mov	r2, r1
 8003aac:	71fb      	strb	r3, [r7, #7]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <MINIMAP_COMMAND_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 8003abe:	b480      	push	{r7}
 8003ac0:	b085      	sub	sp, #20
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	ed87 0a03 	vstr	s0, [r7, #12]
 8003ac8:	edc7 0a02 	vstr	s1, [r7, #8]
 8003acc:	4603      	mov	r3, r0
 8003ace:	71fb      	strb	r3, [r7, #7]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	71bb      	strb	r3, [r7, #6]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8003ad8:	bf00      	nop
 8003ada:	3714      	adds	r7, #20
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr

08003ae4 <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	4603      	mov	r3, r0
 8003aee:	73fb      	strb	r3, [r7, #15]
 8003af0:	460b      	mov	r3, r1
 8003af2:	81bb      	strh	r3, [r7, #12]
 8003af4:	4613      	mov	r3, r2
 8003af6:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 8003af8:	bf00      	nop
 8003afa:	3714      	adds	r7, #20
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 8003b04:	b480      	push	{r7}
 8003b06:	b083      	sub	sp, #12
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 8003b0c:	bf00      	nop
 8003b0e:	370c      	adds	r7, #12
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <UART_RxEventCallback_RM25Passthrough>:

__weak void UART_RxEventCallback_RM25Passthrough(UART_HandleTypeDef *huart,uint8_t RxBuff[256]){
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]

}
 8003b22:	bf00      	nop
 8003b24:	370c      	adds	r7, #12
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
	...

08003b30 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	4603      	mov	r3, r0
 8003b38:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 8003b3a:	4a04      	ldr	r2, [pc, #16]	@ (8003b4c <imu_pwm_set+0x1c>)
 8003b3c:	88fb      	ldrh	r3, [r7, #6]
 8003b3e:	6353      	str	r3, [r2, #52]	@ 0x34

}
 8003b40:	bf00      	nop
 8003b42:	370c      	adds	r7, #12
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr
 8003b4c:	40014400 	.word	0x40014400

08003b50 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
    osDelay(500);
 8003b58:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003b5c:	f006 feb2 	bl	800a8c4 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 8003b60:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003c04 <imu_temp_control_task+0xb4>
 8003b64:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8003c08 <imu_temp_control_task+0xb8>
 8003b68:	4a28      	ldr	r2, [pc, #160]	@ (8003c0c <imu_temp_control_task+0xbc>)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	4828      	ldr	r0, [pc, #160]	@ (8003c10 <imu_temp_control_task+0xc0>)
 8003b6e:	f000 fef3 	bl	8004958 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003b72:	4b28      	ldr	r3, [pc, #160]	@ (8003c14 <imu_temp_control_task+0xc4>)
 8003b74:	2210      	movs	r2, #16
 8003b76:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003b78:	4826      	ldr	r0, [pc, #152]	@ (8003c14 <imu_temp_control_task+0xc4>)
 8003b7a:	f004 fa3e 	bl	8007ffa <HAL_SPI_Init>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 8003b84:	f000 fee2 	bl	800494c <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 8003b88:	2000      	movs	r0, #0
 8003b8a:	f007 ffb9 	bl	800bb00 <pcTaskGetName>
 8003b8e:	4603      	mov	r3, r0
 8003b90:	4618      	mov	r0, r3
 8003b92:	f008 f849 	bl	800bc28 <xTaskGetHandle>
 8003b96:	4603      	mov	r3, r0
 8003b98:	4a1f      	ldr	r2, [pc, #124]	@ (8003c18 <imu_temp_control_task+0xc8>)
 8003b9a:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 8003b9c:	4b1f      	ldr	r3, [pc, #124]	@ (8003c1c <imu_temp_control_task+0xcc>)
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8003ba2:	bf00      	nop
 8003ba4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f008 fc69 	bl	800c480 <ulTaskNotifyTake>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d1f7      	bne.n	8003ba4 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8003bb4:	f7fd fc12 	bl	80013dc <IMU_get_temp>
 8003bb8:	eef0 7a40 	vmov.f32	s15, s0
 8003bbc:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8003c20 <imu_temp_control_task+0xd0>
 8003bc0:	eeb0 0a67 	vmov.f32	s0, s15
 8003bc4:	4812      	ldr	r0, [pc, #72]	@ (8003c10 <imu_temp_control_task+0xc0>)
 8003bc6:	f000 ff1e 	bl	8004a06 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 8003bca:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <imu_temp_control_task+0xc0>)
 8003bcc:	edd3 7a08 	vldr	s15, [r3, #32]
 8003bd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	d503      	bpl.n	8003be2 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 8003bda:	4b0d      	ldr	r3, [pc, #52]	@ (8003c10 <imu_temp_control_task+0xc0>)
 8003bdc:	f04f 0200 	mov.w	r2, #0
 8003be0:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8003be2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c10 <imu_temp_control_task+0xc0>)
 8003be4:	edd3 7a08 	vldr	s15, [r3, #32]
 8003be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bec:	ee17 3a90 	vmov	r3, s15
 8003bf0:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8003bf2:	89fb      	ldrh	r3, [r7, #14]
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff9b 	bl	8003b30 <imu_pwm_set>
        osDelay(5);
 8003bfa:	2005      	movs	r0, #5
 8003bfc:	f006 fe62 	bl	800a8c4 <osDelay>
    {
 8003c00:	e7cf      	b.n	8003ba2 <imu_temp_control_task+0x52>
 8003c02:	bf00      	nop
 8003c04:	45898000 	.word	0x45898000
 8003c08:	458ca000 	.word	0x458ca000
 8003c0c:	080105d8 	.word	0x080105d8
 8003c10:	2000090c 	.word	0x2000090c
 8003c14:	200009fc 	.word	0x200009fc
 8003c18:	20000904 	.word	0x20000904
 8003c1c:	20000908 	.word	0x20000908
 8003c20:	42200000 	.word	0x42200000

08003c24 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 8003c2e:	4b12      	ldr	r3, [pc, #72]	@ (8003c78 <HAL_GPIO_EXTI_Callback+0x54>)
 8003c30:	881b      	ldrh	r3, [r3, #0]
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d11b      	bne.n	8003c70 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 8003c38:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <HAL_GPIO_EXTI_Callback+0x58>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d016      	beq.n	8003c70 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8003c42:	f008 fb8f 	bl	800c364 <xTaskGetSchedulerState>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d011      	beq.n	8003c70 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 8003c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8003c80 <HAL_GPIO_EXTI_Callback+0x5c>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	490c      	ldr	r1, [pc, #48]	@ (8003c84 <HAL_GPIO_EXTI_Callback+0x60>)
 8003c52:	4618      	mov	r0, r3
 8003c54:	f008 fc60 	bl	800c518 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003c58:	4b0a      	ldr	r3, [pc, #40]	@ (8003c84 <HAL_GPIO_EXTI_Callback+0x60>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d007      	beq.n	8003c70 <HAL_GPIO_EXTI_Callback+0x4c>
 8003c60:	4b09      	ldr	r3, [pc, #36]	@ (8003c88 <HAL_GPIO_EXTI_Callback+0x64>)
 8003c62:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	f3bf 8f4f 	dsb	sy
 8003c6c:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 8003c70:	bf00      	nop
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	2000000e 	.word	0x2000000e
 8003c7c:	20000908 	.word	0x20000908
 8003c80:	20000904 	.word	0x20000904
 8003c84:	20000954 	.word	0x20000954
 8003c88:	e000ed04 	.word	0xe000ed04

08003c8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003c90:	f001 fe36 	bl	8005900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003c94:	f000 f84c 	bl	8003d30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003c98:	f000 fcbe 	bl	8004618 <MX_GPIO_Init>
  MX_DMA_Init();
 8003c9c:	f000 fc7e 	bl	800459c <MX_DMA_Init>
  MX_CAN1_Init();
 8003ca0:	f000 f8b2 	bl	8003e08 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003ca4:	f000 f8e6 	bl	8003e74 <MX_CAN2_Init>
  MX_SPI1_Init();
 8003ca8:	f000 f948 	bl	8003f3c <MX_SPI1_Init>
  MX_TIM4_Init();
 8003cac:	f000 fa24 	bl	80040f8 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003cb0:	f000 fbf4 	bl	800449c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003cb4:	f000 fc48 	bl	8004548 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003cb8:	f000 f976 	bl	8003fa8 <MX_TIM1_Init>
  MX_TIM8_Init();
 8003cbc:	f000 fb04 	bl	80042c8 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8003cc0:	f000 fc16 	bl	80044f0 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003cc4:	f000 fb9c 	bl	8004400 <MX_TIM10_Init>
  MX_I2C3_Init();
 8003cc8:	f000 f90a 	bl	8003ee0 <MX_I2C3_Init>
  MX_TIM5_Init();
 8003ccc:	f000 fa8c 	bl	80041e8 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003cd0:	f006 fd1c 	bl	800a70c <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of FlowManager */
  FlowManagerHandle = osThreadNew(StartFlowManager, NULL, &FlowManager_attributes);
 8003cd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003d0c <main+0x80>)
 8003cd6:	2100      	movs	r1, #0
 8003cd8:	480d      	ldr	r0, [pc, #52]	@ (8003d10 <main+0x84>)
 8003cda:	f006 fd61 	bl	800a7a0 <osThreadNew>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a0c      	ldr	r2, [pc, #48]	@ (8003d14 <main+0x88>)
 8003ce2:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8003ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d18 <main+0x8c>)
 8003ce6:	2100      	movs	r1, #0
 8003ce8:	480c      	ldr	r0, [pc, #48]	@ (8003d1c <main+0x90>)
 8003cea:	f006 fd59 	bl	800a7a0 <osThreadNew>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	4a0b      	ldr	r2, [pc, #44]	@ (8003d20 <main+0x94>)
 8003cf2:	6013      	str	r3, [r2, #0]

  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(StartChassisTask, NULL, &ChassisTask_attributes);
 8003cf4:	4a0b      	ldr	r2, [pc, #44]	@ (8003d24 <main+0x98>)
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	480b      	ldr	r0, [pc, #44]	@ (8003d28 <main+0x9c>)
 8003cfa:	f006 fd51 	bl	800a7a0 <osThreadNew>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4a0a      	ldr	r2, [pc, #40]	@ (8003d2c <main+0xa0>)
 8003d02:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003d04:	f006 fd26 	bl	800a754 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003d08:	bf00      	nop
 8003d0a:	e7fd      	b.n	8003d08 <main+0x7c>
 8003d0c:	080105e4 	.word	0x080105e4
 8003d10:	08004825 	.word	0x08004825
 8003d14:	20000db4 	.word	0x20000db4
 8003d18:	08010608 	.word	0x08010608
 8003d1c:	08003b51 	.word	0x08003b51
 8003d20:	20000db8 	.word	0x20000db8
 8003d24:	0801062c 	.word	0x0801062c
 8003d28:	08004899 	.word	0x08004899
 8003d2c:	20000dbc 	.word	0x20000dbc

08003d30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b094      	sub	sp, #80	@ 0x50
 8003d34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003d36:	f107 0320 	add.w	r3, r7, #32
 8003d3a:	2230      	movs	r2, #48	@ 0x30
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	4618      	mov	r0, r3
 8003d40:	f00a f9aa 	bl	800e098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003d44:	f107 030c 	add.w	r3, r7, #12
 8003d48:	2200      	movs	r2, #0
 8003d4a:	601a      	str	r2, [r3, #0]
 8003d4c:	605a      	str	r2, [r3, #4]
 8003d4e:	609a      	str	r2, [r3, #8]
 8003d50:	60da      	str	r2, [r3, #12]
 8003d52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d54:	2300      	movs	r3, #0
 8003d56:	60bb      	str	r3, [r7, #8]
 8003d58:	4b29      	ldr	r3, [pc, #164]	@ (8003e00 <SystemClock_Config+0xd0>)
 8003d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d5c:	4a28      	ldr	r2, [pc, #160]	@ (8003e00 <SystemClock_Config+0xd0>)
 8003d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d62:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d64:	4b26      	ldr	r3, [pc, #152]	@ (8003e00 <SystemClock_Config+0xd0>)
 8003d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d6c:	60bb      	str	r3, [r7, #8]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003d70:	2300      	movs	r3, #0
 8003d72:	607b      	str	r3, [r7, #4]
 8003d74:	4b23      	ldr	r3, [pc, #140]	@ (8003e04 <SystemClock_Config+0xd4>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a22      	ldr	r2, [pc, #136]	@ (8003e04 <SystemClock_Config+0xd4>)
 8003d7a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b20      	ldr	r3, [pc, #128]	@ (8003e04 <SystemClock_Config+0xd4>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d88:	607b      	str	r3, [r7, #4]
 8003d8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003d90:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d94:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003d96:	2302      	movs	r3, #2
 8003d98:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003d9a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003d9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003da0:	2306      	movs	r3, #6
 8003da2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003da4:	23a8      	movs	r3, #168	@ 0xa8
 8003da6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003da8:	2302      	movs	r3, #2
 8003daa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003dac:	2304      	movs	r3, #4
 8003dae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003db0:	f107 0320 	add.w	r3, r7, #32
 8003db4:	4618      	mov	r0, r3
 8003db6:	f003 fca1 	bl	80076fc <HAL_RCC_OscConfig>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003dc0:	f000 fdc4 	bl	800494c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003dc4:	230f      	movs	r3, #15
 8003dc6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003dc8:	2302      	movs	r3, #2
 8003dca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003dd0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003dd4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003dd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dda:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003ddc:	f107 030c 	add.w	r3, r7, #12
 8003de0:	2105      	movs	r1, #5
 8003de2:	4618      	mov	r0, r3
 8003de4:	f003 ff02 	bl	8007bec <HAL_RCC_ClockConfig>
 8003de8:	4603      	mov	r3, r0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d001      	beq.n	8003df2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003dee:	f000 fdad 	bl	800494c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003df2:	f003 ffe1 	bl	8007db8 <HAL_RCC_EnableCSS>
}
 8003df6:	bf00      	nop
 8003df8:	3750      	adds	r7, #80	@ 0x50
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40007000 	.word	0x40007000

08003e08 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003e0c:	4b17      	ldr	r3, [pc, #92]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e0e:	4a18      	ldr	r2, [pc, #96]	@ (8003e70 <MX_CAN1_Init+0x68>)
 8003e10:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8003e12:	4b16      	ldr	r3, [pc, #88]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e14:	2203      	movs	r2, #3
 8003e16:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003e18:	4b14      	ldr	r3, [pc, #80]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003e1e:	4b13      	ldr	r3, [pc, #76]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e20:	2200      	movs	r2, #0
 8003e22:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003e24:	4b11      	ldr	r3, [pc, #68]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e26:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003e2a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003e2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e2e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003e32:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003e34:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e36:	2200      	movs	r2, #0
 8003e38:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003e40:	4b0a      	ldr	r3, [pc, #40]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e42:	2200      	movs	r2, #0
 8003e44:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003e46:	4b09      	ldr	r3, [pc, #36]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e48:	2200      	movs	r2, #0
 8003e4a:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003e4c:	4b07      	ldr	r3, [pc, #28]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e4e:	2200      	movs	r2, #0
 8003e50:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003e52:	4b06      	ldr	r3, [pc, #24]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e54:	2200      	movs	r2, #0
 8003e56:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003e58:	4804      	ldr	r0, [pc, #16]	@ (8003e6c <MX_CAN1_Init+0x64>)
 8003e5a:	f001 fdc3 	bl	80059e4 <HAL_CAN_Init>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003e64:	f000 fd72 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003e68:	bf00      	nop
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	20000958 	.word	0x20000958
 8003e70:	40006400 	.word	0x40006400

08003e74 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003e78:	4b17      	ldr	r3, [pc, #92]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003e7a:	4a18      	ldr	r2, [pc, #96]	@ (8003edc <MX_CAN2_Init+0x68>)
 8003e7c:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8003e7e:	4b16      	ldr	r3, [pc, #88]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003e80:	2203      	movs	r2, #3
 8003e82:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003e84:	4b14      	ldr	r3, [pc, #80]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003e86:	2200      	movs	r2, #0
 8003e88:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003e8a:	4b13      	ldr	r3, [pc, #76]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003e90:	4b11      	ldr	r3, [pc, #68]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003e92:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003e96:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003e98:	4b0f      	ldr	r3, [pc, #60]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003e9a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003e9e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003ea0:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003eac:	4b0a      	ldr	r3, [pc, #40]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003eae:	2200      	movs	r2, #0
 8003eb0:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003eb2:	4b09      	ldr	r3, [pc, #36]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003eb8:	4b07      	ldr	r3, [pc, #28]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003eba:	2200      	movs	r2, #0
 8003ebc:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003ebe:	4b06      	ldr	r3, [pc, #24]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003ec4:	4804      	ldr	r0, [pc, #16]	@ (8003ed8 <MX_CAN2_Init+0x64>)
 8003ec6:	f001 fd8d 	bl	80059e4 <HAL_CAN_Init>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d001      	beq.n	8003ed4 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003ed0:	f000 fd3c 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003ed4:	bf00      	nop
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	20000980 	.word	0x20000980
 8003edc:	40006800 	.word	0x40006800

08003ee0 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003ee4:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003ee6:	4a13      	ldr	r2, [pc, #76]	@ (8003f34 <MX_I2C3_Init+0x54>)
 8003ee8:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003eea:	4b11      	ldr	r3, [pc, #68]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003eec:	4a12      	ldr	r2, [pc, #72]	@ (8003f38 <MX_I2C3_Init+0x58>)
 8003eee:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003ef0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003ef6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003ef8:	2200      	movs	r2, #0
 8003efa:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003efc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003efe:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003f02:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003f04:	4b0a      	ldr	r3, [pc, #40]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003f06:	2200      	movs	r2, #0
 8003f08:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003f0a:	4b09      	ldr	r3, [pc, #36]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003f10:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003f16:	4b06      	ldr	r3, [pc, #24]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003f18:	2200      	movs	r2, #0
 8003f1a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003f1c:	4804      	ldr	r0, [pc, #16]	@ (8003f30 <MX_I2C3_Init+0x50>)
 8003f1e:	f003 faa9 	bl	8007474 <HAL_I2C_Init>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003f28:	f000 fd10 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003f2c:	bf00      	nop
 8003f2e:	bd80      	pop	{r7, pc}
 8003f30:	200009a8 	.word	0x200009a8
 8003f34:	40005c00 	.word	0x40005c00
 8003f38:	00061a80 	.word	0x00061a80

08003f3c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003f40:	4b17      	ldr	r3, [pc, #92]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f42:	4a18      	ldr	r2, [pc, #96]	@ (8003fa4 <MX_SPI1_Init+0x68>)
 8003f44:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003f46:	4b16      	ldr	r3, [pc, #88]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f48:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f4c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003f4e:	4b14      	ldr	r3, [pc, #80]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f50:	2200      	movs	r2, #0
 8003f52:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003f54:	4b12      	ldr	r3, [pc, #72]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f56:	2200      	movs	r2, #0
 8003f58:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003f5a:	4b11      	ldr	r3, [pc, #68]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003f60:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f62:	2201      	movs	r2, #1
 8003f64:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003f66:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f6c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f70:	2238      	movs	r2, #56	@ 0x38
 8003f72:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003f74:	4b0a      	ldr	r3, [pc, #40]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003f7a:	4b09      	ldr	r3, [pc, #36]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f80:	4b07      	ldr	r3, [pc, #28]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003f86:	4b06      	ldr	r3, [pc, #24]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f88:	220a      	movs	r2, #10
 8003f8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003f8c:	4804      	ldr	r0, [pc, #16]	@ (8003fa0 <MX_SPI1_Init+0x64>)
 8003f8e:	f004 f834 	bl	8007ffa <HAL_SPI_Init>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d001      	beq.n	8003f9c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003f98:	f000 fcd8 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003f9c:	bf00      	nop
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	200009fc 	.word	0x200009fc
 8003fa4:	40013000 	.word	0x40013000

08003fa8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b092      	sub	sp, #72	@ 0x48
 8003fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003fae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
 8003fb6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003fb8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	601a      	str	r2, [r3, #0]
 8003fc0:	605a      	str	r2, [r3, #4]
 8003fc2:	609a      	str	r2, [r3, #8]
 8003fc4:	60da      	str	r2, [r3, #12]
 8003fc6:	611a      	str	r2, [r3, #16]
 8003fc8:	615a      	str	r2, [r3, #20]
 8003fca:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003fcc:	1d3b      	adds	r3, r7, #4
 8003fce:	2220      	movs	r2, #32
 8003fd0:	2100      	movs	r1, #0
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f00a f860 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003fd8:	4b45      	ldr	r3, [pc, #276]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8003fda:	4a46      	ldr	r2, [pc, #280]	@ (80040f4 <MX_TIM1_Init+0x14c>)
 8003fdc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8003fde:	4b44      	ldr	r3, [pc, #272]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8003fe0:	2253      	movs	r2, #83	@ 0x53
 8003fe2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003fe4:	4b42      	ldr	r3, [pc, #264]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003fea:	4b41      	ldr	r3, [pc, #260]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8003fec:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003ff0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ff2:	4b3f      	ldr	r3, [pc, #252]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003ff8:	4b3d      	ldr	r3, [pc, #244]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ffe:	4b3c      	ldr	r3, [pc, #240]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8004000:	2200      	movs	r2, #0
 8004002:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8004004:	483a      	ldr	r0, [pc, #232]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8004006:	f004 fb56 	bl	80086b6 <HAL_TIM_PWM_Init>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d001      	beq.n	8004014 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8004010:	f000 fc9c 	bl	800494c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004014:	2300      	movs	r3, #0
 8004016:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004018:	2300      	movs	r3, #0
 800401a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800401c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004020:	4619      	mov	r1, r3
 8004022:	4833      	ldr	r0, [pc, #204]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8004024:	f005 f810 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 8004028:	4603      	mov	r3, r0
 800402a:	2b00      	cmp	r3, #0
 800402c:	d001      	beq.n	8004032 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800402e:	f000 fc8d 	bl	800494c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004032:	2360      	movs	r3, #96	@ 0x60
 8004034:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004036:	2300      	movs	r3, #0
 8004038:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800403a:	2300      	movs	r3, #0
 800403c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800403e:	2300      	movs	r3, #0
 8004040:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004042:	2300      	movs	r3, #0
 8004044:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004046:	2300      	movs	r3, #0
 8004048:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800404a:	2300      	movs	r3, #0
 800404c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800404e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004052:	2200      	movs	r2, #0
 8004054:	4619      	mov	r1, r3
 8004056:	4826      	ldr	r0, [pc, #152]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8004058:	f004 fb7c 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 800405c:	4603      	mov	r3, r0
 800405e:	2b00      	cmp	r3, #0
 8004060:	d001      	beq.n	8004066 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8004062:	f000 fc73 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004066:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800406a:	2204      	movs	r2, #4
 800406c:	4619      	mov	r1, r3
 800406e:	4820      	ldr	r0, [pc, #128]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8004070:	f004 fb70 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800407a:	f000 fc67 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800407e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004082:	2208      	movs	r2, #8
 8004084:	4619      	mov	r1, r3
 8004086:	481a      	ldr	r0, [pc, #104]	@ (80040f0 <MX_TIM1_Init+0x148>)
 8004088:	f004 fb64 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8004092:	f000 fc5b 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8004096:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800409a:	220c      	movs	r2, #12
 800409c:	4619      	mov	r1, r3
 800409e:	4814      	ldr	r0, [pc, #80]	@ (80040f0 <MX_TIM1_Init+0x148>)
 80040a0:	f004 fb58 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d001      	beq.n	80040ae <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 80040aa:	f000 fc4f 	bl	800494c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80040ae:	2300      	movs	r3, #0
 80040b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80040b2:	2300      	movs	r3, #0
 80040b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80040b6:	2300      	movs	r3, #0
 80040b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80040ba:	2300      	movs	r3, #0
 80040bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80040be:	2300      	movs	r3, #0
 80040c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80040c2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80040c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80040c8:	2300      	movs	r3, #0
 80040ca:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80040cc:	1d3b      	adds	r3, r7, #4
 80040ce:	4619      	mov	r1, r3
 80040d0:	4807      	ldr	r0, [pc, #28]	@ (80040f0 <MX_TIM1_Init+0x148>)
 80040d2:	f005 f835 	bl	8009140 <HAL_TIMEx_ConfigBreakDeadTime>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d001      	beq.n	80040e0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 80040dc:	f000 fc36 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80040e0:	4803      	ldr	r0, [pc, #12]	@ (80040f0 <MX_TIM1_Init+0x148>)
 80040e2:	f001 f80d 	bl	8005100 <HAL_TIM_MspPostInit>

}
 80040e6:	bf00      	nop
 80040e8:	3748      	adds	r7, #72	@ 0x48
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	20000a54 	.word	0x20000a54
 80040f4:	40010000 	.word	0x40010000

080040f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	@ 0x38
 80040fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80040fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004102:	2200      	movs	r2, #0
 8004104:	601a      	str	r2, [r3, #0]
 8004106:	605a      	str	r2, [r3, #4]
 8004108:	609a      	str	r2, [r3, #8]
 800410a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800410c:	f107 0320 	add.w	r3, r7, #32
 8004110:	2200      	movs	r2, #0
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8004116:	1d3b      	adds	r3, r7, #4
 8004118:	2200      	movs	r2, #0
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	605a      	str	r2, [r3, #4]
 800411e:	609a      	str	r2, [r3, #8]
 8004120:	60da      	str	r2, [r3, #12]
 8004122:	611a      	str	r2, [r3, #16]
 8004124:	615a      	str	r2, [r3, #20]
 8004126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8004128:	4b2d      	ldr	r3, [pc, #180]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 800412a:	4a2e      	ldr	r2, [pc, #184]	@ (80041e4 <MX_TIM4_Init+0xec>)
 800412c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800412e:	4b2c      	ldr	r3, [pc, #176]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 8004130:	2200      	movs	r2, #0
 8004132:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004134:	4b2a      	ldr	r3, [pc, #168]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 8004136:	2200      	movs	r2, #0
 8004138:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 800413a:	4b29      	ldr	r3, [pc, #164]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 800413c:	f245 2207 	movw	r2, #20999	@ 0x5207
 8004140:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004142:	4b27      	ldr	r3, [pc, #156]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 8004144:	2200      	movs	r2, #0
 8004146:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8004148:	4b25      	ldr	r3, [pc, #148]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 800414a:	2280      	movs	r2, #128	@ 0x80
 800414c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800414e:	4824      	ldr	r0, [pc, #144]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 8004150:	f004 fa62 	bl	8008618 <HAL_TIM_Base_Init>
 8004154:	4603      	mov	r3, r0
 8004156:	2b00      	cmp	r3, #0
 8004158:	d001      	beq.n	800415e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800415a:	f000 fbf7 	bl	800494c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800415e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004162:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8004164:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004168:	4619      	mov	r1, r3
 800416a:	481d      	ldr	r0, [pc, #116]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 800416c:	f004 fbb4 	bl	80088d8 <HAL_TIM_ConfigClockSource>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d001      	beq.n	800417a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8004176:	f000 fbe9 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800417a:	4819      	ldr	r0, [pc, #100]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 800417c:	f004 fa9b 	bl	80086b6 <HAL_TIM_PWM_Init>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8004186:	f000 fbe1 	bl	800494c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800418a:	2300      	movs	r3, #0
 800418c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800418e:	2300      	movs	r3, #0
 8004190:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8004192:	f107 0320 	add.w	r3, r7, #32
 8004196:	4619      	mov	r1, r3
 8004198:	4811      	ldr	r0, [pc, #68]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 800419a:	f004 ff55 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d001      	beq.n	80041a8 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80041a4:	f000 fbd2 	bl	800494c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80041a8:	2360      	movs	r3, #96	@ 0x60
 80041aa:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 80041ac:	f642 1303 	movw	r3, #10499	@ 0x2903
 80041b0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80041b6:	2300      	movs	r3, #0
 80041b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80041ba:	1d3b      	adds	r3, r7, #4
 80041bc:	2208      	movs	r2, #8
 80041be:	4619      	mov	r1, r3
 80041c0:	4807      	ldr	r0, [pc, #28]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 80041c2:	f004 fac7 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 80041cc:	f000 fbbe 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80041d0:	4803      	ldr	r0, [pc, #12]	@ (80041e0 <MX_TIM4_Init+0xe8>)
 80041d2:	f000 ff95 	bl	8005100 <HAL_TIM_MspPostInit>

}
 80041d6:	bf00      	nop
 80041d8:	3738      	adds	r7, #56	@ 0x38
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	20000a9c 	.word	0x20000a9c
 80041e4:	40000800 	.word	0x40000800

080041e8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b08a      	sub	sp, #40	@ 0x28
 80041ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80041ee:	f107 0320 	add.w	r3, r7, #32
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80041f8:	1d3b      	adds	r3, r7, #4
 80041fa:	2200      	movs	r2, #0
 80041fc:	601a      	str	r2, [r3, #0]
 80041fe:	605a      	str	r2, [r3, #4]
 8004200:	609a      	str	r2, [r3, #8]
 8004202:	60da      	str	r2, [r3, #12]
 8004204:	611a      	str	r2, [r3, #16]
 8004206:	615a      	str	r2, [r3, #20]
 8004208:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800420a:	4b2d      	ldr	r3, [pc, #180]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 800420c:	4a2d      	ldr	r2, [pc, #180]	@ (80042c4 <MX_TIM5_Init+0xdc>)
 800420e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8004210:	4b2b      	ldr	r3, [pc, #172]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 8004212:	222a      	movs	r2, #42	@ 0x2a
 8004214:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004216:	4b2a      	ldr	r3, [pc, #168]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 8004218:	2200      	movs	r2, #0
 800421a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 800421c:	4b28      	ldr	r3, [pc, #160]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 800421e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8004222:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004224:	4b26      	ldr	r3, [pc, #152]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 8004226:	2200      	movs	r2, #0
 8004228:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800422a:	4b25      	ldr	r3, [pc, #148]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 800422c:	2200      	movs	r2, #0
 800422e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8004230:	4823      	ldr	r0, [pc, #140]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 8004232:	f004 fa40 	bl	80086b6 <HAL_TIM_PWM_Init>
 8004236:	4603      	mov	r3, r0
 8004238:	2b00      	cmp	r3, #0
 800423a:	d001      	beq.n	8004240 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800423c:	f000 fb86 	bl	800494c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004240:	2300      	movs	r3, #0
 8004242:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004244:	2300      	movs	r3, #0
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8004248:	f107 0320 	add.w	r3, r7, #32
 800424c:	4619      	mov	r1, r3
 800424e:	481c      	ldr	r0, [pc, #112]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 8004250:	f004 fefa 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 800425a:	f000 fb77 	bl	800494c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800425e:	2360      	movs	r3, #96	@ 0x60
 8004260:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004262:	2300      	movs	r3, #0
 8004264:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004266:	2300      	movs	r3, #0
 8004268:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800426a:	2300      	movs	r3, #0
 800426c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800426e:	1d3b      	adds	r3, r7, #4
 8004270:	2200      	movs	r2, #0
 8004272:	4619      	mov	r1, r3
 8004274:	4812      	ldr	r0, [pc, #72]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 8004276:	f004 fa6d 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d001      	beq.n	8004284 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8004280:	f000 fb64 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004284:	1d3b      	adds	r3, r7, #4
 8004286:	2204      	movs	r2, #4
 8004288:	4619      	mov	r1, r3
 800428a:	480d      	ldr	r0, [pc, #52]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 800428c:	f004 fa62 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 8004290:	4603      	mov	r3, r0
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8004296:	f000 fb59 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800429a:	1d3b      	adds	r3, r7, #4
 800429c:	2208      	movs	r2, #8
 800429e:	4619      	mov	r1, r3
 80042a0:	4807      	ldr	r0, [pc, #28]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 80042a2:	f004 fa57 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 80042a6:	4603      	mov	r3, r0
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d001      	beq.n	80042b0 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 80042ac:	f000 fb4e 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 80042b0:	4803      	ldr	r0, [pc, #12]	@ (80042c0 <MX_TIM5_Init+0xd8>)
 80042b2:	f000 ff25 	bl	8005100 <HAL_TIM_MspPostInit>

}
 80042b6:	bf00      	nop
 80042b8:	3728      	adds	r7, #40	@ 0x28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	bd80      	pop	{r7, pc}
 80042be:	bf00      	nop
 80042c0:	20000ae4 	.word	0x20000ae4
 80042c4:	40000c00 	.word	0x40000c00

080042c8 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b092      	sub	sp, #72	@ 0x48
 80042cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80042ce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80042d2:	2200      	movs	r2, #0
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80042d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80042dc:	2200      	movs	r2, #0
 80042de:	601a      	str	r2, [r3, #0]
 80042e0:	605a      	str	r2, [r3, #4]
 80042e2:	609a      	str	r2, [r3, #8]
 80042e4:	60da      	str	r2, [r3, #12]
 80042e6:	611a      	str	r2, [r3, #16]
 80042e8:	615a      	str	r2, [r3, #20]
 80042ea:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80042ec:	1d3b      	adds	r3, r7, #4
 80042ee:	2220      	movs	r2, #32
 80042f0:	2100      	movs	r1, #0
 80042f2:	4618      	mov	r0, r3
 80042f4:	f009 fed0 	bl	800e098 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80042f8:	4b3f      	ldr	r3, [pc, #252]	@ (80043f8 <MX_TIM8_Init+0x130>)
 80042fa:	4a40      	ldr	r2, [pc, #256]	@ (80043fc <MX_TIM8_Init+0x134>)
 80042fc:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 80042fe:	4b3e      	ldr	r3, [pc, #248]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004300:	2253      	movs	r2, #83	@ 0x53
 8004302:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004304:	4b3c      	ldr	r3, [pc, #240]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004306:	2200      	movs	r2, #0
 8004308:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 800430a:	4b3b      	ldr	r3, [pc, #236]	@ (80043f8 <MX_TIM8_Init+0x130>)
 800430c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8004310:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004312:	4b39      	ldr	r3, [pc, #228]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004314:	2200      	movs	r2, #0
 8004316:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8004318:	4b37      	ldr	r3, [pc, #220]	@ (80043f8 <MX_TIM8_Init+0x130>)
 800431a:	2200      	movs	r2, #0
 800431c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800431e:	4b36      	ldr	r3, [pc, #216]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004320:	2280      	movs	r2, #128	@ 0x80
 8004322:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8004324:	4834      	ldr	r0, [pc, #208]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004326:	f004 f9c6 	bl	80086b6 <HAL_TIM_PWM_Init>
 800432a:	4603      	mov	r3, r0
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8004330:	f000 fb0c 	bl	800494c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004334:	2300      	movs	r3, #0
 8004336:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004338:	2300      	movs	r3, #0
 800433a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800433c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8004340:	4619      	mov	r1, r3
 8004342:	482d      	ldr	r0, [pc, #180]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004344:	f004 fe80 	bl	8009048 <HAL_TIMEx_MasterConfigSynchronization>
 8004348:	4603      	mov	r3, r0
 800434a:	2b00      	cmp	r3, #0
 800434c:	d001      	beq.n	8004352 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 800434e:	f000 fafd 	bl	800494c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004352:	2360      	movs	r3, #96	@ 0x60
 8004354:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8004356:	2300      	movs	r3, #0
 8004358:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800435a:	2300      	movs	r3, #0
 800435c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800435e:	2300      	movs	r3, #0
 8004360:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004362:	2300      	movs	r3, #0
 8004364:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8004366:	2300      	movs	r3, #0
 8004368:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800436a:	2300      	movs	r3, #0
 800436c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800436e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004372:	2200      	movs	r2, #0
 8004374:	4619      	mov	r1, r3
 8004376:	4820      	ldr	r0, [pc, #128]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004378:	f004 f9ec 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d001      	beq.n	8004386 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8004382:	f000 fae3 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8004386:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800438a:	2204      	movs	r2, #4
 800438c:	4619      	mov	r1, r3
 800438e:	481a      	ldr	r0, [pc, #104]	@ (80043f8 <MX_TIM8_Init+0x130>)
 8004390:	f004 f9e0 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800439a:	f000 fad7 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800439e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043a2:	2208      	movs	r2, #8
 80043a4:	4619      	mov	r1, r3
 80043a6:	4814      	ldr	r0, [pc, #80]	@ (80043f8 <MX_TIM8_Init+0x130>)
 80043a8:	f004 f9d4 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d001      	beq.n	80043b6 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 80043b2:	f000 facb 	bl	800494c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80043b6:	2300      	movs	r3, #0
 80043b8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80043ba:	2300      	movs	r3, #0
 80043bc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80043be:	2300      	movs	r3, #0
 80043c0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80043c6:	2300      	movs	r3, #0
 80043c8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80043ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80043ce:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80043d0:	2300      	movs	r3, #0
 80043d2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	4619      	mov	r1, r3
 80043d8:	4807      	ldr	r0, [pc, #28]	@ (80043f8 <MX_TIM8_Init+0x130>)
 80043da:	f004 feb1 	bl	8009140 <HAL_TIMEx_ConfigBreakDeadTime>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 80043e4:	f000 fab2 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80043e8:	4803      	ldr	r0, [pc, #12]	@ (80043f8 <MX_TIM8_Init+0x130>)
 80043ea:	f000 fe89 	bl	8005100 <HAL_TIM_MspPostInit>

}
 80043ee:	bf00      	nop
 80043f0:	3748      	adds	r7, #72	@ 0x48
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	20000b2c 	.word	0x20000b2c
 80043fc:	40010400 	.word	0x40010400

08004400 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b088      	sub	sp, #32
 8004404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004406:	1d3b      	adds	r3, r7, #4
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	60da      	str	r2, [r3, #12]
 8004412:	611a      	str	r2, [r3, #16]
 8004414:	615a      	str	r2, [r3, #20]
 8004416:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004418:	4b1e      	ldr	r3, [pc, #120]	@ (8004494 <MX_TIM10_Init+0x94>)
 800441a:	4a1f      	ldr	r2, [pc, #124]	@ (8004498 <MX_TIM10_Init+0x98>)
 800441c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800441e:	4b1d      	ldr	r3, [pc, #116]	@ (8004494 <MX_TIM10_Init+0x94>)
 8004420:	2200      	movs	r2, #0
 8004422:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004424:	4b1b      	ldr	r3, [pc, #108]	@ (8004494 <MX_TIM10_Init+0x94>)
 8004426:	2200      	movs	r2, #0
 8004428:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800442a:	4b1a      	ldr	r3, [pc, #104]	@ (8004494 <MX_TIM10_Init+0x94>)
 800442c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8004430:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004432:	4b18      	ldr	r3, [pc, #96]	@ (8004494 <MX_TIM10_Init+0x94>)
 8004434:	2200      	movs	r2, #0
 8004436:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004438:	4b16      	ldr	r3, [pc, #88]	@ (8004494 <MX_TIM10_Init+0x94>)
 800443a:	2200      	movs	r2, #0
 800443c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800443e:	4815      	ldr	r0, [pc, #84]	@ (8004494 <MX_TIM10_Init+0x94>)
 8004440:	f004 f8ea 	bl	8008618 <HAL_TIM_Base_Init>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800444a:	f000 fa7f 	bl	800494c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800444e:	4811      	ldr	r0, [pc, #68]	@ (8004494 <MX_TIM10_Init+0x94>)
 8004450:	f004 f931 	bl	80086b6 <HAL_TIM_PWM_Init>
 8004454:	4603      	mov	r3, r0
 8004456:	2b00      	cmp	r3, #0
 8004458:	d001      	beq.n	800445e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800445a:	f000 fa77 	bl	800494c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800445e:	2360      	movs	r3, #96	@ 0x60
 8004460:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8004466:	2300      	movs	r3, #0
 8004468:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800446e:	1d3b      	adds	r3, r7, #4
 8004470:	2200      	movs	r2, #0
 8004472:	4619      	mov	r1, r3
 8004474:	4807      	ldr	r0, [pc, #28]	@ (8004494 <MX_TIM10_Init+0x94>)
 8004476:	f004 f96d 	bl	8008754 <HAL_TIM_PWM_ConfigChannel>
 800447a:	4603      	mov	r3, r0
 800447c:	2b00      	cmp	r3, #0
 800447e:	d001      	beq.n	8004484 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 8004480:	f000 fa64 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8004484:	4803      	ldr	r0, [pc, #12]	@ (8004494 <MX_TIM10_Init+0x94>)
 8004486:	f000 fe3b 	bl	8005100 <HAL_TIM_MspPostInit>

}
 800448a:	bf00      	nop
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	20000b74 	.word	0x20000b74
 8004498:	40014400 	.word	0x40014400

0800449c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80044a0:	4b11      	ldr	r3, [pc, #68]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044a2:	4a12      	ldr	r2, [pc, #72]	@ (80044ec <MX_USART1_UART_Init+0x50>)
 80044a4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80044a6:	4b10      	ldr	r3, [pc, #64]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044a8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80044ac:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80044ae:	4b0e      	ldr	r3, [pc, #56]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80044b4:	4b0c      	ldr	r3, [pc, #48]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044b6:	2200      	movs	r2, #0
 80044b8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80044ba:	4b0b      	ldr	r3, [pc, #44]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044bc:	2200      	movs	r2, #0
 80044be:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80044c0:	4b09      	ldr	r3, [pc, #36]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044c2:	220c      	movs	r2, #12
 80044c4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80044c6:	4b08      	ldr	r3, [pc, #32]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044c8:	2200      	movs	r2, #0
 80044ca:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80044cc:	4b06      	ldr	r3, [pc, #24]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044ce:	2200      	movs	r2, #0
 80044d0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80044d2:	4805      	ldr	r0, [pc, #20]	@ (80044e8 <MX_USART1_UART_Init+0x4c>)
 80044d4:	f004 fe86 	bl	80091e4 <HAL_UART_Init>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d001      	beq.n	80044e2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80044de:	f000 fa35 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000bbc 	.word	0x20000bbc
 80044ec:	40011000 	.word	0x40011000

080044f0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80044f4:	4b11      	ldr	r3, [pc, #68]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 80044f6:	4a12      	ldr	r2, [pc, #72]	@ (8004540 <MX_USART3_UART_Init+0x50>)
 80044f8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 80044fa:	4b10      	ldr	r3, [pc, #64]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 80044fc:	4a11      	ldr	r2, [pc, #68]	@ (8004544 <MX_USART3_UART_Init+0x54>)
 80044fe:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004500:	4b0e      	ldr	r3, [pc, #56]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 8004502:	2200      	movs	r2, #0
 8004504:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004506:	4b0d      	ldr	r3, [pc, #52]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 8004508:	2200      	movs	r2, #0
 800450a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800450c:	4b0b      	ldr	r3, [pc, #44]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 800450e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004512:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004514:	4b09      	ldr	r3, [pc, #36]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 8004516:	220c      	movs	r2, #12
 8004518:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800451a:	4b08      	ldr	r3, [pc, #32]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 800451c:	2200      	movs	r2, #0
 800451e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004520:	4b06      	ldr	r3, [pc, #24]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 8004522:	2200      	movs	r2, #0
 8004524:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004526:	4805      	ldr	r0, [pc, #20]	@ (800453c <MX_USART3_UART_Init+0x4c>)
 8004528:	f004 fe5c 	bl	80091e4 <HAL_UART_Init>
 800452c:	4603      	mov	r3, r0
 800452e:	2b00      	cmp	r3, #0
 8004530:	d001      	beq.n	8004536 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8004532:	f000 fa0b 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004536:	bf00      	nop
 8004538:	bd80      	pop	{r7, pc}
 800453a:	bf00      	nop
 800453c:	20000c04 	.word	0x20000c04
 8004540:	40004800 	.word	0x40004800
 8004544:	000186a0 	.word	0x000186a0

08004548 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800454c:	4b11      	ldr	r3, [pc, #68]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 800454e:	4a12      	ldr	r2, [pc, #72]	@ (8004598 <MX_USART6_UART_Init+0x50>)
 8004550:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8004552:	4b10      	ldr	r3, [pc, #64]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 8004554:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004558:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800455a:	4b0e      	ldr	r3, [pc, #56]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 800455c:	2200      	movs	r2, #0
 800455e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8004560:	4b0c      	ldr	r3, [pc, #48]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 8004562:	2200      	movs	r2, #0
 8004564:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8004566:	4b0b      	ldr	r3, [pc, #44]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 8004568:	2200      	movs	r2, #0
 800456a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800456c:	4b09      	ldr	r3, [pc, #36]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 800456e:	220c      	movs	r2, #12
 8004570:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004572:	4b08      	ldr	r3, [pc, #32]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 8004574:	2200      	movs	r2, #0
 8004576:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8004578:	4b06      	ldr	r3, [pc, #24]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 800457a:	2200      	movs	r2, #0
 800457c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800457e:	4805      	ldr	r0, [pc, #20]	@ (8004594 <MX_USART6_UART_Init+0x4c>)
 8004580:	f004 fe30 	bl	80091e4 <HAL_UART_Init>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d001      	beq.n	800458e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800458a:	f000 f9df 	bl	800494c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800458e:	bf00      	nop
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000c4c 	.word	0x20000c4c
 8004598:	40011400 	.word	0x40011400

0800459c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b082      	sub	sp, #8
 80045a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80045a2:	2300      	movs	r3, #0
 80045a4:	607b      	str	r3, [r7, #4]
 80045a6:	4b1b      	ldr	r3, [pc, #108]	@ (8004614 <MX_DMA_Init+0x78>)
 80045a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045aa:	4a1a      	ldr	r2, [pc, #104]	@ (8004614 <MX_DMA_Init+0x78>)
 80045ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80045b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80045b2:	4b18      	ldr	r3, [pc, #96]	@ (8004614 <MX_DMA_Init+0x78>)
 80045b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80045ba:	607b      	str	r3, [r7, #4]
 80045bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80045be:	2300      	movs	r3, #0
 80045c0:	603b      	str	r3, [r7, #0]
 80045c2:	4b14      	ldr	r3, [pc, #80]	@ (8004614 <MX_DMA_Init+0x78>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c6:	4a13      	ldr	r2, [pc, #76]	@ (8004614 <MX_DMA_Init+0x78>)
 80045c8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80045ce:	4b11      	ldr	r3, [pc, #68]	@ (8004614 <MX_DMA_Init+0x78>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045d6:	603b      	str	r3, [r7, #0]
 80045d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80045da:	2200      	movs	r2, #0
 80045dc:	2105      	movs	r1, #5
 80045de:	200c      	movs	r0, #12
 80045e0:	f002 f941 	bl	8006866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80045e4:	200c      	movs	r0, #12
 80045e6:	f002 f95a 	bl	800689e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 80045ea:	2200      	movs	r2, #0
 80045ec:	2105      	movs	r1, #5
 80045ee:	2039      	movs	r0, #57	@ 0x39
 80045f0:	f002 f939 	bl	8006866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80045f4:	2039      	movs	r0, #57	@ 0x39
 80045f6:	f002 f952 	bl	800689e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 80045fa:	2200      	movs	r2, #0
 80045fc:	2105      	movs	r1, #5
 80045fe:	203a      	movs	r0, #58	@ 0x3a
 8004600:	f002 f931 	bl	8006866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004604:	203a      	movs	r0, #58	@ 0x3a
 8004606:	f002 f94a 	bl	800689e <HAL_NVIC_EnableIRQ>

}
 800460a:	bf00      	nop
 800460c:	3708      	adds	r7, #8
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}
 8004612:	bf00      	nop
 8004614:	40023800 	.word	0x40023800

08004618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08e      	sub	sp, #56	@ 0x38
 800461c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800461e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004622:	2200      	movs	r2, #0
 8004624:	601a      	str	r2, [r3, #0]
 8004626:	605a      	str	r2, [r3, #4]
 8004628:	609a      	str	r2, [r3, #8]
 800462a:	60da      	str	r2, [r3, #12]
 800462c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800462e:	2300      	movs	r3, #0
 8004630:	623b      	str	r3, [r7, #32]
 8004632:	4b77      	ldr	r3, [pc, #476]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004636:	4a76      	ldr	r2, [pc, #472]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004638:	f043 0302 	orr.w	r3, r3, #2
 800463c:	6313      	str	r3, [r2, #48]	@ 0x30
 800463e:	4b74      	ldr	r3, [pc, #464]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	623b      	str	r3, [r7, #32]
 8004648:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800464a:	2300      	movs	r3, #0
 800464c:	61fb      	str	r3, [r7, #28]
 800464e:	4b70      	ldr	r3, [pc, #448]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004652:	4a6f      	ldr	r2, [pc, #444]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004658:	6313      	str	r3, [r2, #48]	@ 0x30
 800465a:	4b6d      	ldr	r3, [pc, #436]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 800465c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800465e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004662:	61fb      	str	r3, [r7, #28]
 8004664:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004666:	2300      	movs	r3, #0
 8004668:	61bb      	str	r3, [r7, #24]
 800466a:	4b69      	ldr	r3, [pc, #420]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 800466c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800466e:	4a68      	ldr	r2, [pc, #416]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	6313      	str	r3, [r2, #48]	@ 0x30
 8004676:	4b66      	ldr	r3, [pc, #408]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800467a:	f003 0301 	and.w	r3, r3, #1
 800467e:	61bb      	str	r3, [r7, #24]
 8004680:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004682:	2300      	movs	r3, #0
 8004684:	617b      	str	r3, [r7, #20]
 8004686:	4b62      	ldr	r3, [pc, #392]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800468a:	4a61      	ldr	r2, [pc, #388]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 800468c:	f043 0308 	orr.w	r3, r3, #8
 8004690:	6313      	str	r3, [r2, #48]	@ 0x30
 8004692:	4b5f      	ldr	r3, [pc, #380]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800469e:	2300      	movs	r3, #0
 80046a0:	613b      	str	r3, [r7, #16]
 80046a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046a6:	4a5a      	ldr	r2, [pc, #360]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046a8:	f043 0304 	orr.w	r3, r3, #4
 80046ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ae:	4b58      	ldr	r3, [pc, #352]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b2:	f003 0304 	and.w	r3, r3, #4
 80046b6:	613b      	str	r3, [r7, #16]
 80046b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80046ba:	2300      	movs	r3, #0
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	4b54      	ldr	r3, [pc, #336]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046c2:	4a53      	ldr	r2, [pc, #332]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80046ca:	4b51      	ldr	r3, [pc, #324]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d2:	60fb      	str	r3, [r7, #12]
 80046d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80046d6:	2300      	movs	r3, #0
 80046d8:	60bb      	str	r3, [r7, #8]
 80046da:	4b4d      	ldr	r3, [pc, #308]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046de:	4a4c      	ldr	r2, [pc, #304]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80046e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80046e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ee:	60bb      	str	r3, [r7, #8]
 80046f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80046f2:	2300      	movs	r3, #0
 80046f4:	607b      	str	r3, [r7, #4]
 80046f6:	4b46      	ldr	r3, [pc, #280]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046fa:	4a45      	ldr	r2, [pc, #276]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 80046fc:	f043 0320 	orr.w	r3, r3, #32
 8004700:	6313      	str	r3, [r2, #48]	@ 0x30
 8004702:	4b43      	ldr	r3, [pc, #268]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004706:	f003 0320 	and.w	r3, r3, #32
 800470a:	607b      	str	r3, [r7, #4]
 800470c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800470e:	2300      	movs	r3, #0
 8004710:	603b      	str	r3, [r7, #0]
 8004712:	4b3f      	ldr	r3, [pc, #252]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004716:	4a3e      	ldr	r2, [pc, #248]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004718:	f043 0310 	orr.w	r3, r3, #16
 800471c:	6313      	str	r3, [r2, #48]	@ 0x30
 800471e:	4b3c      	ldr	r3, [pc, #240]	@ (8004810 <MX_GPIO_Init+0x1f8>)
 8004720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004722:	f003 0310 	and.w	r3, r3, #16
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800472a:	2200      	movs	r2, #0
 800472c:	2140      	movs	r1, #64	@ 0x40
 800472e:	4839      	ldr	r0, [pc, #228]	@ (8004814 <MX_GPIO_Init+0x1fc>)
 8004730:	f002 fe6e 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8004734:	2200      	movs	r2, #0
 8004736:	2110      	movs	r1, #16
 8004738:	4837      	ldr	r0, [pc, #220]	@ (8004818 <MX_GPIO_Init+0x200>)
 800473a:	f002 fe69 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 800473e:	2200      	movs	r2, #0
 8004740:	2101      	movs	r1, #1
 8004742:	4836      	ldr	r0, [pc, #216]	@ (800481c <MX_GPIO_Init+0x204>)
 8004744:	f002 fe64 	bl	8007410 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004748:	2340      	movs	r3, #64	@ 0x40
 800474a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800474c:	2301      	movs	r3, #1
 800474e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004750:	2300      	movs	r3, #0
 8004752:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004754:	2300      	movs	r3, #0
 8004756:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004758:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800475c:	4619      	mov	r1, r3
 800475e:	482d      	ldr	r0, [pc, #180]	@ (8004814 <MX_GPIO_Init+0x1fc>)
 8004760:	f002 fcba 	bl	80070d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004764:	2308      	movs	r3, #8
 8004766:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004768:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800476c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004772:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004776:	4619      	mov	r1, r3
 8004778:	4826      	ldr	r0, [pc, #152]	@ (8004814 <MX_GPIO_Init+0x1fc>)
 800477a:	f002 fcad 	bl	80070d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800477e:	2301      	movs	r3, #1
 8004780:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004782:	2300      	movs	r3, #0
 8004784:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004786:	2300      	movs	r3, #0
 8004788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800478a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800478e:	4619      	mov	r1, r3
 8004790:	4821      	ldr	r0, [pc, #132]	@ (8004818 <MX_GPIO_Init+0x200>)
 8004792:	f002 fca1 	bl	80070d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004796:	2310      	movs	r3, #16
 8004798:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479a:	2301      	movs	r3, #1
 800479c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479e:	2300      	movs	r3, #0
 80047a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047a2:	2300      	movs	r3, #0
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047aa:	4619      	mov	r1, r3
 80047ac:	481a      	ldr	r0, [pc, #104]	@ (8004818 <MX_GPIO_Init+0x200>)
 80047ae:	f002 fc93 	bl	80070d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 80047b2:	2330      	movs	r3, #48	@ 0x30
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80047b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80047ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047bc:	2300      	movs	r3, #0
 80047be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80047c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047c4:	4619      	mov	r1, r3
 80047c6:	4816      	ldr	r0, [pc, #88]	@ (8004820 <MX_GPIO_Init+0x208>)
 80047c8:	f002 fc86 	bl	80070d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80047cc:	2301      	movs	r3, #1
 80047ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047d0:	2301      	movs	r3, #1
 80047d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047d4:	2300      	movs	r3, #0
 80047d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d8:	2300      	movs	r3, #0
 80047da:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80047e0:	4619      	mov	r1, r3
 80047e2:	480e      	ldr	r0, [pc, #56]	@ (800481c <MX_GPIO_Init+0x204>)
 80047e4:	f002 fc78 	bl	80070d8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80047e8:	2200      	movs	r2, #0
 80047ea:	2105      	movs	r1, #5
 80047ec:	2009      	movs	r0, #9
 80047ee:	f002 f83a 	bl	8006866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80047f2:	2009      	movs	r0, #9
 80047f4:	f002 f853 	bl	800689e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 80047f8:	2200      	movs	r2, #0
 80047fa:	2105      	movs	r1, #5
 80047fc:	200a      	movs	r0, #10
 80047fe:	f002 f832 	bl	8006866 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004802:	200a      	movs	r0, #10
 8004804:	f002 f84b 	bl	800689e <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004808:	bf00      	nop
 800480a:	3738      	adds	r7, #56	@ 0x38
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}
 8004810:	40023800 	.word	0x40023800
 8004814:	40021800 	.word	0x40021800
 8004818:	40020000 	.word	0x40020000
 800481c:	40020400 	.word	0x40020400
 8004820:	40020800 	.word	0x40020800

08004824 <StartFlowManager>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowManager */
void StartFlowManager(void *argument)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t iCount = 0;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]

	DBUS_Rx_Init(&huart3);
 8004830:	4815      	ldr	r0, [pc, #84]	@ (8004888 <StartFlowManager+0x64>)
 8004832:	f7fd fd6d 	bl	8002310 <DBUS_Rx_Init>

	UART_Ex_Init(&huart1);
 8004836:	4815      	ldr	r0, [pc, #84]	@ (800488c <StartFlowManager+0x68>)
 8004838:	f7fd ffa8 	bl	800278c <UART_Ex_Init>
	UART_Ex_Init(&huart6);
 800483c:	4814      	ldr	r0, [pc, #80]	@ (8004890 <StartFlowManager+0x6c>)
 800483e:	f7fd ffa5 	bl	800278c <UART_Ex_Init>
	CAN_Init();
 8004842:	f7fd fd29 	bl	8002298 <CAN_Init>
	BMI088_gyro_init();
 8004846:	f7fc fcab 	bl	80011a0 <BMI088_gyro_init>
	BMI088_accel_init();
 800484a:	f7fc fbf1 	bl	8001030 <BMI088_accel_init>
  /* Infinite loop */
  for(;;)
  {
	  DBUS_Update();
 800484e:	f7fd fd91 	bl	8002374 <DBUS_Update>

	  // UART_Printf(&huart1, "%d %d\r\n", CAL_getBufferEnergy(), CAL_getPowerLimit());

	  if(iCount%3==0){
 8004852:	7bfa      	ldrb	r2, [r7, #15]
 8004854:	4b0f      	ldr	r3, [pc, #60]	@ (8004894 <StartFlowManager+0x70>)
 8004856:	fba3 1302 	umull	r1, r3, r3, r2
 800485a:	0859      	lsrs	r1, r3, #1
 800485c:	460b      	mov	r3, r1
 800485e:	005b      	lsls	r3, r3, #1
 8004860:	440b      	add	r3, r1
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	b2db      	uxtb	r3, r3
 8004866:	2b00      	cmp	r3, #0
 8004868:	d101      	bne.n	800486e <StartFlowManager+0x4a>
		  CAL_Update();
 800486a:	f7fc ff07 	bl	800167c <CAL_Update>


	  //UART_Printf(&huart6,"DBUS Check: %d %d \n", getDR16_W(),getCC_W());
	  //UART_Printfmt(&huart6,"%d \n",getDR16_CH1());

	  if(iCount<255){
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2bff      	cmp	r3, #255	@ 0xff
 8004872:	d003      	beq.n	800487c <StartFlowManager+0x58>
		  iCount++;
 8004874:	7bfb      	ldrb	r3, [r7, #15]
 8004876:	3301      	adds	r3, #1
 8004878:	73fb      	strb	r3, [r7, #15]
 800487a:	e001      	b.n	8004880 <StartFlowManager+0x5c>
	  }else{
		  iCount = 0;
 800487c:	2300      	movs	r3, #0
 800487e:	73fb      	strb	r3, [r7, #15]
	  }
	  osDelay(1);
 8004880:	2001      	movs	r0, #1
 8004882:	f006 f81f 	bl	800a8c4 <osDelay>
	  DBUS_Update();
 8004886:	e7e2      	b.n	800484e <StartFlowManager+0x2a>
 8004888:	20000c04 	.word	0x20000c04
 800488c:	20000bbc 	.word	0x20000bbc
 8004890:	20000c4c 	.word	0x20000c4c
 8004894:	aaaaaaab 	.word	0xaaaaaaab

08004898 <StartChassisTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassisTask */
void StartChassisTask(void *argument)
{
 8004898:	b590      	push	{r4, r7, lr}
 800489a:	b095      	sub	sp, #84	@ 0x54
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
	/*
	You can write PID presets here
	EXAMPLE: PID_preset_t motorDrive1 = {300.0, 0.0001, 120.5};
		This will create a struct of PID_preset_t with PID values of 300.0f, 0.0001f, and 120.5f accordingly
	*/
	float accelR[3] = {0, 0, 0};
 80048a0:	f04f 0300 	mov.w	r3, #0
 80048a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80048a6:	f04f 0300 	mov.w	r3, #0
 80048aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80048ac:	f04f 0300 	mov.w	r3, #0
 80048b0:	64bb      	str	r3, [r7, #72]	@ 0x48
	int16_t gyroR[3] = {0, 0, 0};
 80048b2:	2300      	movs	r3, #0
 80048b4:	873b      	strh	r3, [r7, #56]	@ 0x38
 80048b6:	2300      	movs	r3, #0
 80048b8:	877b      	strh	r3, [r7, #58]	@ 0x3a
 80048ba:	2300      	movs	r3, #0
 80048bc:	87bb      	strh	r3, [r7, #60]	@ 0x3c
	/*
	float averate[3][200] = {0};
	*/
	float SmartAve[4][3] = {0};
 80048be:	f107 0308 	add.w	r3, r7, #8
 80048c2:	2230      	movs	r2, #48	@ 0x30
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f009 fbe6 	bl	800e098 <memset>

	uint16_t counter = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c

				EXAMPLE: if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {}
					Note that in this case, 0 is Pressed and 1 is Not Pressed
		 */
	  // float sumA[3] = {0};
	  for (uint8_t i = 0; i < 3; i++) {
 80048d2:	2300      	movs	r3, #0
 80048d4:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 80048d8:	e021      	b.n	800491e <StartChassisTask+0x86>
		  accelR[i] = IMU_get_accel(i);
 80048da:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 80048de:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fc fd4e 	bl	8001384 <IMU_get_accel>
 80048e8:	eef0 7a40 	vmov.f32	s15, s0
 80048ec:	00a3      	lsls	r3, r4, #2
 80048ee:	3350      	adds	r3, #80	@ 0x50
 80048f0:	443b      	add	r3, r7
 80048f2:	3b10      	subs	r3, #16
 80048f4:	edc3 7a00 	vstr	s15, [r3]
		  gyroR[i] = IMU_get_gyro(i);
 80048f8:	f897 404f 	ldrb.w	r4, [r7, #79]	@ 0x4f
 80048fc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004900:	4618      	mov	r0, r3
 8004902:	f7fc fce5 	bl	80012d0 <IMU_get_gyro>
 8004906:	4603      	mov	r3, r0
 8004908:	461a      	mov	r2, r3
 800490a:	0063      	lsls	r3, r4, #1
 800490c:	3350      	adds	r3, #80	@ 0x50
 800490e:	443b      	add	r3, r7
 8004910:	f823 2c18 	strh.w	r2, [r3, #-24]
	  for (uint8_t i = 0; i < 3; i++) {
 8004914:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004918:	3301      	adds	r3, #1
 800491a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800491e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004922:	2b02      	cmp	r3, #2
 8004924:	d9d9      	bls.n	80048da <StartChassisTask+0x42>
	  }

	  // getRotorPosition(Bus1, M2006, 1);
	  UART_Printf(&huart1, "%d\r\n", getRotorPosition(Bus1, M2006, 1));
 8004926:	2201      	movs	r2, #1
 8004928:	2102      	movs	r1, #2
 800492a:	2001      	movs	r0, #1
 800492c:	f7fd fc66 	bl	80021fc <getRotorPosition>
 8004930:	4603      	mov	r3, r0
 8004932:	461a      	mov	r2, r3
 8004934:	4903      	ldr	r1, [pc, #12]	@ (8004944 <StartChassisTask+0xac>)
 8004936:	4804      	ldr	r0, [pc, #16]	@ (8004948 <StartChassisTask+0xb0>)
 8004938:	f7fd ff00 	bl	800273c <UART_Printf>
	  // UART_Printf(&huart1, "%f %f %f\r\n", accelR[0], accelR[1], accelR[2]);

	  // UART_Printf(&huart1, "%f %f %f %d\r\n\r\n", sumA[0], sumA[1], sumA[2], counter);

	  // DO NOT DELETE THIS!!!!
	  osDelay(5);
 800493c:	2005      	movs	r0, #5
 800493e:	f005 ffc1 	bl	800a8c4 <osDelay>
	  for (uint8_t i = 0; i < 3; i++) {
 8004942:	e7c6      	b.n	80048d2 <StartChassisTask+0x3a>
 8004944:	080103b8 	.word	0x080103b8
 8004948:	20000bbc 	.word	0x20000bbc

0800494c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004950:	b672      	cpsid	i
}
 8004952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004954:	bf00      	nop
 8004956:	e7fd      	b.n	8004954 <Error_Handler+0x8>

08004958 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8004958:	b480      	push	{r7}
 800495a:	b087      	sub	sp, #28
 800495c:	af00      	add	r7, sp, #0
 800495e:	6178      	str	r0, [r7, #20]
 8004960:	460b      	mov	r3, r1
 8004962:	60fa      	str	r2, [r7, #12]
 8004964:	ed87 0a02 	vstr	s0, [r7, #8]
 8004968:	edc7 0a01 	vstr	s1, [r7, #4]
 800496c:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d042      	beq.n	80049fa <PID_init+0xa2>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d03f      	beq.n	80049fa <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	7cfa      	ldrb	r2, [r7, #19]
 800497e:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3304      	adds	r3, #4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	697b      	ldr	r3, [r7, #20]
 8004990:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	3308      	adds	r3, #8
 8004996:	681a      	ldr	r2, [r3, #0]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 800499c:	697b      	ldr	r3, [r7, #20]
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	687a      	ldr	r2, [r7, #4]
 80049a6:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	f04f 0200 	mov.w	r2, #0
 80049ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80049b0:	697b      	ldr	r3, [r7, #20]
 80049b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f04f 0200 	mov.w	r2, #0
 80049c6:	621a      	str	r2, [r3, #32]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	697b      	ldr	r3, [r7, #20]
 80049ce:	62da      	str	r2, [r3, #44]	@ 0x2c
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80049d4:	697b      	ldr	r3, [r7, #20]
 80049d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80049d8:	697b      	ldr	r3, [r7, #20]
 80049da:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	625a      	str	r2, [r3, #36]	@ 0x24
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	645a      	str	r2, [r3, #68]	@ 0x44
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049f8:	e000      	b.n	80049fc <PID_init+0xa4>
        return;
 80049fa:	bf00      	nop
}
 80049fc:	371c      	adds	r7, #28
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	60f8      	str	r0, [r7, #12]
 8004a0e:	ed87 0a02 	vstr	s0, [r7, #8]
 8004a12:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d102      	bne.n	8004a22 <PID_calc+0x1c>
    {
        return 0.0f;
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	e130      	b.n	8004c84 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	687a      	ldr	r2, [r7, #4]
 8004a36:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 8004a3e:	ed97 7a01 	vldr	s14, [r7, #4]
 8004a42:	edd7 7a02 	vldr	s15, [r7, #8]
 8004a46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f040 8095 	bne.w	8004b84 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	ed93 7a01 	vldr	s14, [r3, #4]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	edd3 6a02 	vldr	s13, [r3, #8]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004a82:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8004a86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	ed93 7a03 	vldr	s14, [r3, #12]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	edd3 7a05 	vldr	s15, [r3, #20]
 8004ad8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae0:	dd04      	ble.n	8004aec <PID_calc+0xe6>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	695a      	ldr	r2, [r3, #20]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	629a      	str	r2, [r3, #40]	@ 0x28
 8004aea:	e014      	b.n	8004b16 <PID_calc+0x110>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	edd3 7a05 	vldr	s15, [r3, #20]
 8004af8:	eef1 7a67 	vneg.f32	s15, s15
 8004afc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b04:	d507      	bpl.n	8004b16 <PID_calc+0x110>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b0c:	eef1 7a67 	vneg.f32	s15, s15
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004b22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004b2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b4a:	dd04      	ble.n	8004b56 <PID_calc+0x150>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	621a      	str	r2, [r3, #32]
 8004b54:	e094      	b.n	8004c80 <PID_calc+0x27a>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	ed93 7a08 	vldr	s14, [r3, #32]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b62:	eef1 7a67 	vneg.f32	s15, s15
 8004b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	f140 8087 	bpl.w	8004c80 <PID_calc+0x27a>
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	edd3 7a04 	vldr	s15, [r3, #16]
 8004b78:	eef1 7a67 	vneg.f32	s15, s15
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	edc3 7a08 	vstr	s15, [r3, #32]
 8004b82:	e07d      	b.n	8004c80 <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d179      	bne.n	8004c80 <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	ed93 7a01 	vldr	s14, [r3, #4]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004b9e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004ba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	ed93 7a02 	vldr	s14, [r3, #8]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8004bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004bde:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004be2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004bec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	ed93 7a03 	vldr	s14, [r3, #12]
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004c02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004c1e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004c28:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c2c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c4a:	dd04      	ble.n	8004c56 <PID_calc+0x250>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	691a      	ldr	r2, [r3, #16]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	621a      	str	r2, [r3, #32]
 8004c54:	e014      	b.n	8004c80 <PID_calc+0x27a>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	ed93 7a08 	vldr	s14, [r3, #32]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c62:	eef1 7a67 	vneg.f32	s15, s15
 8004c66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004c6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c6e:	d507      	bpl.n	8004c80 <PID_calc+0x27a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	edd3 7a04 	vldr	s15, [r3, #16]
 8004c76:	eef1 7a67 	vneg.f32	s15, s15
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6a1b      	ldr	r3, [r3, #32]
}
 8004c84:	ee07 3a90 	vmov	s15, r3
 8004c88:	eeb0 0a67 	vmov.f32	s0, s15
 8004c8c:	3714      	adds	r7, #20
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c94:	4770      	bx	lr
	...

08004c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c9e:	2300      	movs	r3, #0
 8004ca0:	607b      	str	r3, [r7, #4]
 8004ca2:	4b12      	ldr	r3, [pc, #72]	@ (8004cec <HAL_MspInit+0x54>)
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	4a11      	ldr	r2, [pc, #68]	@ (8004cec <HAL_MspInit+0x54>)
 8004ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8004cae:	4b0f      	ldr	r3, [pc, #60]	@ (8004cec <HAL_MspInit+0x54>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004cb6:	607b      	str	r3, [r7, #4]
 8004cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004cba:	2300      	movs	r3, #0
 8004cbc:	603b      	str	r3, [r7, #0]
 8004cbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004cec <HAL_MspInit+0x54>)
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cc2:	4a0a      	ldr	r2, [pc, #40]	@ (8004cec <HAL_MspInit+0x54>)
 8004cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cca:	4b08      	ldr	r3, [pc, #32]	@ (8004cec <HAL_MspInit+0x54>)
 8004ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	210f      	movs	r1, #15
 8004cda:	f06f 0001 	mvn.w	r0, #1
 8004cde:	f001 fdc2 	bl	8006866 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ce2:	bf00      	nop
 8004ce4:	3708      	adds	r7, #8
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	40023800 	.word	0x40023800

08004cf0 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08c      	sub	sp, #48	@ 0x30
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004cf8:	f107 031c 	add.w	r3, r7, #28
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	605a      	str	r2, [r3, #4]
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	60da      	str	r2, [r3, #12]
 8004d06:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a4a      	ldr	r2, [pc, #296]	@ (8004e38 <HAL_CAN_MspInit+0x148>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d13d      	bne.n	8004d8e <HAL_CAN_MspInit+0x9e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004d12:	4b4a      	ldr	r3, [pc, #296]	@ (8004e3c <HAL_CAN_MspInit+0x14c>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	3301      	adds	r3, #1
 8004d18:	4a48      	ldr	r2, [pc, #288]	@ (8004e3c <HAL_CAN_MspInit+0x14c>)
 8004d1a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004d1c:	4b47      	ldr	r3, [pc, #284]	@ (8004e3c <HAL_CAN_MspInit+0x14c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d10d      	bne.n	8004d40 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004d24:	2300      	movs	r3, #0
 8004d26:	61bb      	str	r3, [r7, #24]
 8004d28:	4b45      	ldr	r3, [pc, #276]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d2c:	4a44      	ldr	r2, [pc, #272]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004d2e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004d32:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d34:	4b42      	ldr	r3, [pc, #264]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004d40:	2300      	movs	r3, #0
 8004d42:	617b      	str	r3, [r7, #20]
 8004d44:	4b3e      	ldr	r3, [pc, #248]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004d46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d48:	4a3d      	ldr	r2, [pc, #244]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004d4a:	f043 0308 	orr.w	r3, r3, #8
 8004d4e:	6313      	str	r3, [r2, #48]	@ 0x30
 8004d50:	4b3b      	ldr	r3, [pc, #236]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004d52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d54:	f003 0308 	and.w	r3, r3, #8
 8004d58:	617b      	str	r3, [r7, #20]
 8004d5a:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004d5c:	2303      	movs	r3, #3
 8004d5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d60:	2302      	movs	r3, #2
 8004d62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d64:	2300      	movs	r3, #0
 8004d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d68:	2303      	movs	r3, #3
 8004d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004d6c:	2309      	movs	r3, #9
 8004d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004d70:	f107 031c 	add.w	r3, r7, #28
 8004d74:	4619      	mov	r1, r3
 8004d76:	4833      	ldr	r0, [pc, #204]	@ (8004e44 <HAL_CAN_MspInit+0x154>)
 8004d78:	f002 f9ae 	bl	80070d8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	2105      	movs	r1, #5
 8004d80:	2014      	movs	r0, #20
 8004d82:	f001 fd70 	bl	8006866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004d86:	2014      	movs	r0, #20
 8004d88:	f001 fd89 	bl	800689e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004d8c:	e04f      	b.n	8004e2e <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a2d      	ldr	r2, [pc, #180]	@ (8004e48 <HAL_CAN_MspInit+0x158>)
 8004d94:	4293      	cmp	r3, r2
 8004d96:	d14a      	bne.n	8004e2e <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	4b28      	ldr	r3, [pc, #160]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da0:	4a27      	ldr	r2, [pc, #156]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004da2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004da6:	6413      	str	r3, [r2, #64]	@ 0x40
 8004da8:	4b25      	ldr	r3, [pc, #148]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004db0:	613b      	str	r3, [r7, #16]
 8004db2:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004db4:	4b21      	ldr	r3, [pc, #132]	@ (8004e3c <HAL_CAN_MspInit+0x14c>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	3301      	adds	r3, #1
 8004dba:	4a20      	ldr	r2, [pc, #128]	@ (8004e3c <HAL_CAN_MspInit+0x14c>)
 8004dbc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004dbe:	4b1f      	ldr	r3, [pc, #124]	@ (8004e3c <HAL_CAN_MspInit+0x14c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d10d      	bne.n	8004de2 <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	4b1d      	ldr	r3, [pc, #116]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dce:	4a1c      	ldr	r2, [pc, #112]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004dd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8004dd6:	4b1a      	ldr	r3, [pc, #104]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dde:	60fb      	str	r3, [r7, #12]
 8004de0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004de2:	2300      	movs	r3, #0
 8004de4:	60bb      	str	r3, [r7, #8]
 8004de6:	4b16      	ldr	r3, [pc, #88]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004de8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dea:	4a15      	ldr	r2, [pc, #84]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004dec:	f043 0302 	orr.w	r3, r3, #2
 8004df0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004df2:	4b13      	ldr	r3, [pc, #76]	@ (8004e40 <HAL_CAN_MspInit+0x150>)
 8004df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	60bb      	str	r3, [r7, #8]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004dfe:	2360      	movs	r3, #96	@ 0x60
 8004e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e02:	2302      	movs	r3, #2
 8004e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e06:	2300      	movs	r3, #0
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004e0e:	2309      	movs	r3, #9
 8004e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e12:	f107 031c 	add.w	r3, r7, #28
 8004e16:	4619      	mov	r1, r3
 8004e18:	480c      	ldr	r0, [pc, #48]	@ (8004e4c <HAL_CAN_MspInit+0x15c>)
 8004e1a:	f002 f95d 	bl	80070d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004e1e:	2200      	movs	r2, #0
 8004e20:	2105      	movs	r1, #5
 8004e22:	2040      	movs	r0, #64	@ 0x40
 8004e24:	f001 fd1f 	bl	8006866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004e28:	2040      	movs	r0, #64	@ 0x40
 8004e2a:	f001 fd38 	bl	800689e <HAL_NVIC_EnableIRQ>
}
 8004e2e:	bf00      	nop
 8004e30:	3730      	adds	r7, #48	@ 0x30
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40006400 	.word	0x40006400
 8004e3c:	20000dc0 	.word	0x20000dc0
 8004e40:	40023800 	.word	0x40023800
 8004e44:	40020c00 	.word	0x40020c00
 8004e48:	40006800 	.word	0x40006800
 8004e4c:	40020400 	.word	0x40020400

08004e50 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b08a      	sub	sp, #40	@ 0x28
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e58:	f107 0314 	add.w	r3, r7, #20
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	605a      	str	r2, [r3, #4]
 8004e62:	609a      	str	r2, [r3, #8]
 8004e64:	60da      	str	r2, [r3, #12]
 8004e66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a29      	ldr	r2, [pc, #164]	@ (8004f14 <HAL_I2C_MspInit+0xc4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d14b      	bne.n	8004f0a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
 8004e76:	4b28      	ldr	r3, [pc, #160]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e7a:	4a27      	ldr	r2, [pc, #156]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e82:	4b25      	ldr	r3, [pc, #148]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	613b      	str	r3, [r7, #16]
 8004e8c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e8e:	2300      	movs	r3, #0
 8004e90:	60fb      	str	r3, [r7, #12]
 8004e92:	4b21      	ldr	r3, [pc, #132]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e96:	4a20      	ldr	r2, [pc, #128]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004eaa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004eae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004eb0:	2312      	movs	r3, #18
 8004eb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ebc:	2304      	movs	r3, #4
 8004ebe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4815      	ldr	r0, [pc, #84]	@ (8004f1c <HAL_I2C_MspInit+0xcc>)
 8004ec8:	f002 f906 	bl	80070d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004ecc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004ed0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004ed2:	2312      	movs	r3, #18
 8004ed4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004eda:	2303      	movs	r3, #3
 8004edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004ede:	2304      	movs	r3, #4
 8004ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ee2:	f107 0314 	add.w	r3, r7, #20
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	480d      	ldr	r0, [pc, #52]	@ (8004f20 <HAL_I2C_MspInit+0xd0>)
 8004eea:	f002 f8f5 	bl	80070d8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	4b09      	ldr	r3, [pc, #36]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef6:	4a08      	ldr	r2, [pc, #32]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004ef8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004efc:	6413      	str	r3, [r2, #64]	@ 0x40
 8004efe:	4b06      	ldr	r3, [pc, #24]	@ (8004f18 <HAL_I2C_MspInit+0xc8>)
 8004f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f02:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004f06:	60bb      	str	r3, [r7, #8]
 8004f08:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8004f0a:	bf00      	nop
 8004f0c:	3728      	adds	r7, #40	@ 0x28
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	40005c00 	.word	0x40005c00
 8004f18:	40023800 	.word	0x40023800
 8004f1c:	40020800 	.word	0x40020800
 8004f20:	40020000 	.word	0x40020000

08004f24 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b08a      	sub	sp, #40	@ 0x28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f2c:	f107 0314 	add.w	r3, r7, #20
 8004f30:	2200      	movs	r2, #0
 8004f32:	601a      	str	r2, [r3, #0]
 8004f34:	605a      	str	r2, [r3, #4]
 8004f36:	609a      	str	r2, [r3, #8]
 8004f38:	60da      	str	r2, [r3, #12]
 8004f3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a28      	ldr	r2, [pc, #160]	@ (8004fe4 <HAL_SPI_MspInit+0xc0>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d149      	bne.n	8004fda <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004f46:	2300      	movs	r3, #0
 8004f48:	613b      	str	r3, [r7, #16]
 8004f4a:	4b27      	ldr	r3, [pc, #156]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f4e:	4a26      	ldr	r2, [pc, #152]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f50:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004f54:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f5a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60fb      	str	r3, [r7, #12]
 8004f66:	4b20      	ldr	r3, [pc, #128]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f6c:	f043 0302 	orr.w	r3, r3, #2
 8004f70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f72:	4b1d      	ldr	r3, [pc, #116]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60bb      	str	r3, [r7, #8]
 8004f82:	4b19      	ldr	r3, [pc, #100]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f86:	4a18      	ldr	r2, [pc, #96]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f88:	f043 0301 	orr.w	r3, r3, #1
 8004f8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f8e:	4b16      	ldr	r3, [pc, #88]	@ (8004fe8 <HAL_SPI_MspInit+0xc4>)
 8004f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	60bb      	str	r3, [r7, #8]
 8004f98:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004f9a:	2318      	movs	r3, #24
 8004f9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f9e:	2302      	movs	r3, #2
 8004fa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004faa:	2305      	movs	r3, #5
 8004fac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004fae:	f107 0314 	add.w	r3, r7, #20
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	480d      	ldr	r0, [pc, #52]	@ (8004fec <HAL_SPI_MspInit+0xc8>)
 8004fb6:	f002 f88f 	bl	80070d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004fba:	2380      	movs	r3, #128	@ 0x80
 8004fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbe:	2302      	movs	r3, #2
 8004fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc6:	2303      	movs	r3, #3
 8004fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004fca:	2305      	movs	r3, #5
 8004fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fce:	f107 0314 	add.w	r3, r7, #20
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	4806      	ldr	r0, [pc, #24]	@ (8004ff0 <HAL_SPI_MspInit+0xcc>)
 8004fd6:	f002 f87f 	bl	80070d8 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004fda:	bf00      	nop
 8004fdc:	3728      	adds	r7, #40	@ 0x28
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40013000 	.word	0x40013000
 8004fe8:	40023800 	.word	0x40023800
 8004fec:	40020400 	.word	0x40020400
 8004ff0:	40020000 	.word	0x40020000

08004ff4 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004ff4:	b480      	push	{r7}
 8004ff6:	b087      	sub	sp, #28
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a1f      	ldr	r2, [pc, #124]	@ (8005080 <HAL_TIM_PWM_MspInit+0x8c>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d10e      	bne.n	8005024 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8005006:	2300      	movs	r3, #0
 8005008:	617b      	str	r3, [r7, #20]
 800500a:	4b1e      	ldr	r3, [pc, #120]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 800500c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800500e:	4a1d      	ldr	r2, [pc, #116]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 8005010:	f043 0301 	orr.w	r3, r3, #1
 8005014:	6453      	str	r3, [r2, #68]	@ 0x44
 8005016:	4b1b      	ldr	r3, [pc, #108]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 8005018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800501a:	f003 0301 	and.w	r3, r3, #1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005022:	e026      	b.n	8005072 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a17      	ldr	r2, [pc, #92]	@ (8005088 <HAL_TIM_PWM_MspInit+0x94>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d10e      	bne.n	800504c <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800502e:	2300      	movs	r3, #0
 8005030:	613b      	str	r3, [r7, #16]
 8005032:	4b14      	ldr	r3, [pc, #80]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 8005034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005036:	4a13      	ldr	r2, [pc, #76]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 8005038:	f043 0308 	orr.w	r3, r3, #8
 800503c:	6413      	str	r3, [r2, #64]	@ 0x40
 800503e:	4b11      	ldr	r3, [pc, #68]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 8005040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	613b      	str	r3, [r7, #16]
 8005048:	693b      	ldr	r3, [r7, #16]
}
 800504a:	e012      	b.n	8005072 <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0e      	ldr	r2, [pc, #56]	@ (800508c <HAL_TIM_PWM_MspInit+0x98>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10d      	bne.n	8005072 <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	60fb      	str	r3, [r7, #12]
 800505a:	4b0a      	ldr	r3, [pc, #40]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 800505c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800505e:	4a09      	ldr	r2, [pc, #36]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 8005060:	f043 0302 	orr.w	r3, r3, #2
 8005064:	6453      	str	r3, [r2, #68]	@ 0x44
 8005066:	4b07      	ldr	r3, [pc, #28]	@ (8005084 <HAL_TIM_PWM_MspInit+0x90>)
 8005068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	60fb      	str	r3, [r7, #12]
 8005070:	68fb      	ldr	r3, [r7, #12]
}
 8005072:	bf00      	nop
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	40010000 	.word	0x40010000
 8005084:	40023800 	.word	0x40023800
 8005088:	40000c00 	.word	0x40000c00
 800508c:	40010400 	.word	0x40010400

08005090 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005090:	b480      	push	{r7}
 8005092:	b085      	sub	sp, #20
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a15      	ldr	r2, [pc, #84]	@ (80050f4 <HAL_TIM_Base_MspInit+0x64>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
 80050a6:	4b14      	ldr	r3, [pc, #80]	@ (80050f8 <HAL_TIM_Base_MspInit+0x68>)
 80050a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050aa:	4a13      	ldr	r2, [pc, #76]	@ (80050f8 <HAL_TIM_Base_MspInit+0x68>)
 80050ac:	f043 0304 	orr.w	r3, r3, #4
 80050b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80050b2:	4b11      	ldr	r3, [pc, #68]	@ (80050f8 <HAL_TIM_Base_MspInit+0x68>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b6:	f003 0304 	and.w	r3, r3, #4
 80050ba:	60fb      	str	r3, [r7, #12]
 80050bc:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 80050be:	e012      	b.n	80050e6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a0d      	ldr	r2, [pc, #52]	@ (80050fc <HAL_TIM_Base_MspInit+0x6c>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d10d      	bne.n	80050e6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	4b0a      	ldr	r3, [pc, #40]	@ (80050f8 <HAL_TIM_Base_MspInit+0x68>)
 80050d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050d2:	4a09      	ldr	r2, [pc, #36]	@ (80050f8 <HAL_TIM_Base_MspInit+0x68>)
 80050d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80050d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80050da:	4b07      	ldr	r3, [pc, #28]	@ (80050f8 <HAL_TIM_Base_MspInit+0x68>)
 80050dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e2:	60bb      	str	r3, [r7, #8]
 80050e4:	68bb      	ldr	r3, [r7, #8]
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	40000800 	.word	0x40000800
 80050f8:	40023800 	.word	0x40023800
 80050fc:	40014400 	.word	0x40014400

08005100 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b08e      	sub	sp, #56	@ 0x38
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005108:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800510c:	2200      	movs	r2, #0
 800510e:	601a      	str	r2, [r3, #0]
 8005110:	605a      	str	r2, [r3, #4]
 8005112:	609a      	str	r2, [r3, #8]
 8005114:	60da      	str	r2, [r3, #12]
 8005116:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a6a      	ldr	r2, [pc, #424]	@ (80052c8 <HAL_TIM_MspPostInit+0x1c8>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d11f      	bne.n	8005162 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005122:	2300      	movs	r3, #0
 8005124:	623b      	str	r3, [r7, #32]
 8005126:	4b69      	ldr	r3, [pc, #420]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800512a:	4a68      	ldr	r2, [pc, #416]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 800512c:	f043 0310 	orr.w	r3, r3, #16
 8005130:	6313      	str	r3, [r2, #48]	@ 0x30
 8005132:	4b66      	ldr	r3, [pc, #408]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005136:	f003 0310 	and.w	r3, r3, #16
 800513a:	623b      	str	r3, [r7, #32]
 800513c:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 800513e:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8005142:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005144:	2302      	movs	r3, #2
 8005146:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005148:	2300      	movs	r3, #0
 800514a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800514c:	2300      	movs	r3, #0
 800514e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8005150:	2301      	movs	r3, #1
 8005152:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005154:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005158:	4619      	mov	r1, r3
 800515a:	485d      	ldr	r0, [pc, #372]	@ (80052d0 <HAL_TIM_MspPostInit+0x1d0>)
 800515c:	f001 ffbc 	bl	80070d8 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8005160:	e0ae      	b.n	80052c0 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a5b      	ldr	r2, [pc, #364]	@ (80052d4 <HAL_TIM_MspPostInit+0x1d4>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d11f      	bne.n	80051ac <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800516c:	2300      	movs	r3, #0
 800516e:	61fb      	str	r3, [r7, #28]
 8005170:	4b56      	ldr	r3, [pc, #344]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005172:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005174:	4a55      	ldr	r2, [pc, #340]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005176:	f043 0308 	orr.w	r3, r3, #8
 800517a:	6313      	str	r3, [r2, #48]	@ 0x30
 800517c:	4b53      	ldr	r3, [pc, #332]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 800517e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005180:	f003 0308 	and.w	r3, r3, #8
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8005188:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800518c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518e:	2302      	movs	r3, #2
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005192:	2300      	movs	r3, #0
 8005194:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005196:	2300      	movs	r3, #0
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800519a:	2302      	movs	r3, #2
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800519e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051a2:	4619      	mov	r1, r3
 80051a4:	484c      	ldr	r0, [pc, #304]	@ (80052d8 <HAL_TIM_MspPostInit+0x1d8>)
 80051a6:	f001 ff97 	bl	80070d8 <HAL_GPIO_Init>
}
 80051aa:	e089      	b.n	80052c0 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a4a      	ldr	r2, [pc, #296]	@ (80052dc <HAL_TIM_MspPostInit+0x1dc>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d11f      	bne.n	80051f6 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80051b6:	2300      	movs	r3, #0
 80051b8:	61bb      	str	r3, [r7, #24]
 80051ba:	4b44      	ldr	r3, [pc, #272]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 80051bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051be:	4a43      	ldr	r2, [pc, #268]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 80051c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80051c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80051c6:	4b41      	ldr	r3, [pc, #260]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 80051c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ce:	61bb      	str	r3, [r7, #24]
 80051d0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 80051d2:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 80051d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d8:	2302      	movs	r3, #2
 80051da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051dc:	2300      	movs	r3, #0
 80051de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051e0:	2300      	movs	r3, #0
 80051e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80051e4:	2302      	movs	r3, #2
 80051e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80051e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051ec:	4619      	mov	r1, r3
 80051ee:	483c      	ldr	r0, [pc, #240]	@ (80052e0 <HAL_TIM_MspPostInit+0x1e0>)
 80051f0:	f001 ff72 	bl	80070d8 <HAL_GPIO_Init>
}
 80051f4:	e064      	b.n	80052c0 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a3a      	ldr	r2, [pc, #232]	@ (80052e4 <HAL_TIM_MspPostInit+0x1e4>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d13c      	bne.n	800527a <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005200:	2300      	movs	r3, #0
 8005202:	617b      	str	r3, [r7, #20]
 8005204:	4b31      	ldr	r3, [pc, #196]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005206:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005208:	4a30      	ldr	r2, [pc, #192]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 800520a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800520e:	6313      	str	r3, [r2, #48]	@ 0x30
 8005210:	4b2e      	ldr	r3, [pc, #184]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005212:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005214:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005218:	617b      	str	r3, [r7, #20]
 800521a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800521c:	2300      	movs	r3, #0
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	4b2a      	ldr	r3, [pc, #168]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005224:	4a29      	ldr	r2, [pc, #164]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005226:	f043 0304 	orr.w	r3, r3, #4
 800522a:	6313      	str	r3, [r2, #48]	@ 0x30
 800522c:	4b27      	ldr	r3, [pc, #156]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 800522e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	613b      	str	r3, [r7, #16]
 8005236:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005238:	23c0      	movs	r3, #192	@ 0xc0
 800523a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800523c:	2302      	movs	r3, #2
 800523e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005240:	2300      	movs	r3, #0
 8005242:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005244:	2300      	movs	r3, #0
 8005246:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005248:	2303      	movs	r3, #3
 800524a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800524c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005250:	4619      	mov	r1, r3
 8005252:	4825      	ldr	r0, [pc, #148]	@ (80052e8 <HAL_TIM_MspPostInit+0x1e8>)
 8005254:	f001 ff40 	bl	80070d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005258:	2340      	movs	r3, #64	@ 0x40
 800525a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525c:	2302      	movs	r3, #2
 800525e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005260:	2300      	movs	r3, #0
 8005262:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005264:	2300      	movs	r3, #0
 8005266:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005268:	2303      	movs	r3, #3
 800526a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800526c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005270:	4619      	mov	r1, r3
 8005272:	481e      	ldr	r0, [pc, #120]	@ (80052ec <HAL_TIM_MspPostInit+0x1ec>)
 8005274:	f001 ff30 	bl	80070d8 <HAL_GPIO_Init>
}
 8005278:	e022      	b.n	80052c0 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a1c      	ldr	r2, [pc, #112]	@ (80052f0 <HAL_TIM_MspPostInit+0x1f0>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d11d      	bne.n	80052c0 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8005284:	2300      	movs	r3, #0
 8005286:	60fb      	str	r3, [r7, #12]
 8005288:	4b10      	ldr	r3, [pc, #64]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	4a0f      	ldr	r2, [pc, #60]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 800528e:	f043 0320 	orr.w	r3, r3, #32
 8005292:	6313      	str	r3, [r2, #48]	@ 0x30
 8005294:	4b0d      	ldr	r3, [pc, #52]	@ (80052cc <HAL_TIM_MspPostInit+0x1cc>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	f003 0320 	and.w	r3, r3, #32
 800529c:	60fb      	str	r3, [r7, #12]
 800529e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80052a0:	2340      	movs	r3, #64	@ 0x40
 80052a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a4:	2302      	movs	r3, #2
 80052a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80052a8:	2301      	movs	r3, #1
 80052aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80052ac:	2302      	movs	r3, #2
 80052ae:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80052b0:	2303      	movs	r3, #3
 80052b2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80052b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052b8:	4619      	mov	r1, r3
 80052ba:	480e      	ldr	r0, [pc, #56]	@ (80052f4 <HAL_TIM_MspPostInit+0x1f4>)
 80052bc:	f001 ff0c 	bl	80070d8 <HAL_GPIO_Init>
}
 80052c0:	bf00      	nop
 80052c2:	3738      	adds	r7, #56	@ 0x38
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	40010000 	.word	0x40010000
 80052cc:	40023800 	.word	0x40023800
 80052d0:	40021000 	.word	0x40021000
 80052d4:	40000800 	.word	0x40000800
 80052d8:	40020c00 	.word	0x40020c00
 80052dc:	40000c00 	.word	0x40000c00
 80052e0:	40021c00 	.word	0x40021c00
 80052e4:	40010400 	.word	0x40010400
 80052e8:	40022000 	.word	0x40022000
 80052ec:	40020800 	.word	0x40020800
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40021400 	.word	0x40021400

080052f8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b08e      	sub	sp, #56	@ 0x38
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005300:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005304:	2200      	movs	r2, #0
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	605a      	str	r2, [r3, #4]
 800530a:	609a      	str	r2, [r3, #8]
 800530c:	60da      	str	r2, [r3, #12]
 800530e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a74      	ldr	r2, [pc, #464]	@ (80054e8 <HAL_UART_MspInit+0x1f0>)
 8005316:	4293      	cmp	r3, r2
 8005318:	f040 8083 	bne.w	8005422 <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800531c:	2300      	movs	r3, #0
 800531e:	623b      	str	r3, [r7, #32]
 8005320:	4b72      	ldr	r3, [pc, #456]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 8005322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005324:	4a71      	ldr	r2, [pc, #452]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 8005326:	f043 0310 	orr.w	r3, r3, #16
 800532a:	6453      	str	r3, [r2, #68]	@ 0x44
 800532c:	4b6f      	ldr	r3, [pc, #444]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800532e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005330:	f003 0310 	and.w	r3, r3, #16
 8005334:	623b      	str	r3, [r7, #32]
 8005336:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005338:	2300      	movs	r3, #0
 800533a:	61fb      	str	r3, [r7, #28]
 800533c:	4b6b      	ldr	r3, [pc, #428]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800533e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005340:	4a6a      	ldr	r2, [pc, #424]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 8005342:	f043 0302 	orr.w	r3, r3, #2
 8005346:	6313      	str	r3, [r2, #48]	@ 0x30
 8005348:	4b68      	ldr	r3, [pc, #416]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	f003 0302 	and.w	r3, r3, #2
 8005350:	61fb      	str	r3, [r7, #28]
 8005352:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005354:	2300      	movs	r3, #0
 8005356:	61bb      	str	r3, [r7, #24]
 8005358:	4b64      	ldr	r3, [pc, #400]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800535a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800535c:	4a63      	ldr	r2, [pc, #396]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800535e:	f043 0301 	orr.w	r3, r3, #1
 8005362:	6313      	str	r3, [r2, #48]	@ 0x30
 8005364:	4b61      	ldr	r3, [pc, #388]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 8005366:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005368:	f003 0301 	and.w	r3, r3, #1
 800536c:	61bb      	str	r3, [r7, #24]
 800536e:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8005370:	2380      	movs	r3, #128	@ 0x80
 8005372:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005374:	2302      	movs	r3, #2
 8005376:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005378:	2300      	movs	r3, #0
 800537a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800537c:	2303      	movs	r3, #3
 800537e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8005380:	2307      	movs	r3, #7
 8005382:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005384:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005388:	4619      	mov	r1, r3
 800538a:	4859      	ldr	r0, [pc, #356]	@ (80054f0 <HAL_UART_MspInit+0x1f8>)
 800538c:	f001 fea4 	bl	80070d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005390:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005396:	2302      	movs	r3, #2
 8005398:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800539a:	2300      	movs	r3, #0
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539e:	2303      	movs	r3, #3
 80053a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80053a2:	2307      	movs	r3, #7
 80053a4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80053a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053aa:	4619      	mov	r1, r3
 80053ac:	4851      	ldr	r0, [pc, #324]	@ (80054f4 <HAL_UART_MspInit+0x1fc>)
 80053ae:	f001 fe93 	bl	80070d8 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80053b2:	4b51      	ldr	r3, [pc, #324]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053b4:	4a51      	ldr	r2, [pc, #324]	@ (80054fc <HAL_UART_MspInit+0x204>)
 80053b6:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80053b8:	4b4f      	ldr	r3, [pc, #316]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053ba:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80053be:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053c0:	4b4d      	ldr	r3, [pc, #308]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053c2:	2200      	movs	r2, #0
 80053c4:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c6:	4b4c      	ldr	r3, [pc, #304]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053c8:	2200      	movs	r2, #0
 80053ca:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053cc:	4b4a      	ldr	r3, [pc, #296]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053ce:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053d2:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d4:	4b48      	ldr	r3, [pc, #288]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053d6:	2200      	movs	r2, #0
 80053d8:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053da:	4b47      	ldr	r3, [pc, #284]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053dc:	2200      	movs	r2, #0
 80053de:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80053e0:	4b45      	ldr	r3, [pc, #276]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053e2:	2200      	movs	r2, #0
 80053e4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053e6:	4b44      	ldr	r3, [pc, #272]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053e8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80053ec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053ee:	4b42      	ldr	r3, [pc, #264]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053f0:	2200      	movs	r2, #0
 80053f2:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80053f4:	4840      	ldr	r0, [pc, #256]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 80053f6:	f001 fa6d 	bl	80068d4 <HAL_DMA_Init>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d001      	beq.n	8005404 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8005400:	f7ff faa4 	bl	800494c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	4a3c      	ldr	r2, [pc, #240]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 8005408:	63da      	str	r2, [r3, #60]	@ 0x3c
 800540a:	4a3b      	ldr	r2, [pc, #236]	@ (80054f8 <HAL_UART_MspInit+0x200>)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8005410:	2200      	movs	r2, #0
 8005412:	2105      	movs	r1, #5
 8005414:	2025      	movs	r0, #37	@ 0x25
 8005416:	f001 fa26 	bl	8006866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800541a:	2025      	movs	r0, #37	@ 0x25
 800541c:	f001 fa3f 	bl	800689e <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 8005420:	e0df      	b.n	80055e2 <HAL_UART_MspInit+0x2ea>
  else if(huart->Instance==USART3)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a36      	ldr	r2, [pc, #216]	@ (8005500 <HAL_UART_MspInit+0x208>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d171      	bne.n	8005510 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 800542c:	2300      	movs	r3, #0
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	4b2e      	ldr	r3, [pc, #184]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 8005432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005434:	4a2d      	ldr	r2, [pc, #180]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 8005436:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800543a:	6413      	str	r3, [r2, #64]	@ 0x40
 800543c:	4b2b      	ldr	r3, [pc, #172]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800543e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005440:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005444:	617b      	str	r3, [r7, #20]
 8005446:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005448:	2300      	movs	r3, #0
 800544a:	613b      	str	r3, [r7, #16]
 800544c:	4b27      	ldr	r3, [pc, #156]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800544e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005450:	4a26      	ldr	r2, [pc, #152]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 8005452:	f043 0304 	orr.w	r3, r3, #4
 8005456:	6313      	str	r3, [r2, #48]	@ 0x30
 8005458:	4b24      	ldr	r3, [pc, #144]	@ (80054ec <HAL_UART_MspInit+0x1f4>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	613b      	str	r3, [r7, #16]
 8005462:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8005464:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005468:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800546a:	2302      	movs	r3, #2
 800546c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800546e:	2300      	movs	r3, #0
 8005470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005472:	2303      	movs	r3, #3
 8005474:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005476:	2307      	movs	r3, #7
 8005478:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800547a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800547e:	4619      	mov	r1, r3
 8005480:	4820      	ldr	r0, [pc, #128]	@ (8005504 <HAL_UART_MspInit+0x20c>)
 8005482:	f001 fe29 	bl	80070d8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005486:	4b20      	ldr	r3, [pc, #128]	@ (8005508 <HAL_UART_MspInit+0x210>)
 8005488:	4a20      	ldr	r2, [pc, #128]	@ (800550c <HAL_UART_MspInit+0x214>)
 800548a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800548c:	4b1e      	ldr	r3, [pc, #120]	@ (8005508 <HAL_UART_MspInit+0x210>)
 800548e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005492:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005494:	4b1c      	ldr	r3, [pc, #112]	@ (8005508 <HAL_UART_MspInit+0x210>)
 8005496:	2200      	movs	r2, #0
 8005498:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800549a:	4b1b      	ldr	r3, [pc, #108]	@ (8005508 <HAL_UART_MspInit+0x210>)
 800549c:	2200      	movs	r2, #0
 800549e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80054a0:	4b19      	ldr	r3, [pc, #100]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80054a6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80054a8:	4b17      	ldr	r3, [pc, #92]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80054ae:	4b16      	ldr	r3, [pc, #88]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80054b4:	4b14      	ldr	r3, [pc, #80]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80054ba:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80054bc:	4b12      	ldr	r3, [pc, #72]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054be:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80054c2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80054c4:	4b10      	ldr	r3, [pc, #64]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054c6:	2200      	movs	r2, #0
 80054c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80054ca:	480f      	ldr	r0, [pc, #60]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054cc:	f001 fa02 	bl	80068d4 <HAL_DMA_Init>
 80054d0:	4603      	mov	r3, r0
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d001      	beq.n	80054da <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 80054d6:	f7ff fa39 	bl	800494c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054de:	63da      	str	r2, [r3, #60]	@ 0x3c
 80054e0:	4a09      	ldr	r2, [pc, #36]	@ (8005508 <HAL_UART_MspInit+0x210>)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80054e6:	e07c      	b.n	80055e2 <HAL_UART_MspInit+0x2ea>
 80054e8:	40011000 	.word	0x40011000
 80054ec:	40023800 	.word	0x40023800
 80054f0:	40020400 	.word	0x40020400
 80054f4:	40020000 	.word	0x40020000
 80054f8:	20000c94 	.word	0x20000c94
 80054fc:	40026440 	.word	0x40026440
 8005500:	40004800 	.word	0x40004800
 8005504:	40020800 	.word	0x40020800
 8005508:	20000cf4 	.word	0x20000cf4
 800550c:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	4a35      	ldr	r2, [pc, #212]	@ (80055ec <HAL_UART_MspInit+0x2f4>)
 8005516:	4293      	cmp	r3, r2
 8005518:	d163      	bne.n	80055e2 <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 800551a:	2300      	movs	r3, #0
 800551c:	60fb      	str	r3, [r7, #12]
 800551e:	4b34      	ldr	r3, [pc, #208]	@ (80055f0 <HAL_UART_MspInit+0x2f8>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005522:	4a33      	ldr	r2, [pc, #204]	@ (80055f0 <HAL_UART_MspInit+0x2f8>)
 8005524:	f043 0320 	orr.w	r3, r3, #32
 8005528:	6453      	str	r3, [r2, #68]	@ 0x44
 800552a:	4b31      	ldr	r3, [pc, #196]	@ (80055f0 <HAL_UART_MspInit+0x2f8>)
 800552c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552e:	f003 0320 	and.w	r3, r3, #32
 8005532:	60fb      	str	r3, [r7, #12]
 8005534:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005536:	2300      	movs	r3, #0
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	4b2d      	ldr	r3, [pc, #180]	@ (80055f0 <HAL_UART_MspInit+0x2f8>)
 800553c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800553e:	4a2c      	ldr	r2, [pc, #176]	@ (80055f0 <HAL_UART_MspInit+0x2f8>)
 8005540:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005544:	6313      	str	r3, [r2, #48]	@ 0x30
 8005546:	4b2a      	ldr	r3, [pc, #168]	@ (80055f0 <HAL_UART_MspInit+0x2f8>)
 8005548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800554a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800554e:	60bb      	str	r3, [r7, #8]
 8005550:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 8005552:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8005556:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005558:	2302      	movs	r3, #2
 800555a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800555c:	2300      	movs	r3, #0
 800555e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005560:	2303      	movs	r3, #3
 8005562:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005564:	2308      	movs	r3, #8
 8005566:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005568:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800556c:	4619      	mov	r1, r3
 800556e:	4821      	ldr	r0, [pc, #132]	@ (80055f4 <HAL_UART_MspInit+0x2fc>)
 8005570:	f001 fdb2 	bl	80070d8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8005574:	4b20      	ldr	r3, [pc, #128]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 8005576:	4a21      	ldr	r2, [pc, #132]	@ (80055fc <HAL_UART_MspInit+0x304>)
 8005578:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 800557a:	4b1f      	ldr	r3, [pc, #124]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 800557c:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 8005580:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005582:	4b1d      	ldr	r3, [pc, #116]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 8005584:	2200      	movs	r2, #0
 8005586:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005588:	4b1b      	ldr	r3, [pc, #108]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 800558a:	2200      	movs	r2, #0
 800558c:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 800558e:	4b1a      	ldr	r3, [pc, #104]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 8005590:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005594:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005596:	4b18      	ldr	r3, [pc, #96]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 8005598:	2200      	movs	r2, #0
 800559a:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800559c:	4b16      	ldr	r3, [pc, #88]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 800559e:	2200      	movs	r2, #0
 80055a0:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80055a2:	4b15      	ldr	r3, [pc, #84]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80055a8:	4b13      	ldr	r3, [pc, #76]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 80055aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80055ae:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80055b0:	4b11      	ldr	r3, [pc, #68]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 80055b2:	2200      	movs	r2, #0
 80055b4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80055b6:	4810      	ldr	r0, [pc, #64]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 80055b8:	f001 f98c 	bl	80068d4 <HAL_DMA_Init>
 80055bc:	4603      	mov	r3, r0
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d001      	beq.n	80055c6 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 80055c2:	f7ff f9c3 	bl	800494c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a0b      	ldr	r2, [pc, #44]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 80055ca:	63da      	str	r2, [r3, #60]	@ 0x3c
 80055cc:	4a0a      	ldr	r2, [pc, #40]	@ (80055f8 <HAL_UART_MspInit+0x300>)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 80055d2:	2200      	movs	r2, #0
 80055d4:	2105      	movs	r1, #5
 80055d6:	2047      	movs	r0, #71	@ 0x47
 80055d8:	f001 f945 	bl	8006866 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80055dc:	2047      	movs	r0, #71	@ 0x47
 80055de:	f001 f95e 	bl	800689e <HAL_NVIC_EnableIRQ>
}
 80055e2:	bf00      	nop
 80055e4:	3738      	adds	r7, #56	@ 0x38
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	40011400 	.word	0x40011400
 80055f0:	40023800 	.word	0x40023800
 80055f4:	40021800 	.word	0x40021800
 80055f8:	20000d54 	.word	0x20000d54
 80055fc:	40026428 	.word	0x40026428

08005600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005604:	f002 fcde 	bl	8007fc4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <NMI_Handler+0x8>

0800560c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800560c:	b480      	push	{r7}
 800560e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005610:	bf00      	nop
 8005612:	e7fd      	b.n	8005610 <HardFault_Handler+0x4>

08005614 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005618:	bf00      	nop
 800561a:	e7fd      	b.n	8005618 <MemManage_Handler+0x4>

0800561c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800561c:	b480      	push	{r7}
 800561e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005620:	bf00      	nop
 8005622:	e7fd      	b.n	8005620 <BusFault_Handler+0x4>

08005624 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005624:	b480      	push	{r7}
 8005626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005628:	bf00      	nop
 800562a:	e7fd      	b.n	8005628 <UsageFault_Handler+0x4>

0800562c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800562c:	b480      	push	{r7}
 800562e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005630:	bf00      	nop
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800563a:	b580      	push	{r7, lr}
 800563c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800563e:	f000 f9b1 	bl	80059a4 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8005642:	f006 fe8f 	bl	800c364 <xTaskGetSchedulerState>
 8005646:	4603      	mov	r3, r0
 8005648:	2b01      	cmp	r3, #1
 800564a:	d001      	beq.n	8005650 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800564c:	f007 fd6c 	bl	800d128 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005650:	bf00      	nop
 8005652:	bd80      	pop	{r7, pc}

08005654 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005658:	2008      	movs	r0, #8
 800565a:	f001 fef3 	bl	8007444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800565e:	bf00      	nop
 8005660:	bd80      	pop	{r7, pc}

08005662 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8005662:	b580      	push	{r7, lr}
 8005664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 8005666:	2010      	movs	r0, #16
 8005668:	f001 feec 	bl	8007444 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800566c:	bf00      	nop
 800566e:	bd80      	pop	{r7, pc}

08005670 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005674:	4802      	ldr	r0, [pc, #8]	@ (8005680 <DMA1_Stream1_IRQHandler+0x10>)
 8005676:	f001 fac5 	bl	8006c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800567a:	bf00      	nop
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000cf4 	.word	0x20000cf4

08005684 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005688:	4802      	ldr	r0, [pc, #8]	@ (8005694 <CAN1_RX0_IRQHandler+0x10>)
 800568a:	f000 fde1 	bl	8006250 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800568e:	bf00      	nop
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	20000958 	.word	0x20000958

08005698 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800569c:	4802      	ldr	r0, [pc, #8]	@ (80056a8 <USART1_IRQHandler+0x10>)
 800569e:	f003 fefb 	bl	8009498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80056a2:	bf00      	nop
 80056a4:	bd80      	pop	{r7, pc}
 80056a6:	bf00      	nop
 80056a8:	20000bbc 	.word	0x20000bbc

080056ac <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80056b0:	4802      	ldr	r0, [pc, #8]	@ (80056bc <DMA2_Stream1_IRQHandler+0x10>)
 80056b2:	f001 faa7 	bl	8006c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80056b6:	bf00      	nop
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000d54 	.word	0x20000d54

080056c0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80056c4:	4802      	ldr	r0, [pc, #8]	@ (80056d0 <DMA2_Stream2_IRQHandler+0x10>)
 80056c6:	f001 fa9d 	bl	8006c04 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80056ca:	bf00      	nop
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	20000c94 	.word	0x20000c94

080056d4 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80056d8:	4802      	ldr	r0, [pc, #8]	@ (80056e4 <CAN2_RX0_IRQHandler+0x10>)
 80056da:	f000 fdb9 	bl	8006250 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80056de:	bf00      	nop
 80056e0:	bd80      	pop	{r7, pc}
 80056e2:	bf00      	nop
 80056e4:	20000980 	.word	0x20000980

080056e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80056ec:	4802      	ldr	r0, [pc, #8]	@ (80056f8 <USART6_IRQHandler+0x10>)
 80056ee:	f003 fed3 	bl	8009498 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80056f2:	bf00      	nop
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20000c4c 	.word	0x20000c4c

080056fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80056fc:	b480      	push	{r7}
 80056fe:	af00      	add	r7, sp, #0
  return 1;
 8005700:	2301      	movs	r3, #1
}
 8005702:	4618      	mov	r0, r3
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <_kill>:

int _kill(int pid, int sig)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b082      	sub	sp, #8
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005716:	f008 fcc7 	bl	800e0a8 <__errno>
 800571a:	4603      	mov	r3, r0
 800571c:	2216      	movs	r2, #22
 800571e:	601a      	str	r2, [r3, #0]
  return -1;
 8005720:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005724:	4618      	mov	r0, r3
 8005726:	3708      	adds	r7, #8
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <_exit>:

void _exit (int status)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005734:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f7ff ffe7 	bl	800570c <_kill>
  while (1) {}    /* Make sure we hang here */
 800573e:	bf00      	nop
 8005740:	e7fd      	b.n	800573e <_exit+0x12>

08005742 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005742:	b580      	push	{r7, lr}
 8005744:	b086      	sub	sp, #24
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800574e:	2300      	movs	r3, #0
 8005750:	617b      	str	r3, [r7, #20]
 8005752:	e00a      	b.n	800576a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005754:	f3af 8000 	nop.w
 8005758:	4601      	mov	r1, r0
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	1c5a      	adds	r2, r3, #1
 800575e:	60ba      	str	r2, [r7, #8]
 8005760:	b2ca      	uxtb	r2, r1
 8005762:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	3301      	adds	r3, #1
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	697a      	ldr	r2, [r7, #20]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	429a      	cmp	r2, r3
 8005770:	dbf0      	blt.n	8005754 <_read+0x12>
  }

  return len;
 8005772:	687b      	ldr	r3, [r7, #4]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3718      	adds	r7, #24
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b086      	sub	sp, #24
 8005780:	af00      	add	r7, sp, #0
 8005782:	60f8      	str	r0, [r7, #12]
 8005784:	60b9      	str	r1, [r7, #8]
 8005786:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005788:	2300      	movs	r3, #0
 800578a:	617b      	str	r3, [r7, #20]
 800578c:	e009      	b.n	80057a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	1c5a      	adds	r2, r3, #1
 8005792:	60ba      	str	r2, [r7, #8]
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	4618      	mov	r0, r3
 8005798:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	3301      	adds	r3, #1
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	697a      	ldr	r2, [r7, #20]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	429a      	cmp	r2, r3
 80057a8:	dbf1      	blt.n	800578e <_write+0x12>
  }
  return len;
 80057aa:	687b      	ldr	r3, [r7, #4]
}
 80057ac:	4618      	mov	r0, r3
 80057ae:	3718      	adds	r7, #24
 80057b0:	46bd      	mov	sp, r7
 80057b2:	bd80      	pop	{r7, pc}

080057b4 <_close>:

int _close(int file)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80057bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
 80057d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80057dc:	605a      	str	r2, [r3, #4]
  return 0;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	370c      	adds	r7, #12
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <_isatty>:

int _isatty(int file)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b083      	sub	sp, #12
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80057f4:	2301      	movs	r3, #1
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005802:	b480      	push	{r7}
 8005804:	b085      	sub	sp, #20
 8005806:	af00      	add	r7, sp, #0
 8005808:	60f8      	str	r0, [r7, #12]
 800580a:	60b9      	str	r1, [r7, #8]
 800580c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800581c:	b580      	push	{r7, lr}
 800581e:	b086      	sub	sp, #24
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005824:	4a14      	ldr	r2, [pc, #80]	@ (8005878 <_sbrk+0x5c>)
 8005826:	4b15      	ldr	r3, [pc, #84]	@ (800587c <_sbrk+0x60>)
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005830:	4b13      	ldr	r3, [pc, #76]	@ (8005880 <_sbrk+0x64>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	2b00      	cmp	r3, #0
 8005836:	d102      	bne.n	800583e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005838:	4b11      	ldr	r3, [pc, #68]	@ (8005880 <_sbrk+0x64>)
 800583a:	4a12      	ldr	r2, [pc, #72]	@ (8005884 <_sbrk+0x68>)
 800583c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800583e:	4b10      	ldr	r3, [pc, #64]	@ (8005880 <_sbrk+0x64>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	4413      	add	r3, r2
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	429a      	cmp	r2, r3
 800584a:	d207      	bcs.n	800585c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800584c:	f008 fc2c 	bl	800e0a8 <__errno>
 8005850:	4603      	mov	r3, r0
 8005852:	220c      	movs	r2, #12
 8005854:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005856:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800585a:	e009      	b.n	8005870 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800585c:	4b08      	ldr	r3, [pc, #32]	@ (8005880 <_sbrk+0x64>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005862:	4b07      	ldr	r3, [pc, #28]	@ (8005880 <_sbrk+0x64>)
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	4413      	add	r3, r2
 800586a:	4a05      	ldr	r2, [pc, #20]	@ (8005880 <_sbrk+0x64>)
 800586c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800586e:	68fb      	ldr	r3, [r7, #12]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3718      	adds	r7, #24
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	20020000 	.word	0x20020000
 800587c:	00000400 	.word	0x00000400
 8005880:	20000dc4 	.word	0x20000dc4
 8005884:	20005900 	.word	0x20005900

08005888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005888:	b480      	push	{r7}
 800588a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800588c:	4b06      	ldr	r3, [pc, #24]	@ (80058a8 <SystemInit+0x20>)
 800588e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005892:	4a05      	ldr	r2, [pc, #20]	@ (80058a8 <SystemInit+0x20>)
 8005894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800589c:	bf00      	nop
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	e000ed00 	.word	0xe000ed00

080058ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80058ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80058e4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80058b0:	f7ff ffea 	bl	8005888 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80058b4:	480c      	ldr	r0, [pc, #48]	@ (80058e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80058b6:	490d      	ldr	r1, [pc, #52]	@ (80058ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80058b8:	4a0d      	ldr	r2, [pc, #52]	@ (80058f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80058ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80058bc:	e002      	b.n	80058c4 <LoopCopyDataInit>

080058be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80058be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80058c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80058c2:	3304      	adds	r3, #4

080058c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80058c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80058c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80058c8:	d3f9      	bcc.n	80058be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80058ca:	4a0a      	ldr	r2, [pc, #40]	@ (80058f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80058cc:	4c0a      	ldr	r4, [pc, #40]	@ (80058f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80058ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80058d0:	e001      	b.n	80058d6 <LoopFillZerobss>

080058d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80058d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80058d4:	3204      	adds	r2, #4

080058d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80058d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80058d8:	d3fb      	bcc.n	80058d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80058da:	f008 fbeb 	bl	800e0b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80058de:	f7fe f9d5 	bl	8003c8c <main>
  bx  lr    
 80058e2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80058e4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80058e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80058ec:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 80058f0:	080109f4 	.word	0x080109f4
  ldr r2, =_sbss
 80058f4:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 80058f8:	20005900 	.word	0x20005900

080058fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80058fc:	e7fe      	b.n	80058fc <ADC_IRQHandler>
	...

08005900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005904:	4b0e      	ldr	r3, [pc, #56]	@ (8005940 <HAL_Init+0x40>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	4a0d      	ldr	r2, [pc, #52]	@ (8005940 <HAL_Init+0x40>)
 800590a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800590e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005910:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <HAL_Init+0x40>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	4a0a      	ldr	r2, [pc, #40]	@ (8005940 <HAL_Init+0x40>)
 8005916:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800591a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800591c:	4b08      	ldr	r3, [pc, #32]	@ (8005940 <HAL_Init+0x40>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	4a07      	ldr	r2, [pc, #28]	@ (8005940 <HAL_Init+0x40>)
 8005922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005928:	2003      	movs	r0, #3
 800592a:	f000 ff91 	bl	8006850 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800592e:	200f      	movs	r0, #15
 8005930:	f000 f808 	bl	8005944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005934:	f7ff f9b0 	bl	8004c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005938:	2300      	movs	r3, #0
}
 800593a:	4618      	mov	r0, r3
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	40023c00 	.word	0x40023c00

08005944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800594c:	4b12      	ldr	r3, [pc, #72]	@ (8005998 <HAL_InitTick+0x54>)
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	4b12      	ldr	r3, [pc, #72]	@ (800599c <HAL_InitTick+0x58>)
 8005952:	781b      	ldrb	r3, [r3, #0]
 8005954:	4619      	mov	r1, r3
 8005956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800595a:	fbb3 f3f1 	udiv	r3, r3, r1
 800595e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005962:	4618      	mov	r0, r3
 8005964:	f000 ffa9 	bl	80068ba <HAL_SYSTICK_Config>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d001      	beq.n	8005972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	e00e      	b.n	8005990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2b0f      	cmp	r3, #15
 8005976:	d80a      	bhi.n	800598e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005978:	2200      	movs	r2, #0
 800597a:	6879      	ldr	r1, [r7, #4]
 800597c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005980:	f000 ff71 	bl	8006866 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005984:	4a06      	ldr	r2, [pc, #24]	@ (80059a0 <HAL_InitTick+0x5c>)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800598a:	2300      	movs	r3, #0
 800598c:	e000      	b.n	8005990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
}
 8005990:	4618      	mov	r0, r3
 8005992:	3708      	adds	r7, #8
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000040 	.word	0x20000040
 800599c:	20000048 	.word	0x20000048
 80059a0:	20000044 	.word	0x20000044

080059a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a4:	b480      	push	{r7}
 80059a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059a8:	4b06      	ldr	r3, [pc, #24]	@ (80059c4 <HAL_IncTick+0x20>)
 80059aa:	781b      	ldrb	r3, [r3, #0]
 80059ac:	461a      	mov	r2, r3
 80059ae:	4b06      	ldr	r3, [pc, #24]	@ (80059c8 <HAL_IncTick+0x24>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4413      	add	r3, r2
 80059b4:	4a04      	ldr	r2, [pc, #16]	@ (80059c8 <HAL_IncTick+0x24>)
 80059b6:	6013      	str	r3, [r2, #0]
}
 80059b8:	bf00      	nop
 80059ba:	46bd      	mov	sp, r7
 80059bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c0:	4770      	bx	lr
 80059c2:	bf00      	nop
 80059c4:	20000048 	.word	0x20000048
 80059c8:	20000dc8 	.word	0x20000dc8

080059cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059cc:	b480      	push	{r7}
 80059ce:	af00      	add	r7, sp, #0
  return uwTick;
 80059d0:	4b03      	ldr	r3, [pc, #12]	@ (80059e0 <HAL_GetTick+0x14>)
 80059d2:	681b      	ldr	r3, [r3, #0]
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	20000dc8 	.word	0x20000dc8

080059e4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b084      	sub	sp, #16
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d101      	bne.n	80059f6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	e0ed      	b.n	8005bd2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d102      	bne.n	8005a08 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f7ff f974 	bl	8004cf0 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f042 0201 	orr.w	r2, r2, #1
 8005a16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a18:	f7ff ffd8 	bl	80059cc <HAL_GetTick>
 8005a1c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a1e:	e012      	b.n	8005a46 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a20:	f7ff ffd4 	bl	80059cc <HAL_GetTick>
 8005a24:	4602      	mov	r2, r0
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	1ad3      	subs	r3, r2, r3
 8005a2a:	2b0a      	cmp	r3, #10
 8005a2c:	d90b      	bls.n	8005a46 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a32:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2205      	movs	r2, #5
 8005a3e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e0c5      	b.n	8005bd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	685b      	ldr	r3, [r3, #4]
 8005a4c:	f003 0301 	and.w	r3, r3, #1
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d0e5      	beq.n	8005a20 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	681a      	ldr	r2, [r3, #0]
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f022 0202 	bic.w	r2, r2, #2
 8005a62:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005a64:	f7ff ffb2 	bl	80059cc <HAL_GetTick>
 8005a68:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a6a:	e012      	b.n	8005a92 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005a6c:	f7ff ffae 	bl	80059cc <HAL_GetTick>
 8005a70:	4602      	mov	r2, r0
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	1ad3      	subs	r3, r2, r3
 8005a76:	2b0a      	cmp	r3, #10
 8005a78:	d90b      	bls.n	8005a92 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a7e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2205      	movs	r2, #5
 8005a8a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e09f      	b.n	8005bd2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f003 0302 	and.w	r3, r3, #2
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d1e5      	bne.n	8005a6c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	7e1b      	ldrb	r3, [r3, #24]
 8005aa4:	2b01      	cmp	r3, #1
 8005aa6:	d108      	bne.n	8005aba <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	e007      	b.n	8005aca <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	681a      	ldr	r2, [r3, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005ac8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	7e5b      	ldrb	r3, [r3, #25]
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d108      	bne.n	8005ae4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681a      	ldr	r2, [r3, #0]
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e007      	b.n	8005af4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005af2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	7e9b      	ldrb	r3, [r3, #26]
 8005af8:	2b01      	cmp	r3, #1
 8005afa:	d108      	bne.n	8005b0e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	681a      	ldr	r2, [r3, #0]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f042 0220 	orr.w	r2, r2, #32
 8005b0a:	601a      	str	r2, [r3, #0]
 8005b0c:	e007      	b.n	8005b1e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0220 	bic.w	r2, r2, #32
 8005b1c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	7edb      	ldrb	r3, [r3, #27]
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d108      	bne.n	8005b38 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f022 0210 	bic.w	r2, r2, #16
 8005b34:	601a      	str	r2, [r3, #0]
 8005b36:	e007      	b.n	8005b48 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	681a      	ldr	r2, [r3, #0]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f042 0210 	orr.w	r2, r2, #16
 8005b46:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	7f1b      	ldrb	r3, [r3, #28]
 8005b4c:	2b01      	cmp	r3, #1
 8005b4e:	d108      	bne.n	8005b62 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f042 0208 	orr.w	r2, r2, #8
 8005b5e:	601a      	str	r2, [r3, #0]
 8005b60:	e007      	b.n	8005b72 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f022 0208 	bic.w	r2, r2, #8
 8005b70:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	7f5b      	ldrb	r3, [r3, #29]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d108      	bne.n	8005b8c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f042 0204 	orr.w	r2, r2, #4
 8005b88:	601a      	str	r2, [r3, #0]
 8005b8a:	e007      	b.n	8005b9c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0204 	bic.w	r2, r2, #4
 8005b9a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	689a      	ldr	r2, [r3, #8]
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	ea42 0103 	orr.w	r1, r2, r3
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	1e5a      	subs	r2, r3, #1
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	430a      	orrs	r2, r1
 8005bc0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
	...

08005bdc <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8005bdc:	b480      	push	{r7}
 8005bde:	b087      	sub	sp, #28
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
 8005be4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005bec:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	d003      	beq.n	8005bfc <HAL_CAN_ConfigFilter+0x20>
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	2b02      	cmp	r3, #2
 8005bf8:	f040 80be 	bne.w	8005d78 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005bfc:	4b65      	ldr	r3, [pc, #404]	@ (8005d94 <HAL_CAN_ConfigFilter+0x1b8>)
 8005bfe:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c06:	f043 0201 	orr.w	r2, r3, #1
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005c16:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8005c20:	693b      	ldr	r3, [r7, #16]
 8005c22:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c2a:	021b      	lsls	r3, r3, #8
 8005c2c:	431a      	orrs	r2, r3
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	695b      	ldr	r3, [r3, #20]
 8005c38:	f003 031f 	and.w	r3, r3, #31
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	43db      	mvns	r3, r3
 8005c4e:	401a      	ands	r2, r3
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d123      	bne.n	8005ca6 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8005c5e:	693b      	ldr	r3, [r7, #16]
 8005c60:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	43db      	mvns	r3, r3
 8005c68:	401a      	ands	r2, r3
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	68db      	ldr	r3, [r3, #12]
 8005c74:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	685b      	ldr	r3, [r3, #4]
 8005c7a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c7c:	683a      	ldr	r2, [r7, #0]
 8005c7e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8005c80:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	3248      	adds	r2, #72	@ 0x48
 8005c86:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005c9a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005c9c:	6939      	ldr	r1, [r7, #16]
 8005c9e:	3348      	adds	r3, #72	@ 0x48
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	440b      	add	r3, r1
 8005ca4:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d122      	bne.n	8005cf4 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	431a      	orrs	r2, r3
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	685b      	ldr	r3, [r3, #4]
 8005cc8:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005cca:	683a      	ldr	r2, [r7, #0]
 8005ccc:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8005cce:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	3248      	adds	r2, #72	@ 0x48
 8005cd4:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	689b      	ldr	r3, [r3, #8]
 8005cdc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	68db      	ldr	r3, [r3, #12]
 8005ce2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005ce4:	683b      	ldr	r3, [r7, #0]
 8005ce6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005ce8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005cea:	6939      	ldr	r1, [r7, #16]
 8005cec:	3348      	adds	r3, #72	@ 0x48
 8005cee:	00db      	lsls	r3, r3, #3
 8005cf0:	440b      	add	r3, r1
 8005cf2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d109      	bne.n	8005d10 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	401a      	ands	r2, r3
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005d0e:	e007      	b.n	8005d20 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	431a      	orrs	r2, r3
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	691b      	ldr	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d109      	bne.n	8005d3c <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	43db      	mvns	r3, r3
 8005d32:	401a      	ands	r2, r3
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005d3a:	e007      	b.n	8005d4c <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	431a      	orrs	r2, r3
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	6a1b      	ldr	r3, [r3, #32]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d107      	bne.n	8005d64 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005d54:	693b      	ldr	r3, [r7, #16]
 8005d56:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	431a      	orrs	r2, r3
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005d6a:	f023 0201 	bic.w	r2, r3, #1
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005d74:	2300      	movs	r3, #0
 8005d76:	e006      	b.n	8005d86 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
  }
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	371c      	adds	r7, #28
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40006400 	.word	0x40006400

08005d98 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b084      	sub	sp, #16
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005da6:	b2db      	uxtb	r3, r3
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d12e      	bne.n	8005e0a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f022 0201 	bic.w	r2, r2, #1
 8005dc2:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005dc4:	f7ff fe02 	bl	80059cc <HAL_GetTick>
 8005dc8:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005dca:	e012      	b.n	8005df2 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005dcc:	f7ff fdfe 	bl	80059cc <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	2b0a      	cmp	r3, #10
 8005dd8:	d90b      	bls.n	8005df2 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dde:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2205      	movs	r2, #5
 8005dea:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005dee:	2301      	movs	r3, #1
 8005df0:	e012      	b.n	8005e18 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f003 0301 	and.w	r3, r3, #1
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d1e5      	bne.n	8005dcc <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	e006      	b.n	8005e18 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e0e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
  }
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3710      	adds	r7, #16
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b089      	sub	sp, #36	@ 0x24
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005e34:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005e3e:	7ffb      	ldrb	r3, [r7, #31]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d003      	beq.n	8005e4c <HAL_CAN_AddTxMessage+0x2c>
 8005e44:	7ffb      	ldrb	r3, [r7, #31]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	f040 80ad 	bne.w	8005fa6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005e4c:	69bb      	ldr	r3, [r7, #24]
 8005e4e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d10a      	bne.n	8005e6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005e56:	69bb      	ldr	r3, [r7, #24]
 8005e58:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d105      	bne.n	8005e6c <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 8095 	beq.w	8005f96 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	0e1b      	lsrs	r3, r3, #24
 8005e70:	f003 0303 	and.w	r3, r3, #3
 8005e74:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005e76:	2201      	movs	r2, #1
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	409a      	lsls	r2, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	689b      	ldr	r3, [r3, #8]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d10d      	bne.n	8005ea4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005e8e:	68bb      	ldr	r3, [r7, #8]
 8005e90:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005e92:	68f9      	ldr	r1, [r7, #12]
 8005e94:	6809      	ldr	r1, [r1, #0]
 8005e96:	431a      	orrs	r2, r3
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	3318      	adds	r3, #24
 8005e9c:	011b      	lsls	r3, r3, #4
 8005e9e:	440b      	add	r3, r1
 8005ea0:	601a      	str	r2, [r3, #0]
 8005ea2:	e00f      	b.n	8005ec4 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005eae:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005eb0:	68bb      	ldr	r3, [r7, #8]
 8005eb2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005eb4:	68f9      	ldr	r1, [r7, #12]
 8005eb6:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005eb8:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	3318      	adds	r3, #24
 8005ebe:	011b      	lsls	r3, r3, #4
 8005ec0:	440b      	add	r3, r1
 8005ec2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6819      	ldr	r1, [r3, #0]
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	697b      	ldr	r3, [r7, #20]
 8005ece:	3318      	adds	r3, #24
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	440b      	add	r3, r1
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	7d1b      	ldrb	r3, [r3, #20]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d111      	bne.n	8005f04 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681a      	ldr	r2, [r3, #0]
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	3318      	adds	r3, #24
 8005ee8:	011b      	lsls	r3, r3, #4
 8005eea:	4413      	add	r3, r2
 8005eec:	3304      	adds	r3, #4
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	6811      	ldr	r1, [r2, #0]
 8005ef4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	3318      	adds	r3, #24
 8005efc:	011b      	lsls	r3, r3, #4
 8005efe:	440b      	add	r3, r1
 8005f00:	3304      	adds	r3, #4
 8005f02:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	3307      	adds	r3, #7
 8005f08:	781b      	ldrb	r3, [r3, #0]
 8005f0a:	061a      	lsls	r2, r3, #24
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	3306      	adds	r3, #6
 8005f10:	781b      	ldrb	r3, [r3, #0]
 8005f12:	041b      	lsls	r3, r3, #16
 8005f14:	431a      	orrs	r2, r3
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	3305      	adds	r3, #5
 8005f1a:	781b      	ldrb	r3, [r3, #0]
 8005f1c:	021b      	lsls	r3, r3, #8
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	687a      	ldr	r2, [r7, #4]
 8005f22:	3204      	adds	r2, #4
 8005f24:	7812      	ldrb	r2, [r2, #0]
 8005f26:	4610      	mov	r0, r2
 8005f28:	68fa      	ldr	r2, [r7, #12]
 8005f2a:	6811      	ldr	r1, [r2, #0]
 8005f2c:	ea43 0200 	orr.w	r2, r3, r0
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	011b      	lsls	r3, r3, #4
 8005f34:	440b      	add	r3, r1
 8005f36:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005f3a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	3303      	adds	r3, #3
 8005f40:	781b      	ldrb	r3, [r3, #0]
 8005f42:	061a      	lsls	r2, r3, #24
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	3302      	adds	r3, #2
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	041b      	lsls	r3, r3, #16
 8005f4c:	431a      	orrs	r2, r3
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3301      	adds	r3, #1
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	4313      	orrs	r3, r2
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	4610      	mov	r0, r2
 8005f5e:	68fa      	ldr	r2, [r7, #12]
 8005f60:	6811      	ldr	r1, [r2, #0]
 8005f62:	ea43 0200 	orr.w	r2, r3, r0
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	440b      	add	r3, r1
 8005f6c:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005f70:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	011b      	lsls	r3, r3, #4
 8005f7c:	4413      	add	r3, r2
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	6811      	ldr	r1, [r2, #0]
 8005f84:	f043 0201 	orr.w	r2, r3, #1
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	3318      	adds	r3, #24
 8005f8c:	011b      	lsls	r3, r3, #4
 8005f8e:	440b      	add	r3, r1
 8005f90:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005f92:	2300      	movs	r3, #0
 8005f94:	e00e      	b.n	8005fb4 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f9a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e006      	b.n	8005fb4 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005faa:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005fb2:	2301      	movs	r3, #1
  }
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3724      	adds	r7, #36	@ 0x24
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
 8005fcc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005fd4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005fd6:	7dfb      	ldrb	r3, [r7, #23]
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d003      	beq.n	8005fe4 <HAL_CAN_GetRxMessage+0x24>
 8005fdc:	7dfb      	ldrb	r3, [r7, #23]
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	f040 8103 	bne.w	80061ea <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10e      	bne.n	8006008 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	f003 0303 	and.w	r3, r3, #3
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d116      	bne.n	8006026 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ffc:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e0f7      	b.n	80061f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	f003 0303 	and.w	r3, r3, #3
 8006012:	2b00      	cmp	r3, #0
 8006014:	d107      	bne.n	8006026 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006022:	2301      	movs	r3, #1
 8006024:	e0e8      	b.n	80061f8 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	331b      	adds	r3, #27
 800602e:	011b      	lsls	r3, r3, #4
 8006030:	4413      	add	r3, r2
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f003 0204 	and.w	r2, r3, #4
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10c      	bne.n	800605e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	331b      	adds	r3, #27
 800604c:	011b      	lsls	r3, r3, #4
 800604e:	4413      	add	r3, r2
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	0d5b      	lsrs	r3, r3, #21
 8006054:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	601a      	str	r2, [r3, #0]
 800605c:	e00b      	b.n	8006076 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	331b      	adds	r3, #27
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	4413      	add	r3, r2
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	08db      	lsrs	r3, r3, #3
 800606e:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	331b      	adds	r3, #27
 800607e:	011b      	lsls	r3, r3, #4
 8006080:	4413      	add	r3, r2
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f003 0202 	and.w	r2, r3, #2
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	331b      	adds	r3, #27
 8006094:	011b      	lsls	r3, r3, #4
 8006096:	4413      	add	r3, r2
 8006098:	3304      	adds	r3, #4
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f003 0308 	and.w	r3, r3, #8
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2208      	movs	r2, #8
 80060a8:	611a      	str	r2, [r3, #16]
 80060aa:	e00b      	b.n	80060c4 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681a      	ldr	r2, [r3, #0]
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	331b      	adds	r3, #27
 80060b4:	011b      	lsls	r3, r3, #4
 80060b6:	4413      	add	r3, r2
 80060b8:	3304      	adds	r3, #4
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 020f 	and.w	r2, r3, #15
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	331b      	adds	r3, #27
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	4413      	add	r3, r2
 80060d0:	3304      	adds	r3, #4
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	0a1b      	lsrs	r3, r3, #8
 80060d6:	b2da      	uxtb	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	331b      	adds	r3, #27
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	4413      	add	r3, r2
 80060e8:	3304      	adds	r3, #4
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	0c1b      	lsrs	r3, r3, #16
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	011b      	lsls	r3, r3, #4
 80060fc:	4413      	add	r3, r2
 80060fe:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	b2da      	uxtb	r2, r3
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	011b      	lsls	r3, r3, #4
 8006112:	4413      	add	r3, r2
 8006114:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	0a1a      	lsrs	r2, r3, #8
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	3301      	adds	r3, #1
 8006120:	b2d2      	uxtb	r2, r2
 8006122:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	011b      	lsls	r3, r3, #4
 800612c:	4413      	add	r3, r2
 800612e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	0c1a      	lsrs	r2, r3, #16
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	3302      	adds	r3, #2
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	4413      	add	r3, r2
 8006148:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	0e1a      	lsrs	r2, r3, #24
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	3303      	adds	r3, #3
 8006154:	b2d2      	uxtb	r2, r2
 8006156:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681a      	ldr	r2, [r3, #0]
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	011b      	lsls	r3, r3, #4
 8006160:	4413      	add	r3, r2
 8006162:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	3304      	adds	r3, #4
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	011b      	lsls	r3, r3, #4
 8006178:	4413      	add	r3, r2
 800617a:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	0a1a      	lsrs	r2, r3, #8
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	3305      	adds	r3, #5
 8006186:	b2d2      	uxtb	r2, r2
 8006188:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	4413      	add	r3, r2
 8006194:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	0c1a      	lsrs	r2, r3, #16
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	3306      	adds	r3, #6
 80061a0:	b2d2      	uxtb	r2, r2
 80061a2:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	011b      	lsls	r3, r3, #4
 80061ac:	4413      	add	r3, r2
 80061ae:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	0e1a      	lsrs	r2, r3, #24
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	3307      	adds	r3, #7
 80061ba:	b2d2      	uxtb	r2, r2
 80061bc:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d108      	bne.n	80061d6 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f042 0220 	orr.w	r2, r2, #32
 80061d2:	60da      	str	r2, [r3, #12]
 80061d4:	e007      	b.n	80061e6 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f042 0220 	orr.w	r2, r2, #32
 80061e4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80061e6:	2300      	movs	r3, #0
 80061e8:	e006      	b.n	80061f8 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061ee:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80061f6:	2301      	movs	r3, #1
  }
}
 80061f8:	4618      	mov	r0, r3
 80061fa:	371c      	adds	r7, #28
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006204:	b480      	push	{r7}
 8006206:	b085      	sub	sp, #20
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
 800620c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006214:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006216:	7bfb      	ldrb	r3, [r7, #15]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d002      	beq.n	8006222 <HAL_CAN_ActivateNotification+0x1e>
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	2b02      	cmp	r3, #2
 8006220:	d109      	bne.n	8006236 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	6959      	ldr	r1, [r3, #20]
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	430a      	orrs	r2, r1
 8006230:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e006      	b.n	8006244 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800623a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
  }
}
 8006244:	4618      	mov	r0, r3
 8006246:	3714      	adds	r7, #20
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b08a      	sub	sp, #40	@ 0x28
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006258:	2300      	movs	r3, #0
 800625a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	695b      	ldr	r3, [r3, #20]
 8006262:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	68db      	ldr	r3, [r3, #12]
 800627a:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691b      	ldr	r3, [r3, #16]
 8006282:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800628c:	6a3b      	ldr	r3, [r7, #32]
 800628e:	f003 0301 	and.w	r3, r3, #1
 8006292:	2b00      	cmp	r3, #0
 8006294:	d07c      	beq.n	8006390 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006296:	69bb      	ldr	r3, [r7, #24]
 8006298:	f003 0301 	and.w	r3, r3, #1
 800629c:	2b00      	cmp	r3, #0
 800629e:	d023      	beq.n	80062e8 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2201      	movs	r2, #1
 80062a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80062a8:	69bb      	ldr	r3, [r7, #24]
 80062aa:	f003 0302 	and.w	r3, r3, #2
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f983 	bl	80065be <HAL_CAN_TxMailbox0CompleteCallback>
 80062b8:	e016      	b.n	80062e8 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80062ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80062cc:	e00c      	b.n	80062e8 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	f003 0308 	and.w	r3, r3, #8
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d004      	beq.n	80062e2 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80062d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062da:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80062de:	627b      	str	r3, [r7, #36]	@ 0x24
 80062e0:	e002      	b.n	80062e8 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f989 	bl	80065fa <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d024      	beq.n	800633c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80062fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006302:	2b00      	cmp	r3, #0
 8006304:	d003      	beq.n	800630e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f963 	bl	80065d2 <HAL_CAN_TxMailbox1CompleteCallback>
 800630c:	e016      	b.n	800633c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800630e:	69bb      	ldr	r3, [r7, #24]
 8006310:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006314:	2b00      	cmp	r3, #0
 8006316:	d004      	beq.n	8006322 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800631e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006320:	e00c      	b.n	800633c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006328:	2b00      	cmp	r3, #0
 800632a:	d004      	beq.n	8006336 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
 8006334:	e002      	b.n	800633c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f969 	bl	800660e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006342:	2b00      	cmp	r3, #0
 8006344:	d024      	beq.n	8006390 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800634e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006350:	69bb      	ldr	r3, [r7, #24]
 8006352:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006356:	2b00      	cmp	r3, #0
 8006358:	d003      	beq.n	8006362 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 f943 	bl	80065e6 <HAL_CAN_TxMailbox2CompleteCallback>
 8006360:	e016      	b.n	8006390 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006368:	2b00      	cmp	r3, #0
 800636a:	d004      	beq.n	8006376 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800636c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006372:	627b      	str	r3, [r7, #36]	@ 0x24
 8006374:	e00c      	b.n	8006390 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800637c:	2b00      	cmp	r3, #0
 800637e:	d004      	beq.n	800638a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006386:	627b      	str	r3, [r7, #36]	@ 0x24
 8006388:	e002      	b.n	8006390 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f949 	bl	8006622 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006390:	6a3b      	ldr	r3, [r7, #32]
 8006392:	f003 0308 	and.w	r3, r3, #8
 8006396:	2b00      	cmp	r3, #0
 8006398:	d00c      	beq.n	80063b4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	f003 0310 	and.w	r3, r3, #16
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d007      	beq.n	80063b4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80063aa:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	2210      	movs	r2, #16
 80063b2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80063b4:	6a3b      	ldr	r3, [r7, #32]
 80063b6:	f003 0304 	and.w	r3, r3, #4
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d00b      	beq.n	80063d6 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80063be:	697b      	ldr	r3, [r7, #20]
 80063c0:	f003 0308 	and.w	r3, r3, #8
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d006      	beq.n	80063d6 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2208      	movs	r2, #8
 80063ce:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 f930 	bl	8006636 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80063d6:	6a3b      	ldr	r3, [r7, #32]
 80063d8:	f003 0302 	and.w	r3, r3, #2
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	68db      	ldr	r3, [r3, #12]
 80063e6:	f003 0303 	and.w	r3, r3, #3
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d002      	beq.n	80063f4 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fb fe32 	bl	8002058 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00c      	beq.n	8006418 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	f003 0310 	and.w	r3, r3, #16
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2210      	movs	r2, #16
 8006416:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	f003 0320 	and.w	r3, r3, #32
 800641e:	2b00      	cmp	r3, #0
 8006420:	d00b      	beq.n	800643a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	f003 0308 	and.w	r3, r3, #8
 8006428:	2b00      	cmp	r3, #0
 800642a:	d006      	beq.n	800643a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2208      	movs	r2, #8
 8006432:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f912 	bl	800665e <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800643a:	6a3b      	ldr	r3, [r7, #32]
 800643c:	f003 0310 	and.w	r3, r3, #16
 8006440:	2b00      	cmp	r3, #0
 8006442:	d009      	beq.n	8006458 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 f8f9 	bl	800664a <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006458:	6a3b      	ldr	r3, [r7, #32]
 800645a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800645e:	2b00      	cmp	r3, #0
 8006460:	d00b      	beq.n	800647a <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	f003 0310 	and.w	r3, r3, #16
 8006468:	2b00      	cmp	r3, #0
 800646a:	d006      	beq.n	800647a <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	2210      	movs	r2, #16
 8006472:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 f8fc 	bl	8006672 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800647a:	6a3b      	ldr	r3, [r7, #32]
 800647c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006480:	2b00      	cmp	r3, #0
 8006482:	d00b      	beq.n	800649c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006484:	69fb      	ldr	r3, [r7, #28]
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d006      	beq.n	800649c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2208      	movs	r2, #8
 8006494:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006496:	6878      	ldr	r0, [r7, #4]
 8006498:	f000 f8f5 	bl	8006686 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d07b      	beq.n	800659e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	f003 0304 	and.w	r3, r3, #4
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d072      	beq.n	8006596 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d008      	beq.n	80064cc <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d003      	beq.n	80064cc <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	f043 0301 	orr.w	r3, r3, #1
 80064ca:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d008      	beq.n	80064e8 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d003      	beq.n	80064e8 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80064e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064e2:	f043 0302 	orr.w	r3, r3, #2
 80064e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80064e8:	6a3b      	ldr	r3, [r7, #32]
 80064ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d008      	beq.n	8006504 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80064fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064fe:	f043 0304 	orr.w	r3, r3, #4
 8006502:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800650a:	2b00      	cmp	r3, #0
 800650c:	d043      	beq.n	8006596 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006514:	2b00      	cmp	r3, #0
 8006516:	d03e      	beq.n	8006596 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800651e:	2b60      	cmp	r3, #96	@ 0x60
 8006520:	d02b      	beq.n	800657a <HAL_CAN_IRQHandler+0x32a>
 8006522:	2b60      	cmp	r3, #96	@ 0x60
 8006524:	d82e      	bhi.n	8006584 <HAL_CAN_IRQHandler+0x334>
 8006526:	2b50      	cmp	r3, #80	@ 0x50
 8006528:	d022      	beq.n	8006570 <HAL_CAN_IRQHandler+0x320>
 800652a:	2b50      	cmp	r3, #80	@ 0x50
 800652c:	d82a      	bhi.n	8006584 <HAL_CAN_IRQHandler+0x334>
 800652e:	2b40      	cmp	r3, #64	@ 0x40
 8006530:	d019      	beq.n	8006566 <HAL_CAN_IRQHandler+0x316>
 8006532:	2b40      	cmp	r3, #64	@ 0x40
 8006534:	d826      	bhi.n	8006584 <HAL_CAN_IRQHandler+0x334>
 8006536:	2b30      	cmp	r3, #48	@ 0x30
 8006538:	d010      	beq.n	800655c <HAL_CAN_IRQHandler+0x30c>
 800653a:	2b30      	cmp	r3, #48	@ 0x30
 800653c:	d822      	bhi.n	8006584 <HAL_CAN_IRQHandler+0x334>
 800653e:	2b10      	cmp	r3, #16
 8006540:	d002      	beq.n	8006548 <HAL_CAN_IRQHandler+0x2f8>
 8006542:	2b20      	cmp	r3, #32
 8006544:	d005      	beq.n	8006552 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006546:	e01d      	b.n	8006584 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006548:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800654a:	f043 0308 	orr.w	r3, r3, #8
 800654e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006550:	e019      	b.n	8006586 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006552:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006554:	f043 0310 	orr.w	r3, r3, #16
 8006558:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800655a:	e014      	b.n	8006586 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800655c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655e:	f043 0320 	orr.w	r3, r3, #32
 8006562:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006564:	e00f      	b.n	8006586 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800656c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800656e:	e00a      	b.n	8006586 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006578:	e005      	b.n	8006586 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006580:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006582:	e000      	b.n	8006586 <HAL_CAN_IRQHandler+0x336>
            break;
 8006584:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	699a      	ldr	r2, [r3, #24]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8006594:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2204      	movs	r2, #4
 800659c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d008      	beq.n	80065b6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80065a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065aa:	431a      	orrs	r2, r3
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f872 	bl	800669a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80065b6:	bf00      	nop
 80065b8:	3728      	adds	r7, #40	@ 0x28
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80065c6:	bf00      	nop
 80065c8:	370c      	adds	r7, #12
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr

080065d2 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80065d2:	b480      	push	{r7}
 80065d4:	b083      	sub	sp, #12
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80065da:	bf00      	nop
 80065dc:	370c      	adds	r7, #12
 80065de:	46bd      	mov	sp, r7
 80065e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e4:	4770      	bx	lr

080065e6 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80065e6:	b480      	push	{r7}
 80065e8:	b083      	sub	sp, #12
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80065ee:	bf00      	nop
 80065f0:	370c      	adds	r7, #12
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr

080065fa <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80065fa:	b480      	push	{r7}
 80065fc:	b083      	sub	sp, #12
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006602:	bf00      	nop
 8006604:	370c      	adds	r7, #12
 8006606:	46bd      	mov	sp, r7
 8006608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660c:	4770      	bx	lr

0800660e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800660e:	b480      	push	{r7}
 8006610:	b083      	sub	sp, #12
 8006612:	af00      	add	r7, sp, #0
 8006614:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006616:	bf00      	nop
 8006618:	370c      	adds	r7, #12
 800661a:	46bd      	mov	sp, r7
 800661c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006620:	4770      	bx	lr

08006622 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006622:	b480      	push	{r7}
 8006624:	b083      	sub	sp, #12
 8006626:	af00      	add	r7, sp, #0
 8006628:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800662a:	bf00      	nop
 800662c:	370c      	adds	r7, #12
 800662e:	46bd      	mov	sp, r7
 8006630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006634:	4770      	bx	lr

08006636 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006636:	b480      	push	{r7}
 8006638:	b083      	sub	sp, #12
 800663a:	af00      	add	r7, sp, #0
 800663c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800663e:	bf00      	nop
 8006640:	370c      	adds	r7, #12
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr

0800664a <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800664a:	b480      	push	{r7}
 800664c:	b083      	sub	sp, #12
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006652:	bf00      	nop
 8006654:	370c      	adds	r7, #12
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800665e:	b480      	push	{r7}
 8006660:	b083      	sub	sp, #12
 8006662:	af00      	add	r7, sp, #0
 8006664:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006666:	bf00      	nop
 8006668:	370c      	adds	r7, #12
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr

08006672 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006672:	b480      	push	{r7}
 8006674:	b083      	sub	sp, #12
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800667a:	bf00      	nop
 800667c:	370c      	adds	r7, #12
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006686:	b480      	push	{r7}
 8006688:	b083      	sub	sp, #12
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800668e:	bf00      	nop
 8006690:	370c      	adds	r7, #12
 8006692:	46bd      	mov	sp, r7
 8006694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006698:	4770      	bx	lr

0800669a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
	...

080066b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80066b0:	b480      	push	{r7}
 80066b2:	b085      	sub	sp, #20
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f003 0307 	and.w	r3, r3, #7
 80066be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066c0:	4b0c      	ldr	r3, [pc, #48]	@ (80066f4 <__NVIC_SetPriorityGrouping+0x44>)
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80066cc:	4013      	ands	r3, r2
 80066ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066d8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80066e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80066e2:	4a04      	ldr	r2, [pc, #16]	@ (80066f4 <__NVIC_SetPriorityGrouping+0x44>)
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	60d3      	str	r3, [r2, #12]
}
 80066e8:	bf00      	nop
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr
 80066f4:	e000ed00 	.word	0xe000ed00

080066f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066fc:	4b04      	ldr	r3, [pc, #16]	@ (8006710 <__NVIC_GetPriorityGrouping+0x18>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	f003 0307 	and.w	r3, r3, #7
}
 8006706:	4618      	mov	r0, r3
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	e000ed00 	.word	0xe000ed00

08006714 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006714:	b480      	push	{r7}
 8006716:	b083      	sub	sp, #12
 8006718:	af00      	add	r7, sp, #0
 800671a:	4603      	mov	r3, r0
 800671c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800671e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006722:	2b00      	cmp	r3, #0
 8006724:	db0b      	blt.n	800673e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006726:	79fb      	ldrb	r3, [r7, #7]
 8006728:	f003 021f 	and.w	r2, r3, #31
 800672c:	4907      	ldr	r1, [pc, #28]	@ (800674c <__NVIC_EnableIRQ+0x38>)
 800672e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006732:	095b      	lsrs	r3, r3, #5
 8006734:	2001      	movs	r0, #1
 8006736:	fa00 f202 	lsl.w	r2, r0, r2
 800673a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800673e:	bf00      	nop
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr
 800674a:	bf00      	nop
 800674c:	e000e100 	.word	0xe000e100

08006750 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	4603      	mov	r3, r0
 8006758:	6039      	str	r1, [r7, #0]
 800675a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800675c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006760:	2b00      	cmp	r3, #0
 8006762:	db0a      	blt.n	800677a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	b2da      	uxtb	r2, r3
 8006768:	490c      	ldr	r1, [pc, #48]	@ (800679c <__NVIC_SetPriority+0x4c>)
 800676a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800676e:	0112      	lsls	r2, r2, #4
 8006770:	b2d2      	uxtb	r2, r2
 8006772:	440b      	add	r3, r1
 8006774:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006778:	e00a      	b.n	8006790 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	b2da      	uxtb	r2, r3
 800677e:	4908      	ldr	r1, [pc, #32]	@ (80067a0 <__NVIC_SetPriority+0x50>)
 8006780:	79fb      	ldrb	r3, [r7, #7]
 8006782:	f003 030f 	and.w	r3, r3, #15
 8006786:	3b04      	subs	r3, #4
 8006788:	0112      	lsls	r2, r2, #4
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	440b      	add	r3, r1
 800678e:	761a      	strb	r2, [r3, #24]
}
 8006790:	bf00      	nop
 8006792:	370c      	adds	r7, #12
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	e000e100 	.word	0xe000e100
 80067a0:	e000ed00 	.word	0xe000ed00

080067a4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b089      	sub	sp, #36	@ 0x24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	60f8      	str	r0, [r7, #12]
 80067ac:	60b9      	str	r1, [r7, #8]
 80067ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	f1c3 0307 	rsb	r3, r3, #7
 80067be:	2b04      	cmp	r3, #4
 80067c0:	bf28      	it	cs
 80067c2:	2304      	movcs	r3, #4
 80067c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80067c6:	69fb      	ldr	r3, [r7, #28]
 80067c8:	3304      	adds	r3, #4
 80067ca:	2b06      	cmp	r3, #6
 80067cc:	d902      	bls.n	80067d4 <NVIC_EncodePriority+0x30>
 80067ce:	69fb      	ldr	r3, [r7, #28]
 80067d0:	3b03      	subs	r3, #3
 80067d2:	e000      	b.n	80067d6 <NVIC_EncodePriority+0x32>
 80067d4:	2300      	movs	r3, #0
 80067d6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	fa02 f303 	lsl.w	r3, r2, r3
 80067e2:	43da      	mvns	r2, r3
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	401a      	ands	r2, r3
 80067e8:	697b      	ldr	r3, [r7, #20]
 80067ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80067ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	fa01 f303 	lsl.w	r3, r1, r3
 80067f6:	43d9      	mvns	r1, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80067fc:	4313      	orrs	r3, r2
         );
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3724      	adds	r7, #36	@ 0x24
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
	...

0800680c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	3b01      	subs	r3, #1
 8006818:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800681c:	d301      	bcc.n	8006822 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800681e:	2301      	movs	r3, #1
 8006820:	e00f      	b.n	8006842 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006822:	4a0a      	ldr	r2, [pc, #40]	@ (800684c <SysTick_Config+0x40>)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3b01      	subs	r3, #1
 8006828:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800682a:	210f      	movs	r1, #15
 800682c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006830:	f7ff ff8e 	bl	8006750 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006834:	4b05      	ldr	r3, [pc, #20]	@ (800684c <SysTick_Config+0x40>)
 8006836:	2200      	movs	r2, #0
 8006838:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800683a:	4b04      	ldr	r3, [pc, #16]	@ (800684c <SysTick_Config+0x40>)
 800683c:	2207      	movs	r2, #7
 800683e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006840:	2300      	movs	r3, #0
}
 8006842:	4618      	mov	r0, r3
 8006844:	3708      	adds	r7, #8
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	e000e010 	.word	0xe000e010

08006850 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f7ff ff29 	bl	80066b0 <__NVIC_SetPriorityGrouping>
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006866:	b580      	push	{r7, lr}
 8006868:	b086      	sub	sp, #24
 800686a:	af00      	add	r7, sp, #0
 800686c:	4603      	mov	r3, r0
 800686e:	60b9      	str	r1, [r7, #8]
 8006870:	607a      	str	r2, [r7, #4]
 8006872:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006874:	2300      	movs	r3, #0
 8006876:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006878:	f7ff ff3e 	bl	80066f8 <__NVIC_GetPriorityGrouping>
 800687c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	6978      	ldr	r0, [r7, #20]
 8006884:	f7ff ff8e 	bl	80067a4 <NVIC_EncodePriority>
 8006888:	4602      	mov	r2, r0
 800688a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800688e:	4611      	mov	r1, r2
 8006890:	4618      	mov	r0, r3
 8006892:	f7ff ff5d 	bl	8006750 <__NVIC_SetPriority>
}
 8006896:	bf00      	nop
 8006898:	3718      	adds	r7, #24
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b082      	sub	sp, #8
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	4603      	mov	r3, r0
 80068a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80068a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80068ac:	4618      	mov	r0, r3
 80068ae:	f7ff ff31 	bl	8006714 <__NVIC_EnableIRQ>
}
 80068b2:	bf00      	nop
 80068b4:	3708      	adds	r7, #8
 80068b6:	46bd      	mov	sp, r7
 80068b8:	bd80      	pop	{r7, pc}

080068ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80068ba:	b580      	push	{r7, lr}
 80068bc:	b082      	sub	sp, #8
 80068be:	af00      	add	r7, sp, #0
 80068c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff ffa2 	bl	800680c <SysTick_Config>
 80068c8:	4603      	mov	r3, r0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80068dc:	2300      	movs	r3, #0
 80068de:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80068e0:	f7ff f874 	bl	80059cc <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d101      	bne.n	80068f0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	e099      	b.n	8006a24 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2202      	movs	r2, #2
 80068f4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2200      	movs	r2, #0
 80068fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f022 0201 	bic.w	r2, r2, #1
 800690e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006910:	e00f      	b.n	8006932 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006912:	f7ff f85b 	bl	80059cc <HAL_GetTick>
 8006916:	4602      	mov	r2, r0
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	2b05      	cmp	r3, #5
 800691e:	d908      	bls.n	8006932 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	2220      	movs	r2, #32
 8006924:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2203      	movs	r2, #3
 800692a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e078      	b.n	8006a24 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f003 0301 	and.w	r3, r3, #1
 800693c:	2b00      	cmp	r3, #0
 800693e:	d1e8      	bne.n	8006912 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006948:	697a      	ldr	r2, [r7, #20]
 800694a:	4b38      	ldr	r3, [pc, #224]	@ (8006a2c <HAL_DMA_Init+0x158>)
 800694c:	4013      	ands	r3, r2
 800694e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685a      	ldr	r2, [r3, #4]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800695e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	691b      	ldr	r3, [r3, #16]
 8006964:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800696a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	699b      	ldr	r3, [r3, #24]
 8006970:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006976:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6a1b      	ldr	r3, [r3, #32]
 800697c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	4313      	orrs	r3, r2
 8006982:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006988:	2b04      	cmp	r3, #4
 800698a:	d107      	bne.n	800699c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006994:	4313      	orrs	r3, r2
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	4313      	orrs	r3, r2
 800699a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	697a      	ldr	r2, [r7, #20]
 80069a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	695b      	ldr	r3, [r3, #20]
 80069aa:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	f023 0307 	bic.w	r3, r3, #7
 80069b2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069b8:	697a      	ldr	r2, [r7, #20]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c2:	2b04      	cmp	r3, #4
 80069c4:	d117      	bne.n	80069f6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ca:	697a      	ldr	r2, [r7, #20]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d00e      	beq.n	80069f6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f000 fb01 	bl	8006fe0 <DMA_CheckFifoParam>
 80069de:	4603      	mov	r3, r0
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d008      	beq.n	80069f6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2240      	movs	r2, #64	@ 0x40
 80069e8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2201      	movs	r2, #1
 80069ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80069f2:	2301      	movs	r3, #1
 80069f4:	e016      	b.n	8006a24 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	697a      	ldr	r2, [r7, #20]
 80069fc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 fab8 	bl	8006f74 <DMA_CalcBaseAndBitshift>
 8006a04:	4603      	mov	r3, r0
 8006a06:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a0c:	223f      	movs	r2, #63	@ 0x3f
 8006a0e:	409a      	lsls	r2, r3
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8006a22:	2300      	movs	r3, #0
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3718      	adds	r7, #24
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	f010803f 	.word	0xf010803f

08006a30 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	60f8      	str	r0, [r7, #12]
 8006a38:	60b9      	str	r1, [r7, #8]
 8006a3a:	607a      	str	r2, [r7, #4]
 8006a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006a46:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d101      	bne.n	8006a56 <HAL_DMA_Start_IT+0x26>
 8006a52:	2302      	movs	r3, #2
 8006a54:	e040      	b.n	8006ad8 <HAL_DMA_Start_IT+0xa8>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	2201      	movs	r2, #1
 8006a5a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b01      	cmp	r3, #1
 8006a68:	d12f      	bne.n	8006aca <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	2202      	movs	r2, #2
 8006a6e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	2200      	movs	r2, #0
 8006a76:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	68b9      	ldr	r1, [r7, #8]
 8006a7e:	68f8      	ldr	r0, [r7, #12]
 8006a80:	f000 fa4a 	bl	8006f18 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a88:	223f      	movs	r2, #63	@ 0x3f
 8006a8a:	409a      	lsls	r2, r3
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	681a      	ldr	r2, [r3, #0]
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	f042 0216 	orr.w	r2, r2, #22
 8006a9e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d007      	beq.n	8006ab8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681a      	ldr	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0208 	orr.w	r2, r2, #8
 8006ab6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]
 8006ac8:	e005      	b.n	8006ad6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	2200      	movs	r2, #0
 8006ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006ad2:	2302      	movs	r3, #2
 8006ad4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006ad6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3718      	adds	r7, #24
 8006adc:	46bd      	mov	sp, r7
 8006ade:	bd80      	pop	{r7, pc}

08006ae0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006aec:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006aee:	f7fe ff6d 	bl	80059cc <HAL_GetTick>
 8006af2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b02      	cmp	r3, #2
 8006afe:	d008      	beq.n	8006b12 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2280      	movs	r2, #128	@ 0x80
 8006b04:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	e052      	b.n	8006bb8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f022 0216 	bic.w	r2, r2, #22
 8006b20:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	695a      	ldr	r2, [r3, #20]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006b30:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d103      	bne.n	8006b42 <HAL_DMA_Abort+0x62>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d007      	beq.n	8006b52 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	681a      	ldr	r2, [r3, #0]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f022 0208 	bic.w	r2, r2, #8
 8006b50:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	681a      	ldr	r2, [r3, #0]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f022 0201 	bic.w	r2, r2, #1
 8006b60:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b62:	e013      	b.n	8006b8c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b64:	f7fe ff32 	bl	80059cc <HAL_GetTick>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	2b05      	cmp	r3, #5
 8006b70:	d90c      	bls.n	8006b8c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2220      	movs	r2, #32
 8006b76:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2203      	movs	r2, #3
 8006b7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e015      	b.n	8006bb8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f003 0301 	and.w	r3, r3, #1
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d1e4      	bne.n	8006b64 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b9e:	223f      	movs	r2, #63	@ 0x3f
 8006ba0:	409a      	lsls	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3710      	adds	r7, #16
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d004      	beq.n	8006bde <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2280      	movs	r2, #128	@ 0x80
 8006bd8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e00c      	b.n	8006bf8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2205      	movs	r2, #5
 8006be2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	681a      	ldr	r2, [r3, #0]
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f022 0201 	bic.w	r2, r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006bf6:	2300      	movs	r3, #0
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006c04:	b580      	push	{r7, lr}
 8006c06:	b086      	sub	sp, #24
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006c10:	4b8e      	ldr	r3, [pc, #568]	@ (8006e4c <HAL_DMA_IRQHandler+0x248>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a8e      	ldr	r2, [pc, #568]	@ (8006e50 <HAL_DMA_IRQHandler+0x24c>)
 8006c16:	fba2 2303 	umull	r2, r3, r2, r3
 8006c1a:	0a9b      	lsrs	r3, r3, #10
 8006c1c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c22:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c2e:	2208      	movs	r2, #8
 8006c30:	409a      	lsls	r2, r3
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	4013      	ands	r3, r2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d01a      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d013      	beq.n	8006c70 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681a      	ldr	r2, [r3, #0]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f022 0204 	bic.w	r2, r2, #4
 8006c56:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c5c:	2208      	movs	r2, #8
 8006c5e:	409a      	lsls	r2, r3
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c68:	f043 0201 	orr.w	r2, r3, #1
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c74:	2201      	movs	r2, #1
 8006c76:	409a      	lsls	r2, r3
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	4013      	ands	r3, r2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d012      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	695b      	ldr	r3, [r3, #20]
 8006c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d00b      	beq.n	8006ca6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006c92:	2201      	movs	r2, #1
 8006c94:	409a      	lsls	r2, r3
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c9e:	f043 0202 	orr.w	r2, r3, #2
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006caa:	2204      	movs	r2, #4
 8006cac:	409a      	lsls	r2, r3
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	4013      	ands	r3, r2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d012      	beq.n	8006cdc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d00b      	beq.n	8006cdc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cc8:	2204      	movs	r2, #4
 8006cca:	409a      	lsls	r2, r3
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006cd4:	f043 0204 	orr.w	r2, r3, #4
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ce0:	2210      	movs	r2, #16
 8006ce2:	409a      	lsls	r2, r3
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	4013      	ands	r3, r2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d043      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 0308 	and.w	r3, r3, #8
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d03c      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006cfe:	2210      	movs	r2, #16
 8006d00:	409a      	lsls	r2, r3
 8006d02:	693b      	ldr	r3, [r7, #16]
 8006d04:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d018      	beq.n	8006d46 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d108      	bne.n	8006d34 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d024      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	4798      	blx	r3
 8006d32:	e01f      	b.n	8006d74 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d01b      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d40:	6878      	ldr	r0, [r7, #4]
 8006d42:	4798      	blx	r3
 8006d44:	e016      	b.n	8006d74 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d107      	bne.n	8006d64 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	681a      	ldr	r2, [r3, #0]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0208 	bic.w	r2, r2, #8
 8006d62:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d003      	beq.n	8006d74 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d78:	2220      	movs	r2, #32
 8006d7a:	409a      	lsls	r2, r3
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	4013      	ands	r3, r2
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	f000 808f 	beq.w	8006ea4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0310 	and.w	r3, r3, #16
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 8087 	beq.w	8006ea4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d9a:	2220      	movs	r2, #32
 8006d9c:	409a      	lsls	r2, r3
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b05      	cmp	r3, #5
 8006dac:	d136      	bne.n	8006e1c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681a      	ldr	r2, [r3, #0]
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f022 0216 	bic.w	r2, r2, #22
 8006dbc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	695a      	ldr	r2, [r3, #20]
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006dcc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d103      	bne.n	8006dde <HAL_DMA_IRQHandler+0x1da>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d007      	beq.n	8006dee <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	681a      	ldr	r2, [r3, #0]
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f022 0208 	bic.w	r2, r2, #8
 8006dec:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006df2:	223f      	movs	r2, #63	@ 0x3f
 8006df4:	409a      	lsls	r2, r3
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d07e      	beq.n	8006f10 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e16:	6878      	ldr	r0, [r7, #4]
 8006e18:	4798      	blx	r3
        }
        return;
 8006e1a:	e079      	b.n	8006f10 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d01d      	beq.n	8006e66 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10d      	bne.n	8006e54 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d031      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	4798      	blx	r3
 8006e48:	e02c      	b.n	8006ea4 <HAL_DMA_IRQHandler+0x2a0>
 8006e4a:	bf00      	nop
 8006e4c:	20000040 	.word	0x20000040
 8006e50:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d023      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	4798      	blx	r3
 8006e64:	e01e      	b.n	8006ea4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d10f      	bne.n	8006e94 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f022 0210 	bic.w	r2, r2, #16
 8006e82:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2201      	movs	r2, #1
 8006e88:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006ea0:	6878      	ldr	r0, [r7, #4]
 8006ea2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d032      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d022      	beq.n	8006efe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2205      	movs	r2, #5
 8006ebc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f022 0201 	bic.w	r2, r2, #1
 8006ece:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	3301      	adds	r3, #1
 8006ed4:	60bb      	str	r3, [r7, #8]
 8006ed6:	697a      	ldr	r2, [r7, #20]
 8006ed8:	429a      	cmp	r2, r3
 8006eda:	d307      	bcc.n	8006eec <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	f003 0301 	and.w	r3, r3, #1
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d1f2      	bne.n	8006ed0 <HAL_DMA_IRQHandler+0x2cc>
 8006eea:	e000      	b.n	8006eee <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006eec:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d005      	beq.n	8006f12 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	4798      	blx	r3
 8006f0e:	e000      	b.n	8006f12 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006f10:	bf00      	nop
    }
  }
}
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b085      	sub	sp, #20
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006f34:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	2b40      	cmp	r3, #64	@ 0x40
 8006f44:	d108      	bne.n	8006f58 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	687a      	ldr	r2, [r7, #4]
 8006f4c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006f56:	e007      	b.n	8006f68 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	68ba      	ldr	r2, [r7, #8]
 8006f5e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	60da      	str	r2, [r3, #12]
}
 8006f68:	bf00      	nop
 8006f6a:	3714      	adds	r7, #20
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f72:	4770      	bx	lr

08006f74 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b085      	sub	sp, #20
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	b2db      	uxtb	r3, r3
 8006f82:	3b10      	subs	r3, #16
 8006f84:	4a14      	ldr	r2, [pc, #80]	@ (8006fd8 <DMA_CalcBaseAndBitshift+0x64>)
 8006f86:	fba2 2303 	umull	r2, r3, r2, r3
 8006f8a:	091b      	lsrs	r3, r3, #4
 8006f8c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006f8e:	4a13      	ldr	r2, [pc, #76]	@ (8006fdc <DMA_CalcBaseAndBitshift+0x68>)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2b03      	cmp	r3, #3
 8006fa0:	d909      	bls.n	8006fb6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006faa:	f023 0303 	bic.w	r3, r3, #3
 8006fae:	1d1a      	adds	r2, r3, #4
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fb4:	e007      	b.n	8006fc6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006fbe:	f023 0303 	bic.w	r3, r3, #3
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3714      	adds	r7, #20
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	aaaaaaab 	.word	0xaaaaaaab
 8006fdc:	08010668 	.word	0x08010668

08006fe0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ff0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	699b      	ldr	r3, [r3, #24]
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d11f      	bne.n	800703a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	2b03      	cmp	r3, #3
 8006ffe:	d856      	bhi.n	80070ae <DMA_CheckFifoParam+0xce>
 8007000:	a201      	add	r2, pc, #4	@ (adr r2, 8007008 <DMA_CheckFifoParam+0x28>)
 8007002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007006:	bf00      	nop
 8007008:	08007019 	.word	0x08007019
 800700c:	0800702b 	.word	0x0800702b
 8007010:	08007019 	.word	0x08007019
 8007014:	080070af 	.word	0x080070af
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800701c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007020:	2b00      	cmp	r3, #0
 8007022:	d046      	beq.n	80070b2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8007024:	2301      	movs	r3, #1
 8007026:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007028:	e043      	b.n	80070b2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800702e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007032:	d140      	bne.n	80070b6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007038:	e03d      	b.n	80070b6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	699b      	ldr	r3, [r3, #24]
 800703e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007042:	d121      	bne.n	8007088 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	2b03      	cmp	r3, #3
 8007048:	d837      	bhi.n	80070ba <DMA_CheckFifoParam+0xda>
 800704a:	a201      	add	r2, pc, #4	@ (adr r2, 8007050 <DMA_CheckFifoParam+0x70>)
 800704c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007050:	08007061 	.word	0x08007061
 8007054:	08007067 	.word	0x08007067
 8007058:	08007061 	.word	0x08007061
 800705c:	08007079 	.word	0x08007079
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007060:	2301      	movs	r3, #1
 8007062:	73fb      	strb	r3, [r7, #15]
      break;
 8007064:	e030      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800706a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800706e:	2b00      	cmp	r3, #0
 8007070:	d025      	beq.n	80070be <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007072:	2301      	movs	r3, #1
 8007074:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007076:	e022      	b.n	80070be <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800707c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8007080:	d11f      	bne.n	80070c2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007086:	e01c      	b.n	80070c2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b02      	cmp	r3, #2
 800708c:	d903      	bls.n	8007096 <DMA_CheckFifoParam+0xb6>
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	2b03      	cmp	r3, #3
 8007092:	d003      	beq.n	800709c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007094:	e018      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
      break;
 800709a:	e015      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00e      	beq.n	80070c6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	73fb      	strb	r3, [r7, #15]
      break;
 80070ac:	e00b      	b.n	80070c6 <DMA_CheckFifoParam+0xe6>
      break;
 80070ae:	bf00      	nop
 80070b0:	e00a      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      break;
 80070b2:	bf00      	nop
 80070b4:	e008      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      break;
 80070b6:	bf00      	nop
 80070b8:	e006      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      break;
 80070ba:	bf00      	nop
 80070bc:	e004      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      break;
 80070be:	bf00      	nop
 80070c0:	e002      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      break;   
 80070c2:	bf00      	nop
 80070c4:	e000      	b.n	80070c8 <DMA_CheckFifoParam+0xe8>
      break;
 80070c6:	bf00      	nop
    }
  } 
  
  return status; 
 80070c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80070ca:	4618      	mov	r0, r3
 80070cc:	3714      	adds	r7, #20
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr
 80070d6:	bf00      	nop

080070d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80070d8:	b480      	push	{r7}
 80070da:	b089      	sub	sp, #36	@ 0x24
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
 80070e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80070e2:	2300      	movs	r3, #0
 80070e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070ee:	2300      	movs	r3, #0
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	e16b      	b.n	80073cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80070f4:	2201      	movs	r2, #1
 80070f6:	69fb      	ldr	r3, [r7, #28]
 80070f8:	fa02 f303 	lsl.w	r3, r2, r3
 80070fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80070fe:	683b      	ldr	r3, [r7, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	697a      	ldr	r2, [r7, #20]
 8007104:	4013      	ands	r3, r2
 8007106:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007108:	693a      	ldr	r2, [r7, #16]
 800710a:	697b      	ldr	r3, [r7, #20]
 800710c:	429a      	cmp	r2, r3
 800710e:	f040 815a 	bne.w	80073c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	685b      	ldr	r3, [r3, #4]
 8007116:	f003 0303 	and.w	r3, r3, #3
 800711a:	2b01      	cmp	r3, #1
 800711c:	d005      	beq.n	800712a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800711e:	683b      	ldr	r3, [r7, #0]
 8007120:	685b      	ldr	r3, [r3, #4]
 8007122:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007126:	2b02      	cmp	r3, #2
 8007128:	d130      	bne.n	800718c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007130:	69fb      	ldr	r3, [r7, #28]
 8007132:	005b      	lsls	r3, r3, #1
 8007134:	2203      	movs	r2, #3
 8007136:	fa02 f303 	lsl.w	r3, r2, r3
 800713a:	43db      	mvns	r3, r3
 800713c:	69ba      	ldr	r2, [r7, #24]
 800713e:	4013      	ands	r3, r2
 8007140:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	68da      	ldr	r2, [r3, #12]
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4313      	orrs	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007160:	2201      	movs	r2, #1
 8007162:	69fb      	ldr	r3, [r7, #28]
 8007164:	fa02 f303 	lsl.w	r3, r2, r3
 8007168:	43db      	mvns	r3, r3
 800716a:	69ba      	ldr	r2, [r7, #24]
 800716c:	4013      	ands	r3, r2
 800716e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685b      	ldr	r3, [r3, #4]
 8007174:	091b      	lsrs	r3, r3, #4
 8007176:	f003 0201 	and.w	r2, r3, #1
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	fa02 f303 	lsl.w	r3, r2, r3
 8007180:	69ba      	ldr	r2, [r7, #24]
 8007182:	4313      	orrs	r3, r2
 8007184:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	f003 0303 	and.w	r3, r3, #3
 8007194:	2b03      	cmp	r3, #3
 8007196:	d017      	beq.n	80071c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	68db      	ldr	r3, [r3, #12]
 800719c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800719e:	69fb      	ldr	r3, [r7, #28]
 80071a0:	005b      	lsls	r3, r3, #1
 80071a2:	2203      	movs	r2, #3
 80071a4:	fa02 f303 	lsl.w	r3, r2, r3
 80071a8:	43db      	mvns	r3, r3
 80071aa:	69ba      	ldr	r2, [r7, #24]
 80071ac:	4013      	ands	r3, r2
 80071ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	69fb      	ldr	r3, [r7, #28]
 80071b6:	005b      	lsls	r3, r3, #1
 80071b8:	fa02 f303 	lsl.w	r3, r2, r3
 80071bc:	69ba      	ldr	r2, [r7, #24]
 80071be:	4313      	orrs	r3, r2
 80071c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	69ba      	ldr	r2, [r7, #24]
 80071c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	f003 0303 	and.w	r3, r3, #3
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d123      	bne.n	800721c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80071d4:	69fb      	ldr	r3, [r7, #28]
 80071d6:	08da      	lsrs	r2, r3, #3
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	3208      	adds	r2, #8
 80071dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80071e2:	69fb      	ldr	r3, [r7, #28]
 80071e4:	f003 0307 	and.w	r3, r3, #7
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	220f      	movs	r2, #15
 80071ec:	fa02 f303 	lsl.w	r3, r2, r3
 80071f0:	43db      	mvns	r3, r3
 80071f2:	69ba      	ldr	r2, [r7, #24]
 80071f4:	4013      	ands	r3, r2
 80071f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80071f8:	683b      	ldr	r3, [r7, #0]
 80071fa:	691a      	ldr	r2, [r3, #16]
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	fa02 f303 	lsl.w	r3, r2, r3
 8007208:	69ba      	ldr	r2, [r7, #24]
 800720a:	4313      	orrs	r3, r2
 800720c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800720e:	69fb      	ldr	r3, [r7, #28]
 8007210:	08da      	lsrs	r2, r3, #3
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	3208      	adds	r2, #8
 8007216:	69b9      	ldr	r1, [r7, #24]
 8007218:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007222:	69fb      	ldr	r3, [r7, #28]
 8007224:	005b      	lsls	r3, r3, #1
 8007226:	2203      	movs	r2, #3
 8007228:	fa02 f303 	lsl.w	r3, r2, r3
 800722c:	43db      	mvns	r3, r3
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	4013      	ands	r3, r2
 8007232:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f003 0203 	and.w	r2, r3, #3
 800723c:	69fb      	ldr	r3, [r7, #28]
 800723e:	005b      	lsls	r3, r3, #1
 8007240:	fa02 f303 	lsl.w	r3, r2, r3
 8007244:	69ba      	ldr	r2, [r7, #24]
 8007246:	4313      	orrs	r3, r2
 8007248:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	69ba      	ldr	r2, [r7, #24]
 800724e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007258:	2b00      	cmp	r3, #0
 800725a:	f000 80b4 	beq.w	80073c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	60fb      	str	r3, [r7, #12]
 8007262:	4b60      	ldr	r3, [pc, #384]	@ (80073e4 <HAL_GPIO_Init+0x30c>)
 8007264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007266:	4a5f      	ldr	r2, [pc, #380]	@ (80073e4 <HAL_GPIO_Init+0x30c>)
 8007268:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800726c:	6453      	str	r3, [r2, #68]	@ 0x44
 800726e:	4b5d      	ldr	r3, [pc, #372]	@ (80073e4 <HAL_GPIO_Init+0x30c>)
 8007270:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007272:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800727a:	4a5b      	ldr	r2, [pc, #364]	@ (80073e8 <HAL_GPIO_Init+0x310>)
 800727c:	69fb      	ldr	r3, [r7, #28]
 800727e:	089b      	lsrs	r3, r3, #2
 8007280:	3302      	adds	r3, #2
 8007282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007286:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007288:	69fb      	ldr	r3, [r7, #28]
 800728a:	f003 0303 	and.w	r3, r3, #3
 800728e:	009b      	lsls	r3, r3, #2
 8007290:	220f      	movs	r2, #15
 8007292:	fa02 f303 	lsl.w	r3, r2, r3
 8007296:	43db      	mvns	r3, r3
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	4013      	ands	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	4a52      	ldr	r2, [pc, #328]	@ (80073ec <HAL_GPIO_Init+0x314>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d02b      	beq.n	80072fe <HAL_GPIO_Init+0x226>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	4a51      	ldr	r2, [pc, #324]	@ (80073f0 <HAL_GPIO_Init+0x318>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d025      	beq.n	80072fa <HAL_GPIO_Init+0x222>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	4a50      	ldr	r2, [pc, #320]	@ (80073f4 <HAL_GPIO_Init+0x31c>)
 80072b2:	4293      	cmp	r3, r2
 80072b4:	d01f      	beq.n	80072f6 <HAL_GPIO_Init+0x21e>
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	4a4f      	ldr	r2, [pc, #316]	@ (80073f8 <HAL_GPIO_Init+0x320>)
 80072ba:	4293      	cmp	r3, r2
 80072bc:	d019      	beq.n	80072f2 <HAL_GPIO_Init+0x21a>
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	4a4e      	ldr	r2, [pc, #312]	@ (80073fc <HAL_GPIO_Init+0x324>)
 80072c2:	4293      	cmp	r3, r2
 80072c4:	d013      	beq.n	80072ee <HAL_GPIO_Init+0x216>
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	4a4d      	ldr	r2, [pc, #308]	@ (8007400 <HAL_GPIO_Init+0x328>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00d      	beq.n	80072ea <HAL_GPIO_Init+0x212>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	4a4c      	ldr	r2, [pc, #304]	@ (8007404 <HAL_GPIO_Init+0x32c>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d007      	beq.n	80072e6 <HAL_GPIO_Init+0x20e>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	4a4b      	ldr	r2, [pc, #300]	@ (8007408 <HAL_GPIO_Init+0x330>)
 80072da:	4293      	cmp	r3, r2
 80072dc:	d101      	bne.n	80072e2 <HAL_GPIO_Init+0x20a>
 80072de:	2307      	movs	r3, #7
 80072e0:	e00e      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072e2:	2308      	movs	r3, #8
 80072e4:	e00c      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072e6:	2306      	movs	r3, #6
 80072e8:	e00a      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072ea:	2305      	movs	r3, #5
 80072ec:	e008      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072ee:	2304      	movs	r3, #4
 80072f0:	e006      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072f2:	2303      	movs	r3, #3
 80072f4:	e004      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072f6:	2302      	movs	r3, #2
 80072f8:	e002      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072fa:	2301      	movs	r3, #1
 80072fc:	e000      	b.n	8007300 <HAL_GPIO_Init+0x228>
 80072fe:	2300      	movs	r3, #0
 8007300:	69fa      	ldr	r2, [r7, #28]
 8007302:	f002 0203 	and.w	r2, r2, #3
 8007306:	0092      	lsls	r2, r2, #2
 8007308:	4093      	lsls	r3, r2
 800730a:	69ba      	ldr	r2, [r7, #24]
 800730c:	4313      	orrs	r3, r2
 800730e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007310:	4935      	ldr	r1, [pc, #212]	@ (80073e8 <HAL_GPIO_Init+0x310>)
 8007312:	69fb      	ldr	r3, [r7, #28]
 8007314:	089b      	lsrs	r3, r3, #2
 8007316:	3302      	adds	r3, #2
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800731e:	4b3b      	ldr	r3, [pc, #236]	@ (800740c <HAL_GPIO_Init+0x334>)
 8007320:	689b      	ldr	r3, [r3, #8]
 8007322:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	43db      	mvns	r3, r3
 8007328:	69ba      	ldr	r2, [r7, #24]
 800732a:	4013      	ands	r3, r2
 800732c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007336:	2b00      	cmp	r3, #0
 8007338:	d003      	beq.n	8007342 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800733a:	69ba      	ldr	r2, [r7, #24]
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	4313      	orrs	r3, r2
 8007340:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007342:	4a32      	ldr	r2, [pc, #200]	@ (800740c <HAL_GPIO_Init+0x334>)
 8007344:	69bb      	ldr	r3, [r7, #24]
 8007346:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007348:	4b30      	ldr	r3, [pc, #192]	@ (800740c <HAL_GPIO_Init+0x334>)
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	43db      	mvns	r3, r3
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	4013      	ands	r3, r2
 8007356:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007360:	2b00      	cmp	r3, #0
 8007362:	d003      	beq.n	800736c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007364:	69ba      	ldr	r2, [r7, #24]
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	4313      	orrs	r3, r2
 800736a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800736c:	4a27      	ldr	r2, [pc, #156]	@ (800740c <HAL_GPIO_Init+0x334>)
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8007372:	4b26      	ldr	r3, [pc, #152]	@ (800740c <HAL_GPIO_Init+0x334>)
 8007374:	685b      	ldr	r3, [r3, #4]
 8007376:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007378:	693b      	ldr	r3, [r7, #16]
 800737a:	43db      	mvns	r3, r3
 800737c:	69ba      	ldr	r2, [r7, #24]
 800737e:	4013      	ands	r3, r2
 8007380:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800738e:	69ba      	ldr	r2, [r7, #24]
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	4313      	orrs	r3, r2
 8007394:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007396:	4a1d      	ldr	r2, [pc, #116]	@ (800740c <HAL_GPIO_Init+0x334>)
 8007398:	69bb      	ldr	r3, [r7, #24]
 800739a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800739c:	4b1b      	ldr	r3, [pc, #108]	@ (800740c <HAL_GPIO_Init+0x334>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	43db      	mvns	r3, r3
 80073a6:	69ba      	ldr	r2, [r7, #24]
 80073a8:	4013      	ands	r3, r2
 80073aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d003      	beq.n	80073c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80073b8:	69ba      	ldr	r2, [r7, #24]
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	4313      	orrs	r3, r2
 80073be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80073c0:	4a12      	ldr	r2, [pc, #72]	@ (800740c <HAL_GPIO_Init+0x334>)
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80073c6:	69fb      	ldr	r3, [r7, #28]
 80073c8:	3301      	adds	r3, #1
 80073ca:	61fb      	str	r3, [r7, #28]
 80073cc:	69fb      	ldr	r3, [r7, #28]
 80073ce:	2b0f      	cmp	r3, #15
 80073d0:	f67f ae90 	bls.w	80070f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80073d4:	bf00      	nop
 80073d6:	bf00      	nop
 80073d8:	3724      	adds	r7, #36	@ 0x24
 80073da:	46bd      	mov	sp, r7
 80073dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e0:	4770      	bx	lr
 80073e2:	bf00      	nop
 80073e4:	40023800 	.word	0x40023800
 80073e8:	40013800 	.word	0x40013800
 80073ec:	40020000 	.word	0x40020000
 80073f0:	40020400 	.word	0x40020400
 80073f4:	40020800 	.word	0x40020800
 80073f8:	40020c00 	.word	0x40020c00
 80073fc:	40021000 	.word	0x40021000
 8007400:	40021400 	.word	0x40021400
 8007404:	40021800 	.word	0x40021800
 8007408:	40021c00 	.word	0x40021c00
 800740c:	40013c00 	.word	0x40013c00

08007410 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007410:	b480      	push	{r7}
 8007412:	b083      	sub	sp, #12
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	460b      	mov	r3, r1
 800741a:	807b      	strh	r3, [r7, #2]
 800741c:	4613      	mov	r3, r2
 800741e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007420:	787b      	ldrb	r3, [r7, #1]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007426:	887a      	ldrh	r2, [r7, #2]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800742c:	e003      	b.n	8007436 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800742e:	887b      	ldrh	r3, [r7, #2]
 8007430:	041a      	lsls	r2, r3, #16
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	619a      	str	r2, [r3, #24]
}
 8007436:	bf00      	nop
 8007438:	370c      	adds	r7, #12
 800743a:	46bd      	mov	sp, r7
 800743c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007440:	4770      	bx	lr
	...

08007444 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	4603      	mov	r3, r0
 800744c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800744e:	4b08      	ldr	r3, [pc, #32]	@ (8007470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8007450:	695a      	ldr	r2, [r3, #20]
 8007452:	88fb      	ldrh	r3, [r7, #6]
 8007454:	4013      	ands	r3, r2
 8007456:	2b00      	cmp	r3, #0
 8007458:	d006      	beq.n	8007468 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800745a:	4a05      	ldr	r2, [pc, #20]	@ (8007470 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800745c:	88fb      	ldrh	r3, [r7, #6]
 800745e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007460:	88fb      	ldrh	r3, [r7, #6]
 8007462:	4618      	mov	r0, r3
 8007464:	f7fc fbde 	bl	8003c24 <HAL_GPIO_EXTI_Callback>
  }
}
 8007468:	bf00      	nop
 800746a:	3708      	adds	r7, #8
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	40013c00 	.word	0x40013c00

08007474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007482:	2301      	movs	r3, #1
 8007484:	e12b      	b.n	80076de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b00      	cmp	r3, #0
 8007490:	d106      	bne.n	80074a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2200      	movs	r2, #0
 8007496:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f7fd fcd8 	bl	8004e50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2224      	movs	r2, #36	@ 0x24
 80074a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	681a      	ldr	r2, [r3, #0]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f022 0201 	bic.w	r2, r2, #1
 80074b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80074c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	681a      	ldr	r2, [r3, #0]
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80074d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80074d8:	f000 fd4c 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 80074dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	4a81      	ldr	r2, [pc, #516]	@ (80076e8 <HAL_I2C_Init+0x274>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d807      	bhi.n	80074f8 <HAL_I2C_Init+0x84>
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	4a80      	ldr	r2, [pc, #512]	@ (80076ec <HAL_I2C_Init+0x278>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	bf94      	ite	ls
 80074f0:	2301      	movls	r3, #1
 80074f2:	2300      	movhi	r3, #0
 80074f4:	b2db      	uxtb	r3, r3
 80074f6:	e006      	b.n	8007506 <HAL_I2C_Init+0x92>
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	4a7d      	ldr	r2, [pc, #500]	@ (80076f0 <HAL_I2C_Init+0x27c>)
 80074fc:	4293      	cmp	r3, r2
 80074fe:	bf94      	ite	ls
 8007500:	2301      	movls	r3, #1
 8007502:	2300      	movhi	r3, #0
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b00      	cmp	r3, #0
 8007508:	d001      	beq.n	800750e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800750a:	2301      	movs	r3, #1
 800750c:	e0e7      	b.n	80076de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	4a78      	ldr	r2, [pc, #480]	@ (80076f4 <HAL_I2C_Init+0x280>)
 8007512:	fba2 2303 	umull	r2, r3, r2, r3
 8007516:	0c9b      	lsrs	r3, r3, #18
 8007518:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	68ba      	ldr	r2, [r7, #8]
 800752a:	430a      	orrs	r2, r1
 800752c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6a1b      	ldr	r3, [r3, #32]
 8007534:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	685b      	ldr	r3, [r3, #4]
 800753c:	4a6a      	ldr	r2, [pc, #424]	@ (80076e8 <HAL_I2C_Init+0x274>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d802      	bhi.n	8007548 <HAL_I2C_Init+0xd4>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	3301      	adds	r3, #1
 8007546:	e009      	b.n	800755c <HAL_I2C_Init+0xe8>
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800754e:	fb02 f303 	mul.w	r3, r2, r3
 8007552:	4a69      	ldr	r2, [pc, #420]	@ (80076f8 <HAL_I2C_Init+0x284>)
 8007554:	fba2 2303 	umull	r2, r3, r2, r3
 8007558:	099b      	lsrs	r3, r3, #6
 800755a:	3301      	adds	r3, #1
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	6812      	ldr	r2, [r2, #0]
 8007560:	430b      	orrs	r3, r1
 8007562:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	69db      	ldr	r3, [r3, #28]
 800756a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800756e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	495c      	ldr	r1, [pc, #368]	@ (80076e8 <HAL_I2C_Init+0x274>)
 8007578:	428b      	cmp	r3, r1
 800757a:	d819      	bhi.n	80075b0 <HAL_I2C_Init+0x13c>
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	1e59      	subs	r1, r3, #1
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	005b      	lsls	r3, r3, #1
 8007586:	fbb1 f3f3 	udiv	r3, r1, r3
 800758a:	1c59      	adds	r1, r3, #1
 800758c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8007590:	400b      	ands	r3, r1
 8007592:	2b00      	cmp	r3, #0
 8007594:	d00a      	beq.n	80075ac <HAL_I2C_Init+0x138>
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	1e59      	subs	r1, r3, #1
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	005b      	lsls	r3, r3, #1
 80075a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80075a4:	3301      	adds	r3, #1
 80075a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075aa:	e051      	b.n	8007650 <HAL_I2C_Init+0x1dc>
 80075ac:	2304      	movs	r3, #4
 80075ae:	e04f      	b.n	8007650 <HAL_I2C_Init+0x1dc>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d111      	bne.n	80075dc <HAL_I2C_Init+0x168>
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	1e58      	subs	r0, r3, #1
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6859      	ldr	r1, [r3, #4]
 80075c0:	460b      	mov	r3, r1
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	440b      	add	r3, r1
 80075c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80075ca:	3301      	adds	r3, #1
 80075cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	bf0c      	ite	eq
 80075d4:	2301      	moveq	r3, #1
 80075d6:	2300      	movne	r3, #0
 80075d8:	b2db      	uxtb	r3, r3
 80075da:	e012      	b.n	8007602 <HAL_I2C_Init+0x18e>
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	1e58      	subs	r0, r3, #1
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6859      	ldr	r1, [r3, #4]
 80075e4:	460b      	mov	r3, r1
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	440b      	add	r3, r1
 80075ea:	0099      	lsls	r1, r3, #2
 80075ec:	440b      	add	r3, r1
 80075ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80075f2:	3301      	adds	r3, #1
 80075f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	bf0c      	ite	eq
 80075fc:	2301      	moveq	r3, #1
 80075fe:	2300      	movne	r3, #0
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_I2C_Init+0x196>
 8007606:	2301      	movs	r3, #1
 8007608:	e022      	b.n	8007650 <HAL_I2C_Init+0x1dc>
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d10e      	bne.n	8007630 <HAL_I2C_Init+0x1bc>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	1e58      	subs	r0, r3, #1
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6859      	ldr	r1, [r3, #4]
 800761a:	460b      	mov	r3, r1
 800761c:	005b      	lsls	r3, r3, #1
 800761e:	440b      	add	r3, r1
 8007620:	fbb0 f3f3 	udiv	r3, r0, r3
 8007624:	3301      	adds	r3, #1
 8007626:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800762a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800762e:	e00f      	b.n	8007650 <HAL_I2C_Init+0x1dc>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	1e58      	subs	r0, r3, #1
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6859      	ldr	r1, [r3, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	009b      	lsls	r3, r3, #2
 800763c:	440b      	add	r3, r1
 800763e:	0099      	lsls	r1, r3, #2
 8007640:	440b      	add	r3, r1
 8007642:	fbb0 f3f3 	udiv	r3, r0, r3
 8007646:	3301      	adds	r3, #1
 8007648:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800764c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007650:	6879      	ldr	r1, [r7, #4]
 8007652:	6809      	ldr	r1, [r1, #0]
 8007654:	4313      	orrs	r3, r2
 8007656:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	69da      	ldr	r2, [r3, #28]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	6a1b      	ldr	r3, [r3, #32]
 800766a:	431a      	orrs	r2, r3
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	430a      	orrs	r2, r1
 8007672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800767e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6911      	ldr	r1, [r2, #16]
 8007686:	687a      	ldr	r2, [r7, #4]
 8007688:	68d2      	ldr	r2, [r2, #12]
 800768a:	4311      	orrs	r1, r2
 800768c:	687a      	ldr	r2, [r7, #4]
 800768e:	6812      	ldr	r2, [r2, #0]
 8007690:	430b      	orrs	r3, r1
 8007692:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695a      	ldr	r2, [r3, #20]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	699b      	ldr	r3, [r3, #24]
 80076a6:	431a      	orrs	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	681a      	ldr	r2, [r3, #0]
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	f042 0201 	orr.w	r2, r2, #1
 80076be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2220      	movs	r2, #32
 80076ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80076dc:	2300      	movs	r3, #0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	000186a0 	.word	0x000186a0
 80076ec:	001e847f 	.word	0x001e847f
 80076f0:	003d08ff 	.word	0x003d08ff
 80076f4:	431bde83 	.word	0x431bde83
 80076f8:	10624dd3 	.word	0x10624dd3

080076fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d101      	bne.n	800770e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800770a:	2301      	movs	r3, #1
 800770c:	e267      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0301 	and.w	r3, r3, #1
 8007716:	2b00      	cmp	r3, #0
 8007718:	d075      	beq.n	8007806 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800771a:	4b88      	ldr	r3, [pc, #544]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 030c 	and.w	r3, r3, #12
 8007722:	2b04      	cmp	r3, #4
 8007724:	d00c      	beq.n	8007740 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007726:	4b85      	ldr	r3, [pc, #532]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800772e:	2b08      	cmp	r3, #8
 8007730:	d112      	bne.n	8007758 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007732:	4b82      	ldr	r3, [pc, #520]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007734:	685b      	ldr	r3, [r3, #4]
 8007736:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800773a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800773e:	d10b      	bne.n	8007758 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007740:	4b7e      	ldr	r3, [pc, #504]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007748:	2b00      	cmp	r3, #0
 800774a:	d05b      	beq.n	8007804 <HAL_RCC_OscConfig+0x108>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d157      	bne.n	8007804 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007754:	2301      	movs	r3, #1
 8007756:	e242      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	685b      	ldr	r3, [r3, #4]
 800775c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007760:	d106      	bne.n	8007770 <HAL_RCC_OscConfig+0x74>
 8007762:	4b76      	ldr	r3, [pc, #472]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4a75      	ldr	r2, [pc, #468]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007768:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800776c:	6013      	str	r3, [r2, #0]
 800776e:	e01d      	b.n	80077ac <HAL_RCC_OscConfig+0xb0>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007778:	d10c      	bne.n	8007794 <HAL_RCC_OscConfig+0x98>
 800777a:	4b70      	ldr	r3, [pc, #448]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a6f      	ldr	r2, [pc, #444]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007780:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	4b6d      	ldr	r3, [pc, #436]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a6c      	ldr	r2, [pc, #432]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800778c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007790:	6013      	str	r3, [r2, #0]
 8007792:	e00b      	b.n	80077ac <HAL_RCC_OscConfig+0xb0>
 8007794:	4b69      	ldr	r3, [pc, #420]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a68      	ldr	r2, [pc, #416]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800779a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	4b66      	ldr	r3, [pc, #408]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	4a65      	ldr	r2, [pc, #404]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 80077a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80077aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	685b      	ldr	r3, [r3, #4]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d013      	beq.n	80077dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b4:	f7fe f90a 	bl	80059cc <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077bc:	f7fe f906 	bl	80059cc <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b64      	cmp	r3, #100	@ 0x64
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e207      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80077ce:	4b5b      	ldr	r3, [pc, #364]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d0f0      	beq.n	80077bc <HAL_RCC_OscConfig+0xc0>
 80077da:	e014      	b.n	8007806 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077dc:	f7fe f8f6 	bl	80059cc <HAL_GetTick>
 80077e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077e2:	e008      	b.n	80077f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80077e4:	f7fe f8f2 	bl	80059cc <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	2b64      	cmp	r3, #100	@ 0x64
 80077f0:	d901      	bls.n	80077f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80077f2:	2303      	movs	r3, #3
 80077f4:	e1f3      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80077f6:	4b51      	ldr	r3, [pc, #324]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1f0      	bne.n	80077e4 <HAL_RCC_OscConfig+0xe8>
 8007802:	e000      	b.n	8007806 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f003 0302 	and.w	r3, r3, #2
 800780e:	2b00      	cmp	r3, #0
 8007810:	d063      	beq.n	80078da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007812:	4b4a      	ldr	r3, [pc, #296]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	f003 030c 	and.w	r3, r3, #12
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800781e:	4b47      	ldr	r3, [pc, #284]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007826:	2b08      	cmp	r3, #8
 8007828:	d11c      	bne.n	8007864 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800782a:	4b44      	ldr	r3, [pc, #272]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007832:	2b00      	cmp	r3, #0
 8007834:	d116      	bne.n	8007864 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007836:	4b41      	ldr	r3, [pc, #260]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f003 0302 	and.w	r3, r3, #2
 800783e:	2b00      	cmp	r3, #0
 8007840:	d005      	beq.n	800784e <HAL_RCC_OscConfig+0x152>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	2b01      	cmp	r3, #1
 8007848:	d001      	beq.n	800784e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e1c7      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800784e:	4b3b      	ldr	r3, [pc, #236]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	691b      	ldr	r3, [r3, #16]
 800785a:	00db      	lsls	r3, r3, #3
 800785c:	4937      	ldr	r1, [pc, #220]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800785e:	4313      	orrs	r3, r2
 8007860:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007862:	e03a      	b.n	80078da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d020      	beq.n	80078ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800786c:	4b34      	ldr	r3, [pc, #208]	@ (8007940 <HAL_RCC_OscConfig+0x244>)
 800786e:	2201      	movs	r2, #1
 8007870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007872:	f7fe f8ab 	bl	80059cc <HAL_GetTick>
 8007876:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007878:	e008      	b.n	800788c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800787a:	f7fe f8a7 	bl	80059cc <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	2b02      	cmp	r3, #2
 8007886:	d901      	bls.n	800788c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007888:	2303      	movs	r3, #3
 800788a:	e1a8      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800788c:	4b2b      	ldr	r3, [pc, #172]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f003 0302 	and.w	r3, r3, #2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d0f0      	beq.n	800787a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007898:	4b28      	ldr	r3, [pc, #160]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	691b      	ldr	r3, [r3, #16]
 80078a4:	00db      	lsls	r3, r3, #3
 80078a6:	4925      	ldr	r1, [pc, #148]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 80078a8:	4313      	orrs	r3, r2
 80078aa:	600b      	str	r3, [r1, #0]
 80078ac:	e015      	b.n	80078da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078ae:	4b24      	ldr	r3, [pc, #144]	@ (8007940 <HAL_RCC_OscConfig+0x244>)
 80078b0:	2200      	movs	r2, #0
 80078b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b4:	f7fe f88a 	bl	80059cc <HAL_GetTick>
 80078b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ba:	e008      	b.n	80078ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80078bc:	f7fe f886 	bl	80059cc <HAL_GetTick>
 80078c0:	4602      	mov	r2, r0
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1ad3      	subs	r3, r2, r3
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d901      	bls.n	80078ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80078ca:	2303      	movs	r3, #3
 80078cc:	e187      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80078ce:	4b1b      	ldr	r3, [pc, #108]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f003 0302 	and.w	r3, r3, #2
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d1f0      	bne.n	80078bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0308 	and.w	r3, r3, #8
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d036      	beq.n	8007954 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d016      	beq.n	800791c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80078ee:	4b15      	ldr	r3, [pc, #84]	@ (8007944 <HAL_RCC_OscConfig+0x248>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078f4:	f7fe f86a 	bl	80059cc <HAL_GetTick>
 80078f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80078fa:	e008      	b.n	800790e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078fc:	f7fe f866 	bl	80059cc <HAL_GetTick>
 8007900:	4602      	mov	r2, r0
 8007902:	693b      	ldr	r3, [r7, #16]
 8007904:	1ad3      	subs	r3, r2, r3
 8007906:	2b02      	cmp	r3, #2
 8007908:	d901      	bls.n	800790e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800790a:	2303      	movs	r3, #3
 800790c:	e167      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800790e:	4b0b      	ldr	r3, [pc, #44]	@ (800793c <HAL_RCC_OscConfig+0x240>)
 8007910:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007912:	f003 0302 	and.w	r3, r3, #2
 8007916:	2b00      	cmp	r3, #0
 8007918:	d0f0      	beq.n	80078fc <HAL_RCC_OscConfig+0x200>
 800791a:	e01b      	b.n	8007954 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800791c:	4b09      	ldr	r3, [pc, #36]	@ (8007944 <HAL_RCC_OscConfig+0x248>)
 800791e:	2200      	movs	r2, #0
 8007920:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007922:	f7fe f853 	bl	80059cc <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007928:	e00e      	b.n	8007948 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800792a:	f7fe f84f 	bl	80059cc <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b02      	cmp	r3, #2
 8007936:	d907      	bls.n	8007948 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e150      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
 800793c:	40023800 	.word	0x40023800
 8007940:	42470000 	.word	0x42470000
 8007944:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007948:	4b88      	ldr	r3, [pc, #544]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 800794a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800794c:	f003 0302 	and.w	r3, r3, #2
 8007950:	2b00      	cmp	r3, #0
 8007952:	d1ea      	bne.n	800792a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f003 0304 	and.w	r3, r3, #4
 800795c:	2b00      	cmp	r3, #0
 800795e:	f000 8097 	beq.w	8007a90 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007962:	2300      	movs	r3, #0
 8007964:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007966:	4b81      	ldr	r3, [pc, #516]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007968:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800796a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10f      	bne.n	8007992 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007972:	2300      	movs	r3, #0
 8007974:	60bb      	str	r3, [r7, #8]
 8007976:	4b7d      	ldr	r3, [pc, #500]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800797a:	4a7c      	ldr	r2, [pc, #496]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 800797c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007980:	6413      	str	r3, [r2, #64]	@ 0x40
 8007982:	4b7a      	ldr	r3, [pc, #488]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007986:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800798a:	60bb      	str	r3, [r7, #8]
 800798c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800798e:	2301      	movs	r3, #1
 8007990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007992:	4b77      	ldr	r3, [pc, #476]	@ (8007b70 <HAL_RCC_OscConfig+0x474>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800799a:	2b00      	cmp	r3, #0
 800799c:	d118      	bne.n	80079d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800799e:	4b74      	ldr	r3, [pc, #464]	@ (8007b70 <HAL_RCC_OscConfig+0x474>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	4a73      	ldr	r2, [pc, #460]	@ (8007b70 <HAL_RCC_OscConfig+0x474>)
 80079a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80079a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079aa:	f7fe f80f 	bl	80059cc <HAL_GetTick>
 80079ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079b0:	e008      	b.n	80079c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079b2:	f7fe f80b 	bl	80059cc <HAL_GetTick>
 80079b6:	4602      	mov	r2, r0
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	1ad3      	subs	r3, r2, r3
 80079bc:	2b02      	cmp	r3, #2
 80079be:	d901      	bls.n	80079c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80079c0:	2303      	movs	r3, #3
 80079c2:	e10c      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079c4:	4b6a      	ldr	r3, [pc, #424]	@ (8007b70 <HAL_RCC_OscConfig+0x474>)
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d0f0      	beq.n	80079b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d106      	bne.n	80079e6 <HAL_RCC_OscConfig+0x2ea>
 80079d8:	4b64      	ldr	r3, [pc, #400]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 80079da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079dc:	4a63      	ldr	r2, [pc, #396]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 80079de:	f043 0301 	orr.w	r3, r3, #1
 80079e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80079e4:	e01c      	b.n	8007a20 <HAL_RCC_OscConfig+0x324>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	2b05      	cmp	r3, #5
 80079ec:	d10c      	bne.n	8007a08 <HAL_RCC_OscConfig+0x30c>
 80079ee:	4b5f      	ldr	r3, [pc, #380]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 80079f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079f2:	4a5e      	ldr	r2, [pc, #376]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 80079f4:	f043 0304 	orr.w	r3, r3, #4
 80079f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80079fa:	4b5c      	ldr	r3, [pc, #368]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 80079fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079fe:	4a5b      	ldr	r2, [pc, #364]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a00:	f043 0301 	orr.w	r3, r3, #1
 8007a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a06:	e00b      	b.n	8007a20 <HAL_RCC_OscConfig+0x324>
 8007a08:	4b58      	ldr	r3, [pc, #352]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a0c:	4a57      	ldr	r2, [pc, #348]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a0e:	f023 0301 	bic.w	r3, r3, #1
 8007a12:	6713      	str	r3, [r2, #112]	@ 0x70
 8007a14:	4b55      	ldr	r3, [pc, #340]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a18:	4a54      	ldr	r2, [pc, #336]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a1a:	f023 0304 	bic.w	r3, r3, #4
 8007a1e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	689b      	ldr	r3, [r3, #8]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d015      	beq.n	8007a54 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a28:	f7fd ffd0 	bl	80059cc <HAL_GetTick>
 8007a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a2e:	e00a      	b.n	8007a46 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a30:	f7fd ffcc 	bl	80059cc <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	693b      	ldr	r3, [r7, #16]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e0cb      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a46:	4b49      	ldr	r3, [pc, #292]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a4a:	f003 0302 	and.w	r3, r3, #2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d0ee      	beq.n	8007a30 <HAL_RCC_OscConfig+0x334>
 8007a52:	e014      	b.n	8007a7e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007a54:	f7fd ffba 	bl	80059cc <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a5a:	e00a      	b.n	8007a72 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007a5c:	f7fd ffb6 	bl	80059cc <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d901      	bls.n	8007a72 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007a6e:	2303      	movs	r3, #3
 8007a70:	e0b5      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a72:	4b3e      	ldr	r3, [pc, #248]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007a76:	f003 0302 	and.w	r3, r3, #2
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d1ee      	bne.n	8007a5c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d105      	bne.n	8007a90 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a84:	4b39      	ldr	r3, [pc, #228]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a88:	4a38      	ldr	r2, [pc, #224]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a8a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007a8e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	699b      	ldr	r3, [r3, #24]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	f000 80a1 	beq.w	8007bdc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007a9a:	4b34      	ldr	r3, [pc, #208]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007a9c:	689b      	ldr	r3, [r3, #8]
 8007a9e:	f003 030c 	and.w	r3, r3, #12
 8007aa2:	2b08      	cmp	r3, #8
 8007aa4:	d05c      	beq.n	8007b60 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	2b02      	cmp	r3, #2
 8007aac:	d141      	bne.n	8007b32 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007aae:	4b31      	ldr	r3, [pc, #196]	@ (8007b74 <HAL_RCC_OscConfig+0x478>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ab4:	f7fd ff8a 	bl	80059cc <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007abc:	f7fd ff86 	bl	80059cc <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e087      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ace:	4b27      	ldr	r3, [pc, #156]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1f0      	bne.n	8007abc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	69da      	ldr	r2, [r3, #28]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6a1b      	ldr	r3, [r3, #32]
 8007ae2:	431a      	orrs	r2, r3
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ae8:	019b      	lsls	r3, r3, #6
 8007aea:	431a      	orrs	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007af0:	085b      	lsrs	r3, r3, #1
 8007af2:	3b01      	subs	r3, #1
 8007af4:	041b      	lsls	r3, r3, #16
 8007af6:	431a      	orrs	r2, r3
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007afc:	061b      	lsls	r3, r3, #24
 8007afe:	491b      	ldr	r1, [pc, #108]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b04:	4b1b      	ldr	r3, [pc, #108]	@ (8007b74 <HAL_RCC_OscConfig+0x478>)
 8007b06:	2201      	movs	r2, #1
 8007b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b0a:	f7fd ff5f 	bl	80059cc <HAL_GetTick>
 8007b0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b10:	e008      	b.n	8007b24 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b12:	f7fd ff5b 	bl	80059cc <HAL_GetTick>
 8007b16:	4602      	mov	r2, r0
 8007b18:	693b      	ldr	r3, [r7, #16]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	2b02      	cmp	r3, #2
 8007b1e:	d901      	bls.n	8007b24 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e05c      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b24:	4b11      	ldr	r3, [pc, #68]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d0f0      	beq.n	8007b12 <HAL_RCC_OscConfig+0x416>
 8007b30:	e054      	b.n	8007bdc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b32:	4b10      	ldr	r3, [pc, #64]	@ (8007b74 <HAL_RCC_OscConfig+0x478>)
 8007b34:	2200      	movs	r2, #0
 8007b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b38:	f7fd ff48 	bl	80059cc <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007b40:	f7fd ff44 	bl	80059cc <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e045      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b52:	4b06      	ldr	r3, [pc, #24]	@ (8007b6c <HAL_RCC_OscConfig+0x470>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f0      	bne.n	8007b40 <HAL_RCC_OscConfig+0x444>
 8007b5e:	e03d      	b.n	8007bdc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	699b      	ldr	r3, [r3, #24]
 8007b64:	2b01      	cmp	r3, #1
 8007b66:	d107      	bne.n	8007b78 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007b68:	2301      	movs	r3, #1
 8007b6a:	e038      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
 8007b6c:	40023800 	.word	0x40023800
 8007b70:	40007000 	.word	0x40007000
 8007b74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <HAL_RCC_OscConfig+0x4ec>)
 8007b7a:	685b      	ldr	r3, [r3, #4]
 8007b7c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	699b      	ldr	r3, [r3, #24]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d028      	beq.n	8007bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b90:	429a      	cmp	r2, r3
 8007b92:	d121      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d11a      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ba2:	68fa      	ldr	r2, [r7, #12]
 8007ba4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007ba8:	4013      	ands	r3, r2
 8007baa:	687a      	ldr	r2, [r7, #4]
 8007bac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007bae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d111      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbe:	085b      	lsrs	r3, r3, #1
 8007bc0:	3b01      	subs	r3, #1
 8007bc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d107      	bne.n	8007bd8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d001      	beq.n	8007bdc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e000      	b.n	8007bde <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007bdc:	2300      	movs	r3, #0
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3718      	adds	r7, #24
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	40023800 	.word	0x40023800

08007bec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d101      	bne.n	8007c00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e0cc      	b.n	8007d9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007c00:	4b68      	ldr	r3, [pc, #416]	@ (8007da4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 0307 	and.w	r3, r3, #7
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	429a      	cmp	r2, r3
 8007c0c:	d90c      	bls.n	8007c28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c0e:	4b65      	ldr	r3, [pc, #404]	@ (8007da4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c10:	683a      	ldr	r2, [r7, #0]
 8007c12:	b2d2      	uxtb	r2, r2
 8007c14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c16:	4b63      	ldr	r3, [pc, #396]	@ (8007da4 <HAL_RCC_ClockConfig+0x1b8>)
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f003 0307 	and.w	r3, r3, #7
 8007c1e:	683a      	ldr	r2, [r7, #0]
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e0b8      	b.n	8007d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d020      	beq.n	8007c76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d005      	beq.n	8007c4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c40:	4b59      	ldr	r3, [pc, #356]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c42:	689b      	ldr	r3, [r3, #8]
 8007c44:	4a58      	ldr	r2, [pc, #352]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007c4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0308 	and.w	r3, r3, #8
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c58:	4b53      	ldr	r3, [pc, #332]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5a:	689b      	ldr	r3, [r3, #8]
 8007c5c:	4a52      	ldr	r2, [pc, #328]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007c62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c64:	4b50      	ldr	r3, [pc, #320]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	494d      	ldr	r1, [pc, #308]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c72:	4313      	orrs	r3, r2
 8007c74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f003 0301 	and.w	r3, r3, #1
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d044      	beq.n	8007d0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	2b01      	cmp	r3, #1
 8007c88:	d107      	bne.n	8007c9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c8a:	4b47      	ldr	r3, [pc, #284]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d119      	bne.n	8007cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	e07f      	b.n	8007d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	685b      	ldr	r3, [r3, #4]
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	d003      	beq.n	8007caa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ca6:	2b03      	cmp	r3, #3
 8007ca8:	d107      	bne.n	8007cba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007caa:	4b3f      	ldr	r3, [pc, #252]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d109      	bne.n	8007cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	e06f      	b.n	8007d9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cba:	4b3b      	ldr	r3, [pc, #236]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f003 0302 	and.w	r3, r3, #2
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d101      	bne.n	8007cca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	e067      	b.n	8007d9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007cca:	4b37      	ldr	r3, [pc, #220]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	f023 0203 	bic.w	r2, r3, #3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	4934      	ldr	r1, [pc, #208]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007cdc:	f7fd fe76 	bl	80059cc <HAL_GetTick>
 8007ce0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007ce2:	e00a      	b.n	8007cfa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007ce4:	f7fd fe72 	bl	80059cc <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d901      	bls.n	8007cfa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007cf6:	2303      	movs	r3, #3
 8007cf8:	e04f      	b.n	8007d9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007cfa:	4b2b      	ldr	r3, [pc, #172]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 020c 	and.w	r2, r3, #12
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	685b      	ldr	r3, [r3, #4]
 8007d06:	009b      	lsls	r3, r3, #2
 8007d08:	429a      	cmp	r2, r3
 8007d0a:	d1eb      	bne.n	8007ce4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007d0c:	4b25      	ldr	r3, [pc, #148]	@ (8007da4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 0307 	and.w	r3, r3, #7
 8007d14:	683a      	ldr	r2, [r7, #0]
 8007d16:	429a      	cmp	r2, r3
 8007d18:	d20c      	bcs.n	8007d34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d1a:	4b22      	ldr	r3, [pc, #136]	@ (8007da4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d1c:	683a      	ldr	r2, [r7, #0]
 8007d1e:	b2d2      	uxtb	r2, r2
 8007d20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d22:	4b20      	ldr	r3, [pc, #128]	@ (8007da4 <HAL_RCC_ClockConfig+0x1b8>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	f003 0307 	and.w	r3, r3, #7
 8007d2a:	683a      	ldr	r2, [r7, #0]
 8007d2c:	429a      	cmp	r2, r3
 8007d2e:	d001      	beq.n	8007d34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d30:	2301      	movs	r3, #1
 8007d32:	e032      	b.n	8007d9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 0304 	and.w	r3, r3, #4
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d008      	beq.n	8007d52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d40:	4b19      	ldr	r3, [pc, #100]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	4916      	ldr	r1, [pc, #88]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d4e:	4313      	orrs	r3, r2
 8007d50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0308 	and.w	r3, r3, #8
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d009      	beq.n	8007d72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007d5e:	4b12      	ldr	r3, [pc, #72]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d60:	689b      	ldr	r3, [r3, #8]
 8007d62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	691b      	ldr	r3, [r3, #16]
 8007d6a:	00db      	lsls	r3, r3, #3
 8007d6c:	490e      	ldr	r1, [pc, #56]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d72:	f000 f82d 	bl	8007dd0 <HAL_RCC_GetSysClockFreq>
 8007d76:	4602      	mov	r2, r0
 8007d78:	4b0b      	ldr	r3, [pc, #44]	@ (8007da8 <HAL_RCC_ClockConfig+0x1bc>)
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	091b      	lsrs	r3, r3, #4
 8007d7e:	f003 030f 	and.w	r3, r3, #15
 8007d82:	490a      	ldr	r1, [pc, #40]	@ (8007dac <HAL_RCC_ClockConfig+0x1c0>)
 8007d84:	5ccb      	ldrb	r3, [r1, r3]
 8007d86:	fa22 f303 	lsr.w	r3, r2, r3
 8007d8a:	4a09      	ldr	r2, [pc, #36]	@ (8007db0 <HAL_RCC_ClockConfig+0x1c4>)
 8007d8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007d8e:	4b09      	ldr	r3, [pc, #36]	@ (8007db4 <HAL_RCC_ClockConfig+0x1c8>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f7fd fdd6 	bl	8005944 <HAL_InitTick>

  return HAL_OK;
 8007d98:	2300      	movs	r3, #0
}
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	3710      	adds	r7, #16
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	bd80      	pop	{r7, pc}
 8007da2:	bf00      	nop
 8007da4:	40023c00 	.word	0x40023c00
 8007da8:	40023800 	.word	0x40023800
 8007dac:	08010650 	.word	0x08010650
 8007db0:	20000040 	.word	0x20000040
 8007db4:	20000044 	.word	0x20000044

08007db8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007db8:	b480      	push	{r7}
 8007dba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007dbc:	4b03      	ldr	r3, [pc, #12]	@ (8007dcc <HAL_RCC_EnableCSS+0x14>)
 8007dbe:	2201      	movs	r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]
}
 8007dc2:	bf00      	nop
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dca:	4770      	bx	lr
 8007dcc:	4247004c 	.word	0x4247004c

08007dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007dd4:	b090      	sub	sp, #64	@ 0x40
 8007dd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007dd8:	2300      	movs	r3, #0
 8007dda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007ddc:	2300      	movs	r3, #0
 8007dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007de0:	2300      	movs	r3, #0
 8007de2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007de4:	2300      	movs	r3, #0
 8007de6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007de8:	4b59      	ldr	r3, [pc, #356]	@ (8007f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f003 030c 	and.w	r3, r3, #12
 8007df0:	2b08      	cmp	r3, #8
 8007df2:	d00d      	beq.n	8007e10 <HAL_RCC_GetSysClockFreq+0x40>
 8007df4:	2b08      	cmp	r3, #8
 8007df6:	f200 80a1 	bhi.w	8007f3c <HAL_RCC_GetSysClockFreq+0x16c>
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d002      	beq.n	8007e04 <HAL_RCC_GetSysClockFreq+0x34>
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d003      	beq.n	8007e0a <HAL_RCC_GetSysClockFreq+0x3a>
 8007e02:	e09b      	b.n	8007f3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e04:	4b53      	ldr	r3, [pc, #332]	@ (8007f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e08:	e09b      	b.n	8007f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e0a:	4b53      	ldr	r3, [pc, #332]	@ (8007f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007e0e:	e098      	b.n	8007f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e10:	4b4f      	ldr	r3, [pc, #316]	@ (8007f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e12:	685b      	ldr	r3, [r3, #4]
 8007e14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007e18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e1a:	4b4d      	ldr	r3, [pc, #308]	@ (8007f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d028      	beq.n	8007e78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e26:	4b4a      	ldr	r3, [pc, #296]	@ (8007f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	099b      	lsrs	r3, r3, #6
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	623b      	str	r3, [r7, #32]
 8007e30:	627a      	str	r2, [r7, #36]	@ 0x24
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e38:	2100      	movs	r1, #0
 8007e3a:	4b47      	ldr	r3, [pc, #284]	@ (8007f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e3c:	fb03 f201 	mul.w	r2, r3, r1
 8007e40:	2300      	movs	r3, #0
 8007e42:	fb00 f303 	mul.w	r3, r0, r3
 8007e46:	4413      	add	r3, r2
 8007e48:	4a43      	ldr	r2, [pc, #268]	@ (8007f58 <HAL_RCC_GetSysClockFreq+0x188>)
 8007e4a:	fba0 1202 	umull	r1, r2, r0, r2
 8007e4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007e50:	460a      	mov	r2, r1
 8007e52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e56:	4413      	add	r3, r2
 8007e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e5c:	2200      	movs	r2, #0
 8007e5e:	61bb      	str	r3, [r7, #24]
 8007e60:	61fa      	str	r2, [r7, #28]
 8007e62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007e6a:	f7f8 fe9d 	bl	8000ba8 <__aeabi_uldivmod>
 8007e6e:	4602      	mov	r2, r0
 8007e70:	460b      	mov	r3, r1
 8007e72:	4613      	mov	r3, r2
 8007e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e76:	e053      	b.n	8007f20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e78:	4b35      	ldr	r3, [pc, #212]	@ (8007f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	099b      	lsrs	r3, r3, #6
 8007e7e:	2200      	movs	r2, #0
 8007e80:	613b      	str	r3, [r7, #16]
 8007e82:	617a      	str	r2, [r7, #20]
 8007e84:	693b      	ldr	r3, [r7, #16]
 8007e86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007e8a:	f04f 0b00 	mov.w	fp, #0
 8007e8e:	4652      	mov	r2, sl
 8007e90:	465b      	mov	r3, fp
 8007e92:	f04f 0000 	mov.w	r0, #0
 8007e96:	f04f 0100 	mov.w	r1, #0
 8007e9a:	0159      	lsls	r1, r3, #5
 8007e9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ea0:	0150      	lsls	r0, r2, #5
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	ebb2 080a 	subs.w	r8, r2, sl
 8007eaa:	eb63 090b 	sbc.w	r9, r3, fp
 8007eae:	f04f 0200 	mov.w	r2, #0
 8007eb2:	f04f 0300 	mov.w	r3, #0
 8007eb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007eba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ebe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007ec2:	ebb2 0408 	subs.w	r4, r2, r8
 8007ec6:	eb63 0509 	sbc.w	r5, r3, r9
 8007eca:	f04f 0200 	mov.w	r2, #0
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	00eb      	lsls	r3, r5, #3
 8007ed4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007ed8:	00e2      	lsls	r2, r4, #3
 8007eda:	4614      	mov	r4, r2
 8007edc:	461d      	mov	r5, r3
 8007ede:	eb14 030a 	adds.w	r3, r4, sl
 8007ee2:	603b      	str	r3, [r7, #0]
 8007ee4:	eb45 030b 	adc.w	r3, r5, fp
 8007ee8:	607b      	str	r3, [r7, #4]
 8007eea:	f04f 0200 	mov.w	r2, #0
 8007eee:	f04f 0300 	mov.w	r3, #0
 8007ef2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007ef6:	4629      	mov	r1, r5
 8007ef8:	028b      	lsls	r3, r1, #10
 8007efa:	4621      	mov	r1, r4
 8007efc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f00:	4621      	mov	r1, r4
 8007f02:	028a      	lsls	r2, r1, #10
 8007f04:	4610      	mov	r0, r2
 8007f06:	4619      	mov	r1, r3
 8007f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	60bb      	str	r3, [r7, #8]
 8007f0e:	60fa      	str	r2, [r7, #12]
 8007f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f14:	f7f8 fe48 	bl	8000ba8 <__aeabi_uldivmod>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	460b      	mov	r3, r1
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007f20:	4b0b      	ldr	r3, [pc, #44]	@ (8007f50 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	0c1b      	lsrs	r3, r3, #16
 8007f26:	f003 0303 	and.w	r3, r3, #3
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	005b      	lsls	r3, r3, #1
 8007f2e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007f30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f34:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f3a:	e002      	b.n	8007f42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f3c:	4b05      	ldr	r3, [pc, #20]	@ (8007f54 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007f40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007f44:	4618      	mov	r0, r3
 8007f46:	3740      	adds	r7, #64	@ 0x40
 8007f48:	46bd      	mov	sp, r7
 8007f4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f4e:	bf00      	nop
 8007f50:	40023800 	.word	0x40023800
 8007f54:	00f42400 	.word	0x00f42400
 8007f58:	00b71b00 	.word	0x00b71b00

08007f5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f60:	4b03      	ldr	r3, [pc, #12]	@ (8007f70 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f62:	681b      	ldr	r3, [r3, #0]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	20000040 	.word	0x20000040

08007f74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007f78:	f7ff fff0 	bl	8007f5c <HAL_RCC_GetHCLKFreq>
 8007f7c:	4602      	mov	r2, r0
 8007f7e:	4b05      	ldr	r3, [pc, #20]	@ (8007f94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007f80:	689b      	ldr	r3, [r3, #8]
 8007f82:	0a9b      	lsrs	r3, r3, #10
 8007f84:	f003 0307 	and.w	r3, r3, #7
 8007f88:	4903      	ldr	r1, [pc, #12]	@ (8007f98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007f8a:	5ccb      	ldrb	r3, [r1, r3]
 8007f8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f90:	4618      	mov	r0, r3
 8007f92:	bd80      	pop	{r7, pc}
 8007f94:	40023800 	.word	0x40023800
 8007f98:	08010660 	.word	0x08010660

08007f9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007fa0:	f7ff ffdc 	bl	8007f5c <HAL_RCC_GetHCLKFreq>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	4b05      	ldr	r3, [pc, #20]	@ (8007fbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	0b5b      	lsrs	r3, r3, #13
 8007fac:	f003 0307 	and.w	r3, r3, #7
 8007fb0:	4903      	ldr	r1, [pc, #12]	@ (8007fc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fb2:	5ccb      	ldrb	r3, [r1, r3]
 8007fb4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	bd80      	pop	{r7, pc}
 8007fbc:	40023800 	.word	0x40023800
 8007fc0:	08010660 	.word	0x08010660

08007fc4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007fc8:	4b06      	ldr	r3, [pc, #24]	@ (8007fe4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007fca:	68db      	ldr	r3, [r3, #12]
 8007fcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fd0:	2b80      	cmp	r3, #128	@ 0x80
 8007fd2:	d104      	bne.n	8007fde <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007fd4:	f000 f80a 	bl	8007fec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007fd8:	4b03      	ldr	r3, [pc, #12]	@ (8007fe8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007fda:	2280      	movs	r2, #128	@ 0x80
 8007fdc:	701a      	strb	r2, [r3, #0]
  }
}
 8007fde:	bf00      	nop
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	4002380e 	.word	0x4002380e

08007fec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007fec:	b480      	push	{r7}
 8007fee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007ff0:	bf00      	nop
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr

08007ffa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007ffa:	b580      	push	{r7, lr}
 8007ffc:	b082      	sub	sp, #8
 8007ffe:	af00      	add	r7, sp, #0
 8008000:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008008:	2301      	movs	r3, #1
 800800a:	e07b      	b.n	8008104 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008010:	2b00      	cmp	r3, #0
 8008012:	d108      	bne.n	8008026 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800801c:	d009      	beq.n	8008032 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	61da      	str	r2, [r3, #28]
 8008024:	e005      	b.n	8008032 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	2200      	movs	r2, #0
 8008030:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800803e:	b2db      	uxtb	r3, r3
 8008040:	2b00      	cmp	r3, #0
 8008042:	d106      	bne.n	8008052 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2200      	movs	r2, #0
 8008048:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800804c:	6878      	ldr	r0, [r7, #4]
 800804e:	f7fc ff69 	bl	8004f24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008068:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	689b      	ldr	r3, [r3, #8]
 8008076:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800807a:	431a      	orrs	r2, r3
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	68db      	ldr	r3, [r3, #12]
 8008080:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008084:	431a      	orrs	r2, r3
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	691b      	ldr	r3, [r3, #16]
 800808a:	f003 0302 	and.w	r3, r3, #2
 800808e:	431a      	orrs	r2, r3
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	695b      	ldr	r3, [r3, #20]
 8008094:	f003 0301 	and.w	r3, r3, #1
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	699b      	ldr	r3, [r3, #24]
 800809e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80080a2:	431a      	orrs	r2, r3
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	69db      	ldr	r3, [r3, #28]
 80080a8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80080ac:	431a      	orrs	r2, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080b6:	ea42 0103 	orr.w	r1, r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80080be:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	699b      	ldr	r3, [r3, #24]
 80080ce:	0c1b      	lsrs	r3, r3, #16
 80080d0:	f003 0104 	and.w	r1, r3, #4
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080d8:	f003 0210 	and.w	r2, r3, #16
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	430a      	orrs	r2, r1
 80080e2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	69da      	ldr	r2, [r3, #28]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80080f2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2201      	movs	r2, #1
 80080fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3708      	adds	r7, #8
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}

0800810c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b08a      	sub	sp, #40	@ 0x28
 8008110:	af00      	add	r7, sp, #0
 8008112:	60f8      	str	r0, [r7, #12]
 8008114:	60b9      	str	r1, [r7, #8]
 8008116:	607a      	str	r2, [r7, #4]
 8008118:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800811a:	2301      	movs	r3, #1
 800811c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800811e:	f7fd fc55 	bl	80059cc <HAL_GetTick>
 8008122:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800812a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8008132:	887b      	ldrh	r3, [r7, #2]
 8008134:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8008136:	7ffb      	ldrb	r3, [r7, #31]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d00c      	beq.n	8008156 <HAL_SPI_TransmitReceive+0x4a>
 800813c:	69bb      	ldr	r3, [r7, #24]
 800813e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008142:	d106      	bne.n	8008152 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	2b00      	cmp	r3, #0
 800814a:	d102      	bne.n	8008152 <HAL_SPI_TransmitReceive+0x46>
 800814c:	7ffb      	ldrb	r3, [r7, #31]
 800814e:	2b04      	cmp	r3, #4
 8008150:	d001      	beq.n	8008156 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8008152:	2302      	movs	r3, #2
 8008154:	e17f      	b.n	8008456 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d005      	beq.n	8008168 <HAL_SPI_TransmitReceive+0x5c>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d002      	beq.n	8008168 <HAL_SPI_TransmitReceive+0x5c>
 8008162:	887b      	ldrh	r3, [r7, #2]
 8008164:	2b00      	cmp	r3, #0
 8008166:	d101      	bne.n	800816c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8008168:	2301      	movs	r3, #1
 800816a:	e174      	b.n	8008456 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8008172:	2b01      	cmp	r3, #1
 8008174:	d101      	bne.n	800817a <HAL_SPI_TransmitReceive+0x6e>
 8008176:	2302      	movs	r3, #2
 8008178:	e16d      	b.n	8008456 <HAL_SPI_TransmitReceive+0x34a>
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	2201      	movs	r2, #1
 800817e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8008188:	b2db      	uxtb	r3, r3
 800818a:	2b04      	cmp	r3, #4
 800818c:	d003      	beq.n	8008196 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	2205      	movs	r2, #5
 8008192:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	2200      	movs	r2, #0
 800819a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	887a      	ldrh	r2, [r7, #2]
 80081a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	887a      	ldrh	r2, [r7, #2]
 80081ac:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	68ba      	ldr	r2, [r7, #8]
 80081b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	887a      	ldrh	r2, [r7, #2]
 80081b8:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	887a      	ldrh	r2, [r7, #2]
 80081be:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2200      	movs	r2, #0
 80081c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	2200      	movs	r2, #0
 80081ca:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80081d6:	2b40      	cmp	r3, #64	@ 0x40
 80081d8:	d007      	beq.n	80081ea <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80081e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80081f2:	d17e      	bne.n	80082f2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	685b      	ldr	r3, [r3, #4]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HAL_SPI_TransmitReceive+0xf6>
 80081fc:	8afb      	ldrh	r3, [r7, #22]
 80081fe:	2b01      	cmp	r3, #1
 8008200:	d16c      	bne.n	80082dc <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008206:	881a      	ldrh	r2, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008212:	1c9a      	adds	r2, r3, #2
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800821c:	b29b      	uxth	r3, r3
 800821e:	3b01      	subs	r3, #1
 8008220:	b29a      	uxth	r2, r3
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008226:	e059      	b.n	80082dc <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	689b      	ldr	r3, [r3, #8]
 800822e:	f003 0302 	and.w	r3, r3, #2
 8008232:	2b02      	cmp	r3, #2
 8008234:	d11b      	bne.n	800826e <HAL_SPI_TransmitReceive+0x162>
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800823a:	b29b      	uxth	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	d016      	beq.n	800826e <HAL_SPI_TransmitReceive+0x162>
 8008240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008242:	2b01      	cmp	r3, #1
 8008244:	d113      	bne.n	800826e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800824a:	881a      	ldrh	r2, [r3, #0]
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008256:	1c9a      	adds	r2, r3, #2
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008260:	b29b      	uxth	r3, r3
 8008262:	3b01      	subs	r3, #1
 8008264:	b29a      	uxth	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800826a:	2300      	movs	r3, #0
 800826c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	f003 0301 	and.w	r3, r3, #1
 8008278:	2b01      	cmp	r3, #1
 800827a:	d119      	bne.n	80082b0 <HAL_SPI_TransmitReceive+0x1a4>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008280:	b29b      	uxth	r3, r3
 8008282:	2b00      	cmp	r3, #0
 8008284:	d014      	beq.n	80082b0 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	68da      	ldr	r2, [r3, #12]
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008290:	b292      	uxth	r2, r2
 8008292:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008298:	1c9a      	adds	r2, r3, #2
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	3b01      	subs	r3, #1
 80082a6:	b29a      	uxth	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80082ac:	2301      	movs	r3, #1
 80082ae:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80082b0:	f7fd fb8c 	bl	80059cc <HAL_GetTick>
 80082b4:	4602      	mov	r2, r0
 80082b6:	6a3b      	ldr	r3, [r7, #32]
 80082b8:	1ad3      	subs	r3, r2, r3
 80082ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80082bc:	429a      	cmp	r2, r3
 80082be:	d80d      	bhi.n	80082dc <HAL_SPI_TransmitReceive+0x1d0>
 80082c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80082c2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80082c6:	d009      	beq.n	80082dc <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	e0bc      	b.n	8008456 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d1a0      	bne.n	8008228 <HAL_SPI_TransmitReceive+0x11c>
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80082ea:	b29b      	uxth	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d19b      	bne.n	8008228 <HAL_SPI_TransmitReceive+0x11c>
 80082f0:	e082      	b.n	80083f8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d002      	beq.n	8008300 <HAL_SPI_TransmitReceive+0x1f4>
 80082fa:	8afb      	ldrh	r3, [r7, #22]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d171      	bne.n	80083e4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	330c      	adds	r3, #12
 800830a:	7812      	ldrb	r2, [r2, #0]
 800830c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008312:	1c5a      	adds	r2, r3, #1
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800831c:	b29b      	uxth	r3, r3
 800831e:	3b01      	subs	r3, #1
 8008320:	b29a      	uxth	r2, r3
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008326:	e05d      	b.n	80083e4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	f003 0302 	and.w	r3, r3, #2
 8008332:	2b02      	cmp	r3, #2
 8008334:	d11c      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x264>
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800833a:	b29b      	uxth	r3, r3
 800833c:	2b00      	cmp	r3, #0
 800833e:	d017      	beq.n	8008370 <HAL_SPI_TransmitReceive+0x264>
 8008340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008342:	2b01      	cmp	r3, #1
 8008344:	d114      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	330c      	adds	r3, #12
 8008350:	7812      	ldrb	r2, [r2, #0]
 8008352:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008362:	b29b      	uxth	r3, r3
 8008364:	3b01      	subs	r3, #1
 8008366:	b29a      	uxth	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800836c:	2300      	movs	r3, #0
 800836e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f003 0301 	and.w	r3, r3, #1
 800837a:	2b01      	cmp	r3, #1
 800837c:	d119      	bne.n	80083b2 <HAL_SPI_TransmitReceive+0x2a6>
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008382:	b29b      	uxth	r3, r3
 8008384:	2b00      	cmp	r3, #0
 8008386:	d014      	beq.n	80083b2 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	68da      	ldr	r2, [r3, #12]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008392:	b2d2      	uxtb	r2, r2
 8008394:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800839a:	1c5a      	adds	r2, r3, #1
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	3b01      	subs	r3, #1
 80083a8:	b29a      	uxth	r2, r3
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80083ae:	2301      	movs	r3, #1
 80083b0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80083b2:	f7fd fb0b 	bl	80059cc <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	6a3b      	ldr	r3, [r7, #32]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80083be:	429a      	cmp	r2, r3
 80083c0:	d803      	bhi.n	80083ca <HAL_SPI_TransmitReceive+0x2be>
 80083c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80083c8:	d102      	bne.n	80083d0 <HAL_SPI_TransmitReceive+0x2c4>
 80083ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d109      	bne.n	80083e4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80083e0:	2303      	movs	r3, #3
 80083e2:	e038      	b.n	8008456 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d19c      	bne.n	8008328 <HAL_SPI_TransmitReceive+0x21c>
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d197      	bne.n	8008328 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80083f8:	6a3a      	ldr	r2, [r7, #32]
 80083fa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 f8b7 	bl	8008570 <SPI_EndRxTxTransaction>
 8008402:	4603      	mov	r3, r0
 8008404:	2b00      	cmp	r3, #0
 8008406:	d008      	beq.n	800841a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	2220      	movs	r2, #32
 800840c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2200      	movs	r2, #0
 8008412:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008416:	2301      	movs	r3, #1
 8008418:	e01d      	b.n	8008456 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	689b      	ldr	r3, [r3, #8]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d10a      	bne.n	8008438 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008422:	2300      	movs	r3, #0
 8008424:	613b      	str	r3, [r7, #16]
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	613b      	str	r3, [r7, #16]
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689b      	ldr	r3, [r3, #8]
 8008434:	613b      	str	r3, [r7, #16]
 8008436:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2201      	movs	r2, #1
 800843c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800844c:	2b00      	cmp	r3, #0
 800844e:	d001      	beq.n	8008454 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	e000      	b.n	8008456 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8008454:	2300      	movs	r3, #0
  }
}
 8008456:	4618      	mov	r0, r3
 8008458:	3728      	adds	r7, #40	@ 0x28
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b088      	sub	sp, #32
 8008464:	af00      	add	r7, sp, #0
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	60b9      	str	r1, [r7, #8]
 800846a:	603b      	str	r3, [r7, #0]
 800846c:	4613      	mov	r3, r2
 800846e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008470:	f7fd faac 	bl	80059cc <HAL_GetTick>
 8008474:	4602      	mov	r2, r0
 8008476:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008478:	1a9b      	subs	r3, r3, r2
 800847a:	683a      	ldr	r2, [r7, #0]
 800847c:	4413      	add	r3, r2
 800847e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008480:	f7fd faa4 	bl	80059cc <HAL_GetTick>
 8008484:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008486:	4b39      	ldr	r3, [pc, #228]	@ (800856c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	015b      	lsls	r3, r3, #5
 800848c:	0d1b      	lsrs	r3, r3, #20
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	fb02 f303 	mul.w	r3, r2, r3
 8008494:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008496:	e055      	b.n	8008544 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800849e:	d051      	beq.n	8008544 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80084a0:	f7fd fa94 	bl	80059cc <HAL_GetTick>
 80084a4:	4602      	mov	r2, r0
 80084a6:	69bb      	ldr	r3, [r7, #24]
 80084a8:	1ad3      	subs	r3, r2, r3
 80084aa:	69fa      	ldr	r2, [r7, #28]
 80084ac:	429a      	cmp	r2, r3
 80084ae:	d902      	bls.n	80084b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d13d      	bne.n	8008532 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80084c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80084ce:	d111      	bne.n	80084f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	689b      	ldr	r3, [r3, #8]
 80084d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80084d8:	d004      	beq.n	80084e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	689b      	ldr	r3, [r3, #8]
 80084de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80084e2:	d107      	bne.n	80084f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681a      	ldr	r2, [r3, #0]
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80084f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80084fc:	d10f      	bne.n	800851e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	681a      	ldr	r2, [r3, #0]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800850c:	601a      	str	r2, [r3, #0]
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	681a      	ldr	r2, [r3, #0]
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800851c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	2201      	movs	r2, #1
 8008522:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	2200      	movs	r2, #0
 800852a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800852e:	2303      	movs	r3, #3
 8008530:	e018      	b.n	8008564 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008538:	2300      	movs	r3, #0
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	e002      	b.n	8008544 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800853e:	697b      	ldr	r3, [r7, #20]
 8008540:	3b01      	subs	r3, #1
 8008542:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	689a      	ldr	r2, [r3, #8]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	4013      	ands	r3, r2
 800854e:	68ba      	ldr	r2, [r7, #8]
 8008550:	429a      	cmp	r2, r3
 8008552:	bf0c      	ite	eq
 8008554:	2301      	moveq	r3, #1
 8008556:	2300      	movne	r3, #0
 8008558:	b2db      	uxtb	r3, r3
 800855a:	461a      	mov	r2, r3
 800855c:	79fb      	ldrb	r3, [r7, #7]
 800855e:	429a      	cmp	r2, r3
 8008560:	d19a      	bne.n	8008498 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8008562:	2300      	movs	r3, #0
}
 8008564:	4618      	mov	r0, r3
 8008566:	3720      	adds	r7, #32
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	20000040 	.word	0x20000040

08008570 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b088      	sub	sp, #32
 8008574:	af02      	add	r7, sp, #8
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	9300      	str	r3, [sp, #0]
 8008580:	68bb      	ldr	r3, [r7, #8]
 8008582:	2201      	movs	r2, #1
 8008584:	2102      	movs	r1, #2
 8008586:	68f8      	ldr	r0, [r7, #12]
 8008588:	f7ff ff6a 	bl	8008460 <SPI_WaitFlagStateUntilTimeout>
 800858c:	4603      	mov	r3, r0
 800858e:	2b00      	cmp	r3, #0
 8008590:	d007      	beq.n	80085a2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008596:	f043 0220 	orr.w	r2, r3, #32
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800859e:	2303      	movs	r3, #3
 80085a0:	e032      	b.n	8008608 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80085a2:	4b1b      	ldr	r3, [pc, #108]	@ (8008610 <SPI_EndRxTxTransaction+0xa0>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a1b      	ldr	r2, [pc, #108]	@ (8008614 <SPI_EndRxTxTransaction+0xa4>)
 80085a8:	fba2 2303 	umull	r2, r3, r2, r3
 80085ac:	0d5b      	lsrs	r3, r3, #21
 80085ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80085b2:	fb02 f303 	mul.w	r3, r2, r3
 80085b6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80085c0:	d112      	bne.n	80085e8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	2200      	movs	r2, #0
 80085ca:	2180      	movs	r1, #128	@ 0x80
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f7ff ff47 	bl	8008460 <SPI_WaitFlagStateUntilTimeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d016      	beq.n	8008606 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80085dc:	f043 0220 	orr.w	r2, r3, #32
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80085e4:	2303      	movs	r3, #3
 80085e6:	e00f      	b.n	8008608 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	3b01      	subs	r3, #1
 80085f2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085fe:	2b80      	cmp	r3, #128	@ 0x80
 8008600:	d0f2      	beq.n	80085e8 <SPI_EndRxTxTransaction+0x78>
 8008602:	e000      	b.n	8008606 <SPI_EndRxTxTransaction+0x96>
        break;
 8008604:	bf00      	nop
  }

  return HAL_OK;
 8008606:	2300      	movs	r3, #0
}
 8008608:	4618      	mov	r0, r3
 800860a:	3718      	adds	r7, #24
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}
 8008610:	20000040 	.word	0x20000040
 8008614:	165e9f81 	.word	0x165e9f81

08008618 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008618:	b580      	push	{r7, lr}
 800861a:	b082      	sub	sp, #8
 800861c:	af00      	add	r7, sp, #0
 800861e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d101      	bne.n	800862a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008626:	2301      	movs	r3, #1
 8008628:	e041      	b.n	80086ae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008630:	b2db      	uxtb	r3, r3
 8008632:	2b00      	cmp	r3, #0
 8008634:	d106      	bne.n	8008644 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2200      	movs	r2, #0
 800863a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f7fc fd26 	bl	8005090 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2202      	movs	r2, #2
 8008648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681a      	ldr	r2, [r3, #0]
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	3304      	adds	r3, #4
 8008654:	4619      	mov	r1, r3
 8008656:	4610      	mov	r0, r2
 8008658:	f000 fa06 	bl	8008a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2201      	movs	r2, #1
 8008660:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2201      	movs	r2, #1
 8008668:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	2201      	movs	r2, #1
 8008670:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2201      	movs	r2, #1
 8008680:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2201      	movs	r2, #1
 8008688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2201      	movs	r2, #1
 8008690:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2201      	movs	r2, #1
 80086a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2201      	movs	r2, #1
 80086a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80086ac:	2300      	movs	r3, #0
}
 80086ae:	4618      	mov	r0, r3
 80086b0:	3708      	adds	r7, #8
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}

080086b6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80086b6:	b580      	push	{r7, lr}
 80086b8:	b082      	sub	sp, #8
 80086ba:	af00      	add	r7, sp, #0
 80086bc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d101      	bne.n	80086c8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80086c4:	2301      	movs	r3, #1
 80086c6:	e041      	b.n	800874c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d106      	bne.n	80086e2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f7fc fc89 	bl	8004ff4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2202      	movs	r2, #2
 80086e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	681a      	ldr	r2, [r3, #0]
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	3304      	adds	r3, #4
 80086f2:	4619      	mov	r1, r3
 80086f4:	4610      	mov	r0, r2
 80086f6:	f000 f9b7 	bl	8008a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2201      	movs	r2, #1
 80086fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	2201      	movs	r2, #1
 8008716:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	2201      	movs	r2, #1
 800871e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2201      	movs	r2, #1
 800872e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2201      	movs	r2, #1
 8008736:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2201      	movs	r2, #1
 800873e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	2201      	movs	r2, #1
 8008746:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800874a:	2300      	movs	r3, #0
}
 800874c:	4618      	mov	r0, r3
 800874e:	3708      	adds	r7, #8
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}

08008754 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	60b9      	str	r1, [r7, #8]
 800875e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008760:	2300      	movs	r3, #0
 8008762:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800876a:	2b01      	cmp	r3, #1
 800876c:	d101      	bne.n	8008772 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800876e:	2302      	movs	r3, #2
 8008770:	e0ae      	b.n	80088d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2b0c      	cmp	r3, #12
 800877e:	f200 809f 	bhi.w	80088c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008782:	a201      	add	r2, pc, #4	@ (adr r2, 8008788 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008784:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008788:	080087bd 	.word	0x080087bd
 800878c:	080088c1 	.word	0x080088c1
 8008790:	080088c1 	.word	0x080088c1
 8008794:	080088c1 	.word	0x080088c1
 8008798:	080087fd 	.word	0x080087fd
 800879c:	080088c1 	.word	0x080088c1
 80087a0:	080088c1 	.word	0x080088c1
 80087a4:	080088c1 	.word	0x080088c1
 80087a8:	0800883f 	.word	0x0800883f
 80087ac:	080088c1 	.word	0x080088c1
 80087b0:	080088c1 	.word	0x080088c1
 80087b4:	080088c1 	.word	0x080088c1
 80087b8:	0800887f 	.word	0x0800887f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68b9      	ldr	r1, [r7, #8]
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 f9f6 	bl	8008bb4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	699a      	ldr	r2, [r3, #24]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0208 	orr.w	r2, r2, #8
 80087d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	699a      	ldr	r2, [r3, #24]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f022 0204 	bic.w	r2, r2, #4
 80087e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087e8:	68fb      	ldr	r3, [r7, #12]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6999      	ldr	r1, [r3, #24]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	691a      	ldr	r2, [r3, #16]
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	430a      	orrs	r2, r1
 80087f8:	619a      	str	r2, [r3, #24]
      break;
 80087fa:	e064      	b.n	80088c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	68b9      	ldr	r1, [r7, #8]
 8008802:	4618      	mov	r0, r3
 8008804:	f000 fa46 	bl	8008c94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	699a      	ldr	r2, [r3, #24]
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008816:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	699a      	ldr	r2, [r3, #24]
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008826:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	6999      	ldr	r1, [r3, #24]
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	691b      	ldr	r3, [r3, #16]
 8008832:	021a      	lsls	r2, r3, #8
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	430a      	orrs	r2, r1
 800883a:	619a      	str	r2, [r3, #24]
      break;
 800883c:	e043      	b.n	80088c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68b9      	ldr	r1, [r7, #8]
 8008844:	4618      	mov	r0, r3
 8008846:	f000 fa9b 	bl	8008d80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	69da      	ldr	r2, [r3, #28]
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f042 0208 	orr.w	r2, r2, #8
 8008858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800885a:	68fb      	ldr	r3, [r7, #12]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	69da      	ldr	r2, [r3, #28]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	f022 0204 	bic.w	r2, r2, #4
 8008868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	69d9      	ldr	r1, [r3, #28]
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	691a      	ldr	r2, [r3, #16]
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	430a      	orrs	r2, r1
 800887a:	61da      	str	r2, [r3, #28]
      break;
 800887c:	e023      	b.n	80088c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68b9      	ldr	r1, [r7, #8]
 8008884:	4618      	mov	r0, r3
 8008886:	f000 faef 	bl	8008e68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	69da      	ldr	r2, [r3, #28]
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008898:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	69da      	ldr	r2, [r3, #28]
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	681b      	ldr	r3, [r3, #0]
 80088a4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088aa:	68fb      	ldr	r3, [r7, #12]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	69d9      	ldr	r1, [r3, #28]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	691b      	ldr	r3, [r3, #16]
 80088b4:	021a      	lsls	r2, r3, #8
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	430a      	orrs	r2, r1
 80088bc:	61da      	str	r2, [r3, #28]
      break;
 80088be:	e002      	b.n	80088c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088c0:	2301      	movs	r3, #1
 80088c2:	75fb      	strb	r3, [r7, #23]
      break;
 80088c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	2200      	movs	r2, #0
 80088ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80088d0:	4618      	mov	r0, r3
 80088d2:	3718      	adds	r7, #24
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088e2:	2300      	movs	r3, #0
 80088e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088ec:	2b01      	cmp	r3, #1
 80088ee:	d101      	bne.n	80088f4 <HAL_TIM_ConfigClockSource+0x1c>
 80088f0:	2302      	movs	r3, #2
 80088f2:	e0b4      	b.n	8008a5e <HAL_TIM_ConfigClockSource+0x186>
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	2201      	movs	r2, #1
 80088f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2202      	movs	r2, #2
 8008900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	689b      	ldr	r3, [r3, #8]
 800890a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800890c:	68bb      	ldr	r3, [r7, #8]
 800890e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008912:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800891a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	68ba      	ldr	r2, [r7, #8]
 8008922:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008924:	683b      	ldr	r3, [r7, #0]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800892c:	d03e      	beq.n	80089ac <HAL_TIM_ConfigClockSource+0xd4>
 800892e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008932:	f200 8087 	bhi.w	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 8008936:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800893a:	f000 8086 	beq.w	8008a4a <HAL_TIM_ConfigClockSource+0x172>
 800893e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008942:	d87f      	bhi.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 8008944:	2b70      	cmp	r3, #112	@ 0x70
 8008946:	d01a      	beq.n	800897e <HAL_TIM_ConfigClockSource+0xa6>
 8008948:	2b70      	cmp	r3, #112	@ 0x70
 800894a:	d87b      	bhi.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 800894c:	2b60      	cmp	r3, #96	@ 0x60
 800894e:	d050      	beq.n	80089f2 <HAL_TIM_ConfigClockSource+0x11a>
 8008950:	2b60      	cmp	r3, #96	@ 0x60
 8008952:	d877      	bhi.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 8008954:	2b50      	cmp	r3, #80	@ 0x50
 8008956:	d03c      	beq.n	80089d2 <HAL_TIM_ConfigClockSource+0xfa>
 8008958:	2b50      	cmp	r3, #80	@ 0x50
 800895a:	d873      	bhi.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 800895c:	2b40      	cmp	r3, #64	@ 0x40
 800895e:	d058      	beq.n	8008a12 <HAL_TIM_ConfigClockSource+0x13a>
 8008960:	2b40      	cmp	r3, #64	@ 0x40
 8008962:	d86f      	bhi.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 8008964:	2b30      	cmp	r3, #48	@ 0x30
 8008966:	d064      	beq.n	8008a32 <HAL_TIM_ConfigClockSource+0x15a>
 8008968:	2b30      	cmp	r3, #48	@ 0x30
 800896a:	d86b      	bhi.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 800896c:	2b20      	cmp	r3, #32
 800896e:	d060      	beq.n	8008a32 <HAL_TIM_ConfigClockSource+0x15a>
 8008970:	2b20      	cmp	r3, #32
 8008972:	d867      	bhi.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d05c      	beq.n	8008a32 <HAL_TIM_ConfigClockSource+0x15a>
 8008978:	2b10      	cmp	r3, #16
 800897a:	d05a      	beq.n	8008a32 <HAL_TIM_ConfigClockSource+0x15a>
 800897c:	e062      	b.n	8008a44 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800898a:	683b      	ldr	r3, [r7, #0]
 800898c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800898e:	f000 fb3b 	bl	8009008 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800899a:	68bb      	ldr	r3, [r7, #8]
 800899c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80089a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	68ba      	ldr	r2, [r7, #8]
 80089a8:	609a      	str	r2, [r3, #8]
      break;
 80089aa:	e04f      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089bc:	f000 fb24 	bl	8009008 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	689a      	ldr	r2, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089ce:	609a      	str	r2, [r3, #8]
      break;
 80089d0:	e03c      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089de:	461a      	mov	r2, r3
 80089e0:	f000 fa98 	bl	8008f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	2150      	movs	r1, #80	@ 0x50
 80089ea:	4618      	mov	r0, r3
 80089ec:	f000 faf1 	bl	8008fd2 <TIM_ITRx_SetConfig>
      break;
 80089f0:	e02c      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089fe:	461a      	mov	r2, r3
 8008a00:	f000 fab7 	bl	8008f72 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	2160      	movs	r1, #96	@ 0x60
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	f000 fae1 	bl	8008fd2 <TIM_ITRx_SetConfig>
      break;
 8008a10:	e01c      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a1a:	683b      	ldr	r3, [r7, #0]
 8008a1c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a1e:	461a      	mov	r2, r3
 8008a20:	f000 fa78 	bl	8008f14 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	2140      	movs	r1, #64	@ 0x40
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f000 fad1 	bl	8008fd2 <TIM_ITRx_SetConfig>
      break;
 8008a30:	e00c      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4619      	mov	r1, r3
 8008a3c:	4610      	mov	r0, r2
 8008a3e:	f000 fac8 	bl	8008fd2 <TIM_ITRx_SetConfig>
      break;
 8008a42:	e003      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a44:	2301      	movs	r3, #1
 8008a46:	73fb      	strb	r3, [r7, #15]
      break;
 8008a48:	e000      	b.n	8008a4c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a4a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2201      	movs	r2, #1
 8008a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	2200      	movs	r2, #0
 8008a58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3710      	adds	r7, #16
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a43      	ldr	r2, [pc, #268]	@ (8008b88 <TIM_Base_SetConfig+0x120>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d013      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008a86:	d00f      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	4a40      	ldr	r2, [pc, #256]	@ (8008b8c <TIM_Base_SetConfig+0x124>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d00b      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	4a3f      	ldr	r2, [pc, #252]	@ (8008b90 <TIM_Base_SetConfig+0x128>)
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d007      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	4a3e      	ldr	r2, [pc, #248]	@ (8008b94 <TIM_Base_SetConfig+0x12c>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d003      	beq.n	8008aa8 <TIM_Base_SetConfig+0x40>
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	4a3d      	ldr	r2, [pc, #244]	@ (8008b98 <TIM_Base_SetConfig+0x130>)
 8008aa4:	4293      	cmp	r3, r2
 8008aa6:	d108      	bne.n	8008aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ab0:	683b      	ldr	r3, [r7, #0]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	68fa      	ldr	r2, [r7, #12]
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	4a32      	ldr	r2, [pc, #200]	@ (8008b88 <TIM_Base_SetConfig+0x120>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d02b      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008ac8:	d027      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	4a2f      	ldr	r2, [pc, #188]	@ (8008b8c <TIM_Base_SetConfig+0x124>)
 8008ace:	4293      	cmp	r3, r2
 8008ad0:	d023      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	4a2e      	ldr	r2, [pc, #184]	@ (8008b90 <TIM_Base_SetConfig+0x128>)
 8008ad6:	4293      	cmp	r3, r2
 8008ad8:	d01f      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	4a2d      	ldr	r2, [pc, #180]	@ (8008b94 <TIM_Base_SetConfig+0x12c>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d01b      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	4a2c      	ldr	r2, [pc, #176]	@ (8008b98 <TIM_Base_SetConfig+0x130>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d017      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a2b      	ldr	r2, [pc, #172]	@ (8008b9c <TIM_Base_SetConfig+0x134>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d013      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a2a      	ldr	r2, [pc, #168]	@ (8008ba0 <TIM_Base_SetConfig+0x138>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d00f      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	4a29      	ldr	r2, [pc, #164]	@ (8008ba4 <TIM_Base_SetConfig+0x13c>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d00b      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	4a28      	ldr	r2, [pc, #160]	@ (8008ba8 <TIM_Base_SetConfig+0x140>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d007      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	4a27      	ldr	r2, [pc, #156]	@ (8008bac <TIM_Base_SetConfig+0x144>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d003      	beq.n	8008b1a <TIM_Base_SetConfig+0xb2>
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	4a26      	ldr	r2, [pc, #152]	@ (8008bb0 <TIM_Base_SetConfig+0x148>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d108      	bne.n	8008b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008b1a:	68fb      	ldr	r3, [r7, #12]
 8008b1c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	68db      	ldr	r3, [r3, #12]
 8008b26:	68fa      	ldr	r2, [r7, #12]
 8008b28:	4313      	orrs	r3, r2
 8008b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	4313      	orrs	r3, r2
 8008b38:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689a      	ldr	r2, [r3, #8]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	681a      	ldr	r2, [r3, #0]
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	4a0e      	ldr	r2, [pc, #56]	@ (8008b88 <TIM_Base_SetConfig+0x120>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d003      	beq.n	8008b5a <TIM_Base_SetConfig+0xf2>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	4a10      	ldr	r2, [pc, #64]	@ (8008b98 <TIM_Base_SetConfig+0x130>)
 8008b56:	4293      	cmp	r3, r2
 8008b58:	d103      	bne.n	8008b62 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	691a      	ldr	r2, [r3, #16]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	f043 0204 	orr.w	r2, r3, #4
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	68fa      	ldr	r2, [r7, #12]
 8008b78:	601a      	str	r2, [r3, #0]
}
 8008b7a:	bf00      	nop
 8008b7c:	3714      	adds	r7, #20
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40010000 	.word	0x40010000
 8008b8c:	40000400 	.word	0x40000400
 8008b90:	40000800 	.word	0x40000800
 8008b94:	40000c00 	.word	0x40000c00
 8008b98:	40010400 	.word	0x40010400
 8008b9c:	40014000 	.word	0x40014000
 8008ba0:	40014400 	.word	0x40014400
 8008ba4:	40014800 	.word	0x40014800
 8008ba8:	40001800 	.word	0x40001800
 8008bac:	40001c00 	.word	0x40001c00
 8008bb0:	40002000 	.word	0x40002000

08008bb4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f023 0201 	bic.w	r2, r3, #1
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	699b      	ldr	r3, [r3, #24]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f023 0303 	bic.w	r3, r3, #3
 8008bea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68fa      	ldr	r2, [r7, #12]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	f023 0302 	bic.w	r3, r3, #2
 8008bfc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	689b      	ldr	r3, [r3, #8]
 8008c02:	697a      	ldr	r2, [r7, #20]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	4a20      	ldr	r2, [pc, #128]	@ (8008c8c <TIM_OC1_SetConfig+0xd8>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d003      	beq.n	8008c18 <TIM_OC1_SetConfig+0x64>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	4a1f      	ldr	r2, [pc, #124]	@ (8008c90 <TIM_OC1_SetConfig+0xdc>)
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d10c      	bne.n	8008c32 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	f023 0308 	bic.w	r3, r3, #8
 8008c1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008c20:	683b      	ldr	r3, [r7, #0]
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	697a      	ldr	r2, [r7, #20]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008c2a:	697b      	ldr	r3, [r7, #20]
 8008c2c:	f023 0304 	bic.w	r3, r3, #4
 8008c30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	4a15      	ldr	r2, [pc, #84]	@ (8008c8c <TIM_OC1_SetConfig+0xd8>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d003      	beq.n	8008c42 <TIM_OC1_SetConfig+0x8e>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4a14      	ldr	r2, [pc, #80]	@ (8008c90 <TIM_OC1_SetConfig+0xdc>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d111      	bne.n	8008c66 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008c42:	693b      	ldr	r3, [r7, #16]
 8008c44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008c48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008c50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	695b      	ldr	r3, [r3, #20]
 8008c56:	693a      	ldr	r2, [r7, #16]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008c5c:	683b      	ldr	r3, [r7, #0]
 8008c5e:	699b      	ldr	r3, [r3, #24]
 8008c60:	693a      	ldr	r2, [r7, #16]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685a      	ldr	r2, [r3, #4]
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	697a      	ldr	r2, [r7, #20]
 8008c7e:	621a      	str	r2, [r3, #32]
}
 8008c80:	bf00      	nop
 8008c82:	371c      	adds	r7, #28
 8008c84:	46bd      	mov	sp, r7
 8008c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8a:	4770      	bx	lr
 8008c8c:	40010000 	.word	0x40010000
 8008c90:	40010400 	.word	0x40010400

08008c94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6a1b      	ldr	r3, [r3, #32]
 8008ca2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6a1b      	ldr	r3, [r3, #32]
 8008ca8:	f023 0210 	bic.w	r2, r3, #16
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	685b      	ldr	r3, [r3, #4]
 8008cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	699b      	ldr	r3, [r3, #24]
 8008cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008cc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	021b      	lsls	r3, r3, #8
 8008cd2:	68fa      	ldr	r2, [r7, #12]
 8008cd4:	4313      	orrs	r3, r2
 8008cd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	f023 0320 	bic.w	r3, r3, #32
 8008cde:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	689b      	ldr	r3, [r3, #8]
 8008ce4:	011b      	lsls	r3, r3, #4
 8008ce6:	697a      	ldr	r2, [r7, #20]
 8008ce8:	4313      	orrs	r3, r2
 8008cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a22      	ldr	r2, [pc, #136]	@ (8008d78 <TIM_OC2_SetConfig+0xe4>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d003      	beq.n	8008cfc <TIM_OC2_SetConfig+0x68>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	4a21      	ldr	r2, [pc, #132]	@ (8008d7c <TIM_OC2_SetConfig+0xe8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d10d      	bne.n	8008d18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008d02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	68db      	ldr	r3, [r3, #12]
 8008d08:	011b      	lsls	r3, r3, #4
 8008d0a:	697a      	ldr	r2, [r7, #20]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008d10:	697b      	ldr	r3, [r7, #20]
 8008d12:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008d16:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	4a17      	ldr	r2, [pc, #92]	@ (8008d78 <TIM_OC2_SetConfig+0xe4>)
 8008d1c:	4293      	cmp	r3, r2
 8008d1e:	d003      	beq.n	8008d28 <TIM_OC2_SetConfig+0x94>
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	4a16      	ldr	r2, [pc, #88]	@ (8008d7c <TIM_OC2_SetConfig+0xe8>)
 8008d24:	4293      	cmp	r3, r2
 8008d26:	d113      	bne.n	8008d50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008d28:	693b      	ldr	r3, [r7, #16]
 8008d2a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008d2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008d36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008d38:	683b      	ldr	r3, [r7, #0]
 8008d3a:	695b      	ldr	r3, [r3, #20]
 8008d3c:	009b      	lsls	r3, r3, #2
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	4313      	orrs	r3, r2
 8008d42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	699b      	ldr	r3, [r3, #24]
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	4313      	orrs	r3, r2
 8008d4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	693a      	ldr	r2, [r7, #16]
 8008d54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	68fa      	ldr	r2, [r7, #12]
 8008d5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008d5c:	683b      	ldr	r3, [r7, #0]
 8008d5e:	685a      	ldr	r2, [r3, #4]
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	697a      	ldr	r2, [r7, #20]
 8008d68:	621a      	str	r2, [r3, #32]
}
 8008d6a:	bf00      	nop
 8008d6c:	371c      	adds	r7, #28
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d74:	4770      	bx	lr
 8008d76:	bf00      	nop
 8008d78:	40010000 	.word	0x40010000
 8008d7c:	40010400 	.word	0x40010400

08008d80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b087      	sub	sp, #28
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
 8008d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6a1b      	ldr	r3, [r3, #32]
 8008d8e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6a1b      	ldr	r3, [r3, #32]
 8008d94:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	685b      	ldr	r3, [r3, #4]
 8008da0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008db8:	683b      	ldr	r3, [r7, #0]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68fa      	ldr	r2, [r7, #12]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008dc2:	697b      	ldr	r3, [r7, #20]
 8008dc4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008dca:	683b      	ldr	r3, [r7, #0]
 8008dcc:	689b      	ldr	r3, [r3, #8]
 8008dce:	021b      	lsls	r3, r3, #8
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	4313      	orrs	r3, r2
 8008dd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	4a21      	ldr	r2, [pc, #132]	@ (8008e60 <TIM_OC3_SetConfig+0xe0>)
 8008dda:	4293      	cmp	r3, r2
 8008ddc:	d003      	beq.n	8008de6 <TIM_OC3_SetConfig+0x66>
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	4a20      	ldr	r2, [pc, #128]	@ (8008e64 <TIM_OC3_SetConfig+0xe4>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d10d      	bne.n	8008e02 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008de6:	697b      	ldr	r3, [r7, #20]
 8008de8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008dec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	021b      	lsls	r3, r3, #8
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a16      	ldr	r2, [pc, #88]	@ (8008e60 <TIM_OC3_SetConfig+0xe0>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC3_SetConfig+0x92>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a15      	ldr	r2, [pc, #84]	@ (8008e64 <TIM_OC3_SetConfig+0xe4>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d113      	bne.n	8008e3a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	011b      	lsls	r3, r3, #4
 8008e28:	693a      	ldr	r2, [r7, #16]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008e2e:	683b      	ldr	r3, [r7, #0]
 8008e30:	699b      	ldr	r3, [r3, #24]
 8008e32:	011b      	lsls	r3, r3, #4
 8008e34:	693a      	ldr	r2, [r7, #16]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	697a      	ldr	r2, [r7, #20]
 8008e52:	621a      	str	r2, [r3, #32]
}
 8008e54:	bf00      	nop
 8008e56:	371c      	adds	r7, #28
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5e:	4770      	bx	lr
 8008e60:	40010000 	.word	0x40010000
 8008e64:	40010400 	.word	0x40010400

08008e68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6a1b      	ldr	r3, [r3, #32]
 8008e7c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	69db      	ldr	r3, [r3, #28]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008eac:	693b      	ldr	r3, [r7, #16]
 8008eae:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008eb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	031b      	lsls	r3, r3, #12
 8008eba:	693a      	ldr	r2, [r7, #16]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a12      	ldr	r2, [pc, #72]	@ (8008f0c <TIM_OC4_SetConfig+0xa4>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_OC4_SetConfig+0x68>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a11      	ldr	r2, [pc, #68]	@ (8008f10 <TIM_OC4_SetConfig+0xa8>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d109      	bne.n	8008ee4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008ed6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	695b      	ldr	r3, [r3, #20]
 8008edc:	019b      	lsls	r3, r3, #6
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	685a      	ldr	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	621a      	str	r2, [r3, #32]
}
 8008efe:	bf00      	nop
 8008f00:	371c      	adds	r7, #28
 8008f02:	46bd      	mov	sp, r7
 8008f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f08:	4770      	bx	lr
 8008f0a:	bf00      	nop
 8008f0c:	40010000 	.word	0x40010000
 8008f10:	40010400 	.word	0x40010400

08008f14 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b087      	sub	sp, #28
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	60f8      	str	r0, [r7, #12]
 8008f1c:	60b9      	str	r1, [r7, #8]
 8008f1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	6a1b      	ldr	r3, [r3, #32]
 8008f24:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	6a1b      	ldr	r3, [r3, #32]
 8008f2a:	f023 0201 	bic.w	r2, r3, #1
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008f3e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	011b      	lsls	r3, r3, #4
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	4313      	orrs	r3, r2
 8008f48:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008f4a:	697b      	ldr	r3, [r7, #20]
 8008f4c:	f023 030a 	bic.w	r3, r3, #10
 8008f50:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008f52:	697a      	ldr	r2, [r7, #20]
 8008f54:	68bb      	ldr	r3, [r7, #8]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	697a      	ldr	r2, [r7, #20]
 8008f64:	621a      	str	r2, [r3, #32]
}
 8008f66:	bf00      	nop
 8008f68:	371c      	adds	r7, #28
 8008f6a:	46bd      	mov	sp, r7
 8008f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f70:	4770      	bx	lr

08008f72 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f72:	b480      	push	{r7}
 8008f74:	b087      	sub	sp, #28
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	60f8      	str	r0, [r7, #12]
 8008f7a:	60b9      	str	r1, [r7, #8]
 8008f7c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	6a1b      	ldr	r3, [r3, #32]
 8008f82:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	6a1b      	ldr	r3, [r3, #32]
 8008f88:	f023 0210 	bic.w	r2, r3, #16
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	699b      	ldr	r3, [r3, #24]
 8008f94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f96:	693b      	ldr	r3, [r7, #16]
 8008f98:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008f9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	031b      	lsls	r3, r3, #12
 8008fa2:	693a      	ldr	r2, [r7, #16]
 8008fa4:	4313      	orrs	r3, r2
 8008fa6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008fa8:	697b      	ldr	r3, [r7, #20]
 8008faa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008fae:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008fb0:	68bb      	ldr	r3, [r7, #8]
 8008fb2:	011b      	lsls	r3, r3, #4
 8008fb4:	697a      	ldr	r2, [r7, #20]
 8008fb6:	4313      	orrs	r3, r2
 8008fb8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	693a      	ldr	r2, [r7, #16]
 8008fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	621a      	str	r2, [r3, #32]
}
 8008fc6:	bf00      	nop
 8008fc8:	371c      	adds	r7, #28
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd0:	4770      	bx	lr

08008fd2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008fd2:	b480      	push	{r7}
 8008fd4:	b085      	sub	sp, #20
 8008fd6:	af00      	add	r7, sp, #0
 8008fd8:	6078      	str	r0, [r7, #4]
 8008fda:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008fe8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008fea:	683a      	ldr	r2, [r7, #0]
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	4313      	orrs	r3, r2
 8008ff0:	f043 0307 	orr.w	r3, r3, #7
 8008ff4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	68fa      	ldr	r2, [r7, #12]
 8008ffa:	609a      	str	r2, [r3, #8]
}
 8008ffc:	bf00      	nop
 8008ffe:	3714      	adds	r7, #20
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	60f8      	str	r0, [r7, #12]
 8009010:	60b9      	str	r1, [r7, #8]
 8009012:	607a      	str	r2, [r7, #4]
 8009014:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	689b      	ldr	r3, [r3, #8]
 800901a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009022:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	021a      	lsls	r2, r3, #8
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	431a      	orrs	r2, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	4313      	orrs	r3, r2
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	4313      	orrs	r3, r2
 8009034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	697a      	ldr	r2, [r7, #20]
 800903a:	609a      	str	r2, [r3, #8]
}
 800903c:	bf00      	nop
 800903e:	371c      	adds	r7, #28
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009058:	2b01      	cmp	r3, #1
 800905a:	d101      	bne.n	8009060 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800905c:	2302      	movs	r3, #2
 800905e:	e05a      	b.n	8009116 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	2202      	movs	r2, #2
 800906c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	689b      	ldr	r3, [r3, #8]
 800907e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009086:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009088:	683b      	ldr	r3, [r7, #0]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	68fa      	ldr	r2, [r7, #12]
 800908e:	4313      	orrs	r3, r2
 8009090:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a21      	ldr	r2, [pc, #132]	@ (8009124 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d022      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090ac:	d01d      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a1d      	ldr	r2, [pc, #116]	@ (8009128 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d018      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a1b      	ldr	r2, [pc, #108]	@ (800912c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d013      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a1a      	ldr	r2, [pc, #104]	@ (8009130 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d00e      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a18      	ldr	r2, [pc, #96]	@ (8009134 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d009      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	4a17      	ldr	r2, [pc, #92]	@ (8009138 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80090dc:	4293      	cmp	r3, r2
 80090de:	d004      	beq.n	80090ea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	4a15      	ldr	r2, [pc, #84]	@ (800913c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80090e6:	4293      	cmp	r3, r2
 80090e8:	d10c      	bne.n	8009104 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80090f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	685b      	ldr	r3, [r3, #4]
 80090f6:	68ba      	ldr	r2, [r7, #8]
 80090f8:	4313      	orrs	r3, r2
 80090fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2201      	movs	r2, #1
 8009108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2200      	movs	r2, #0
 8009110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3714      	adds	r7, #20
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	40010000 	.word	0x40010000
 8009128:	40000400 	.word	0x40000400
 800912c:	40000800 	.word	0x40000800
 8009130:	40000c00 	.word	0x40000c00
 8009134:	40010400 	.word	0x40010400
 8009138:	40014000 	.word	0x40014000
 800913c:	40001800 	.word	0x40001800

08009140 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800914a:	2300      	movs	r3, #0
 800914c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8009154:	2b01      	cmp	r3, #1
 8009156:	d101      	bne.n	800915c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8009158:	2302      	movs	r3, #2
 800915a:	e03d      	b.n	80091d8 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	2201      	movs	r2, #1
 8009160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800916a:	683b      	ldr	r3, [r7, #0]
 800916c:	68db      	ldr	r3, [r3, #12]
 800916e:	4313      	orrs	r3, r2
 8009170:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	689b      	ldr	r3, [r3, #8]
 800917c:	4313      	orrs	r3, r2
 800917e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	685b      	ldr	r3, [r3, #4]
 800918a:	4313      	orrs	r3, r2
 800918c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4313      	orrs	r3, r2
 800919a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	4313      	orrs	r3, r2
 80091a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80091b0:	683b      	ldr	r3, [r7, #0]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	69db      	ldr	r3, [r3, #28]
 80091c2:	4313      	orrs	r3, r2
 80091c4:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	68fa      	ldr	r2, [r7, #12]
 80091cc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80091d6:	2300      	movs	r3, #0
}
 80091d8:	4618      	mov	r0, r3
 80091da:	3714      	adds	r7, #20
 80091dc:	46bd      	mov	sp, r7
 80091de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e2:	4770      	bx	lr

080091e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b082      	sub	sp, #8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d101      	bne.n	80091f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091f2:	2301      	movs	r3, #1
 80091f4:	e042      	b.n	800927c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091fc:	b2db      	uxtb	r3, r3
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d106      	bne.n	8009210 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	2200      	movs	r2, #0
 8009206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800920a:	6878      	ldr	r0, [r7, #4]
 800920c:	f7fc f874 	bl	80052f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	2224      	movs	r2, #36	@ 0x24
 8009214:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	68da      	ldr	r2, [r3, #12]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009226:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009228:	6878      	ldr	r0, [r7, #4]
 800922a:	f000 ffc7 	bl	800a1bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	691a      	ldr	r2, [r3, #16]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800923c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	695a      	ldr	r2, [r3, #20]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800924c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	68da      	ldr	r2, [r3, #12]
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800925c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	2200      	movs	r2, #0
 8009262:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	2220      	movs	r2, #32
 8009270:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800927a:	2300      	movs	r3, #0
}
 800927c:	4618      	mov	r0, r3
 800927e:	3708      	adds	r7, #8
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b08a      	sub	sp, #40	@ 0x28
 8009288:	af02      	add	r7, sp, #8
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	603b      	str	r3, [r7, #0]
 8009290:	4613      	mov	r3, r2
 8009292:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009294:	2300      	movs	r3, #0
 8009296:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d175      	bne.n	8009390 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <HAL_UART_Transmit+0x2c>
 80092aa:	88fb      	ldrh	r3, [r7, #6]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d101      	bne.n	80092b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092b0:	2301      	movs	r3, #1
 80092b2:	e06e      	b.n	8009392 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	2200      	movs	r2, #0
 80092b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	2221      	movs	r2, #33	@ 0x21
 80092be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092c2:	f7fc fb83 	bl	80059cc <HAL_GetTick>
 80092c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	88fa      	ldrh	r2, [r7, #6]
 80092cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	88fa      	ldrh	r2, [r7, #6]
 80092d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	689b      	ldr	r3, [r3, #8]
 80092d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092dc:	d108      	bne.n	80092f0 <HAL_UART_Transmit+0x6c>
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	691b      	ldr	r3, [r3, #16]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d104      	bne.n	80092f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092e6:	2300      	movs	r3, #0
 80092e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092ea:	68bb      	ldr	r3, [r7, #8]
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	e003      	b.n	80092f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80092f0:	68bb      	ldr	r3, [r7, #8]
 80092f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092f8:	e02e      	b.n	8009358 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092fa:	683b      	ldr	r3, [r7, #0]
 80092fc:	9300      	str	r3, [sp, #0]
 80092fe:	697b      	ldr	r3, [r7, #20]
 8009300:	2200      	movs	r2, #0
 8009302:	2180      	movs	r1, #128	@ 0x80
 8009304:	68f8      	ldr	r0, [r7, #12]
 8009306:	f000 fc97 	bl	8009c38 <UART_WaitOnFlagUntilTimeout>
 800930a:	4603      	mov	r3, r0
 800930c:	2b00      	cmp	r3, #0
 800930e:	d005      	beq.n	800931c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	2220      	movs	r2, #32
 8009314:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009318:	2303      	movs	r3, #3
 800931a:	e03a      	b.n	8009392 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	881b      	ldrh	r3, [r3, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	3302      	adds	r3, #2
 8009336:	61bb      	str	r3, [r7, #24]
 8009338:	e007      	b.n	800934a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800933a:	69fb      	ldr	r3, [r7, #28]
 800933c:	781a      	ldrb	r2, [r3, #0]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	3301      	adds	r3, #1
 8009348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800934e:	b29b      	uxth	r3, r3
 8009350:	3b01      	subs	r3, #1
 8009352:	b29a      	uxth	r2, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800935c:	b29b      	uxth	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d1cb      	bne.n	80092fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009362:	683b      	ldr	r3, [r7, #0]
 8009364:	9300      	str	r3, [sp, #0]
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	2200      	movs	r2, #0
 800936a:	2140      	movs	r1, #64	@ 0x40
 800936c:	68f8      	ldr	r0, [r7, #12]
 800936e:	f000 fc63 	bl	8009c38 <UART_WaitOnFlagUntilTimeout>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d005      	beq.n	8009384 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2220      	movs	r2, #32
 800937c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009380:	2303      	movs	r3, #3
 8009382:	e006      	b.n	8009392 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	2220      	movs	r2, #32
 8009388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	e000      	b.n	8009392 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009390:	2302      	movs	r3, #2
  }
}
 8009392:	4618      	mov	r0, r3
 8009394:	3720      	adds	r7, #32
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}

0800939a <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800939a:	b580      	push	{r7, lr}
 800939c:	b084      	sub	sp, #16
 800939e:	af00      	add	r7, sp, #0
 80093a0:	60f8      	str	r0, [r7, #12]
 80093a2:	60b9      	str	r1, [r7, #8]
 80093a4:	4613      	mov	r3, r2
 80093a6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093ae:	b2db      	uxtb	r3, r3
 80093b0:	2b20      	cmp	r3, #32
 80093b2:	d112      	bne.n	80093da <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80093b4:	68bb      	ldr	r3, [r7, #8]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d002      	beq.n	80093c0 <HAL_UART_Receive_DMA+0x26>
 80093ba:	88fb      	ldrh	r3, [r7, #6]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d101      	bne.n	80093c4 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e00b      	b.n	80093dc <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2200      	movs	r2, #0
 80093c8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80093ca:	88fb      	ldrh	r3, [r7, #6]
 80093cc:	461a      	mov	r2, r3
 80093ce:	68b9      	ldr	r1, [r7, #8]
 80093d0:	68f8      	ldr	r0, [r7, #12]
 80093d2:	f000 fc8b 	bl	8009cec <UART_Start_Receive_DMA>
 80093d6:	4603      	mov	r3, r0
 80093d8:	e000      	b.n	80093dc <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80093da:	2302      	movs	r3, #2
  }
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3710      	adds	r7, #16
 80093e0:	46bd      	mov	sp, r7
 80093e2:	bd80      	pop	{r7, pc}

080093e4 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b08c      	sub	sp, #48	@ 0x30
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	60f8      	str	r0, [r7, #12]
 80093ec:	60b9      	str	r1, [r7, #8]
 80093ee:	4613      	mov	r3, r2
 80093f0:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80093f8:	b2db      	uxtb	r3, r3
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	d146      	bne.n	800948c <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80093fe:	68bb      	ldr	r3, [r7, #8]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d002      	beq.n	800940a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009404:	88fb      	ldrh	r3, [r7, #6]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d101      	bne.n	800940e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e03f      	b.n	800948e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	2201      	movs	r2, #1
 8009412:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	2200      	movs	r2, #0
 8009418:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800941a:	88fb      	ldrh	r3, [r7, #6]
 800941c:	461a      	mov	r2, r3
 800941e:	68b9      	ldr	r1, [r7, #8]
 8009420:	68f8      	ldr	r0, [r7, #12]
 8009422:	f000 fc63 	bl	8009cec <UART_Start_Receive_DMA>
 8009426:	4603      	mov	r3, r0
 8009428:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009430:	2b01      	cmp	r3, #1
 8009432:	d125      	bne.n	8009480 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009434:	2300      	movs	r3, #0
 8009436:	613b      	str	r3, [r7, #16]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	613b      	str	r3, [r7, #16]
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	685b      	ldr	r3, [r3, #4]
 8009446:	613b      	str	r3, [r7, #16]
 8009448:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	330c      	adds	r3, #12
 8009450:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009452:	69bb      	ldr	r3, [r7, #24]
 8009454:	e853 3f00 	ldrex	r3, [r3]
 8009458:	617b      	str	r3, [r7, #20]
   return(result);
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	f043 0310 	orr.w	r3, r3, #16
 8009460:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	330c      	adds	r3, #12
 8009468:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800946a:	627a      	str	r2, [r7, #36]	@ 0x24
 800946c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6a39      	ldr	r1, [r7, #32]
 8009470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	61fb      	str	r3, [r7, #28]
   return(result);
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e5      	bne.n	800944a <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 800947e:	e002      	b.n	8009486 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8009480:	2301      	movs	r3, #1
 8009482:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 8009486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800948a:	e000      	b.n	800948e <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 800948c:	2302      	movs	r3, #2
  }
}
 800948e:	4618      	mov	r0, r3
 8009490:	3730      	adds	r7, #48	@ 0x30
 8009492:	46bd      	mov	sp, r7
 8009494:	bd80      	pop	{r7, pc}
	...

08009498 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b0ba      	sub	sp, #232	@ 0xe8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	695b      	ldr	r3, [r3, #20]
 80094ba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80094be:	2300      	movs	r3, #0
 80094c0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80094ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094ce:	f003 030f 	and.w	r3, r3, #15
 80094d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80094d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d10f      	bne.n	80094fe <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80094de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80094e2:	f003 0320 	and.w	r3, r3, #32
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <HAL_UART_IRQHandler+0x66>
 80094ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80094ee:	f003 0320 	and.w	r3, r3, #32
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d003      	beq.n	80094fe <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	f000 fda2 	bl	800a040 <UART_Receive_IT>
      return;
 80094fc:	e273      	b.n	80099e6 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80094fe:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009502:	2b00      	cmp	r3, #0
 8009504:	f000 80de 	beq.w	80096c4 <HAL_UART_IRQHandler+0x22c>
 8009508:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d106      	bne.n	8009522 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009514:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009518:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800951c:	2b00      	cmp	r3, #0
 800951e:	f000 80d1 	beq.w	80096c4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009526:	f003 0301 	and.w	r3, r3, #1
 800952a:	2b00      	cmp	r3, #0
 800952c:	d00b      	beq.n	8009546 <HAL_UART_IRQHandler+0xae>
 800952e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009532:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009536:	2b00      	cmp	r3, #0
 8009538:	d005      	beq.n	8009546 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800953e:	f043 0201 	orr.w	r2, r3, #1
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009546:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800954a:	f003 0304 	and.w	r3, r3, #4
 800954e:	2b00      	cmp	r3, #0
 8009550:	d00b      	beq.n	800956a <HAL_UART_IRQHandler+0xd2>
 8009552:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009556:	f003 0301 	and.w	r3, r3, #1
 800955a:	2b00      	cmp	r3, #0
 800955c:	d005      	beq.n	800956a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009562:	f043 0202 	orr.w	r2, r3, #2
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800956a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800956e:	f003 0302 	and.w	r3, r3, #2
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00b      	beq.n	800958e <HAL_UART_IRQHandler+0xf6>
 8009576:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800957a:	f003 0301 	and.w	r3, r3, #1
 800957e:	2b00      	cmp	r3, #0
 8009580:	d005      	beq.n	800958e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009586:	f043 0204 	orr.w	r2, r3, #4
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800958e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009592:	f003 0308 	and.w	r3, r3, #8
 8009596:	2b00      	cmp	r3, #0
 8009598:	d011      	beq.n	80095be <HAL_UART_IRQHandler+0x126>
 800959a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800959e:	f003 0320 	and.w	r3, r3, #32
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d105      	bne.n	80095b2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80095a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80095aa:	f003 0301 	and.w	r3, r3, #1
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d005      	beq.n	80095be <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095b6:	f043 0208 	orr.w	r2, r3, #8
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	f000 820a 	beq.w	80099dc <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80095c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80095cc:	f003 0320 	and.w	r3, r3, #32
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d008      	beq.n	80095e6 <HAL_UART_IRQHandler+0x14e>
 80095d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80095d8:	f003 0320 	and.w	r3, r3, #32
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80095e0:	6878      	ldr	r0, [r7, #4]
 80095e2:	f000 fd2d 	bl	800a040 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	695b      	ldr	r3, [r3, #20]
 80095ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095f0:	2b40      	cmp	r3, #64	@ 0x40
 80095f2:	bf0c      	ite	eq
 80095f4:	2301      	moveq	r3, #1
 80095f6:	2300      	movne	r3, #0
 80095f8:	b2db      	uxtb	r3, r3
 80095fa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009602:	f003 0308 	and.w	r3, r3, #8
 8009606:	2b00      	cmp	r3, #0
 8009608:	d103      	bne.n	8009612 <HAL_UART_IRQHandler+0x17a>
 800960a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800960e:	2b00      	cmp	r3, #0
 8009610:	d04f      	beq.n	80096b2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f000 fc38 	bl	8009e88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	695b      	ldr	r3, [r3, #20]
 800961e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009622:	2b40      	cmp	r3, #64	@ 0x40
 8009624:	d141      	bne.n	80096aa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	3314      	adds	r3, #20
 800962c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009630:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009634:	e853 3f00 	ldrex	r3, [r3]
 8009638:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800963c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009640:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009644:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	3314      	adds	r3, #20
 800964e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8009652:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8009656:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800965e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800966a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1d9      	bne.n	8009626 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009676:	2b00      	cmp	r3, #0
 8009678:	d013      	beq.n	80096a2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800967e:	4a8a      	ldr	r2, [pc, #552]	@ (80098a8 <HAL_UART_IRQHandler+0x410>)
 8009680:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009686:	4618      	mov	r0, r3
 8009688:	f7fd fa9a 	bl	8006bc0 <HAL_DMA_Abort_IT>
 800968c:	4603      	mov	r3, r0
 800968e:	2b00      	cmp	r3, #0
 8009690:	d016      	beq.n	80096c0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009698:	687a      	ldr	r2, [r7, #4]
 800969a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800969c:	4610      	mov	r0, r2
 800969e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a0:	e00e      	b.n	80096c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f9c0 	bl	8009a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096a8:	e00a      	b.n	80096c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80096aa:	6878      	ldr	r0, [r7, #4]
 80096ac:	f000 f9bc 	bl	8009a28 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096b0:	e006      	b.n	80096c0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f000 f9b8 	bl	8009a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80096be:	e18d      	b.n	80099dc <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80096c0:	bf00      	nop
    return;
 80096c2:	e18b      	b.n	80099dc <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	f040 8167 	bne.w	800999c <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80096ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096d2:	f003 0310 	and.w	r3, r3, #16
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	f000 8160 	beq.w	800999c <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80096dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096e0:	f003 0310 	and.w	r3, r3, #16
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	f000 8159 	beq.w	800999c <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80096ea:	2300      	movs	r3, #0
 80096ec:	60bb      	str	r3, [r7, #8]
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	60bb      	str	r3, [r7, #8]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	685b      	ldr	r3, [r3, #4]
 80096fc:	60bb      	str	r3, [r7, #8]
 80096fe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	695b      	ldr	r3, [r3, #20]
 8009706:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800970a:	2b40      	cmp	r3, #64	@ 0x40
 800970c:	f040 80ce 	bne.w	80098ac <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800971c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8009720:	2b00      	cmp	r3, #0
 8009722:	f000 80a9 	beq.w	8009878 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800972a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800972e:	429a      	cmp	r2, r3
 8009730:	f080 80a2 	bcs.w	8009878 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800973a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009740:	69db      	ldr	r3, [r3, #28]
 8009742:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009746:	f000 8088 	beq.w	800985a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	330c      	adds	r3, #12
 8009750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009754:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8009758:	e853 3f00 	ldrex	r3, [r3]
 800975c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8009760:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009764:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009768:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	330c      	adds	r3, #12
 8009772:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8009776:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800977a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800977e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8009782:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8009786:	e841 2300 	strex	r3, r2, [r1]
 800978a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800978e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009792:	2b00      	cmp	r3, #0
 8009794:	d1d9      	bne.n	800974a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	3314      	adds	r3, #20
 800979c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800979e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80097a0:	e853 3f00 	ldrex	r3, [r3]
 80097a4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80097a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80097a8:	f023 0301 	bic.w	r3, r3, #1
 80097ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3314      	adds	r3, #20
 80097b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80097ba:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80097be:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097c0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80097c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80097c6:	e841 2300 	strex	r3, r2, [r1]
 80097ca:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80097cc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d1e1      	bne.n	8009796 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	3314      	adds	r3, #20
 80097d8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097da:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80097dc:	e853 3f00 	ldrex	r3, [r3]
 80097e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80097e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80097e4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80097e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	3314      	adds	r3, #20
 80097f2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80097f6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80097f8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097fa:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80097fc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80097fe:	e841 2300 	strex	r3, r2, [r1]
 8009802:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009804:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009806:	2b00      	cmp	r3, #0
 8009808:	d1e3      	bne.n	80097d2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2220      	movs	r2, #32
 800980e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	330c      	adds	r3, #12
 800981e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009820:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009822:	e853 3f00 	ldrex	r3, [r3]
 8009826:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009828:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800982a:	f023 0310 	bic.w	r3, r3, #16
 800982e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	330c      	adds	r3, #12
 8009838:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800983c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800983e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009840:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009842:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009844:	e841 2300 	strex	r3, r2, [r1]
 8009848:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800984a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800984c:	2b00      	cmp	r3, #0
 800984e:	d1e3      	bne.n	8009818 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009854:	4618      	mov	r0, r3
 8009856:	f7fd f943 	bl	8006ae0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	2202      	movs	r2, #2
 800985e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009868:	b29b      	uxth	r3, r3
 800986a:	1ad3      	subs	r3, r2, r3
 800986c:	b29b      	uxth	r3, r3
 800986e:	4619      	mov	r1, r3
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7f8 ff9b 	bl	80027ac <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8009876:	e0b3      	b.n	80099e0 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800987c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009880:	429a      	cmp	r2, r3
 8009882:	f040 80ad 	bne.w	80099e0 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800988a:	69db      	ldr	r3, [r3, #28]
 800988c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009890:	f040 80a6 	bne.w	80099e0 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2202      	movs	r2, #2
 8009898:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800989e:	4619      	mov	r1, r3
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f7f8 ff83 	bl	80027ac <HAL_UARTEx_RxEventCallback>
      return;
 80098a6:	e09b      	b.n	80099e0 <HAL_UART_IRQHandler+0x548>
 80098a8:	08009f4f 	.word	0x08009f4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098b4:	b29b      	uxth	r3, r3
 80098b6:	1ad3      	subs	r3, r2, r3
 80098b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80098c0:	b29b      	uxth	r3, r3
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	f000 808e 	beq.w	80099e4 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80098c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	f000 8089 	beq.w	80099e4 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	330c      	adds	r3, #12
 80098d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098dc:	e853 3f00 	ldrex	r3, [r3]
 80098e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80098e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80098e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	330c      	adds	r3, #12
 80098f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80098f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80098f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80098fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80098fe:	e841 2300 	strex	r3, r2, [r1]
 8009902:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009904:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d1e3      	bne.n	80098d2 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	3314      	adds	r3, #20
 8009910:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009914:	e853 3f00 	ldrex	r3, [r3]
 8009918:	623b      	str	r3, [r7, #32]
   return(result);
 800991a:	6a3b      	ldr	r3, [r7, #32]
 800991c:	f023 0301 	bic.w	r3, r3, #1
 8009920:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	3314      	adds	r3, #20
 800992a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800992e:	633a      	str	r2, [r7, #48]	@ 0x30
 8009930:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009932:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009934:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009936:	e841 2300 	strex	r3, r2, [r1]
 800993a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800993c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1e3      	bne.n	800990a <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2220      	movs	r2, #32
 8009946:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	2200      	movs	r2, #0
 800994e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	330c      	adds	r3, #12
 8009956:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009958:	693b      	ldr	r3, [r7, #16]
 800995a:	e853 3f00 	ldrex	r3, [r3]
 800995e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009960:	68fb      	ldr	r3, [r7, #12]
 8009962:	f023 0310 	bic.w	r3, r3, #16
 8009966:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	330c      	adds	r3, #12
 8009970:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8009974:	61fa      	str	r2, [r7, #28]
 8009976:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009978:	69b9      	ldr	r1, [r7, #24]
 800997a:	69fa      	ldr	r2, [r7, #28]
 800997c:	e841 2300 	strex	r3, r2, [r1]
 8009980:	617b      	str	r3, [r7, #20]
   return(result);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	2b00      	cmp	r3, #0
 8009986:	d1e3      	bne.n	8009950 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2202      	movs	r2, #2
 800998c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800998e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009992:	4619      	mov	r1, r3
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	f7f8 ff09 	bl	80027ac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800999a:	e023      	b.n	80099e4 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800999c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d009      	beq.n	80099bc <HAL_UART_IRQHandler+0x524>
 80099a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d003      	beq.n	80099bc <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f000 fadb 	bl	8009f70 <UART_Transmit_IT>
    return;
 80099ba:	e014      	b.n	80099e6 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80099bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80099c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d00e      	beq.n	80099e6 <HAL_UART_IRQHandler+0x54e>
 80099c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80099cc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	d008      	beq.n	80099e6 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f000 fb1b 	bl	800a010 <UART_EndTransmit_IT>
    return;
 80099da:	e004      	b.n	80099e6 <HAL_UART_IRQHandler+0x54e>
    return;
 80099dc:	bf00      	nop
 80099de:	e002      	b.n	80099e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80099e0:	bf00      	nop
 80099e2:	e000      	b.n	80099e6 <HAL_UART_IRQHandler+0x54e>
      return;
 80099e4:	bf00      	nop
  }
}
 80099e6:	37e8      	adds	r7, #232	@ 0xe8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80099f4:	bf00      	nop
 80099f6:	370c      	adds	r7, #12
 80099f8:	46bd      	mov	sp, r7
 80099fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099fe:	4770      	bx	lr

08009a00 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8009a00:	b480      	push	{r7}
 8009a02:	b083      	sub	sp, #12
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009a08:	bf00      	nop
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009a1c:	bf00      	nop
 8009a1e:	370c      	adds	r7, #12
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009a28:	b480      	push	{r7}
 8009a2a:	b083      	sub	sp, #12
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009a30:	bf00      	nop
 8009a32:	370c      	adds	r7, #12
 8009a34:	46bd      	mov	sp, r7
 8009a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a3a:	4770      	bx	lr

08009a3c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b09c      	sub	sp, #112	@ 0x70
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a48:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	d172      	bne.n	8009b3e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8009a58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	330c      	adds	r3, #12
 8009a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009a68:	e853 3f00 	ldrex	r3, [r3]
 8009a6c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009a6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009a70:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009a74:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009a76:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	330c      	adds	r3, #12
 8009a7c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009a7e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8009a80:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a82:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009a84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009a86:	e841 2300 	strex	r3, r2, [r1]
 8009a8a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009a8c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d1e5      	bne.n	8009a5e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a92:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3314      	adds	r3, #20
 8009a98:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009a9c:	e853 3f00 	ldrex	r3, [r3]
 8009aa0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8009aa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009aa4:	f023 0301 	bic.w	r3, r3, #1
 8009aa8:	667b      	str	r3, [r7, #100]	@ 0x64
 8009aaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	3314      	adds	r3, #20
 8009ab0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009ab2:	647a      	str	r2, [r7, #68]	@ 0x44
 8009ab4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009ab8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009aba:	e841 2300 	strex	r3, r2, [r1]
 8009abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ac0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d1e5      	bne.n	8009a92 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009ac6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3314      	adds	r3, #20
 8009acc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ace:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ad0:	e853 3f00 	ldrex	r3, [r3]
 8009ad4:	623b      	str	r3, [r7, #32]
   return(result);
 8009ad6:	6a3b      	ldr	r3, [r7, #32]
 8009ad8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009adc:	663b      	str	r3, [r7, #96]	@ 0x60
 8009ade:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	3314      	adds	r3, #20
 8009ae4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009ae6:	633a      	str	r2, [r7, #48]	@ 0x30
 8009ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009aea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009aec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aee:	e841 2300 	strex	r3, r2, [r1]
 8009af2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d1e5      	bne.n	8009ac6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009afa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009afc:	2220      	movs	r2, #32
 8009afe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b06:	2b01      	cmp	r3, #1
 8009b08:	d119      	bne.n	8009b3e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	330c      	adds	r3, #12
 8009b10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b12:	693b      	ldr	r3, [r7, #16]
 8009b14:	e853 3f00 	ldrex	r3, [r3]
 8009b18:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	f023 0310 	bic.w	r3, r3, #16
 8009b20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009b22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	330c      	adds	r3, #12
 8009b28:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009b2a:	61fa      	str	r2, [r7, #28]
 8009b2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2e:	69b9      	ldr	r1, [r7, #24]
 8009b30:	69fa      	ldr	r2, [r7, #28]
 8009b32:	e841 2300 	strex	r3, r2, [r1]
 8009b36:	617b      	str	r3, [r7, #20]
   return(result);
 8009b38:	697b      	ldr	r3, [r7, #20]
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d1e5      	bne.n	8009b0a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b3e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b40:	2200      	movs	r2, #0
 8009b42:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b44:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b48:	2b01      	cmp	r3, #1
 8009b4a:	d106      	bne.n	8009b5a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009b4c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009b4e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b50:	4619      	mov	r1, r3
 8009b52:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b54:	f7f8 fe2a 	bl	80027ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b58:	e002      	b.n	8009b60 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8009b5a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8009b5c:	f7ff ff50 	bl	8009a00 <HAL_UART_RxCpltCallback>
}
 8009b60:	bf00      	nop
 8009b62:	3770      	adds	r7, #112	@ 0x70
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b74:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	2201      	movs	r2, #1
 8009b7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b80:	2b01      	cmp	r3, #1
 8009b82:	d108      	bne.n	8009b96 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009b88:	085b      	lsrs	r3, r3, #1
 8009b8a:	b29b      	uxth	r3, r3
 8009b8c:	4619      	mov	r1, r3
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f7f8 fe0c 	bl	80027ac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8009b94:	e002      	b.n	8009b9c <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8009b96:	68f8      	ldr	r0, [r7, #12]
 8009b98:	f7ff ff3c 	bl	8009a14 <HAL_UART_RxHalfCpltCallback>
}
 8009b9c:	bf00      	nop
 8009b9e:	3710      	adds	r7, #16
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}

08009ba4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8009ba4:	b580      	push	{r7, lr}
 8009ba6:	b084      	sub	sp, #16
 8009ba8:	af00      	add	r7, sp, #0
 8009baa:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8009bac:	2300      	movs	r3, #0
 8009bae:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	695b      	ldr	r3, [r3, #20]
 8009bbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009bc0:	2b80      	cmp	r3, #128	@ 0x80
 8009bc2:	bf0c      	ite	eq
 8009bc4:	2301      	moveq	r3, #1
 8009bc6:	2300      	movne	r3, #0
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b21      	cmp	r3, #33	@ 0x21
 8009bd6:	d108      	bne.n	8009bea <UART_DMAError+0x46>
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d005      	beq.n	8009bea <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	2200      	movs	r2, #0
 8009be2:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009be4:	68b8      	ldr	r0, [r7, #8]
 8009be6:	f000 f927 	bl	8009e38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009bf4:	2b40      	cmp	r3, #64	@ 0x40
 8009bf6:	bf0c      	ite	eq
 8009bf8:	2301      	moveq	r3, #1
 8009bfa:	2300      	movne	r3, #0
 8009bfc:	b2db      	uxtb	r3, r3
 8009bfe:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8009c00:	68bb      	ldr	r3, [r7, #8]
 8009c02:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009c06:	b2db      	uxtb	r3, r3
 8009c08:	2b22      	cmp	r3, #34	@ 0x22
 8009c0a:	d108      	bne.n	8009c1e <UART_DMAError+0x7a>
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d005      	beq.n	8009c1e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8009c12:	68bb      	ldr	r3, [r7, #8]
 8009c14:	2200      	movs	r2, #0
 8009c16:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009c18:	68b8      	ldr	r0, [r7, #8]
 8009c1a:	f000 f935 	bl	8009e88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8009c1e:	68bb      	ldr	r3, [r7, #8]
 8009c20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c22:	f043 0210 	orr.w	r2, r3, #16
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c2a:	68b8      	ldr	r0, [r7, #8]
 8009c2c:	f7ff fefc 	bl	8009a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c30:	bf00      	nop
 8009c32:	3710      	adds	r7, #16
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b086      	sub	sp, #24
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	603b      	str	r3, [r7, #0]
 8009c44:	4613      	mov	r3, r2
 8009c46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c48:	e03b      	b.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c4a:	6a3b      	ldr	r3, [r7, #32]
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009c50:	d037      	beq.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c52:	f7fb febb 	bl	80059cc <HAL_GetTick>
 8009c56:	4602      	mov	r2, r0
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	1ad3      	subs	r3, r2, r3
 8009c5c:	6a3a      	ldr	r2, [r7, #32]
 8009c5e:	429a      	cmp	r2, r3
 8009c60:	d302      	bcc.n	8009c68 <UART_WaitOnFlagUntilTimeout+0x30>
 8009c62:	6a3b      	ldr	r3, [r7, #32]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d101      	bne.n	8009c6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e03a      	b.n	8009ce2 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	68db      	ldr	r3, [r3, #12]
 8009c72:	f003 0304 	and.w	r3, r3, #4
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d023      	beq.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009c7a:	68bb      	ldr	r3, [r7, #8]
 8009c7c:	2b80      	cmp	r3, #128	@ 0x80
 8009c7e:	d020      	beq.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	2b40      	cmp	r3, #64	@ 0x40
 8009c84:	d01d      	beq.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 0308 	and.w	r3, r3, #8
 8009c90:	2b08      	cmp	r3, #8
 8009c92:	d116      	bne.n	8009cc2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8009c94:	2300      	movs	r3, #0
 8009c96:	617b      	str	r3, [r7, #20]
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	685b      	ldr	r3, [r3, #4]
 8009ca6:	617b      	str	r3, [r7, #20]
 8009ca8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8009caa:	68f8      	ldr	r0, [r7, #12]
 8009cac:	f000 f8ec 	bl	8009e88 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2208      	movs	r2, #8
 8009cb4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009cbe:	2301      	movs	r3, #1
 8009cc0:	e00f      	b.n	8009ce2 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	681a      	ldr	r2, [r3, #0]
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	4013      	ands	r3, r2
 8009ccc:	68ba      	ldr	r2, [r7, #8]
 8009cce:	429a      	cmp	r2, r3
 8009cd0:	bf0c      	ite	eq
 8009cd2:	2301      	moveq	r3, #1
 8009cd4:	2300      	movne	r3, #0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	461a      	mov	r2, r3
 8009cda:	79fb      	ldrb	r3, [r7, #7]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d0b4      	beq.n	8009c4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009ce0:	2300      	movs	r3, #0
}
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	3718      	adds	r7, #24
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	bd80      	pop	{r7, pc}
	...

08009cec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b098      	sub	sp, #96	@ 0x60
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	88fa      	ldrh	r2, [r7, #6]
 8009d04:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2200      	movs	r2, #0
 8009d0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2222      	movs	r2, #34	@ 0x22
 8009d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d18:	4a44      	ldr	r2, [pc, #272]	@ (8009e2c <UART_Start_Receive_DMA+0x140>)
 8009d1a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d20:	4a43      	ldr	r2, [pc, #268]	@ (8009e30 <UART_Start_Receive_DMA+0x144>)
 8009d22:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d28:	4a42      	ldr	r2, [pc, #264]	@ (8009e34 <UART_Start_Receive_DMA+0x148>)
 8009d2a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d30:	2200      	movs	r2, #0
 8009d32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009d34:	f107 0308 	add.w	r3, r7, #8
 8009d38:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009d48:	681a      	ldr	r2, [r3, #0]
 8009d4a:	88fb      	ldrh	r3, [r7, #6]
 8009d4c:	f7fc fe70 	bl	8006a30 <HAL_DMA_Start_IT>
 8009d50:	4603      	mov	r3, r0
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d008      	beq.n	8009d68 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	2210      	movs	r2, #16
 8009d5a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	2220      	movs	r2, #32
 8009d60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009d64:	2301      	movs	r3, #1
 8009d66:	e05d      	b.n	8009e24 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009d68:	2300      	movs	r3, #0
 8009d6a:	613b      	str	r3, [r7, #16]
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	613b      	str	r3, [r7, #16]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	613b      	str	r3, [r7, #16]
 8009d7c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	691b      	ldr	r3, [r3, #16]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d019      	beq.n	8009dba <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	330c      	adds	r3, #12
 8009d8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009d90:	e853 3f00 	ldrex	r3, [r3]
 8009d94:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009d96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009d98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009d9c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	330c      	adds	r3, #12
 8009da4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009da6:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009daa:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009dac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009dae:	e841 2300 	strex	r3, r2, [r1]
 8009db2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009db4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1e5      	bne.n	8009d86 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	3314      	adds	r3, #20
 8009dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009dc4:	e853 3f00 	ldrex	r3, [r3]
 8009dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dcc:	f043 0301 	orr.w	r3, r3, #1
 8009dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3314      	adds	r3, #20
 8009dd8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009dda:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009ddc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009dde:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009de0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009de2:	e841 2300 	strex	r3, r2, [r1]
 8009de6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d1e5      	bne.n	8009dba <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	3314      	adds	r3, #20
 8009df4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	e853 3f00 	ldrex	r3, [r3]
 8009dfc:	617b      	str	r3, [r7, #20]
   return(result);
 8009dfe:	697b      	ldr	r3, [r7, #20]
 8009e00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e04:	653b      	str	r3, [r7, #80]	@ 0x50
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	3314      	adds	r3, #20
 8009e0c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009e0e:	627a      	str	r2, [r7, #36]	@ 0x24
 8009e10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e12:	6a39      	ldr	r1, [r7, #32]
 8009e14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e16:	e841 2300 	strex	r3, r2, [r1]
 8009e1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8009e1c:	69fb      	ldr	r3, [r7, #28]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	d1e5      	bne.n	8009dee <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3760      	adds	r7, #96	@ 0x60
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}
 8009e2c:	08009a3d 	.word	0x08009a3d
 8009e30:	08009b69 	.word	0x08009b69
 8009e34:	08009ba5 	.word	0x08009ba5

08009e38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009e38:	b480      	push	{r7}
 8009e3a:	b089      	sub	sp, #36	@ 0x24
 8009e3c:	af00      	add	r7, sp, #0
 8009e3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	330c      	adds	r3, #12
 8009e46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	e853 3f00 	ldrex	r3, [r3]
 8009e4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009e56:	61fb      	str	r3, [r7, #28]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	330c      	adds	r3, #12
 8009e5e:	69fa      	ldr	r2, [r7, #28]
 8009e60:	61ba      	str	r2, [r7, #24]
 8009e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009e64:	6979      	ldr	r1, [r7, #20]
 8009e66:	69ba      	ldr	r2, [r7, #24]
 8009e68:	e841 2300 	strex	r3, r2, [r1]
 8009e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8009e6e:	693b      	ldr	r3, [r7, #16]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1e5      	bne.n	8009e40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2220      	movs	r2, #32
 8009e78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009e7c:	bf00      	nop
 8009e7e:	3724      	adds	r7, #36	@ 0x24
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b095      	sub	sp, #84	@ 0x54
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	330c      	adds	r3, #12
 8009e96:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e98:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e9a:	e853 3f00 	ldrex	r3, [r3]
 8009e9e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ea2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009ea6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	330c      	adds	r3, #12
 8009eae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009eb0:	643a      	str	r2, [r7, #64]	@ 0x40
 8009eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eb4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009eb6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009eb8:	e841 2300 	strex	r3, r2, [r1]
 8009ebc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d1e5      	bne.n	8009e90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	3314      	adds	r3, #20
 8009eca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ecc:	6a3b      	ldr	r3, [r7, #32]
 8009ece:	e853 3f00 	ldrex	r3, [r3]
 8009ed2:	61fb      	str	r3, [r7, #28]
   return(result);
 8009ed4:	69fb      	ldr	r3, [r7, #28]
 8009ed6:	f023 0301 	bic.w	r3, r3, #1
 8009eda:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	3314      	adds	r3, #20
 8009ee2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009ee4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009ee6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ee8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eec:	e841 2300 	strex	r3, r2, [r1]
 8009ef0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d1e5      	bne.n	8009ec4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009efc:	2b01      	cmp	r3, #1
 8009efe:	d119      	bne.n	8009f34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	330c      	adds	r3, #12
 8009f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	e853 3f00 	ldrex	r3, [r3]
 8009f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009f10:	68bb      	ldr	r3, [r7, #8]
 8009f12:	f023 0310 	bic.w	r3, r3, #16
 8009f16:	647b      	str	r3, [r7, #68]	@ 0x44
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	330c      	adds	r3, #12
 8009f1e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009f20:	61ba      	str	r2, [r7, #24]
 8009f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f24:	6979      	ldr	r1, [r7, #20]
 8009f26:	69ba      	ldr	r2, [r7, #24]
 8009f28:	e841 2300 	strex	r3, r2, [r1]
 8009f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d1e5      	bne.n	8009f00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2220      	movs	r2, #32
 8009f38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009f42:	bf00      	nop
 8009f44:	3754      	adds	r7, #84	@ 0x54
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr

08009f4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009f4e:	b580      	push	{r7, lr}
 8009f50:	b084      	sub	sp, #16
 8009f52:	af00      	add	r7, sp, #0
 8009f54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	2200      	movs	r2, #0
 8009f60:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009f62:	68f8      	ldr	r0, [r7, #12]
 8009f64:	f7ff fd60 	bl	8009a28 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009f68:	bf00      	nop
 8009f6a:	3710      	adds	r7, #16
 8009f6c:	46bd      	mov	sp, r7
 8009f6e:	bd80      	pop	{r7, pc}

08009f70 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009f70:	b480      	push	{r7}
 8009f72:	b085      	sub	sp, #20
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009f7e:	b2db      	uxtb	r3, r3
 8009f80:	2b21      	cmp	r3, #33	@ 0x21
 8009f82:	d13e      	bne.n	800a002 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	689b      	ldr	r3, [r3, #8]
 8009f88:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009f8c:	d114      	bne.n	8009fb8 <UART_Transmit_IT+0x48>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	691b      	ldr	r3, [r3, #16]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d110      	bne.n	8009fb8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	881b      	ldrh	r3, [r3, #0]
 8009fa0:	461a      	mov	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009faa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	6a1b      	ldr	r3, [r3, #32]
 8009fb0:	1c9a      	adds	r2, r3, #2
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	621a      	str	r2, [r3, #32]
 8009fb6:	e008      	b.n	8009fca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6a1b      	ldr	r3, [r3, #32]
 8009fbc:	1c59      	adds	r1, r3, #1
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	6211      	str	r1, [r2, #32]
 8009fc2:	781a      	ldrb	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009fce:	b29b      	uxth	r3, r3
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b29b      	uxth	r3, r3
 8009fd4:	687a      	ldr	r2, [r7, #4]
 8009fd6:	4619      	mov	r1, r3
 8009fd8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10f      	bne.n	8009ffe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	68da      	ldr	r2, [r3, #12]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009fec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	68da      	ldr	r2, [r3, #12]
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ffc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009ffe:	2300      	movs	r3, #0
 800a000:	e000      	b.n	800a004 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a002:	2302      	movs	r3, #2
  }
}
 800a004:	4618      	mov	r0, r3
 800a006:	3714      	adds	r7, #20
 800a008:	46bd      	mov	sp, r7
 800a00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a00e:	4770      	bx	lr

0800a010 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b082      	sub	sp, #8
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68da      	ldr	r2, [r3, #12]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a026:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2220      	movs	r2, #32
 800a02c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f7ff fcdb 	bl	80099ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a036:	2300      	movs	r3, #0
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3708      	adds	r7, #8
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b08c      	sub	sp, #48	@ 0x30
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800a048:	2300      	movs	r3, #0
 800a04a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 800a04c:	2300      	movs	r3, #0
 800a04e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800a056:	b2db      	uxtb	r3, r3
 800a058:	2b22      	cmp	r3, #34	@ 0x22
 800a05a:	f040 80aa 	bne.w	800a1b2 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	689b      	ldr	r3, [r3, #8]
 800a062:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a066:	d115      	bne.n	800a094 <UART_Receive_IT+0x54>
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	691b      	ldr	r3, [r3, #16]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d111      	bne.n	800a094 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a074:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	681b      	ldr	r3, [r3, #0]
 800a07a:	685b      	ldr	r3, [r3, #4]
 800a07c:	b29b      	uxth	r3, r3
 800a07e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a082:	b29a      	uxth	r2, r3
 800a084:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a086:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a08c:	1c9a      	adds	r2, r3, #2
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	629a      	str	r2, [r3, #40]	@ 0x28
 800a092:	e024      	b.n	800a0de <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a098:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a0a2:	d007      	beq.n	800a0b4 <UART_Receive_IT+0x74>
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	689b      	ldr	r3, [r3, #8]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <UART_Receive_IT+0x82>
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	691b      	ldr	r3, [r3, #16]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d106      	bne.n	800a0c2 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	b2da      	uxtb	r2, r3
 800a0bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	e008      	b.n	800a0d4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	685b      	ldr	r3, [r3, #4]
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a0ce:	b2da      	uxtb	r2, r3
 800a0d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0d2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0d8:	1c5a      	adds	r2, r3, #1
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800a0e2:	b29b      	uxth	r3, r3
 800a0e4:	3b01      	subs	r3, #1
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	687a      	ldr	r2, [r7, #4]
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d15d      	bne.n	800a1ae <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68da      	ldr	r2, [r3, #12]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	f022 0220 	bic.w	r2, r2, #32
 800a100:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	68da      	ldr	r2, [r3, #12]
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a110:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695a      	ldr	r2, [r3, #20]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f022 0201 	bic.w	r2, r2, #1
 800a120:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a134:	2b01      	cmp	r3, #1
 800a136:	d135      	bne.n	800a1a4 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2200      	movs	r2, #0
 800a13c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	330c      	adds	r3, #12
 800a144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	e853 3f00 	ldrex	r3, [r3]
 800a14c:	613b      	str	r3, [r7, #16]
   return(result);
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	f023 0310 	bic.w	r3, r3, #16
 800a154:	627b      	str	r3, [r7, #36]	@ 0x24
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	330c      	adds	r3, #12
 800a15c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a15e:	623a      	str	r2, [r7, #32]
 800a160:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a162:	69f9      	ldr	r1, [r7, #28]
 800a164:	6a3a      	ldr	r2, [r7, #32]
 800a166:	e841 2300 	strex	r3, r2, [r1]
 800a16a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a16c:	69bb      	ldr	r3, [r7, #24]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d1e5      	bne.n	800a13e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	681b      	ldr	r3, [r3, #0]
 800a178:	f003 0310 	and.w	r3, r3, #16
 800a17c:	2b10      	cmp	r3, #16
 800a17e:	d10a      	bne.n	800a196 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a180:	2300      	movs	r3, #0
 800a182:	60fb      	str	r3, [r7, #12]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	60fb      	str	r3, [r7, #12]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685b      	ldr	r3, [r3, #4]
 800a192:	60fb      	str	r3, [r7, #12]
 800a194:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800a19a:	4619      	mov	r1, r3
 800a19c:	6878      	ldr	r0, [r7, #4]
 800a19e:	f7f8 fb05 	bl	80027ac <HAL_UARTEx_RxEventCallback>
 800a1a2:	e002      	b.n	800a1aa <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a1a4:	6878      	ldr	r0, [r7, #4]
 800a1a6:	f7ff fc2b 	bl	8009a00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	e002      	b.n	800a1b4 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	e000      	b.n	800a1b4 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800a1b2:	2302      	movs	r3, #2
  }
}
 800a1b4:	4618      	mov	r0, r3
 800a1b6:	3730      	adds	r7, #48	@ 0x30
 800a1b8:	46bd      	mov	sp, r7
 800a1ba:	bd80      	pop	{r7, pc}

0800a1bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a1bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a1c0:	b0c0      	sub	sp, #256	@ 0x100
 800a1c2:	af00      	add	r7, sp, #0
 800a1c4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a1c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	691b      	ldr	r3, [r3, #16]
 800a1d0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800a1d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1d8:	68d9      	ldr	r1, [r3, #12]
 800a1da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1de:	681a      	ldr	r2, [r3, #0]
 800a1e0:	ea40 0301 	orr.w	r3, r0, r1
 800a1e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a1e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ea:	689a      	ldr	r2, [r3, #8]
 800a1ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1f8:	695b      	ldr	r3, [r3, #20]
 800a1fa:	431a      	orrs	r2, r3
 800a1fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a200:	69db      	ldr	r3, [r3, #28]
 800a202:	4313      	orrs	r3, r2
 800a204:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a208:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	68db      	ldr	r3, [r3, #12]
 800a210:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800a214:	f021 010c 	bic.w	r1, r1, #12
 800a218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a21c:	681a      	ldr	r2, [r3, #0]
 800a21e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800a222:	430b      	orrs	r3, r1
 800a224:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	695b      	ldr	r3, [r3, #20]
 800a22e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800a232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a236:	6999      	ldr	r1, [r3, #24]
 800a238:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a23c:	681a      	ldr	r2, [r3, #0]
 800a23e:	ea40 0301 	orr.w	r3, r0, r1
 800a242:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	4b8f      	ldr	r3, [pc, #572]	@ (800a488 <UART_SetConfig+0x2cc>)
 800a24c:	429a      	cmp	r2, r3
 800a24e:	d005      	beq.n	800a25c <UART_SetConfig+0xa0>
 800a250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a254:	681a      	ldr	r2, [r3, #0]
 800a256:	4b8d      	ldr	r3, [pc, #564]	@ (800a48c <UART_SetConfig+0x2d0>)
 800a258:	429a      	cmp	r2, r3
 800a25a:	d104      	bne.n	800a266 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a25c:	f7fd fe9e 	bl	8007f9c <HAL_RCC_GetPCLK2Freq>
 800a260:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800a264:	e003      	b.n	800a26e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a266:	f7fd fe85 	bl	8007f74 <HAL_RCC_GetPCLK1Freq>
 800a26a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a26e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a272:	69db      	ldr	r3, [r3, #28]
 800a274:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800a278:	f040 810c 	bne.w	800a494 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a27c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a280:	2200      	movs	r2, #0
 800a282:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800a286:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800a28a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800a28e:	4622      	mov	r2, r4
 800a290:	462b      	mov	r3, r5
 800a292:	1891      	adds	r1, r2, r2
 800a294:	65b9      	str	r1, [r7, #88]	@ 0x58
 800a296:	415b      	adcs	r3, r3
 800a298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800a29a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800a29e:	4621      	mov	r1, r4
 800a2a0:	eb12 0801 	adds.w	r8, r2, r1
 800a2a4:	4629      	mov	r1, r5
 800a2a6:	eb43 0901 	adc.w	r9, r3, r1
 800a2aa:	f04f 0200 	mov.w	r2, #0
 800a2ae:	f04f 0300 	mov.w	r3, #0
 800a2b2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a2b6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a2ba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a2be:	4690      	mov	r8, r2
 800a2c0:	4699      	mov	r9, r3
 800a2c2:	4623      	mov	r3, r4
 800a2c4:	eb18 0303 	adds.w	r3, r8, r3
 800a2c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a2cc:	462b      	mov	r3, r5
 800a2ce:	eb49 0303 	adc.w	r3, r9, r3
 800a2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a2d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	2200      	movs	r2, #0
 800a2de:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a2e2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a2e6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a2ea:	460b      	mov	r3, r1
 800a2ec:	18db      	adds	r3, r3, r3
 800a2ee:	653b      	str	r3, [r7, #80]	@ 0x50
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	eb42 0303 	adc.w	r3, r2, r3
 800a2f6:	657b      	str	r3, [r7, #84]	@ 0x54
 800a2f8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a2fc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a300:	f7f6 fc52 	bl	8000ba8 <__aeabi_uldivmod>
 800a304:	4602      	mov	r2, r0
 800a306:	460b      	mov	r3, r1
 800a308:	4b61      	ldr	r3, [pc, #388]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a30a:	fba3 2302 	umull	r2, r3, r3, r2
 800a30e:	095b      	lsrs	r3, r3, #5
 800a310:	011c      	lsls	r4, r3, #4
 800a312:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a316:	2200      	movs	r2, #0
 800a318:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a31c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a320:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a324:	4642      	mov	r2, r8
 800a326:	464b      	mov	r3, r9
 800a328:	1891      	adds	r1, r2, r2
 800a32a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a32c:	415b      	adcs	r3, r3
 800a32e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a330:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a334:	4641      	mov	r1, r8
 800a336:	eb12 0a01 	adds.w	sl, r2, r1
 800a33a:	4649      	mov	r1, r9
 800a33c:	eb43 0b01 	adc.w	fp, r3, r1
 800a340:	f04f 0200 	mov.w	r2, #0
 800a344:	f04f 0300 	mov.w	r3, #0
 800a348:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a34c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a350:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a354:	4692      	mov	sl, r2
 800a356:	469b      	mov	fp, r3
 800a358:	4643      	mov	r3, r8
 800a35a:	eb1a 0303 	adds.w	r3, sl, r3
 800a35e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a362:	464b      	mov	r3, r9
 800a364:	eb4b 0303 	adc.w	r3, fp, r3
 800a368:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a36c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	2200      	movs	r2, #0
 800a374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a378:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a37c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a380:	460b      	mov	r3, r1
 800a382:	18db      	adds	r3, r3, r3
 800a384:	643b      	str	r3, [r7, #64]	@ 0x40
 800a386:	4613      	mov	r3, r2
 800a388:	eb42 0303 	adc.w	r3, r2, r3
 800a38c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a38e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a392:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a396:	f7f6 fc07 	bl	8000ba8 <__aeabi_uldivmod>
 800a39a:	4602      	mov	r2, r0
 800a39c:	460b      	mov	r3, r1
 800a39e:	4611      	mov	r1, r2
 800a3a0:	4b3b      	ldr	r3, [pc, #236]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a3a2:	fba3 2301 	umull	r2, r3, r3, r1
 800a3a6:	095b      	lsrs	r3, r3, #5
 800a3a8:	2264      	movs	r2, #100	@ 0x64
 800a3aa:	fb02 f303 	mul.w	r3, r2, r3
 800a3ae:	1acb      	subs	r3, r1, r3
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a3b6:	4b36      	ldr	r3, [pc, #216]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a3b8:	fba3 2302 	umull	r2, r3, r3, r2
 800a3bc:	095b      	lsrs	r3, r3, #5
 800a3be:	005b      	lsls	r3, r3, #1
 800a3c0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a3c4:	441c      	add	r4, r3
 800a3c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a3ca:	2200      	movs	r2, #0
 800a3cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a3d0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a3d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a3d8:	4642      	mov	r2, r8
 800a3da:	464b      	mov	r3, r9
 800a3dc:	1891      	adds	r1, r2, r2
 800a3de:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a3e0:	415b      	adcs	r3, r3
 800a3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a3e8:	4641      	mov	r1, r8
 800a3ea:	1851      	adds	r1, r2, r1
 800a3ec:	6339      	str	r1, [r7, #48]	@ 0x30
 800a3ee:	4649      	mov	r1, r9
 800a3f0:	414b      	adcs	r3, r1
 800a3f2:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3f4:	f04f 0200 	mov.w	r2, #0
 800a3f8:	f04f 0300 	mov.w	r3, #0
 800a3fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a400:	4659      	mov	r1, fp
 800a402:	00cb      	lsls	r3, r1, #3
 800a404:	4651      	mov	r1, sl
 800a406:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a40a:	4651      	mov	r1, sl
 800a40c:	00ca      	lsls	r2, r1, #3
 800a40e:	4610      	mov	r0, r2
 800a410:	4619      	mov	r1, r3
 800a412:	4603      	mov	r3, r0
 800a414:	4642      	mov	r2, r8
 800a416:	189b      	adds	r3, r3, r2
 800a418:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a41c:	464b      	mov	r3, r9
 800a41e:	460a      	mov	r2, r1
 800a420:	eb42 0303 	adc.w	r3, r2, r3
 800a424:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a428:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a434:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a438:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a43c:	460b      	mov	r3, r1
 800a43e:	18db      	adds	r3, r3, r3
 800a440:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a442:	4613      	mov	r3, r2
 800a444:	eb42 0303 	adc.w	r3, r2, r3
 800a448:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a44a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a44e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a452:	f7f6 fba9 	bl	8000ba8 <__aeabi_uldivmod>
 800a456:	4602      	mov	r2, r0
 800a458:	460b      	mov	r3, r1
 800a45a:	4b0d      	ldr	r3, [pc, #52]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a45c:	fba3 1302 	umull	r1, r3, r3, r2
 800a460:	095b      	lsrs	r3, r3, #5
 800a462:	2164      	movs	r1, #100	@ 0x64
 800a464:	fb01 f303 	mul.w	r3, r1, r3
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	00db      	lsls	r3, r3, #3
 800a46c:	3332      	adds	r3, #50	@ 0x32
 800a46e:	4a08      	ldr	r2, [pc, #32]	@ (800a490 <UART_SetConfig+0x2d4>)
 800a470:	fba2 2303 	umull	r2, r3, r2, r3
 800a474:	095b      	lsrs	r3, r3, #5
 800a476:	f003 0207 	and.w	r2, r3, #7
 800a47a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	4422      	add	r2, r4
 800a482:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a484:	e106      	b.n	800a694 <UART_SetConfig+0x4d8>
 800a486:	bf00      	nop
 800a488:	40011000 	.word	0x40011000
 800a48c:	40011400 	.word	0x40011400
 800a490:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a494:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a498:	2200      	movs	r2, #0
 800a49a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a49e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a4a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a4a6:	4642      	mov	r2, r8
 800a4a8:	464b      	mov	r3, r9
 800a4aa:	1891      	adds	r1, r2, r2
 800a4ac:	6239      	str	r1, [r7, #32]
 800a4ae:	415b      	adcs	r3, r3
 800a4b0:	627b      	str	r3, [r7, #36]	@ 0x24
 800a4b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a4b6:	4641      	mov	r1, r8
 800a4b8:	1854      	adds	r4, r2, r1
 800a4ba:	4649      	mov	r1, r9
 800a4bc:	eb43 0501 	adc.w	r5, r3, r1
 800a4c0:	f04f 0200 	mov.w	r2, #0
 800a4c4:	f04f 0300 	mov.w	r3, #0
 800a4c8:	00eb      	lsls	r3, r5, #3
 800a4ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a4ce:	00e2      	lsls	r2, r4, #3
 800a4d0:	4614      	mov	r4, r2
 800a4d2:	461d      	mov	r5, r3
 800a4d4:	4643      	mov	r3, r8
 800a4d6:	18e3      	adds	r3, r4, r3
 800a4d8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a4dc:	464b      	mov	r3, r9
 800a4de:	eb45 0303 	adc.w	r3, r5, r3
 800a4e2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a4f2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a4f6:	f04f 0200 	mov.w	r2, #0
 800a4fa:	f04f 0300 	mov.w	r3, #0
 800a4fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a502:	4629      	mov	r1, r5
 800a504:	008b      	lsls	r3, r1, #2
 800a506:	4621      	mov	r1, r4
 800a508:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a50c:	4621      	mov	r1, r4
 800a50e:	008a      	lsls	r2, r1, #2
 800a510:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a514:	f7f6 fb48 	bl	8000ba8 <__aeabi_uldivmod>
 800a518:	4602      	mov	r2, r0
 800a51a:	460b      	mov	r3, r1
 800a51c:	4b60      	ldr	r3, [pc, #384]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a51e:	fba3 2302 	umull	r2, r3, r3, r2
 800a522:	095b      	lsrs	r3, r3, #5
 800a524:	011c      	lsls	r4, r3, #4
 800a526:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a52a:	2200      	movs	r2, #0
 800a52c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a530:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a534:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a538:	4642      	mov	r2, r8
 800a53a:	464b      	mov	r3, r9
 800a53c:	1891      	adds	r1, r2, r2
 800a53e:	61b9      	str	r1, [r7, #24]
 800a540:	415b      	adcs	r3, r3
 800a542:	61fb      	str	r3, [r7, #28]
 800a544:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a548:	4641      	mov	r1, r8
 800a54a:	1851      	adds	r1, r2, r1
 800a54c:	6139      	str	r1, [r7, #16]
 800a54e:	4649      	mov	r1, r9
 800a550:	414b      	adcs	r3, r1
 800a552:	617b      	str	r3, [r7, #20]
 800a554:	f04f 0200 	mov.w	r2, #0
 800a558:	f04f 0300 	mov.w	r3, #0
 800a55c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a560:	4659      	mov	r1, fp
 800a562:	00cb      	lsls	r3, r1, #3
 800a564:	4651      	mov	r1, sl
 800a566:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a56a:	4651      	mov	r1, sl
 800a56c:	00ca      	lsls	r2, r1, #3
 800a56e:	4610      	mov	r0, r2
 800a570:	4619      	mov	r1, r3
 800a572:	4603      	mov	r3, r0
 800a574:	4642      	mov	r2, r8
 800a576:	189b      	adds	r3, r3, r2
 800a578:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a57c:	464b      	mov	r3, r9
 800a57e:	460a      	mov	r2, r1
 800a580:	eb42 0303 	adc.w	r3, r2, r3
 800a584:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	2200      	movs	r2, #0
 800a590:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a592:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a594:	f04f 0200 	mov.w	r2, #0
 800a598:	f04f 0300 	mov.w	r3, #0
 800a59c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a5a0:	4649      	mov	r1, r9
 800a5a2:	008b      	lsls	r3, r1, #2
 800a5a4:	4641      	mov	r1, r8
 800a5a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a5aa:	4641      	mov	r1, r8
 800a5ac:	008a      	lsls	r2, r1, #2
 800a5ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a5b2:	f7f6 faf9 	bl	8000ba8 <__aeabi_uldivmod>
 800a5b6:	4602      	mov	r2, r0
 800a5b8:	460b      	mov	r3, r1
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	4b38      	ldr	r3, [pc, #224]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a5be:	fba3 2301 	umull	r2, r3, r3, r1
 800a5c2:	095b      	lsrs	r3, r3, #5
 800a5c4:	2264      	movs	r2, #100	@ 0x64
 800a5c6:	fb02 f303 	mul.w	r3, r2, r3
 800a5ca:	1acb      	subs	r3, r1, r3
 800a5cc:	011b      	lsls	r3, r3, #4
 800a5ce:	3332      	adds	r3, #50	@ 0x32
 800a5d0:	4a33      	ldr	r2, [pc, #204]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a5d2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5d6:	095b      	lsrs	r3, r3, #5
 800a5d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5dc:	441c      	add	r4, r3
 800a5de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	673b      	str	r3, [r7, #112]	@ 0x70
 800a5e6:	677a      	str	r2, [r7, #116]	@ 0x74
 800a5e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a5ec:	4642      	mov	r2, r8
 800a5ee:	464b      	mov	r3, r9
 800a5f0:	1891      	adds	r1, r2, r2
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	415b      	adcs	r3, r3
 800a5f6:	60fb      	str	r3, [r7, #12]
 800a5f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a5fc:	4641      	mov	r1, r8
 800a5fe:	1851      	adds	r1, r2, r1
 800a600:	6039      	str	r1, [r7, #0]
 800a602:	4649      	mov	r1, r9
 800a604:	414b      	adcs	r3, r1
 800a606:	607b      	str	r3, [r7, #4]
 800a608:	f04f 0200 	mov.w	r2, #0
 800a60c:	f04f 0300 	mov.w	r3, #0
 800a610:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a614:	4659      	mov	r1, fp
 800a616:	00cb      	lsls	r3, r1, #3
 800a618:	4651      	mov	r1, sl
 800a61a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a61e:	4651      	mov	r1, sl
 800a620:	00ca      	lsls	r2, r1, #3
 800a622:	4610      	mov	r0, r2
 800a624:	4619      	mov	r1, r3
 800a626:	4603      	mov	r3, r0
 800a628:	4642      	mov	r2, r8
 800a62a:	189b      	adds	r3, r3, r2
 800a62c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a62e:	464b      	mov	r3, r9
 800a630:	460a      	mov	r2, r1
 800a632:	eb42 0303 	adc.w	r3, r2, r3
 800a636:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	663b      	str	r3, [r7, #96]	@ 0x60
 800a642:	667a      	str	r2, [r7, #100]	@ 0x64
 800a644:	f04f 0200 	mov.w	r2, #0
 800a648:	f04f 0300 	mov.w	r3, #0
 800a64c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a650:	4649      	mov	r1, r9
 800a652:	008b      	lsls	r3, r1, #2
 800a654:	4641      	mov	r1, r8
 800a656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a65a:	4641      	mov	r1, r8
 800a65c:	008a      	lsls	r2, r1, #2
 800a65e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a662:	f7f6 faa1 	bl	8000ba8 <__aeabi_uldivmod>
 800a666:	4602      	mov	r2, r0
 800a668:	460b      	mov	r3, r1
 800a66a:	4b0d      	ldr	r3, [pc, #52]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a66c:	fba3 1302 	umull	r1, r3, r3, r2
 800a670:	095b      	lsrs	r3, r3, #5
 800a672:	2164      	movs	r1, #100	@ 0x64
 800a674:	fb01 f303 	mul.w	r3, r1, r3
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	011b      	lsls	r3, r3, #4
 800a67c:	3332      	adds	r3, #50	@ 0x32
 800a67e:	4a08      	ldr	r2, [pc, #32]	@ (800a6a0 <UART_SetConfig+0x4e4>)
 800a680:	fba2 2303 	umull	r2, r3, r2, r3
 800a684:	095b      	lsrs	r3, r3, #5
 800a686:	f003 020f 	and.w	r2, r3, #15
 800a68a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4422      	add	r2, r4
 800a692:	609a      	str	r2, [r3, #8]
}
 800a694:	bf00      	nop
 800a696:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a69a:	46bd      	mov	sp, r7
 800a69c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a6a0:	51eb851f 	.word	0x51eb851f

0800a6a4 <__NVIC_SetPriority>:
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	4603      	mov	r3, r0
 800a6ac:	6039      	str	r1, [r7, #0]
 800a6ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a6b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	db0a      	blt.n	800a6ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6b8:	683b      	ldr	r3, [r7, #0]
 800a6ba:	b2da      	uxtb	r2, r3
 800a6bc:	490c      	ldr	r1, [pc, #48]	@ (800a6f0 <__NVIC_SetPriority+0x4c>)
 800a6be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a6c2:	0112      	lsls	r2, r2, #4
 800a6c4:	b2d2      	uxtb	r2, r2
 800a6c6:	440b      	add	r3, r1
 800a6c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a6cc:	e00a      	b.n	800a6e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a6ce:	683b      	ldr	r3, [r7, #0]
 800a6d0:	b2da      	uxtb	r2, r3
 800a6d2:	4908      	ldr	r1, [pc, #32]	@ (800a6f4 <__NVIC_SetPriority+0x50>)
 800a6d4:	79fb      	ldrb	r3, [r7, #7]
 800a6d6:	f003 030f 	and.w	r3, r3, #15
 800a6da:	3b04      	subs	r3, #4
 800a6dc:	0112      	lsls	r2, r2, #4
 800a6de:	b2d2      	uxtb	r2, r2
 800a6e0:	440b      	add	r3, r1
 800a6e2:	761a      	strb	r2, [r3, #24]
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	e000e100 	.word	0xe000e100
 800a6f4:	e000ed00 	.word	0xe000ed00

0800a6f8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a6fc:	2100      	movs	r1, #0
 800a6fe:	f06f 0004 	mvn.w	r0, #4
 800a702:	f7ff ffcf 	bl	800a6a4 <__NVIC_SetPriority>
#endif
}
 800a706:	bf00      	nop
 800a708:	bd80      	pop	{r7, pc}
	...

0800a70c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a70c:	b480      	push	{r7}
 800a70e:	b083      	sub	sp, #12
 800a710:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a712:	f3ef 8305 	mrs	r3, IPSR
 800a716:	603b      	str	r3, [r7, #0]
  return(result);
 800a718:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d003      	beq.n	800a726 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a71e:	f06f 0305 	mvn.w	r3, #5
 800a722:	607b      	str	r3, [r7, #4]
 800a724:	e00c      	b.n	800a740 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a726:	4b0a      	ldr	r3, [pc, #40]	@ (800a750 <osKernelInitialize+0x44>)
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d105      	bne.n	800a73a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a72e:	4b08      	ldr	r3, [pc, #32]	@ (800a750 <osKernelInitialize+0x44>)
 800a730:	2201      	movs	r2, #1
 800a732:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a734:	2300      	movs	r3, #0
 800a736:	607b      	str	r3, [r7, #4]
 800a738:	e002      	b.n	800a740 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a73a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a73e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a740:	687b      	ldr	r3, [r7, #4]
}
 800a742:	4618      	mov	r0, r3
 800a744:	370c      	adds	r7, #12
 800a746:	46bd      	mov	sp, r7
 800a748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74c:	4770      	bx	lr
 800a74e:	bf00      	nop
 800a750:	20000dcc 	.word	0x20000dcc

0800a754 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a754:	b580      	push	{r7, lr}
 800a756:	b082      	sub	sp, #8
 800a758:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a75a:	f3ef 8305 	mrs	r3, IPSR
 800a75e:	603b      	str	r3, [r7, #0]
  return(result);
 800a760:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a762:	2b00      	cmp	r3, #0
 800a764:	d003      	beq.n	800a76e <osKernelStart+0x1a>
    stat = osErrorISR;
 800a766:	f06f 0305 	mvn.w	r3, #5
 800a76a:	607b      	str	r3, [r7, #4]
 800a76c:	e010      	b.n	800a790 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a76e:	4b0b      	ldr	r3, [pc, #44]	@ (800a79c <osKernelStart+0x48>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	2b01      	cmp	r3, #1
 800a774:	d109      	bne.n	800a78a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a776:	f7ff ffbf 	bl	800a6f8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a77a:	4b08      	ldr	r3, [pc, #32]	@ (800a79c <osKernelStart+0x48>)
 800a77c:	2202      	movs	r2, #2
 800a77e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a780:	f001 f892 	bl	800b8a8 <vTaskStartScheduler>
      stat = osOK;
 800a784:	2300      	movs	r3, #0
 800a786:	607b      	str	r3, [r7, #4]
 800a788:	e002      	b.n	800a790 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a78a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a78e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a790:	687b      	ldr	r3, [r7, #4]
}
 800a792:	4618      	mov	r0, r3
 800a794:	3708      	adds	r7, #8
 800a796:	46bd      	mov	sp, r7
 800a798:	bd80      	pop	{r7, pc}
 800a79a:	bf00      	nop
 800a79c:	20000dcc 	.word	0x20000dcc

0800a7a0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b08e      	sub	sp, #56	@ 0x38
 800a7a4:	af04      	add	r7, sp, #16
 800a7a6:	60f8      	str	r0, [r7, #12]
 800a7a8:	60b9      	str	r1, [r7, #8]
 800a7aa:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a7b0:	f3ef 8305 	mrs	r3, IPSR
 800a7b4:	617b      	str	r3, [r7, #20]
  return(result);
 800a7b6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d17e      	bne.n	800a8ba <osThreadNew+0x11a>
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d07b      	beq.n	800a8ba <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a7c2:	2380      	movs	r3, #128	@ 0x80
 800a7c4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a7c6:	2318      	movs	r3, #24
 800a7c8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a7ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a7d2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d045      	beq.n	800a866 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d002      	beq.n	800a7e8 <osThreadNew+0x48>
        name = attr->name;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	699b      	ldr	r3, [r3, #24]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d002      	beq.n	800a7f6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d008      	beq.n	800a80e <osThreadNew+0x6e>
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	2b38      	cmp	r3, #56	@ 0x38
 800a800:	d805      	bhi.n	800a80e <osThreadNew+0x6e>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	f003 0301 	and.w	r3, r3, #1
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d001      	beq.n	800a812 <osThreadNew+0x72>
        return (NULL);
 800a80e:	2300      	movs	r3, #0
 800a810:	e054      	b.n	800a8bc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d003      	beq.n	800a822 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	695b      	ldr	r3, [r3, #20]
 800a81e:	089b      	lsrs	r3, r3, #2
 800a820:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689b      	ldr	r3, [r3, #8]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d00e      	beq.n	800a848 <osThreadNew+0xa8>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	68db      	ldr	r3, [r3, #12]
 800a82e:	2ba7      	cmp	r3, #167	@ 0xa7
 800a830:	d90a      	bls.n	800a848 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a836:	2b00      	cmp	r3, #0
 800a838:	d006      	beq.n	800a848 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	695b      	ldr	r3, [r3, #20]
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d002      	beq.n	800a848 <osThreadNew+0xa8>
        mem = 1;
 800a842:	2301      	movs	r3, #1
 800a844:	61bb      	str	r3, [r7, #24]
 800a846:	e010      	b.n	800a86a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	689b      	ldr	r3, [r3, #8]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d10c      	bne.n	800a86a <osThreadNew+0xca>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	68db      	ldr	r3, [r3, #12]
 800a854:	2b00      	cmp	r3, #0
 800a856:	d108      	bne.n	800a86a <osThreadNew+0xca>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	691b      	ldr	r3, [r3, #16]
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d104      	bne.n	800a86a <osThreadNew+0xca>
          mem = 0;
 800a860:	2300      	movs	r3, #0
 800a862:	61bb      	str	r3, [r7, #24]
 800a864:	e001      	b.n	800a86a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a866:	2300      	movs	r3, #0
 800a868:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d110      	bne.n	800a892 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a874:	687a      	ldr	r2, [r7, #4]
 800a876:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a878:	9202      	str	r2, [sp, #8]
 800a87a:	9301      	str	r3, [sp, #4]
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	9300      	str	r3, [sp, #0]
 800a880:	68bb      	ldr	r3, [r7, #8]
 800a882:	6a3a      	ldr	r2, [r7, #32]
 800a884:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a886:	68f8      	ldr	r0, [r7, #12]
 800a888:	f000 fe1a 	bl	800b4c0 <xTaskCreateStatic>
 800a88c:	4603      	mov	r3, r0
 800a88e:	613b      	str	r3, [r7, #16]
 800a890:	e013      	b.n	800a8ba <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a892:	69bb      	ldr	r3, [r7, #24]
 800a894:	2b00      	cmp	r3, #0
 800a896:	d110      	bne.n	800a8ba <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	b29a      	uxth	r2, r3
 800a89c:	f107 0310 	add.w	r3, r7, #16
 800a8a0:	9301      	str	r3, [sp, #4]
 800a8a2:	69fb      	ldr	r3, [r7, #28]
 800a8a4:	9300      	str	r3, [sp, #0]
 800a8a6:	68bb      	ldr	r3, [r7, #8]
 800a8a8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a8aa:	68f8      	ldr	r0, [r7, #12]
 800a8ac:	f000 fe68 	bl	800b580 <xTaskCreate>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	2b01      	cmp	r3, #1
 800a8b4:	d001      	beq.n	800a8ba <osThreadNew+0x11a>
            hTask = NULL;
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a8ba:	693b      	ldr	r3, [r7, #16]
}
 800a8bc:	4618      	mov	r0, r3
 800a8be:	3728      	adds	r7, #40	@ 0x28
 800a8c0:	46bd      	mov	sp, r7
 800a8c2:	bd80      	pop	{r7, pc}

0800a8c4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a8cc:	f3ef 8305 	mrs	r3, IPSR
 800a8d0:	60bb      	str	r3, [r7, #8]
  return(result);
 800a8d2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d003      	beq.n	800a8e0 <osDelay+0x1c>
    stat = osErrorISR;
 800a8d8:	f06f 0305 	mvn.w	r3, #5
 800a8dc:	60fb      	str	r3, [r7, #12]
 800a8de:	e007      	b.n	800a8f0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d002      	beq.n	800a8f0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 ffa6 	bl	800b83c <vTaskDelay>
    }
  }

  return (stat);
 800a8f0:	68fb      	ldr	r3, [r7, #12]
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3710      	adds	r7, #16
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
	...

0800a8fc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	60f8      	str	r0, [r7, #12]
 800a904:	60b9      	str	r1, [r7, #8]
 800a906:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	4a07      	ldr	r2, [pc, #28]	@ (800a928 <vApplicationGetIdleTaskMemory+0x2c>)
 800a90c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a90e:	68bb      	ldr	r3, [r7, #8]
 800a910:	4a06      	ldr	r2, [pc, #24]	@ (800a92c <vApplicationGetIdleTaskMemory+0x30>)
 800a912:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2280      	movs	r2, #128	@ 0x80
 800a918:	601a      	str	r2, [r3, #0]
}
 800a91a:	bf00      	nop
 800a91c:	3714      	adds	r7, #20
 800a91e:	46bd      	mov	sp, r7
 800a920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a924:	4770      	bx	lr
 800a926:	bf00      	nop
 800a928:	20000dd0 	.word	0x20000dd0
 800a92c:	20000e78 	.word	0x20000e78

0800a930 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a930:	b480      	push	{r7}
 800a932:	b085      	sub	sp, #20
 800a934:	af00      	add	r7, sp, #0
 800a936:	60f8      	str	r0, [r7, #12]
 800a938:	60b9      	str	r1, [r7, #8]
 800a93a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4a07      	ldr	r2, [pc, #28]	@ (800a95c <vApplicationGetTimerTaskMemory+0x2c>)
 800a940:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	4a06      	ldr	r2, [pc, #24]	@ (800a960 <vApplicationGetTimerTaskMemory+0x30>)
 800a946:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a94e:	601a      	str	r2, [r3, #0]
}
 800a950:	bf00      	nop
 800a952:	3714      	adds	r7, #20
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	20001078 	.word	0x20001078
 800a960:	20001120 	.word	0x20001120

0800a964 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a964:	b480      	push	{r7}
 800a966:	b083      	sub	sp, #12
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f103 0208 	add.w	r2, r3, #8
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a97c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	f103 0208 	add.w	r2, r3, #8
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	f103 0208 	add.w	r2, r3, #8
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2200      	movs	r2, #0
 800a996:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a998:	bf00      	nop
 800a99a:	370c      	adds	r7, #12
 800a99c:	46bd      	mov	sp, r7
 800a99e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a2:	4770      	bx	lr

0800a9a4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a9a4:	b480      	push	{r7}
 800a9a6:	b083      	sub	sp, #12
 800a9a8:	af00      	add	r7, sp, #0
 800a9aa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2200      	movs	r2, #0
 800a9b0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a9b2:	bf00      	nop
 800a9b4:	370c      	adds	r7, #12
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr

0800a9be <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a9be:	b480      	push	{r7}
 800a9c0:	b085      	sub	sp, #20
 800a9c2:	af00      	add	r7, sp, #0
 800a9c4:	6078      	str	r0, [r7, #4]
 800a9c6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	68fa      	ldr	r2, [r7, #12]
 800a9d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	689a      	ldr	r2, [r3, #8]
 800a9d8:	683b      	ldr	r3, [r7, #0]
 800a9da:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	683a      	ldr	r2, [r7, #0]
 800a9e2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	683a      	ldr	r2, [r7, #0]
 800a9e8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a9ea:	683b      	ldr	r3, [r7, #0]
 800a9ec:	687a      	ldr	r2, [r7, #4]
 800a9ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	1c5a      	adds	r2, r3, #1
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	601a      	str	r2, [r3, #0]
}
 800a9fa:	bf00      	nop
 800a9fc:	3714      	adds	r7, #20
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa04:	4770      	bx	lr

0800aa06 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800aa06:	b480      	push	{r7}
 800aa08:	b085      	sub	sp, #20
 800aa0a:	af00      	add	r7, sp, #0
 800aa0c:	6078      	str	r0, [r7, #4]
 800aa0e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aa1c:	d103      	bne.n	800aa26 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	691b      	ldr	r3, [r3, #16]
 800aa22:	60fb      	str	r3, [r7, #12]
 800aa24:	e00c      	b.n	800aa40 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	3308      	adds	r3, #8
 800aa2a:	60fb      	str	r3, [r7, #12]
 800aa2c:	e002      	b.n	800aa34 <vListInsert+0x2e>
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	685b      	ldr	r3, [r3, #4]
 800aa32:	60fb      	str	r3, [r7, #12]
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	685b      	ldr	r3, [r3, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	68ba      	ldr	r2, [r7, #8]
 800aa3c:	429a      	cmp	r2, r3
 800aa3e:	d2f6      	bcs.n	800aa2e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	685a      	ldr	r2, [r3, #4]
 800aa44:	683b      	ldr	r3, [r7, #0]
 800aa46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	685b      	ldr	r3, [r3, #4]
 800aa4c:	683a      	ldr	r2, [r7, #0]
 800aa4e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800aa50:	683b      	ldr	r3, [r7, #0]
 800aa52:	68fa      	ldr	r2, [r7, #12]
 800aa54:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	683a      	ldr	r2, [r7, #0]
 800aa5a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800aa5c:	683b      	ldr	r3, [r7, #0]
 800aa5e:	687a      	ldr	r2, [r7, #4]
 800aa60:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	1c5a      	adds	r2, r3, #1
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	601a      	str	r2, [r3, #0]
}
 800aa6c:	bf00      	nop
 800aa6e:	3714      	adds	r7, #20
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b085      	sub	sp, #20
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	691b      	ldr	r3, [r3, #16]
 800aa84:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	685b      	ldr	r3, [r3, #4]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	6892      	ldr	r2, [r2, #8]
 800aa8e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	6852      	ldr	r2, [r2, #4]
 800aa98:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	685b      	ldr	r3, [r3, #4]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	429a      	cmp	r2, r3
 800aaa2:	d103      	bne.n	800aaac <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	689a      	ldr	r2, [r3, #8]
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2200      	movs	r2, #0
 800aab0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	681b      	ldr	r3, [r3, #0]
 800aab6:	1e5a      	subs	r2, r3, #1
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	681b      	ldr	r3, [r3, #0]
}
 800aac0:	4618      	mov	r0, r3
 800aac2:	3714      	adds	r7, #20
 800aac4:	46bd      	mov	sp, r7
 800aac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaca:	4770      	bx	lr

0800aacc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800aacc:	b580      	push	{r7, lr}
 800aace:	b084      	sub	sp, #16
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
 800aad4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d10b      	bne.n	800aaf8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800aae0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aae4:	f383 8811 	msr	BASEPRI, r3
 800aae8:	f3bf 8f6f 	isb	sy
 800aaec:	f3bf 8f4f 	dsb	sy
 800aaf0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800aaf2:	bf00      	nop
 800aaf4:	bf00      	nop
 800aaf6:	e7fd      	b.n	800aaf4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800aaf8:	f002 fa86 	bl	800d008 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	681a      	ldr	r2, [r3, #0]
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab04:	68f9      	ldr	r1, [r7, #12]
 800ab06:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab08:	fb01 f303 	mul.w	r3, r1, r3
 800ab0c:	441a      	add	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ab12:	68fb      	ldr	r3, [r7, #12]
 800ab14:	2200      	movs	r2, #0
 800ab16:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681a      	ldr	r2, [r3, #0]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681a      	ldr	r2, [r3, #0]
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab28:	3b01      	subs	r3, #1
 800ab2a:	68f9      	ldr	r1, [r7, #12]
 800ab2c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800ab2e:	fb01 f303 	mul.w	r3, r1, r3
 800ab32:	441a      	add	r2, r3
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	22ff      	movs	r2, #255	@ 0xff
 800ab3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	22ff      	movs	r2, #255	@ 0xff
 800ab44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d114      	bne.n	800ab78 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	691b      	ldr	r3, [r3, #16]
 800ab52:	2b00      	cmp	r3, #0
 800ab54:	d01a      	beq.n	800ab8c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	3310      	adds	r3, #16
 800ab5a:	4618      	mov	r0, r3
 800ab5c:	f001 fa3c 	bl	800bfd8 <xTaskRemoveFromEventList>
 800ab60:	4603      	mov	r3, r0
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d012      	beq.n	800ab8c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ab66:	4b0d      	ldr	r3, [pc, #52]	@ (800ab9c <xQueueGenericReset+0xd0>)
 800ab68:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab6c:	601a      	str	r2, [r3, #0]
 800ab6e:	f3bf 8f4f 	dsb	sy
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	e009      	b.n	800ab8c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	3310      	adds	r3, #16
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	f7ff fef1 	bl	800a964 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3324      	adds	r3, #36	@ 0x24
 800ab86:	4618      	mov	r0, r3
 800ab88:	f7ff feec 	bl	800a964 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800ab8c:	f002 fa6e 	bl	800d06c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800ab90:	2301      	movs	r3, #1
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}
 800ab9a:	bf00      	nop
 800ab9c:	e000ed04 	.word	0xe000ed04

0800aba0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b08e      	sub	sp, #56	@ 0x38
 800aba4:	af02      	add	r7, sp, #8
 800aba6:	60f8      	str	r0, [r7, #12]
 800aba8:	60b9      	str	r1, [r7, #8]
 800abaa:	607a      	str	r2, [r7, #4]
 800abac:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2b00      	cmp	r3, #0
 800abb2:	d10b      	bne.n	800abcc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800abb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abb8:	f383 8811 	msr	BASEPRI, r3
 800abbc:	f3bf 8f6f 	isb	sy
 800abc0:	f3bf 8f4f 	dsb	sy
 800abc4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	e7fd      	b.n	800abc8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800abcc:	683b      	ldr	r3, [r7, #0]
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d10b      	bne.n	800abea <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800abd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800abd6:	f383 8811 	msr	BASEPRI, r3
 800abda:	f3bf 8f6f 	isb	sy
 800abde:	f3bf 8f4f 	dsb	sy
 800abe2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800abe4:	bf00      	nop
 800abe6:	bf00      	nop
 800abe8:	e7fd      	b.n	800abe6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2b00      	cmp	r3, #0
 800abee:	d002      	beq.n	800abf6 <xQueueGenericCreateStatic+0x56>
 800abf0:	68bb      	ldr	r3, [r7, #8]
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d001      	beq.n	800abfa <xQueueGenericCreateStatic+0x5a>
 800abf6:	2301      	movs	r3, #1
 800abf8:	e000      	b.n	800abfc <xQueueGenericCreateStatic+0x5c>
 800abfa:	2300      	movs	r3, #0
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	d10b      	bne.n	800ac18 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800ac00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac04:	f383 8811 	msr	BASEPRI, r3
 800ac08:	f3bf 8f6f 	isb	sy
 800ac0c:	f3bf 8f4f 	dsb	sy
 800ac10:	623b      	str	r3, [r7, #32]
}
 800ac12:	bf00      	nop
 800ac14:	bf00      	nop
 800ac16:	e7fd      	b.n	800ac14 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d102      	bne.n	800ac24 <xQueueGenericCreateStatic+0x84>
 800ac1e:	68bb      	ldr	r3, [r7, #8]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d101      	bne.n	800ac28 <xQueueGenericCreateStatic+0x88>
 800ac24:	2301      	movs	r3, #1
 800ac26:	e000      	b.n	800ac2a <xQueueGenericCreateStatic+0x8a>
 800ac28:	2300      	movs	r3, #0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d10b      	bne.n	800ac46 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800ac2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac32:	f383 8811 	msr	BASEPRI, r3
 800ac36:	f3bf 8f6f 	isb	sy
 800ac3a:	f3bf 8f4f 	dsb	sy
 800ac3e:	61fb      	str	r3, [r7, #28]
}
 800ac40:	bf00      	nop
 800ac42:	bf00      	nop
 800ac44:	e7fd      	b.n	800ac42 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ac46:	2350      	movs	r3, #80	@ 0x50
 800ac48:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2b50      	cmp	r3, #80	@ 0x50
 800ac4e:	d00b      	beq.n	800ac68 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800ac50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac54:	f383 8811 	msr	BASEPRI, r3
 800ac58:	f3bf 8f6f 	isb	sy
 800ac5c:	f3bf 8f4f 	dsb	sy
 800ac60:	61bb      	str	r3, [r7, #24]
}
 800ac62:	bf00      	nop
 800ac64:	bf00      	nop
 800ac66:	e7fd      	b.n	800ac64 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ac68:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800ac6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d00d      	beq.n	800ac90 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ac74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac76:	2201      	movs	r2, #1
 800ac78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ac7c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800ac80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ac82:	9300      	str	r3, [sp, #0]
 800ac84:	4613      	mov	r3, r2
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	68b9      	ldr	r1, [r7, #8]
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f000 f805 	bl	800ac9a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ac90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3730      	adds	r7, #48	@ 0x30
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd80      	pop	{r7, pc}

0800ac9a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b084      	sub	sp, #16
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
 800aca6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800aca8:	68bb      	ldr	r3, [r7, #8]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d103      	bne.n	800acb6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	69ba      	ldr	r2, [r7, #24]
 800acb2:	601a      	str	r2, [r3, #0]
 800acb4:	e002      	b.n	800acbc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800acb6:	69bb      	ldr	r3, [r7, #24]
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	68fa      	ldr	r2, [r7, #12]
 800acc0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800acc2:	69bb      	ldr	r3, [r7, #24]
 800acc4:	68ba      	ldr	r2, [r7, #8]
 800acc6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800acc8:	2101      	movs	r1, #1
 800acca:	69b8      	ldr	r0, [r7, #24]
 800accc:	f7ff fefe 	bl	800aacc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800acd0:	69bb      	ldr	r3, [r7, #24]
 800acd2:	78fa      	ldrb	r2, [r7, #3]
 800acd4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800acd8:	bf00      	nop
 800acda:	3710      	adds	r7, #16
 800acdc:	46bd      	mov	sp, r7
 800acde:	bd80      	pop	{r7, pc}

0800ace0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	b08e      	sub	sp, #56	@ 0x38
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	60f8      	str	r0, [r7, #12]
 800ace8:	60b9      	str	r1, [r7, #8]
 800acea:	607a      	str	r2, [r7, #4]
 800acec:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800acee:	2300      	movs	r3, #0
 800acf0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800acf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d10b      	bne.n	800ad14 <xQueueGenericSend+0x34>
	__asm volatile
 800acfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad00:	f383 8811 	msr	BASEPRI, r3
 800ad04:	f3bf 8f6f 	isb	sy
 800ad08:	f3bf 8f4f 	dsb	sy
 800ad0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ad0e:	bf00      	nop
 800ad10:	bf00      	nop
 800ad12:	e7fd      	b.n	800ad10 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad14:	68bb      	ldr	r3, [r7, #8]
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d103      	bne.n	800ad22 <xQueueGenericSend+0x42>
 800ad1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d101      	bne.n	800ad26 <xQueueGenericSend+0x46>
 800ad22:	2301      	movs	r3, #1
 800ad24:	e000      	b.n	800ad28 <xQueueGenericSend+0x48>
 800ad26:	2300      	movs	r3, #0
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d10b      	bne.n	800ad44 <xQueueGenericSend+0x64>
	__asm volatile
 800ad2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad30:	f383 8811 	msr	BASEPRI, r3
 800ad34:	f3bf 8f6f 	isb	sy
 800ad38:	f3bf 8f4f 	dsb	sy
 800ad3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ad3e:	bf00      	nop
 800ad40:	bf00      	nop
 800ad42:	e7fd      	b.n	800ad40 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	2b02      	cmp	r3, #2
 800ad48:	d103      	bne.n	800ad52 <xQueueGenericSend+0x72>
 800ad4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ad4e:	2b01      	cmp	r3, #1
 800ad50:	d101      	bne.n	800ad56 <xQueueGenericSend+0x76>
 800ad52:	2301      	movs	r3, #1
 800ad54:	e000      	b.n	800ad58 <xQueueGenericSend+0x78>
 800ad56:	2300      	movs	r3, #0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10b      	bne.n	800ad74 <xQueueGenericSend+0x94>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	623b      	str	r3, [r7, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	bf00      	nop
 800ad72:	e7fd      	b.n	800ad70 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad74:	f001 faf6 	bl	800c364 <xTaskGetSchedulerState>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d102      	bne.n	800ad84 <xQueueGenericSend+0xa4>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d101      	bne.n	800ad88 <xQueueGenericSend+0xa8>
 800ad84:	2301      	movs	r3, #1
 800ad86:	e000      	b.n	800ad8a <xQueueGenericSend+0xaa>
 800ad88:	2300      	movs	r3, #0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d10b      	bne.n	800ada6 <xQueueGenericSend+0xc6>
	__asm volatile
 800ad8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad92:	f383 8811 	msr	BASEPRI, r3
 800ad96:	f3bf 8f6f 	isb	sy
 800ad9a:	f3bf 8f4f 	dsb	sy
 800ad9e:	61fb      	str	r3, [r7, #28]
}
 800ada0:	bf00      	nop
 800ada2:	bf00      	nop
 800ada4:	e7fd      	b.n	800ada2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ada6:	f002 f92f 	bl	800d008 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800adaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800adae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d302      	bcc.n	800adbc <xQueueGenericSend+0xdc>
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	2b02      	cmp	r3, #2
 800adba:	d129      	bne.n	800ae10 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800adbc:	683a      	ldr	r2, [r7, #0]
 800adbe:	68b9      	ldr	r1, [r7, #8]
 800adc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800adc2:	f000 fa0f 	bl	800b1e4 <prvCopyDataToQueue>
 800adc6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800adc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d010      	beq.n	800adf2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800add0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800add2:	3324      	adds	r3, #36	@ 0x24
 800add4:	4618      	mov	r0, r3
 800add6:	f001 f8ff 	bl	800bfd8 <xTaskRemoveFromEventList>
 800adda:	4603      	mov	r3, r0
 800addc:	2b00      	cmp	r3, #0
 800adde:	d013      	beq.n	800ae08 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ade0:	4b3f      	ldr	r3, [pc, #252]	@ (800aee0 <xQueueGenericSend+0x200>)
 800ade2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	f3bf 8f4f 	dsb	sy
 800adec:	f3bf 8f6f 	isb	sy
 800adf0:	e00a      	b.n	800ae08 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800adf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d007      	beq.n	800ae08 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800adf8:	4b39      	ldr	r3, [pc, #228]	@ (800aee0 <xQueueGenericSend+0x200>)
 800adfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800adfe:	601a      	str	r2, [r3, #0]
 800ae00:	f3bf 8f4f 	dsb	sy
 800ae04:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ae08:	f002 f930 	bl	800d06c <vPortExitCritical>
				return pdPASS;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e063      	b.n	800aed8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d103      	bne.n	800ae1e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae16:	f002 f929 	bl	800d06c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ae1a:	2300      	movs	r3, #0
 800ae1c:	e05c      	b.n	800aed8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d106      	bne.n	800ae32 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae24:	f107 0314 	add.w	r3, r7, #20
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f001 f939 	bl	800c0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae32:	f002 f91b 	bl	800d06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae36:	f000 fda7 	bl	800b988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae3a:	f002 f8e5 	bl	800d008 <vPortEnterCritical>
 800ae3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae40:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae44:	b25b      	sxtb	r3, r3
 800ae46:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae4a:	d103      	bne.n	800ae54 <xQueueGenericSend+0x174>
 800ae4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae4e:	2200      	movs	r2, #0
 800ae50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae56:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae5a:	b25b      	sxtb	r3, r3
 800ae5c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae60:	d103      	bne.n	800ae6a <xQueueGenericSend+0x18a>
 800ae62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae64:	2200      	movs	r2, #0
 800ae66:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ae6a:	f002 f8ff 	bl	800d06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae6e:	1d3a      	adds	r2, r7, #4
 800ae70:	f107 0314 	add.w	r3, r7, #20
 800ae74:	4611      	mov	r1, r2
 800ae76:	4618      	mov	r0, r3
 800ae78:	f001 f928 	bl	800c0cc <xTaskCheckForTimeOut>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d124      	bne.n	800aecc <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ae82:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae84:	f000 faa6 	bl	800b3d4 <prvIsQueueFull>
 800ae88:	4603      	mov	r3, r0
 800ae8a:	2b00      	cmp	r3, #0
 800ae8c:	d018      	beq.n	800aec0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ae8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae90:	3310      	adds	r3, #16
 800ae92:	687a      	ldr	r2, [r7, #4]
 800ae94:	4611      	mov	r1, r2
 800ae96:	4618      	mov	r0, r3
 800ae98:	f001 f84c 	bl	800bf34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ae9c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ae9e:	f000 fa31 	bl	800b304 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aea2:	f000 fd7f 	bl	800b9a4 <xTaskResumeAll>
 800aea6:	4603      	mov	r3, r0
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f47f af7c 	bne.w	800ada6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800aeae:	4b0c      	ldr	r3, [pc, #48]	@ (800aee0 <xQueueGenericSend+0x200>)
 800aeb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aeb4:	601a      	str	r2, [r3, #0]
 800aeb6:	f3bf 8f4f 	dsb	sy
 800aeba:	f3bf 8f6f 	isb	sy
 800aebe:	e772      	b.n	800ada6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aec0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aec2:	f000 fa1f 	bl	800b304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aec6:	f000 fd6d 	bl	800b9a4 <xTaskResumeAll>
 800aeca:	e76c      	b.n	800ada6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aecc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800aece:	f000 fa19 	bl	800b304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aed2:	f000 fd67 	bl	800b9a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aed6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aed8:	4618      	mov	r0, r3
 800aeda:	3738      	adds	r7, #56	@ 0x38
 800aedc:	46bd      	mov	sp, r7
 800aede:	bd80      	pop	{r7, pc}
 800aee0:	e000ed04 	.word	0xe000ed04

0800aee4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b090      	sub	sp, #64	@ 0x40
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	60f8      	str	r0, [r7, #12]
 800aeec:	60b9      	str	r1, [r7, #8]
 800aeee:	607a      	str	r2, [r7, #4]
 800aef0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800aef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d10b      	bne.n	800af14 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800aefc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af00:	f383 8811 	msr	BASEPRI, r3
 800af04:	f3bf 8f6f 	isb	sy
 800af08:	f3bf 8f4f 	dsb	sy
 800af0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800af0e:	bf00      	nop
 800af10:	bf00      	nop
 800af12:	e7fd      	b.n	800af10 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2b00      	cmp	r3, #0
 800af18:	d103      	bne.n	800af22 <xQueueGenericSendFromISR+0x3e>
 800af1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d101      	bne.n	800af26 <xQueueGenericSendFromISR+0x42>
 800af22:	2301      	movs	r3, #1
 800af24:	e000      	b.n	800af28 <xQueueGenericSendFromISR+0x44>
 800af26:	2300      	movs	r3, #0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10b      	bne.n	800af44 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800af2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af30:	f383 8811 	msr	BASEPRI, r3
 800af34:	f3bf 8f6f 	isb	sy
 800af38:	f3bf 8f4f 	dsb	sy
 800af3c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800af3e:	bf00      	nop
 800af40:	bf00      	nop
 800af42:	e7fd      	b.n	800af40 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	2b02      	cmp	r3, #2
 800af48:	d103      	bne.n	800af52 <xQueueGenericSendFromISR+0x6e>
 800af4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af4e:	2b01      	cmp	r3, #1
 800af50:	d101      	bne.n	800af56 <xQueueGenericSendFromISR+0x72>
 800af52:	2301      	movs	r3, #1
 800af54:	e000      	b.n	800af58 <xQueueGenericSendFromISR+0x74>
 800af56:	2300      	movs	r3, #0
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d10b      	bne.n	800af74 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800af5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af60:	f383 8811 	msr	BASEPRI, r3
 800af64:	f3bf 8f6f 	isb	sy
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	623b      	str	r3, [r7, #32]
}
 800af6e:	bf00      	nop
 800af70:	bf00      	nop
 800af72:	e7fd      	b.n	800af70 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800af74:	f002 f928 	bl	800d1c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800af78:	f3ef 8211 	mrs	r2, BASEPRI
 800af7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af80:	f383 8811 	msr	BASEPRI, r3
 800af84:	f3bf 8f6f 	isb	sy
 800af88:	f3bf 8f4f 	dsb	sy
 800af8c:	61fa      	str	r2, [r7, #28]
 800af8e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800af90:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800af92:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800af94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af96:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800af9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d302      	bcc.n	800afa6 <xQueueGenericSendFromISR+0xc2>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d12f      	bne.n	800b006 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800afa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afa8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800afac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800afb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800afb6:	683a      	ldr	r2, [r7, #0]
 800afb8:	68b9      	ldr	r1, [r7, #8]
 800afba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800afbc:	f000 f912 	bl	800b1e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800afc0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800afc4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800afc8:	d112      	bne.n	800aff0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800afca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d016      	beq.n	800b000 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800afd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800afd4:	3324      	adds	r3, #36	@ 0x24
 800afd6:	4618      	mov	r0, r3
 800afd8:	f000 fffe 	bl	800bfd8 <xTaskRemoveFromEventList>
 800afdc:	4603      	mov	r3, r0
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d00e      	beq.n	800b000 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d00b      	beq.n	800b000 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2201      	movs	r2, #1
 800afec:	601a      	str	r2, [r3, #0]
 800afee:	e007      	b.n	800b000 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800aff0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800aff4:	3301      	adds	r3, #1
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	b25a      	sxtb	r2, r3
 800affa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800affc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800b000:	2301      	movs	r3, #1
 800b002:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800b004:	e001      	b.n	800b00a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800b006:	2300      	movs	r3, #0
 800b008:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b00a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b00c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800b00e:	697b      	ldr	r3, [r7, #20]
 800b010:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800b014:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800b016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3740      	adds	r7, #64	@ 0x40
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b08c      	sub	sp, #48	@ 0x30
 800b024:	af00      	add	r7, sp, #0
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800b02c:	2300      	movs	r3, #0
 800b02e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800b034:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	d10b      	bne.n	800b052 <xQueueReceive+0x32>
	__asm volatile
 800b03a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b03e:	f383 8811 	msr	BASEPRI, r3
 800b042:	f3bf 8f6f 	isb	sy
 800b046:	f3bf 8f4f 	dsb	sy
 800b04a:	623b      	str	r3, [r7, #32]
}
 800b04c:	bf00      	nop
 800b04e:	bf00      	nop
 800b050:	e7fd      	b.n	800b04e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	2b00      	cmp	r3, #0
 800b056:	d103      	bne.n	800b060 <xQueueReceive+0x40>
 800b058:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b05a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <xQueueReceive+0x44>
 800b060:	2301      	movs	r3, #1
 800b062:	e000      	b.n	800b066 <xQueueReceive+0x46>
 800b064:	2300      	movs	r3, #0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d10b      	bne.n	800b082 <xQueueReceive+0x62>
	__asm volatile
 800b06a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b06e:	f383 8811 	msr	BASEPRI, r3
 800b072:	f3bf 8f6f 	isb	sy
 800b076:	f3bf 8f4f 	dsb	sy
 800b07a:	61fb      	str	r3, [r7, #28]
}
 800b07c:	bf00      	nop
 800b07e:	bf00      	nop
 800b080:	e7fd      	b.n	800b07e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800b082:	f001 f96f 	bl	800c364 <xTaskGetSchedulerState>
 800b086:	4603      	mov	r3, r0
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d102      	bne.n	800b092 <xQueueReceive+0x72>
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d101      	bne.n	800b096 <xQueueReceive+0x76>
 800b092:	2301      	movs	r3, #1
 800b094:	e000      	b.n	800b098 <xQueueReceive+0x78>
 800b096:	2300      	movs	r3, #0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d10b      	bne.n	800b0b4 <xQueueReceive+0x94>
	__asm volatile
 800b09c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0a0:	f383 8811 	msr	BASEPRI, r3
 800b0a4:	f3bf 8f6f 	isb	sy
 800b0a8:	f3bf 8f4f 	dsb	sy
 800b0ac:	61bb      	str	r3, [r7, #24]
}
 800b0ae:	bf00      	nop
 800b0b0:	bf00      	nop
 800b0b2:	e7fd      	b.n	800b0b0 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800b0b4:	f001 ffa8 	bl	800d008 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b0b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b0bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d01f      	beq.n	800b104 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800b0c4:	68b9      	ldr	r1, [r7, #8]
 800b0c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b0c8:	f000 f8f6 	bl	800b2b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800b0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b0ce:	1e5a      	subs	r2, r3, #1
 800b0d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d00f      	beq.n	800b0fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b0de:	3310      	adds	r3, #16
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 ff79 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d007      	beq.n	800b0fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800b0ec:	4b3c      	ldr	r3, [pc, #240]	@ (800b1e0 <xQueueReceive+0x1c0>)
 800b0ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b0f2:	601a      	str	r2, [r3, #0]
 800b0f4:	f3bf 8f4f 	dsb	sy
 800b0f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800b0fc:	f001 ffb6 	bl	800d06c <vPortExitCritical>
				return pdPASS;
 800b100:	2301      	movs	r3, #1
 800b102:	e069      	b.n	800b1d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d103      	bne.n	800b112 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800b10a:	f001 ffaf 	bl	800d06c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800b10e:	2300      	movs	r3, #0
 800b110:	e062      	b.n	800b1d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800b112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b114:	2b00      	cmp	r3, #0
 800b116:	d106      	bne.n	800b126 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800b118:	f107 0310 	add.w	r3, r7, #16
 800b11c:	4618      	mov	r0, r3
 800b11e:	f000 ffbf 	bl	800c0a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800b122:	2301      	movs	r3, #1
 800b124:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800b126:	f001 ffa1 	bl	800d06c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800b12a:	f000 fc2d 	bl	800b988 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800b12e:	f001 ff6b 	bl	800d008 <vPortEnterCritical>
 800b132:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b134:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b138:	b25b      	sxtb	r3, r3
 800b13a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b13e:	d103      	bne.n	800b148 <xQueueReceive+0x128>
 800b140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b142:	2200      	movs	r2, #0
 800b144:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b14a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b14e:	b25b      	sxtb	r3, r3
 800b150:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b154:	d103      	bne.n	800b15e <xQueueReceive+0x13e>
 800b156:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b158:	2200      	movs	r2, #0
 800b15a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b15e:	f001 ff85 	bl	800d06c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800b162:	1d3a      	adds	r2, r7, #4
 800b164:	f107 0310 	add.w	r3, r7, #16
 800b168:	4611      	mov	r1, r2
 800b16a:	4618      	mov	r0, r3
 800b16c:	f000 ffae 	bl	800c0cc <xTaskCheckForTimeOut>
 800b170:	4603      	mov	r3, r0
 800b172:	2b00      	cmp	r3, #0
 800b174:	d123      	bne.n	800b1be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b176:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b178:	f000 f916 	bl	800b3a8 <prvIsQueueEmpty>
 800b17c:	4603      	mov	r3, r0
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d017      	beq.n	800b1b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800b182:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b184:	3324      	adds	r3, #36	@ 0x24
 800b186:	687a      	ldr	r2, [r7, #4]
 800b188:	4611      	mov	r1, r2
 800b18a:	4618      	mov	r0, r3
 800b18c:	f000 fed2 	bl	800bf34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800b190:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b192:	f000 f8b7 	bl	800b304 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800b196:	f000 fc05 	bl	800b9a4 <xTaskResumeAll>
 800b19a:	4603      	mov	r3, r0
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d189      	bne.n	800b0b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800b1a0:	4b0f      	ldr	r3, [pc, #60]	@ (800b1e0 <xQueueReceive+0x1c0>)
 800b1a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b1a6:	601a      	str	r2, [r3, #0]
 800b1a8:	f3bf 8f4f 	dsb	sy
 800b1ac:	f3bf 8f6f 	isb	sy
 800b1b0:	e780      	b.n	800b0b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800b1b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1b4:	f000 f8a6 	bl	800b304 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800b1b8:	f000 fbf4 	bl	800b9a4 <xTaskResumeAll>
 800b1bc:	e77a      	b.n	800b0b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800b1be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1c0:	f000 f8a0 	bl	800b304 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800b1c4:	f000 fbee 	bl	800b9a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800b1c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800b1ca:	f000 f8ed 	bl	800b3a8 <prvIsQueueEmpty>
 800b1ce:	4603      	mov	r3, r0
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	f43f af6f 	beq.w	800b0b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800b1d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3730      	adds	r7, #48	@ 0x30
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	e000ed04 	.word	0xe000ed04

0800b1e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800b1e4:	b580      	push	{r7, lr}
 800b1e6:	b086      	sub	sp, #24
 800b1e8:	af00      	add	r7, sp, #0
 800b1ea:	60f8      	str	r0, [r7, #12]
 800b1ec:	60b9      	str	r1, [r7, #8]
 800b1ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800b1fa:	68fb      	ldr	r3, [r7, #12]
 800b1fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d10d      	bne.n	800b21e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d14d      	bne.n	800b2a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	689b      	ldr	r3, [r3, #8]
 800b20e:	4618      	mov	r0, r3
 800b210:	f001 f8c6 	bl	800c3a0 <xTaskPriorityDisinherit>
 800b214:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	2200      	movs	r2, #0
 800b21a:	609a      	str	r2, [r3, #8]
 800b21c:	e043      	b.n	800b2a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d119      	bne.n	800b258 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6858      	ldr	r0, [r3, #4]
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b22c:	461a      	mov	r2, r3
 800b22e:	68b9      	ldr	r1, [r7, #8]
 800b230:	f002 ffca 	bl	800e1c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	685a      	ldr	r2, [r3, #4]
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b23c:	441a      	add	r2, r3
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	685a      	ldr	r2, [r3, #4]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	689b      	ldr	r3, [r3, #8]
 800b24a:	429a      	cmp	r2, r3
 800b24c:	d32b      	bcc.n	800b2a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681a      	ldr	r2, [r3, #0]
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	605a      	str	r2, [r3, #4]
 800b256:	e026      	b.n	800b2a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	68d8      	ldr	r0, [r3, #12]
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b260:	461a      	mov	r2, r3
 800b262:	68b9      	ldr	r1, [r7, #8]
 800b264:	f002 ffb0 	bl	800e1c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	68da      	ldr	r2, [r3, #12]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b270:	425b      	negs	r3, r3
 800b272:	441a      	add	r2, r3
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	68da      	ldr	r2, [r3, #12]
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	429a      	cmp	r2, r3
 800b282:	d207      	bcs.n	800b294 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b284:	68fb      	ldr	r3, [r7, #12]
 800b286:	689a      	ldr	r2, [r3, #8]
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b28c:	425b      	negs	r3, r3
 800b28e:	441a      	add	r2, r3
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	2b02      	cmp	r3, #2
 800b298:	d105      	bne.n	800b2a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b29a:	693b      	ldr	r3, [r7, #16]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d002      	beq.n	800b2a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b2a0:	693b      	ldr	r3, [r7, #16]
 800b2a2:	3b01      	subs	r3, #1
 800b2a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b2a6:	693b      	ldr	r3, [r7, #16]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800b2ae:	697b      	ldr	r3, [r7, #20]
}
 800b2b0:	4618      	mov	r0, r3
 800b2b2:	3718      	adds	r7, #24
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b082      	sub	sp, #8
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d018      	beq.n	800b2fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	68da      	ldr	r2, [r3, #12]
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2d2:	441a      	add	r2, r3
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	68da      	ldr	r2, [r3, #12]
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	429a      	cmp	r2, r3
 800b2e2:	d303      	bcc.n	800b2ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681a      	ldr	r2, [r3, #0]
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	68d9      	ldr	r1, [r3, #12]
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	6838      	ldr	r0, [r7, #0]
 800b2f8:	f002 ff66 	bl	800e1c8 <memcpy>
	}
}
 800b2fc:	bf00      	nop
 800b2fe:	3708      	adds	r7, #8
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b304:	b580      	push	{r7, lr}
 800b306:	b084      	sub	sp, #16
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b30c:	f001 fe7c 	bl	800d008 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b316:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b318:	e011      	b.n	800b33e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b31e:	2b00      	cmp	r3, #0
 800b320:	d012      	beq.n	800b348 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	3324      	adds	r3, #36	@ 0x24
 800b326:	4618      	mov	r0, r3
 800b328:	f000 fe56 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b32c:	4603      	mov	r3, r0
 800b32e:	2b00      	cmp	r3, #0
 800b330:	d001      	beq.n	800b336 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b332:	f000 ff2f 	bl	800c194 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b336:	7bfb      	ldrb	r3, [r7, #15]
 800b338:	3b01      	subs	r3, #1
 800b33a:	b2db      	uxtb	r3, r3
 800b33c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b33e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b342:	2b00      	cmp	r3, #0
 800b344:	dce9      	bgt.n	800b31a <prvUnlockQueue+0x16>
 800b346:	e000      	b.n	800b34a <prvUnlockQueue+0x46>
					break;
 800b348:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	22ff      	movs	r2, #255	@ 0xff
 800b34e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b352:	f001 fe8b 	bl	800d06c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b356:	f001 fe57 	bl	800d008 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b360:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b362:	e011      	b.n	800b388 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	691b      	ldr	r3, [r3, #16]
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d012      	beq.n	800b392 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	3310      	adds	r3, #16
 800b370:	4618      	mov	r0, r3
 800b372:	f000 fe31 	bl	800bfd8 <xTaskRemoveFromEventList>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b37c:	f000 ff0a 	bl	800c194 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b380:	7bbb      	ldrb	r3, [r7, #14]
 800b382:	3b01      	subs	r3, #1
 800b384:	b2db      	uxtb	r3, r3
 800b386:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	dce9      	bgt.n	800b364 <prvUnlockQueue+0x60>
 800b390:	e000      	b.n	800b394 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b392:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	22ff      	movs	r2, #255	@ 0xff
 800b398:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b39c:	f001 fe66 	bl	800d06c <vPortExitCritical>
}
 800b3a0:	bf00      	nop
 800b3a2:	3710      	adds	r7, #16
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b084      	sub	sp, #16
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3b0:	f001 fe2a 	bl	800d008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d102      	bne.n	800b3c2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	60fb      	str	r3, [r7, #12]
 800b3c0:	e001      	b.n	800b3c6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3c6:	f001 fe51 	bl	800d06c <vPortExitCritical>

	return xReturn;
 800b3ca:	68fb      	ldr	r3, [r7, #12]
}
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	3710      	adds	r7, #16
 800b3d0:	46bd      	mov	sp, r7
 800b3d2:	bd80      	pop	{r7, pc}

0800b3d4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b3d4:	b580      	push	{r7, lr}
 800b3d6:	b084      	sub	sp, #16
 800b3d8:	af00      	add	r7, sp, #0
 800b3da:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b3dc:	f001 fe14 	bl	800d008 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d102      	bne.n	800b3f2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	60fb      	str	r3, [r7, #12]
 800b3f0:	e001      	b.n	800b3f6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b3f6:	f001 fe39 	bl	800d06c <vPortExitCritical>

	return xReturn;
 800b3fa:	68fb      	ldr	r3, [r7, #12]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3710      	adds	r7, #16
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}

0800b404 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b404:	b480      	push	{r7}
 800b406:	b085      	sub	sp, #20
 800b408:	af00      	add	r7, sp, #0
 800b40a:	6078      	str	r0, [r7, #4]
 800b40c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b40e:	2300      	movs	r3, #0
 800b410:	60fb      	str	r3, [r7, #12]
 800b412:	e014      	b.n	800b43e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b414:	4a0f      	ldr	r2, [pc, #60]	@ (800b454 <vQueueAddToRegistry+0x50>)
 800b416:	68fb      	ldr	r3, [r7, #12]
 800b418:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d10b      	bne.n	800b438 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b420:	490c      	ldr	r1, [pc, #48]	@ (800b454 <vQueueAddToRegistry+0x50>)
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	683a      	ldr	r2, [r7, #0]
 800b426:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b42a:	4a0a      	ldr	r2, [pc, #40]	@ (800b454 <vQueueAddToRegistry+0x50>)
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	00db      	lsls	r3, r3, #3
 800b430:	4413      	add	r3, r2
 800b432:	687a      	ldr	r2, [r7, #4]
 800b434:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b436:	e006      	b.n	800b446 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	3301      	adds	r3, #1
 800b43c:	60fb      	str	r3, [r7, #12]
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	2b07      	cmp	r3, #7
 800b442:	d9e7      	bls.n	800b414 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b444:	bf00      	nop
 800b446:	bf00      	nop
 800b448:	3714      	adds	r7, #20
 800b44a:	46bd      	mov	sp, r7
 800b44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b450:	4770      	bx	lr
 800b452:	bf00      	nop
 800b454:	20001520 	.word	0x20001520

0800b458 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b086      	sub	sp, #24
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	60f8      	str	r0, [r7, #12]
 800b460:	60b9      	str	r1, [r7, #8]
 800b462:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b468:	f001 fdce 	bl	800d008 <vPortEnterCritical>
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b472:	b25b      	sxtb	r3, r3
 800b474:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b478:	d103      	bne.n	800b482 <vQueueWaitForMessageRestricted+0x2a>
 800b47a:	697b      	ldr	r3, [r7, #20]
 800b47c:	2200      	movs	r2, #0
 800b47e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b488:	b25b      	sxtb	r3, r3
 800b48a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b48e:	d103      	bne.n	800b498 <vQueueWaitForMessageRestricted+0x40>
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	2200      	movs	r2, #0
 800b494:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b498:	f001 fde8 	bl	800d06c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b49c:	697b      	ldr	r3, [r7, #20]
 800b49e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d106      	bne.n	800b4b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	3324      	adds	r3, #36	@ 0x24
 800b4a8:	687a      	ldr	r2, [r7, #4]
 800b4aa:	68b9      	ldr	r1, [r7, #8]
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f000 fd67 	bl	800bf80 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b4b2:	6978      	ldr	r0, [r7, #20]
 800b4b4:	f7ff ff26 	bl	800b304 <prvUnlockQueue>
	}
 800b4b8:	bf00      	nop
 800b4ba:	3718      	adds	r7, #24
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	bd80      	pop	{r7, pc}

0800b4c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b08e      	sub	sp, #56	@ 0x38
 800b4c4:	af04      	add	r7, sp, #16
 800b4c6:	60f8      	str	r0, [r7, #12]
 800b4c8:	60b9      	str	r1, [r7, #8]
 800b4ca:	607a      	str	r2, [r7, #4]
 800b4cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b4ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d10b      	bne.n	800b4ec <xTaskCreateStatic+0x2c>
	__asm volatile
 800b4d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4d8:	f383 8811 	msr	BASEPRI, r3
 800b4dc:	f3bf 8f6f 	isb	sy
 800b4e0:	f3bf 8f4f 	dsb	sy
 800b4e4:	623b      	str	r3, [r7, #32]
}
 800b4e6:	bf00      	nop
 800b4e8:	bf00      	nop
 800b4ea:	e7fd      	b.n	800b4e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b4ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d10b      	bne.n	800b50a <xTaskCreateStatic+0x4a>
	__asm volatile
 800b4f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b4f6:	f383 8811 	msr	BASEPRI, r3
 800b4fa:	f3bf 8f6f 	isb	sy
 800b4fe:	f3bf 8f4f 	dsb	sy
 800b502:	61fb      	str	r3, [r7, #28]
}
 800b504:	bf00      	nop
 800b506:	bf00      	nop
 800b508:	e7fd      	b.n	800b506 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b50a:	23a8      	movs	r3, #168	@ 0xa8
 800b50c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	2ba8      	cmp	r3, #168	@ 0xa8
 800b512:	d00b      	beq.n	800b52c <xTaskCreateStatic+0x6c>
	__asm volatile
 800b514:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b518:	f383 8811 	msr	BASEPRI, r3
 800b51c:	f3bf 8f6f 	isb	sy
 800b520:	f3bf 8f4f 	dsb	sy
 800b524:	61bb      	str	r3, [r7, #24]
}
 800b526:	bf00      	nop
 800b528:	bf00      	nop
 800b52a:	e7fd      	b.n	800b528 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b52c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b52e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b530:	2b00      	cmp	r3, #0
 800b532:	d01e      	beq.n	800b572 <xTaskCreateStatic+0xb2>
 800b534:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b536:	2b00      	cmp	r3, #0
 800b538:	d01b      	beq.n	800b572 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b53a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b53c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b53e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b540:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b542:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b546:	2202      	movs	r2, #2
 800b548:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b54c:	2300      	movs	r3, #0
 800b54e:	9303      	str	r3, [sp, #12]
 800b550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b552:	9302      	str	r3, [sp, #8]
 800b554:	f107 0314 	add.w	r3, r7, #20
 800b558:	9301      	str	r3, [sp, #4]
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	9300      	str	r3, [sp, #0]
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	687a      	ldr	r2, [r7, #4]
 800b562:	68b9      	ldr	r1, [r7, #8]
 800b564:	68f8      	ldr	r0, [r7, #12]
 800b566:	f000 f851 	bl	800b60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b56a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b56c:	f000 f8f6 	bl	800b75c <prvAddNewTaskToReadyList>
 800b570:	e001      	b.n	800b576 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b572:	2300      	movs	r3, #0
 800b574:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b576:	697b      	ldr	r3, [r7, #20]
	}
 800b578:	4618      	mov	r0, r3
 800b57a:	3728      	adds	r7, #40	@ 0x28
 800b57c:	46bd      	mov	sp, r7
 800b57e:	bd80      	pop	{r7, pc}

0800b580 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b580:	b580      	push	{r7, lr}
 800b582:	b08c      	sub	sp, #48	@ 0x30
 800b584:	af04      	add	r7, sp, #16
 800b586:	60f8      	str	r0, [r7, #12]
 800b588:	60b9      	str	r1, [r7, #8]
 800b58a:	603b      	str	r3, [r7, #0]
 800b58c:	4613      	mov	r3, r2
 800b58e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b590:	88fb      	ldrh	r3, [r7, #6]
 800b592:	009b      	lsls	r3, r3, #2
 800b594:	4618      	mov	r0, r3
 800b596:	f001 fe59 	bl	800d24c <pvPortMalloc>
 800b59a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b59c:	697b      	ldr	r3, [r7, #20]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00e      	beq.n	800b5c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b5a2:	20a8      	movs	r0, #168	@ 0xa8
 800b5a4:	f001 fe52 	bl	800d24c <pvPortMalloc>
 800b5a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d003      	beq.n	800b5b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b5b0:	69fb      	ldr	r3, [r7, #28]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	631a      	str	r2, [r3, #48]	@ 0x30
 800b5b6:	e005      	b.n	800b5c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b5b8:	6978      	ldr	r0, [r7, #20]
 800b5ba:	f001 ff15 	bl	800d3e8 <vPortFree>
 800b5be:	e001      	b.n	800b5c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b5c0:	2300      	movs	r3, #0
 800b5c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b5c4:	69fb      	ldr	r3, [r7, #28]
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d017      	beq.n	800b5fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b5ca:	69fb      	ldr	r3, [r7, #28]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b5d2:	88fa      	ldrh	r2, [r7, #6]
 800b5d4:	2300      	movs	r3, #0
 800b5d6:	9303      	str	r3, [sp, #12]
 800b5d8:	69fb      	ldr	r3, [r7, #28]
 800b5da:	9302      	str	r3, [sp, #8]
 800b5dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b5de:	9301      	str	r3, [sp, #4]
 800b5e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b5e2:	9300      	str	r3, [sp, #0]
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	68b9      	ldr	r1, [r7, #8]
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	f000 f80f 	bl	800b60c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b5ee:	69f8      	ldr	r0, [r7, #28]
 800b5f0:	f000 f8b4 	bl	800b75c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	61bb      	str	r3, [r7, #24]
 800b5f8:	e002      	b.n	800b600 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b5fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b5fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b600:	69bb      	ldr	r3, [r7, #24]
	}
 800b602:	4618      	mov	r0, r3
 800b604:	3720      	adds	r7, #32
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}
	...

0800b60c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b088      	sub	sp, #32
 800b610:	af00      	add	r7, sp, #0
 800b612:	60f8      	str	r0, [r7, #12]
 800b614:	60b9      	str	r1, [r7, #8]
 800b616:	607a      	str	r2, [r7, #4]
 800b618:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b61a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b61c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	009b      	lsls	r3, r3, #2
 800b622:	461a      	mov	r2, r3
 800b624:	21a5      	movs	r1, #165	@ 0xa5
 800b626:	f002 fd37 	bl	800e098 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b62c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b634:	3b01      	subs	r3, #1
 800b636:	009b      	lsls	r3, r3, #2
 800b638:	4413      	add	r3, r2
 800b63a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b63c:	69bb      	ldr	r3, [r7, #24]
 800b63e:	f023 0307 	bic.w	r3, r3, #7
 800b642:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	f003 0307 	and.w	r3, r3, #7
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d00b      	beq.n	800b666 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b64e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b652:	f383 8811 	msr	BASEPRI, r3
 800b656:	f3bf 8f6f 	isb	sy
 800b65a:	f3bf 8f4f 	dsb	sy
 800b65e:	617b      	str	r3, [r7, #20]
}
 800b660:	bf00      	nop
 800b662:	bf00      	nop
 800b664:	e7fd      	b.n	800b662 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b666:	68bb      	ldr	r3, [r7, #8]
 800b668:	2b00      	cmp	r3, #0
 800b66a:	d01f      	beq.n	800b6ac <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b66c:	2300      	movs	r3, #0
 800b66e:	61fb      	str	r3, [r7, #28]
 800b670:	e012      	b.n	800b698 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b672:	68ba      	ldr	r2, [r7, #8]
 800b674:	69fb      	ldr	r3, [r7, #28]
 800b676:	4413      	add	r3, r2
 800b678:	7819      	ldrb	r1, [r3, #0]
 800b67a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	4413      	add	r3, r2
 800b680:	3334      	adds	r3, #52	@ 0x34
 800b682:	460a      	mov	r2, r1
 800b684:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b686:	68ba      	ldr	r2, [r7, #8]
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	4413      	add	r3, r2
 800b68c:	781b      	ldrb	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d006      	beq.n	800b6a0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b692:	69fb      	ldr	r3, [r7, #28]
 800b694:	3301      	adds	r3, #1
 800b696:	61fb      	str	r3, [r7, #28]
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	2b0f      	cmp	r3, #15
 800b69c:	d9e9      	bls.n	800b672 <prvInitialiseNewTask+0x66>
 800b69e:	e000      	b.n	800b6a2 <prvInitialiseNewTask+0x96>
			{
				break;
 800b6a0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b6a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6a4:	2200      	movs	r2, #0
 800b6a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b6aa:	e003      	b.n	800b6b4 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b6ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b6b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6b6:	2b37      	cmp	r3, #55	@ 0x37
 800b6b8:	d901      	bls.n	800b6be <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b6ba:	2337      	movs	r3, #55	@ 0x37
 800b6bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b6be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6c2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6c8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b6d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d2:	3304      	adds	r3, #4
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff f965 	bl	800a9a4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b6da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6dc:	3318      	adds	r3, #24
 800b6de:	4618      	mov	r0, r3
 800b6e0:	f7ff f960 	bl	800a9a4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b6e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b6ec:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b6f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6f8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fc:	2200      	movs	r2, #0
 800b6fe:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b704:	2200      	movs	r2, #0
 800b706:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b70a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b70c:	3354      	adds	r3, #84	@ 0x54
 800b70e:	224c      	movs	r2, #76	@ 0x4c
 800b710:	2100      	movs	r1, #0
 800b712:	4618      	mov	r0, r3
 800b714:	f002 fcc0 	bl	800e098 <memset>
 800b718:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b71a:	4a0d      	ldr	r2, [pc, #52]	@ (800b750 <prvInitialiseNewTask+0x144>)
 800b71c:	659a      	str	r2, [r3, #88]	@ 0x58
 800b71e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b720:	4a0c      	ldr	r2, [pc, #48]	@ (800b754 <prvInitialiseNewTask+0x148>)
 800b722:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b726:	4a0c      	ldr	r2, [pc, #48]	@ (800b758 <prvInitialiseNewTask+0x14c>)
 800b728:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	68f9      	ldr	r1, [r7, #12]
 800b72e:	69b8      	ldr	r0, [r7, #24]
 800b730:	f001 fb36 	bl	800cda0 <pxPortInitialiseStack>
 800b734:	4602      	mov	r2, r0
 800b736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b738:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b73a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b73c:	2b00      	cmp	r3, #0
 800b73e:	d002      	beq.n	800b746 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b744:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b746:	bf00      	nop
 800b748:	3720      	adds	r7, #32
 800b74a:	46bd      	mov	sp, r7
 800b74c:	bd80      	pop	{r7, pc}
 800b74e:	bf00      	nop
 800b750:	200057b4 	.word	0x200057b4
 800b754:	2000581c 	.word	0x2000581c
 800b758:	20005884 	.word	0x20005884

0800b75c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b75c:	b580      	push	{r7, lr}
 800b75e:	b082      	sub	sp, #8
 800b760:	af00      	add	r7, sp, #0
 800b762:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b764:	f001 fc50 	bl	800d008 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b768:	4b2d      	ldr	r3, [pc, #180]	@ (800b820 <prvAddNewTaskToReadyList+0xc4>)
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3301      	adds	r3, #1
 800b76e:	4a2c      	ldr	r2, [pc, #176]	@ (800b820 <prvAddNewTaskToReadyList+0xc4>)
 800b770:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b772:	4b2c      	ldr	r3, [pc, #176]	@ (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	2b00      	cmp	r3, #0
 800b778:	d109      	bne.n	800b78e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b77a:	4a2a      	ldr	r2, [pc, #168]	@ (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b780:	4b27      	ldr	r3, [pc, #156]	@ (800b820 <prvAddNewTaskToReadyList+0xc4>)
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	2b01      	cmp	r3, #1
 800b786:	d110      	bne.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b788:	f000 fd28 	bl	800c1dc <prvInitialiseTaskLists>
 800b78c:	e00d      	b.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b78e:	4b26      	ldr	r3, [pc, #152]	@ (800b828 <prvAddNewTaskToReadyList+0xcc>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d109      	bne.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b796:	4b23      	ldr	r3, [pc, #140]	@ (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d802      	bhi.n	800b7aa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b7a4:	4a1f      	ldr	r2, [pc, #124]	@ (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b7aa:	4b20      	ldr	r3, [pc, #128]	@ (800b82c <prvAddNewTaskToReadyList+0xd0>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3301      	adds	r3, #1
 800b7b0:	4a1e      	ldr	r2, [pc, #120]	@ (800b82c <prvAddNewTaskToReadyList+0xd0>)
 800b7b2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b7b4:	4b1d      	ldr	r3, [pc, #116]	@ (800b82c <prvAddNewTaskToReadyList+0xd0>)
 800b7b6:	681a      	ldr	r2, [r3, #0]
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7c0:	4b1b      	ldr	r3, [pc, #108]	@ (800b830 <prvAddNewTaskToReadyList+0xd4>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	429a      	cmp	r2, r3
 800b7c6:	d903      	bls.n	800b7d0 <prvAddNewTaskToReadyList+0x74>
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b7cc:	4a18      	ldr	r2, [pc, #96]	@ (800b830 <prvAddNewTaskToReadyList+0xd4>)
 800b7ce:	6013      	str	r3, [r2, #0]
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	4a15      	ldr	r2, [pc, #84]	@ (800b834 <prvAddNewTaskToReadyList+0xd8>)
 800b7de:	441a      	add	r2, r3
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	3304      	adds	r3, #4
 800b7e4:	4619      	mov	r1, r3
 800b7e6:	4610      	mov	r0, r2
 800b7e8:	f7ff f8e9 	bl	800a9be <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b7ec:	f001 fc3e 	bl	800d06c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b7f0:	4b0d      	ldr	r3, [pc, #52]	@ (800b828 <prvAddNewTaskToReadyList+0xcc>)
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d00e      	beq.n	800b816 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	@ (800b824 <prvAddNewTaskToReadyList+0xc8>)
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b802:	429a      	cmp	r2, r3
 800b804:	d207      	bcs.n	800b816 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b806:	4b0c      	ldr	r3, [pc, #48]	@ (800b838 <prvAddNewTaskToReadyList+0xdc>)
 800b808:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b80c:	601a      	str	r2, [r3, #0]
 800b80e:	f3bf 8f4f 	dsb	sy
 800b812:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b816:	bf00      	nop
 800b818:	3708      	adds	r7, #8
 800b81a:	46bd      	mov	sp, r7
 800b81c:	bd80      	pop	{r7, pc}
 800b81e:	bf00      	nop
 800b820:	20001a34 	.word	0x20001a34
 800b824:	20001560 	.word	0x20001560
 800b828:	20001a40 	.word	0x20001a40
 800b82c:	20001a50 	.word	0x20001a50
 800b830:	20001a3c 	.word	0x20001a3c
 800b834:	20001564 	.word	0x20001564
 800b838:	e000ed04 	.word	0xe000ed04

0800b83c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b83c:	b580      	push	{r7, lr}
 800b83e:	b084      	sub	sp, #16
 800b840:	af00      	add	r7, sp, #0
 800b842:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b844:	2300      	movs	r3, #0
 800b846:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d018      	beq.n	800b880 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b84e:	4b14      	ldr	r3, [pc, #80]	@ (800b8a0 <vTaskDelay+0x64>)
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d00b      	beq.n	800b86e <vTaskDelay+0x32>
	__asm volatile
 800b856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b85a:	f383 8811 	msr	BASEPRI, r3
 800b85e:	f3bf 8f6f 	isb	sy
 800b862:	f3bf 8f4f 	dsb	sy
 800b866:	60bb      	str	r3, [r7, #8]
}
 800b868:	bf00      	nop
 800b86a:	bf00      	nop
 800b86c:	e7fd      	b.n	800b86a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b86e:	f000 f88b 	bl	800b988 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b872:	2100      	movs	r1, #0
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	f000 fee5 	bl	800c644 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b87a:	f000 f893 	bl	800b9a4 <xTaskResumeAll>
 800b87e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	2b00      	cmp	r3, #0
 800b884:	d107      	bne.n	800b896 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b886:	4b07      	ldr	r3, [pc, #28]	@ (800b8a4 <vTaskDelay+0x68>)
 800b888:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b88c:	601a      	str	r2, [r3, #0]
 800b88e:	f3bf 8f4f 	dsb	sy
 800b892:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b896:	bf00      	nop
 800b898:	3710      	adds	r7, #16
 800b89a:	46bd      	mov	sp, r7
 800b89c:	bd80      	pop	{r7, pc}
 800b89e:	bf00      	nop
 800b8a0:	20001a5c 	.word	0x20001a5c
 800b8a4:	e000ed04 	.word	0xe000ed04

0800b8a8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b08a      	sub	sp, #40	@ 0x28
 800b8ac:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b8b2:	2300      	movs	r3, #0
 800b8b4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b8b6:	463a      	mov	r2, r7
 800b8b8:	1d39      	adds	r1, r7, #4
 800b8ba:	f107 0308 	add.w	r3, r7, #8
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7ff f81c 	bl	800a8fc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	68ba      	ldr	r2, [r7, #8]
 800b8ca:	9202      	str	r2, [sp, #8]
 800b8cc:	9301      	str	r3, [sp, #4]
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	9300      	str	r3, [sp, #0]
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	460a      	mov	r2, r1
 800b8d6:	4924      	ldr	r1, [pc, #144]	@ (800b968 <vTaskStartScheduler+0xc0>)
 800b8d8:	4824      	ldr	r0, [pc, #144]	@ (800b96c <vTaskStartScheduler+0xc4>)
 800b8da:	f7ff fdf1 	bl	800b4c0 <xTaskCreateStatic>
 800b8de:	4603      	mov	r3, r0
 800b8e0:	4a23      	ldr	r2, [pc, #140]	@ (800b970 <vTaskStartScheduler+0xc8>)
 800b8e2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b8e4:	4b22      	ldr	r3, [pc, #136]	@ (800b970 <vTaskStartScheduler+0xc8>)
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d002      	beq.n	800b8f2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b8ec:	2301      	movs	r3, #1
 800b8ee:	617b      	str	r3, [r7, #20]
 800b8f0:	e001      	b.n	800b8f6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	2b01      	cmp	r3, #1
 800b8fa:	d102      	bne.n	800b902 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b8fc:	f000 fef6 	bl	800c6ec <xTimerCreateTimerTask>
 800b900:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b902:	697b      	ldr	r3, [r7, #20]
 800b904:	2b01      	cmp	r3, #1
 800b906:	d11b      	bne.n	800b940 <vTaskStartScheduler+0x98>
	__asm volatile
 800b908:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b90c:	f383 8811 	msr	BASEPRI, r3
 800b910:	f3bf 8f6f 	isb	sy
 800b914:	f3bf 8f4f 	dsb	sy
 800b918:	613b      	str	r3, [r7, #16]
}
 800b91a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b91c:	4b15      	ldr	r3, [pc, #84]	@ (800b974 <vTaskStartScheduler+0xcc>)
 800b91e:	681b      	ldr	r3, [r3, #0]
 800b920:	3354      	adds	r3, #84	@ 0x54
 800b922:	4a15      	ldr	r2, [pc, #84]	@ (800b978 <vTaskStartScheduler+0xd0>)
 800b924:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b926:	4b15      	ldr	r3, [pc, #84]	@ (800b97c <vTaskStartScheduler+0xd4>)
 800b928:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b92c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b92e:	4b14      	ldr	r3, [pc, #80]	@ (800b980 <vTaskStartScheduler+0xd8>)
 800b930:	2201      	movs	r2, #1
 800b932:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b934:	4b13      	ldr	r3, [pc, #76]	@ (800b984 <vTaskStartScheduler+0xdc>)
 800b936:	2200      	movs	r2, #0
 800b938:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b93a:	f001 fac1 	bl	800cec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b93e:	e00f      	b.n	800b960 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b946:	d10b      	bne.n	800b960 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	60fb      	str	r3, [r7, #12]
}
 800b95a:	bf00      	nop
 800b95c:	bf00      	nop
 800b95e:	e7fd      	b.n	800b95c <vTaskStartScheduler+0xb4>
}
 800b960:	bf00      	nop
 800b962:	3718      	adds	r7, #24
 800b964:	46bd      	mov	sp, r7
 800b966:	bd80      	pop	{r7, pc}
 800b968:	080103c0 	.word	0x080103c0
 800b96c:	0800c1ad 	.word	0x0800c1ad
 800b970:	20001a58 	.word	0x20001a58
 800b974:	20001560 	.word	0x20001560
 800b978:	2000005c 	.word	0x2000005c
 800b97c:	20001a54 	.word	0x20001a54
 800b980:	20001a40 	.word	0x20001a40
 800b984:	20001a38 	.word	0x20001a38

0800b988 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b988:	b480      	push	{r7}
 800b98a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b98c:	4b04      	ldr	r3, [pc, #16]	@ (800b9a0 <vTaskSuspendAll+0x18>)
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	3301      	adds	r3, #1
 800b992:	4a03      	ldr	r2, [pc, #12]	@ (800b9a0 <vTaskSuspendAll+0x18>)
 800b994:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b996:	bf00      	nop
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr
 800b9a0:	20001a5c 	.word	0x20001a5c

0800b9a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b9a4:	b580      	push	{r7, lr}
 800b9a6:	b084      	sub	sp, #16
 800b9a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b9aa:	2300      	movs	r3, #0
 800b9ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b9ae:	2300      	movs	r3, #0
 800b9b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b9b2:	4b42      	ldr	r3, [pc, #264]	@ (800babc <xTaskResumeAll+0x118>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d10b      	bne.n	800b9d2 <xTaskResumeAll+0x2e>
	__asm volatile
 800b9ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b9be:	f383 8811 	msr	BASEPRI, r3
 800b9c2:	f3bf 8f6f 	isb	sy
 800b9c6:	f3bf 8f4f 	dsb	sy
 800b9ca:	603b      	str	r3, [r7, #0]
}
 800b9cc:	bf00      	nop
 800b9ce:	bf00      	nop
 800b9d0:	e7fd      	b.n	800b9ce <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b9d2:	f001 fb19 	bl	800d008 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b9d6:	4b39      	ldr	r3, [pc, #228]	@ (800babc <xTaskResumeAll+0x118>)
 800b9d8:	681b      	ldr	r3, [r3, #0]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	4a37      	ldr	r2, [pc, #220]	@ (800babc <xTaskResumeAll+0x118>)
 800b9de:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b9e0:	4b36      	ldr	r3, [pc, #216]	@ (800babc <xTaskResumeAll+0x118>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d162      	bne.n	800baae <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b9e8:	4b35      	ldr	r3, [pc, #212]	@ (800bac0 <xTaskResumeAll+0x11c>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d05e      	beq.n	800baae <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b9f0:	e02f      	b.n	800ba52 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b9f2:	4b34      	ldr	r3, [pc, #208]	@ (800bac4 <xTaskResumeAll+0x120>)
 800b9f4:	68db      	ldr	r3, [r3, #12]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	3318      	adds	r3, #24
 800b9fe:	4618      	mov	r0, r3
 800ba00:	f7ff f83a 	bl	800aa78 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba04:	68fb      	ldr	r3, [r7, #12]
 800ba06:	3304      	adds	r3, #4
 800ba08:	4618      	mov	r0, r3
 800ba0a:	f7ff f835 	bl	800aa78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba12:	4b2d      	ldr	r3, [pc, #180]	@ (800bac8 <xTaskResumeAll+0x124>)
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d903      	bls.n	800ba22 <xTaskResumeAll+0x7e>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba1e:	4a2a      	ldr	r2, [pc, #168]	@ (800bac8 <xTaskResumeAll+0x124>)
 800ba20:	6013      	str	r3, [r2, #0]
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba26:	4613      	mov	r3, r2
 800ba28:	009b      	lsls	r3, r3, #2
 800ba2a:	4413      	add	r3, r2
 800ba2c:	009b      	lsls	r3, r3, #2
 800ba2e:	4a27      	ldr	r2, [pc, #156]	@ (800bacc <xTaskResumeAll+0x128>)
 800ba30:	441a      	add	r2, r3
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	3304      	adds	r3, #4
 800ba36:	4619      	mov	r1, r3
 800ba38:	4610      	mov	r0, r2
 800ba3a:	f7fe ffc0 	bl	800a9be <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba42:	4b23      	ldr	r3, [pc, #140]	@ (800bad0 <xTaskResumeAll+0x12c>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d302      	bcc.n	800ba52 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800ba4c:	4b21      	ldr	r3, [pc, #132]	@ (800bad4 <xTaskResumeAll+0x130>)
 800ba4e:	2201      	movs	r2, #1
 800ba50:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ba52:	4b1c      	ldr	r3, [pc, #112]	@ (800bac4 <xTaskResumeAll+0x120>)
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1cb      	bne.n	800b9f2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ba5a:	68fb      	ldr	r3, [r7, #12]
 800ba5c:	2b00      	cmp	r3, #0
 800ba5e:	d001      	beq.n	800ba64 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ba60:	f000 fc60 	bl	800c324 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ba64:	4b1c      	ldr	r3, [pc, #112]	@ (800bad8 <xTaskResumeAll+0x134>)
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d010      	beq.n	800ba92 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ba70:	f000 f940 	bl	800bcf4 <xTaskIncrementTick>
 800ba74:	4603      	mov	r3, r0
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d002      	beq.n	800ba80 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800ba7a:	4b16      	ldr	r3, [pc, #88]	@ (800bad4 <xTaskResumeAll+0x130>)
 800ba7c:	2201      	movs	r2, #1
 800ba7e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	3b01      	subs	r3, #1
 800ba84:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d1f1      	bne.n	800ba70 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800ba8c:	4b12      	ldr	r3, [pc, #72]	@ (800bad8 <xTaskResumeAll+0x134>)
 800ba8e:	2200      	movs	r2, #0
 800ba90:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ba92:	4b10      	ldr	r3, [pc, #64]	@ (800bad4 <xTaskResumeAll+0x130>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d009      	beq.n	800baae <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ba9e:	4b0f      	ldr	r3, [pc, #60]	@ (800badc <xTaskResumeAll+0x138>)
 800baa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800baa4:	601a      	str	r2, [r3, #0]
 800baa6:	f3bf 8f4f 	dsb	sy
 800baaa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800baae:	f001 fadd 	bl	800d06c <vPortExitCritical>

	return xAlreadyYielded;
 800bab2:	68bb      	ldr	r3, [r7, #8]
}
 800bab4:	4618      	mov	r0, r3
 800bab6:	3710      	adds	r7, #16
 800bab8:	46bd      	mov	sp, r7
 800baba:	bd80      	pop	{r7, pc}
 800babc:	20001a5c 	.word	0x20001a5c
 800bac0:	20001a34 	.word	0x20001a34
 800bac4:	200019f4 	.word	0x200019f4
 800bac8:	20001a3c 	.word	0x20001a3c
 800bacc:	20001564 	.word	0x20001564
 800bad0:	20001560 	.word	0x20001560
 800bad4:	20001a48 	.word	0x20001a48
 800bad8:	20001a44 	.word	0x20001a44
 800badc:	e000ed04 	.word	0xe000ed04

0800bae0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800bae6:	4b05      	ldr	r3, [pc, #20]	@ (800bafc <xTaskGetTickCount+0x1c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800baec:	687b      	ldr	r3, [r7, #4]
}
 800baee:	4618      	mov	r0, r3
 800baf0:	370c      	adds	r7, #12
 800baf2:	46bd      	mov	sp, r7
 800baf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baf8:	4770      	bx	lr
 800bafa:	bf00      	nop
 800bafc:	20001a38 	.word	0x20001a38

0800bb00 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800bb00:	b480      	push	{r7}
 800bb02:	b085      	sub	sp, #20
 800bb04:	af00      	add	r7, sp, #0
 800bb06:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	d102      	bne.n	800bb14 <pcTaskGetName+0x14>
 800bb0e:	4b0e      	ldr	r3, [pc, #56]	@ (800bb48 <pcTaskGetName+0x48>)
 800bb10:	681b      	ldr	r3, [r3, #0]
 800bb12:	e000      	b.n	800bb16 <pcTaskGetName+0x16>
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d10b      	bne.n	800bb36 <pcTaskGetName+0x36>
	__asm volatile
 800bb1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb22:	f383 8811 	msr	BASEPRI, r3
 800bb26:	f3bf 8f6f 	isb	sy
 800bb2a:	f3bf 8f4f 	dsb	sy
 800bb2e:	60bb      	str	r3, [r7, #8]
}
 800bb30:	bf00      	nop
 800bb32:	bf00      	nop
 800bb34:	e7fd      	b.n	800bb32 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	3334      	adds	r3, #52	@ 0x34
}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3714      	adds	r7, #20
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	20001560 	.word	0x20001560

0800bb4c <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b08b      	sub	sp, #44	@ 0x2c
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800bb56:	2300      	movs	r3, #0
 800bb58:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d05b      	beq.n	800bc1a <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	61bb      	str	r3, [r7, #24]
 800bb66:	69bb      	ldr	r3, [r7, #24]
 800bb68:	685b      	ldr	r3, [r3, #4]
 800bb6a:	685a      	ldr	r2, [r3, #4]
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	605a      	str	r2, [r3, #4]
 800bb70:	69bb      	ldr	r3, [r7, #24]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	69bb      	ldr	r3, [r7, #24]
 800bb76:	3308      	adds	r3, #8
 800bb78:	429a      	cmp	r2, r3
 800bb7a:	d104      	bne.n	800bb86 <prvSearchForNameWithinSingleList+0x3a>
 800bb7c:	69bb      	ldr	r3, [r7, #24]
 800bb7e:	685b      	ldr	r3, [r3, #4]
 800bb80:	685a      	ldr	r2, [r3, #4]
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	605a      	str	r2, [r3, #4]
 800bb86:	69bb      	ldr	r3, [r7, #24]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	68db      	ldr	r3, [r3, #12]
 800bb8c:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	613b      	str	r3, [r7, #16]
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	685b      	ldr	r3, [r3, #4]
 800bb96:	685a      	ldr	r2, [r3, #4]
 800bb98:	693b      	ldr	r3, [r7, #16]
 800bb9a:	605a      	str	r2, [r3, #4]
 800bb9c:	693b      	ldr	r3, [r7, #16]
 800bb9e:	685a      	ldr	r2, [r3, #4]
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	3308      	adds	r3, #8
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d104      	bne.n	800bbb2 <prvSearchForNameWithinSingleList+0x66>
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	685b      	ldr	r3, [r3, #4]
 800bbac:	685a      	ldr	r2, [r3, #4]
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	605a      	str	r2, [r3, #4]
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	685b      	ldr	r3, [r3, #4]
 800bbb6:	68db      	ldr	r3, [r3, #12]
 800bbb8:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800bbba:	2300      	movs	r3, #0
 800bbbc:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	623b      	str	r3, [r7, #32]
 800bbc2:	e01c      	b.n	800bbfe <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800bbc4:	68fa      	ldr	r2, [r7, #12]
 800bbc6:	6a3b      	ldr	r3, [r7, #32]
 800bbc8:	4413      	add	r3, r2
 800bbca:	3334      	adds	r3, #52	@ 0x34
 800bbcc:	781b      	ldrb	r3, [r3, #0]
 800bbce:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800bbd0:	683a      	ldr	r2, [r7, #0]
 800bbd2:	6a3b      	ldr	r3, [r7, #32]
 800bbd4:	4413      	add	r3, r2
 800bbd6:	781b      	ldrb	r3, [r3, #0]
 800bbd8:	7afa      	ldrb	r2, [r7, #11]
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d002      	beq.n	800bbe4 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	61fb      	str	r3, [r7, #28]
 800bbe2:	e006      	b.n	800bbf2 <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800bbe4:	7afb      	ldrb	r3, [r7, #11]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d103      	bne.n	800bbf2 <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800bbea:	68fb      	ldr	r3, [r7, #12]
 800bbec:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800bbee:	2301      	movs	r3, #1
 800bbf0:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800bbf2:	69fb      	ldr	r3, [r7, #28]
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	d106      	bne.n	800bc06 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800bbf8:	6a3b      	ldr	r3, [r7, #32]
 800bbfa:	3301      	adds	r3, #1
 800bbfc:	623b      	str	r3, [r7, #32]
 800bbfe:	6a3b      	ldr	r3, [r7, #32]
 800bc00:	2b0f      	cmp	r3, #15
 800bc02:	d9df      	bls.n	800bbc4 <prvSearchForNameWithinSingleList+0x78>
 800bc04:	e000      	b.n	800bc08 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800bc06:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800bc08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d104      	bne.n	800bc18 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800bc0e:	68fa      	ldr	r2, [r7, #12]
 800bc10:	697b      	ldr	r3, [r7, #20]
 800bc12:	429a      	cmp	r2, r3
 800bc14:	d1bb      	bne.n	800bb8e <prvSearchForNameWithinSingleList+0x42>
 800bc16:	e000      	b.n	800bc1a <prvSearchForNameWithinSingleList+0xce>
					break;
 800bc18:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800bc1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	372c      	adds	r7, #44	@ 0x2c
 800bc20:	46bd      	mov	sp, r7
 800bc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc26:	4770      	bx	lr

0800bc28 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b086      	sub	sp, #24
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800bc30:	2338      	movs	r3, #56	@ 0x38
 800bc32:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800bc34:	6878      	ldr	r0, [r7, #4]
 800bc36:	f7f4 fb1b 	bl	8000270 <strlen>
 800bc3a:	4603      	mov	r3, r0
 800bc3c:	2b0f      	cmp	r3, #15
 800bc3e:	d90b      	bls.n	800bc58 <xTaskGetHandle+0x30>
	__asm volatile
 800bc40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc44:	f383 8811 	msr	BASEPRI, r3
 800bc48:	f3bf 8f6f 	isb	sy
 800bc4c:	f3bf 8f4f 	dsb	sy
 800bc50:	60fb      	str	r3, [r7, #12]
}
 800bc52:	bf00      	nop
 800bc54:	bf00      	nop
 800bc56:	e7fd      	b.n	800bc54 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800bc58:	f7ff fe96 	bl	800b988 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	3b01      	subs	r3, #1
 800bc60:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800bc62:	697a      	ldr	r2, [r7, #20]
 800bc64:	4613      	mov	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	4413      	add	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4a1c      	ldr	r2, [pc, #112]	@ (800bce0 <xTaskGetHandle+0xb8>)
 800bc6e:	4413      	add	r3, r2
 800bc70:	6879      	ldr	r1, [r7, #4]
 800bc72:	4618      	mov	r0, r3
 800bc74:	f7ff ff6a 	bl	800bb4c <prvSearchForNameWithinSingleList>
 800bc78:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800bc7a:	693b      	ldr	r3, [r7, #16]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d103      	bne.n	800bc88 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc80:	697b      	ldr	r3, [r7, #20]
 800bc82:	2b00      	cmp	r3, #0
 800bc84:	d1ea      	bne.n	800bc5c <xTaskGetHandle+0x34>
 800bc86:	e000      	b.n	800bc8a <xTaskGetHandle+0x62>
					break;
 800bc88:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800bc8a:	693b      	ldr	r3, [r7, #16]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d106      	bne.n	800bc9e <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800bc90:	4b14      	ldr	r3, [pc, #80]	@ (800bce4 <xTaskGetHandle+0xbc>)
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	6879      	ldr	r1, [r7, #4]
 800bc96:	4618      	mov	r0, r3
 800bc98:	f7ff ff58 	bl	800bb4c <prvSearchForNameWithinSingleList>
 800bc9c:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800bc9e:	693b      	ldr	r3, [r7, #16]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d106      	bne.n	800bcb2 <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800bca4:	4b10      	ldr	r3, [pc, #64]	@ (800bce8 <xTaskGetHandle+0xc0>)
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	6879      	ldr	r1, [r7, #4]
 800bcaa:	4618      	mov	r0, r3
 800bcac:	f7ff ff4e 	bl	800bb4c <prvSearchForNameWithinSingleList>
 800bcb0:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800bcb2:	693b      	ldr	r3, [r7, #16]
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d104      	bne.n	800bcc2 <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800bcb8:	6879      	ldr	r1, [r7, #4]
 800bcba:	480c      	ldr	r0, [pc, #48]	@ (800bcec <xTaskGetHandle+0xc4>)
 800bcbc:	f7ff ff46 	bl	800bb4c <prvSearchForNameWithinSingleList>
 800bcc0:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800bcc2:	693b      	ldr	r3, [r7, #16]
 800bcc4:	2b00      	cmp	r3, #0
 800bcc6:	d104      	bne.n	800bcd2 <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800bcc8:	6879      	ldr	r1, [r7, #4]
 800bcca:	4809      	ldr	r0, [pc, #36]	@ (800bcf0 <xTaskGetHandle+0xc8>)
 800bccc:	f7ff ff3e 	bl	800bb4c <prvSearchForNameWithinSingleList>
 800bcd0:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800bcd2:	f7ff fe67 	bl	800b9a4 <xTaskResumeAll>

		return pxTCB;
 800bcd6:	693b      	ldr	r3, [r7, #16]
	}
 800bcd8:	4618      	mov	r0, r3
 800bcda:	3718      	adds	r7, #24
 800bcdc:	46bd      	mov	sp, r7
 800bcde:	bd80      	pop	{r7, pc}
 800bce0:	20001564 	.word	0x20001564
 800bce4:	200019ec 	.word	0x200019ec
 800bce8:	200019f0 	.word	0x200019f0
 800bcec:	20001a20 	.word	0x20001a20
 800bcf0:	20001a08 	.word	0x20001a08

0800bcf4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800bcf4:	b580      	push	{r7, lr}
 800bcf6:	b086      	sub	sp, #24
 800bcf8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bcfe:	4b4f      	ldr	r3, [pc, #316]	@ (800be3c <xTaskIncrementTick+0x148>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	f040 8090 	bne.w	800be28 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800bd08:	4b4d      	ldr	r3, [pc, #308]	@ (800be40 <xTaskIncrementTick+0x14c>)
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800bd10:	4a4b      	ldr	r2, [pc, #300]	@ (800be40 <xTaskIncrementTick+0x14c>)
 800bd12:	693b      	ldr	r3, [r7, #16]
 800bd14:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d121      	bne.n	800bd60 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800bd1c:	4b49      	ldr	r3, [pc, #292]	@ (800be44 <xTaskIncrementTick+0x150>)
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d00b      	beq.n	800bd3e <xTaskIncrementTick+0x4a>
	__asm volatile
 800bd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd2a:	f383 8811 	msr	BASEPRI, r3
 800bd2e:	f3bf 8f6f 	isb	sy
 800bd32:	f3bf 8f4f 	dsb	sy
 800bd36:	603b      	str	r3, [r7, #0]
}
 800bd38:	bf00      	nop
 800bd3a:	bf00      	nop
 800bd3c:	e7fd      	b.n	800bd3a <xTaskIncrementTick+0x46>
 800bd3e:	4b41      	ldr	r3, [pc, #260]	@ (800be44 <xTaskIncrementTick+0x150>)
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	60fb      	str	r3, [r7, #12]
 800bd44:	4b40      	ldr	r3, [pc, #256]	@ (800be48 <xTaskIncrementTick+0x154>)
 800bd46:	681b      	ldr	r3, [r3, #0]
 800bd48:	4a3e      	ldr	r2, [pc, #248]	@ (800be44 <xTaskIncrementTick+0x150>)
 800bd4a:	6013      	str	r3, [r2, #0]
 800bd4c:	4a3e      	ldr	r2, [pc, #248]	@ (800be48 <xTaskIncrementTick+0x154>)
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	6013      	str	r3, [r2, #0]
 800bd52:	4b3e      	ldr	r3, [pc, #248]	@ (800be4c <xTaskIncrementTick+0x158>)
 800bd54:	681b      	ldr	r3, [r3, #0]
 800bd56:	3301      	adds	r3, #1
 800bd58:	4a3c      	ldr	r2, [pc, #240]	@ (800be4c <xTaskIncrementTick+0x158>)
 800bd5a:	6013      	str	r3, [r2, #0]
 800bd5c:	f000 fae2 	bl	800c324 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800bd60:	4b3b      	ldr	r3, [pc, #236]	@ (800be50 <xTaskIncrementTick+0x15c>)
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	429a      	cmp	r2, r3
 800bd68:	d349      	bcc.n	800bdfe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bd6a:	4b36      	ldr	r3, [pc, #216]	@ (800be44 <xTaskIncrementTick+0x150>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d104      	bne.n	800bd7e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd74:	4b36      	ldr	r3, [pc, #216]	@ (800be50 <xTaskIncrementTick+0x15c>)
 800bd76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bd7a:	601a      	str	r2, [r3, #0]
					break;
 800bd7c:	e03f      	b.n	800bdfe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd7e:	4b31      	ldr	r3, [pc, #196]	@ (800be44 <xTaskIncrementTick+0x150>)
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68db      	ldr	r3, [r3, #12]
 800bd84:	68db      	ldr	r3, [r3, #12]
 800bd86:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	685b      	ldr	r3, [r3, #4]
 800bd8c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bd8e:	693a      	ldr	r2, [r7, #16]
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	429a      	cmp	r2, r3
 800bd94:	d203      	bcs.n	800bd9e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bd96:	4a2e      	ldr	r2, [pc, #184]	@ (800be50 <xTaskIncrementTick+0x15c>)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bd9c:	e02f      	b.n	800bdfe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	3304      	adds	r3, #4
 800bda2:	4618      	mov	r0, r3
 800bda4:	f7fe fe68 	bl	800aa78 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800bda8:	68bb      	ldr	r3, [r7, #8]
 800bdaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d004      	beq.n	800bdba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	3318      	adds	r3, #24
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	f7fe fe5f 	bl	800aa78 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bdba:	68bb      	ldr	r3, [r7, #8]
 800bdbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdbe:	4b25      	ldr	r3, [pc, #148]	@ (800be54 <xTaskIncrementTick+0x160>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	429a      	cmp	r2, r3
 800bdc4:	d903      	bls.n	800bdce <xTaskIncrementTick+0xda>
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdca:	4a22      	ldr	r2, [pc, #136]	@ (800be54 <xTaskIncrementTick+0x160>)
 800bdcc:	6013      	str	r3, [r2, #0]
 800bdce:	68bb      	ldr	r3, [r7, #8]
 800bdd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdd2:	4613      	mov	r3, r2
 800bdd4:	009b      	lsls	r3, r3, #2
 800bdd6:	4413      	add	r3, r2
 800bdd8:	009b      	lsls	r3, r3, #2
 800bdda:	4a1f      	ldr	r2, [pc, #124]	@ (800be58 <xTaskIncrementTick+0x164>)
 800bddc:	441a      	add	r2, r3
 800bdde:	68bb      	ldr	r3, [r7, #8]
 800bde0:	3304      	adds	r3, #4
 800bde2:	4619      	mov	r1, r3
 800bde4:	4610      	mov	r0, r2
 800bde6:	f7fe fdea 	bl	800a9be <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdee:	4b1b      	ldr	r3, [pc, #108]	@ (800be5c <xTaskIncrementTick+0x168>)
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d3b8      	bcc.n	800bd6a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bdfc:	e7b5      	b.n	800bd6a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bdfe:	4b17      	ldr	r3, [pc, #92]	@ (800be5c <xTaskIncrementTick+0x168>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800be04:	4914      	ldr	r1, [pc, #80]	@ (800be58 <xTaskIncrementTick+0x164>)
 800be06:	4613      	mov	r3, r2
 800be08:	009b      	lsls	r3, r3, #2
 800be0a:	4413      	add	r3, r2
 800be0c:	009b      	lsls	r3, r3, #2
 800be0e:	440b      	add	r3, r1
 800be10:	681b      	ldr	r3, [r3, #0]
 800be12:	2b01      	cmp	r3, #1
 800be14:	d901      	bls.n	800be1a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800be16:	2301      	movs	r3, #1
 800be18:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800be1a:	4b11      	ldr	r3, [pc, #68]	@ (800be60 <xTaskIncrementTick+0x16c>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d007      	beq.n	800be32 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800be22:	2301      	movs	r3, #1
 800be24:	617b      	str	r3, [r7, #20]
 800be26:	e004      	b.n	800be32 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800be28:	4b0e      	ldr	r3, [pc, #56]	@ (800be64 <xTaskIncrementTick+0x170>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	3301      	adds	r3, #1
 800be2e:	4a0d      	ldr	r2, [pc, #52]	@ (800be64 <xTaskIncrementTick+0x170>)
 800be30:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800be32:	697b      	ldr	r3, [r7, #20]
}
 800be34:	4618      	mov	r0, r3
 800be36:	3718      	adds	r7, #24
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}
 800be3c:	20001a5c 	.word	0x20001a5c
 800be40:	20001a38 	.word	0x20001a38
 800be44:	200019ec 	.word	0x200019ec
 800be48:	200019f0 	.word	0x200019f0
 800be4c:	20001a4c 	.word	0x20001a4c
 800be50:	20001a54 	.word	0x20001a54
 800be54:	20001a3c 	.word	0x20001a3c
 800be58:	20001564 	.word	0x20001564
 800be5c:	20001560 	.word	0x20001560
 800be60:	20001a48 	.word	0x20001a48
 800be64:	20001a44 	.word	0x20001a44

0800be68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800be68:	b480      	push	{r7}
 800be6a:	b085      	sub	sp, #20
 800be6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800be6e:	4b2b      	ldr	r3, [pc, #172]	@ (800bf1c <vTaskSwitchContext+0xb4>)
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2b00      	cmp	r3, #0
 800be74:	d003      	beq.n	800be7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800be76:	4b2a      	ldr	r3, [pc, #168]	@ (800bf20 <vTaskSwitchContext+0xb8>)
 800be78:	2201      	movs	r2, #1
 800be7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800be7c:	e047      	b.n	800bf0e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800be7e:	4b28      	ldr	r3, [pc, #160]	@ (800bf20 <vTaskSwitchContext+0xb8>)
 800be80:	2200      	movs	r2, #0
 800be82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be84:	4b27      	ldr	r3, [pc, #156]	@ (800bf24 <vTaskSwitchContext+0xbc>)
 800be86:	681b      	ldr	r3, [r3, #0]
 800be88:	60fb      	str	r3, [r7, #12]
 800be8a:	e011      	b.n	800beb0 <vTaskSwitchContext+0x48>
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d10b      	bne.n	800beaa <vTaskSwitchContext+0x42>
	__asm volatile
 800be92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be96:	f383 8811 	msr	BASEPRI, r3
 800be9a:	f3bf 8f6f 	isb	sy
 800be9e:	f3bf 8f4f 	dsb	sy
 800bea2:	607b      	str	r3, [r7, #4]
}
 800bea4:	bf00      	nop
 800bea6:	bf00      	nop
 800bea8:	e7fd      	b.n	800bea6 <vTaskSwitchContext+0x3e>
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	3b01      	subs	r3, #1
 800beae:	60fb      	str	r3, [r7, #12]
 800beb0:	491d      	ldr	r1, [pc, #116]	@ (800bf28 <vTaskSwitchContext+0xc0>)
 800beb2:	68fa      	ldr	r2, [r7, #12]
 800beb4:	4613      	mov	r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	4413      	add	r3, r2
 800beba:	009b      	lsls	r3, r3, #2
 800bebc:	440b      	add	r3, r1
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d0e3      	beq.n	800be8c <vTaskSwitchContext+0x24>
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	4613      	mov	r3, r2
 800bec8:	009b      	lsls	r3, r3, #2
 800beca:	4413      	add	r3, r2
 800becc:	009b      	lsls	r3, r3, #2
 800bece:	4a16      	ldr	r2, [pc, #88]	@ (800bf28 <vTaskSwitchContext+0xc0>)
 800bed0:	4413      	add	r3, r2
 800bed2:	60bb      	str	r3, [r7, #8]
 800bed4:	68bb      	ldr	r3, [r7, #8]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	685a      	ldr	r2, [r3, #4]
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	605a      	str	r2, [r3, #4]
 800bede:	68bb      	ldr	r3, [r7, #8]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	3308      	adds	r3, #8
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d104      	bne.n	800bef4 <vTaskSwitchContext+0x8c>
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	685b      	ldr	r3, [r3, #4]
 800beee:	685a      	ldr	r2, [r3, #4]
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	605a      	str	r2, [r3, #4]
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	685b      	ldr	r3, [r3, #4]
 800bef8:	68db      	ldr	r3, [r3, #12]
 800befa:	4a0c      	ldr	r2, [pc, #48]	@ (800bf2c <vTaskSwitchContext+0xc4>)
 800befc:	6013      	str	r3, [r2, #0]
 800befe:	4a09      	ldr	r2, [pc, #36]	@ (800bf24 <vTaskSwitchContext+0xbc>)
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bf04:	4b09      	ldr	r3, [pc, #36]	@ (800bf2c <vTaskSwitchContext+0xc4>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	3354      	adds	r3, #84	@ 0x54
 800bf0a:	4a09      	ldr	r2, [pc, #36]	@ (800bf30 <vTaskSwitchContext+0xc8>)
 800bf0c:	6013      	str	r3, [r2, #0]
}
 800bf0e:	bf00      	nop
 800bf10:	3714      	adds	r7, #20
 800bf12:	46bd      	mov	sp, r7
 800bf14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf18:	4770      	bx	lr
 800bf1a:	bf00      	nop
 800bf1c:	20001a5c 	.word	0x20001a5c
 800bf20:	20001a48 	.word	0x20001a48
 800bf24:	20001a3c 	.word	0x20001a3c
 800bf28:	20001564 	.word	0x20001564
 800bf2c:	20001560 	.word	0x20001560
 800bf30:	2000005c 	.word	0x2000005c

0800bf34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bf34:	b580      	push	{r7, lr}
 800bf36:	b084      	sub	sp, #16
 800bf38:	af00      	add	r7, sp, #0
 800bf3a:	6078      	str	r0, [r7, #4]
 800bf3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	2b00      	cmp	r3, #0
 800bf42:	d10b      	bne.n	800bf5c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bf44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	60fb      	str	r3, [r7, #12]
}
 800bf56:	bf00      	nop
 800bf58:	bf00      	nop
 800bf5a:	e7fd      	b.n	800bf58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bf5c:	4b07      	ldr	r3, [pc, #28]	@ (800bf7c <vTaskPlaceOnEventList+0x48>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	3318      	adds	r3, #24
 800bf62:	4619      	mov	r1, r3
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f7fe fd4e 	bl	800aa06 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bf6a:	2101      	movs	r1, #1
 800bf6c:	6838      	ldr	r0, [r7, #0]
 800bf6e:	f000 fb69 	bl	800c644 <prvAddCurrentTaskToDelayedList>
}
 800bf72:	bf00      	nop
 800bf74:	3710      	adds	r7, #16
 800bf76:	46bd      	mov	sp, r7
 800bf78:	bd80      	pop	{r7, pc}
 800bf7a:	bf00      	nop
 800bf7c:	20001560 	.word	0x20001560

0800bf80 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	60f8      	str	r0, [r7, #12]
 800bf88:	60b9      	str	r1, [r7, #8]
 800bf8a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	2b00      	cmp	r3, #0
 800bf90:	d10b      	bne.n	800bfaa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	617b      	str	r3, [r7, #20]
}
 800bfa4:	bf00      	nop
 800bfa6:	bf00      	nop
 800bfa8:	e7fd      	b.n	800bfa6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bfaa:	4b0a      	ldr	r3, [pc, #40]	@ (800bfd4 <vTaskPlaceOnEventListRestricted+0x54>)
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	3318      	adds	r3, #24
 800bfb0:	4619      	mov	r1, r3
 800bfb2:	68f8      	ldr	r0, [r7, #12]
 800bfb4:	f7fe fd03 	bl	800a9be <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d002      	beq.n	800bfc4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bfbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bfc2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bfc4:	6879      	ldr	r1, [r7, #4]
 800bfc6:	68b8      	ldr	r0, [r7, #8]
 800bfc8:	f000 fb3c 	bl	800c644 <prvAddCurrentTaskToDelayedList>
	}
 800bfcc:	bf00      	nop
 800bfce:	3718      	adds	r7, #24
 800bfd0:	46bd      	mov	sp, r7
 800bfd2:	bd80      	pop	{r7, pc}
 800bfd4:	20001560 	.word	0x20001560

0800bfd8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bfd8:	b580      	push	{r7, lr}
 800bfda:	b086      	sub	sp, #24
 800bfdc:	af00      	add	r7, sp, #0
 800bfde:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	68db      	ldr	r3, [r3, #12]
 800bfe6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bfe8:	693b      	ldr	r3, [r7, #16]
 800bfea:	2b00      	cmp	r3, #0
 800bfec:	d10b      	bne.n	800c006 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bfee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bff2:	f383 8811 	msr	BASEPRI, r3
 800bff6:	f3bf 8f6f 	isb	sy
 800bffa:	f3bf 8f4f 	dsb	sy
 800bffe:	60fb      	str	r3, [r7, #12]
}
 800c000:	bf00      	nop
 800c002:	bf00      	nop
 800c004:	e7fd      	b.n	800c002 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800c006:	693b      	ldr	r3, [r7, #16]
 800c008:	3318      	adds	r3, #24
 800c00a:	4618      	mov	r0, r3
 800c00c:	f7fe fd34 	bl	800aa78 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c010:	4b1d      	ldr	r3, [pc, #116]	@ (800c088 <xTaskRemoveFromEventList+0xb0>)
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2b00      	cmp	r3, #0
 800c016:	d11d      	bne.n	800c054 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	3304      	adds	r3, #4
 800c01c:	4618      	mov	r0, r3
 800c01e:	f7fe fd2b 	bl	800aa78 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800c022:	693b      	ldr	r3, [r7, #16]
 800c024:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c026:	4b19      	ldr	r3, [pc, #100]	@ (800c08c <xTaskRemoveFromEventList+0xb4>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	429a      	cmp	r2, r3
 800c02c:	d903      	bls.n	800c036 <xTaskRemoveFromEventList+0x5e>
 800c02e:	693b      	ldr	r3, [r7, #16]
 800c030:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c032:	4a16      	ldr	r2, [pc, #88]	@ (800c08c <xTaskRemoveFromEventList+0xb4>)
 800c034:	6013      	str	r3, [r2, #0]
 800c036:	693b      	ldr	r3, [r7, #16]
 800c038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c03a:	4613      	mov	r3, r2
 800c03c:	009b      	lsls	r3, r3, #2
 800c03e:	4413      	add	r3, r2
 800c040:	009b      	lsls	r3, r3, #2
 800c042:	4a13      	ldr	r2, [pc, #76]	@ (800c090 <xTaskRemoveFromEventList+0xb8>)
 800c044:	441a      	add	r2, r3
 800c046:	693b      	ldr	r3, [r7, #16]
 800c048:	3304      	adds	r3, #4
 800c04a:	4619      	mov	r1, r3
 800c04c:	4610      	mov	r0, r2
 800c04e:	f7fe fcb6 	bl	800a9be <vListInsertEnd>
 800c052:	e005      	b.n	800c060 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800c054:	693b      	ldr	r3, [r7, #16]
 800c056:	3318      	adds	r3, #24
 800c058:	4619      	mov	r1, r3
 800c05a:	480e      	ldr	r0, [pc, #56]	@ (800c094 <xTaskRemoveFromEventList+0xbc>)
 800c05c:	f7fe fcaf 	bl	800a9be <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c060:	693b      	ldr	r3, [r7, #16]
 800c062:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c064:	4b0c      	ldr	r3, [pc, #48]	@ (800c098 <xTaskRemoveFromEventList+0xc0>)
 800c066:	681b      	ldr	r3, [r3, #0]
 800c068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c06a:	429a      	cmp	r2, r3
 800c06c:	d905      	bls.n	800c07a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800c06e:	2301      	movs	r3, #1
 800c070:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800c072:	4b0a      	ldr	r3, [pc, #40]	@ (800c09c <xTaskRemoveFromEventList+0xc4>)
 800c074:	2201      	movs	r2, #1
 800c076:	601a      	str	r2, [r3, #0]
 800c078:	e001      	b.n	800c07e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800c07a:	2300      	movs	r3, #0
 800c07c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800c07e:	697b      	ldr	r3, [r7, #20]
}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}
 800c088:	20001a5c 	.word	0x20001a5c
 800c08c:	20001a3c 	.word	0x20001a3c
 800c090:	20001564 	.word	0x20001564
 800c094:	200019f4 	.word	0x200019f4
 800c098:	20001560 	.word	0x20001560
 800c09c:	20001a48 	.word	0x20001a48

0800c0a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800c0a0:	b480      	push	{r7}
 800c0a2:	b083      	sub	sp, #12
 800c0a4:	af00      	add	r7, sp, #0
 800c0a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800c0a8:	4b06      	ldr	r3, [pc, #24]	@ (800c0c4 <vTaskInternalSetTimeOutState+0x24>)
 800c0aa:	681a      	ldr	r2, [r3, #0]
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800c0b0:	4b05      	ldr	r3, [pc, #20]	@ (800c0c8 <vTaskInternalSetTimeOutState+0x28>)
 800c0b2:	681a      	ldr	r2, [r3, #0]
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	605a      	str	r2, [r3, #4]
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr
 800c0c4:	20001a4c 	.word	0x20001a4c
 800c0c8:	20001a38 	.word	0x20001a38

0800c0cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800c0cc:	b580      	push	{r7, lr}
 800c0ce:	b088      	sub	sp, #32
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	6078      	str	r0, [r7, #4]
 800c0d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d10b      	bne.n	800c0f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800c0dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0e0:	f383 8811 	msr	BASEPRI, r3
 800c0e4:	f3bf 8f6f 	isb	sy
 800c0e8:	f3bf 8f4f 	dsb	sy
 800c0ec:	613b      	str	r3, [r7, #16]
}
 800c0ee:	bf00      	nop
 800c0f0:	bf00      	nop
 800c0f2:	e7fd      	b.n	800c0f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800c0f4:	683b      	ldr	r3, [r7, #0]
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d10b      	bne.n	800c112 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	60fb      	str	r3, [r7, #12]
}
 800c10c:	bf00      	nop
 800c10e:	bf00      	nop
 800c110:	e7fd      	b.n	800c10e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800c112:	f000 ff79 	bl	800d008 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800c116:	4b1d      	ldr	r3, [pc, #116]	@ (800c18c <xTaskCheckForTimeOut+0xc0>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	685b      	ldr	r3, [r3, #4]
 800c120:	69ba      	ldr	r2, [r7, #24]
 800c122:	1ad3      	subs	r3, r2, r3
 800c124:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800c126:	683b      	ldr	r3, [r7, #0]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c12e:	d102      	bne.n	800c136 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800c130:	2300      	movs	r3, #0
 800c132:	61fb      	str	r3, [r7, #28]
 800c134:	e023      	b.n	800c17e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681a      	ldr	r2, [r3, #0]
 800c13a:	4b15      	ldr	r3, [pc, #84]	@ (800c190 <xTaskCheckForTimeOut+0xc4>)
 800c13c:	681b      	ldr	r3, [r3, #0]
 800c13e:	429a      	cmp	r2, r3
 800c140:	d007      	beq.n	800c152 <xTaskCheckForTimeOut+0x86>
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685b      	ldr	r3, [r3, #4]
 800c146:	69ba      	ldr	r2, [r7, #24]
 800c148:	429a      	cmp	r2, r3
 800c14a:	d302      	bcc.n	800c152 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800c14c:	2301      	movs	r3, #1
 800c14e:	61fb      	str	r3, [r7, #28]
 800c150:	e015      	b.n	800c17e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800c152:	683b      	ldr	r3, [r7, #0]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	697a      	ldr	r2, [r7, #20]
 800c158:	429a      	cmp	r2, r3
 800c15a:	d20b      	bcs.n	800c174 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	681a      	ldr	r2, [r3, #0]
 800c160:	697b      	ldr	r3, [r7, #20]
 800c162:	1ad2      	subs	r2, r2, r3
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	f7ff ff99 	bl	800c0a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800c16e:	2300      	movs	r3, #0
 800c170:	61fb      	str	r3, [r7, #28]
 800c172:	e004      	b.n	800c17e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2200      	movs	r2, #0
 800c178:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800c17a:	2301      	movs	r3, #1
 800c17c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800c17e:	f000 ff75 	bl	800d06c <vPortExitCritical>

	return xReturn;
 800c182:	69fb      	ldr	r3, [r7, #28]
}
 800c184:	4618      	mov	r0, r3
 800c186:	3720      	adds	r7, #32
 800c188:	46bd      	mov	sp, r7
 800c18a:	bd80      	pop	{r7, pc}
 800c18c:	20001a38 	.word	0x20001a38
 800c190:	20001a4c 	.word	0x20001a4c

0800c194 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800c194:	b480      	push	{r7}
 800c196:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800c198:	4b03      	ldr	r3, [pc, #12]	@ (800c1a8 <vTaskMissedYield+0x14>)
 800c19a:	2201      	movs	r2, #1
 800c19c:	601a      	str	r2, [r3, #0]
}
 800c19e:	bf00      	nop
 800c1a0:	46bd      	mov	sp, r7
 800c1a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a6:	4770      	bx	lr
 800c1a8:	20001a48 	.word	0x20001a48

0800c1ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800c1ac:	b580      	push	{r7, lr}
 800c1ae:	b082      	sub	sp, #8
 800c1b0:	af00      	add	r7, sp, #0
 800c1b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800c1b4:	f000 f852 	bl	800c25c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800c1b8:	4b06      	ldr	r3, [pc, #24]	@ (800c1d4 <prvIdleTask+0x28>)
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	2b01      	cmp	r3, #1
 800c1be:	d9f9      	bls.n	800c1b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800c1c0:	4b05      	ldr	r3, [pc, #20]	@ (800c1d8 <prvIdleTask+0x2c>)
 800c1c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c1c6:	601a      	str	r2, [r3, #0]
 800c1c8:	f3bf 8f4f 	dsb	sy
 800c1cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800c1d0:	e7f0      	b.n	800c1b4 <prvIdleTask+0x8>
 800c1d2:	bf00      	nop
 800c1d4:	20001564 	.word	0x20001564
 800c1d8:	e000ed04 	.word	0xe000ed04

0800c1dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b082      	sub	sp, #8
 800c1e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	607b      	str	r3, [r7, #4]
 800c1e6:	e00c      	b.n	800c202 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800c1e8:	687a      	ldr	r2, [r7, #4]
 800c1ea:	4613      	mov	r3, r2
 800c1ec:	009b      	lsls	r3, r3, #2
 800c1ee:	4413      	add	r3, r2
 800c1f0:	009b      	lsls	r3, r3, #2
 800c1f2:	4a12      	ldr	r2, [pc, #72]	@ (800c23c <prvInitialiseTaskLists+0x60>)
 800c1f4:	4413      	add	r3, r2
 800c1f6:	4618      	mov	r0, r3
 800c1f8:	f7fe fbb4 	bl	800a964 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	3301      	adds	r3, #1
 800c200:	607b      	str	r3, [r7, #4]
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	2b37      	cmp	r3, #55	@ 0x37
 800c206:	d9ef      	bls.n	800c1e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800c208:	480d      	ldr	r0, [pc, #52]	@ (800c240 <prvInitialiseTaskLists+0x64>)
 800c20a:	f7fe fbab 	bl	800a964 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800c20e:	480d      	ldr	r0, [pc, #52]	@ (800c244 <prvInitialiseTaskLists+0x68>)
 800c210:	f7fe fba8 	bl	800a964 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800c214:	480c      	ldr	r0, [pc, #48]	@ (800c248 <prvInitialiseTaskLists+0x6c>)
 800c216:	f7fe fba5 	bl	800a964 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800c21a:	480c      	ldr	r0, [pc, #48]	@ (800c24c <prvInitialiseTaskLists+0x70>)
 800c21c:	f7fe fba2 	bl	800a964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800c220:	480b      	ldr	r0, [pc, #44]	@ (800c250 <prvInitialiseTaskLists+0x74>)
 800c222:	f7fe fb9f 	bl	800a964 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800c226:	4b0b      	ldr	r3, [pc, #44]	@ (800c254 <prvInitialiseTaskLists+0x78>)
 800c228:	4a05      	ldr	r2, [pc, #20]	@ (800c240 <prvInitialiseTaskLists+0x64>)
 800c22a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800c22c:	4b0a      	ldr	r3, [pc, #40]	@ (800c258 <prvInitialiseTaskLists+0x7c>)
 800c22e:	4a05      	ldr	r2, [pc, #20]	@ (800c244 <prvInitialiseTaskLists+0x68>)
 800c230:	601a      	str	r2, [r3, #0]
}
 800c232:	bf00      	nop
 800c234:	3708      	adds	r7, #8
 800c236:	46bd      	mov	sp, r7
 800c238:	bd80      	pop	{r7, pc}
 800c23a:	bf00      	nop
 800c23c:	20001564 	.word	0x20001564
 800c240:	200019c4 	.word	0x200019c4
 800c244:	200019d8 	.word	0x200019d8
 800c248:	200019f4 	.word	0x200019f4
 800c24c:	20001a08 	.word	0x20001a08
 800c250:	20001a20 	.word	0x20001a20
 800c254:	200019ec 	.word	0x200019ec
 800c258:	200019f0 	.word	0x200019f0

0800c25c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800c25c:	b580      	push	{r7, lr}
 800c25e:	b082      	sub	sp, #8
 800c260:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c262:	e019      	b.n	800c298 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800c264:	f000 fed0 	bl	800d008 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c268:	4b10      	ldr	r3, [pc, #64]	@ (800c2ac <prvCheckTasksWaitingTermination+0x50>)
 800c26a:	68db      	ldr	r3, [r3, #12]
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	3304      	adds	r3, #4
 800c274:	4618      	mov	r0, r3
 800c276:	f7fe fbff 	bl	800aa78 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800c27a:	4b0d      	ldr	r3, [pc, #52]	@ (800c2b0 <prvCheckTasksWaitingTermination+0x54>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	3b01      	subs	r3, #1
 800c280:	4a0b      	ldr	r2, [pc, #44]	@ (800c2b0 <prvCheckTasksWaitingTermination+0x54>)
 800c282:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800c284:	4b0b      	ldr	r3, [pc, #44]	@ (800c2b4 <prvCheckTasksWaitingTermination+0x58>)
 800c286:	681b      	ldr	r3, [r3, #0]
 800c288:	3b01      	subs	r3, #1
 800c28a:	4a0a      	ldr	r2, [pc, #40]	@ (800c2b4 <prvCheckTasksWaitingTermination+0x58>)
 800c28c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800c28e:	f000 feed 	bl	800d06c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800c292:	6878      	ldr	r0, [r7, #4]
 800c294:	f000 f810 	bl	800c2b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800c298:	4b06      	ldr	r3, [pc, #24]	@ (800c2b4 <prvCheckTasksWaitingTermination+0x58>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1e1      	bne.n	800c264 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800c2a0:	bf00      	nop
 800c2a2:	bf00      	nop
 800c2a4:	3708      	adds	r7, #8
 800c2a6:	46bd      	mov	sp, r7
 800c2a8:	bd80      	pop	{r7, pc}
 800c2aa:	bf00      	nop
 800c2ac:	20001a08 	.word	0x20001a08
 800c2b0:	20001a34 	.word	0x20001a34
 800c2b4:	20001a1c 	.word	0x20001a1c

0800c2b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c2b8:	b580      	push	{r7, lr}
 800c2ba:	b084      	sub	sp, #16
 800c2bc:	af00      	add	r7, sp, #0
 800c2be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	3354      	adds	r3, #84	@ 0x54
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f001 ff21 	bl	800e10c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	d108      	bne.n	800c2e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c2d8:	4618      	mov	r0, r3
 800c2da:	f001 f885 	bl	800d3e8 <vPortFree>
				vPortFree( pxTCB );
 800c2de:	6878      	ldr	r0, [r7, #4]
 800c2e0:	f001 f882 	bl	800d3e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c2e4:	e019      	b.n	800c31a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c2ec:	2b01      	cmp	r3, #1
 800c2ee:	d103      	bne.n	800c2f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c2f0:	6878      	ldr	r0, [r7, #4]
 800c2f2:	f001 f879 	bl	800d3e8 <vPortFree>
	}
 800c2f6:	e010      	b.n	800c31a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c2fe:	2b02      	cmp	r3, #2
 800c300:	d00b      	beq.n	800c31a <prvDeleteTCB+0x62>
	__asm volatile
 800c302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c306:	f383 8811 	msr	BASEPRI, r3
 800c30a:	f3bf 8f6f 	isb	sy
 800c30e:	f3bf 8f4f 	dsb	sy
 800c312:	60fb      	str	r3, [r7, #12]
}
 800c314:	bf00      	nop
 800c316:	bf00      	nop
 800c318:	e7fd      	b.n	800c316 <prvDeleteTCB+0x5e>
	}
 800c31a:	bf00      	nop
 800c31c:	3710      	adds	r7, #16
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}
	...

0800c324 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c32a:	4b0c      	ldr	r3, [pc, #48]	@ (800c35c <prvResetNextTaskUnblockTime+0x38>)
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	2b00      	cmp	r3, #0
 800c332:	d104      	bne.n	800c33e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c334:	4b0a      	ldr	r3, [pc, #40]	@ (800c360 <prvResetNextTaskUnblockTime+0x3c>)
 800c336:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c33a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c33c:	e008      	b.n	800c350 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c33e:	4b07      	ldr	r3, [pc, #28]	@ (800c35c <prvResetNextTaskUnblockTime+0x38>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	68db      	ldr	r3, [r3, #12]
 800c346:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	685b      	ldr	r3, [r3, #4]
 800c34c:	4a04      	ldr	r2, [pc, #16]	@ (800c360 <prvResetNextTaskUnblockTime+0x3c>)
 800c34e:	6013      	str	r3, [r2, #0]
}
 800c350:	bf00      	nop
 800c352:	370c      	adds	r7, #12
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	200019ec 	.word	0x200019ec
 800c360:	20001a54 	.word	0x20001a54

0800c364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c364:	b480      	push	{r7}
 800c366:	b083      	sub	sp, #12
 800c368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c36a:	4b0b      	ldr	r3, [pc, #44]	@ (800c398 <xTaskGetSchedulerState+0x34>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d102      	bne.n	800c378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c372:	2301      	movs	r3, #1
 800c374:	607b      	str	r3, [r7, #4]
 800c376:	e008      	b.n	800c38a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c378:	4b08      	ldr	r3, [pc, #32]	@ (800c39c <xTaskGetSchedulerState+0x38>)
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d102      	bne.n	800c386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c380:	2302      	movs	r3, #2
 800c382:	607b      	str	r3, [r7, #4]
 800c384:	e001      	b.n	800c38a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c386:	2300      	movs	r3, #0
 800c388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c38a:	687b      	ldr	r3, [r7, #4]
	}
 800c38c:	4618      	mov	r0, r3
 800c38e:	370c      	adds	r7, #12
 800c390:	46bd      	mov	sp, r7
 800c392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c396:	4770      	bx	lr
 800c398:	20001a40 	.word	0x20001a40
 800c39c:	20001a5c 	.word	0x20001a5c

0800c3a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c3a0:	b580      	push	{r7, lr}
 800c3a2:	b086      	sub	sp, #24
 800c3a4:	af00      	add	r7, sp, #0
 800c3a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c3ac:	2300      	movs	r3, #0
 800c3ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d058      	beq.n	800c468 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c3b6:	4b2f      	ldr	r3, [pc, #188]	@ (800c474 <xTaskPriorityDisinherit+0xd4>)
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	693a      	ldr	r2, [r7, #16]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d00b      	beq.n	800c3d8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c3c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	60fb      	str	r3, [r7, #12]
}
 800c3d2:	bf00      	nop
 800c3d4:	bf00      	nop
 800c3d6:	e7fd      	b.n	800c3d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10b      	bne.n	800c3f8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c3e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c3e4:	f383 8811 	msr	BASEPRI, r3
 800c3e8:	f3bf 8f6f 	isb	sy
 800c3ec:	f3bf 8f4f 	dsb	sy
 800c3f0:	60bb      	str	r3, [r7, #8]
}
 800c3f2:	bf00      	nop
 800c3f4:	bf00      	nop
 800c3f6:	e7fd      	b.n	800c3f4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c3f8:	693b      	ldr	r3, [r7, #16]
 800c3fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c3fc:	1e5a      	subs	r2, r3, #1
 800c3fe:	693b      	ldr	r3, [r7, #16]
 800c400:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c402:	693b      	ldr	r3, [r7, #16]
 800c404:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c406:	693b      	ldr	r3, [r7, #16]
 800c408:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c40a:	429a      	cmp	r2, r3
 800c40c:	d02c      	beq.n	800c468 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c40e:	693b      	ldr	r3, [r7, #16]
 800c410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c412:	2b00      	cmp	r3, #0
 800c414:	d128      	bne.n	800c468 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	3304      	adds	r3, #4
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7fe fb2c 	bl	800aa78 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c420:	693b      	ldr	r3, [r7, #16]
 800c422:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c424:	693b      	ldr	r3, [r7, #16]
 800c426:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c428:	693b      	ldr	r3, [r7, #16]
 800c42a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c42c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c430:	693b      	ldr	r3, [r7, #16]
 800c432:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c434:	693b      	ldr	r3, [r7, #16]
 800c436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c438:	4b0f      	ldr	r3, [pc, #60]	@ (800c478 <xTaskPriorityDisinherit+0xd8>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	429a      	cmp	r2, r3
 800c43e:	d903      	bls.n	800c448 <xTaskPriorityDisinherit+0xa8>
 800c440:	693b      	ldr	r3, [r7, #16]
 800c442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c444:	4a0c      	ldr	r2, [pc, #48]	@ (800c478 <xTaskPriorityDisinherit+0xd8>)
 800c446:	6013      	str	r3, [r2, #0]
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c44c:	4613      	mov	r3, r2
 800c44e:	009b      	lsls	r3, r3, #2
 800c450:	4413      	add	r3, r2
 800c452:	009b      	lsls	r3, r3, #2
 800c454:	4a09      	ldr	r2, [pc, #36]	@ (800c47c <xTaskPriorityDisinherit+0xdc>)
 800c456:	441a      	add	r2, r3
 800c458:	693b      	ldr	r3, [r7, #16]
 800c45a:	3304      	adds	r3, #4
 800c45c:	4619      	mov	r1, r3
 800c45e:	4610      	mov	r0, r2
 800c460:	f7fe faad 	bl	800a9be <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c464:	2301      	movs	r3, #1
 800c466:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c468:	697b      	ldr	r3, [r7, #20]
	}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3718      	adds	r7, #24
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd80      	pop	{r7, pc}
 800c472:	bf00      	nop
 800c474:	20001560 	.word	0x20001560
 800c478:	20001a3c 	.word	0x20001a3c
 800c47c:	20001564 	.word	0x20001564

0800c480 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c480:	b580      	push	{r7, lr}
 800c482:	b084      	sub	sp, #16
 800c484:	af00      	add	r7, sp, #0
 800c486:	6078      	str	r0, [r7, #4]
 800c488:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c48a:	f000 fdbd 	bl	800d008 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c48e:	4b20      	ldr	r3, [pc, #128]	@ (800c510 <ulTaskNotifyTake+0x90>)
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c496:	2b00      	cmp	r3, #0
 800c498:	d113      	bne.n	800c4c2 <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c49a:	4b1d      	ldr	r3, [pc, #116]	@ (800c510 <ulTaskNotifyTake+0x90>)
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	2201      	movs	r2, #1
 800c4a0:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00b      	beq.n	800c4c2 <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c4aa:	2101      	movs	r1, #1
 800c4ac:	6838      	ldr	r0, [r7, #0]
 800c4ae:	f000 f8c9 	bl	800c644 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c4b2:	4b18      	ldr	r3, [pc, #96]	@ (800c514 <ulTaskNotifyTake+0x94>)
 800c4b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c4b8:	601a      	str	r2, [r3, #0]
 800c4ba:	f3bf 8f4f 	dsb	sy
 800c4be:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c4c2:	f000 fdd3 	bl	800d06c <vPortExitCritical>

		taskENTER_CRITICAL();
 800c4c6:	f000 fd9f 	bl	800d008 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c4ca:	4b11      	ldr	r3, [pc, #68]	@ (800c510 <ulTaskNotifyTake+0x90>)
 800c4cc:	681b      	ldr	r3, [r3, #0]
 800c4ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c4d2:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c4d4:	68fb      	ldr	r3, [r7, #12]
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	d00e      	beq.n	800c4f8 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d005      	beq.n	800c4ec <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	@ (800c510 <ulTaskNotifyTake+0x90>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c4ea:	e005      	b.n	800c4f8 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c4ec:	4b08      	ldr	r3, [pc, #32]	@ (800c510 <ulTaskNotifyTake+0x90>)
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	3a01      	subs	r2, #1
 800c4f4:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c4f8:	4b05      	ldr	r3, [pc, #20]	@ (800c510 <ulTaskNotifyTake+0x90>)
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c502:	f000 fdb3 	bl	800d06c <vPortExitCritical>

		return ulReturn;
 800c506:	68fb      	ldr	r3, [r7, #12]
	}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}
 800c510:	20001560 	.word	0x20001560
 800c514:	e000ed04 	.word	0xe000ed04

0800c518 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b08a      	sub	sp, #40	@ 0x28
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2b00      	cmp	r3, #0
 800c526:	d10b      	bne.n	800c540 <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c52c:	f383 8811 	msr	BASEPRI, r3
 800c530:	f3bf 8f6f 	isb	sy
 800c534:	f3bf 8f4f 	dsb	sy
 800c538:	61bb      	str	r3, [r7, #24]
}
 800c53a:	bf00      	nop
 800c53c:	bf00      	nop
 800c53e:	e7fd      	b.n	800c53c <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c540:	f000 fe42 	bl	800d1c8 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c548:	f3ef 8211 	mrs	r2, BASEPRI
 800c54c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c550:	f383 8811 	msr	BASEPRI, r3
 800c554:	f3bf 8f6f 	isb	sy
 800c558:	f3bf 8f4f 	dsb	sy
 800c55c:	617a      	str	r2, [r7, #20]
 800c55e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c560:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c562:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c566:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c56a:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c56e:	2202      	movs	r2, #2
 800c570:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c576:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c57a:	1c5a      	adds	r2, r3, #1
 800c57c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c57e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c582:	7ffb      	ldrb	r3, [r7, #31]
 800c584:	2b01      	cmp	r3, #1
 800c586:	d147      	bne.n	800c618 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d00b      	beq.n	800c5a8 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c594:	f383 8811 	msr	BASEPRI, r3
 800c598:	f3bf 8f6f 	isb	sy
 800c59c:	f3bf 8f4f 	dsb	sy
 800c5a0:	60fb      	str	r3, [r7, #12]
}
 800c5a2:	bf00      	nop
 800c5a4:	bf00      	nop
 800c5a6:	e7fd      	b.n	800c5a4 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c5a8:	4b20      	ldr	r3, [pc, #128]	@ (800c62c <vTaskNotifyGiveFromISR+0x114>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d11d      	bne.n	800c5ec <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c5b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5b2:	3304      	adds	r3, #4
 800c5b4:	4618      	mov	r0, r3
 800c5b6:	f7fe fa5f 	bl	800aa78 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5be:	4b1c      	ldr	r3, [pc, #112]	@ (800c630 <vTaskNotifyGiveFromISR+0x118>)
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	429a      	cmp	r2, r3
 800c5c4:	d903      	bls.n	800c5ce <vTaskNotifyGiveFromISR+0xb6>
 800c5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c5ca:	4a19      	ldr	r2, [pc, #100]	@ (800c630 <vTaskNotifyGiveFromISR+0x118>)
 800c5cc:	6013      	str	r3, [r2, #0]
 800c5ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5d2:	4613      	mov	r3, r2
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4a16      	ldr	r2, [pc, #88]	@ (800c634 <vTaskNotifyGiveFromISR+0x11c>)
 800c5dc:	441a      	add	r2, r3
 800c5de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5e0:	3304      	adds	r3, #4
 800c5e2:	4619      	mov	r1, r3
 800c5e4:	4610      	mov	r0, r2
 800c5e6:	f7fe f9ea 	bl	800a9be <vListInsertEnd>
 800c5ea:	e005      	b.n	800c5f8 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c5ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5ee:	3318      	adds	r3, #24
 800c5f0:	4619      	mov	r1, r3
 800c5f2:	4811      	ldr	r0, [pc, #68]	@ (800c638 <vTaskNotifyGiveFromISR+0x120>)
 800c5f4:	f7fe f9e3 	bl	800a9be <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c5f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c5fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c5fc:	4b0f      	ldr	r3, [pc, #60]	@ (800c63c <vTaskNotifyGiveFromISR+0x124>)
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c602:	429a      	cmp	r2, r3
 800c604:	d908      	bls.n	800c618 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c606:	683b      	ldr	r3, [r7, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d002      	beq.n	800c612 <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	2201      	movs	r2, #1
 800c610:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c612:	4b0b      	ldr	r3, [pc, #44]	@ (800c640 <vTaskNotifyGiveFromISR+0x128>)
 800c614:	2201      	movs	r2, #1
 800c616:	601a      	str	r2, [r3, #0]
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	f383 8811 	msr	BASEPRI, r3
}
 800c622:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c624:	bf00      	nop
 800c626:	3728      	adds	r7, #40	@ 0x28
 800c628:	46bd      	mov	sp, r7
 800c62a:	bd80      	pop	{r7, pc}
 800c62c:	20001a5c 	.word	0x20001a5c
 800c630:	20001a3c 	.word	0x20001a3c
 800c634:	20001564 	.word	0x20001564
 800c638:	200019f4 	.word	0x200019f4
 800c63c:	20001560 	.word	0x20001560
 800c640:	20001a48 	.word	0x20001a48

0800c644 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
 800c64c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c64e:	4b21      	ldr	r3, [pc, #132]	@ (800c6d4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c654:	4b20      	ldr	r3, [pc, #128]	@ (800c6d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	3304      	adds	r3, #4
 800c65a:	4618      	mov	r0, r3
 800c65c:	f7fe fa0c 	bl	800aa78 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c666:	d10a      	bne.n	800c67e <prvAddCurrentTaskToDelayedList+0x3a>
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d007      	beq.n	800c67e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c66e:	4b1a      	ldr	r3, [pc, #104]	@ (800c6d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	3304      	adds	r3, #4
 800c674:	4619      	mov	r1, r3
 800c676:	4819      	ldr	r0, [pc, #100]	@ (800c6dc <prvAddCurrentTaskToDelayedList+0x98>)
 800c678:	f7fe f9a1 	bl	800a9be <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c67c:	e026      	b.n	800c6cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c67e:	68fa      	ldr	r2, [r7, #12]
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	4413      	add	r3, r2
 800c684:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c686:	4b14      	ldr	r3, [pc, #80]	@ (800c6d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	68ba      	ldr	r2, [r7, #8]
 800c68c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	429a      	cmp	r2, r3
 800c694:	d209      	bcs.n	800c6aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c696:	4b12      	ldr	r3, [pc, #72]	@ (800c6e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c698:	681a      	ldr	r2, [r3, #0]
 800c69a:	4b0f      	ldr	r3, [pc, #60]	@ (800c6d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	3304      	adds	r3, #4
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	4610      	mov	r0, r2
 800c6a4:	f7fe f9af 	bl	800aa06 <vListInsert>
}
 800c6a8:	e010      	b.n	800c6cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c6aa:	4b0e      	ldr	r3, [pc, #56]	@ (800c6e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c6ac:	681a      	ldr	r2, [r3, #0]
 800c6ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c6d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3304      	adds	r3, #4
 800c6b4:	4619      	mov	r1, r3
 800c6b6:	4610      	mov	r0, r2
 800c6b8:	f7fe f9a5 	bl	800aa06 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c6bc:	4b0a      	ldr	r3, [pc, #40]	@ (800c6e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	68ba      	ldr	r2, [r7, #8]
 800c6c2:	429a      	cmp	r2, r3
 800c6c4:	d202      	bcs.n	800c6cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c6c6:	4a08      	ldr	r2, [pc, #32]	@ (800c6e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c6c8:	68bb      	ldr	r3, [r7, #8]
 800c6ca:	6013      	str	r3, [r2, #0]
}
 800c6cc:	bf00      	nop
 800c6ce:	3710      	adds	r7, #16
 800c6d0:	46bd      	mov	sp, r7
 800c6d2:	bd80      	pop	{r7, pc}
 800c6d4:	20001a38 	.word	0x20001a38
 800c6d8:	20001560 	.word	0x20001560
 800c6dc:	20001a20 	.word	0x20001a20
 800c6e0:	200019f0 	.word	0x200019f0
 800c6e4:	200019ec 	.word	0x200019ec
 800c6e8:	20001a54 	.word	0x20001a54

0800c6ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08a      	sub	sp, #40	@ 0x28
 800c6f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c6f6:	f000 fb13 	bl	800cd20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c6fa:	4b1d      	ldr	r3, [pc, #116]	@ (800c770 <xTimerCreateTimerTask+0x84>)
 800c6fc:	681b      	ldr	r3, [r3, #0]
 800c6fe:	2b00      	cmp	r3, #0
 800c700:	d021      	beq.n	800c746 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c702:	2300      	movs	r3, #0
 800c704:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c706:	2300      	movs	r3, #0
 800c708:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c70a:	1d3a      	adds	r2, r7, #4
 800c70c:	f107 0108 	add.w	r1, r7, #8
 800c710:	f107 030c 	add.w	r3, r7, #12
 800c714:	4618      	mov	r0, r3
 800c716:	f7fe f90b 	bl	800a930 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c71a:	6879      	ldr	r1, [r7, #4]
 800c71c:	68bb      	ldr	r3, [r7, #8]
 800c71e:	68fa      	ldr	r2, [r7, #12]
 800c720:	9202      	str	r2, [sp, #8]
 800c722:	9301      	str	r3, [sp, #4]
 800c724:	2302      	movs	r3, #2
 800c726:	9300      	str	r3, [sp, #0]
 800c728:	2300      	movs	r3, #0
 800c72a:	460a      	mov	r2, r1
 800c72c:	4911      	ldr	r1, [pc, #68]	@ (800c774 <xTimerCreateTimerTask+0x88>)
 800c72e:	4812      	ldr	r0, [pc, #72]	@ (800c778 <xTimerCreateTimerTask+0x8c>)
 800c730:	f7fe fec6 	bl	800b4c0 <xTaskCreateStatic>
 800c734:	4603      	mov	r3, r0
 800c736:	4a11      	ldr	r2, [pc, #68]	@ (800c77c <xTimerCreateTimerTask+0x90>)
 800c738:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c73a:	4b10      	ldr	r3, [pc, #64]	@ (800c77c <xTimerCreateTimerTask+0x90>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d001      	beq.n	800c746 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c742:	2301      	movs	r3, #1
 800c744:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d10b      	bne.n	800c764 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	613b      	str	r3, [r7, #16]
}
 800c75e:	bf00      	nop
 800c760:	bf00      	nop
 800c762:	e7fd      	b.n	800c760 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c764:	697b      	ldr	r3, [r7, #20]
}
 800c766:	4618      	mov	r0, r3
 800c768:	3718      	adds	r7, #24
 800c76a:	46bd      	mov	sp, r7
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	20001a90 	.word	0x20001a90
 800c774:	080103c8 	.word	0x080103c8
 800c778:	0800c8b9 	.word	0x0800c8b9
 800c77c:	20001a94 	.word	0x20001a94

0800c780 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b08a      	sub	sp, #40	@ 0x28
 800c784:	af00      	add	r7, sp, #0
 800c786:	60f8      	str	r0, [r7, #12]
 800c788:	60b9      	str	r1, [r7, #8]
 800c78a:	607a      	str	r2, [r7, #4]
 800c78c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c78e:	2300      	movs	r3, #0
 800c790:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10b      	bne.n	800c7b0 <xTimerGenericCommand+0x30>
	__asm volatile
 800c798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	623b      	str	r3, [r7, #32]
}
 800c7aa:	bf00      	nop
 800c7ac:	bf00      	nop
 800c7ae:	e7fd      	b.n	800c7ac <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c7b0:	4b19      	ldr	r3, [pc, #100]	@ (800c818 <xTimerGenericCommand+0x98>)
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d02a      	beq.n	800c80e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c7b8:	68bb      	ldr	r3, [r7, #8]
 800c7ba:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c7c0:	68fb      	ldr	r3, [r7, #12]
 800c7c2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	2b05      	cmp	r3, #5
 800c7c8:	dc18      	bgt.n	800c7fc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c7ca:	f7ff fdcb 	bl	800c364 <xTaskGetSchedulerState>
 800c7ce:	4603      	mov	r3, r0
 800c7d0:	2b02      	cmp	r3, #2
 800c7d2:	d109      	bne.n	800c7e8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c7d4:	4b10      	ldr	r3, [pc, #64]	@ (800c818 <xTimerGenericCommand+0x98>)
 800c7d6:	6818      	ldr	r0, [r3, #0]
 800c7d8:	f107 0110 	add.w	r1, r7, #16
 800c7dc:	2300      	movs	r3, #0
 800c7de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c7e0:	f7fe fa7e 	bl	800ace0 <xQueueGenericSend>
 800c7e4:	6278      	str	r0, [r7, #36]	@ 0x24
 800c7e6:	e012      	b.n	800c80e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c7e8:	4b0b      	ldr	r3, [pc, #44]	@ (800c818 <xTimerGenericCommand+0x98>)
 800c7ea:	6818      	ldr	r0, [r3, #0]
 800c7ec:	f107 0110 	add.w	r1, r7, #16
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	2200      	movs	r2, #0
 800c7f4:	f7fe fa74 	bl	800ace0 <xQueueGenericSend>
 800c7f8:	6278      	str	r0, [r7, #36]	@ 0x24
 800c7fa:	e008      	b.n	800c80e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c7fc:	4b06      	ldr	r3, [pc, #24]	@ (800c818 <xTimerGenericCommand+0x98>)
 800c7fe:	6818      	ldr	r0, [r3, #0]
 800c800:	f107 0110 	add.w	r1, r7, #16
 800c804:	2300      	movs	r3, #0
 800c806:	683a      	ldr	r2, [r7, #0]
 800c808:	f7fe fb6c 	bl	800aee4 <xQueueGenericSendFromISR>
 800c80c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c80e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c810:	4618      	mov	r0, r3
 800c812:	3728      	adds	r7, #40	@ 0x28
 800c814:	46bd      	mov	sp, r7
 800c816:	bd80      	pop	{r7, pc}
 800c818:	20001a90 	.word	0x20001a90

0800c81c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c81c:	b580      	push	{r7, lr}
 800c81e:	b088      	sub	sp, #32
 800c820:	af02      	add	r7, sp, #8
 800c822:	6078      	str	r0, [r7, #4]
 800c824:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c826:	4b23      	ldr	r3, [pc, #140]	@ (800c8b4 <prvProcessExpiredTimer+0x98>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	68db      	ldr	r3, [r3, #12]
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c830:	697b      	ldr	r3, [r7, #20]
 800c832:	3304      	adds	r3, #4
 800c834:	4618      	mov	r0, r3
 800c836:	f7fe f91f 	bl	800aa78 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c840:	f003 0304 	and.w	r3, r3, #4
 800c844:	2b00      	cmp	r3, #0
 800c846:	d023      	beq.n	800c890 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	699a      	ldr	r2, [r3, #24]
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	18d1      	adds	r1, r2, r3
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	683a      	ldr	r2, [r7, #0]
 800c854:	6978      	ldr	r0, [r7, #20]
 800c856:	f000 f8d5 	bl	800ca04 <prvInsertTimerInActiveList>
 800c85a:	4603      	mov	r3, r0
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	d020      	beq.n	800c8a2 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c860:	2300      	movs	r3, #0
 800c862:	9300      	str	r3, [sp, #0]
 800c864:	2300      	movs	r3, #0
 800c866:	687a      	ldr	r2, [r7, #4]
 800c868:	2100      	movs	r1, #0
 800c86a:	6978      	ldr	r0, [r7, #20]
 800c86c:	f7ff ff88 	bl	800c780 <xTimerGenericCommand>
 800c870:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d114      	bne.n	800c8a2 <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c87c:	f383 8811 	msr	BASEPRI, r3
 800c880:	f3bf 8f6f 	isb	sy
 800c884:	f3bf 8f4f 	dsb	sy
 800c888:	60fb      	str	r3, [r7, #12]
}
 800c88a:	bf00      	nop
 800c88c:	bf00      	nop
 800c88e:	e7fd      	b.n	800c88c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c890:	697b      	ldr	r3, [r7, #20]
 800c892:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c896:	f023 0301 	bic.w	r3, r3, #1
 800c89a:	b2da      	uxtb	r2, r3
 800c89c:	697b      	ldr	r3, [r7, #20]
 800c89e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c8a2:	697b      	ldr	r3, [r7, #20]
 800c8a4:	6a1b      	ldr	r3, [r3, #32]
 800c8a6:	6978      	ldr	r0, [r7, #20]
 800c8a8:	4798      	blx	r3
}
 800c8aa:	bf00      	nop
 800c8ac:	3718      	adds	r7, #24
 800c8ae:	46bd      	mov	sp, r7
 800c8b0:	bd80      	pop	{r7, pc}
 800c8b2:	bf00      	nop
 800c8b4:	20001a88 	.word	0x20001a88

0800c8b8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c8b8:	b580      	push	{r7, lr}
 800c8ba:	b084      	sub	sp, #16
 800c8bc:	af00      	add	r7, sp, #0
 800c8be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8c0:	f107 0308 	add.w	r3, r7, #8
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f000 f859 	bl	800c97c <prvGetNextExpireTime>
 800c8ca:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c8cc:	68bb      	ldr	r3, [r7, #8]
 800c8ce:	4619      	mov	r1, r3
 800c8d0:	68f8      	ldr	r0, [r7, #12]
 800c8d2:	f000 f805 	bl	800c8e0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c8d6:	f000 f8d7 	bl	800ca88 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c8da:	bf00      	nop
 800c8dc:	e7f0      	b.n	800c8c0 <prvTimerTask+0x8>
	...

0800c8e0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c8ea:	f7ff f84d 	bl	800b988 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c8ee:	f107 0308 	add.w	r3, r7, #8
 800c8f2:	4618      	mov	r0, r3
 800c8f4:	f000 f866 	bl	800c9c4 <prvSampleTimeNow>
 800c8f8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d130      	bne.n	800c962 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d10a      	bne.n	800c91c <prvProcessTimerOrBlockTask+0x3c>
 800c906:	687a      	ldr	r2, [r7, #4]
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d806      	bhi.n	800c91c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c90e:	f7ff f849 	bl	800b9a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c912:	68f9      	ldr	r1, [r7, #12]
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f7ff ff81 	bl	800c81c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c91a:	e024      	b.n	800c966 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d008      	beq.n	800c934 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c922:	4b13      	ldr	r3, [pc, #76]	@ (800c970 <prvProcessTimerOrBlockTask+0x90>)
 800c924:	681b      	ldr	r3, [r3, #0]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d101      	bne.n	800c930 <prvProcessTimerOrBlockTask+0x50>
 800c92c:	2301      	movs	r3, #1
 800c92e:	e000      	b.n	800c932 <prvProcessTimerOrBlockTask+0x52>
 800c930:	2300      	movs	r3, #0
 800c932:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c934:	4b0f      	ldr	r3, [pc, #60]	@ (800c974 <prvProcessTimerOrBlockTask+0x94>)
 800c936:	6818      	ldr	r0, [r3, #0]
 800c938:	687a      	ldr	r2, [r7, #4]
 800c93a:	68fb      	ldr	r3, [r7, #12]
 800c93c:	1ad3      	subs	r3, r2, r3
 800c93e:	683a      	ldr	r2, [r7, #0]
 800c940:	4619      	mov	r1, r3
 800c942:	f7fe fd89 	bl	800b458 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c946:	f7ff f82d 	bl	800b9a4 <xTaskResumeAll>
 800c94a:	4603      	mov	r3, r0
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d10a      	bne.n	800c966 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c950:	4b09      	ldr	r3, [pc, #36]	@ (800c978 <prvProcessTimerOrBlockTask+0x98>)
 800c952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c956:	601a      	str	r2, [r3, #0]
 800c958:	f3bf 8f4f 	dsb	sy
 800c95c:	f3bf 8f6f 	isb	sy
}
 800c960:	e001      	b.n	800c966 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c962:	f7ff f81f 	bl	800b9a4 <xTaskResumeAll>
}
 800c966:	bf00      	nop
 800c968:	3710      	adds	r7, #16
 800c96a:	46bd      	mov	sp, r7
 800c96c:	bd80      	pop	{r7, pc}
 800c96e:	bf00      	nop
 800c970:	20001a8c 	.word	0x20001a8c
 800c974:	20001a90 	.word	0x20001a90
 800c978:	e000ed04 	.word	0xe000ed04

0800c97c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c97c:	b480      	push	{r7}
 800c97e:	b085      	sub	sp, #20
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c984:	4b0e      	ldr	r3, [pc, #56]	@ (800c9c0 <prvGetNextExpireTime+0x44>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	d101      	bne.n	800c992 <prvGetNextExpireTime+0x16>
 800c98e:	2201      	movs	r2, #1
 800c990:	e000      	b.n	800c994 <prvGetNextExpireTime+0x18>
 800c992:	2200      	movs	r2, #0
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	d105      	bne.n	800c9ac <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9a0:	4b07      	ldr	r3, [pc, #28]	@ (800c9c0 <prvGetNextExpireTime+0x44>)
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	68db      	ldr	r3, [r3, #12]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	60fb      	str	r3, [r7, #12]
 800c9aa:	e001      	b.n	800c9b0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3714      	adds	r7, #20
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9bc:	4770      	bx	lr
 800c9be:	bf00      	nop
 800c9c0:	20001a88 	.word	0x20001a88

0800c9c4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	b084      	sub	sp, #16
 800c9c8:	af00      	add	r7, sp, #0
 800c9ca:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c9cc:	f7ff f888 	bl	800bae0 <xTaskGetTickCount>
 800c9d0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c9d2:	4b0b      	ldr	r3, [pc, #44]	@ (800ca00 <prvSampleTimeNow+0x3c>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	68fa      	ldr	r2, [r7, #12]
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	d205      	bcs.n	800c9e8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c9dc:	f000 f93a 	bl	800cc54 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	2201      	movs	r2, #1
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	e002      	b.n	800c9ee <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c9ee:	4a04      	ldr	r2, [pc, #16]	@ (800ca00 <prvSampleTimeNow+0x3c>)
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
 800c9fe:	bf00      	nop
 800ca00:	20001a98 	.word	0x20001a98

0800ca04 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	b086      	sub	sp, #24
 800ca08:	af00      	add	r7, sp, #0
 800ca0a:	60f8      	str	r0, [r7, #12]
 800ca0c:	60b9      	str	r1, [r7, #8]
 800ca0e:	607a      	str	r2, [r7, #4]
 800ca10:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ca12:	2300      	movs	r3, #0
 800ca14:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	68ba      	ldr	r2, [r7, #8]
 800ca1a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	68fa      	ldr	r2, [r7, #12]
 800ca20:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ca22:	68ba      	ldr	r2, [r7, #8]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d812      	bhi.n	800ca50 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca2a:	687a      	ldr	r2, [r7, #4]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	1ad2      	subs	r2, r2, r3
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	699b      	ldr	r3, [r3, #24]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d302      	bcc.n	800ca3e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ca38:	2301      	movs	r3, #1
 800ca3a:	617b      	str	r3, [r7, #20]
 800ca3c:	e01b      	b.n	800ca76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ca3e:	4b10      	ldr	r3, [pc, #64]	@ (800ca80 <prvInsertTimerInActiveList+0x7c>)
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	3304      	adds	r3, #4
 800ca46:	4619      	mov	r1, r3
 800ca48:	4610      	mov	r0, r2
 800ca4a:	f7fd ffdc 	bl	800aa06 <vListInsert>
 800ca4e:	e012      	b.n	800ca76 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ca50:	687a      	ldr	r2, [r7, #4]
 800ca52:	683b      	ldr	r3, [r7, #0]
 800ca54:	429a      	cmp	r2, r3
 800ca56:	d206      	bcs.n	800ca66 <prvInsertTimerInActiveList+0x62>
 800ca58:	68ba      	ldr	r2, [r7, #8]
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	429a      	cmp	r2, r3
 800ca5e:	d302      	bcc.n	800ca66 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ca60:	2301      	movs	r3, #1
 800ca62:	617b      	str	r3, [r7, #20]
 800ca64:	e007      	b.n	800ca76 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ca66:	4b07      	ldr	r3, [pc, #28]	@ (800ca84 <prvInsertTimerInActiveList+0x80>)
 800ca68:	681a      	ldr	r2, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	3304      	adds	r3, #4
 800ca6e:	4619      	mov	r1, r3
 800ca70:	4610      	mov	r0, r2
 800ca72:	f7fd ffc8 	bl	800aa06 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ca76:	697b      	ldr	r3, [r7, #20]
}
 800ca78:	4618      	mov	r0, r3
 800ca7a:	3718      	adds	r7, #24
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	bd80      	pop	{r7, pc}
 800ca80:	20001a8c 	.word	0x20001a8c
 800ca84:	20001a88 	.word	0x20001a88

0800ca88 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b08e      	sub	sp, #56	@ 0x38
 800ca8c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ca8e:	e0ce      	b.n	800cc2e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	da19      	bge.n	800caca <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ca96:	1d3b      	adds	r3, r7, #4
 800ca98:	3304      	adds	r3, #4
 800ca9a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ca9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ca9e:	2b00      	cmp	r3, #0
 800caa0:	d10b      	bne.n	800caba <prvProcessReceivedCommands+0x32>
	__asm volatile
 800caa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caa6:	f383 8811 	msr	BASEPRI, r3
 800caaa:	f3bf 8f6f 	isb	sy
 800caae:	f3bf 8f4f 	dsb	sy
 800cab2:	61fb      	str	r3, [r7, #28]
}
 800cab4:	bf00      	nop
 800cab6:	bf00      	nop
 800cab8:	e7fd      	b.n	800cab6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800caba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cac0:	6850      	ldr	r0, [r2, #4]
 800cac2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cac4:	6892      	ldr	r2, [r2, #8]
 800cac6:	4611      	mov	r1, r2
 800cac8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	f2c0 80ae 	blt.w	800cc2e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800cad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad8:	695b      	ldr	r3, [r3, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d004      	beq.n	800cae8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cade:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cae0:	3304      	adds	r3, #4
 800cae2:	4618      	mov	r0, r3
 800cae4:	f7fd ffc8 	bl	800aa78 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800cae8:	463b      	mov	r3, r7
 800caea:	4618      	mov	r0, r3
 800caec:	f7ff ff6a 	bl	800c9c4 <prvSampleTimeNow>
 800caf0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	2b09      	cmp	r3, #9
 800caf6:	f200 8097 	bhi.w	800cc28 <prvProcessReceivedCommands+0x1a0>
 800cafa:	a201      	add	r2, pc, #4	@ (adr r2, 800cb00 <prvProcessReceivedCommands+0x78>)
 800cafc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb00:	0800cb29 	.word	0x0800cb29
 800cb04:	0800cb29 	.word	0x0800cb29
 800cb08:	0800cb29 	.word	0x0800cb29
 800cb0c:	0800cb9f 	.word	0x0800cb9f
 800cb10:	0800cbb3 	.word	0x0800cbb3
 800cb14:	0800cbff 	.word	0x0800cbff
 800cb18:	0800cb29 	.word	0x0800cb29
 800cb1c:	0800cb29 	.word	0x0800cb29
 800cb20:	0800cb9f 	.word	0x0800cb9f
 800cb24:	0800cbb3 	.word	0x0800cbb3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cb28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb2e:	f043 0301 	orr.w	r3, r3, #1
 800cb32:	b2da      	uxtb	r2, r3
 800cb34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800cb3a:	68ba      	ldr	r2, [r7, #8]
 800cb3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb3e:	699b      	ldr	r3, [r3, #24]
 800cb40:	18d1      	adds	r1, r2, r3
 800cb42:	68bb      	ldr	r3, [r7, #8]
 800cb44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cb46:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb48:	f7ff ff5c 	bl	800ca04 <prvInsertTimerInActiveList>
 800cb4c:	4603      	mov	r3, r0
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d06c      	beq.n	800cc2c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cb52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb54:	6a1b      	ldr	r3, [r3, #32]
 800cb56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb58:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cb5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb5c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cb60:	f003 0304 	and.w	r3, r3, #4
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d061      	beq.n	800cc2c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800cb68:	68ba      	ldr	r2, [r7, #8]
 800cb6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cb6c:	699b      	ldr	r3, [r3, #24]
 800cb6e:	441a      	add	r2, r3
 800cb70:	2300      	movs	r3, #0
 800cb72:	9300      	str	r3, [sp, #0]
 800cb74:	2300      	movs	r3, #0
 800cb76:	2100      	movs	r1, #0
 800cb78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cb7a:	f7ff fe01 	bl	800c780 <xTimerGenericCommand>
 800cb7e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800cb80:	6a3b      	ldr	r3, [r7, #32]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d152      	bne.n	800cc2c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800cb86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb8a:	f383 8811 	msr	BASEPRI, r3
 800cb8e:	f3bf 8f6f 	isb	sy
 800cb92:	f3bf 8f4f 	dsb	sy
 800cb96:	61bb      	str	r3, [r7, #24]
}
 800cb98:	bf00      	nop
 800cb9a:	bf00      	nop
 800cb9c:	e7fd      	b.n	800cb9a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cba0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cba4:	f023 0301 	bic.w	r3, r3, #1
 800cba8:	b2da      	uxtb	r2, r3
 800cbaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbac:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cbb0:	e03d      	b.n	800cc2e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800cbb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cbb8:	f043 0301 	orr.w	r3, r3, #1
 800cbbc:	b2da      	uxtb	r2, r3
 800cbbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbc8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800cbca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbcc:	699b      	ldr	r3, [r3, #24]
 800cbce:	2b00      	cmp	r3, #0
 800cbd0:	d10b      	bne.n	800cbea <prvProcessReceivedCommands+0x162>
	__asm volatile
 800cbd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cbd6:	f383 8811 	msr	BASEPRI, r3
 800cbda:	f3bf 8f6f 	isb	sy
 800cbde:	f3bf 8f4f 	dsb	sy
 800cbe2:	617b      	str	r3, [r7, #20]
}
 800cbe4:	bf00      	nop
 800cbe6:	bf00      	nop
 800cbe8:	e7fd      	b.n	800cbe6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800cbea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbec:	699a      	ldr	r2, [r3, #24]
 800cbee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf0:	18d1      	adds	r1, r2, r3
 800cbf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cbf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cbf6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cbf8:	f7ff ff04 	bl	800ca04 <prvInsertTimerInActiveList>
					break;
 800cbfc:	e017      	b.n	800cc2e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800cbfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc00:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc04:	f003 0302 	and.w	r3, r3, #2
 800cc08:	2b00      	cmp	r3, #0
 800cc0a:	d103      	bne.n	800cc14 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800cc0c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800cc0e:	f000 fbeb 	bl	800d3e8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800cc12:	e00c      	b.n	800cc2e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800cc14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc1a:	f023 0301 	bic.w	r3, r3, #1
 800cc1e:	b2da      	uxtb	r2, r3
 800cc20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cc22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800cc26:	e002      	b.n	800cc2e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800cc28:	bf00      	nop
 800cc2a:	e000      	b.n	800cc2e <prvProcessReceivedCommands+0x1a6>
					break;
 800cc2c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800cc2e:	4b08      	ldr	r3, [pc, #32]	@ (800cc50 <prvProcessReceivedCommands+0x1c8>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	1d39      	adds	r1, r7, #4
 800cc34:	2200      	movs	r2, #0
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe f9f2 	bl	800b020 <xQueueReceive>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	f47f af26 	bne.w	800ca90 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop
 800cc48:	3730      	adds	r7, #48	@ 0x30
 800cc4a:	46bd      	mov	sp, r7
 800cc4c:	bd80      	pop	{r7, pc}
 800cc4e:	bf00      	nop
 800cc50:	20001a90 	.word	0x20001a90

0800cc54 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b088      	sub	sp, #32
 800cc58:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800cc5a:	e049      	b.n	800ccf0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800cc5c:	4b2e      	ldr	r3, [pc, #184]	@ (800cd18 <prvSwitchTimerLists+0xc4>)
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	68db      	ldr	r3, [r3, #12]
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc66:	4b2c      	ldr	r3, [pc, #176]	@ (800cd18 <prvSwitchTimerLists+0xc4>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	3304      	adds	r3, #4
 800cc74:	4618      	mov	r0, r3
 800cc76:	f7fd feff 	bl	800aa78 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800cc7a:	68fb      	ldr	r3, [r7, #12]
 800cc7c:	6a1b      	ldr	r3, [r3, #32]
 800cc7e:	68f8      	ldr	r0, [r7, #12]
 800cc80:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800cc88:	f003 0304 	and.w	r3, r3, #4
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d02f      	beq.n	800ccf0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	699b      	ldr	r3, [r3, #24]
 800cc94:	693a      	ldr	r2, [r7, #16]
 800cc96:	4413      	add	r3, r2
 800cc98:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800cc9a:	68ba      	ldr	r2, [r7, #8]
 800cc9c:	693b      	ldr	r3, [r7, #16]
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d90e      	bls.n	800ccc0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	68ba      	ldr	r2, [r7, #8]
 800cca6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800cca8:	68fb      	ldr	r3, [r7, #12]
 800ccaa:	68fa      	ldr	r2, [r7, #12]
 800ccac:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ccae:	4b1a      	ldr	r3, [pc, #104]	@ (800cd18 <prvSwitchTimerLists+0xc4>)
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	3304      	adds	r3, #4
 800ccb6:	4619      	mov	r1, r3
 800ccb8:	4610      	mov	r0, r2
 800ccba:	f7fd fea4 	bl	800aa06 <vListInsert>
 800ccbe:	e017      	b.n	800ccf0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	9300      	str	r3, [sp, #0]
 800ccc4:	2300      	movs	r3, #0
 800ccc6:	693a      	ldr	r2, [r7, #16]
 800ccc8:	2100      	movs	r1, #0
 800ccca:	68f8      	ldr	r0, [r7, #12]
 800cccc:	f7ff fd58 	bl	800c780 <xTimerGenericCommand>
 800ccd0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d10b      	bne.n	800ccf0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ccd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccdc:	f383 8811 	msr	BASEPRI, r3
 800cce0:	f3bf 8f6f 	isb	sy
 800cce4:	f3bf 8f4f 	dsb	sy
 800cce8:	603b      	str	r3, [r7, #0]
}
 800ccea:	bf00      	nop
 800ccec:	bf00      	nop
 800ccee:	e7fd      	b.n	800ccec <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ccf0:	4b09      	ldr	r3, [pc, #36]	@ (800cd18 <prvSwitchTimerLists+0xc4>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1b0      	bne.n	800cc5c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ccfa:	4b07      	ldr	r3, [pc, #28]	@ (800cd18 <prvSwitchTimerLists+0xc4>)
 800ccfc:	681b      	ldr	r3, [r3, #0]
 800ccfe:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800cd00:	4b06      	ldr	r3, [pc, #24]	@ (800cd1c <prvSwitchTimerLists+0xc8>)
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	4a04      	ldr	r2, [pc, #16]	@ (800cd18 <prvSwitchTimerLists+0xc4>)
 800cd06:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800cd08:	4a04      	ldr	r2, [pc, #16]	@ (800cd1c <prvSwitchTimerLists+0xc8>)
 800cd0a:	697b      	ldr	r3, [r7, #20]
 800cd0c:	6013      	str	r3, [r2, #0]
}
 800cd0e:	bf00      	nop
 800cd10:	3718      	adds	r7, #24
 800cd12:	46bd      	mov	sp, r7
 800cd14:	bd80      	pop	{r7, pc}
 800cd16:	bf00      	nop
 800cd18:	20001a88 	.word	0x20001a88
 800cd1c:	20001a8c 	.word	0x20001a8c

0800cd20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800cd20:	b580      	push	{r7, lr}
 800cd22:	b082      	sub	sp, #8
 800cd24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800cd26:	f000 f96f 	bl	800d008 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800cd2a:	4b15      	ldr	r3, [pc, #84]	@ (800cd80 <prvCheckForValidListAndQueue+0x60>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d120      	bne.n	800cd74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800cd32:	4814      	ldr	r0, [pc, #80]	@ (800cd84 <prvCheckForValidListAndQueue+0x64>)
 800cd34:	f7fd fe16 	bl	800a964 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800cd38:	4813      	ldr	r0, [pc, #76]	@ (800cd88 <prvCheckForValidListAndQueue+0x68>)
 800cd3a:	f7fd fe13 	bl	800a964 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800cd3e:	4b13      	ldr	r3, [pc, #76]	@ (800cd8c <prvCheckForValidListAndQueue+0x6c>)
 800cd40:	4a10      	ldr	r2, [pc, #64]	@ (800cd84 <prvCheckForValidListAndQueue+0x64>)
 800cd42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800cd44:	4b12      	ldr	r3, [pc, #72]	@ (800cd90 <prvCheckForValidListAndQueue+0x70>)
 800cd46:	4a10      	ldr	r2, [pc, #64]	@ (800cd88 <prvCheckForValidListAndQueue+0x68>)
 800cd48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800cd4a:	2300      	movs	r3, #0
 800cd4c:	9300      	str	r3, [sp, #0]
 800cd4e:	4b11      	ldr	r3, [pc, #68]	@ (800cd94 <prvCheckForValidListAndQueue+0x74>)
 800cd50:	4a11      	ldr	r2, [pc, #68]	@ (800cd98 <prvCheckForValidListAndQueue+0x78>)
 800cd52:	2110      	movs	r1, #16
 800cd54:	200a      	movs	r0, #10
 800cd56:	f7fd ff23 	bl	800aba0 <xQueueGenericCreateStatic>
 800cd5a:	4603      	mov	r3, r0
 800cd5c:	4a08      	ldr	r2, [pc, #32]	@ (800cd80 <prvCheckForValidListAndQueue+0x60>)
 800cd5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800cd60:	4b07      	ldr	r3, [pc, #28]	@ (800cd80 <prvCheckForValidListAndQueue+0x60>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d005      	beq.n	800cd74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cd68:	4b05      	ldr	r3, [pc, #20]	@ (800cd80 <prvCheckForValidListAndQueue+0x60>)
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	490b      	ldr	r1, [pc, #44]	@ (800cd9c <prvCheckForValidListAndQueue+0x7c>)
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7fe fb48 	bl	800b404 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cd74:	f000 f97a 	bl	800d06c <vPortExitCritical>
}
 800cd78:	bf00      	nop
 800cd7a:	46bd      	mov	sp, r7
 800cd7c:	bd80      	pop	{r7, pc}
 800cd7e:	bf00      	nop
 800cd80:	20001a90 	.word	0x20001a90
 800cd84:	20001a60 	.word	0x20001a60
 800cd88:	20001a74 	.word	0x20001a74
 800cd8c:	20001a88 	.word	0x20001a88
 800cd90:	20001a8c 	.word	0x20001a8c
 800cd94:	20001b3c 	.word	0x20001b3c
 800cd98:	20001a9c 	.word	0x20001a9c
 800cd9c:	080103d0 	.word	0x080103d0

0800cda0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800cda0:	b480      	push	{r7}
 800cda2:	b085      	sub	sp, #20
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	60f8      	str	r0, [r7, #12]
 800cda8:	60b9      	str	r1, [r7, #8]
 800cdaa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	3b04      	subs	r3, #4
 800cdb0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cdb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	3b04      	subs	r3, #4
 800cdbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cdc0:	68bb      	ldr	r3, [r7, #8]
 800cdc2:	f023 0201 	bic.w	r2, r3, #1
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cdca:	68fb      	ldr	r3, [r7, #12]
 800cdcc:	3b04      	subs	r3, #4
 800cdce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cdd0:	4a0c      	ldr	r2, [pc, #48]	@ (800ce04 <pxPortInitialiseStack+0x64>)
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	3b14      	subs	r3, #20
 800cdda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cddc:	687a      	ldr	r2, [r7, #4]
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cde2:	68fb      	ldr	r3, [r7, #12]
 800cde4:	3b04      	subs	r3, #4
 800cde6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cde8:	68fb      	ldr	r3, [r7, #12]
 800cdea:	f06f 0202 	mvn.w	r2, #2
 800cdee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cdf0:	68fb      	ldr	r3, [r7, #12]
 800cdf2:	3b20      	subs	r3, #32
 800cdf4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cdf6:	68fb      	ldr	r3, [r7, #12]
}
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	3714      	adds	r7, #20
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr
 800ce04:	0800ce09 	.word	0x0800ce09

0800ce08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ce08:	b480      	push	{r7}
 800ce0a:	b085      	sub	sp, #20
 800ce0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ce0e:	2300      	movs	r3, #0
 800ce10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ce12:	4b13      	ldr	r3, [pc, #76]	@ (800ce60 <prvTaskExitError+0x58>)
 800ce14:	681b      	ldr	r3, [r3, #0]
 800ce16:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ce1a:	d00b      	beq.n	800ce34 <prvTaskExitError+0x2c>
	__asm volatile
 800ce1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce20:	f383 8811 	msr	BASEPRI, r3
 800ce24:	f3bf 8f6f 	isb	sy
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	60fb      	str	r3, [r7, #12]
}
 800ce2e:	bf00      	nop
 800ce30:	bf00      	nop
 800ce32:	e7fd      	b.n	800ce30 <prvTaskExitError+0x28>
	__asm volatile
 800ce34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	60bb      	str	r3, [r7, #8]
}
 800ce46:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ce48:	bf00      	nop
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d0fc      	beq.n	800ce4a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ce50:	bf00      	nop
 800ce52:	bf00      	nop
 800ce54:	3714      	adds	r7, #20
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	2000004c 	.word	0x2000004c
	...

0800ce70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ce70:	4b07      	ldr	r3, [pc, #28]	@ (800ce90 <pxCurrentTCBConst2>)
 800ce72:	6819      	ldr	r1, [r3, #0]
 800ce74:	6808      	ldr	r0, [r1, #0]
 800ce76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce7a:	f380 8809 	msr	PSP, r0
 800ce7e:	f3bf 8f6f 	isb	sy
 800ce82:	f04f 0000 	mov.w	r0, #0
 800ce86:	f380 8811 	msr	BASEPRI, r0
 800ce8a:	4770      	bx	lr
 800ce8c:	f3af 8000 	nop.w

0800ce90 <pxCurrentTCBConst2>:
 800ce90:	20001560 	.word	0x20001560
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ce94:	bf00      	nop
 800ce96:	bf00      	nop

0800ce98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ce98:	4808      	ldr	r0, [pc, #32]	@ (800cebc <prvPortStartFirstTask+0x24>)
 800ce9a:	6800      	ldr	r0, [r0, #0]
 800ce9c:	6800      	ldr	r0, [r0, #0]
 800ce9e:	f380 8808 	msr	MSP, r0
 800cea2:	f04f 0000 	mov.w	r0, #0
 800cea6:	f380 8814 	msr	CONTROL, r0
 800ceaa:	b662      	cpsie	i
 800ceac:	b661      	cpsie	f
 800ceae:	f3bf 8f4f 	dsb	sy
 800ceb2:	f3bf 8f6f 	isb	sy
 800ceb6:	df00      	svc	0
 800ceb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ceba:	bf00      	nop
 800cebc:	e000ed08 	.word	0xe000ed08

0800cec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b086      	sub	sp, #24
 800cec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cec6:	4b47      	ldr	r3, [pc, #284]	@ (800cfe4 <xPortStartScheduler+0x124>)
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	4a47      	ldr	r2, [pc, #284]	@ (800cfe8 <xPortStartScheduler+0x128>)
 800cecc:	4293      	cmp	r3, r2
 800cece:	d10b      	bne.n	800cee8 <xPortStartScheduler+0x28>
	__asm volatile
 800ced0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ced4:	f383 8811 	msr	BASEPRI, r3
 800ced8:	f3bf 8f6f 	isb	sy
 800cedc:	f3bf 8f4f 	dsb	sy
 800cee0:	60fb      	str	r3, [r7, #12]
}
 800cee2:	bf00      	nop
 800cee4:	bf00      	nop
 800cee6:	e7fd      	b.n	800cee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cee8:	4b3e      	ldr	r3, [pc, #248]	@ (800cfe4 <xPortStartScheduler+0x124>)
 800ceea:	681b      	ldr	r3, [r3, #0]
 800ceec:	4a3f      	ldr	r2, [pc, #252]	@ (800cfec <xPortStartScheduler+0x12c>)
 800ceee:	4293      	cmp	r3, r2
 800cef0:	d10b      	bne.n	800cf0a <xPortStartScheduler+0x4a>
	__asm volatile
 800cef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cef6:	f383 8811 	msr	BASEPRI, r3
 800cefa:	f3bf 8f6f 	isb	sy
 800cefe:	f3bf 8f4f 	dsb	sy
 800cf02:	613b      	str	r3, [r7, #16]
}
 800cf04:	bf00      	nop
 800cf06:	bf00      	nop
 800cf08:	e7fd      	b.n	800cf06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cf0a:	4b39      	ldr	r3, [pc, #228]	@ (800cff0 <xPortStartScheduler+0x130>)
 800cf0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	781b      	ldrb	r3, [r3, #0]
 800cf12:	b2db      	uxtb	r3, r3
 800cf14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cf16:	697b      	ldr	r3, [r7, #20]
 800cf18:	22ff      	movs	r2, #255	@ 0xff
 800cf1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cf1c:	697b      	ldr	r3, [r7, #20]
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	b2db      	uxtb	r3, r3
 800cf22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cf24:	78fb      	ldrb	r3, [r7, #3]
 800cf26:	b2db      	uxtb	r3, r3
 800cf28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cf2c:	b2da      	uxtb	r2, r3
 800cf2e:	4b31      	ldr	r3, [pc, #196]	@ (800cff4 <xPortStartScheduler+0x134>)
 800cf30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cf32:	4b31      	ldr	r3, [pc, #196]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf34:	2207      	movs	r2, #7
 800cf36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf38:	e009      	b.n	800cf4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cf3a:	4b2f      	ldr	r3, [pc, #188]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	3b01      	subs	r3, #1
 800cf40:	4a2d      	ldr	r2, [pc, #180]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cf44:	78fb      	ldrb	r3, [r7, #3]
 800cf46:	b2db      	uxtb	r3, r3
 800cf48:	005b      	lsls	r3, r3, #1
 800cf4a:	b2db      	uxtb	r3, r3
 800cf4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cf4e:	78fb      	ldrb	r3, [r7, #3]
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cf56:	2b80      	cmp	r3, #128	@ 0x80
 800cf58:	d0ef      	beq.n	800cf3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cf5a:	4b27      	ldr	r3, [pc, #156]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f1c3 0307 	rsb	r3, r3, #7
 800cf62:	2b04      	cmp	r3, #4
 800cf64:	d00b      	beq.n	800cf7e <xPortStartScheduler+0xbe>
	__asm volatile
 800cf66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf6a:	f383 8811 	msr	BASEPRI, r3
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f3bf 8f4f 	dsb	sy
 800cf76:	60bb      	str	r3, [r7, #8]
}
 800cf78:	bf00      	nop
 800cf7a:	bf00      	nop
 800cf7c:	e7fd      	b.n	800cf7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cf7e:	4b1e      	ldr	r3, [pc, #120]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	021b      	lsls	r3, r3, #8
 800cf84:	4a1c      	ldr	r2, [pc, #112]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cf88:	4b1b      	ldr	r3, [pc, #108]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cf90:	4a19      	ldr	r2, [pc, #100]	@ (800cff8 <xPortStartScheduler+0x138>)
 800cf92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	b2da      	uxtb	r2, r3
 800cf98:	697b      	ldr	r3, [r7, #20]
 800cf9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cf9c:	4b17      	ldr	r3, [pc, #92]	@ (800cffc <xPortStartScheduler+0x13c>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	4a16      	ldr	r2, [pc, #88]	@ (800cffc <xPortStartScheduler+0x13c>)
 800cfa2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cfa6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cfa8:	4b14      	ldr	r3, [pc, #80]	@ (800cffc <xPortStartScheduler+0x13c>)
 800cfaa:	681b      	ldr	r3, [r3, #0]
 800cfac:	4a13      	ldr	r2, [pc, #76]	@ (800cffc <xPortStartScheduler+0x13c>)
 800cfae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800cfb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cfb4:	f000 f8da 	bl	800d16c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cfb8:	4b11      	ldr	r3, [pc, #68]	@ (800d000 <xPortStartScheduler+0x140>)
 800cfba:	2200      	movs	r2, #0
 800cfbc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cfbe:	f000 f8f9 	bl	800d1b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cfc2:	4b10      	ldr	r3, [pc, #64]	@ (800d004 <xPortStartScheduler+0x144>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	4a0f      	ldr	r2, [pc, #60]	@ (800d004 <xPortStartScheduler+0x144>)
 800cfc8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cfcc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cfce:	f7ff ff63 	bl	800ce98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cfd2:	f7fe ff49 	bl	800be68 <vTaskSwitchContext>
	prvTaskExitError();
 800cfd6:	f7ff ff17 	bl	800ce08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cfda:	2300      	movs	r3, #0
}
 800cfdc:	4618      	mov	r0, r3
 800cfde:	3718      	adds	r7, #24
 800cfe0:	46bd      	mov	sp, r7
 800cfe2:	bd80      	pop	{r7, pc}
 800cfe4:	e000ed00 	.word	0xe000ed00
 800cfe8:	410fc271 	.word	0x410fc271
 800cfec:	410fc270 	.word	0x410fc270
 800cff0:	e000e400 	.word	0xe000e400
 800cff4:	20001b8c 	.word	0x20001b8c
 800cff8:	20001b90 	.word	0x20001b90
 800cffc:	e000ed20 	.word	0xe000ed20
 800d000:	2000004c 	.word	0x2000004c
 800d004:	e000ef34 	.word	0xe000ef34

0800d008 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d008:	b480      	push	{r7}
 800d00a:	b083      	sub	sp, #12
 800d00c:	af00      	add	r7, sp, #0
	__asm volatile
 800d00e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d012:	f383 8811 	msr	BASEPRI, r3
 800d016:	f3bf 8f6f 	isb	sy
 800d01a:	f3bf 8f4f 	dsb	sy
 800d01e:	607b      	str	r3, [r7, #4]
}
 800d020:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d022:	4b10      	ldr	r3, [pc, #64]	@ (800d064 <vPortEnterCritical+0x5c>)
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	3301      	adds	r3, #1
 800d028:	4a0e      	ldr	r2, [pc, #56]	@ (800d064 <vPortEnterCritical+0x5c>)
 800d02a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d02c:	4b0d      	ldr	r3, [pc, #52]	@ (800d064 <vPortEnterCritical+0x5c>)
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	2b01      	cmp	r3, #1
 800d032:	d110      	bne.n	800d056 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d034:	4b0c      	ldr	r3, [pc, #48]	@ (800d068 <vPortEnterCritical+0x60>)
 800d036:	681b      	ldr	r3, [r3, #0]
 800d038:	b2db      	uxtb	r3, r3
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00b      	beq.n	800d056 <vPortEnterCritical+0x4e>
	__asm volatile
 800d03e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d042:	f383 8811 	msr	BASEPRI, r3
 800d046:	f3bf 8f6f 	isb	sy
 800d04a:	f3bf 8f4f 	dsb	sy
 800d04e:	603b      	str	r3, [r7, #0]
}
 800d050:	bf00      	nop
 800d052:	bf00      	nop
 800d054:	e7fd      	b.n	800d052 <vPortEnterCritical+0x4a>
	}
}
 800d056:	bf00      	nop
 800d058:	370c      	adds	r7, #12
 800d05a:	46bd      	mov	sp, r7
 800d05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d060:	4770      	bx	lr
 800d062:	bf00      	nop
 800d064:	2000004c 	.word	0x2000004c
 800d068:	e000ed04 	.word	0xe000ed04

0800d06c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d06c:	b480      	push	{r7}
 800d06e:	b083      	sub	sp, #12
 800d070:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d072:	4b12      	ldr	r3, [pc, #72]	@ (800d0bc <vPortExitCritical+0x50>)
 800d074:	681b      	ldr	r3, [r3, #0]
 800d076:	2b00      	cmp	r3, #0
 800d078:	d10b      	bne.n	800d092 <vPortExitCritical+0x26>
	__asm volatile
 800d07a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07e:	f383 8811 	msr	BASEPRI, r3
 800d082:	f3bf 8f6f 	isb	sy
 800d086:	f3bf 8f4f 	dsb	sy
 800d08a:	607b      	str	r3, [r7, #4]
}
 800d08c:	bf00      	nop
 800d08e:	bf00      	nop
 800d090:	e7fd      	b.n	800d08e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800d092:	4b0a      	ldr	r3, [pc, #40]	@ (800d0bc <vPortExitCritical+0x50>)
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	3b01      	subs	r3, #1
 800d098:	4a08      	ldr	r2, [pc, #32]	@ (800d0bc <vPortExitCritical+0x50>)
 800d09a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d09c:	4b07      	ldr	r3, [pc, #28]	@ (800d0bc <vPortExitCritical+0x50>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	2b00      	cmp	r3, #0
 800d0a2:	d105      	bne.n	800d0b0 <vPortExitCritical+0x44>
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d0a8:	683b      	ldr	r3, [r7, #0]
 800d0aa:	f383 8811 	msr	BASEPRI, r3
}
 800d0ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d0b0:	bf00      	nop
 800d0b2:	370c      	adds	r7, #12
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0ba:	4770      	bx	lr
 800d0bc:	2000004c 	.word	0x2000004c

0800d0c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d0c0:	f3ef 8009 	mrs	r0, PSP
 800d0c4:	f3bf 8f6f 	isb	sy
 800d0c8:	4b15      	ldr	r3, [pc, #84]	@ (800d120 <pxCurrentTCBConst>)
 800d0ca:	681a      	ldr	r2, [r3, #0]
 800d0cc:	f01e 0f10 	tst.w	lr, #16
 800d0d0:	bf08      	it	eq
 800d0d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d0d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0da:	6010      	str	r0, [r2, #0]
 800d0dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d0e0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d0e4:	f380 8811 	msr	BASEPRI, r0
 800d0e8:	f3bf 8f4f 	dsb	sy
 800d0ec:	f3bf 8f6f 	isb	sy
 800d0f0:	f7fe feba 	bl	800be68 <vTaskSwitchContext>
 800d0f4:	f04f 0000 	mov.w	r0, #0
 800d0f8:	f380 8811 	msr	BASEPRI, r0
 800d0fc:	bc09      	pop	{r0, r3}
 800d0fe:	6819      	ldr	r1, [r3, #0]
 800d100:	6808      	ldr	r0, [r1, #0]
 800d102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d106:	f01e 0f10 	tst.w	lr, #16
 800d10a:	bf08      	it	eq
 800d10c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d110:	f380 8809 	msr	PSP, r0
 800d114:	f3bf 8f6f 	isb	sy
 800d118:	4770      	bx	lr
 800d11a:	bf00      	nop
 800d11c:	f3af 8000 	nop.w

0800d120 <pxCurrentTCBConst>:
 800d120:	20001560 	.word	0x20001560
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d124:	bf00      	nop
 800d126:	bf00      	nop

0800d128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
	__asm volatile
 800d12e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d132:	f383 8811 	msr	BASEPRI, r3
 800d136:	f3bf 8f6f 	isb	sy
 800d13a:	f3bf 8f4f 	dsb	sy
 800d13e:	607b      	str	r3, [r7, #4]
}
 800d140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d142:	f7fe fdd7 	bl	800bcf4 <xTaskIncrementTick>
 800d146:	4603      	mov	r3, r0
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d003      	beq.n	800d154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d14c:	4b06      	ldr	r3, [pc, #24]	@ (800d168 <xPortSysTickHandler+0x40>)
 800d14e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d152:	601a      	str	r2, [r3, #0]
 800d154:	2300      	movs	r3, #0
 800d156:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d158:	683b      	ldr	r3, [r7, #0]
 800d15a:	f383 8811 	msr	BASEPRI, r3
}
 800d15e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d160:	bf00      	nop
 800d162:	3708      	adds	r7, #8
 800d164:	46bd      	mov	sp, r7
 800d166:	bd80      	pop	{r7, pc}
 800d168:	e000ed04 	.word	0xe000ed04

0800d16c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d16c:	b480      	push	{r7}
 800d16e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d170:	4b0b      	ldr	r3, [pc, #44]	@ (800d1a0 <vPortSetupTimerInterrupt+0x34>)
 800d172:	2200      	movs	r2, #0
 800d174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d176:	4b0b      	ldr	r3, [pc, #44]	@ (800d1a4 <vPortSetupTimerInterrupt+0x38>)
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d17c:	4b0a      	ldr	r3, [pc, #40]	@ (800d1a8 <vPortSetupTimerInterrupt+0x3c>)
 800d17e:	681b      	ldr	r3, [r3, #0]
 800d180:	4a0a      	ldr	r2, [pc, #40]	@ (800d1ac <vPortSetupTimerInterrupt+0x40>)
 800d182:	fba2 2303 	umull	r2, r3, r2, r3
 800d186:	099b      	lsrs	r3, r3, #6
 800d188:	4a09      	ldr	r2, [pc, #36]	@ (800d1b0 <vPortSetupTimerInterrupt+0x44>)
 800d18a:	3b01      	subs	r3, #1
 800d18c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d18e:	4b04      	ldr	r3, [pc, #16]	@ (800d1a0 <vPortSetupTimerInterrupt+0x34>)
 800d190:	2207      	movs	r2, #7
 800d192:	601a      	str	r2, [r3, #0]
}
 800d194:	bf00      	nop
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr
 800d19e:	bf00      	nop
 800d1a0:	e000e010 	.word	0xe000e010
 800d1a4:	e000e018 	.word	0xe000e018
 800d1a8:	20000040 	.word	0x20000040
 800d1ac:	10624dd3 	.word	0x10624dd3
 800d1b0:	e000e014 	.word	0xe000e014

0800d1b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d1b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800d1c4 <vPortEnableVFP+0x10>
 800d1b8:	6801      	ldr	r1, [r0, #0]
 800d1ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800d1be:	6001      	str	r1, [r0, #0]
 800d1c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d1c2:	bf00      	nop
 800d1c4:	e000ed88 	.word	0xe000ed88

0800d1c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800d1c8:	b480      	push	{r7}
 800d1ca:	b085      	sub	sp, #20
 800d1cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d1ce:	f3ef 8305 	mrs	r3, IPSR
 800d1d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b0f      	cmp	r3, #15
 800d1d8:	d915      	bls.n	800d206 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d1da:	4a18      	ldr	r2, [pc, #96]	@ (800d23c <vPortValidateInterruptPriority+0x74>)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	4413      	add	r3, r2
 800d1e0:	781b      	ldrb	r3, [r3, #0]
 800d1e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d1e4:	4b16      	ldr	r3, [pc, #88]	@ (800d240 <vPortValidateInterruptPriority+0x78>)
 800d1e6:	781b      	ldrb	r3, [r3, #0]
 800d1e8:	7afa      	ldrb	r2, [r7, #11]
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d20b      	bcs.n	800d206 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1f2:	f383 8811 	msr	BASEPRI, r3
 800d1f6:	f3bf 8f6f 	isb	sy
 800d1fa:	f3bf 8f4f 	dsb	sy
 800d1fe:	607b      	str	r3, [r7, #4]
}
 800d200:	bf00      	nop
 800d202:	bf00      	nop
 800d204:	e7fd      	b.n	800d202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d206:	4b0f      	ldr	r3, [pc, #60]	@ (800d244 <vPortValidateInterruptPriority+0x7c>)
 800d208:	681b      	ldr	r3, [r3, #0]
 800d20a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800d20e:	4b0e      	ldr	r3, [pc, #56]	@ (800d248 <vPortValidateInterruptPriority+0x80>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	429a      	cmp	r2, r3
 800d214:	d90b      	bls.n	800d22e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800d216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d21a:	f383 8811 	msr	BASEPRI, r3
 800d21e:	f3bf 8f6f 	isb	sy
 800d222:	f3bf 8f4f 	dsb	sy
 800d226:	603b      	str	r3, [r7, #0]
}
 800d228:	bf00      	nop
 800d22a:	bf00      	nop
 800d22c:	e7fd      	b.n	800d22a <vPortValidateInterruptPriority+0x62>
	}
 800d22e:	bf00      	nop
 800d230:	3714      	adds	r7, #20
 800d232:	46bd      	mov	sp, r7
 800d234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d238:	4770      	bx	lr
 800d23a:	bf00      	nop
 800d23c:	e000e3f0 	.word	0xe000e3f0
 800d240:	20001b8c 	.word	0x20001b8c
 800d244:	e000ed0c 	.word	0xe000ed0c
 800d248:	20001b90 	.word	0x20001b90

0800d24c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d24c:	b580      	push	{r7, lr}
 800d24e:	b08a      	sub	sp, #40	@ 0x28
 800d250:	af00      	add	r7, sp, #0
 800d252:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d254:	2300      	movs	r3, #0
 800d256:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d258:	f7fe fb96 	bl	800b988 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d25c:	4b5c      	ldr	r3, [pc, #368]	@ (800d3d0 <pvPortMalloc+0x184>)
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d101      	bne.n	800d268 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d264:	f000 f924 	bl	800d4b0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d268:	4b5a      	ldr	r3, [pc, #360]	@ (800d3d4 <pvPortMalloc+0x188>)
 800d26a:	681a      	ldr	r2, [r3, #0]
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	4013      	ands	r3, r2
 800d270:	2b00      	cmp	r3, #0
 800d272:	f040 8095 	bne.w	800d3a0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d01e      	beq.n	800d2ba <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800d27c:	2208      	movs	r2, #8
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	4413      	add	r3, r2
 800d282:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	f003 0307 	and.w	r3, r3, #7
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d015      	beq.n	800d2ba <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f023 0307 	bic.w	r3, r3, #7
 800d294:	3308      	adds	r3, #8
 800d296:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	f003 0307 	and.w	r3, r3, #7
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d00b      	beq.n	800d2ba <pvPortMalloc+0x6e>
	__asm volatile
 800d2a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2a6:	f383 8811 	msr	BASEPRI, r3
 800d2aa:	f3bf 8f6f 	isb	sy
 800d2ae:	f3bf 8f4f 	dsb	sy
 800d2b2:	617b      	str	r3, [r7, #20]
}
 800d2b4:	bf00      	nop
 800d2b6:	bf00      	nop
 800d2b8:	e7fd      	b.n	800d2b6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d06f      	beq.n	800d3a0 <pvPortMalloc+0x154>
 800d2c0:	4b45      	ldr	r3, [pc, #276]	@ (800d3d8 <pvPortMalloc+0x18c>)
 800d2c2:	681b      	ldr	r3, [r3, #0]
 800d2c4:	687a      	ldr	r2, [r7, #4]
 800d2c6:	429a      	cmp	r2, r3
 800d2c8:	d86a      	bhi.n	800d3a0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d2ca:	4b44      	ldr	r3, [pc, #272]	@ (800d3dc <pvPortMalloc+0x190>)
 800d2cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d2ce:	4b43      	ldr	r3, [pc, #268]	@ (800d3dc <pvPortMalloc+0x190>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2d4:	e004      	b.n	800d2e0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d2d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d2e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2e2:	685b      	ldr	r3, [r3, #4]
 800d2e4:	687a      	ldr	r2, [r7, #4]
 800d2e6:	429a      	cmp	r2, r3
 800d2e8:	d903      	bls.n	800d2f2 <pvPortMalloc+0xa6>
 800d2ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d1f1      	bne.n	800d2d6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d2f2:	4b37      	ldr	r3, [pc, #220]	@ (800d3d0 <pvPortMalloc+0x184>)
 800d2f4:	681b      	ldr	r3, [r3, #0]
 800d2f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d051      	beq.n	800d3a0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d2fc:	6a3b      	ldr	r3, [r7, #32]
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	2208      	movs	r2, #8
 800d302:	4413      	add	r3, r2
 800d304:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d308:	681a      	ldr	r2, [r3, #0]
 800d30a:	6a3b      	ldr	r3, [r7, #32]
 800d30c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d30e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d310:	685a      	ldr	r2, [r3, #4]
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	1ad2      	subs	r2, r2, r3
 800d316:	2308      	movs	r3, #8
 800d318:	005b      	lsls	r3, r3, #1
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d920      	bls.n	800d360 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d31e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	4413      	add	r3, r2
 800d324:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d326:	69bb      	ldr	r3, [r7, #24]
 800d328:	f003 0307 	and.w	r3, r3, #7
 800d32c:	2b00      	cmp	r3, #0
 800d32e:	d00b      	beq.n	800d348 <pvPortMalloc+0xfc>
	__asm volatile
 800d330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d334:	f383 8811 	msr	BASEPRI, r3
 800d338:	f3bf 8f6f 	isb	sy
 800d33c:	f3bf 8f4f 	dsb	sy
 800d340:	613b      	str	r3, [r7, #16]
}
 800d342:	bf00      	nop
 800d344:	bf00      	nop
 800d346:	e7fd      	b.n	800d344 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d34a:	685a      	ldr	r2, [r3, #4]
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	1ad2      	subs	r2, r2, r3
 800d350:	69bb      	ldr	r3, [r7, #24]
 800d352:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d356:	687a      	ldr	r2, [r7, #4]
 800d358:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d35a:	69b8      	ldr	r0, [r7, #24]
 800d35c:	f000 f90a 	bl	800d574 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d360:	4b1d      	ldr	r3, [pc, #116]	@ (800d3d8 <pvPortMalloc+0x18c>)
 800d362:	681a      	ldr	r2, [r3, #0]
 800d364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d366:	685b      	ldr	r3, [r3, #4]
 800d368:	1ad3      	subs	r3, r2, r3
 800d36a:	4a1b      	ldr	r2, [pc, #108]	@ (800d3d8 <pvPortMalloc+0x18c>)
 800d36c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d36e:	4b1a      	ldr	r3, [pc, #104]	@ (800d3d8 <pvPortMalloc+0x18c>)
 800d370:	681a      	ldr	r2, [r3, #0]
 800d372:	4b1b      	ldr	r3, [pc, #108]	@ (800d3e0 <pvPortMalloc+0x194>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	429a      	cmp	r2, r3
 800d378:	d203      	bcs.n	800d382 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d37a:	4b17      	ldr	r3, [pc, #92]	@ (800d3d8 <pvPortMalloc+0x18c>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	4a18      	ldr	r2, [pc, #96]	@ (800d3e0 <pvPortMalloc+0x194>)
 800d380:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d384:	685a      	ldr	r2, [r3, #4]
 800d386:	4b13      	ldr	r3, [pc, #76]	@ (800d3d4 <pvPortMalloc+0x188>)
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	431a      	orrs	r2, r3
 800d38c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d38e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d392:	2200      	movs	r2, #0
 800d394:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d396:	4b13      	ldr	r3, [pc, #76]	@ (800d3e4 <pvPortMalloc+0x198>)
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	3301      	adds	r3, #1
 800d39c:	4a11      	ldr	r2, [pc, #68]	@ (800d3e4 <pvPortMalloc+0x198>)
 800d39e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d3a0:	f7fe fb00 	bl	800b9a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d3a4:	69fb      	ldr	r3, [r7, #28]
 800d3a6:	f003 0307 	and.w	r3, r3, #7
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d00b      	beq.n	800d3c6 <pvPortMalloc+0x17a>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	60fb      	str	r3, [r7, #12]
}
 800d3c0:	bf00      	nop
 800d3c2:	bf00      	nop
 800d3c4:	e7fd      	b.n	800d3c2 <pvPortMalloc+0x176>
	return pvReturn;
 800d3c6:	69fb      	ldr	r3, [r7, #28]
}
 800d3c8:	4618      	mov	r0, r3
 800d3ca:	3728      	adds	r7, #40	@ 0x28
 800d3cc:	46bd      	mov	sp, r7
 800d3ce:	bd80      	pop	{r7, pc}
 800d3d0:	2000579c 	.word	0x2000579c
 800d3d4:	200057b0 	.word	0x200057b0
 800d3d8:	200057a0 	.word	0x200057a0
 800d3dc:	20005794 	.word	0x20005794
 800d3e0:	200057a4 	.word	0x200057a4
 800d3e4:	200057a8 	.word	0x200057a8

0800d3e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	b086      	sub	sp, #24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d04f      	beq.n	800d49a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d3fa:	2308      	movs	r3, #8
 800d3fc:	425b      	negs	r3, r3
 800d3fe:	697a      	ldr	r2, [r7, #20]
 800d400:	4413      	add	r3, r2
 800d402:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d404:	697b      	ldr	r3, [r7, #20]
 800d406:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d408:	693b      	ldr	r3, [r7, #16]
 800d40a:	685a      	ldr	r2, [r3, #4]
 800d40c:	4b25      	ldr	r3, [pc, #148]	@ (800d4a4 <vPortFree+0xbc>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4013      	ands	r3, r2
 800d412:	2b00      	cmp	r3, #0
 800d414:	d10b      	bne.n	800d42e <vPortFree+0x46>
	__asm volatile
 800d416:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d41a:	f383 8811 	msr	BASEPRI, r3
 800d41e:	f3bf 8f6f 	isb	sy
 800d422:	f3bf 8f4f 	dsb	sy
 800d426:	60fb      	str	r3, [r7, #12]
}
 800d428:	bf00      	nop
 800d42a:	bf00      	nop
 800d42c:	e7fd      	b.n	800d42a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d42e:	693b      	ldr	r3, [r7, #16]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d00b      	beq.n	800d44e <vPortFree+0x66>
	__asm volatile
 800d436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d43a:	f383 8811 	msr	BASEPRI, r3
 800d43e:	f3bf 8f6f 	isb	sy
 800d442:	f3bf 8f4f 	dsb	sy
 800d446:	60bb      	str	r3, [r7, #8]
}
 800d448:	bf00      	nop
 800d44a:	bf00      	nop
 800d44c:	e7fd      	b.n	800d44a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	685a      	ldr	r2, [r3, #4]
 800d452:	4b14      	ldr	r3, [pc, #80]	@ (800d4a4 <vPortFree+0xbc>)
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	4013      	ands	r3, r2
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d01e      	beq.n	800d49a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d45c:	693b      	ldr	r3, [r7, #16]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d11a      	bne.n	800d49a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	685a      	ldr	r2, [r3, #4]
 800d468:	4b0e      	ldr	r3, [pc, #56]	@ (800d4a4 <vPortFree+0xbc>)
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	43db      	mvns	r3, r3
 800d46e:	401a      	ands	r2, r3
 800d470:	693b      	ldr	r3, [r7, #16]
 800d472:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d474:	f7fe fa88 	bl	800b988 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d478:	693b      	ldr	r3, [r7, #16]
 800d47a:	685a      	ldr	r2, [r3, #4]
 800d47c:	4b0a      	ldr	r3, [pc, #40]	@ (800d4a8 <vPortFree+0xc0>)
 800d47e:	681b      	ldr	r3, [r3, #0]
 800d480:	4413      	add	r3, r2
 800d482:	4a09      	ldr	r2, [pc, #36]	@ (800d4a8 <vPortFree+0xc0>)
 800d484:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d486:	6938      	ldr	r0, [r7, #16]
 800d488:	f000 f874 	bl	800d574 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d48c:	4b07      	ldr	r3, [pc, #28]	@ (800d4ac <vPortFree+0xc4>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	3301      	adds	r3, #1
 800d492:	4a06      	ldr	r2, [pc, #24]	@ (800d4ac <vPortFree+0xc4>)
 800d494:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d496:	f7fe fa85 	bl	800b9a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d49a:	bf00      	nop
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	200057b0 	.word	0x200057b0
 800d4a8:	200057a0 	.word	0x200057a0
 800d4ac:	200057ac 	.word	0x200057ac

0800d4b0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d4b0:	b480      	push	{r7}
 800d4b2:	b085      	sub	sp, #20
 800d4b4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d4b6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d4ba:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d4bc:	4b27      	ldr	r3, [pc, #156]	@ (800d55c <prvHeapInit+0xac>)
 800d4be:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	f003 0307 	and.w	r3, r3, #7
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d00c      	beq.n	800d4e4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	3307      	adds	r3, #7
 800d4ce:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f023 0307 	bic.w	r3, r3, #7
 800d4d6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d4d8:	68ba      	ldr	r2, [r7, #8]
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	1ad3      	subs	r3, r2, r3
 800d4de:	4a1f      	ldr	r2, [pc, #124]	@ (800d55c <prvHeapInit+0xac>)
 800d4e0:	4413      	add	r3, r2
 800d4e2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d4e8:	4a1d      	ldr	r2, [pc, #116]	@ (800d560 <prvHeapInit+0xb0>)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d4ee:	4b1c      	ldr	r3, [pc, #112]	@ (800d560 <prvHeapInit+0xb0>)
 800d4f0:	2200      	movs	r2, #0
 800d4f2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	68ba      	ldr	r2, [r7, #8]
 800d4f8:	4413      	add	r3, r2
 800d4fa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d4fc:	2208      	movs	r2, #8
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	1a9b      	subs	r3, r3, r2
 800d502:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f023 0307 	bic.w	r3, r3, #7
 800d50a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	4a15      	ldr	r2, [pc, #84]	@ (800d564 <prvHeapInit+0xb4>)
 800d510:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d512:	4b14      	ldr	r3, [pc, #80]	@ (800d564 <prvHeapInit+0xb4>)
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	2200      	movs	r2, #0
 800d518:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d51a:	4b12      	ldr	r3, [pc, #72]	@ (800d564 <prvHeapInit+0xb4>)
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	2200      	movs	r2, #0
 800d520:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	68fa      	ldr	r2, [r7, #12]
 800d52a:	1ad2      	subs	r2, r2, r3
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d530:	4b0c      	ldr	r3, [pc, #48]	@ (800d564 <prvHeapInit+0xb4>)
 800d532:	681a      	ldr	r2, [r3, #0]
 800d534:	683b      	ldr	r3, [r7, #0]
 800d536:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d538:	683b      	ldr	r3, [r7, #0]
 800d53a:	685b      	ldr	r3, [r3, #4]
 800d53c:	4a0a      	ldr	r2, [pc, #40]	@ (800d568 <prvHeapInit+0xb8>)
 800d53e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d540:	683b      	ldr	r3, [r7, #0]
 800d542:	685b      	ldr	r3, [r3, #4]
 800d544:	4a09      	ldr	r2, [pc, #36]	@ (800d56c <prvHeapInit+0xbc>)
 800d546:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d548:	4b09      	ldr	r3, [pc, #36]	@ (800d570 <prvHeapInit+0xc0>)
 800d54a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d54e:	601a      	str	r2, [r3, #0]
}
 800d550:	bf00      	nop
 800d552:	3714      	adds	r7, #20
 800d554:	46bd      	mov	sp, r7
 800d556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55a:	4770      	bx	lr
 800d55c:	20001b94 	.word	0x20001b94
 800d560:	20005794 	.word	0x20005794
 800d564:	2000579c 	.word	0x2000579c
 800d568:	200057a4 	.word	0x200057a4
 800d56c:	200057a0 	.word	0x200057a0
 800d570:	200057b0 	.word	0x200057b0

0800d574 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d574:	b480      	push	{r7}
 800d576:	b085      	sub	sp, #20
 800d578:	af00      	add	r7, sp, #0
 800d57a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d57c:	4b28      	ldr	r3, [pc, #160]	@ (800d620 <prvInsertBlockIntoFreeList+0xac>)
 800d57e:	60fb      	str	r3, [r7, #12]
 800d580:	e002      	b.n	800d588 <prvInsertBlockIntoFreeList+0x14>
 800d582:	68fb      	ldr	r3, [r7, #12]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	60fb      	str	r3, [r7, #12]
 800d588:	68fb      	ldr	r3, [r7, #12]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	687a      	ldr	r2, [r7, #4]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d8f7      	bhi.n	800d582 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d592:	68fb      	ldr	r3, [r7, #12]
 800d594:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	685b      	ldr	r3, [r3, #4]
 800d59a:	68ba      	ldr	r2, [r7, #8]
 800d59c:	4413      	add	r3, r2
 800d59e:	687a      	ldr	r2, [r7, #4]
 800d5a0:	429a      	cmp	r2, r3
 800d5a2:	d108      	bne.n	800d5b6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	685a      	ldr	r2, [r3, #4]
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	685b      	ldr	r3, [r3, #4]
 800d5ac:	441a      	add	r2, r3
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d5b2:	68fb      	ldr	r3, [r7, #12]
 800d5b4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	685b      	ldr	r3, [r3, #4]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	441a      	add	r2, r3
 800d5c2:	68fb      	ldr	r3, [r7, #12]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d118      	bne.n	800d5fc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	681a      	ldr	r2, [r3, #0]
 800d5ce:	4b15      	ldr	r3, [pc, #84]	@ (800d624 <prvInsertBlockIntoFreeList+0xb0>)
 800d5d0:	681b      	ldr	r3, [r3, #0]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d00d      	beq.n	800d5f2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	685a      	ldr	r2, [r3, #4]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	685b      	ldr	r3, [r3, #4]
 800d5e0:	441a      	add	r2, r3
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d5e6:	68fb      	ldr	r3, [r7, #12]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	681a      	ldr	r2, [r3, #0]
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	601a      	str	r2, [r3, #0]
 800d5f0:	e008      	b.n	800d604 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d5f2:	4b0c      	ldr	r3, [pc, #48]	@ (800d624 <prvInsertBlockIntoFreeList+0xb0>)
 800d5f4:	681a      	ldr	r2, [r3, #0]
 800d5f6:	687b      	ldr	r3, [r7, #4]
 800d5f8:	601a      	str	r2, [r3, #0]
 800d5fa:	e003      	b.n	800d604 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681a      	ldr	r2, [r3, #0]
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d604:	68fa      	ldr	r2, [r7, #12]
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	429a      	cmp	r2, r3
 800d60a:	d002      	beq.n	800d612 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	687a      	ldr	r2, [r7, #4]
 800d610:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d612:	bf00      	nop
 800d614:	3714      	adds	r7, #20
 800d616:	46bd      	mov	sp, r7
 800d618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d61c:	4770      	bx	lr
 800d61e:	bf00      	nop
 800d620:	20005794 	.word	0x20005794
 800d624:	2000579c 	.word	0x2000579c

0800d628 <__cvt>:
 800d628:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d62c:	ec57 6b10 	vmov	r6, r7, d0
 800d630:	2f00      	cmp	r7, #0
 800d632:	460c      	mov	r4, r1
 800d634:	4619      	mov	r1, r3
 800d636:	463b      	mov	r3, r7
 800d638:	bfbb      	ittet	lt
 800d63a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d63e:	461f      	movlt	r7, r3
 800d640:	2300      	movge	r3, #0
 800d642:	232d      	movlt	r3, #45	@ 0x2d
 800d644:	700b      	strb	r3, [r1, #0]
 800d646:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d648:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d64c:	4691      	mov	r9, r2
 800d64e:	f023 0820 	bic.w	r8, r3, #32
 800d652:	bfbc      	itt	lt
 800d654:	4632      	movlt	r2, r6
 800d656:	4616      	movlt	r6, r2
 800d658:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d65c:	d005      	beq.n	800d66a <__cvt+0x42>
 800d65e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d662:	d100      	bne.n	800d666 <__cvt+0x3e>
 800d664:	3401      	adds	r4, #1
 800d666:	2102      	movs	r1, #2
 800d668:	e000      	b.n	800d66c <__cvt+0x44>
 800d66a:	2103      	movs	r1, #3
 800d66c:	ab03      	add	r3, sp, #12
 800d66e:	9301      	str	r3, [sp, #4]
 800d670:	ab02      	add	r3, sp, #8
 800d672:	9300      	str	r3, [sp, #0]
 800d674:	ec47 6b10 	vmov	d0, r6, r7
 800d678:	4653      	mov	r3, sl
 800d67a:	4622      	mov	r2, r4
 800d67c:	f000 fe3c 	bl	800e2f8 <_dtoa_r>
 800d680:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d684:	4605      	mov	r5, r0
 800d686:	d119      	bne.n	800d6bc <__cvt+0x94>
 800d688:	f019 0f01 	tst.w	r9, #1
 800d68c:	d00e      	beq.n	800d6ac <__cvt+0x84>
 800d68e:	eb00 0904 	add.w	r9, r0, r4
 800d692:	2200      	movs	r2, #0
 800d694:	2300      	movs	r3, #0
 800d696:	4630      	mov	r0, r6
 800d698:	4639      	mov	r1, r7
 800d69a:	f7f3 fa15 	bl	8000ac8 <__aeabi_dcmpeq>
 800d69e:	b108      	cbz	r0, 800d6a4 <__cvt+0x7c>
 800d6a0:	f8cd 900c 	str.w	r9, [sp, #12]
 800d6a4:	2230      	movs	r2, #48	@ 0x30
 800d6a6:	9b03      	ldr	r3, [sp, #12]
 800d6a8:	454b      	cmp	r3, r9
 800d6aa:	d31e      	bcc.n	800d6ea <__cvt+0xc2>
 800d6ac:	9b03      	ldr	r3, [sp, #12]
 800d6ae:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d6b0:	1b5b      	subs	r3, r3, r5
 800d6b2:	4628      	mov	r0, r5
 800d6b4:	6013      	str	r3, [r2, #0]
 800d6b6:	b004      	add	sp, #16
 800d6b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6bc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d6c0:	eb00 0904 	add.w	r9, r0, r4
 800d6c4:	d1e5      	bne.n	800d692 <__cvt+0x6a>
 800d6c6:	7803      	ldrb	r3, [r0, #0]
 800d6c8:	2b30      	cmp	r3, #48	@ 0x30
 800d6ca:	d10a      	bne.n	800d6e2 <__cvt+0xba>
 800d6cc:	2200      	movs	r2, #0
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	f7f3 f9f8 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6d8:	b918      	cbnz	r0, 800d6e2 <__cvt+0xba>
 800d6da:	f1c4 0401 	rsb	r4, r4, #1
 800d6de:	f8ca 4000 	str.w	r4, [sl]
 800d6e2:	f8da 3000 	ldr.w	r3, [sl]
 800d6e6:	4499      	add	r9, r3
 800d6e8:	e7d3      	b.n	800d692 <__cvt+0x6a>
 800d6ea:	1c59      	adds	r1, r3, #1
 800d6ec:	9103      	str	r1, [sp, #12]
 800d6ee:	701a      	strb	r2, [r3, #0]
 800d6f0:	e7d9      	b.n	800d6a6 <__cvt+0x7e>

0800d6f2 <__exponent>:
 800d6f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d6f4:	2900      	cmp	r1, #0
 800d6f6:	bfba      	itte	lt
 800d6f8:	4249      	neglt	r1, r1
 800d6fa:	232d      	movlt	r3, #45	@ 0x2d
 800d6fc:	232b      	movge	r3, #43	@ 0x2b
 800d6fe:	2909      	cmp	r1, #9
 800d700:	7002      	strb	r2, [r0, #0]
 800d702:	7043      	strb	r3, [r0, #1]
 800d704:	dd29      	ble.n	800d75a <__exponent+0x68>
 800d706:	f10d 0307 	add.w	r3, sp, #7
 800d70a:	461d      	mov	r5, r3
 800d70c:	270a      	movs	r7, #10
 800d70e:	461a      	mov	r2, r3
 800d710:	fbb1 f6f7 	udiv	r6, r1, r7
 800d714:	fb07 1416 	mls	r4, r7, r6, r1
 800d718:	3430      	adds	r4, #48	@ 0x30
 800d71a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d71e:	460c      	mov	r4, r1
 800d720:	2c63      	cmp	r4, #99	@ 0x63
 800d722:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800d726:	4631      	mov	r1, r6
 800d728:	dcf1      	bgt.n	800d70e <__exponent+0x1c>
 800d72a:	3130      	adds	r1, #48	@ 0x30
 800d72c:	1e94      	subs	r4, r2, #2
 800d72e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d732:	1c41      	adds	r1, r0, #1
 800d734:	4623      	mov	r3, r4
 800d736:	42ab      	cmp	r3, r5
 800d738:	d30a      	bcc.n	800d750 <__exponent+0x5e>
 800d73a:	f10d 0309 	add.w	r3, sp, #9
 800d73e:	1a9b      	subs	r3, r3, r2
 800d740:	42ac      	cmp	r4, r5
 800d742:	bf88      	it	hi
 800d744:	2300      	movhi	r3, #0
 800d746:	3302      	adds	r3, #2
 800d748:	4403      	add	r3, r0
 800d74a:	1a18      	subs	r0, r3, r0
 800d74c:	b003      	add	sp, #12
 800d74e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d750:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d754:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d758:	e7ed      	b.n	800d736 <__exponent+0x44>
 800d75a:	2330      	movs	r3, #48	@ 0x30
 800d75c:	3130      	adds	r1, #48	@ 0x30
 800d75e:	7083      	strb	r3, [r0, #2]
 800d760:	70c1      	strb	r1, [r0, #3]
 800d762:	1d03      	adds	r3, r0, #4
 800d764:	e7f1      	b.n	800d74a <__exponent+0x58>
	...

0800d768 <_printf_float>:
 800d768:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76c:	b08d      	sub	sp, #52	@ 0x34
 800d76e:	460c      	mov	r4, r1
 800d770:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d774:	4616      	mov	r6, r2
 800d776:	461f      	mov	r7, r3
 800d778:	4605      	mov	r5, r0
 800d77a:	f000 fcc3 	bl	800e104 <_localeconv_r>
 800d77e:	6803      	ldr	r3, [r0, #0]
 800d780:	9304      	str	r3, [sp, #16]
 800d782:	4618      	mov	r0, r3
 800d784:	f7f2 fd74 	bl	8000270 <strlen>
 800d788:	2300      	movs	r3, #0
 800d78a:	930a      	str	r3, [sp, #40]	@ 0x28
 800d78c:	f8d8 3000 	ldr.w	r3, [r8]
 800d790:	9005      	str	r0, [sp, #20]
 800d792:	3307      	adds	r3, #7
 800d794:	f023 0307 	bic.w	r3, r3, #7
 800d798:	f103 0208 	add.w	r2, r3, #8
 800d79c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d7a0:	f8d4 b000 	ldr.w	fp, [r4]
 800d7a4:	f8c8 2000 	str.w	r2, [r8]
 800d7a8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d7ac:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d7b0:	9307      	str	r3, [sp, #28]
 800d7b2:	f8cd 8018 	str.w	r8, [sp, #24]
 800d7b6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d7ba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7be:	4b9c      	ldr	r3, [pc, #624]	@ (800da30 <_printf_float+0x2c8>)
 800d7c0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7c4:	f7f3 f9b2 	bl	8000b2c <__aeabi_dcmpun>
 800d7c8:	bb70      	cbnz	r0, 800d828 <_printf_float+0xc0>
 800d7ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d7ce:	4b98      	ldr	r3, [pc, #608]	@ (800da30 <_printf_float+0x2c8>)
 800d7d0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d7d4:	f7f3 f98c 	bl	8000af0 <__aeabi_dcmple>
 800d7d8:	bb30      	cbnz	r0, 800d828 <_printf_float+0xc0>
 800d7da:	2200      	movs	r2, #0
 800d7dc:	2300      	movs	r3, #0
 800d7de:	4640      	mov	r0, r8
 800d7e0:	4649      	mov	r1, r9
 800d7e2:	f7f3 f97b 	bl	8000adc <__aeabi_dcmplt>
 800d7e6:	b110      	cbz	r0, 800d7ee <_printf_float+0x86>
 800d7e8:	232d      	movs	r3, #45	@ 0x2d
 800d7ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7ee:	4a91      	ldr	r2, [pc, #580]	@ (800da34 <_printf_float+0x2cc>)
 800d7f0:	4b91      	ldr	r3, [pc, #580]	@ (800da38 <_printf_float+0x2d0>)
 800d7f2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d7f6:	bf8c      	ite	hi
 800d7f8:	4690      	movhi	r8, r2
 800d7fa:	4698      	movls	r8, r3
 800d7fc:	2303      	movs	r3, #3
 800d7fe:	6123      	str	r3, [r4, #16]
 800d800:	f02b 0304 	bic.w	r3, fp, #4
 800d804:	6023      	str	r3, [r4, #0]
 800d806:	f04f 0900 	mov.w	r9, #0
 800d80a:	9700      	str	r7, [sp, #0]
 800d80c:	4633      	mov	r3, r6
 800d80e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d810:	4621      	mov	r1, r4
 800d812:	4628      	mov	r0, r5
 800d814:	f000 f9d2 	bl	800dbbc <_printf_common>
 800d818:	3001      	adds	r0, #1
 800d81a:	f040 808d 	bne.w	800d938 <_printf_float+0x1d0>
 800d81e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d822:	b00d      	add	sp, #52	@ 0x34
 800d824:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d828:	4642      	mov	r2, r8
 800d82a:	464b      	mov	r3, r9
 800d82c:	4640      	mov	r0, r8
 800d82e:	4649      	mov	r1, r9
 800d830:	f7f3 f97c 	bl	8000b2c <__aeabi_dcmpun>
 800d834:	b140      	cbz	r0, 800d848 <_printf_float+0xe0>
 800d836:	464b      	mov	r3, r9
 800d838:	2b00      	cmp	r3, #0
 800d83a:	bfbc      	itt	lt
 800d83c:	232d      	movlt	r3, #45	@ 0x2d
 800d83e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d842:	4a7e      	ldr	r2, [pc, #504]	@ (800da3c <_printf_float+0x2d4>)
 800d844:	4b7e      	ldr	r3, [pc, #504]	@ (800da40 <_printf_float+0x2d8>)
 800d846:	e7d4      	b.n	800d7f2 <_printf_float+0x8a>
 800d848:	6863      	ldr	r3, [r4, #4]
 800d84a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800d84e:	9206      	str	r2, [sp, #24]
 800d850:	1c5a      	adds	r2, r3, #1
 800d852:	d13b      	bne.n	800d8cc <_printf_float+0x164>
 800d854:	2306      	movs	r3, #6
 800d856:	6063      	str	r3, [r4, #4]
 800d858:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800d85c:	2300      	movs	r3, #0
 800d85e:	6022      	str	r2, [r4, #0]
 800d860:	9303      	str	r3, [sp, #12]
 800d862:	ab0a      	add	r3, sp, #40	@ 0x28
 800d864:	e9cd a301 	strd	sl, r3, [sp, #4]
 800d868:	ab09      	add	r3, sp, #36	@ 0x24
 800d86a:	9300      	str	r3, [sp, #0]
 800d86c:	6861      	ldr	r1, [r4, #4]
 800d86e:	ec49 8b10 	vmov	d0, r8, r9
 800d872:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800d876:	4628      	mov	r0, r5
 800d878:	f7ff fed6 	bl	800d628 <__cvt>
 800d87c:	9b06      	ldr	r3, [sp, #24]
 800d87e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d880:	2b47      	cmp	r3, #71	@ 0x47
 800d882:	4680      	mov	r8, r0
 800d884:	d129      	bne.n	800d8da <_printf_float+0x172>
 800d886:	1cc8      	adds	r0, r1, #3
 800d888:	db02      	blt.n	800d890 <_printf_float+0x128>
 800d88a:	6863      	ldr	r3, [r4, #4]
 800d88c:	4299      	cmp	r1, r3
 800d88e:	dd41      	ble.n	800d914 <_printf_float+0x1ac>
 800d890:	f1aa 0a02 	sub.w	sl, sl, #2
 800d894:	fa5f fa8a 	uxtb.w	sl, sl
 800d898:	3901      	subs	r1, #1
 800d89a:	4652      	mov	r2, sl
 800d89c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800d8a0:	9109      	str	r1, [sp, #36]	@ 0x24
 800d8a2:	f7ff ff26 	bl	800d6f2 <__exponent>
 800d8a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d8a8:	1813      	adds	r3, r2, r0
 800d8aa:	2a01      	cmp	r2, #1
 800d8ac:	4681      	mov	r9, r0
 800d8ae:	6123      	str	r3, [r4, #16]
 800d8b0:	dc02      	bgt.n	800d8b8 <_printf_float+0x150>
 800d8b2:	6822      	ldr	r2, [r4, #0]
 800d8b4:	07d2      	lsls	r2, r2, #31
 800d8b6:	d501      	bpl.n	800d8bc <_printf_float+0x154>
 800d8b8:	3301      	adds	r3, #1
 800d8ba:	6123      	str	r3, [r4, #16]
 800d8bc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0a2      	beq.n	800d80a <_printf_float+0xa2>
 800d8c4:	232d      	movs	r3, #45	@ 0x2d
 800d8c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d8ca:	e79e      	b.n	800d80a <_printf_float+0xa2>
 800d8cc:	9a06      	ldr	r2, [sp, #24]
 800d8ce:	2a47      	cmp	r2, #71	@ 0x47
 800d8d0:	d1c2      	bne.n	800d858 <_printf_float+0xf0>
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d1c0      	bne.n	800d858 <_printf_float+0xf0>
 800d8d6:	2301      	movs	r3, #1
 800d8d8:	e7bd      	b.n	800d856 <_printf_float+0xee>
 800d8da:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d8de:	d9db      	bls.n	800d898 <_printf_float+0x130>
 800d8e0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d8e4:	d118      	bne.n	800d918 <_printf_float+0x1b0>
 800d8e6:	2900      	cmp	r1, #0
 800d8e8:	6863      	ldr	r3, [r4, #4]
 800d8ea:	dd0b      	ble.n	800d904 <_printf_float+0x19c>
 800d8ec:	6121      	str	r1, [r4, #16]
 800d8ee:	b913      	cbnz	r3, 800d8f6 <_printf_float+0x18e>
 800d8f0:	6822      	ldr	r2, [r4, #0]
 800d8f2:	07d0      	lsls	r0, r2, #31
 800d8f4:	d502      	bpl.n	800d8fc <_printf_float+0x194>
 800d8f6:	3301      	adds	r3, #1
 800d8f8:	440b      	add	r3, r1
 800d8fa:	6123      	str	r3, [r4, #16]
 800d8fc:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d8fe:	f04f 0900 	mov.w	r9, #0
 800d902:	e7db      	b.n	800d8bc <_printf_float+0x154>
 800d904:	b913      	cbnz	r3, 800d90c <_printf_float+0x1a4>
 800d906:	6822      	ldr	r2, [r4, #0]
 800d908:	07d2      	lsls	r2, r2, #31
 800d90a:	d501      	bpl.n	800d910 <_printf_float+0x1a8>
 800d90c:	3302      	adds	r3, #2
 800d90e:	e7f4      	b.n	800d8fa <_printf_float+0x192>
 800d910:	2301      	movs	r3, #1
 800d912:	e7f2      	b.n	800d8fa <_printf_float+0x192>
 800d914:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d918:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d91a:	4299      	cmp	r1, r3
 800d91c:	db05      	blt.n	800d92a <_printf_float+0x1c2>
 800d91e:	6823      	ldr	r3, [r4, #0]
 800d920:	6121      	str	r1, [r4, #16]
 800d922:	07d8      	lsls	r0, r3, #31
 800d924:	d5ea      	bpl.n	800d8fc <_printf_float+0x194>
 800d926:	1c4b      	adds	r3, r1, #1
 800d928:	e7e7      	b.n	800d8fa <_printf_float+0x192>
 800d92a:	2900      	cmp	r1, #0
 800d92c:	bfd4      	ite	le
 800d92e:	f1c1 0202 	rsble	r2, r1, #2
 800d932:	2201      	movgt	r2, #1
 800d934:	4413      	add	r3, r2
 800d936:	e7e0      	b.n	800d8fa <_printf_float+0x192>
 800d938:	6823      	ldr	r3, [r4, #0]
 800d93a:	055a      	lsls	r2, r3, #21
 800d93c:	d407      	bmi.n	800d94e <_printf_float+0x1e6>
 800d93e:	6923      	ldr	r3, [r4, #16]
 800d940:	4642      	mov	r2, r8
 800d942:	4631      	mov	r1, r6
 800d944:	4628      	mov	r0, r5
 800d946:	47b8      	blx	r7
 800d948:	3001      	adds	r0, #1
 800d94a:	d12b      	bne.n	800d9a4 <_printf_float+0x23c>
 800d94c:	e767      	b.n	800d81e <_printf_float+0xb6>
 800d94e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d952:	f240 80dd 	bls.w	800db10 <_printf_float+0x3a8>
 800d956:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d95a:	2200      	movs	r2, #0
 800d95c:	2300      	movs	r3, #0
 800d95e:	f7f3 f8b3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d962:	2800      	cmp	r0, #0
 800d964:	d033      	beq.n	800d9ce <_printf_float+0x266>
 800d966:	4a37      	ldr	r2, [pc, #220]	@ (800da44 <_printf_float+0x2dc>)
 800d968:	2301      	movs	r3, #1
 800d96a:	4631      	mov	r1, r6
 800d96c:	4628      	mov	r0, r5
 800d96e:	47b8      	blx	r7
 800d970:	3001      	adds	r0, #1
 800d972:	f43f af54 	beq.w	800d81e <_printf_float+0xb6>
 800d976:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d97a:	4543      	cmp	r3, r8
 800d97c:	db02      	blt.n	800d984 <_printf_float+0x21c>
 800d97e:	6823      	ldr	r3, [r4, #0]
 800d980:	07d8      	lsls	r0, r3, #31
 800d982:	d50f      	bpl.n	800d9a4 <_printf_float+0x23c>
 800d984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d988:	4631      	mov	r1, r6
 800d98a:	4628      	mov	r0, r5
 800d98c:	47b8      	blx	r7
 800d98e:	3001      	adds	r0, #1
 800d990:	f43f af45 	beq.w	800d81e <_printf_float+0xb6>
 800d994:	f04f 0900 	mov.w	r9, #0
 800d998:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d99c:	f104 0a1a 	add.w	sl, r4, #26
 800d9a0:	45c8      	cmp	r8, r9
 800d9a2:	dc09      	bgt.n	800d9b8 <_printf_float+0x250>
 800d9a4:	6823      	ldr	r3, [r4, #0]
 800d9a6:	079b      	lsls	r3, r3, #30
 800d9a8:	f100 8103 	bmi.w	800dbb2 <_printf_float+0x44a>
 800d9ac:	68e0      	ldr	r0, [r4, #12]
 800d9ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d9b0:	4298      	cmp	r0, r3
 800d9b2:	bfb8      	it	lt
 800d9b4:	4618      	movlt	r0, r3
 800d9b6:	e734      	b.n	800d822 <_printf_float+0xba>
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	4652      	mov	r2, sl
 800d9bc:	4631      	mov	r1, r6
 800d9be:	4628      	mov	r0, r5
 800d9c0:	47b8      	blx	r7
 800d9c2:	3001      	adds	r0, #1
 800d9c4:	f43f af2b 	beq.w	800d81e <_printf_float+0xb6>
 800d9c8:	f109 0901 	add.w	r9, r9, #1
 800d9cc:	e7e8      	b.n	800d9a0 <_printf_float+0x238>
 800d9ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	dc39      	bgt.n	800da48 <_printf_float+0x2e0>
 800d9d4:	4a1b      	ldr	r2, [pc, #108]	@ (800da44 <_printf_float+0x2dc>)
 800d9d6:	2301      	movs	r3, #1
 800d9d8:	4631      	mov	r1, r6
 800d9da:	4628      	mov	r0, r5
 800d9dc:	47b8      	blx	r7
 800d9de:	3001      	adds	r0, #1
 800d9e0:	f43f af1d 	beq.w	800d81e <_printf_float+0xb6>
 800d9e4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d9e8:	ea59 0303 	orrs.w	r3, r9, r3
 800d9ec:	d102      	bne.n	800d9f4 <_printf_float+0x28c>
 800d9ee:	6823      	ldr	r3, [r4, #0]
 800d9f0:	07d9      	lsls	r1, r3, #31
 800d9f2:	d5d7      	bpl.n	800d9a4 <_printf_float+0x23c>
 800d9f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d9f8:	4631      	mov	r1, r6
 800d9fa:	4628      	mov	r0, r5
 800d9fc:	47b8      	blx	r7
 800d9fe:	3001      	adds	r0, #1
 800da00:	f43f af0d 	beq.w	800d81e <_printf_float+0xb6>
 800da04:	f04f 0a00 	mov.w	sl, #0
 800da08:	f104 0b1a 	add.w	fp, r4, #26
 800da0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da0e:	425b      	negs	r3, r3
 800da10:	4553      	cmp	r3, sl
 800da12:	dc01      	bgt.n	800da18 <_printf_float+0x2b0>
 800da14:	464b      	mov	r3, r9
 800da16:	e793      	b.n	800d940 <_printf_float+0x1d8>
 800da18:	2301      	movs	r3, #1
 800da1a:	465a      	mov	r2, fp
 800da1c:	4631      	mov	r1, r6
 800da1e:	4628      	mov	r0, r5
 800da20:	47b8      	blx	r7
 800da22:	3001      	adds	r0, #1
 800da24:	f43f aefb 	beq.w	800d81e <_printf_float+0xb6>
 800da28:	f10a 0a01 	add.w	sl, sl, #1
 800da2c:	e7ee      	b.n	800da0c <_printf_float+0x2a4>
 800da2e:	bf00      	nop
 800da30:	7fefffff 	.word	0x7fefffff
 800da34:	08010674 	.word	0x08010674
 800da38:	08010670 	.word	0x08010670
 800da3c:	0801067c 	.word	0x0801067c
 800da40:	08010678 	.word	0x08010678
 800da44:	08010680 	.word	0x08010680
 800da48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da4a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800da4e:	4553      	cmp	r3, sl
 800da50:	bfa8      	it	ge
 800da52:	4653      	movge	r3, sl
 800da54:	2b00      	cmp	r3, #0
 800da56:	4699      	mov	r9, r3
 800da58:	dc36      	bgt.n	800dac8 <_printf_float+0x360>
 800da5a:	f04f 0b00 	mov.w	fp, #0
 800da5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da62:	f104 021a 	add.w	r2, r4, #26
 800da66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800da68:	9306      	str	r3, [sp, #24]
 800da6a:	eba3 0309 	sub.w	r3, r3, r9
 800da6e:	455b      	cmp	r3, fp
 800da70:	dc31      	bgt.n	800dad6 <_printf_float+0x36e>
 800da72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da74:	459a      	cmp	sl, r3
 800da76:	dc3a      	bgt.n	800daee <_printf_float+0x386>
 800da78:	6823      	ldr	r3, [r4, #0]
 800da7a:	07da      	lsls	r2, r3, #31
 800da7c:	d437      	bmi.n	800daee <_printf_float+0x386>
 800da7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800da80:	ebaa 0903 	sub.w	r9, sl, r3
 800da84:	9b06      	ldr	r3, [sp, #24]
 800da86:	ebaa 0303 	sub.w	r3, sl, r3
 800da8a:	4599      	cmp	r9, r3
 800da8c:	bfa8      	it	ge
 800da8e:	4699      	movge	r9, r3
 800da90:	f1b9 0f00 	cmp.w	r9, #0
 800da94:	dc33      	bgt.n	800dafe <_printf_float+0x396>
 800da96:	f04f 0800 	mov.w	r8, #0
 800da9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800da9e:	f104 0b1a 	add.w	fp, r4, #26
 800daa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800daa4:	ebaa 0303 	sub.w	r3, sl, r3
 800daa8:	eba3 0309 	sub.w	r3, r3, r9
 800daac:	4543      	cmp	r3, r8
 800daae:	f77f af79 	ble.w	800d9a4 <_printf_float+0x23c>
 800dab2:	2301      	movs	r3, #1
 800dab4:	465a      	mov	r2, fp
 800dab6:	4631      	mov	r1, r6
 800dab8:	4628      	mov	r0, r5
 800daba:	47b8      	blx	r7
 800dabc:	3001      	adds	r0, #1
 800dabe:	f43f aeae 	beq.w	800d81e <_printf_float+0xb6>
 800dac2:	f108 0801 	add.w	r8, r8, #1
 800dac6:	e7ec      	b.n	800daa2 <_printf_float+0x33a>
 800dac8:	4642      	mov	r2, r8
 800daca:	4631      	mov	r1, r6
 800dacc:	4628      	mov	r0, r5
 800dace:	47b8      	blx	r7
 800dad0:	3001      	adds	r0, #1
 800dad2:	d1c2      	bne.n	800da5a <_printf_float+0x2f2>
 800dad4:	e6a3      	b.n	800d81e <_printf_float+0xb6>
 800dad6:	2301      	movs	r3, #1
 800dad8:	4631      	mov	r1, r6
 800dada:	4628      	mov	r0, r5
 800dadc:	9206      	str	r2, [sp, #24]
 800dade:	47b8      	blx	r7
 800dae0:	3001      	adds	r0, #1
 800dae2:	f43f ae9c 	beq.w	800d81e <_printf_float+0xb6>
 800dae6:	9a06      	ldr	r2, [sp, #24]
 800dae8:	f10b 0b01 	add.w	fp, fp, #1
 800daec:	e7bb      	b.n	800da66 <_printf_float+0x2fe>
 800daee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800daf2:	4631      	mov	r1, r6
 800daf4:	4628      	mov	r0, r5
 800daf6:	47b8      	blx	r7
 800daf8:	3001      	adds	r0, #1
 800dafa:	d1c0      	bne.n	800da7e <_printf_float+0x316>
 800dafc:	e68f      	b.n	800d81e <_printf_float+0xb6>
 800dafe:	9a06      	ldr	r2, [sp, #24]
 800db00:	464b      	mov	r3, r9
 800db02:	4442      	add	r2, r8
 800db04:	4631      	mov	r1, r6
 800db06:	4628      	mov	r0, r5
 800db08:	47b8      	blx	r7
 800db0a:	3001      	adds	r0, #1
 800db0c:	d1c3      	bne.n	800da96 <_printf_float+0x32e>
 800db0e:	e686      	b.n	800d81e <_printf_float+0xb6>
 800db10:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800db14:	f1ba 0f01 	cmp.w	sl, #1
 800db18:	dc01      	bgt.n	800db1e <_printf_float+0x3b6>
 800db1a:	07db      	lsls	r3, r3, #31
 800db1c:	d536      	bpl.n	800db8c <_printf_float+0x424>
 800db1e:	2301      	movs	r3, #1
 800db20:	4642      	mov	r2, r8
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	f43f ae78 	beq.w	800d81e <_printf_float+0xb6>
 800db2e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db32:	4631      	mov	r1, r6
 800db34:	4628      	mov	r0, r5
 800db36:	47b8      	blx	r7
 800db38:	3001      	adds	r0, #1
 800db3a:	f43f ae70 	beq.w	800d81e <_printf_float+0xb6>
 800db3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db42:	2200      	movs	r2, #0
 800db44:	2300      	movs	r3, #0
 800db46:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800db4a:	f7f2 ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 800db4e:	b9c0      	cbnz	r0, 800db82 <_printf_float+0x41a>
 800db50:	4653      	mov	r3, sl
 800db52:	f108 0201 	add.w	r2, r8, #1
 800db56:	4631      	mov	r1, r6
 800db58:	4628      	mov	r0, r5
 800db5a:	47b8      	blx	r7
 800db5c:	3001      	adds	r0, #1
 800db5e:	d10c      	bne.n	800db7a <_printf_float+0x412>
 800db60:	e65d      	b.n	800d81e <_printf_float+0xb6>
 800db62:	2301      	movs	r3, #1
 800db64:	465a      	mov	r2, fp
 800db66:	4631      	mov	r1, r6
 800db68:	4628      	mov	r0, r5
 800db6a:	47b8      	blx	r7
 800db6c:	3001      	adds	r0, #1
 800db6e:	f43f ae56 	beq.w	800d81e <_printf_float+0xb6>
 800db72:	f108 0801 	add.w	r8, r8, #1
 800db76:	45d0      	cmp	r8, sl
 800db78:	dbf3      	blt.n	800db62 <_printf_float+0x3fa>
 800db7a:	464b      	mov	r3, r9
 800db7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800db80:	e6df      	b.n	800d942 <_printf_float+0x1da>
 800db82:	f04f 0800 	mov.w	r8, #0
 800db86:	f104 0b1a 	add.w	fp, r4, #26
 800db8a:	e7f4      	b.n	800db76 <_printf_float+0x40e>
 800db8c:	2301      	movs	r3, #1
 800db8e:	4642      	mov	r2, r8
 800db90:	e7e1      	b.n	800db56 <_printf_float+0x3ee>
 800db92:	2301      	movs	r3, #1
 800db94:	464a      	mov	r2, r9
 800db96:	4631      	mov	r1, r6
 800db98:	4628      	mov	r0, r5
 800db9a:	47b8      	blx	r7
 800db9c:	3001      	adds	r0, #1
 800db9e:	f43f ae3e 	beq.w	800d81e <_printf_float+0xb6>
 800dba2:	f108 0801 	add.w	r8, r8, #1
 800dba6:	68e3      	ldr	r3, [r4, #12]
 800dba8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dbaa:	1a5b      	subs	r3, r3, r1
 800dbac:	4543      	cmp	r3, r8
 800dbae:	dcf0      	bgt.n	800db92 <_printf_float+0x42a>
 800dbb0:	e6fc      	b.n	800d9ac <_printf_float+0x244>
 800dbb2:	f04f 0800 	mov.w	r8, #0
 800dbb6:	f104 0919 	add.w	r9, r4, #25
 800dbba:	e7f4      	b.n	800dba6 <_printf_float+0x43e>

0800dbbc <_printf_common>:
 800dbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dbc0:	4616      	mov	r6, r2
 800dbc2:	4698      	mov	r8, r3
 800dbc4:	688a      	ldr	r2, [r1, #8]
 800dbc6:	690b      	ldr	r3, [r1, #16]
 800dbc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dbcc:	4293      	cmp	r3, r2
 800dbce:	bfb8      	it	lt
 800dbd0:	4613      	movlt	r3, r2
 800dbd2:	6033      	str	r3, [r6, #0]
 800dbd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dbd8:	4607      	mov	r7, r0
 800dbda:	460c      	mov	r4, r1
 800dbdc:	b10a      	cbz	r2, 800dbe2 <_printf_common+0x26>
 800dbde:	3301      	adds	r3, #1
 800dbe0:	6033      	str	r3, [r6, #0]
 800dbe2:	6823      	ldr	r3, [r4, #0]
 800dbe4:	0699      	lsls	r1, r3, #26
 800dbe6:	bf42      	ittt	mi
 800dbe8:	6833      	ldrmi	r3, [r6, #0]
 800dbea:	3302      	addmi	r3, #2
 800dbec:	6033      	strmi	r3, [r6, #0]
 800dbee:	6825      	ldr	r5, [r4, #0]
 800dbf0:	f015 0506 	ands.w	r5, r5, #6
 800dbf4:	d106      	bne.n	800dc04 <_printf_common+0x48>
 800dbf6:	f104 0a19 	add.w	sl, r4, #25
 800dbfa:	68e3      	ldr	r3, [r4, #12]
 800dbfc:	6832      	ldr	r2, [r6, #0]
 800dbfe:	1a9b      	subs	r3, r3, r2
 800dc00:	42ab      	cmp	r3, r5
 800dc02:	dc26      	bgt.n	800dc52 <_printf_common+0x96>
 800dc04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800dc08:	6822      	ldr	r2, [r4, #0]
 800dc0a:	3b00      	subs	r3, #0
 800dc0c:	bf18      	it	ne
 800dc0e:	2301      	movne	r3, #1
 800dc10:	0692      	lsls	r2, r2, #26
 800dc12:	d42b      	bmi.n	800dc6c <_printf_common+0xb0>
 800dc14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800dc18:	4641      	mov	r1, r8
 800dc1a:	4638      	mov	r0, r7
 800dc1c:	47c8      	blx	r9
 800dc1e:	3001      	adds	r0, #1
 800dc20:	d01e      	beq.n	800dc60 <_printf_common+0xa4>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	6922      	ldr	r2, [r4, #16]
 800dc26:	f003 0306 	and.w	r3, r3, #6
 800dc2a:	2b04      	cmp	r3, #4
 800dc2c:	bf02      	ittt	eq
 800dc2e:	68e5      	ldreq	r5, [r4, #12]
 800dc30:	6833      	ldreq	r3, [r6, #0]
 800dc32:	1aed      	subeq	r5, r5, r3
 800dc34:	68a3      	ldr	r3, [r4, #8]
 800dc36:	bf0c      	ite	eq
 800dc38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dc3c:	2500      	movne	r5, #0
 800dc3e:	4293      	cmp	r3, r2
 800dc40:	bfc4      	itt	gt
 800dc42:	1a9b      	subgt	r3, r3, r2
 800dc44:	18ed      	addgt	r5, r5, r3
 800dc46:	2600      	movs	r6, #0
 800dc48:	341a      	adds	r4, #26
 800dc4a:	42b5      	cmp	r5, r6
 800dc4c:	d11a      	bne.n	800dc84 <_printf_common+0xc8>
 800dc4e:	2000      	movs	r0, #0
 800dc50:	e008      	b.n	800dc64 <_printf_common+0xa8>
 800dc52:	2301      	movs	r3, #1
 800dc54:	4652      	mov	r2, sl
 800dc56:	4641      	mov	r1, r8
 800dc58:	4638      	mov	r0, r7
 800dc5a:	47c8      	blx	r9
 800dc5c:	3001      	adds	r0, #1
 800dc5e:	d103      	bne.n	800dc68 <_printf_common+0xac>
 800dc60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dc68:	3501      	adds	r5, #1
 800dc6a:	e7c6      	b.n	800dbfa <_printf_common+0x3e>
 800dc6c:	18e1      	adds	r1, r4, r3
 800dc6e:	1c5a      	adds	r2, r3, #1
 800dc70:	2030      	movs	r0, #48	@ 0x30
 800dc72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800dc76:	4422      	add	r2, r4
 800dc78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800dc7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800dc80:	3302      	adds	r3, #2
 800dc82:	e7c7      	b.n	800dc14 <_printf_common+0x58>
 800dc84:	2301      	movs	r3, #1
 800dc86:	4622      	mov	r2, r4
 800dc88:	4641      	mov	r1, r8
 800dc8a:	4638      	mov	r0, r7
 800dc8c:	47c8      	blx	r9
 800dc8e:	3001      	adds	r0, #1
 800dc90:	d0e6      	beq.n	800dc60 <_printf_common+0xa4>
 800dc92:	3601      	adds	r6, #1
 800dc94:	e7d9      	b.n	800dc4a <_printf_common+0x8e>
	...

0800dc98 <_printf_i>:
 800dc98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dc9c:	7e0f      	ldrb	r7, [r1, #24]
 800dc9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800dca0:	2f78      	cmp	r7, #120	@ 0x78
 800dca2:	4691      	mov	r9, r2
 800dca4:	4680      	mov	r8, r0
 800dca6:	460c      	mov	r4, r1
 800dca8:	469a      	mov	sl, r3
 800dcaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800dcae:	d807      	bhi.n	800dcc0 <_printf_i+0x28>
 800dcb0:	2f62      	cmp	r7, #98	@ 0x62
 800dcb2:	d80a      	bhi.n	800dcca <_printf_i+0x32>
 800dcb4:	2f00      	cmp	r7, #0
 800dcb6:	f000 80d1 	beq.w	800de5c <_printf_i+0x1c4>
 800dcba:	2f58      	cmp	r7, #88	@ 0x58
 800dcbc:	f000 80b8 	beq.w	800de30 <_printf_i+0x198>
 800dcc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dcc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800dcc8:	e03a      	b.n	800dd40 <_printf_i+0xa8>
 800dcca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800dcce:	2b15      	cmp	r3, #21
 800dcd0:	d8f6      	bhi.n	800dcc0 <_printf_i+0x28>
 800dcd2:	a101      	add	r1, pc, #4	@ (adr r1, 800dcd8 <_printf_i+0x40>)
 800dcd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dcd8:	0800dd31 	.word	0x0800dd31
 800dcdc:	0800dd45 	.word	0x0800dd45
 800dce0:	0800dcc1 	.word	0x0800dcc1
 800dce4:	0800dcc1 	.word	0x0800dcc1
 800dce8:	0800dcc1 	.word	0x0800dcc1
 800dcec:	0800dcc1 	.word	0x0800dcc1
 800dcf0:	0800dd45 	.word	0x0800dd45
 800dcf4:	0800dcc1 	.word	0x0800dcc1
 800dcf8:	0800dcc1 	.word	0x0800dcc1
 800dcfc:	0800dcc1 	.word	0x0800dcc1
 800dd00:	0800dcc1 	.word	0x0800dcc1
 800dd04:	0800de43 	.word	0x0800de43
 800dd08:	0800dd6f 	.word	0x0800dd6f
 800dd0c:	0800ddfd 	.word	0x0800ddfd
 800dd10:	0800dcc1 	.word	0x0800dcc1
 800dd14:	0800dcc1 	.word	0x0800dcc1
 800dd18:	0800de65 	.word	0x0800de65
 800dd1c:	0800dcc1 	.word	0x0800dcc1
 800dd20:	0800dd6f 	.word	0x0800dd6f
 800dd24:	0800dcc1 	.word	0x0800dcc1
 800dd28:	0800dcc1 	.word	0x0800dcc1
 800dd2c:	0800de05 	.word	0x0800de05
 800dd30:	6833      	ldr	r3, [r6, #0]
 800dd32:	1d1a      	adds	r2, r3, #4
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	6032      	str	r2, [r6, #0]
 800dd38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800dd3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800dd40:	2301      	movs	r3, #1
 800dd42:	e09c      	b.n	800de7e <_printf_i+0x1e6>
 800dd44:	6833      	ldr	r3, [r6, #0]
 800dd46:	6820      	ldr	r0, [r4, #0]
 800dd48:	1d19      	adds	r1, r3, #4
 800dd4a:	6031      	str	r1, [r6, #0]
 800dd4c:	0606      	lsls	r6, r0, #24
 800dd4e:	d501      	bpl.n	800dd54 <_printf_i+0xbc>
 800dd50:	681d      	ldr	r5, [r3, #0]
 800dd52:	e003      	b.n	800dd5c <_printf_i+0xc4>
 800dd54:	0645      	lsls	r5, r0, #25
 800dd56:	d5fb      	bpl.n	800dd50 <_printf_i+0xb8>
 800dd58:	f9b3 5000 	ldrsh.w	r5, [r3]
 800dd5c:	2d00      	cmp	r5, #0
 800dd5e:	da03      	bge.n	800dd68 <_printf_i+0xd0>
 800dd60:	232d      	movs	r3, #45	@ 0x2d
 800dd62:	426d      	negs	r5, r5
 800dd64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dd68:	4858      	ldr	r0, [pc, #352]	@ (800decc <_printf_i+0x234>)
 800dd6a:	230a      	movs	r3, #10
 800dd6c:	e011      	b.n	800dd92 <_printf_i+0xfa>
 800dd6e:	6821      	ldr	r1, [r4, #0]
 800dd70:	6833      	ldr	r3, [r6, #0]
 800dd72:	0608      	lsls	r0, r1, #24
 800dd74:	f853 5b04 	ldr.w	r5, [r3], #4
 800dd78:	d402      	bmi.n	800dd80 <_printf_i+0xe8>
 800dd7a:	0649      	lsls	r1, r1, #25
 800dd7c:	bf48      	it	mi
 800dd7e:	b2ad      	uxthmi	r5, r5
 800dd80:	2f6f      	cmp	r7, #111	@ 0x6f
 800dd82:	4852      	ldr	r0, [pc, #328]	@ (800decc <_printf_i+0x234>)
 800dd84:	6033      	str	r3, [r6, #0]
 800dd86:	bf14      	ite	ne
 800dd88:	230a      	movne	r3, #10
 800dd8a:	2308      	moveq	r3, #8
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800dd92:	6866      	ldr	r6, [r4, #4]
 800dd94:	60a6      	str	r6, [r4, #8]
 800dd96:	2e00      	cmp	r6, #0
 800dd98:	db05      	blt.n	800dda6 <_printf_i+0x10e>
 800dd9a:	6821      	ldr	r1, [r4, #0]
 800dd9c:	432e      	orrs	r6, r5
 800dd9e:	f021 0104 	bic.w	r1, r1, #4
 800dda2:	6021      	str	r1, [r4, #0]
 800dda4:	d04b      	beq.n	800de3e <_printf_i+0x1a6>
 800dda6:	4616      	mov	r6, r2
 800dda8:	fbb5 f1f3 	udiv	r1, r5, r3
 800ddac:	fb03 5711 	mls	r7, r3, r1, r5
 800ddb0:	5dc7      	ldrb	r7, [r0, r7]
 800ddb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800ddb6:	462f      	mov	r7, r5
 800ddb8:	42bb      	cmp	r3, r7
 800ddba:	460d      	mov	r5, r1
 800ddbc:	d9f4      	bls.n	800dda8 <_printf_i+0x110>
 800ddbe:	2b08      	cmp	r3, #8
 800ddc0:	d10b      	bne.n	800ddda <_printf_i+0x142>
 800ddc2:	6823      	ldr	r3, [r4, #0]
 800ddc4:	07df      	lsls	r7, r3, #31
 800ddc6:	d508      	bpl.n	800ddda <_printf_i+0x142>
 800ddc8:	6923      	ldr	r3, [r4, #16]
 800ddca:	6861      	ldr	r1, [r4, #4]
 800ddcc:	4299      	cmp	r1, r3
 800ddce:	bfde      	ittt	le
 800ddd0:	2330      	movle	r3, #48	@ 0x30
 800ddd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ddd6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800ddda:	1b92      	subs	r2, r2, r6
 800dddc:	6122      	str	r2, [r4, #16]
 800ddde:	f8cd a000 	str.w	sl, [sp]
 800dde2:	464b      	mov	r3, r9
 800dde4:	aa03      	add	r2, sp, #12
 800dde6:	4621      	mov	r1, r4
 800dde8:	4640      	mov	r0, r8
 800ddea:	f7ff fee7 	bl	800dbbc <_printf_common>
 800ddee:	3001      	adds	r0, #1
 800ddf0:	d14a      	bne.n	800de88 <_printf_i+0x1f0>
 800ddf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ddf6:	b004      	add	sp, #16
 800ddf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddfc:	6823      	ldr	r3, [r4, #0]
 800ddfe:	f043 0320 	orr.w	r3, r3, #32
 800de02:	6023      	str	r3, [r4, #0]
 800de04:	4832      	ldr	r0, [pc, #200]	@ (800ded0 <_printf_i+0x238>)
 800de06:	2778      	movs	r7, #120	@ 0x78
 800de08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800de0c:	6823      	ldr	r3, [r4, #0]
 800de0e:	6831      	ldr	r1, [r6, #0]
 800de10:	061f      	lsls	r7, r3, #24
 800de12:	f851 5b04 	ldr.w	r5, [r1], #4
 800de16:	d402      	bmi.n	800de1e <_printf_i+0x186>
 800de18:	065f      	lsls	r7, r3, #25
 800de1a:	bf48      	it	mi
 800de1c:	b2ad      	uxthmi	r5, r5
 800de1e:	6031      	str	r1, [r6, #0]
 800de20:	07d9      	lsls	r1, r3, #31
 800de22:	bf44      	itt	mi
 800de24:	f043 0320 	orrmi.w	r3, r3, #32
 800de28:	6023      	strmi	r3, [r4, #0]
 800de2a:	b11d      	cbz	r5, 800de34 <_printf_i+0x19c>
 800de2c:	2310      	movs	r3, #16
 800de2e:	e7ad      	b.n	800dd8c <_printf_i+0xf4>
 800de30:	4826      	ldr	r0, [pc, #152]	@ (800decc <_printf_i+0x234>)
 800de32:	e7e9      	b.n	800de08 <_printf_i+0x170>
 800de34:	6823      	ldr	r3, [r4, #0]
 800de36:	f023 0320 	bic.w	r3, r3, #32
 800de3a:	6023      	str	r3, [r4, #0]
 800de3c:	e7f6      	b.n	800de2c <_printf_i+0x194>
 800de3e:	4616      	mov	r6, r2
 800de40:	e7bd      	b.n	800ddbe <_printf_i+0x126>
 800de42:	6833      	ldr	r3, [r6, #0]
 800de44:	6825      	ldr	r5, [r4, #0]
 800de46:	6961      	ldr	r1, [r4, #20]
 800de48:	1d18      	adds	r0, r3, #4
 800de4a:	6030      	str	r0, [r6, #0]
 800de4c:	062e      	lsls	r6, r5, #24
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	d501      	bpl.n	800de56 <_printf_i+0x1be>
 800de52:	6019      	str	r1, [r3, #0]
 800de54:	e002      	b.n	800de5c <_printf_i+0x1c4>
 800de56:	0668      	lsls	r0, r5, #25
 800de58:	d5fb      	bpl.n	800de52 <_printf_i+0x1ba>
 800de5a:	8019      	strh	r1, [r3, #0]
 800de5c:	2300      	movs	r3, #0
 800de5e:	6123      	str	r3, [r4, #16]
 800de60:	4616      	mov	r6, r2
 800de62:	e7bc      	b.n	800ddde <_printf_i+0x146>
 800de64:	6833      	ldr	r3, [r6, #0]
 800de66:	1d1a      	adds	r2, r3, #4
 800de68:	6032      	str	r2, [r6, #0]
 800de6a:	681e      	ldr	r6, [r3, #0]
 800de6c:	6862      	ldr	r2, [r4, #4]
 800de6e:	2100      	movs	r1, #0
 800de70:	4630      	mov	r0, r6
 800de72:	f7f2 f9ad 	bl	80001d0 <memchr>
 800de76:	b108      	cbz	r0, 800de7c <_printf_i+0x1e4>
 800de78:	1b80      	subs	r0, r0, r6
 800de7a:	6060      	str	r0, [r4, #4]
 800de7c:	6863      	ldr	r3, [r4, #4]
 800de7e:	6123      	str	r3, [r4, #16]
 800de80:	2300      	movs	r3, #0
 800de82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800de86:	e7aa      	b.n	800ddde <_printf_i+0x146>
 800de88:	6923      	ldr	r3, [r4, #16]
 800de8a:	4632      	mov	r2, r6
 800de8c:	4649      	mov	r1, r9
 800de8e:	4640      	mov	r0, r8
 800de90:	47d0      	blx	sl
 800de92:	3001      	adds	r0, #1
 800de94:	d0ad      	beq.n	800ddf2 <_printf_i+0x15a>
 800de96:	6823      	ldr	r3, [r4, #0]
 800de98:	079b      	lsls	r3, r3, #30
 800de9a:	d413      	bmi.n	800dec4 <_printf_i+0x22c>
 800de9c:	68e0      	ldr	r0, [r4, #12]
 800de9e:	9b03      	ldr	r3, [sp, #12]
 800dea0:	4298      	cmp	r0, r3
 800dea2:	bfb8      	it	lt
 800dea4:	4618      	movlt	r0, r3
 800dea6:	e7a6      	b.n	800ddf6 <_printf_i+0x15e>
 800dea8:	2301      	movs	r3, #1
 800deaa:	4632      	mov	r2, r6
 800deac:	4649      	mov	r1, r9
 800deae:	4640      	mov	r0, r8
 800deb0:	47d0      	blx	sl
 800deb2:	3001      	adds	r0, #1
 800deb4:	d09d      	beq.n	800ddf2 <_printf_i+0x15a>
 800deb6:	3501      	adds	r5, #1
 800deb8:	68e3      	ldr	r3, [r4, #12]
 800deba:	9903      	ldr	r1, [sp, #12]
 800debc:	1a5b      	subs	r3, r3, r1
 800debe:	42ab      	cmp	r3, r5
 800dec0:	dcf2      	bgt.n	800dea8 <_printf_i+0x210>
 800dec2:	e7eb      	b.n	800de9c <_printf_i+0x204>
 800dec4:	2500      	movs	r5, #0
 800dec6:	f104 0619 	add.w	r6, r4, #25
 800deca:	e7f5      	b.n	800deb8 <_printf_i+0x220>
 800decc:	08010682 	.word	0x08010682
 800ded0:	08010693 	.word	0x08010693

0800ded4 <std>:
 800ded4:	2300      	movs	r3, #0
 800ded6:	b510      	push	{r4, lr}
 800ded8:	4604      	mov	r4, r0
 800deda:	e9c0 3300 	strd	r3, r3, [r0]
 800dede:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dee2:	6083      	str	r3, [r0, #8]
 800dee4:	8181      	strh	r1, [r0, #12]
 800dee6:	6643      	str	r3, [r0, #100]	@ 0x64
 800dee8:	81c2      	strh	r2, [r0, #14]
 800deea:	6183      	str	r3, [r0, #24]
 800deec:	4619      	mov	r1, r3
 800deee:	2208      	movs	r2, #8
 800def0:	305c      	adds	r0, #92	@ 0x5c
 800def2:	f000 f8d1 	bl	800e098 <memset>
 800def6:	4b0d      	ldr	r3, [pc, #52]	@ (800df2c <std+0x58>)
 800def8:	6263      	str	r3, [r4, #36]	@ 0x24
 800defa:	4b0d      	ldr	r3, [pc, #52]	@ (800df30 <std+0x5c>)
 800defc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800defe:	4b0d      	ldr	r3, [pc, #52]	@ (800df34 <std+0x60>)
 800df00:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800df02:	4b0d      	ldr	r3, [pc, #52]	@ (800df38 <std+0x64>)
 800df04:	6323      	str	r3, [r4, #48]	@ 0x30
 800df06:	4b0d      	ldr	r3, [pc, #52]	@ (800df3c <std+0x68>)
 800df08:	6224      	str	r4, [r4, #32]
 800df0a:	429c      	cmp	r4, r3
 800df0c:	d006      	beq.n	800df1c <std+0x48>
 800df0e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800df12:	4294      	cmp	r4, r2
 800df14:	d002      	beq.n	800df1c <std+0x48>
 800df16:	33d0      	adds	r3, #208	@ 0xd0
 800df18:	429c      	cmp	r4, r3
 800df1a:	d105      	bne.n	800df28 <std+0x54>
 800df1c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800df20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df24:	f000 b8ea 	b.w	800e0fc <__retarget_lock_init_recursive>
 800df28:	bd10      	pop	{r4, pc}
 800df2a:	bf00      	nop
 800df2c:	0800fb95 	.word	0x0800fb95
 800df30:	0800fbb7 	.word	0x0800fbb7
 800df34:	0800fbef 	.word	0x0800fbef
 800df38:	0800fc13 	.word	0x0800fc13
 800df3c:	200057b4 	.word	0x200057b4

0800df40 <stdio_exit_handler>:
 800df40:	4a02      	ldr	r2, [pc, #8]	@ (800df4c <stdio_exit_handler+0xc>)
 800df42:	4903      	ldr	r1, [pc, #12]	@ (800df50 <stdio_exit_handler+0x10>)
 800df44:	4803      	ldr	r0, [pc, #12]	@ (800df54 <stdio_exit_handler+0x14>)
 800df46:	f000 b889 	b.w	800e05c <_fwalk_sglue>
 800df4a:	bf00      	nop
 800df4c:	20000050 	.word	0x20000050
 800df50:	0800f439 	.word	0x0800f439
 800df54:	20000060 	.word	0x20000060

0800df58 <cleanup_stdio>:
 800df58:	6841      	ldr	r1, [r0, #4]
 800df5a:	4b0c      	ldr	r3, [pc, #48]	@ (800df8c <cleanup_stdio+0x34>)
 800df5c:	4299      	cmp	r1, r3
 800df5e:	b510      	push	{r4, lr}
 800df60:	4604      	mov	r4, r0
 800df62:	d001      	beq.n	800df68 <cleanup_stdio+0x10>
 800df64:	f001 fa68 	bl	800f438 <_fflush_r>
 800df68:	68a1      	ldr	r1, [r4, #8]
 800df6a:	4b09      	ldr	r3, [pc, #36]	@ (800df90 <cleanup_stdio+0x38>)
 800df6c:	4299      	cmp	r1, r3
 800df6e:	d002      	beq.n	800df76 <cleanup_stdio+0x1e>
 800df70:	4620      	mov	r0, r4
 800df72:	f001 fa61 	bl	800f438 <_fflush_r>
 800df76:	68e1      	ldr	r1, [r4, #12]
 800df78:	4b06      	ldr	r3, [pc, #24]	@ (800df94 <cleanup_stdio+0x3c>)
 800df7a:	4299      	cmp	r1, r3
 800df7c:	d004      	beq.n	800df88 <cleanup_stdio+0x30>
 800df7e:	4620      	mov	r0, r4
 800df80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800df84:	f001 ba58 	b.w	800f438 <_fflush_r>
 800df88:	bd10      	pop	{r4, pc}
 800df8a:	bf00      	nop
 800df8c:	200057b4 	.word	0x200057b4
 800df90:	2000581c 	.word	0x2000581c
 800df94:	20005884 	.word	0x20005884

0800df98 <global_stdio_init.part.0>:
 800df98:	b510      	push	{r4, lr}
 800df9a:	4b0b      	ldr	r3, [pc, #44]	@ (800dfc8 <global_stdio_init.part.0+0x30>)
 800df9c:	4c0b      	ldr	r4, [pc, #44]	@ (800dfcc <global_stdio_init.part.0+0x34>)
 800df9e:	4a0c      	ldr	r2, [pc, #48]	@ (800dfd0 <global_stdio_init.part.0+0x38>)
 800dfa0:	601a      	str	r2, [r3, #0]
 800dfa2:	4620      	mov	r0, r4
 800dfa4:	2200      	movs	r2, #0
 800dfa6:	2104      	movs	r1, #4
 800dfa8:	f7ff ff94 	bl	800ded4 <std>
 800dfac:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dfb0:	2201      	movs	r2, #1
 800dfb2:	2109      	movs	r1, #9
 800dfb4:	f7ff ff8e 	bl	800ded4 <std>
 800dfb8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dfbc:	2202      	movs	r2, #2
 800dfbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dfc2:	2112      	movs	r1, #18
 800dfc4:	f7ff bf86 	b.w	800ded4 <std>
 800dfc8:	200058ec 	.word	0x200058ec
 800dfcc:	200057b4 	.word	0x200057b4
 800dfd0:	0800df41 	.word	0x0800df41

0800dfd4 <__sfp_lock_acquire>:
 800dfd4:	4801      	ldr	r0, [pc, #4]	@ (800dfdc <__sfp_lock_acquire+0x8>)
 800dfd6:	f000 b892 	b.w	800e0fe <__retarget_lock_acquire_recursive>
 800dfda:	bf00      	nop
 800dfdc:	200058f1 	.word	0x200058f1

0800dfe0 <__sfp_lock_release>:
 800dfe0:	4801      	ldr	r0, [pc, #4]	@ (800dfe8 <__sfp_lock_release+0x8>)
 800dfe2:	f000 b88d 	b.w	800e100 <__retarget_lock_release_recursive>
 800dfe6:	bf00      	nop
 800dfe8:	200058f1 	.word	0x200058f1

0800dfec <__sinit>:
 800dfec:	b510      	push	{r4, lr}
 800dfee:	4604      	mov	r4, r0
 800dff0:	f7ff fff0 	bl	800dfd4 <__sfp_lock_acquire>
 800dff4:	6a23      	ldr	r3, [r4, #32]
 800dff6:	b11b      	cbz	r3, 800e000 <__sinit+0x14>
 800dff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dffc:	f7ff bff0 	b.w	800dfe0 <__sfp_lock_release>
 800e000:	4b04      	ldr	r3, [pc, #16]	@ (800e014 <__sinit+0x28>)
 800e002:	6223      	str	r3, [r4, #32]
 800e004:	4b04      	ldr	r3, [pc, #16]	@ (800e018 <__sinit+0x2c>)
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d1f5      	bne.n	800dff8 <__sinit+0xc>
 800e00c:	f7ff ffc4 	bl	800df98 <global_stdio_init.part.0>
 800e010:	e7f2      	b.n	800dff8 <__sinit+0xc>
 800e012:	bf00      	nop
 800e014:	0800df59 	.word	0x0800df59
 800e018:	200058ec 	.word	0x200058ec

0800e01c <_vsiprintf_r>:
 800e01c:	b510      	push	{r4, lr}
 800e01e:	b09a      	sub	sp, #104	@ 0x68
 800e020:	2400      	movs	r4, #0
 800e022:	9100      	str	r1, [sp, #0]
 800e024:	9104      	str	r1, [sp, #16]
 800e026:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800e02a:	9105      	str	r1, [sp, #20]
 800e02c:	9102      	str	r1, [sp, #8]
 800e02e:	4905      	ldr	r1, [pc, #20]	@ (800e044 <_vsiprintf_r+0x28>)
 800e030:	9103      	str	r1, [sp, #12]
 800e032:	4669      	mov	r1, sp
 800e034:	9419      	str	r4, [sp, #100]	@ 0x64
 800e036:	f000 ffd5 	bl	800efe4 <_svfiprintf_r>
 800e03a:	9b00      	ldr	r3, [sp, #0]
 800e03c:	701c      	strb	r4, [r3, #0]
 800e03e:	b01a      	add	sp, #104	@ 0x68
 800e040:	bd10      	pop	{r4, pc}
 800e042:	bf00      	nop
 800e044:	ffff0208 	.word	0xffff0208

0800e048 <vsiprintf>:
 800e048:	4613      	mov	r3, r2
 800e04a:	460a      	mov	r2, r1
 800e04c:	4601      	mov	r1, r0
 800e04e:	4802      	ldr	r0, [pc, #8]	@ (800e058 <vsiprintf+0x10>)
 800e050:	6800      	ldr	r0, [r0, #0]
 800e052:	f7ff bfe3 	b.w	800e01c <_vsiprintf_r>
 800e056:	bf00      	nop
 800e058:	2000005c 	.word	0x2000005c

0800e05c <_fwalk_sglue>:
 800e05c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e060:	4607      	mov	r7, r0
 800e062:	4688      	mov	r8, r1
 800e064:	4614      	mov	r4, r2
 800e066:	2600      	movs	r6, #0
 800e068:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e06c:	f1b9 0901 	subs.w	r9, r9, #1
 800e070:	d505      	bpl.n	800e07e <_fwalk_sglue+0x22>
 800e072:	6824      	ldr	r4, [r4, #0]
 800e074:	2c00      	cmp	r4, #0
 800e076:	d1f7      	bne.n	800e068 <_fwalk_sglue+0xc>
 800e078:	4630      	mov	r0, r6
 800e07a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e07e:	89ab      	ldrh	r3, [r5, #12]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d907      	bls.n	800e094 <_fwalk_sglue+0x38>
 800e084:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e088:	3301      	adds	r3, #1
 800e08a:	d003      	beq.n	800e094 <_fwalk_sglue+0x38>
 800e08c:	4629      	mov	r1, r5
 800e08e:	4638      	mov	r0, r7
 800e090:	47c0      	blx	r8
 800e092:	4306      	orrs	r6, r0
 800e094:	3568      	adds	r5, #104	@ 0x68
 800e096:	e7e9      	b.n	800e06c <_fwalk_sglue+0x10>

0800e098 <memset>:
 800e098:	4402      	add	r2, r0
 800e09a:	4603      	mov	r3, r0
 800e09c:	4293      	cmp	r3, r2
 800e09e:	d100      	bne.n	800e0a2 <memset+0xa>
 800e0a0:	4770      	bx	lr
 800e0a2:	f803 1b01 	strb.w	r1, [r3], #1
 800e0a6:	e7f9      	b.n	800e09c <memset+0x4>

0800e0a8 <__errno>:
 800e0a8:	4b01      	ldr	r3, [pc, #4]	@ (800e0b0 <__errno+0x8>)
 800e0aa:	6818      	ldr	r0, [r3, #0]
 800e0ac:	4770      	bx	lr
 800e0ae:	bf00      	nop
 800e0b0:	2000005c 	.word	0x2000005c

0800e0b4 <__libc_init_array>:
 800e0b4:	b570      	push	{r4, r5, r6, lr}
 800e0b6:	4d0d      	ldr	r5, [pc, #52]	@ (800e0ec <__libc_init_array+0x38>)
 800e0b8:	4c0d      	ldr	r4, [pc, #52]	@ (800e0f0 <__libc_init_array+0x3c>)
 800e0ba:	1b64      	subs	r4, r4, r5
 800e0bc:	10a4      	asrs	r4, r4, #2
 800e0be:	2600      	movs	r6, #0
 800e0c0:	42a6      	cmp	r6, r4
 800e0c2:	d109      	bne.n	800e0d8 <__libc_init_array+0x24>
 800e0c4:	4d0b      	ldr	r5, [pc, #44]	@ (800e0f4 <__libc_init_array+0x40>)
 800e0c6:	4c0c      	ldr	r4, [pc, #48]	@ (800e0f8 <__libc_init_array+0x44>)
 800e0c8:	f002 f956 	bl	8010378 <_init>
 800e0cc:	1b64      	subs	r4, r4, r5
 800e0ce:	10a4      	asrs	r4, r4, #2
 800e0d0:	2600      	movs	r6, #0
 800e0d2:	42a6      	cmp	r6, r4
 800e0d4:	d105      	bne.n	800e0e2 <__libc_init_array+0x2e>
 800e0d6:	bd70      	pop	{r4, r5, r6, pc}
 800e0d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0dc:	4798      	blx	r3
 800e0de:	3601      	adds	r6, #1
 800e0e0:	e7ee      	b.n	800e0c0 <__libc_init_array+0xc>
 800e0e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800e0e6:	4798      	blx	r3
 800e0e8:	3601      	adds	r6, #1
 800e0ea:	e7f2      	b.n	800e0d2 <__libc_init_array+0x1e>
 800e0ec:	080109ec 	.word	0x080109ec
 800e0f0:	080109ec 	.word	0x080109ec
 800e0f4:	080109ec 	.word	0x080109ec
 800e0f8:	080109f0 	.word	0x080109f0

0800e0fc <__retarget_lock_init_recursive>:
 800e0fc:	4770      	bx	lr

0800e0fe <__retarget_lock_acquire_recursive>:
 800e0fe:	4770      	bx	lr

0800e100 <__retarget_lock_release_recursive>:
 800e100:	4770      	bx	lr
	...

0800e104 <_localeconv_r>:
 800e104:	4800      	ldr	r0, [pc, #0]	@ (800e108 <_localeconv_r+0x4>)
 800e106:	4770      	bx	lr
 800e108:	2000019c 	.word	0x2000019c

0800e10c <_reclaim_reent>:
 800e10c:	4b2d      	ldr	r3, [pc, #180]	@ (800e1c4 <_reclaim_reent+0xb8>)
 800e10e:	681b      	ldr	r3, [r3, #0]
 800e110:	4283      	cmp	r3, r0
 800e112:	b570      	push	{r4, r5, r6, lr}
 800e114:	4604      	mov	r4, r0
 800e116:	d053      	beq.n	800e1c0 <_reclaim_reent+0xb4>
 800e118:	69c3      	ldr	r3, [r0, #28]
 800e11a:	b31b      	cbz	r3, 800e164 <_reclaim_reent+0x58>
 800e11c:	68db      	ldr	r3, [r3, #12]
 800e11e:	b163      	cbz	r3, 800e13a <_reclaim_reent+0x2e>
 800e120:	2500      	movs	r5, #0
 800e122:	69e3      	ldr	r3, [r4, #28]
 800e124:	68db      	ldr	r3, [r3, #12]
 800e126:	5959      	ldr	r1, [r3, r5]
 800e128:	b9b1      	cbnz	r1, 800e158 <_reclaim_reent+0x4c>
 800e12a:	3504      	adds	r5, #4
 800e12c:	2d80      	cmp	r5, #128	@ 0x80
 800e12e:	d1f8      	bne.n	800e122 <_reclaim_reent+0x16>
 800e130:	69e3      	ldr	r3, [r4, #28]
 800e132:	4620      	mov	r0, r4
 800e134:	68d9      	ldr	r1, [r3, #12]
 800e136:	f000 feaf 	bl	800ee98 <_free_r>
 800e13a:	69e3      	ldr	r3, [r4, #28]
 800e13c:	6819      	ldr	r1, [r3, #0]
 800e13e:	b111      	cbz	r1, 800e146 <_reclaim_reent+0x3a>
 800e140:	4620      	mov	r0, r4
 800e142:	f000 fea9 	bl	800ee98 <_free_r>
 800e146:	69e3      	ldr	r3, [r4, #28]
 800e148:	689d      	ldr	r5, [r3, #8]
 800e14a:	b15d      	cbz	r5, 800e164 <_reclaim_reent+0x58>
 800e14c:	4629      	mov	r1, r5
 800e14e:	4620      	mov	r0, r4
 800e150:	682d      	ldr	r5, [r5, #0]
 800e152:	f000 fea1 	bl	800ee98 <_free_r>
 800e156:	e7f8      	b.n	800e14a <_reclaim_reent+0x3e>
 800e158:	680e      	ldr	r6, [r1, #0]
 800e15a:	4620      	mov	r0, r4
 800e15c:	f000 fe9c 	bl	800ee98 <_free_r>
 800e160:	4631      	mov	r1, r6
 800e162:	e7e1      	b.n	800e128 <_reclaim_reent+0x1c>
 800e164:	6961      	ldr	r1, [r4, #20]
 800e166:	b111      	cbz	r1, 800e16e <_reclaim_reent+0x62>
 800e168:	4620      	mov	r0, r4
 800e16a:	f000 fe95 	bl	800ee98 <_free_r>
 800e16e:	69e1      	ldr	r1, [r4, #28]
 800e170:	b111      	cbz	r1, 800e178 <_reclaim_reent+0x6c>
 800e172:	4620      	mov	r0, r4
 800e174:	f000 fe90 	bl	800ee98 <_free_r>
 800e178:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800e17a:	b111      	cbz	r1, 800e182 <_reclaim_reent+0x76>
 800e17c:	4620      	mov	r0, r4
 800e17e:	f000 fe8b 	bl	800ee98 <_free_r>
 800e182:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e184:	b111      	cbz	r1, 800e18c <_reclaim_reent+0x80>
 800e186:	4620      	mov	r0, r4
 800e188:	f000 fe86 	bl	800ee98 <_free_r>
 800e18c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800e18e:	b111      	cbz	r1, 800e196 <_reclaim_reent+0x8a>
 800e190:	4620      	mov	r0, r4
 800e192:	f000 fe81 	bl	800ee98 <_free_r>
 800e196:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800e198:	b111      	cbz	r1, 800e1a0 <_reclaim_reent+0x94>
 800e19a:	4620      	mov	r0, r4
 800e19c:	f000 fe7c 	bl	800ee98 <_free_r>
 800e1a0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800e1a2:	b111      	cbz	r1, 800e1aa <_reclaim_reent+0x9e>
 800e1a4:	4620      	mov	r0, r4
 800e1a6:	f000 fe77 	bl	800ee98 <_free_r>
 800e1aa:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800e1ac:	b111      	cbz	r1, 800e1b4 <_reclaim_reent+0xa8>
 800e1ae:	4620      	mov	r0, r4
 800e1b0:	f000 fe72 	bl	800ee98 <_free_r>
 800e1b4:	6a23      	ldr	r3, [r4, #32]
 800e1b6:	b11b      	cbz	r3, 800e1c0 <_reclaim_reent+0xb4>
 800e1b8:	4620      	mov	r0, r4
 800e1ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e1be:	4718      	bx	r3
 800e1c0:	bd70      	pop	{r4, r5, r6, pc}
 800e1c2:	bf00      	nop
 800e1c4:	2000005c 	.word	0x2000005c

0800e1c8 <memcpy>:
 800e1c8:	440a      	add	r2, r1
 800e1ca:	4291      	cmp	r1, r2
 800e1cc:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800e1d0:	d100      	bne.n	800e1d4 <memcpy+0xc>
 800e1d2:	4770      	bx	lr
 800e1d4:	b510      	push	{r4, lr}
 800e1d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e1da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e1de:	4291      	cmp	r1, r2
 800e1e0:	d1f9      	bne.n	800e1d6 <memcpy+0xe>
 800e1e2:	bd10      	pop	{r4, pc}

0800e1e4 <quorem>:
 800e1e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e8:	6903      	ldr	r3, [r0, #16]
 800e1ea:	690c      	ldr	r4, [r1, #16]
 800e1ec:	42a3      	cmp	r3, r4
 800e1ee:	4607      	mov	r7, r0
 800e1f0:	db7e      	blt.n	800e2f0 <quorem+0x10c>
 800e1f2:	3c01      	subs	r4, #1
 800e1f4:	f101 0814 	add.w	r8, r1, #20
 800e1f8:	00a3      	lsls	r3, r4, #2
 800e1fa:	f100 0514 	add.w	r5, r0, #20
 800e1fe:	9300      	str	r3, [sp, #0]
 800e200:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e20a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e20e:	3301      	adds	r3, #1
 800e210:	429a      	cmp	r2, r3
 800e212:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e216:	fbb2 f6f3 	udiv	r6, r2, r3
 800e21a:	d32e      	bcc.n	800e27a <quorem+0x96>
 800e21c:	f04f 0a00 	mov.w	sl, #0
 800e220:	46c4      	mov	ip, r8
 800e222:	46ae      	mov	lr, r5
 800e224:	46d3      	mov	fp, sl
 800e226:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e22a:	b298      	uxth	r0, r3
 800e22c:	fb06 a000 	mla	r0, r6, r0, sl
 800e230:	0c02      	lsrs	r2, r0, #16
 800e232:	0c1b      	lsrs	r3, r3, #16
 800e234:	fb06 2303 	mla	r3, r6, r3, r2
 800e238:	f8de 2000 	ldr.w	r2, [lr]
 800e23c:	b280      	uxth	r0, r0
 800e23e:	b292      	uxth	r2, r2
 800e240:	1a12      	subs	r2, r2, r0
 800e242:	445a      	add	r2, fp
 800e244:	f8de 0000 	ldr.w	r0, [lr]
 800e248:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e24c:	b29b      	uxth	r3, r3
 800e24e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e252:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e256:	b292      	uxth	r2, r2
 800e258:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e25c:	45e1      	cmp	r9, ip
 800e25e:	f84e 2b04 	str.w	r2, [lr], #4
 800e262:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e266:	d2de      	bcs.n	800e226 <quorem+0x42>
 800e268:	9b00      	ldr	r3, [sp, #0]
 800e26a:	58eb      	ldr	r3, [r5, r3]
 800e26c:	b92b      	cbnz	r3, 800e27a <quorem+0x96>
 800e26e:	9b01      	ldr	r3, [sp, #4]
 800e270:	3b04      	subs	r3, #4
 800e272:	429d      	cmp	r5, r3
 800e274:	461a      	mov	r2, r3
 800e276:	d32f      	bcc.n	800e2d8 <quorem+0xf4>
 800e278:	613c      	str	r4, [r7, #16]
 800e27a:	4638      	mov	r0, r7
 800e27c:	f001 fb82 	bl	800f984 <__mcmp>
 800e280:	2800      	cmp	r0, #0
 800e282:	db25      	blt.n	800e2d0 <quorem+0xec>
 800e284:	4629      	mov	r1, r5
 800e286:	2000      	movs	r0, #0
 800e288:	f858 2b04 	ldr.w	r2, [r8], #4
 800e28c:	f8d1 c000 	ldr.w	ip, [r1]
 800e290:	fa1f fe82 	uxth.w	lr, r2
 800e294:	fa1f f38c 	uxth.w	r3, ip
 800e298:	eba3 030e 	sub.w	r3, r3, lr
 800e29c:	4403      	add	r3, r0
 800e29e:	0c12      	lsrs	r2, r2, #16
 800e2a0:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e2a4:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e2a8:	b29b      	uxth	r3, r3
 800e2aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e2ae:	45c1      	cmp	r9, r8
 800e2b0:	f841 3b04 	str.w	r3, [r1], #4
 800e2b4:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e2b8:	d2e6      	bcs.n	800e288 <quorem+0xa4>
 800e2ba:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e2be:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e2c2:	b922      	cbnz	r2, 800e2ce <quorem+0xea>
 800e2c4:	3b04      	subs	r3, #4
 800e2c6:	429d      	cmp	r5, r3
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	d30b      	bcc.n	800e2e4 <quorem+0x100>
 800e2cc:	613c      	str	r4, [r7, #16]
 800e2ce:	3601      	adds	r6, #1
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	b003      	add	sp, #12
 800e2d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2d8:	6812      	ldr	r2, [r2, #0]
 800e2da:	3b04      	subs	r3, #4
 800e2dc:	2a00      	cmp	r2, #0
 800e2de:	d1cb      	bne.n	800e278 <quorem+0x94>
 800e2e0:	3c01      	subs	r4, #1
 800e2e2:	e7c6      	b.n	800e272 <quorem+0x8e>
 800e2e4:	6812      	ldr	r2, [r2, #0]
 800e2e6:	3b04      	subs	r3, #4
 800e2e8:	2a00      	cmp	r2, #0
 800e2ea:	d1ef      	bne.n	800e2cc <quorem+0xe8>
 800e2ec:	3c01      	subs	r4, #1
 800e2ee:	e7ea      	b.n	800e2c6 <quorem+0xe2>
 800e2f0:	2000      	movs	r0, #0
 800e2f2:	e7ee      	b.n	800e2d2 <quorem+0xee>
 800e2f4:	0000      	movs	r0, r0
	...

0800e2f8 <_dtoa_r>:
 800e2f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2fc:	69c7      	ldr	r7, [r0, #28]
 800e2fe:	b097      	sub	sp, #92	@ 0x5c
 800e300:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e304:	ec55 4b10 	vmov	r4, r5, d0
 800e308:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e30a:	9107      	str	r1, [sp, #28]
 800e30c:	4681      	mov	r9, r0
 800e30e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e310:	9311      	str	r3, [sp, #68]	@ 0x44
 800e312:	b97f      	cbnz	r7, 800e334 <_dtoa_r+0x3c>
 800e314:	2010      	movs	r0, #16
 800e316:	f000 ff61 	bl	800f1dc <malloc>
 800e31a:	4602      	mov	r2, r0
 800e31c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e320:	b920      	cbnz	r0, 800e32c <_dtoa_r+0x34>
 800e322:	4ba9      	ldr	r3, [pc, #676]	@ (800e5c8 <_dtoa_r+0x2d0>)
 800e324:	21ef      	movs	r1, #239	@ 0xef
 800e326:	48a9      	ldr	r0, [pc, #676]	@ (800e5cc <_dtoa_r+0x2d4>)
 800e328:	f001 fd16 	bl	800fd58 <__assert_func>
 800e32c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e330:	6007      	str	r7, [r0, #0]
 800e332:	60c7      	str	r7, [r0, #12]
 800e334:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e338:	6819      	ldr	r1, [r3, #0]
 800e33a:	b159      	cbz	r1, 800e354 <_dtoa_r+0x5c>
 800e33c:	685a      	ldr	r2, [r3, #4]
 800e33e:	604a      	str	r2, [r1, #4]
 800e340:	2301      	movs	r3, #1
 800e342:	4093      	lsls	r3, r2
 800e344:	608b      	str	r3, [r1, #8]
 800e346:	4648      	mov	r0, r9
 800e348:	f001 f8ea 	bl	800f520 <_Bfree>
 800e34c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e350:	2200      	movs	r2, #0
 800e352:	601a      	str	r2, [r3, #0]
 800e354:	1e2b      	subs	r3, r5, #0
 800e356:	bfb9      	ittee	lt
 800e358:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e35c:	9305      	strlt	r3, [sp, #20]
 800e35e:	2300      	movge	r3, #0
 800e360:	6033      	strge	r3, [r6, #0]
 800e362:	9f05      	ldr	r7, [sp, #20]
 800e364:	4b9a      	ldr	r3, [pc, #616]	@ (800e5d0 <_dtoa_r+0x2d8>)
 800e366:	bfbc      	itt	lt
 800e368:	2201      	movlt	r2, #1
 800e36a:	6032      	strlt	r2, [r6, #0]
 800e36c:	43bb      	bics	r3, r7
 800e36e:	d112      	bne.n	800e396 <_dtoa_r+0x9e>
 800e370:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e372:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e376:	6013      	str	r3, [r2, #0]
 800e378:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e37c:	4323      	orrs	r3, r4
 800e37e:	f000 855a 	beq.w	800ee36 <_dtoa_r+0xb3e>
 800e382:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e384:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800e5e4 <_dtoa_r+0x2ec>
 800e388:	2b00      	cmp	r3, #0
 800e38a:	f000 855c 	beq.w	800ee46 <_dtoa_r+0xb4e>
 800e38e:	f10a 0303 	add.w	r3, sl, #3
 800e392:	f000 bd56 	b.w	800ee42 <_dtoa_r+0xb4a>
 800e396:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e39a:	2200      	movs	r2, #0
 800e39c:	ec51 0b17 	vmov	r0, r1, d7
 800e3a0:	2300      	movs	r3, #0
 800e3a2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e3a6:	f7f2 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 800e3aa:	4680      	mov	r8, r0
 800e3ac:	b158      	cbz	r0, 800e3c6 <_dtoa_r+0xce>
 800e3ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e3b0:	2301      	movs	r3, #1
 800e3b2:	6013      	str	r3, [r2, #0]
 800e3b4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e3b6:	b113      	cbz	r3, 800e3be <_dtoa_r+0xc6>
 800e3b8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e3ba:	4b86      	ldr	r3, [pc, #536]	@ (800e5d4 <_dtoa_r+0x2dc>)
 800e3bc:	6013      	str	r3, [r2, #0]
 800e3be:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800e5e8 <_dtoa_r+0x2f0>
 800e3c2:	f000 bd40 	b.w	800ee46 <_dtoa_r+0xb4e>
 800e3c6:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e3ca:	aa14      	add	r2, sp, #80	@ 0x50
 800e3cc:	a915      	add	r1, sp, #84	@ 0x54
 800e3ce:	4648      	mov	r0, r9
 800e3d0:	f001 fb88 	bl	800fae4 <__d2b>
 800e3d4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e3d8:	9002      	str	r0, [sp, #8]
 800e3da:	2e00      	cmp	r6, #0
 800e3dc:	d078      	beq.n	800e4d0 <_dtoa_r+0x1d8>
 800e3de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e3e0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e3e4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3e8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e3ec:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e3f0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e3f4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e3f8:	4619      	mov	r1, r3
 800e3fa:	2200      	movs	r2, #0
 800e3fc:	4b76      	ldr	r3, [pc, #472]	@ (800e5d8 <_dtoa_r+0x2e0>)
 800e3fe:	f7f1 ff43 	bl	8000288 <__aeabi_dsub>
 800e402:	a36b      	add	r3, pc, #428	@ (adr r3, 800e5b0 <_dtoa_r+0x2b8>)
 800e404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e408:	f7f2 f8f6 	bl	80005f8 <__aeabi_dmul>
 800e40c:	a36a      	add	r3, pc, #424	@ (adr r3, 800e5b8 <_dtoa_r+0x2c0>)
 800e40e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e412:	f7f1 ff3b 	bl	800028c <__adddf3>
 800e416:	4604      	mov	r4, r0
 800e418:	4630      	mov	r0, r6
 800e41a:	460d      	mov	r5, r1
 800e41c:	f7f2 f882 	bl	8000524 <__aeabi_i2d>
 800e420:	a367      	add	r3, pc, #412	@ (adr r3, 800e5c0 <_dtoa_r+0x2c8>)
 800e422:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e426:	f7f2 f8e7 	bl	80005f8 <__aeabi_dmul>
 800e42a:	4602      	mov	r2, r0
 800e42c:	460b      	mov	r3, r1
 800e42e:	4620      	mov	r0, r4
 800e430:	4629      	mov	r1, r5
 800e432:	f7f1 ff2b 	bl	800028c <__adddf3>
 800e436:	4604      	mov	r4, r0
 800e438:	460d      	mov	r5, r1
 800e43a:	f7f2 fb8d 	bl	8000b58 <__aeabi_d2iz>
 800e43e:	2200      	movs	r2, #0
 800e440:	4607      	mov	r7, r0
 800e442:	2300      	movs	r3, #0
 800e444:	4620      	mov	r0, r4
 800e446:	4629      	mov	r1, r5
 800e448:	f7f2 fb48 	bl	8000adc <__aeabi_dcmplt>
 800e44c:	b140      	cbz	r0, 800e460 <_dtoa_r+0x168>
 800e44e:	4638      	mov	r0, r7
 800e450:	f7f2 f868 	bl	8000524 <__aeabi_i2d>
 800e454:	4622      	mov	r2, r4
 800e456:	462b      	mov	r3, r5
 800e458:	f7f2 fb36 	bl	8000ac8 <__aeabi_dcmpeq>
 800e45c:	b900      	cbnz	r0, 800e460 <_dtoa_r+0x168>
 800e45e:	3f01      	subs	r7, #1
 800e460:	2f16      	cmp	r7, #22
 800e462:	d852      	bhi.n	800e50a <_dtoa_r+0x212>
 800e464:	4b5d      	ldr	r3, [pc, #372]	@ (800e5dc <_dtoa_r+0x2e4>)
 800e466:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e472:	f7f2 fb33 	bl	8000adc <__aeabi_dcmplt>
 800e476:	2800      	cmp	r0, #0
 800e478:	d049      	beq.n	800e50e <_dtoa_r+0x216>
 800e47a:	3f01      	subs	r7, #1
 800e47c:	2300      	movs	r3, #0
 800e47e:	9310      	str	r3, [sp, #64]	@ 0x40
 800e480:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e482:	1b9b      	subs	r3, r3, r6
 800e484:	1e5a      	subs	r2, r3, #1
 800e486:	bf45      	ittet	mi
 800e488:	f1c3 0301 	rsbmi	r3, r3, #1
 800e48c:	9300      	strmi	r3, [sp, #0]
 800e48e:	2300      	movpl	r3, #0
 800e490:	2300      	movmi	r3, #0
 800e492:	9206      	str	r2, [sp, #24]
 800e494:	bf54      	ite	pl
 800e496:	9300      	strpl	r3, [sp, #0]
 800e498:	9306      	strmi	r3, [sp, #24]
 800e49a:	2f00      	cmp	r7, #0
 800e49c:	db39      	blt.n	800e512 <_dtoa_r+0x21a>
 800e49e:	9b06      	ldr	r3, [sp, #24]
 800e4a0:	970d      	str	r7, [sp, #52]	@ 0x34
 800e4a2:	443b      	add	r3, r7
 800e4a4:	9306      	str	r3, [sp, #24]
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	9308      	str	r3, [sp, #32]
 800e4aa:	9b07      	ldr	r3, [sp, #28]
 800e4ac:	2b09      	cmp	r3, #9
 800e4ae:	d863      	bhi.n	800e578 <_dtoa_r+0x280>
 800e4b0:	2b05      	cmp	r3, #5
 800e4b2:	bfc4      	itt	gt
 800e4b4:	3b04      	subgt	r3, #4
 800e4b6:	9307      	strgt	r3, [sp, #28]
 800e4b8:	9b07      	ldr	r3, [sp, #28]
 800e4ba:	f1a3 0302 	sub.w	r3, r3, #2
 800e4be:	bfcc      	ite	gt
 800e4c0:	2400      	movgt	r4, #0
 800e4c2:	2401      	movle	r4, #1
 800e4c4:	2b03      	cmp	r3, #3
 800e4c6:	d863      	bhi.n	800e590 <_dtoa_r+0x298>
 800e4c8:	e8df f003 	tbb	[pc, r3]
 800e4cc:	2b375452 	.word	0x2b375452
 800e4d0:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e4d4:	441e      	add	r6, r3
 800e4d6:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e4da:	2b20      	cmp	r3, #32
 800e4dc:	bfc1      	itttt	gt
 800e4de:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e4e2:	409f      	lslgt	r7, r3
 800e4e4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e4e8:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e4ec:	bfd6      	itet	le
 800e4ee:	f1c3 0320 	rsble	r3, r3, #32
 800e4f2:	ea47 0003 	orrgt.w	r0, r7, r3
 800e4f6:	fa04 f003 	lslle.w	r0, r4, r3
 800e4fa:	f7f2 f803 	bl	8000504 <__aeabi_ui2d>
 800e4fe:	2201      	movs	r2, #1
 800e500:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e504:	3e01      	subs	r6, #1
 800e506:	9212      	str	r2, [sp, #72]	@ 0x48
 800e508:	e776      	b.n	800e3f8 <_dtoa_r+0x100>
 800e50a:	2301      	movs	r3, #1
 800e50c:	e7b7      	b.n	800e47e <_dtoa_r+0x186>
 800e50e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e510:	e7b6      	b.n	800e480 <_dtoa_r+0x188>
 800e512:	9b00      	ldr	r3, [sp, #0]
 800e514:	1bdb      	subs	r3, r3, r7
 800e516:	9300      	str	r3, [sp, #0]
 800e518:	427b      	negs	r3, r7
 800e51a:	9308      	str	r3, [sp, #32]
 800e51c:	2300      	movs	r3, #0
 800e51e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e520:	e7c3      	b.n	800e4aa <_dtoa_r+0x1b2>
 800e522:	2301      	movs	r3, #1
 800e524:	9309      	str	r3, [sp, #36]	@ 0x24
 800e526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e528:	eb07 0b03 	add.w	fp, r7, r3
 800e52c:	f10b 0301 	add.w	r3, fp, #1
 800e530:	2b01      	cmp	r3, #1
 800e532:	9303      	str	r3, [sp, #12]
 800e534:	bfb8      	it	lt
 800e536:	2301      	movlt	r3, #1
 800e538:	e006      	b.n	800e548 <_dtoa_r+0x250>
 800e53a:	2301      	movs	r3, #1
 800e53c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e53e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e540:	2b00      	cmp	r3, #0
 800e542:	dd28      	ble.n	800e596 <_dtoa_r+0x29e>
 800e544:	469b      	mov	fp, r3
 800e546:	9303      	str	r3, [sp, #12]
 800e548:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e54c:	2100      	movs	r1, #0
 800e54e:	2204      	movs	r2, #4
 800e550:	f102 0514 	add.w	r5, r2, #20
 800e554:	429d      	cmp	r5, r3
 800e556:	d926      	bls.n	800e5a6 <_dtoa_r+0x2ae>
 800e558:	6041      	str	r1, [r0, #4]
 800e55a:	4648      	mov	r0, r9
 800e55c:	f000 ffa0 	bl	800f4a0 <_Balloc>
 800e560:	4682      	mov	sl, r0
 800e562:	2800      	cmp	r0, #0
 800e564:	d142      	bne.n	800e5ec <_dtoa_r+0x2f4>
 800e566:	4b1e      	ldr	r3, [pc, #120]	@ (800e5e0 <_dtoa_r+0x2e8>)
 800e568:	4602      	mov	r2, r0
 800e56a:	f240 11af 	movw	r1, #431	@ 0x1af
 800e56e:	e6da      	b.n	800e326 <_dtoa_r+0x2e>
 800e570:	2300      	movs	r3, #0
 800e572:	e7e3      	b.n	800e53c <_dtoa_r+0x244>
 800e574:	2300      	movs	r3, #0
 800e576:	e7d5      	b.n	800e524 <_dtoa_r+0x22c>
 800e578:	2401      	movs	r4, #1
 800e57a:	2300      	movs	r3, #0
 800e57c:	9307      	str	r3, [sp, #28]
 800e57e:	9409      	str	r4, [sp, #36]	@ 0x24
 800e580:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800e584:	2200      	movs	r2, #0
 800e586:	f8cd b00c 	str.w	fp, [sp, #12]
 800e58a:	2312      	movs	r3, #18
 800e58c:	920c      	str	r2, [sp, #48]	@ 0x30
 800e58e:	e7db      	b.n	800e548 <_dtoa_r+0x250>
 800e590:	2301      	movs	r3, #1
 800e592:	9309      	str	r3, [sp, #36]	@ 0x24
 800e594:	e7f4      	b.n	800e580 <_dtoa_r+0x288>
 800e596:	f04f 0b01 	mov.w	fp, #1
 800e59a:	f8cd b00c 	str.w	fp, [sp, #12]
 800e59e:	465b      	mov	r3, fp
 800e5a0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e5a4:	e7d0      	b.n	800e548 <_dtoa_r+0x250>
 800e5a6:	3101      	adds	r1, #1
 800e5a8:	0052      	lsls	r2, r2, #1
 800e5aa:	e7d1      	b.n	800e550 <_dtoa_r+0x258>
 800e5ac:	f3af 8000 	nop.w
 800e5b0:	636f4361 	.word	0x636f4361
 800e5b4:	3fd287a7 	.word	0x3fd287a7
 800e5b8:	8b60c8b3 	.word	0x8b60c8b3
 800e5bc:	3fc68a28 	.word	0x3fc68a28
 800e5c0:	509f79fb 	.word	0x509f79fb
 800e5c4:	3fd34413 	.word	0x3fd34413
 800e5c8:	080106b1 	.word	0x080106b1
 800e5cc:	080106c8 	.word	0x080106c8
 800e5d0:	7ff00000 	.word	0x7ff00000
 800e5d4:	08010681 	.word	0x08010681
 800e5d8:	3ff80000 	.word	0x3ff80000
 800e5dc:	08010818 	.word	0x08010818
 800e5e0:	08010720 	.word	0x08010720
 800e5e4:	080106ad 	.word	0x080106ad
 800e5e8:	08010680 	.word	0x08010680
 800e5ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e5f0:	6018      	str	r0, [r3, #0]
 800e5f2:	9b03      	ldr	r3, [sp, #12]
 800e5f4:	2b0e      	cmp	r3, #14
 800e5f6:	f200 80a1 	bhi.w	800e73c <_dtoa_r+0x444>
 800e5fa:	2c00      	cmp	r4, #0
 800e5fc:	f000 809e 	beq.w	800e73c <_dtoa_r+0x444>
 800e600:	2f00      	cmp	r7, #0
 800e602:	dd33      	ble.n	800e66c <_dtoa_r+0x374>
 800e604:	4b9c      	ldr	r3, [pc, #624]	@ (800e878 <_dtoa_r+0x580>)
 800e606:	f007 020f 	and.w	r2, r7, #15
 800e60a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e60e:	ed93 7b00 	vldr	d7, [r3]
 800e612:	05f8      	lsls	r0, r7, #23
 800e614:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800e618:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e61c:	d516      	bpl.n	800e64c <_dtoa_r+0x354>
 800e61e:	4b97      	ldr	r3, [pc, #604]	@ (800e87c <_dtoa_r+0x584>)
 800e620:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e624:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e628:	f7f2 f910 	bl	800084c <__aeabi_ddiv>
 800e62c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e630:	f004 040f 	and.w	r4, r4, #15
 800e634:	2603      	movs	r6, #3
 800e636:	4d91      	ldr	r5, [pc, #580]	@ (800e87c <_dtoa_r+0x584>)
 800e638:	b954      	cbnz	r4, 800e650 <_dtoa_r+0x358>
 800e63a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e63e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e642:	f7f2 f903 	bl	800084c <__aeabi_ddiv>
 800e646:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e64a:	e028      	b.n	800e69e <_dtoa_r+0x3a6>
 800e64c:	2602      	movs	r6, #2
 800e64e:	e7f2      	b.n	800e636 <_dtoa_r+0x33e>
 800e650:	07e1      	lsls	r1, r4, #31
 800e652:	d508      	bpl.n	800e666 <_dtoa_r+0x36e>
 800e654:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e658:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e65c:	f7f1 ffcc 	bl	80005f8 <__aeabi_dmul>
 800e660:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e664:	3601      	adds	r6, #1
 800e666:	1064      	asrs	r4, r4, #1
 800e668:	3508      	adds	r5, #8
 800e66a:	e7e5      	b.n	800e638 <_dtoa_r+0x340>
 800e66c:	f000 80af 	beq.w	800e7ce <_dtoa_r+0x4d6>
 800e670:	427c      	negs	r4, r7
 800e672:	4b81      	ldr	r3, [pc, #516]	@ (800e878 <_dtoa_r+0x580>)
 800e674:	4d81      	ldr	r5, [pc, #516]	@ (800e87c <_dtoa_r+0x584>)
 800e676:	f004 020f 	and.w	r2, r4, #15
 800e67a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e682:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e686:	f7f1 ffb7 	bl	80005f8 <__aeabi_dmul>
 800e68a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e68e:	1124      	asrs	r4, r4, #4
 800e690:	2300      	movs	r3, #0
 800e692:	2602      	movs	r6, #2
 800e694:	2c00      	cmp	r4, #0
 800e696:	f040 808f 	bne.w	800e7b8 <_dtoa_r+0x4c0>
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d1d3      	bne.n	800e646 <_dtoa_r+0x34e>
 800e69e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e6a0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f000 8094 	beq.w	800e7d2 <_dtoa_r+0x4da>
 800e6aa:	4b75      	ldr	r3, [pc, #468]	@ (800e880 <_dtoa_r+0x588>)
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	4620      	mov	r0, r4
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	f7f2 fa13 	bl	8000adc <__aeabi_dcmplt>
 800e6b6:	2800      	cmp	r0, #0
 800e6b8:	f000 808b 	beq.w	800e7d2 <_dtoa_r+0x4da>
 800e6bc:	9b03      	ldr	r3, [sp, #12]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f000 8087 	beq.w	800e7d2 <_dtoa_r+0x4da>
 800e6c4:	f1bb 0f00 	cmp.w	fp, #0
 800e6c8:	dd34      	ble.n	800e734 <_dtoa_r+0x43c>
 800e6ca:	4620      	mov	r0, r4
 800e6cc:	4b6d      	ldr	r3, [pc, #436]	@ (800e884 <_dtoa_r+0x58c>)
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	4629      	mov	r1, r5
 800e6d2:	f7f1 ff91 	bl	80005f8 <__aeabi_dmul>
 800e6d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e6da:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800e6de:	3601      	adds	r6, #1
 800e6e0:	465c      	mov	r4, fp
 800e6e2:	4630      	mov	r0, r6
 800e6e4:	f7f1 ff1e 	bl	8000524 <__aeabi_i2d>
 800e6e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e6ec:	f7f1 ff84 	bl	80005f8 <__aeabi_dmul>
 800e6f0:	4b65      	ldr	r3, [pc, #404]	@ (800e888 <_dtoa_r+0x590>)
 800e6f2:	2200      	movs	r2, #0
 800e6f4:	f7f1 fdca 	bl	800028c <__adddf3>
 800e6f8:	4605      	mov	r5, r0
 800e6fa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e6fe:	2c00      	cmp	r4, #0
 800e700:	d16a      	bne.n	800e7d8 <_dtoa_r+0x4e0>
 800e702:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e706:	4b61      	ldr	r3, [pc, #388]	@ (800e88c <_dtoa_r+0x594>)
 800e708:	2200      	movs	r2, #0
 800e70a:	f7f1 fdbd 	bl	8000288 <__aeabi_dsub>
 800e70e:	4602      	mov	r2, r0
 800e710:	460b      	mov	r3, r1
 800e712:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e716:	462a      	mov	r2, r5
 800e718:	4633      	mov	r3, r6
 800e71a:	f7f2 f9fd 	bl	8000b18 <__aeabi_dcmpgt>
 800e71e:	2800      	cmp	r0, #0
 800e720:	f040 8298 	bne.w	800ec54 <_dtoa_r+0x95c>
 800e724:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e728:	462a      	mov	r2, r5
 800e72a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e72e:	f7f2 f9d5 	bl	8000adc <__aeabi_dcmplt>
 800e732:	bb38      	cbnz	r0, 800e784 <_dtoa_r+0x48c>
 800e734:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800e738:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800e73c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800e73e:	2b00      	cmp	r3, #0
 800e740:	f2c0 8157 	blt.w	800e9f2 <_dtoa_r+0x6fa>
 800e744:	2f0e      	cmp	r7, #14
 800e746:	f300 8154 	bgt.w	800e9f2 <_dtoa_r+0x6fa>
 800e74a:	4b4b      	ldr	r3, [pc, #300]	@ (800e878 <_dtoa_r+0x580>)
 800e74c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e750:	ed93 7b00 	vldr	d7, [r3]
 800e754:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e756:	2b00      	cmp	r3, #0
 800e758:	ed8d 7b00 	vstr	d7, [sp]
 800e75c:	f280 80e5 	bge.w	800e92a <_dtoa_r+0x632>
 800e760:	9b03      	ldr	r3, [sp, #12]
 800e762:	2b00      	cmp	r3, #0
 800e764:	f300 80e1 	bgt.w	800e92a <_dtoa_r+0x632>
 800e768:	d10c      	bne.n	800e784 <_dtoa_r+0x48c>
 800e76a:	4b48      	ldr	r3, [pc, #288]	@ (800e88c <_dtoa_r+0x594>)
 800e76c:	2200      	movs	r2, #0
 800e76e:	ec51 0b17 	vmov	r0, r1, d7
 800e772:	f7f1 ff41 	bl	80005f8 <__aeabi_dmul>
 800e776:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e77a:	f7f2 f9c3 	bl	8000b04 <__aeabi_dcmpge>
 800e77e:	2800      	cmp	r0, #0
 800e780:	f000 8266 	beq.w	800ec50 <_dtoa_r+0x958>
 800e784:	2400      	movs	r4, #0
 800e786:	4625      	mov	r5, r4
 800e788:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e78a:	4656      	mov	r6, sl
 800e78c:	ea6f 0803 	mvn.w	r8, r3
 800e790:	2700      	movs	r7, #0
 800e792:	4621      	mov	r1, r4
 800e794:	4648      	mov	r0, r9
 800e796:	f000 fec3 	bl	800f520 <_Bfree>
 800e79a:	2d00      	cmp	r5, #0
 800e79c:	f000 80bd 	beq.w	800e91a <_dtoa_r+0x622>
 800e7a0:	b12f      	cbz	r7, 800e7ae <_dtoa_r+0x4b6>
 800e7a2:	42af      	cmp	r7, r5
 800e7a4:	d003      	beq.n	800e7ae <_dtoa_r+0x4b6>
 800e7a6:	4639      	mov	r1, r7
 800e7a8:	4648      	mov	r0, r9
 800e7aa:	f000 feb9 	bl	800f520 <_Bfree>
 800e7ae:	4629      	mov	r1, r5
 800e7b0:	4648      	mov	r0, r9
 800e7b2:	f000 feb5 	bl	800f520 <_Bfree>
 800e7b6:	e0b0      	b.n	800e91a <_dtoa_r+0x622>
 800e7b8:	07e2      	lsls	r2, r4, #31
 800e7ba:	d505      	bpl.n	800e7c8 <_dtoa_r+0x4d0>
 800e7bc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e7c0:	f7f1 ff1a 	bl	80005f8 <__aeabi_dmul>
 800e7c4:	3601      	adds	r6, #1
 800e7c6:	2301      	movs	r3, #1
 800e7c8:	1064      	asrs	r4, r4, #1
 800e7ca:	3508      	adds	r5, #8
 800e7cc:	e762      	b.n	800e694 <_dtoa_r+0x39c>
 800e7ce:	2602      	movs	r6, #2
 800e7d0:	e765      	b.n	800e69e <_dtoa_r+0x3a6>
 800e7d2:	9c03      	ldr	r4, [sp, #12]
 800e7d4:	46b8      	mov	r8, r7
 800e7d6:	e784      	b.n	800e6e2 <_dtoa_r+0x3ea>
 800e7d8:	4b27      	ldr	r3, [pc, #156]	@ (800e878 <_dtoa_r+0x580>)
 800e7da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e7dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e7e0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e7e4:	4454      	add	r4, sl
 800e7e6:	2900      	cmp	r1, #0
 800e7e8:	d054      	beq.n	800e894 <_dtoa_r+0x59c>
 800e7ea:	4929      	ldr	r1, [pc, #164]	@ (800e890 <_dtoa_r+0x598>)
 800e7ec:	2000      	movs	r0, #0
 800e7ee:	f7f2 f82d 	bl	800084c <__aeabi_ddiv>
 800e7f2:	4633      	mov	r3, r6
 800e7f4:	462a      	mov	r2, r5
 800e7f6:	f7f1 fd47 	bl	8000288 <__aeabi_dsub>
 800e7fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e7fe:	4656      	mov	r6, sl
 800e800:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e804:	f7f2 f9a8 	bl	8000b58 <__aeabi_d2iz>
 800e808:	4605      	mov	r5, r0
 800e80a:	f7f1 fe8b 	bl	8000524 <__aeabi_i2d>
 800e80e:	4602      	mov	r2, r0
 800e810:	460b      	mov	r3, r1
 800e812:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e816:	f7f1 fd37 	bl	8000288 <__aeabi_dsub>
 800e81a:	3530      	adds	r5, #48	@ 0x30
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e824:	f806 5b01 	strb.w	r5, [r6], #1
 800e828:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e82c:	f7f2 f956 	bl	8000adc <__aeabi_dcmplt>
 800e830:	2800      	cmp	r0, #0
 800e832:	d172      	bne.n	800e91a <_dtoa_r+0x622>
 800e834:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e838:	4911      	ldr	r1, [pc, #68]	@ (800e880 <_dtoa_r+0x588>)
 800e83a:	2000      	movs	r0, #0
 800e83c:	f7f1 fd24 	bl	8000288 <__aeabi_dsub>
 800e840:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e844:	f7f2 f94a 	bl	8000adc <__aeabi_dcmplt>
 800e848:	2800      	cmp	r0, #0
 800e84a:	f040 80b4 	bne.w	800e9b6 <_dtoa_r+0x6be>
 800e84e:	42a6      	cmp	r6, r4
 800e850:	f43f af70 	beq.w	800e734 <_dtoa_r+0x43c>
 800e854:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e858:	4b0a      	ldr	r3, [pc, #40]	@ (800e884 <_dtoa_r+0x58c>)
 800e85a:	2200      	movs	r2, #0
 800e85c:	f7f1 fecc 	bl	80005f8 <__aeabi_dmul>
 800e860:	4b08      	ldr	r3, [pc, #32]	@ (800e884 <_dtoa_r+0x58c>)
 800e862:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e866:	2200      	movs	r2, #0
 800e868:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e86c:	f7f1 fec4 	bl	80005f8 <__aeabi_dmul>
 800e870:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e874:	e7c4      	b.n	800e800 <_dtoa_r+0x508>
 800e876:	bf00      	nop
 800e878:	08010818 	.word	0x08010818
 800e87c:	080107f0 	.word	0x080107f0
 800e880:	3ff00000 	.word	0x3ff00000
 800e884:	40240000 	.word	0x40240000
 800e888:	401c0000 	.word	0x401c0000
 800e88c:	40140000 	.word	0x40140000
 800e890:	3fe00000 	.word	0x3fe00000
 800e894:	4631      	mov	r1, r6
 800e896:	4628      	mov	r0, r5
 800e898:	f7f1 feae 	bl	80005f8 <__aeabi_dmul>
 800e89c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800e8a0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800e8a2:	4656      	mov	r6, sl
 800e8a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8a8:	f7f2 f956 	bl	8000b58 <__aeabi_d2iz>
 800e8ac:	4605      	mov	r5, r0
 800e8ae:	f7f1 fe39 	bl	8000524 <__aeabi_i2d>
 800e8b2:	4602      	mov	r2, r0
 800e8b4:	460b      	mov	r3, r1
 800e8b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8ba:	f7f1 fce5 	bl	8000288 <__aeabi_dsub>
 800e8be:	3530      	adds	r5, #48	@ 0x30
 800e8c0:	f806 5b01 	strb.w	r5, [r6], #1
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	42a6      	cmp	r6, r4
 800e8ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e8ce:	f04f 0200 	mov.w	r2, #0
 800e8d2:	d124      	bne.n	800e91e <_dtoa_r+0x626>
 800e8d4:	4baf      	ldr	r3, [pc, #700]	@ (800eb94 <_dtoa_r+0x89c>)
 800e8d6:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800e8da:	f7f1 fcd7 	bl	800028c <__adddf3>
 800e8de:	4602      	mov	r2, r0
 800e8e0:	460b      	mov	r3, r1
 800e8e2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e8e6:	f7f2 f917 	bl	8000b18 <__aeabi_dcmpgt>
 800e8ea:	2800      	cmp	r0, #0
 800e8ec:	d163      	bne.n	800e9b6 <_dtoa_r+0x6be>
 800e8ee:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800e8f2:	49a8      	ldr	r1, [pc, #672]	@ (800eb94 <_dtoa_r+0x89c>)
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	f7f1 fcc7 	bl	8000288 <__aeabi_dsub>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
 800e8fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e902:	f7f2 f8eb 	bl	8000adc <__aeabi_dcmplt>
 800e906:	2800      	cmp	r0, #0
 800e908:	f43f af14 	beq.w	800e734 <_dtoa_r+0x43c>
 800e90c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800e90e:	1e73      	subs	r3, r6, #1
 800e910:	9313      	str	r3, [sp, #76]	@ 0x4c
 800e912:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e916:	2b30      	cmp	r3, #48	@ 0x30
 800e918:	d0f8      	beq.n	800e90c <_dtoa_r+0x614>
 800e91a:	4647      	mov	r7, r8
 800e91c:	e03b      	b.n	800e996 <_dtoa_r+0x69e>
 800e91e:	4b9e      	ldr	r3, [pc, #632]	@ (800eb98 <_dtoa_r+0x8a0>)
 800e920:	f7f1 fe6a 	bl	80005f8 <__aeabi_dmul>
 800e924:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e928:	e7bc      	b.n	800e8a4 <_dtoa_r+0x5ac>
 800e92a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800e92e:	4656      	mov	r6, sl
 800e930:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e934:	4620      	mov	r0, r4
 800e936:	4629      	mov	r1, r5
 800e938:	f7f1 ff88 	bl	800084c <__aeabi_ddiv>
 800e93c:	f7f2 f90c 	bl	8000b58 <__aeabi_d2iz>
 800e940:	4680      	mov	r8, r0
 800e942:	f7f1 fdef 	bl	8000524 <__aeabi_i2d>
 800e946:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e94a:	f7f1 fe55 	bl	80005f8 <__aeabi_dmul>
 800e94e:	4602      	mov	r2, r0
 800e950:	460b      	mov	r3, r1
 800e952:	4620      	mov	r0, r4
 800e954:	4629      	mov	r1, r5
 800e956:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e95a:	f7f1 fc95 	bl	8000288 <__aeabi_dsub>
 800e95e:	f806 4b01 	strb.w	r4, [r6], #1
 800e962:	9d03      	ldr	r5, [sp, #12]
 800e964:	eba6 040a 	sub.w	r4, r6, sl
 800e968:	42a5      	cmp	r5, r4
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	d133      	bne.n	800e9d8 <_dtoa_r+0x6e0>
 800e970:	f7f1 fc8c 	bl	800028c <__adddf3>
 800e974:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e978:	4604      	mov	r4, r0
 800e97a:	460d      	mov	r5, r1
 800e97c:	f7f2 f8cc 	bl	8000b18 <__aeabi_dcmpgt>
 800e980:	b9c0      	cbnz	r0, 800e9b4 <_dtoa_r+0x6bc>
 800e982:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e986:	4620      	mov	r0, r4
 800e988:	4629      	mov	r1, r5
 800e98a:	f7f2 f89d 	bl	8000ac8 <__aeabi_dcmpeq>
 800e98e:	b110      	cbz	r0, 800e996 <_dtoa_r+0x69e>
 800e990:	f018 0f01 	tst.w	r8, #1
 800e994:	d10e      	bne.n	800e9b4 <_dtoa_r+0x6bc>
 800e996:	9902      	ldr	r1, [sp, #8]
 800e998:	4648      	mov	r0, r9
 800e99a:	f000 fdc1 	bl	800f520 <_Bfree>
 800e99e:	2300      	movs	r3, #0
 800e9a0:	7033      	strb	r3, [r6, #0]
 800e9a2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e9a4:	3701      	adds	r7, #1
 800e9a6:	601f      	str	r7, [r3, #0]
 800e9a8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	f000 824b 	beq.w	800ee46 <_dtoa_r+0xb4e>
 800e9b0:	601e      	str	r6, [r3, #0]
 800e9b2:	e248      	b.n	800ee46 <_dtoa_r+0xb4e>
 800e9b4:	46b8      	mov	r8, r7
 800e9b6:	4633      	mov	r3, r6
 800e9b8:	461e      	mov	r6, r3
 800e9ba:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e9be:	2a39      	cmp	r2, #57	@ 0x39
 800e9c0:	d106      	bne.n	800e9d0 <_dtoa_r+0x6d8>
 800e9c2:	459a      	cmp	sl, r3
 800e9c4:	d1f8      	bne.n	800e9b8 <_dtoa_r+0x6c0>
 800e9c6:	2230      	movs	r2, #48	@ 0x30
 800e9c8:	f108 0801 	add.w	r8, r8, #1
 800e9cc:	f88a 2000 	strb.w	r2, [sl]
 800e9d0:	781a      	ldrb	r2, [r3, #0]
 800e9d2:	3201      	adds	r2, #1
 800e9d4:	701a      	strb	r2, [r3, #0]
 800e9d6:	e7a0      	b.n	800e91a <_dtoa_r+0x622>
 800e9d8:	4b6f      	ldr	r3, [pc, #444]	@ (800eb98 <_dtoa_r+0x8a0>)
 800e9da:	2200      	movs	r2, #0
 800e9dc:	f7f1 fe0c 	bl	80005f8 <__aeabi_dmul>
 800e9e0:	2200      	movs	r2, #0
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	4604      	mov	r4, r0
 800e9e6:	460d      	mov	r5, r1
 800e9e8:	f7f2 f86e 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9ec:	2800      	cmp	r0, #0
 800e9ee:	d09f      	beq.n	800e930 <_dtoa_r+0x638>
 800e9f0:	e7d1      	b.n	800e996 <_dtoa_r+0x69e>
 800e9f2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e9f4:	2a00      	cmp	r2, #0
 800e9f6:	f000 80ea 	beq.w	800ebce <_dtoa_r+0x8d6>
 800e9fa:	9a07      	ldr	r2, [sp, #28]
 800e9fc:	2a01      	cmp	r2, #1
 800e9fe:	f300 80cd 	bgt.w	800eb9c <_dtoa_r+0x8a4>
 800ea02:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ea04:	2a00      	cmp	r2, #0
 800ea06:	f000 80c1 	beq.w	800eb8c <_dtoa_r+0x894>
 800ea0a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ea0e:	9c08      	ldr	r4, [sp, #32]
 800ea10:	9e00      	ldr	r6, [sp, #0]
 800ea12:	9a00      	ldr	r2, [sp, #0]
 800ea14:	441a      	add	r2, r3
 800ea16:	9200      	str	r2, [sp, #0]
 800ea18:	9a06      	ldr	r2, [sp, #24]
 800ea1a:	2101      	movs	r1, #1
 800ea1c:	441a      	add	r2, r3
 800ea1e:	4648      	mov	r0, r9
 800ea20:	9206      	str	r2, [sp, #24]
 800ea22:	f000 fe31 	bl	800f688 <__i2b>
 800ea26:	4605      	mov	r5, r0
 800ea28:	b166      	cbz	r6, 800ea44 <_dtoa_r+0x74c>
 800ea2a:	9b06      	ldr	r3, [sp, #24]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	dd09      	ble.n	800ea44 <_dtoa_r+0x74c>
 800ea30:	42b3      	cmp	r3, r6
 800ea32:	9a00      	ldr	r2, [sp, #0]
 800ea34:	bfa8      	it	ge
 800ea36:	4633      	movge	r3, r6
 800ea38:	1ad2      	subs	r2, r2, r3
 800ea3a:	9200      	str	r2, [sp, #0]
 800ea3c:	9a06      	ldr	r2, [sp, #24]
 800ea3e:	1af6      	subs	r6, r6, r3
 800ea40:	1ad3      	subs	r3, r2, r3
 800ea42:	9306      	str	r3, [sp, #24]
 800ea44:	9b08      	ldr	r3, [sp, #32]
 800ea46:	b30b      	cbz	r3, 800ea8c <_dtoa_r+0x794>
 800ea48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ea4a:	2b00      	cmp	r3, #0
 800ea4c:	f000 80c6 	beq.w	800ebdc <_dtoa_r+0x8e4>
 800ea50:	2c00      	cmp	r4, #0
 800ea52:	f000 80c0 	beq.w	800ebd6 <_dtoa_r+0x8de>
 800ea56:	4629      	mov	r1, r5
 800ea58:	4622      	mov	r2, r4
 800ea5a:	4648      	mov	r0, r9
 800ea5c:	f000 fecc 	bl	800f7f8 <__pow5mult>
 800ea60:	9a02      	ldr	r2, [sp, #8]
 800ea62:	4601      	mov	r1, r0
 800ea64:	4605      	mov	r5, r0
 800ea66:	4648      	mov	r0, r9
 800ea68:	f000 fe24 	bl	800f6b4 <__multiply>
 800ea6c:	9902      	ldr	r1, [sp, #8]
 800ea6e:	4680      	mov	r8, r0
 800ea70:	4648      	mov	r0, r9
 800ea72:	f000 fd55 	bl	800f520 <_Bfree>
 800ea76:	9b08      	ldr	r3, [sp, #32]
 800ea78:	1b1b      	subs	r3, r3, r4
 800ea7a:	9308      	str	r3, [sp, #32]
 800ea7c:	f000 80b1 	beq.w	800ebe2 <_dtoa_r+0x8ea>
 800ea80:	9a08      	ldr	r2, [sp, #32]
 800ea82:	4641      	mov	r1, r8
 800ea84:	4648      	mov	r0, r9
 800ea86:	f000 feb7 	bl	800f7f8 <__pow5mult>
 800ea8a:	9002      	str	r0, [sp, #8]
 800ea8c:	2101      	movs	r1, #1
 800ea8e:	4648      	mov	r0, r9
 800ea90:	f000 fdfa 	bl	800f688 <__i2b>
 800ea94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ea96:	4604      	mov	r4, r0
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f000 81d8 	beq.w	800ee4e <_dtoa_r+0xb56>
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	4601      	mov	r1, r0
 800eaa2:	4648      	mov	r0, r9
 800eaa4:	f000 fea8 	bl	800f7f8 <__pow5mult>
 800eaa8:	9b07      	ldr	r3, [sp, #28]
 800eaaa:	2b01      	cmp	r3, #1
 800eaac:	4604      	mov	r4, r0
 800eaae:	f300 809f 	bgt.w	800ebf0 <_dtoa_r+0x8f8>
 800eab2:	9b04      	ldr	r3, [sp, #16]
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	f040 8097 	bne.w	800ebe8 <_dtoa_r+0x8f0>
 800eaba:	9b05      	ldr	r3, [sp, #20]
 800eabc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	f040 8093 	bne.w	800ebec <_dtoa_r+0x8f4>
 800eac6:	9b05      	ldr	r3, [sp, #20]
 800eac8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800eacc:	0d1b      	lsrs	r3, r3, #20
 800eace:	051b      	lsls	r3, r3, #20
 800ead0:	b133      	cbz	r3, 800eae0 <_dtoa_r+0x7e8>
 800ead2:	9b00      	ldr	r3, [sp, #0]
 800ead4:	3301      	adds	r3, #1
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	9b06      	ldr	r3, [sp, #24]
 800eada:	3301      	adds	r3, #1
 800eadc:	9306      	str	r3, [sp, #24]
 800eade:	2301      	movs	r3, #1
 800eae0:	9308      	str	r3, [sp, #32]
 800eae2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f000 81b8 	beq.w	800ee5a <_dtoa_r+0xb62>
 800eaea:	6923      	ldr	r3, [r4, #16]
 800eaec:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800eaf0:	6918      	ldr	r0, [r3, #16]
 800eaf2:	f000 fd7d 	bl	800f5f0 <__hi0bits>
 800eaf6:	f1c0 0020 	rsb	r0, r0, #32
 800eafa:	9b06      	ldr	r3, [sp, #24]
 800eafc:	4418      	add	r0, r3
 800eafe:	f010 001f 	ands.w	r0, r0, #31
 800eb02:	f000 8082 	beq.w	800ec0a <_dtoa_r+0x912>
 800eb06:	f1c0 0320 	rsb	r3, r0, #32
 800eb0a:	2b04      	cmp	r3, #4
 800eb0c:	dd73      	ble.n	800ebf6 <_dtoa_r+0x8fe>
 800eb0e:	9b00      	ldr	r3, [sp, #0]
 800eb10:	f1c0 001c 	rsb	r0, r0, #28
 800eb14:	4403      	add	r3, r0
 800eb16:	9300      	str	r3, [sp, #0]
 800eb18:	9b06      	ldr	r3, [sp, #24]
 800eb1a:	4403      	add	r3, r0
 800eb1c:	4406      	add	r6, r0
 800eb1e:	9306      	str	r3, [sp, #24]
 800eb20:	9b00      	ldr	r3, [sp, #0]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	dd05      	ble.n	800eb32 <_dtoa_r+0x83a>
 800eb26:	9902      	ldr	r1, [sp, #8]
 800eb28:	461a      	mov	r2, r3
 800eb2a:	4648      	mov	r0, r9
 800eb2c:	f000 febe 	bl	800f8ac <__lshift>
 800eb30:	9002      	str	r0, [sp, #8]
 800eb32:	9b06      	ldr	r3, [sp, #24]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	dd05      	ble.n	800eb44 <_dtoa_r+0x84c>
 800eb38:	4621      	mov	r1, r4
 800eb3a:	461a      	mov	r2, r3
 800eb3c:	4648      	mov	r0, r9
 800eb3e:	f000 feb5 	bl	800f8ac <__lshift>
 800eb42:	4604      	mov	r4, r0
 800eb44:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d061      	beq.n	800ec0e <_dtoa_r+0x916>
 800eb4a:	9802      	ldr	r0, [sp, #8]
 800eb4c:	4621      	mov	r1, r4
 800eb4e:	f000 ff19 	bl	800f984 <__mcmp>
 800eb52:	2800      	cmp	r0, #0
 800eb54:	da5b      	bge.n	800ec0e <_dtoa_r+0x916>
 800eb56:	2300      	movs	r3, #0
 800eb58:	9902      	ldr	r1, [sp, #8]
 800eb5a:	220a      	movs	r2, #10
 800eb5c:	4648      	mov	r0, r9
 800eb5e:	f000 fd01 	bl	800f564 <__multadd>
 800eb62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb64:	9002      	str	r0, [sp, #8]
 800eb66:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	f000 8177 	beq.w	800ee5e <_dtoa_r+0xb66>
 800eb70:	4629      	mov	r1, r5
 800eb72:	2300      	movs	r3, #0
 800eb74:	220a      	movs	r2, #10
 800eb76:	4648      	mov	r0, r9
 800eb78:	f000 fcf4 	bl	800f564 <__multadd>
 800eb7c:	f1bb 0f00 	cmp.w	fp, #0
 800eb80:	4605      	mov	r5, r0
 800eb82:	dc6f      	bgt.n	800ec64 <_dtoa_r+0x96c>
 800eb84:	9b07      	ldr	r3, [sp, #28]
 800eb86:	2b02      	cmp	r3, #2
 800eb88:	dc49      	bgt.n	800ec1e <_dtoa_r+0x926>
 800eb8a:	e06b      	b.n	800ec64 <_dtoa_r+0x96c>
 800eb8c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb8e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800eb92:	e73c      	b.n	800ea0e <_dtoa_r+0x716>
 800eb94:	3fe00000 	.word	0x3fe00000
 800eb98:	40240000 	.word	0x40240000
 800eb9c:	9b03      	ldr	r3, [sp, #12]
 800eb9e:	1e5c      	subs	r4, r3, #1
 800eba0:	9b08      	ldr	r3, [sp, #32]
 800eba2:	42a3      	cmp	r3, r4
 800eba4:	db09      	blt.n	800ebba <_dtoa_r+0x8c2>
 800eba6:	1b1c      	subs	r4, r3, r4
 800eba8:	9b03      	ldr	r3, [sp, #12]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	f6bf af30 	bge.w	800ea10 <_dtoa_r+0x718>
 800ebb0:	9b00      	ldr	r3, [sp, #0]
 800ebb2:	9a03      	ldr	r2, [sp, #12]
 800ebb4:	1a9e      	subs	r6, r3, r2
 800ebb6:	2300      	movs	r3, #0
 800ebb8:	e72b      	b.n	800ea12 <_dtoa_r+0x71a>
 800ebba:	9b08      	ldr	r3, [sp, #32]
 800ebbc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ebbe:	9408      	str	r4, [sp, #32]
 800ebc0:	1ae3      	subs	r3, r4, r3
 800ebc2:	441a      	add	r2, r3
 800ebc4:	9e00      	ldr	r6, [sp, #0]
 800ebc6:	9b03      	ldr	r3, [sp, #12]
 800ebc8:	920d      	str	r2, [sp, #52]	@ 0x34
 800ebca:	2400      	movs	r4, #0
 800ebcc:	e721      	b.n	800ea12 <_dtoa_r+0x71a>
 800ebce:	9c08      	ldr	r4, [sp, #32]
 800ebd0:	9e00      	ldr	r6, [sp, #0]
 800ebd2:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ebd4:	e728      	b.n	800ea28 <_dtoa_r+0x730>
 800ebd6:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ebda:	e751      	b.n	800ea80 <_dtoa_r+0x788>
 800ebdc:	9a08      	ldr	r2, [sp, #32]
 800ebde:	9902      	ldr	r1, [sp, #8]
 800ebe0:	e750      	b.n	800ea84 <_dtoa_r+0x78c>
 800ebe2:	f8cd 8008 	str.w	r8, [sp, #8]
 800ebe6:	e751      	b.n	800ea8c <_dtoa_r+0x794>
 800ebe8:	2300      	movs	r3, #0
 800ebea:	e779      	b.n	800eae0 <_dtoa_r+0x7e8>
 800ebec:	9b04      	ldr	r3, [sp, #16]
 800ebee:	e777      	b.n	800eae0 <_dtoa_r+0x7e8>
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	9308      	str	r3, [sp, #32]
 800ebf4:	e779      	b.n	800eaea <_dtoa_r+0x7f2>
 800ebf6:	d093      	beq.n	800eb20 <_dtoa_r+0x828>
 800ebf8:	9a00      	ldr	r2, [sp, #0]
 800ebfa:	331c      	adds	r3, #28
 800ebfc:	441a      	add	r2, r3
 800ebfe:	9200      	str	r2, [sp, #0]
 800ec00:	9a06      	ldr	r2, [sp, #24]
 800ec02:	441a      	add	r2, r3
 800ec04:	441e      	add	r6, r3
 800ec06:	9206      	str	r2, [sp, #24]
 800ec08:	e78a      	b.n	800eb20 <_dtoa_r+0x828>
 800ec0a:	4603      	mov	r3, r0
 800ec0c:	e7f4      	b.n	800ebf8 <_dtoa_r+0x900>
 800ec0e:	9b03      	ldr	r3, [sp, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	46b8      	mov	r8, r7
 800ec14:	dc20      	bgt.n	800ec58 <_dtoa_r+0x960>
 800ec16:	469b      	mov	fp, r3
 800ec18:	9b07      	ldr	r3, [sp, #28]
 800ec1a:	2b02      	cmp	r3, #2
 800ec1c:	dd1e      	ble.n	800ec5c <_dtoa_r+0x964>
 800ec1e:	f1bb 0f00 	cmp.w	fp, #0
 800ec22:	f47f adb1 	bne.w	800e788 <_dtoa_r+0x490>
 800ec26:	4621      	mov	r1, r4
 800ec28:	465b      	mov	r3, fp
 800ec2a:	2205      	movs	r2, #5
 800ec2c:	4648      	mov	r0, r9
 800ec2e:	f000 fc99 	bl	800f564 <__multadd>
 800ec32:	4601      	mov	r1, r0
 800ec34:	4604      	mov	r4, r0
 800ec36:	9802      	ldr	r0, [sp, #8]
 800ec38:	f000 fea4 	bl	800f984 <__mcmp>
 800ec3c:	2800      	cmp	r0, #0
 800ec3e:	f77f ada3 	ble.w	800e788 <_dtoa_r+0x490>
 800ec42:	4656      	mov	r6, sl
 800ec44:	2331      	movs	r3, #49	@ 0x31
 800ec46:	f806 3b01 	strb.w	r3, [r6], #1
 800ec4a:	f108 0801 	add.w	r8, r8, #1
 800ec4e:	e59f      	b.n	800e790 <_dtoa_r+0x498>
 800ec50:	9c03      	ldr	r4, [sp, #12]
 800ec52:	46b8      	mov	r8, r7
 800ec54:	4625      	mov	r5, r4
 800ec56:	e7f4      	b.n	800ec42 <_dtoa_r+0x94a>
 800ec58:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800ec5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ec5e:	2b00      	cmp	r3, #0
 800ec60:	f000 8101 	beq.w	800ee66 <_dtoa_r+0xb6e>
 800ec64:	2e00      	cmp	r6, #0
 800ec66:	dd05      	ble.n	800ec74 <_dtoa_r+0x97c>
 800ec68:	4629      	mov	r1, r5
 800ec6a:	4632      	mov	r2, r6
 800ec6c:	4648      	mov	r0, r9
 800ec6e:	f000 fe1d 	bl	800f8ac <__lshift>
 800ec72:	4605      	mov	r5, r0
 800ec74:	9b08      	ldr	r3, [sp, #32]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d05c      	beq.n	800ed34 <_dtoa_r+0xa3c>
 800ec7a:	6869      	ldr	r1, [r5, #4]
 800ec7c:	4648      	mov	r0, r9
 800ec7e:	f000 fc0f 	bl	800f4a0 <_Balloc>
 800ec82:	4606      	mov	r6, r0
 800ec84:	b928      	cbnz	r0, 800ec92 <_dtoa_r+0x99a>
 800ec86:	4b82      	ldr	r3, [pc, #520]	@ (800ee90 <_dtoa_r+0xb98>)
 800ec88:	4602      	mov	r2, r0
 800ec8a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800ec8e:	f7ff bb4a 	b.w	800e326 <_dtoa_r+0x2e>
 800ec92:	692a      	ldr	r2, [r5, #16]
 800ec94:	3202      	adds	r2, #2
 800ec96:	0092      	lsls	r2, r2, #2
 800ec98:	f105 010c 	add.w	r1, r5, #12
 800ec9c:	300c      	adds	r0, #12
 800ec9e:	f7ff fa93 	bl	800e1c8 <memcpy>
 800eca2:	2201      	movs	r2, #1
 800eca4:	4631      	mov	r1, r6
 800eca6:	4648      	mov	r0, r9
 800eca8:	f000 fe00 	bl	800f8ac <__lshift>
 800ecac:	f10a 0301 	add.w	r3, sl, #1
 800ecb0:	9300      	str	r3, [sp, #0]
 800ecb2:	eb0a 030b 	add.w	r3, sl, fp
 800ecb6:	9308      	str	r3, [sp, #32]
 800ecb8:	9b04      	ldr	r3, [sp, #16]
 800ecba:	f003 0301 	and.w	r3, r3, #1
 800ecbe:	462f      	mov	r7, r5
 800ecc0:	9306      	str	r3, [sp, #24]
 800ecc2:	4605      	mov	r5, r0
 800ecc4:	9b00      	ldr	r3, [sp, #0]
 800ecc6:	9802      	ldr	r0, [sp, #8]
 800ecc8:	4621      	mov	r1, r4
 800ecca:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800ecce:	f7ff fa89 	bl	800e1e4 <quorem>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	3330      	adds	r3, #48	@ 0x30
 800ecd6:	9003      	str	r0, [sp, #12]
 800ecd8:	4639      	mov	r1, r7
 800ecda:	9802      	ldr	r0, [sp, #8]
 800ecdc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ecde:	f000 fe51 	bl	800f984 <__mcmp>
 800ece2:	462a      	mov	r2, r5
 800ece4:	9004      	str	r0, [sp, #16]
 800ece6:	4621      	mov	r1, r4
 800ece8:	4648      	mov	r0, r9
 800ecea:	f000 fe67 	bl	800f9bc <__mdiff>
 800ecee:	68c2      	ldr	r2, [r0, #12]
 800ecf0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ecf2:	4606      	mov	r6, r0
 800ecf4:	bb02      	cbnz	r2, 800ed38 <_dtoa_r+0xa40>
 800ecf6:	4601      	mov	r1, r0
 800ecf8:	9802      	ldr	r0, [sp, #8]
 800ecfa:	f000 fe43 	bl	800f984 <__mcmp>
 800ecfe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed00:	4602      	mov	r2, r0
 800ed02:	4631      	mov	r1, r6
 800ed04:	4648      	mov	r0, r9
 800ed06:	920c      	str	r2, [sp, #48]	@ 0x30
 800ed08:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed0a:	f000 fc09 	bl	800f520 <_Bfree>
 800ed0e:	9b07      	ldr	r3, [sp, #28]
 800ed10:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ed12:	9e00      	ldr	r6, [sp, #0]
 800ed14:	ea42 0103 	orr.w	r1, r2, r3
 800ed18:	9b06      	ldr	r3, [sp, #24]
 800ed1a:	4319      	orrs	r1, r3
 800ed1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ed1e:	d10d      	bne.n	800ed3c <_dtoa_r+0xa44>
 800ed20:	2b39      	cmp	r3, #57	@ 0x39
 800ed22:	d027      	beq.n	800ed74 <_dtoa_r+0xa7c>
 800ed24:	9a04      	ldr	r2, [sp, #16]
 800ed26:	2a00      	cmp	r2, #0
 800ed28:	dd01      	ble.n	800ed2e <_dtoa_r+0xa36>
 800ed2a:	9b03      	ldr	r3, [sp, #12]
 800ed2c:	3331      	adds	r3, #49	@ 0x31
 800ed2e:	f88b 3000 	strb.w	r3, [fp]
 800ed32:	e52e      	b.n	800e792 <_dtoa_r+0x49a>
 800ed34:	4628      	mov	r0, r5
 800ed36:	e7b9      	b.n	800ecac <_dtoa_r+0x9b4>
 800ed38:	2201      	movs	r2, #1
 800ed3a:	e7e2      	b.n	800ed02 <_dtoa_r+0xa0a>
 800ed3c:	9904      	ldr	r1, [sp, #16]
 800ed3e:	2900      	cmp	r1, #0
 800ed40:	db04      	blt.n	800ed4c <_dtoa_r+0xa54>
 800ed42:	9807      	ldr	r0, [sp, #28]
 800ed44:	4301      	orrs	r1, r0
 800ed46:	9806      	ldr	r0, [sp, #24]
 800ed48:	4301      	orrs	r1, r0
 800ed4a:	d120      	bne.n	800ed8e <_dtoa_r+0xa96>
 800ed4c:	2a00      	cmp	r2, #0
 800ed4e:	ddee      	ble.n	800ed2e <_dtoa_r+0xa36>
 800ed50:	9902      	ldr	r1, [sp, #8]
 800ed52:	9300      	str	r3, [sp, #0]
 800ed54:	2201      	movs	r2, #1
 800ed56:	4648      	mov	r0, r9
 800ed58:	f000 fda8 	bl	800f8ac <__lshift>
 800ed5c:	4621      	mov	r1, r4
 800ed5e:	9002      	str	r0, [sp, #8]
 800ed60:	f000 fe10 	bl	800f984 <__mcmp>
 800ed64:	2800      	cmp	r0, #0
 800ed66:	9b00      	ldr	r3, [sp, #0]
 800ed68:	dc02      	bgt.n	800ed70 <_dtoa_r+0xa78>
 800ed6a:	d1e0      	bne.n	800ed2e <_dtoa_r+0xa36>
 800ed6c:	07da      	lsls	r2, r3, #31
 800ed6e:	d5de      	bpl.n	800ed2e <_dtoa_r+0xa36>
 800ed70:	2b39      	cmp	r3, #57	@ 0x39
 800ed72:	d1da      	bne.n	800ed2a <_dtoa_r+0xa32>
 800ed74:	2339      	movs	r3, #57	@ 0x39
 800ed76:	f88b 3000 	strb.w	r3, [fp]
 800ed7a:	4633      	mov	r3, r6
 800ed7c:	461e      	mov	r6, r3
 800ed7e:	3b01      	subs	r3, #1
 800ed80:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800ed84:	2a39      	cmp	r2, #57	@ 0x39
 800ed86:	d04e      	beq.n	800ee26 <_dtoa_r+0xb2e>
 800ed88:	3201      	adds	r2, #1
 800ed8a:	701a      	strb	r2, [r3, #0]
 800ed8c:	e501      	b.n	800e792 <_dtoa_r+0x49a>
 800ed8e:	2a00      	cmp	r2, #0
 800ed90:	dd03      	ble.n	800ed9a <_dtoa_r+0xaa2>
 800ed92:	2b39      	cmp	r3, #57	@ 0x39
 800ed94:	d0ee      	beq.n	800ed74 <_dtoa_r+0xa7c>
 800ed96:	3301      	adds	r3, #1
 800ed98:	e7c9      	b.n	800ed2e <_dtoa_r+0xa36>
 800ed9a:	9a00      	ldr	r2, [sp, #0]
 800ed9c:	9908      	ldr	r1, [sp, #32]
 800ed9e:	f802 3c01 	strb.w	r3, [r2, #-1]
 800eda2:	428a      	cmp	r2, r1
 800eda4:	d028      	beq.n	800edf8 <_dtoa_r+0xb00>
 800eda6:	9902      	ldr	r1, [sp, #8]
 800eda8:	2300      	movs	r3, #0
 800edaa:	220a      	movs	r2, #10
 800edac:	4648      	mov	r0, r9
 800edae:	f000 fbd9 	bl	800f564 <__multadd>
 800edb2:	42af      	cmp	r7, r5
 800edb4:	9002      	str	r0, [sp, #8]
 800edb6:	f04f 0300 	mov.w	r3, #0
 800edba:	f04f 020a 	mov.w	r2, #10
 800edbe:	4639      	mov	r1, r7
 800edc0:	4648      	mov	r0, r9
 800edc2:	d107      	bne.n	800edd4 <_dtoa_r+0xadc>
 800edc4:	f000 fbce 	bl	800f564 <__multadd>
 800edc8:	4607      	mov	r7, r0
 800edca:	4605      	mov	r5, r0
 800edcc:	9b00      	ldr	r3, [sp, #0]
 800edce:	3301      	adds	r3, #1
 800edd0:	9300      	str	r3, [sp, #0]
 800edd2:	e777      	b.n	800ecc4 <_dtoa_r+0x9cc>
 800edd4:	f000 fbc6 	bl	800f564 <__multadd>
 800edd8:	4629      	mov	r1, r5
 800edda:	4607      	mov	r7, r0
 800eddc:	2300      	movs	r3, #0
 800edde:	220a      	movs	r2, #10
 800ede0:	4648      	mov	r0, r9
 800ede2:	f000 fbbf 	bl	800f564 <__multadd>
 800ede6:	4605      	mov	r5, r0
 800ede8:	e7f0      	b.n	800edcc <_dtoa_r+0xad4>
 800edea:	f1bb 0f00 	cmp.w	fp, #0
 800edee:	bfcc      	ite	gt
 800edf0:	465e      	movgt	r6, fp
 800edf2:	2601      	movle	r6, #1
 800edf4:	4456      	add	r6, sl
 800edf6:	2700      	movs	r7, #0
 800edf8:	9902      	ldr	r1, [sp, #8]
 800edfa:	9300      	str	r3, [sp, #0]
 800edfc:	2201      	movs	r2, #1
 800edfe:	4648      	mov	r0, r9
 800ee00:	f000 fd54 	bl	800f8ac <__lshift>
 800ee04:	4621      	mov	r1, r4
 800ee06:	9002      	str	r0, [sp, #8]
 800ee08:	f000 fdbc 	bl	800f984 <__mcmp>
 800ee0c:	2800      	cmp	r0, #0
 800ee0e:	dcb4      	bgt.n	800ed7a <_dtoa_r+0xa82>
 800ee10:	d102      	bne.n	800ee18 <_dtoa_r+0xb20>
 800ee12:	9b00      	ldr	r3, [sp, #0]
 800ee14:	07db      	lsls	r3, r3, #31
 800ee16:	d4b0      	bmi.n	800ed7a <_dtoa_r+0xa82>
 800ee18:	4633      	mov	r3, r6
 800ee1a:	461e      	mov	r6, r3
 800ee1c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee20:	2a30      	cmp	r2, #48	@ 0x30
 800ee22:	d0fa      	beq.n	800ee1a <_dtoa_r+0xb22>
 800ee24:	e4b5      	b.n	800e792 <_dtoa_r+0x49a>
 800ee26:	459a      	cmp	sl, r3
 800ee28:	d1a8      	bne.n	800ed7c <_dtoa_r+0xa84>
 800ee2a:	2331      	movs	r3, #49	@ 0x31
 800ee2c:	f108 0801 	add.w	r8, r8, #1
 800ee30:	f88a 3000 	strb.w	r3, [sl]
 800ee34:	e4ad      	b.n	800e792 <_dtoa_r+0x49a>
 800ee36:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ee38:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800ee94 <_dtoa_r+0xb9c>
 800ee3c:	b11b      	cbz	r3, 800ee46 <_dtoa_r+0xb4e>
 800ee3e:	f10a 0308 	add.w	r3, sl, #8
 800ee42:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800ee44:	6013      	str	r3, [r2, #0]
 800ee46:	4650      	mov	r0, sl
 800ee48:	b017      	add	sp, #92	@ 0x5c
 800ee4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee4e:	9b07      	ldr	r3, [sp, #28]
 800ee50:	2b01      	cmp	r3, #1
 800ee52:	f77f ae2e 	ble.w	800eab2 <_dtoa_r+0x7ba>
 800ee56:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ee58:	9308      	str	r3, [sp, #32]
 800ee5a:	2001      	movs	r0, #1
 800ee5c:	e64d      	b.n	800eafa <_dtoa_r+0x802>
 800ee5e:	f1bb 0f00 	cmp.w	fp, #0
 800ee62:	f77f aed9 	ble.w	800ec18 <_dtoa_r+0x920>
 800ee66:	4656      	mov	r6, sl
 800ee68:	9802      	ldr	r0, [sp, #8]
 800ee6a:	4621      	mov	r1, r4
 800ee6c:	f7ff f9ba 	bl	800e1e4 <quorem>
 800ee70:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800ee74:	f806 3b01 	strb.w	r3, [r6], #1
 800ee78:	eba6 020a 	sub.w	r2, r6, sl
 800ee7c:	4593      	cmp	fp, r2
 800ee7e:	ddb4      	ble.n	800edea <_dtoa_r+0xaf2>
 800ee80:	9902      	ldr	r1, [sp, #8]
 800ee82:	2300      	movs	r3, #0
 800ee84:	220a      	movs	r2, #10
 800ee86:	4648      	mov	r0, r9
 800ee88:	f000 fb6c 	bl	800f564 <__multadd>
 800ee8c:	9002      	str	r0, [sp, #8]
 800ee8e:	e7eb      	b.n	800ee68 <_dtoa_r+0xb70>
 800ee90:	08010720 	.word	0x08010720
 800ee94:	080106a4 	.word	0x080106a4

0800ee98 <_free_r>:
 800ee98:	b538      	push	{r3, r4, r5, lr}
 800ee9a:	4605      	mov	r5, r0
 800ee9c:	2900      	cmp	r1, #0
 800ee9e:	d041      	beq.n	800ef24 <_free_r+0x8c>
 800eea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800eea4:	1f0c      	subs	r4, r1, #4
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	bfb8      	it	lt
 800eeaa:	18e4      	addlt	r4, r4, r3
 800eeac:	f000 faec 	bl	800f488 <__malloc_lock>
 800eeb0:	4a1d      	ldr	r2, [pc, #116]	@ (800ef28 <_free_r+0x90>)
 800eeb2:	6813      	ldr	r3, [r2, #0]
 800eeb4:	b933      	cbnz	r3, 800eec4 <_free_r+0x2c>
 800eeb6:	6063      	str	r3, [r4, #4]
 800eeb8:	6014      	str	r4, [r2, #0]
 800eeba:	4628      	mov	r0, r5
 800eebc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eec0:	f000 bae8 	b.w	800f494 <__malloc_unlock>
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	d908      	bls.n	800eeda <_free_r+0x42>
 800eec8:	6820      	ldr	r0, [r4, #0]
 800eeca:	1821      	adds	r1, r4, r0
 800eecc:	428b      	cmp	r3, r1
 800eece:	bf01      	itttt	eq
 800eed0:	6819      	ldreq	r1, [r3, #0]
 800eed2:	685b      	ldreq	r3, [r3, #4]
 800eed4:	1809      	addeq	r1, r1, r0
 800eed6:	6021      	streq	r1, [r4, #0]
 800eed8:	e7ed      	b.n	800eeb6 <_free_r+0x1e>
 800eeda:	461a      	mov	r2, r3
 800eedc:	685b      	ldr	r3, [r3, #4]
 800eede:	b10b      	cbz	r3, 800eee4 <_free_r+0x4c>
 800eee0:	42a3      	cmp	r3, r4
 800eee2:	d9fa      	bls.n	800eeda <_free_r+0x42>
 800eee4:	6811      	ldr	r1, [r2, #0]
 800eee6:	1850      	adds	r0, r2, r1
 800eee8:	42a0      	cmp	r0, r4
 800eeea:	d10b      	bne.n	800ef04 <_free_r+0x6c>
 800eeec:	6820      	ldr	r0, [r4, #0]
 800eeee:	4401      	add	r1, r0
 800eef0:	1850      	adds	r0, r2, r1
 800eef2:	4283      	cmp	r3, r0
 800eef4:	6011      	str	r1, [r2, #0]
 800eef6:	d1e0      	bne.n	800eeba <_free_r+0x22>
 800eef8:	6818      	ldr	r0, [r3, #0]
 800eefa:	685b      	ldr	r3, [r3, #4]
 800eefc:	6053      	str	r3, [r2, #4]
 800eefe:	4408      	add	r0, r1
 800ef00:	6010      	str	r0, [r2, #0]
 800ef02:	e7da      	b.n	800eeba <_free_r+0x22>
 800ef04:	d902      	bls.n	800ef0c <_free_r+0x74>
 800ef06:	230c      	movs	r3, #12
 800ef08:	602b      	str	r3, [r5, #0]
 800ef0a:	e7d6      	b.n	800eeba <_free_r+0x22>
 800ef0c:	6820      	ldr	r0, [r4, #0]
 800ef0e:	1821      	adds	r1, r4, r0
 800ef10:	428b      	cmp	r3, r1
 800ef12:	bf04      	itt	eq
 800ef14:	6819      	ldreq	r1, [r3, #0]
 800ef16:	685b      	ldreq	r3, [r3, #4]
 800ef18:	6063      	str	r3, [r4, #4]
 800ef1a:	bf04      	itt	eq
 800ef1c:	1809      	addeq	r1, r1, r0
 800ef1e:	6021      	streq	r1, [r4, #0]
 800ef20:	6054      	str	r4, [r2, #4]
 800ef22:	e7ca      	b.n	800eeba <_free_r+0x22>
 800ef24:	bd38      	pop	{r3, r4, r5, pc}
 800ef26:	bf00      	nop
 800ef28:	200058fc 	.word	0x200058fc

0800ef2c <__ssputs_r>:
 800ef2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef30:	688e      	ldr	r6, [r1, #8]
 800ef32:	461f      	mov	r7, r3
 800ef34:	42be      	cmp	r6, r7
 800ef36:	680b      	ldr	r3, [r1, #0]
 800ef38:	4682      	mov	sl, r0
 800ef3a:	460c      	mov	r4, r1
 800ef3c:	4690      	mov	r8, r2
 800ef3e:	d82d      	bhi.n	800ef9c <__ssputs_r+0x70>
 800ef40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ef44:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ef48:	d026      	beq.n	800ef98 <__ssputs_r+0x6c>
 800ef4a:	6965      	ldr	r5, [r4, #20]
 800ef4c:	6909      	ldr	r1, [r1, #16]
 800ef4e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef52:	eba3 0901 	sub.w	r9, r3, r1
 800ef56:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef5a:	1c7b      	adds	r3, r7, #1
 800ef5c:	444b      	add	r3, r9
 800ef5e:	106d      	asrs	r5, r5, #1
 800ef60:	429d      	cmp	r5, r3
 800ef62:	bf38      	it	cc
 800ef64:	461d      	movcc	r5, r3
 800ef66:	0553      	lsls	r3, r2, #21
 800ef68:	d527      	bpl.n	800efba <__ssputs_r+0x8e>
 800ef6a:	4629      	mov	r1, r5
 800ef6c:	f000 f960 	bl	800f230 <_malloc_r>
 800ef70:	4606      	mov	r6, r0
 800ef72:	b360      	cbz	r0, 800efce <__ssputs_r+0xa2>
 800ef74:	6921      	ldr	r1, [r4, #16]
 800ef76:	464a      	mov	r2, r9
 800ef78:	f7ff f926 	bl	800e1c8 <memcpy>
 800ef7c:	89a3      	ldrh	r3, [r4, #12]
 800ef7e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ef82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ef86:	81a3      	strh	r3, [r4, #12]
 800ef88:	6126      	str	r6, [r4, #16]
 800ef8a:	6165      	str	r5, [r4, #20]
 800ef8c:	444e      	add	r6, r9
 800ef8e:	eba5 0509 	sub.w	r5, r5, r9
 800ef92:	6026      	str	r6, [r4, #0]
 800ef94:	60a5      	str	r5, [r4, #8]
 800ef96:	463e      	mov	r6, r7
 800ef98:	42be      	cmp	r6, r7
 800ef9a:	d900      	bls.n	800ef9e <__ssputs_r+0x72>
 800ef9c:	463e      	mov	r6, r7
 800ef9e:	6820      	ldr	r0, [r4, #0]
 800efa0:	4632      	mov	r2, r6
 800efa2:	4641      	mov	r1, r8
 800efa4:	f000 fe67 	bl	800fc76 <memmove>
 800efa8:	68a3      	ldr	r3, [r4, #8]
 800efaa:	1b9b      	subs	r3, r3, r6
 800efac:	60a3      	str	r3, [r4, #8]
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	4433      	add	r3, r6
 800efb2:	6023      	str	r3, [r4, #0]
 800efb4:	2000      	movs	r0, #0
 800efb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efba:	462a      	mov	r2, r5
 800efbc:	f000 fe2d 	bl	800fc1a <_realloc_r>
 800efc0:	4606      	mov	r6, r0
 800efc2:	2800      	cmp	r0, #0
 800efc4:	d1e0      	bne.n	800ef88 <__ssputs_r+0x5c>
 800efc6:	6921      	ldr	r1, [r4, #16]
 800efc8:	4650      	mov	r0, sl
 800efca:	f7ff ff65 	bl	800ee98 <_free_r>
 800efce:	230c      	movs	r3, #12
 800efd0:	f8ca 3000 	str.w	r3, [sl]
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efda:	81a3      	strh	r3, [r4, #12]
 800efdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800efe0:	e7e9      	b.n	800efb6 <__ssputs_r+0x8a>
	...

0800efe4 <_svfiprintf_r>:
 800efe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efe8:	4698      	mov	r8, r3
 800efea:	898b      	ldrh	r3, [r1, #12]
 800efec:	061b      	lsls	r3, r3, #24
 800efee:	b09d      	sub	sp, #116	@ 0x74
 800eff0:	4607      	mov	r7, r0
 800eff2:	460d      	mov	r5, r1
 800eff4:	4614      	mov	r4, r2
 800eff6:	d510      	bpl.n	800f01a <_svfiprintf_r+0x36>
 800eff8:	690b      	ldr	r3, [r1, #16]
 800effa:	b973      	cbnz	r3, 800f01a <_svfiprintf_r+0x36>
 800effc:	2140      	movs	r1, #64	@ 0x40
 800effe:	f000 f917 	bl	800f230 <_malloc_r>
 800f002:	6028      	str	r0, [r5, #0]
 800f004:	6128      	str	r0, [r5, #16]
 800f006:	b930      	cbnz	r0, 800f016 <_svfiprintf_r+0x32>
 800f008:	230c      	movs	r3, #12
 800f00a:	603b      	str	r3, [r7, #0]
 800f00c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f010:	b01d      	add	sp, #116	@ 0x74
 800f012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f016:	2340      	movs	r3, #64	@ 0x40
 800f018:	616b      	str	r3, [r5, #20]
 800f01a:	2300      	movs	r3, #0
 800f01c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f01e:	2320      	movs	r3, #32
 800f020:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f024:	f8cd 800c 	str.w	r8, [sp, #12]
 800f028:	2330      	movs	r3, #48	@ 0x30
 800f02a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f1c8 <_svfiprintf_r+0x1e4>
 800f02e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f032:	f04f 0901 	mov.w	r9, #1
 800f036:	4623      	mov	r3, r4
 800f038:	469a      	mov	sl, r3
 800f03a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f03e:	b10a      	cbz	r2, 800f044 <_svfiprintf_r+0x60>
 800f040:	2a25      	cmp	r2, #37	@ 0x25
 800f042:	d1f9      	bne.n	800f038 <_svfiprintf_r+0x54>
 800f044:	ebba 0b04 	subs.w	fp, sl, r4
 800f048:	d00b      	beq.n	800f062 <_svfiprintf_r+0x7e>
 800f04a:	465b      	mov	r3, fp
 800f04c:	4622      	mov	r2, r4
 800f04e:	4629      	mov	r1, r5
 800f050:	4638      	mov	r0, r7
 800f052:	f7ff ff6b 	bl	800ef2c <__ssputs_r>
 800f056:	3001      	adds	r0, #1
 800f058:	f000 80a7 	beq.w	800f1aa <_svfiprintf_r+0x1c6>
 800f05c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f05e:	445a      	add	r2, fp
 800f060:	9209      	str	r2, [sp, #36]	@ 0x24
 800f062:	f89a 3000 	ldrb.w	r3, [sl]
 800f066:	2b00      	cmp	r3, #0
 800f068:	f000 809f 	beq.w	800f1aa <_svfiprintf_r+0x1c6>
 800f06c:	2300      	movs	r3, #0
 800f06e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f072:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f076:	f10a 0a01 	add.w	sl, sl, #1
 800f07a:	9304      	str	r3, [sp, #16]
 800f07c:	9307      	str	r3, [sp, #28]
 800f07e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f082:	931a      	str	r3, [sp, #104]	@ 0x68
 800f084:	4654      	mov	r4, sl
 800f086:	2205      	movs	r2, #5
 800f088:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f08c:	484e      	ldr	r0, [pc, #312]	@ (800f1c8 <_svfiprintf_r+0x1e4>)
 800f08e:	f7f1 f89f 	bl	80001d0 <memchr>
 800f092:	9a04      	ldr	r2, [sp, #16]
 800f094:	b9d8      	cbnz	r0, 800f0ce <_svfiprintf_r+0xea>
 800f096:	06d0      	lsls	r0, r2, #27
 800f098:	bf44      	itt	mi
 800f09a:	2320      	movmi	r3, #32
 800f09c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0a0:	0711      	lsls	r1, r2, #28
 800f0a2:	bf44      	itt	mi
 800f0a4:	232b      	movmi	r3, #43	@ 0x2b
 800f0a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f0aa:	f89a 3000 	ldrb.w	r3, [sl]
 800f0ae:	2b2a      	cmp	r3, #42	@ 0x2a
 800f0b0:	d015      	beq.n	800f0de <_svfiprintf_r+0xfa>
 800f0b2:	9a07      	ldr	r2, [sp, #28]
 800f0b4:	4654      	mov	r4, sl
 800f0b6:	2000      	movs	r0, #0
 800f0b8:	f04f 0c0a 	mov.w	ip, #10
 800f0bc:	4621      	mov	r1, r4
 800f0be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0c2:	3b30      	subs	r3, #48	@ 0x30
 800f0c4:	2b09      	cmp	r3, #9
 800f0c6:	d94b      	bls.n	800f160 <_svfiprintf_r+0x17c>
 800f0c8:	b1b0      	cbz	r0, 800f0f8 <_svfiprintf_r+0x114>
 800f0ca:	9207      	str	r2, [sp, #28]
 800f0cc:	e014      	b.n	800f0f8 <_svfiprintf_r+0x114>
 800f0ce:	eba0 0308 	sub.w	r3, r0, r8
 800f0d2:	fa09 f303 	lsl.w	r3, r9, r3
 800f0d6:	4313      	orrs	r3, r2
 800f0d8:	9304      	str	r3, [sp, #16]
 800f0da:	46a2      	mov	sl, r4
 800f0dc:	e7d2      	b.n	800f084 <_svfiprintf_r+0xa0>
 800f0de:	9b03      	ldr	r3, [sp, #12]
 800f0e0:	1d19      	adds	r1, r3, #4
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	9103      	str	r1, [sp, #12]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	bfbb      	ittet	lt
 800f0ea:	425b      	neglt	r3, r3
 800f0ec:	f042 0202 	orrlt.w	r2, r2, #2
 800f0f0:	9307      	strge	r3, [sp, #28]
 800f0f2:	9307      	strlt	r3, [sp, #28]
 800f0f4:	bfb8      	it	lt
 800f0f6:	9204      	strlt	r2, [sp, #16]
 800f0f8:	7823      	ldrb	r3, [r4, #0]
 800f0fa:	2b2e      	cmp	r3, #46	@ 0x2e
 800f0fc:	d10a      	bne.n	800f114 <_svfiprintf_r+0x130>
 800f0fe:	7863      	ldrb	r3, [r4, #1]
 800f100:	2b2a      	cmp	r3, #42	@ 0x2a
 800f102:	d132      	bne.n	800f16a <_svfiprintf_r+0x186>
 800f104:	9b03      	ldr	r3, [sp, #12]
 800f106:	1d1a      	adds	r2, r3, #4
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	9203      	str	r2, [sp, #12]
 800f10c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f110:	3402      	adds	r4, #2
 800f112:	9305      	str	r3, [sp, #20]
 800f114:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f1d8 <_svfiprintf_r+0x1f4>
 800f118:	7821      	ldrb	r1, [r4, #0]
 800f11a:	2203      	movs	r2, #3
 800f11c:	4650      	mov	r0, sl
 800f11e:	f7f1 f857 	bl	80001d0 <memchr>
 800f122:	b138      	cbz	r0, 800f134 <_svfiprintf_r+0x150>
 800f124:	9b04      	ldr	r3, [sp, #16]
 800f126:	eba0 000a 	sub.w	r0, r0, sl
 800f12a:	2240      	movs	r2, #64	@ 0x40
 800f12c:	4082      	lsls	r2, r0
 800f12e:	4313      	orrs	r3, r2
 800f130:	3401      	adds	r4, #1
 800f132:	9304      	str	r3, [sp, #16]
 800f134:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f138:	4824      	ldr	r0, [pc, #144]	@ (800f1cc <_svfiprintf_r+0x1e8>)
 800f13a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f13e:	2206      	movs	r2, #6
 800f140:	f7f1 f846 	bl	80001d0 <memchr>
 800f144:	2800      	cmp	r0, #0
 800f146:	d036      	beq.n	800f1b6 <_svfiprintf_r+0x1d2>
 800f148:	4b21      	ldr	r3, [pc, #132]	@ (800f1d0 <_svfiprintf_r+0x1ec>)
 800f14a:	bb1b      	cbnz	r3, 800f194 <_svfiprintf_r+0x1b0>
 800f14c:	9b03      	ldr	r3, [sp, #12]
 800f14e:	3307      	adds	r3, #7
 800f150:	f023 0307 	bic.w	r3, r3, #7
 800f154:	3308      	adds	r3, #8
 800f156:	9303      	str	r3, [sp, #12]
 800f158:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f15a:	4433      	add	r3, r6
 800f15c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f15e:	e76a      	b.n	800f036 <_svfiprintf_r+0x52>
 800f160:	fb0c 3202 	mla	r2, ip, r2, r3
 800f164:	460c      	mov	r4, r1
 800f166:	2001      	movs	r0, #1
 800f168:	e7a8      	b.n	800f0bc <_svfiprintf_r+0xd8>
 800f16a:	2300      	movs	r3, #0
 800f16c:	3401      	adds	r4, #1
 800f16e:	9305      	str	r3, [sp, #20]
 800f170:	4619      	mov	r1, r3
 800f172:	f04f 0c0a 	mov.w	ip, #10
 800f176:	4620      	mov	r0, r4
 800f178:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f17c:	3a30      	subs	r2, #48	@ 0x30
 800f17e:	2a09      	cmp	r2, #9
 800f180:	d903      	bls.n	800f18a <_svfiprintf_r+0x1a6>
 800f182:	2b00      	cmp	r3, #0
 800f184:	d0c6      	beq.n	800f114 <_svfiprintf_r+0x130>
 800f186:	9105      	str	r1, [sp, #20]
 800f188:	e7c4      	b.n	800f114 <_svfiprintf_r+0x130>
 800f18a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f18e:	4604      	mov	r4, r0
 800f190:	2301      	movs	r3, #1
 800f192:	e7f0      	b.n	800f176 <_svfiprintf_r+0x192>
 800f194:	ab03      	add	r3, sp, #12
 800f196:	9300      	str	r3, [sp, #0]
 800f198:	462a      	mov	r2, r5
 800f19a:	4b0e      	ldr	r3, [pc, #56]	@ (800f1d4 <_svfiprintf_r+0x1f0>)
 800f19c:	a904      	add	r1, sp, #16
 800f19e:	4638      	mov	r0, r7
 800f1a0:	f7fe fae2 	bl	800d768 <_printf_float>
 800f1a4:	1c42      	adds	r2, r0, #1
 800f1a6:	4606      	mov	r6, r0
 800f1a8:	d1d6      	bne.n	800f158 <_svfiprintf_r+0x174>
 800f1aa:	89ab      	ldrh	r3, [r5, #12]
 800f1ac:	065b      	lsls	r3, r3, #25
 800f1ae:	f53f af2d 	bmi.w	800f00c <_svfiprintf_r+0x28>
 800f1b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f1b4:	e72c      	b.n	800f010 <_svfiprintf_r+0x2c>
 800f1b6:	ab03      	add	r3, sp, #12
 800f1b8:	9300      	str	r3, [sp, #0]
 800f1ba:	462a      	mov	r2, r5
 800f1bc:	4b05      	ldr	r3, [pc, #20]	@ (800f1d4 <_svfiprintf_r+0x1f0>)
 800f1be:	a904      	add	r1, sp, #16
 800f1c0:	4638      	mov	r0, r7
 800f1c2:	f7fe fd69 	bl	800dc98 <_printf_i>
 800f1c6:	e7ed      	b.n	800f1a4 <_svfiprintf_r+0x1c0>
 800f1c8:	08010731 	.word	0x08010731
 800f1cc:	0801073b 	.word	0x0801073b
 800f1d0:	0800d769 	.word	0x0800d769
 800f1d4:	0800ef2d 	.word	0x0800ef2d
 800f1d8:	08010737 	.word	0x08010737

0800f1dc <malloc>:
 800f1dc:	4b02      	ldr	r3, [pc, #8]	@ (800f1e8 <malloc+0xc>)
 800f1de:	4601      	mov	r1, r0
 800f1e0:	6818      	ldr	r0, [r3, #0]
 800f1e2:	f000 b825 	b.w	800f230 <_malloc_r>
 800f1e6:	bf00      	nop
 800f1e8:	2000005c 	.word	0x2000005c

0800f1ec <sbrk_aligned>:
 800f1ec:	b570      	push	{r4, r5, r6, lr}
 800f1ee:	4e0f      	ldr	r6, [pc, #60]	@ (800f22c <sbrk_aligned+0x40>)
 800f1f0:	460c      	mov	r4, r1
 800f1f2:	6831      	ldr	r1, [r6, #0]
 800f1f4:	4605      	mov	r5, r0
 800f1f6:	b911      	cbnz	r1, 800f1fe <sbrk_aligned+0x12>
 800f1f8:	f000 fd7c 	bl	800fcf4 <_sbrk_r>
 800f1fc:	6030      	str	r0, [r6, #0]
 800f1fe:	4621      	mov	r1, r4
 800f200:	4628      	mov	r0, r5
 800f202:	f000 fd77 	bl	800fcf4 <_sbrk_r>
 800f206:	1c43      	adds	r3, r0, #1
 800f208:	d103      	bne.n	800f212 <sbrk_aligned+0x26>
 800f20a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f20e:	4620      	mov	r0, r4
 800f210:	bd70      	pop	{r4, r5, r6, pc}
 800f212:	1cc4      	adds	r4, r0, #3
 800f214:	f024 0403 	bic.w	r4, r4, #3
 800f218:	42a0      	cmp	r0, r4
 800f21a:	d0f8      	beq.n	800f20e <sbrk_aligned+0x22>
 800f21c:	1a21      	subs	r1, r4, r0
 800f21e:	4628      	mov	r0, r5
 800f220:	f000 fd68 	bl	800fcf4 <_sbrk_r>
 800f224:	3001      	adds	r0, #1
 800f226:	d1f2      	bne.n	800f20e <sbrk_aligned+0x22>
 800f228:	e7ef      	b.n	800f20a <sbrk_aligned+0x1e>
 800f22a:	bf00      	nop
 800f22c:	200058f8 	.word	0x200058f8

0800f230 <_malloc_r>:
 800f230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f234:	1ccd      	adds	r5, r1, #3
 800f236:	f025 0503 	bic.w	r5, r5, #3
 800f23a:	3508      	adds	r5, #8
 800f23c:	2d0c      	cmp	r5, #12
 800f23e:	bf38      	it	cc
 800f240:	250c      	movcc	r5, #12
 800f242:	2d00      	cmp	r5, #0
 800f244:	4606      	mov	r6, r0
 800f246:	db01      	blt.n	800f24c <_malloc_r+0x1c>
 800f248:	42a9      	cmp	r1, r5
 800f24a:	d904      	bls.n	800f256 <_malloc_r+0x26>
 800f24c:	230c      	movs	r3, #12
 800f24e:	6033      	str	r3, [r6, #0]
 800f250:	2000      	movs	r0, #0
 800f252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f256:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f32c <_malloc_r+0xfc>
 800f25a:	f000 f915 	bl	800f488 <__malloc_lock>
 800f25e:	f8d8 3000 	ldr.w	r3, [r8]
 800f262:	461c      	mov	r4, r3
 800f264:	bb44      	cbnz	r4, 800f2b8 <_malloc_r+0x88>
 800f266:	4629      	mov	r1, r5
 800f268:	4630      	mov	r0, r6
 800f26a:	f7ff ffbf 	bl	800f1ec <sbrk_aligned>
 800f26e:	1c43      	adds	r3, r0, #1
 800f270:	4604      	mov	r4, r0
 800f272:	d158      	bne.n	800f326 <_malloc_r+0xf6>
 800f274:	f8d8 4000 	ldr.w	r4, [r8]
 800f278:	4627      	mov	r7, r4
 800f27a:	2f00      	cmp	r7, #0
 800f27c:	d143      	bne.n	800f306 <_malloc_r+0xd6>
 800f27e:	2c00      	cmp	r4, #0
 800f280:	d04b      	beq.n	800f31a <_malloc_r+0xea>
 800f282:	6823      	ldr	r3, [r4, #0]
 800f284:	4639      	mov	r1, r7
 800f286:	4630      	mov	r0, r6
 800f288:	eb04 0903 	add.w	r9, r4, r3
 800f28c:	f000 fd32 	bl	800fcf4 <_sbrk_r>
 800f290:	4581      	cmp	r9, r0
 800f292:	d142      	bne.n	800f31a <_malloc_r+0xea>
 800f294:	6821      	ldr	r1, [r4, #0]
 800f296:	1a6d      	subs	r5, r5, r1
 800f298:	4629      	mov	r1, r5
 800f29a:	4630      	mov	r0, r6
 800f29c:	f7ff ffa6 	bl	800f1ec <sbrk_aligned>
 800f2a0:	3001      	adds	r0, #1
 800f2a2:	d03a      	beq.n	800f31a <_malloc_r+0xea>
 800f2a4:	6823      	ldr	r3, [r4, #0]
 800f2a6:	442b      	add	r3, r5
 800f2a8:	6023      	str	r3, [r4, #0]
 800f2aa:	f8d8 3000 	ldr.w	r3, [r8]
 800f2ae:	685a      	ldr	r2, [r3, #4]
 800f2b0:	bb62      	cbnz	r2, 800f30c <_malloc_r+0xdc>
 800f2b2:	f8c8 7000 	str.w	r7, [r8]
 800f2b6:	e00f      	b.n	800f2d8 <_malloc_r+0xa8>
 800f2b8:	6822      	ldr	r2, [r4, #0]
 800f2ba:	1b52      	subs	r2, r2, r5
 800f2bc:	d420      	bmi.n	800f300 <_malloc_r+0xd0>
 800f2be:	2a0b      	cmp	r2, #11
 800f2c0:	d917      	bls.n	800f2f2 <_malloc_r+0xc2>
 800f2c2:	1961      	adds	r1, r4, r5
 800f2c4:	42a3      	cmp	r3, r4
 800f2c6:	6025      	str	r5, [r4, #0]
 800f2c8:	bf18      	it	ne
 800f2ca:	6059      	strne	r1, [r3, #4]
 800f2cc:	6863      	ldr	r3, [r4, #4]
 800f2ce:	bf08      	it	eq
 800f2d0:	f8c8 1000 	streq.w	r1, [r8]
 800f2d4:	5162      	str	r2, [r4, r5]
 800f2d6:	604b      	str	r3, [r1, #4]
 800f2d8:	4630      	mov	r0, r6
 800f2da:	f000 f8db 	bl	800f494 <__malloc_unlock>
 800f2de:	f104 000b 	add.w	r0, r4, #11
 800f2e2:	1d23      	adds	r3, r4, #4
 800f2e4:	f020 0007 	bic.w	r0, r0, #7
 800f2e8:	1ac2      	subs	r2, r0, r3
 800f2ea:	bf1c      	itt	ne
 800f2ec:	1a1b      	subne	r3, r3, r0
 800f2ee:	50a3      	strne	r3, [r4, r2]
 800f2f0:	e7af      	b.n	800f252 <_malloc_r+0x22>
 800f2f2:	6862      	ldr	r2, [r4, #4]
 800f2f4:	42a3      	cmp	r3, r4
 800f2f6:	bf0c      	ite	eq
 800f2f8:	f8c8 2000 	streq.w	r2, [r8]
 800f2fc:	605a      	strne	r2, [r3, #4]
 800f2fe:	e7eb      	b.n	800f2d8 <_malloc_r+0xa8>
 800f300:	4623      	mov	r3, r4
 800f302:	6864      	ldr	r4, [r4, #4]
 800f304:	e7ae      	b.n	800f264 <_malloc_r+0x34>
 800f306:	463c      	mov	r4, r7
 800f308:	687f      	ldr	r7, [r7, #4]
 800f30a:	e7b6      	b.n	800f27a <_malloc_r+0x4a>
 800f30c:	461a      	mov	r2, r3
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	42a3      	cmp	r3, r4
 800f312:	d1fb      	bne.n	800f30c <_malloc_r+0xdc>
 800f314:	2300      	movs	r3, #0
 800f316:	6053      	str	r3, [r2, #4]
 800f318:	e7de      	b.n	800f2d8 <_malloc_r+0xa8>
 800f31a:	230c      	movs	r3, #12
 800f31c:	6033      	str	r3, [r6, #0]
 800f31e:	4630      	mov	r0, r6
 800f320:	f000 f8b8 	bl	800f494 <__malloc_unlock>
 800f324:	e794      	b.n	800f250 <_malloc_r+0x20>
 800f326:	6005      	str	r5, [r0, #0]
 800f328:	e7d6      	b.n	800f2d8 <_malloc_r+0xa8>
 800f32a:	bf00      	nop
 800f32c:	200058fc 	.word	0x200058fc

0800f330 <__sflush_r>:
 800f330:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f338:	0716      	lsls	r6, r2, #28
 800f33a:	4605      	mov	r5, r0
 800f33c:	460c      	mov	r4, r1
 800f33e:	d454      	bmi.n	800f3ea <__sflush_r+0xba>
 800f340:	684b      	ldr	r3, [r1, #4]
 800f342:	2b00      	cmp	r3, #0
 800f344:	dc02      	bgt.n	800f34c <__sflush_r+0x1c>
 800f346:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f348:	2b00      	cmp	r3, #0
 800f34a:	dd48      	ble.n	800f3de <__sflush_r+0xae>
 800f34c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f34e:	2e00      	cmp	r6, #0
 800f350:	d045      	beq.n	800f3de <__sflush_r+0xae>
 800f352:	2300      	movs	r3, #0
 800f354:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f358:	682f      	ldr	r7, [r5, #0]
 800f35a:	6a21      	ldr	r1, [r4, #32]
 800f35c:	602b      	str	r3, [r5, #0]
 800f35e:	d030      	beq.n	800f3c2 <__sflush_r+0x92>
 800f360:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f362:	89a3      	ldrh	r3, [r4, #12]
 800f364:	0759      	lsls	r1, r3, #29
 800f366:	d505      	bpl.n	800f374 <__sflush_r+0x44>
 800f368:	6863      	ldr	r3, [r4, #4]
 800f36a:	1ad2      	subs	r2, r2, r3
 800f36c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f36e:	b10b      	cbz	r3, 800f374 <__sflush_r+0x44>
 800f370:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f372:	1ad2      	subs	r2, r2, r3
 800f374:	2300      	movs	r3, #0
 800f376:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f378:	6a21      	ldr	r1, [r4, #32]
 800f37a:	4628      	mov	r0, r5
 800f37c:	47b0      	blx	r6
 800f37e:	1c43      	adds	r3, r0, #1
 800f380:	89a3      	ldrh	r3, [r4, #12]
 800f382:	d106      	bne.n	800f392 <__sflush_r+0x62>
 800f384:	6829      	ldr	r1, [r5, #0]
 800f386:	291d      	cmp	r1, #29
 800f388:	d82b      	bhi.n	800f3e2 <__sflush_r+0xb2>
 800f38a:	4a2a      	ldr	r2, [pc, #168]	@ (800f434 <__sflush_r+0x104>)
 800f38c:	40ca      	lsrs	r2, r1
 800f38e:	07d6      	lsls	r6, r2, #31
 800f390:	d527      	bpl.n	800f3e2 <__sflush_r+0xb2>
 800f392:	2200      	movs	r2, #0
 800f394:	6062      	str	r2, [r4, #4]
 800f396:	04d9      	lsls	r1, r3, #19
 800f398:	6922      	ldr	r2, [r4, #16]
 800f39a:	6022      	str	r2, [r4, #0]
 800f39c:	d504      	bpl.n	800f3a8 <__sflush_r+0x78>
 800f39e:	1c42      	adds	r2, r0, #1
 800f3a0:	d101      	bne.n	800f3a6 <__sflush_r+0x76>
 800f3a2:	682b      	ldr	r3, [r5, #0]
 800f3a4:	b903      	cbnz	r3, 800f3a8 <__sflush_r+0x78>
 800f3a6:	6560      	str	r0, [r4, #84]	@ 0x54
 800f3a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f3aa:	602f      	str	r7, [r5, #0]
 800f3ac:	b1b9      	cbz	r1, 800f3de <__sflush_r+0xae>
 800f3ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f3b2:	4299      	cmp	r1, r3
 800f3b4:	d002      	beq.n	800f3bc <__sflush_r+0x8c>
 800f3b6:	4628      	mov	r0, r5
 800f3b8:	f7ff fd6e 	bl	800ee98 <_free_r>
 800f3bc:	2300      	movs	r3, #0
 800f3be:	6363      	str	r3, [r4, #52]	@ 0x34
 800f3c0:	e00d      	b.n	800f3de <__sflush_r+0xae>
 800f3c2:	2301      	movs	r3, #1
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	47b0      	blx	r6
 800f3c8:	4602      	mov	r2, r0
 800f3ca:	1c50      	adds	r0, r2, #1
 800f3cc:	d1c9      	bne.n	800f362 <__sflush_r+0x32>
 800f3ce:	682b      	ldr	r3, [r5, #0]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d0c6      	beq.n	800f362 <__sflush_r+0x32>
 800f3d4:	2b1d      	cmp	r3, #29
 800f3d6:	d001      	beq.n	800f3dc <__sflush_r+0xac>
 800f3d8:	2b16      	cmp	r3, #22
 800f3da:	d11e      	bne.n	800f41a <__sflush_r+0xea>
 800f3dc:	602f      	str	r7, [r5, #0]
 800f3de:	2000      	movs	r0, #0
 800f3e0:	e022      	b.n	800f428 <__sflush_r+0xf8>
 800f3e2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f3e6:	b21b      	sxth	r3, r3
 800f3e8:	e01b      	b.n	800f422 <__sflush_r+0xf2>
 800f3ea:	690f      	ldr	r7, [r1, #16]
 800f3ec:	2f00      	cmp	r7, #0
 800f3ee:	d0f6      	beq.n	800f3de <__sflush_r+0xae>
 800f3f0:	0793      	lsls	r3, r2, #30
 800f3f2:	680e      	ldr	r6, [r1, #0]
 800f3f4:	bf08      	it	eq
 800f3f6:	694b      	ldreq	r3, [r1, #20]
 800f3f8:	600f      	str	r7, [r1, #0]
 800f3fa:	bf18      	it	ne
 800f3fc:	2300      	movne	r3, #0
 800f3fe:	eba6 0807 	sub.w	r8, r6, r7
 800f402:	608b      	str	r3, [r1, #8]
 800f404:	f1b8 0f00 	cmp.w	r8, #0
 800f408:	dde9      	ble.n	800f3de <__sflush_r+0xae>
 800f40a:	6a21      	ldr	r1, [r4, #32]
 800f40c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f40e:	4643      	mov	r3, r8
 800f410:	463a      	mov	r2, r7
 800f412:	4628      	mov	r0, r5
 800f414:	47b0      	blx	r6
 800f416:	2800      	cmp	r0, #0
 800f418:	dc08      	bgt.n	800f42c <__sflush_r+0xfc>
 800f41a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f41e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f422:	81a3      	strh	r3, [r4, #12]
 800f424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f42c:	4407      	add	r7, r0
 800f42e:	eba8 0800 	sub.w	r8, r8, r0
 800f432:	e7e7      	b.n	800f404 <__sflush_r+0xd4>
 800f434:	20400001 	.word	0x20400001

0800f438 <_fflush_r>:
 800f438:	b538      	push	{r3, r4, r5, lr}
 800f43a:	690b      	ldr	r3, [r1, #16]
 800f43c:	4605      	mov	r5, r0
 800f43e:	460c      	mov	r4, r1
 800f440:	b913      	cbnz	r3, 800f448 <_fflush_r+0x10>
 800f442:	2500      	movs	r5, #0
 800f444:	4628      	mov	r0, r5
 800f446:	bd38      	pop	{r3, r4, r5, pc}
 800f448:	b118      	cbz	r0, 800f452 <_fflush_r+0x1a>
 800f44a:	6a03      	ldr	r3, [r0, #32]
 800f44c:	b90b      	cbnz	r3, 800f452 <_fflush_r+0x1a>
 800f44e:	f7fe fdcd 	bl	800dfec <__sinit>
 800f452:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d0f3      	beq.n	800f442 <_fflush_r+0xa>
 800f45a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f45c:	07d0      	lsls	r0, r2, #31
 800f45e:	d404      	bmi.n	800f46a <_fflush_r+0x32>
 800f460:	0599      	lsls	r1, r3, #22
 800f462:	d402      	bmi.n	800f46a <_fflush_r+0x32>
 800f464:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f466:	f7fe fe4a 	bl	800e0fe <__retarget_lock_acquire_recursive>
 800f46a:	4628      	mov	r0, r5
 800f46c:	4621      	mov	r1, r4
 800f46e:	f7ff ff5f 	bl	800f330 <__sflush_r>
 800f472:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f474:	07da      	lsls	r2, r3, #31
 800f476:	4605      	mov	r5, r0
 800f478:	d4e4      	bmi.n	800f444 <_fflush_r+0xc>
 800f47a:	89a3      	ldrh	r3, [r4, #12]
 800f47c:	059b      	lsls	r3, r3, #22
 800f47e:	d4e1      	bmi.n	800f444 <_fflush_r+0xc>
 800f480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f482:	f7fe fe3d 	bl	800e100 <__retarget_lock_release_recursive>
 800f486:	e7dd      	b.n	800f444 <_fflush_r+0xc>

0800f488 <__malloc_lock>:
 800f488:	4801      	ldr	r0, [pc, #4]	@ (800f490 <__malloc_lock+0x8>)
 800f48a:	f7fe be38 	b.w	800e0fe <__retarget_lock_acquire_recursive>
 800f48e:	bf00      	nop
 800f490:	200058f0 	.word	0x200058f0

0800f494 <__malloc_unlock>:
 800f494:	4801      	ldr	r0, [pc, #4]	@ (800f49c <__malloc_unlock+0x8>)
 800f496:	f7fe be33 	b.w	800e100 <__retarget_lock_release_recursive>
 800f49a:	bf00      	nop
 800f49c:	200058f0 	.word	0x200058f0

0800f4a0 <_Balloc>:
 800f4a0:	b570      	push	{r4, r5, r6, lr}
 800f4a2:	69c6      	ldr	r6, [r0, #28]
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	460d      	mov	r5, r1
 800f4a8:	b976      	cbnz	r6, 800f4c8 <_Balloc+0x28>
 800f4aa:	2010      	movs	r0, #16
 800f4ac:	f7ff fe96 	bl	800f1dc <malloc>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	61e0      	str	r0, [r4, #28]
 800f4b4:	b920      	cbnz	r0, 800f4c0 <_Balloc+0x20>
 800f4b6:	4b18      	ldr	r3, [pc, #96]	@ (800f518 <_Balloc+0x78>)
 800f4b8:	4818      	ldr	r0, [pc, #96]	@ (800f51c <_Balloc+0x7c>)
 800f4ba:	216b      	movs	r1, #107	@ 0x6b
 800f4bc:	f000 fc4c 	bl	800fd58 <__assert_func>
 800f4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4c4:	6006      	str	r6, [r0, #0]
 800f4c6:	60c6      	str	r6, [r0, #12]
 800f4c8:	69e6      	ldr	r6, [r4, #28]
 800f4ca:	68f3      	ldr	r3, [r6, #12]
 800f4cc:	b183      	cbz	r3, 800f4f0 <_Balloc+0x50>
 800f4ce:	69e3      	ldr	r3, [r4, #28]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4d6:	b9b8      	cbnz	r0, 800f508 <_Balloc+0x68>
 800f4d8:	2101      	movs	r1, #1
 800f4da:	fa01 f605 	lsl.w	r6, r1, r5
 800f4de:	1d72      	adds	r2, r6, #5
 800f4e0:	0092      	lsls	r2, r2, #2
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 fc56 	bl	800fd94 <_calloc_r>
 800f4e8:	b160      	cbz	r0, 800f504 <_Balloc+0x64>
 800f4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4ee:	e00e      	b.n	800f50e <_Balloc+0x6e>
 800f4f0:	2221      	movs	r2, #33	@ 0x21
 800f4f2:	2104      	movs	r1, #4
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 fc4d 	bl	800fd94 <_calloc_r>
 800f4fa:	69e3      	ldr	r3, [r4, #28]
 800f4fc:	60f0      	str	r0, [r6, #12]
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1e4      	bne.n	800f4ce <_Balloc+0x2e>
 800f504:	2000      	movs	r0, #0
 800f506:	bd70      	pop	{r4, r5, r6, pc}
 800f508:	6802      	ldr	r2, [r0, #0]
 800f50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f50e:	2300      	movs	r3, #0
 800f510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f514:	e7f7      	b.n	800f506 <_Balloc+0x66>
 800f516:	bf00      	nop
 800f518:	080106b1 	.word	0x080106b1
 800f51c:	08010742 	.word	0x08010742

0800f520 <_Bfree>:
 800f520:	b570      	push	{r4, r5, r6, lr}
 800f522:	69c6      	ldr	r6, [r0, #28]
 800f524:	4605      	mov	r5, r0
 800f526:	460c      	mov	r4, r1
 800f528:	b976      	cbnz	r6, 800f548 <_Bfree+0x28>
 800f52a:	2010      	movs	r0, #16
 800f52c:	f7ff fe56 	bl	800f1dc <malloc>
 800f530:	4602      	mov	r2, r0
 800f532:	61e8      	str	r0, [r5, #28]
 800f534:	b920      	cbnz	r0, 800f540 <_Bfree+0x20>
 800f536:	4b09      	ldr	r3, [pc, #36]	@ (800f55c <_Bfree+0x3c>)
 800f538:	4809      	ldr	r0, [pc, #36]	@ (800f560 <_Bfree+0x40>)
 800f53a:	218f      	movs	r1, #143	@ 0x8f
 800f53c:	f000 fc0c 	bl	800fd58 <__assert_func>
 800f540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f544:	6006      	str	r6, [r0, #0]
 800f546:	60c6      	str	r6, [r0, #12]
 800f548:	b13c      	cbz	r4, 800f55a <_Bfree+0x3a>
 800f54a:	69eb      	ldr	r3, [r5, #28]
 800f54c:	6862      	ldr	r2, [r4, #4]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f554:	6021      	str	r1, [r4, #0]
 800f556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f55a:	bd70      	pop	{r4, r5, r6, pc}
 800f55c:	080106b1 	.word	0x080106b1
 800f560:	08010742 	.word	0x08010742

0800f564 <__multadd>:
 800f564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f568:	690d      	ldr	r5, [r1, #16]
 800f56a:	4607      	mov	r7, r0
 800f56c:	460c      	mov	r4, r1
 800f56e:	461e      	mov	r6, r3
 800f570:	f101 0c14 	add.w	ip, r1, #20
 800f574:	2000      	movs	r0, #0
 800f576:	f8dc 3000 	ldr.w	r3, [ip]
 800f57a:	b299      	uxth	r1, r3
 800f57c:	fb02 6101 	mla	r1, r2, r1, r6
 800f580:	0c1e      	lsrs	r6, r3, #16
 800f582:	0c0b      	lsrs	r3, r1, #16
 800f584:	fb02 3306 	mla	r3, r2, r6, r3
 800f588:	b289      	uxth	r1, r1
 800f58a:	3001      	adds	r0, #1
 800f58c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f590:	4285      	cmp	r5, r0
 800f592:	f84c 1b04 	str.w	r1, [ip], #4
 800f596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f59a:	dcec      	bgt.n	800f576 <__multadd+0x12>
 800f59c:	b30e      	cbz	r6, 800f5e2 <__multadd+0x7e>
 800f59e:	68a3      	ldr	r3, [r4, #8]
 800f5a0:	42ab      	cmp	r3, r5
 800f5a2:	dc19      	bgt.n	800f5d8 <__multadd+0x74>
 800f5a4:	6861      	ldr	r1, [r4, #4]
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	3101      	adds	r1, #1
 800f5aa:	f7ff ff79 	bl	800f4a0 <_Balloc>
 800f5ae:	4680      	mov	r8, r0
 800f5b0:	b928      	cbnz	r0, 800f5be <__multadd+0x5a>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f5e8 <__multadd+0x84>)
 800f5b6:	480d      	ldr	r0, [pc, #52]	@ (800f5ec <__multadd+0x88>)
 800f5b8:	21ba      	movs	r1, #186	@ 0xba
 800f5ba:	f000 fbcd 	bl	800fd58 <__assert_func>
 800f5be:	6922      	ldr	r2, [r4, #16]
 800f5c0:	3202      	adds	r2, #2
 800f5c2:	f104 010c 	add.w	r1, r4, #12
 800f5c6:	0092      	lsls	r2, r2, #2
 800f5c8:	300c      	adds	r0, #12
 800f5ca:	f7fe fdfd 	bl	800e1c8 <memcpy>
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	4638      	mov	r0, r7
 800f5d2:	f7ff ffa5 	bl	800f520 <_Bfree>
 800f5d6:	4644      	mov	r4, r8
 800f5d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5dc:	3501      	adds	r5, #1
 800f5de:	615e      	str	r6, [r3, #20]
 800f5e0:	6125      	str	r5, [r4, #16]
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e8:	08010720 	.word	0x08010720
 800f5ec:	08010742 	.word	0x08010742

0800f5f0 <__hi0bits>:
 800f5f0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	bf36      	itet	cc
 800f5f8:	0403      	lslcc	r3, r0, #16
 800f5fa:	2000      	movcs	r0, #0
 800f5fc:	2010      	movcc	r0, #16
 800f5fe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800f602:	bf3c      	itt	cc
 800f604:	021b      	lslcc	r3, r3, #8
 800f606:	3008      	addcc	r0, #8
 800f608:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800f60c:	bf3c      	itt	cc
 800f60e:	011b      	lslcc	r3, r3, #4
 800f610:	3004      	addcc	r0, #4
 800f612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f616:	bf3c      	itt	cc
 800f618:	009b      	lslcc	r3, r3, #2
 800f61a:	3002      	addcc	r0, #2
 800f61c:	2b00      	cmp	r3, #0
 800f61e:	db05      	blt.n	800f62c <__hi0bits+0x3c>
 800f620:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800f624:	f100 0001 	add.w	r0, r0, #1
 800f628:	bf08      	it	eq
 800f62a:	2020      	moveq	r0, #32
 800f62c:	4770      	bx	lr

0800f62e <__lo0bits>:
 800f62e:	6803      	ldr	r3, [r0, #0]
 800f630:	4602      	mov	r2, r0
 800f632:	f013 0007 	ands.w	r0, r3, #7
 800f636:	d00b      	beq.n	800f650 <__lo0bits+0x22>
 800f638:	07d9      	lsls	r1, r3, #31
 800f63a:	d421      	bmi.n	800f680 <__lo0bits+0x52>
 800f63c:	0798      	lsls	r0, r3, #30
 800f63e:	bf49      	itett	mi
 800f640:	085b      	lsrmi	r3, r3, #1
 800f642:	089b      	lsrpl	r3, r3, #2
 800f644:	2001      	movmi	r0, #1
 800f646:	6013      	strmi	r3, [r2, #0]
 800f648:	bf5c      	itt	pl
 800f64a:	6013      	strpl	r3, [r2, #0]
 800f64c:	2002      	movpl	r0, #2
 800f64e:	4770      	bx	lr
 800f650:	b299      	uxth	r1, r3
 800f652:	b909      	cbnz	r1, 800f658 <__lo0bits+0x2a>
 800f654:	0c1b      	lsrs	r3, r3, #16
 800f656:	2010      	movs	r0, #16
 800f658:	b2d9      	uxtb	r1, r3
 800f65a:	b909      	cbnz	r1, 800f660 <__lo0bits+0x32>
 800f65c:	3008      	adds	r0, #8
 800f65e:	0a1b      	lsrs	r3, r3, #8
 800f660:	0719      	lsls	r1, r3, #28
 800f662:	bf04      	itt	eq
 800f664:	091b      	lsreq	r3, r3, #4
 800f666:	3004      	addeq	r0, #4
 800f668:	0799      	lsls	r1, r3, #30
 800f66a:	bf04      	itt	eq
 800f66c:	089b      	lsreq	r3, r3, #2
 800f66e:	3002      	addeq	r0, #2
 800f670:	07d9      	lsls	r1, r3, #31
 800f672:	d403      	bmi.n	800f67c <__lo0bits+0x4e>
 800f674:	085b      	lsrs	r3, r3, #1
 800f676:	f100 0001 	add.w	r0, r0, #1
 800f67a:	d003      	beq.n	800f684 <__lo0bits+0x56>
 800f67c:	6013      	str	r3, [r2, #0]
 800f67e:	4770      	bx	lr
 800f680:	2000      	movs	r0, #0
 800f682:	4770      	bx	lr
 800f684:	2020      	movs	r0, #32
 800f686:	4770      	bx	lr

0800f688 <__i2b>:
 800f688:	b510      	push	{r4, lr}
 800f68a:	460c      	mov	r4, r1
 800f68c:	2101      	movs	r1, #1
 800f68e:	f7ff ff07 	bl	800f4a0 <_Balloc>
 800f692:	4602      	mov	r2, r0
 800f694:	b928      	cbnz	r0, 800f6a2 <__i2b+0x1a>
 800f696:	4b05      	ldr	r3, [pc, #20]	@ (800f6ac <__i2b+0x24>)
 800f698:	4805      	ldr	r0, [pc, #20]	@ (800f6b0 <__i2b+0x28>)
 800f69a:	f240 1145 	movw	r1, #325	@ 0x145
 800f69e:	f000 fb5b 	bl	800fd58 <__assert_func>
 800f6a2:	2301      	movs	r3, #1
 800f6a4:	6144      	str	r4, [r0, #20]
 800f6a6:	6103      	str	r3, [r0, #16]
 800f6a8:	bd10      	pop	{r4, pc}
 800f6aa:	bf00      	nop
 800f6ac:	08010720 	.word	0x08010720
 800f6b0:	08010742 	.word	0x08010742

0800f6b4 <__multiply>:
 800f6b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f6b8:	4617      	mov	r7, r2
 800f6ba:	690a      	ldr	r2, [r1, #16]
 800f6bc:	693b      	ldr	r3, [r7, #16]
 800f6be:	429a      	cmp	r2, r3
 800f6c0:	bfa8      	it	ge
 800f6c2:	463b      	movge	r3, r7
 800f6c4:	4689      	mov	r9, r1
 800f6c6:	bfa4      	itt	ge
 800f6c8:	460f      	movge	r7, r1
 800f6ca:	4699      	movge	r9, r3
 800f6cc:	693d      	ldr	r5, [r7, #16]
 800f6ce:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f6d2:	68bb      	ldr	r3, [r7, #8]
 800f6d4:	6879      	ldr	r1, [r7, #4]
 800f6d6:	eb05 060a 	add.w	r6, r5, sl
 800f6da:	42b3      	cmp	r3, r6
 800f6dc:	b085      	sub	sp, #20
 800f6de:	bfb8      	it	lt
 800f6e0:	3101      	addlt	r1, #1
 800f6e2:	f7ff fedd 	bl	800f4a0 <_Balloc>
 800f6e6:	b930      	cbnz	r0, 800f6f6 <__multiply+0x42>
 800f6e8:	4602      	mov	r2, r0
 800f6ea:	4b41      	ldr	r3, [pc, #260]	@ (800f7f0 <__multiply+0x13c>)
 800f6ec:	4841      	ldr	r0, [pc, #260]	@ (800f7f4 <__multiply+0x140>)
 800f6ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800f6f2:	f000 fb31 	bl	800fd58 <__assert_func>
 800f6f6:	f100 0414 	add.w	r4, r0, #20
 800f6fa:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800f6fe:	4623      	mov	r3, r4
 800f700:	2200      	movs	r2, #0
 800f702:	4573      	cmp	r3, lr
 800f704:	d320      	bcc.n	800f748 <__multiply+0x94>
 800f706:	f107 0814 	add.w	r8, r7, #20
 800f70a:	f109 0114 	add.w	r1, r9, #20
 800f70e:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800f712:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800f716:	9302      	str	r3, [sp, #8]
 800f718:	1beb      	subs	r3, r5, r7
 800f71a:	3b15      	subs	r3, #21
 800f71c:	f023 0303 	bic.w	r3, r3, #3
 800f720:	3304      	adds	r3, #4
 800f722:	3715      	adds	r7, #21
 800f724:	42bd      	cmp	r5, r7
 800f726:	bf38      	it	cc
 800f728:	2304      	movcc	r3, #4
 800f72a:	9301      	str	r3, [sp, #4]
 800f72c:	9b02      	ldr	r3, [sp, #8]
 800f72e:	9103      	str	r1, [sp, #12]
 800f730:	428b      	cmp	r3, r1
 800f732:	d80c      	bhi.n	800f74e <__multiply+0x9a>
 800f734:	2e00      	cmp	r6, #0
 800f736:	dd03      	ble.n	800f740 <__multiply+0x8c>
 800f738:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d055      	beq.n	800f7ec <__multiply+0x138>
 800f740:	6106      	str	r6, [r0, #16]
 800f742:	b005      	add	sp, #20
 800f744:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f748:	f843 2b04 	str.w	r2, [r3], #4
 800f74c:	e7d9      	b.n	800f702 <__multiply+0x4e>
 800f74e:	f8b1 a000 	ldrh.w	sl, [r1]
 800f752:	f1ba 0f00 	cmp.w	sl, #0
 800f756:	d01f      	beq.n	800f798 <__multiply+0xe4>
 800f758:	46c4      	mov	ip, r8
 800f75a:	46a1      	mov	r9, r4
 800f75c:	2700      	movs	r7, #0
 800f75e:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f762:	f8d9 3000 	ldr.w	r3, [r9]
 800f766:	fa1f fb82 	uxth.w	fp, r2
 800f76a:	b29b      	uxth	r3, r3
 800f76c:	fb0a 330b 	mla	r3, sl, fp, r3
 800f770:	443b      	add	r3, r7
 800f772:	f8d9 7000 	ldr.w	r7, [r9]
 800f776:	0c12      	lsrs	r2, r2, #16
 800f778:	0c3f      	lsrs	r7, r7, #16
 800f77a:	fb0a 7202 	mla	r2, sl, r2, r7
 800f77e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800f782:	b29b      	uxth	r3, r3
 800f784:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f788:	4565      	cmp	r5, ip
 800f78a:	f849 3b04 	str.w	r3, [r9], #4
 800f78e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800f792:	d8e4      	bhi.n	800f75e <__multiply+0xaa>
 800f794:	9b01      	ldr	r3, [sp, #4]
 800f796:	50e7      	str	r7, [r4, r3]
 800f798:	9b03      	ldr	r3, [sp, #12]
 800f79a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800f79e:	3104      	adds	r1, #4
 800f7a0:	f1b9 0f00 	cmp.w	r9, #0
 800f7a4:	d020      	beq.n	800f7e8 <__multiply+0x134>
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	4647      	mov	r7, r8
 800f7aa:	46a4      	mov	ip, r4
 800f7ac:	f04f 0a00 	mov.w	sl, #0
 800f7b0:	f8b7 b000 	ldrh.w	fp, [r7]
 800f7b4:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800f7b8:	fb09 220b 	mla	r2, r9, fp, r2
 800f7bc:	4452      	add	r2, sl
 800f7be:	b29b      	uxth	r3, r3
 800f7c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f7c4:	f84c 3b04 	str.w	r3, [ip], #4
 800f7c8:	f857 3b04 	ldr.w	r3, [r7], #4
 800f7cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7d0:	f8bc 3000 	ldrh.w	r3, [ip]
 800f7d4:	fb09 330a 	mla	r3, r9, sl, r3
 800f7d8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800f7dc:	42bd      	cmp	r5, r7
 800f7de:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f7e2:	d8e5      	bhi.n	800f7b0 <__multiply+0xfc>
 800f7e4:	9a01      	ldr	r2, [sp, #4]
 800f7e6:	50a3      	str	r3, [r4, r2]
 800f7e8:	3404      	adds	r4, #4
 800f7ea:	e79f      	b.n	800f72c <__multiply+0x78>
 800f7ec:	3e01      	subs	r6, #1
 800f7ee:	e7a1      	b.n	800f734 <__multiply+0x80>
 800f7f0:	08010720 	.word	0x08010720
 800f7f4:	08010742 	.word	0x08010742

0800f7f8 <__pow5mult>:
 800f7f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7fc:	4615      	mov	r5, r2
 800f7fe:	f012 0203 	ands.w	r2, r2, #3
 800f802:	4607      	mov	r7, r0
 800f804:	460e      	mov	r6, r1
 800f806:	d007      	beq.n	800f818 <__pow5mult+0x20>
 800f808:	4c25      	ldr	r4, [pc, #148]	@ (800f8a0 <__pow5mult+0xa8>)
 800f80a:	3a01      	subs	r2, #1
 800f80c:	2300      	movs	r3, #0
 800f80e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f812:	f7ff fea7 	bl	800f564 <__multadd>
 800f816:	4606      	mov	r6, r0
 800f818:	10ad      	asrs	r5, r5, #2
 800f81a:	d03d      	beq.n	800f898 <__pow5mult+0xa0>
 800f81c:	69fc      	ldr	r4, [r7, #28]
 800f81e:	b97c      	cbnz	r4, 800f840 <__pow5mult+0x48>
 800f820:	2010      	movs	r0, #16
 800f822:	f7ff fcdb 	bl	800f1dc <malloc>
 800f826:	4602      	mov	r2, r0
 800f828:	61f8      	str	r0, [r7, #28]
 800f82a:	b928      	cbnz	r0, 800f838 <__pow5mult+0x40>
 800f82c:	4b1d      	ldr	r3, [pc, #116]	@ (800f8a4 <__pow5mult+0xac>)
 800f82e:	481e      	ldr	r0, [pc, #120]	@ (800f8a8 <__pow5mult+0xb0>)
 800f830:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800f834:	f000 fa90 	bl	800fd58 <__assert_func>
 800f838:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f83c:	6004      	str	r4, [r0, #0]
 800f83e:	60c4      	str	r4, [r0, #12]
 800f840:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800f844:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f848:	b94c      	cbnz	r4, 800f85e <__pow5mult+0x66>
 800f84a:	f240 2171 	movw	r1, #625	@ 0x271
 800f84e:	4638      	mov	r0, r7
 800f850:	f7ff ff1a 	bl	800f688 <__i2b>
 800f854:	2300      	movs	r3, #0
 800f856:	f8c8 0008 	str.w	r0, [r8, #8]
 800f85a:	4604      	mov	r4, r0
 800f85c:	6003      	str	r3, [r0, #0]
 800f85e:	f04f 0900 	mov.w	r9, #0
 800f862:	07eb      	lsls	r3, r5, #31
 800f864:	d50a      	bpl.n	800f87c <__pow5mult+0x84>
 800f866:	4631      	mov	r1, r6
 800f868:	4622      	mov	r2, r4
 800f86a:	4638      	mov	r0, r7
 800f86c:	f7ff ff22 	bl	800f6b4 <__multiply>
 800f870:	4631      	mov	r1, r6
 800f872:	4680      	mov	r8, r0
 800f874:	4638      	mov	r0, r7
 800f876:	f7ff fe53 	bl	800f520 <_Bfree>
 800f87a:	4646      	mov	r6, r8
 800f87c:	106d      	asrs	r5, r5, #1
 800f87e:	d00b      	beq.n	800f898 <__pow5mult+0xa0>
 800f880:	6820      	ldr	r0, [r4, #0]
 800f882:	b938      	cbnz	r0, 800f894 <__pow5mult+0x9c>
 800f884:	4622      	mov	r2, r4
 800f886:	4621      	mov	r1, r4
 800f888:	4638      	mov	r0, r7
 800f88a:	f7ff ff13 	bl	800f6b4 <__multiply>
 800f88e:	6020      	str	r0, [r4, #0]
 800f890:	f8c0 9000 	str.w	r9, [r0]
 800f894:	4604      	mov	r4, r0
 800f896:	e7e4      	b.n	800f862 <__pow5mult+0x6a>
 800f898:	4630      	mov	r0, r6
 800f89a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f89e:	bf00      	nop
 800f8a0:	080107e4 	.word	0x080107e4
 800f8a4:	080106b1 	.word	0x080106b1
 800f8a8:	08010742 	.word	0x08010742

0800f8ac <__lshift>:
 800f8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f8b0:	460c      	mov	r4, r1
 800f8b2:	6849      	ldr	r1, [r1, #4]
 800f8b4:	6923      	ldr	r3, [r4, #16]
 800f8b6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f8ba:	68a3      	ldr	r3, [r4, #8]
 800f8bc:	4607      	mov	r7, r0
 800f8be:	4691      	mov	r9, r2
 800f8c0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f8c4:	f108 0601 	add.w	r6, r8, #1
 800f8c8:	42b3      	cmp	r3, r6
 800f8ca:	db0b      	blt.n	800f8e4 <__lshift+0x38>
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	f7ff fde7 	bl	800f4a0 <_Balloc>
 800f8d2:	4605      	mov	r5, r0
 800f8d4:	b948      	cbnz	r0, 800f8ea <__lshift+0x3e>
 800f8d6:	4602      	mov	r2, r0
 800f8d8:	4b28      	ldr	r3, [pc, #160]	@ (800f97c <__lshift+0xd0>)
 800f8da:	4829      	ldr	r0, [pc, #164]	@ (800f980 <__lshift+0xd4>)
 800f8dc:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800f8e0:	f000 fa3a 	bl	800fd58 <__assert_func>
 800f8e4:	3101      	adds	r1, #1
 800f8e6:	005b      	lsls	r3, r3, #1
 800f8e8:	e7ee      	b.n	800f8c8 <__lshift+0x1c>
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	f100 0114 	add.w	r1, r0, #20
 800f8f0:	f100 0210 	add.w	r2, r0, #16
 800f8f4:	4618      	mov	r0, r3
 800f8f6:	4553      	cmp	r3, sl
 800f8f8:	db33      	blt.n	800f962 <__lshift+0xb6>
 800f8fa:	6920      	ldr	r0, [r4, #16]
 800f8fc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f900:	f104 0314 	add.w	r3, r4, #20
 800f904:	f019 091f 	ands.w	r9, r9, #31
 800f908:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f90c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800f910:	d02b      	beq.n	800f96a <__lshift+0xbe>
 800f912:	f1c9 0e20 	rsb	lr, r9, #32
 800f916:	468a      	mov	sl, r1
 800f918:	2200      	movs	r2, #0
 800f91a:	6818      	ldr	r0, [r3, #0]
 800f91c:	fa00 f009 	lsl.w	r0, r0, r9
 800f920:	4310      	orrs	r0, r2
 800f922:	f84a 0b04 	str.w	r0, [sl], #4
 800f926:	f853 2b04 	ldr.w	r2, [r3], #4
 800f92a:	459c      	cmp	ip, r3
 800f92c:	fa22 f20e 	lsr.w	r2, r2, lr
 800f930:	d8f3      	bhi.n	800f91a <__lshift+0x6e>
 800f932:	ebac 0304 	sub.w	r3, ip, r4
 800f936:	3b15      	subs	r3, #21
 800f938:	f023 0303 	bic.w	r3, r3, #3
 800f93c:	3304      	adds	r3, #4
 800f93e:	f104 0015 	add.w	r0, r4, #21
 800f942:	4560      	cmp	r0, ip
 800f944:	bf88      	it	hi
 800f946:	2304      	movhi	r3, #4
 800f948:	50ca      	str	r2, [r1, r3]
 800f94a:	b10a      	cbz	r2, 800f950 <__lshift+0xa4>
 800f94c:	f108 0602 	add.w	r6, r8, #2
 800f950:	3e01      	subs	r6, #1
 800f952:	4638      	mov	r0, r7
 800f954:	612e      	str	r6, [r5, #16]
 800f956:	4621      	mov	r1, r4
 800f958:	f7ff fde2 	bl	800f520 <_Bfree>
 800f95c:	4628      	mov	r0, r5
 800f95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f962:	f842 0f04 	str.w	r0, [r2, #4]!
 800f966:	3301      	adds	r3, #1
 800f968:	e7c5      	b.n	800f8f6 <__lshift+0x4a>
 800f96a:	3904      	subs	r1, #4
 800f96c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f970:	f841 2f04 	str.w	r2, [r1, #4]!
 800f974:	459c      	cmp	ip, r3
 800f976:	d8f9      	bhi.n	800f96c <__lshift+0xc0>
 800f978:	e7ea      	b.n	800f950 <__lshift+0xa4>
 800f97a:	bf00      	nop
 800f97c:	08010720 	.word	0x08010720
 800f980:	08010742 	.word	0x08010742

0800f984 <__mcmp>:
 800f984:	690a      	ldr	r2, [r1, #16]
 800f986:	4603      	mov	r3, r0
 800f988:	6900      	ldr	r0, [r0, #16]
 800f98a:	1a80      	subs	r0, r0, r2
 800f98c:	b530      	push	{r4, r5, lr}
 800f98e:	d10e      	bne.n	800f9ae <__mcmp+0x2a>
 800f990:	3314      	adds	r3, #20
 800f992:	3114      	adds	r1, #20
 800f994:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800f998:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800f99c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800f9a0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800f9a4:	4295      	cmp	r5, r2
 800f9a6:	d003      	beq.n	800f9b0 <__mcmp+0x2c>
 800f9a8:	d205      	bcs.n	800f9b6 <__mcmp+0x32>
 800f9aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9ae:	bd30      	pop	{r4, r5, pc}
 800f9b0:	42a3      	cmp	r3, r4
 800f9b2:	d3f3      	bcc.n	800f99c <__mcmp+0x18>
 800f9b4:	e7fb      	b.n	800f9ae <__mcmp+0x2a>
 800f9b6:	2001      	movs	r0, #1
 800f9b8:	e7f9      	b.n	800f9ae <__mcmp+0x2a>
	...

0800f9bc <__mdiff>:
 800f9bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9c0:	4689      	mov	r9, r1
 800f9c2:	4606      	mov	r6, r0
 800f9c4:	4611      	mov	r1, r2
 800f9c6:	4648      	mov	r0, r9
 800f9c8:	4614      	mov	r4, r2
 800f9ca:	f7ff ffdb 	bl	800f984 <__mcmp>
 800f9ce:	1e05      	subs	r5, r0, #0
 800f9d0:	d112      	bne.n	800f9f8 <__mdiff+0x3c>
 800f9d2:	4629      	mov	r1, r5
 800f9d4:	4630      	mov	r0, r6
 800f9d6:	f7ff fd63 	bl	800f4a0 <_Balloc>
 800f9da:	4602      	mov	r2, r0
 800f9dc:	b928      	cbnz	r0, 800f9ea <__mdiff+0x2e>
 800f9de:	4b3f      	ldr	r3, [pc, #252]	@ (800fadc <__mdiff+0x120>)
 800f9e0:	f240 2137 	movw	r1, #567	@ 0x237
 800f9e4:	483e      	ldr	r0, [pc, #248]	@ (800fae0 <__mdiff+0x124>)
 800f9e6:	f000 f9b7 	bl	800fd58 <__assert_func>
 800f9ea:	2301      	movs	r3, #1
 800f9ec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f9f0:	4610      	mov	r0, r2
 800f9f2:	b003      	add	sp, #12
 800f9f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f8:	bfbc      	itt	lt
 800f9fa:	464b      	movlt	r3, r9
 800f9fc:	46a1      	movlt	r9, r4
 800f9fe:	4630      	mov	r0, r6
 800fa00:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800fa04:	bfba      	itte	lt
 800fa06:	461c      	movlt	r4, r3
 800fa08:	2501      	movlt	r5, #1
 800fa0a:	2500      	movge	r5, #0
 800fa0c:	f7ff fd48 	bl	800f4a0 <_Balloc>
 800fa10:	4602      	mov	r2, r0
 800fa12:	b918      	cbnz	r0, 800fa1c <__mdiff+0x60>
 800fa14:	4b31      	ldr	r3, [pc, #196]	@ (800fadc <__mdiff+0x120>)
 800fa16:	f240 2145 	movw	r1, #581	@ 0x245
 800fa1a:	e7e3      	b.n	800f9e4 <__mdiff+0x28>
 800fa1c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800fa20:	6926      	ldr	r6, [r4, #16]
 800fa22:	60c5      	str	r5, [r0, #12]
 800fa24:	f109 0310 	add.w	r3, r9, #16
 800fa28:	f109 0514 	add.w	r5, r9, #20
 800fa2c:	f104 0e14 	add.w	lr, r4, #20
 800fa30:	f100 0b14 	add.w	fp, r0, #20
 800fa34:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800fa38:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800fa3c:	9301      	str	r3, [sp, #4]
 800fa3e:	46d9      	mov	r9, fp
 800fa40:	f04f 0c00 	mov.w	ip, #0
 800fa44:	9b01      	ldr	r3, [sp, #4]
 800fa46:	f85e 0b04 	ldr.w	r0, [lr], #4
 800fa4a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800fa4e:	9301      	str	r3, [sp, #4]
 800fa50:	fa1f f38a 	uxth.w	r3, sl
 800fa54:	4619      	mov	r1, r3
 800fa56:	b283      	uxth	r3, r0
 800fa58:	1acb      	subs	r3, r1, r3
 800fa5a:	0c00      	lsrs	r0, r0, #16
 800fa5c:	4463      	add	r3, ip
 800fa5e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800fa62:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800fa66:	b29b      	uxth	r3, r3
 800fa68:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800fa6c:	4576      	cmp	r6, lr
 800fa6e:	f849 3b04 	str.w	r3, [r9], #4
 800fa72:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fa76:	d8e5      	bhi.n	800fa44 <__mdiff+0x88>
 800fa78:	1b33      	subs	r3, r6, r4
 800fa7a:	3b15      	subs	r3, #21
 800fa7c:	f023 0303 	bic.w	r3, r3, #3
 800fa80:	3415      	adds	r4, #21
 800fa82:	3304      	adds	r3, #4
 800fa84:	42a6      	cmp	r6, r4
 800fa86:	bf38      	it	cc
 800fa88:	2304      	movcc	r3, #4
 800fa8a:	441d      	add	r5, r3
 800fa8c:	445b      	add	r3, fp
 800fa8e:	461e      	mov	r6, r3
 800fa90:	462c      	mov	r4, r5
 800fa92:	4544      	cmp	r4, r8
 800fa94:	d30e      	bcc.n	800fab4 <__mdiff+0xf8>
 800fa96:	f108 0103 	add.w	r1, r8, #3
 800fa9a:	1b49      	subs	r1, r1, r5
 800fa9c:	f021 0103 	bic.w	r1, r1, #3
 800faa0:	3d03      	subs	r5, #3
 800faa2:	45a8      	cmp	r8, r5
 800faa4:	bf38      	it	cc
 800faa6:	2100      	movcc	r1, #0
 800faa8:	440b      	add	r3, r1
 800faaa:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800faae:	b191      	cbz	r1, 800fad6 <__mdiff+0x11a>
 800fab0:	6117      	str	r7, [r2, #16]
 800fab2:	e79d      	b.n	800f9f0 <__mdiff+0x34>
 800fab4:	f854 1b04 	ldr.w	r1, [r4], #4
 800fab8:	46e6      	mov	lr, ip
 800faba:	0c08      	lsrs	r0, r1, #16
 800fabc:	fa1c fc81 	uxtah	ip, ip, r1
 800fac0:	4471      	add	r1, lr
 800fac2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800fac6:	b289      	uxth	r1, r1
 800fac8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800facc:	f846 1b04 	str.w	r1, [r6], #4
 800fad0:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800fad4:	e7dd      	b.n	800fa92 <__mdiff+0xd6>
 800fad6:	3f01      	subs	r7, #1
 800fad8:	e7e7      	b.n	800faaa <__mdiff+0xee>
 800fada:	bf00      	nop
 800fadc:	08010720 	.word	0x08010720
 800fae0:	08010742 	.word	0x08010742

0800fae4 <__d2b>:
 800fae4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fae8:	460f      	mov	r7, r1
 800faea:	2101      	movs	r1, #1
 800faec:	ec59 8b10 	vmov	r8, r9, d0
 800faf0:	4616      	mov	r6, r2
 800faf2:	f7ff fcd5 	bl	800f4a0 <_Balloc>
 800faf6:	4604      	mov	r4, r0
 800faf8:	b930      	cbnz	r0, 800fb08 <__d2b+0x24>
 800fafa:	4602      	mov	r2, r0
 800fafc:	4b23      	ldr	r3, [pc, #140]	@ (800fb8c <__d2b+0xa8>)
 800fafe:	4824      	ldr	r0, [pc, #144]	@ (800fb90 <__d2b+0xac>)
 800fb00:	f240 310f 	movw	r1, #783	@ 0x30f
 800fb04:	f000 f928 	bl	800fd58 <__assert_func>
 800fb08:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800fb0c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fb10:	b10d      	cbz	r5, 800fb16 <__d2b+0x32>
 800fb12:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fb16:	9301      	str	r3, [sp, #4]
 800fb18:	f1b8 0300 	subs.w	r3, r8, #0
 800fb1c:	d023      	beq.n	800fb66 <__d2b+0x82>
 800fb1e:	4668      	mov	r0, sp
 800fb20:	9300      	str	r3, [sp, #0]
 800fb22:	f7ff fd84 	bl	800f62e <__lo0bits>
 800fb26:	e9dd 1200 	ldrd	r1, r2, [sp]
 800fb2a:	b1d0      	cbz	r0, 800fb62 <__d2b+0x7e>
 800fb2c:	f1c0 0320 	rsb	r3, r0, #32
 800fb30:	fa02 f303 	lsl.w	r3, r2, r3
 800fb34:	430b      	orrs	r3, r1
 800fb36:	40c2      	lsrs	r2, r0
 800fb38:	6163      	str	r3, [r4, #20]
 800fb3a:	9201      	str	r2, [sp, #4]
 800fb3c:	9b01      	ldr	r3, [sp, #4]
 800fb3e:	61a3      	str	r3, [r4, #24]
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	bf0c      	ite	eq
 800fb44:	2201      	moveq	r2, #1
 800fb46:	2202      	movne	r2, #2
 800fb48:	6122      	str	r2, [r4, #16]
 800fb4a:	b1a5      	cbz	r5, 800fb76 <__d2b+0x92>
 800fb4c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800fb50:	4405      	add	r5, r0
 800fb52:	603d      	str	r5, [r7, #0]
 800fb54:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800fb58:	6030      	str	r0, [r6, #0]
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	b003      	add	sp, #12
 800fb5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fb62:	6161      	str	r1, [r4, #20]
 800fb64:	e7ea      	b.n	800fb3c <__d2b+0x58>
 800fb66:	a801      	add	r0, sp, #4
 800fb68:	f7ff fd61 	bl	800f62e <__lo0bits>
 800fb6c:	9b01      	ldr	r3, [sp, #4]
 800fb6e:	6163      	str	r3, [r4, #20]
 800fb70:	3020      	adds	r0, #32
 800fb72:	2201      	movs	r2, #1
 800fb74:	e7e8      	b.n	800fb48 <__d2b+0x64>
 800fb76:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fb7a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800fb7e:	6038      	str	r0, [r7, #0]
 800fb80:	6918      	ldr	r0, [r3, #16]
 800fb82:	f7ff fd35 	bl	800f5f0 <__hi0bits>
 800fb86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fb8a:	e7e5      	b.n	800fb58 <__d2b+0x74>
 800fb8c:	08010720 	.word	0x08010720
 800fb90:	08010742 	.word	0x08010742

0800fb94 <__sread>:
 800fb94:	b510      	push	{r4, lr}
 800fb96:	460c      	mov	r4, r1
 800fb98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fb9c:	f000 f898 	bl	800fcd0 <_read_r>
 800fba0:	2800      	cmp	r0, #0
 800fba2:	bfab      	itete	ge
 800fba4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800fba6:	89a3      	ldrhlt	r3, [r4, #12]
 800fba8:	181b      	addge	r3, r3, r0
 800fbaa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fbae:	bfac      	ite	ge
 800fbb0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fbb2:	81a3      	strhlt	r3, [r4, #12]
 800fbb4:	bd10      	pop	{r4, pc}

0800fbb6 <__swrite>:
 800fbb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fbba:	461f      	mov	r7, r3
 800fbbc:	898b      	ldrh	r3, [r1, #12]
 800fbbe:	05db      	lsls	r3, r3, #23
 800fbc0:	4605      	mov	r5, r0
 800fbc2:	460c      	mov	r4, r1
 800fbc4:	4616      	mov	r6, r2
 800fbc6:	d505      	bpl.n	800fbd4 <__swrite+0x1e>
 800fbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbcc:	2302      	movs	r3, #2
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f000 f86c 	bl	800fcac <_lseek_r>
 800fbd4:	89a3      	ldrh	r3, [r4, #12]
 800fbd6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fbda:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fbde:	81a3      	strh	r3, [r4, #12]
 800fbe0:	4632      	mov	r2, r6
 800fbe2:	463b      	mov	r3, r7
 800fbe4:	4628      	mov	r0, r5
 800fbe6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fbea:	f000 b893 	b.w	800fd14 <_write_r>

0800fbee <__sseek>:
 800fbee:	b510      	push	{r4, lr}
 800fbf0:	460c      	mov	r4, r1
 800fbf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf6:	f000 f859 	bl	800fcac <_lseek_r>
 800fbfa:	1c43      	adds	r3, r0, #1
 800fbfc:	89a3      	ldrh	r3, [r4, #12]
 800fbfe:	bf15      	itete	ne
 800fc00:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fc02:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fc06:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fc0a:	81a3      	strheq	r3, [r4, #12]
 800fc0c:	bf18      	it	ne
 800fc0e:	81a3      	strhne	r3, [r4, #12]
 800fc10:	bd10      	pop	{r4, pc}

0800fc12 <__sclose>:
 800fc12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fc16:	f000 b88f 	b.w	800fd38 <_close_r>

0800fc1a <_realloc_r>:
 800fc1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc1e:	4607      	mov	r7, r0
 800fc20:	4614      	mov	r4, r2
 800fc22:	460d      	mov	r5, r1
 800fc24:	b921      	cbnz	r1, 800fc30 <_realloc_r+0x16>
 800fc26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fc2a:	4611      	mov	r1, r2
 800fc2c:	f7ff bb00 	b.w	800f230 <_malloc_r>
 800fc30:	b92a      	cbnz	r2, 800fc3e <_realloc_r+0x24>
 800fc32:	f7ff f931 	bl	800ee98 <_free_r>
 800fc36:	4625      	mov	r5, r4
 800fc38:	4628      	mov	r0, r5
 800fc3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fc3e:	f000 f8cf 	bl	800fde0 <_malloc_usable_size_r>
 800fc42:	4284      	cmp	r4, r0
 800fc44:	4606      	mov	r6, r0
 800fc46:	d802      	bhi.n	800fc4e <_realloc_r+0x34>
 800fc48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fc4c:	d8f4      	bhi.n	800fc38 <_realloc_r+0x1e>
 800fc4e:	4621      	mov	r1, r4
 800fc50:	4638      	mov	r0, r7
 800fc52:	f7ff faed 	bl	800f230 <_malloc_r>
 800fc56:	4680      	mov	r8, r0
 800fc58:	b908      	cbnz	r0, 800fc5e <_realloc_r+0x44>
 800fc5a:	4645      	mov	r5, r8
 800fc5c:	e7ec      	b.n	800fc38 <_realloc_r+0x1e>
 800fc5e:	42b4      	cmp	r4, r6
 800fc60:	4622      	mov	r2, r4
 800fc62:	4629      	mov	r1, r5
 800fc64:	bf28      	it	cs
 800fc66:	4632      	movcs	r2, r6
 800fc68:	f7fe faae 	bl	800e1c8 <memcpy>
 800fc6c:	4629      	mov	r1, r5
 800fc6e:	4638      	mov	r0, r7
 800fc70:	f7ff f912 	bl	800ee98 <_free_r>
 800fc74:	e7f1      	b.n	800fc5a <_realloc_r+0x40>

0800fc76 <memmove>:
 800fc76:	4288      	cmp	r0, r1
 800fc78:	b510      	push	{r4, lr}
 800fc7a:	eb01 0402 	add.w	r4, r1, r2
 800fc7e:	d902      	bls.n	800fc86 <memmove+0x10>
 800fc80:	4284      	cmp	r4, r0
 800fc82:	4623      	mov	r3, r4
 800fc84:	d807      	bhi.n	800fc96 <memmove+0x20>
 800fc86:	1e43      	subs	r3, r0, #1
 800fc88:	42a1      	cmp	r1, r4
 800fc8a:	d008      	beq.n	800fc9e <memmove+0x28>
 800fc8c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fc90:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fc94:	e7f8      	b.n	800fc88 <memmove+0x12>
 800fc96:	4402      	add	r2, r0
 800fc98:	4601      	mov	r1, r0
 800fc9a:	428a      	cmp	r2, r1
 800fc9c:	d100      	bne.n	800fca0 <memmove+0x2a>
 800fc9e:	bd10      	pop	{r4, pc}
 800fca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fca4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fca8:	e7f7      	b.n	800fc9a <memmove+0x24>
	...

0800fcac <_lseek_r>:
 800fcac:	b538      	push	{r3, r4, r5, lr}
 800fcae:	4d07      	ldr	r5, [pc, #28]	@ (800fccc <_lseek_r+0x20>)
 800fcb0:	4604      	mov	r4, r0
 800fcb2:	4608      	mov	r0, r1
 800fcb4:	4611      	mov	r1, r2
 800fcb6:	2200      	movs	r2, #0
 800fcb8:	602a      	str	r2, [r5, #0]
 800fcba:	461a      	mov	r2, r3
 800fcbc:	f7f5 fda1 	bl	8005802 <_lseek>
 800fcc0:	1c43      	adds	r3, r0, #1
 800fcc2:	d102      	bne.n	800fcca <_lseek_r+0x1e>
 800fcc4:	682b      	ldr	r3, [r5, #0]
 800fcc6:	b103      	cbz	r3, 800fcca <_lseek_r+0x1e>
 800fcc8:	6023      	str	r3, [r4, #0]
 800fcca:	bd38      	pop	{r3, r4, r5, pc}
 800fccc:	200058f4 	.word	0x200058f4

0800fcd0 <_read_r>:
 800fcd0:	b538      	push	{r3, r4, r5, lr}
 800fcd2:	4d07      	ldr	r5, [pc, #28]	@ (800fcf0 <_read_r+0x20>)
 800fcd4:	4604      	mov	r4, r0
 800fcd6:	4608      	mov	r0, r1
 800fcd8:	4611      	mov	r1, r2
 800fcda:	2200      	movs	r2, #0
 800fcdc:	602a      	str	r2, [r5, #0]
 800fcde:	461a      	mov	r2, r3
 800fce0:	f7f5 fd2f 	bl	8005742 <_read>
 800fce4:	1c43      	adds	r3, r0, #1
 800fce6:	d102      	bne.n	800fcee <_read_r+0x1e>
 800fce8:	682b      	ldr	r3, [r5, #0]
 800fcea:	b103      	cbz	r3, 800fcee <_read_r+0x1e>
 800fcec:	6023      	str	r3, [r4, #0]
 800fcee:	bd38      	pop	{r3, r4, r5, pc}
 800fcf0:	200058f4 	.word	0x200058f4

0800fcf4 <_sbrk_r>:
 800fcf4:	b538      	push	{r3, r4, r5, lr}
 800fcf6:	4d06      	ldr	r5, [pc, #24]	@ (800fd10 <_sbrk_r+0x1c>)
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	4604      	mov	r4, r0
 800fcfc:	4608      	mov	r0, r1
 800fcfe:	602b      	str	r3, [r5, #0]
 800fd00:	f7f5 fd8c 	bl	800581c <_sbrk>
 800fd04:	1c43      	adds	r3, r0, #1
 800fd06:	d102      	bne.n	800fd0e <_sbrk_r+0x1a>
 800fd08:	682b      	ldr	r3, [r5, #0]
 800fd0a:	b103      	cbz	r3, 800fd0e <_sbrk_r+0x1a>
 800fd0c:	6023      	str	r3, [r4, #0]
 800fd0e:	bd38      	pop	{r3, r4, r5, pc}
 800fd10:	200058f4 	.word	0x200058f4

0800fd14 <_write_r>:
 800fd14:	b538      	push	{r3, r4, r5, lr}
 800fd16:	4d07      	ldr	r5, [pc, #28]	@ (800fd34 <_write_r+0x20>)
 800fd18:	4604      	mov	r4, r0
 800fd1a:	4608      	mov	r0, r1
 800fd1c:	4611      	mov	r1, r2
 800fd1e:	2200      	movs	r2, #0
 800fd20:	602a      	str	r2, [r5, #0]
 800fd22:	461a      	mov	r2, r3
 800fd24:	f7f5 fd2a 	bl	800577c <_write>
 800fd28:	1c43      	adds	r3, r0, #1
 800fd2a:	d102      	bne.n	800fd32 <_write_r+0x1e>
 800fd2c:	682b      	ldr	r3, [r5, #0]
 800fd2e:	b103      	cbz	r3, 800fd32 <_write_r+0x1e>
 800fd30:	6023      	str	r3, [r4, #0]
 800fd32:	bd38      	pop	{r3, r4, r5, pc}
 800fd34:	200058f4 	.word	0x200058f4

0800fd38 <_close_r>:
 800fd38:	b538      	push	{r3, r4, r5, lr}
 800fd3a:	4d06      	ldr	r5, [pc, #24]	@ (800fd54 <_close_r+0x1c>)
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	4604      	mov	r4, r0
 800fd40:	4608      	mov	r0, r1
 800fd42:	602b      	str	r3, [r5, #0]
 800fd44:	f7f5 fd36 	bl	80057b4 <_close>
 800fd48:	1c43      	adds	r3, r0, #1
 800fd4a:	d102      	bne.n	800fd52 <_close_r+0x1a>
 800fd4c:	682b      	ldr	r3, [r5, #0]
 800fd4e:	b103      	cbz	r3, 800fd52 <_close_r+0x1a>
 800fd50:	6023      	str	r3, [r4, #0]
 800fd52:	bd38      	pop	{r3, r4, r5, pc}
 800fd54:	200058f4 	.word	0x200058f4

0800fd58 <__assert_func>:
 800fd58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fd5a:	4614      	mov	r4, r2
 800fd5c:	461a      	mov	r2, r3
 800fd5e:	4b09      	ldr	r3, [pc, #36]	@ (800fd84 <__assert_func+0x2c>)
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	4605      	mov	r5, r0
 800fd64:	68d8      	ldr	r0, [r3, #12]
 800fd66:	b14c      	cbz	r4, 800fd7c <__assert_func+0x24>
 800fd68:	4b07      	ldr	r3, [pc, #28]	@ (800fd88 <__assert_func+0x30>)
 800fd6a:	9100      	str	r1, [sp, #0]
 800fd6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800fd70:	4906      	ldr	r1, [pc, #24]	@ (800fd8c <__assert_func+0x34>)
 800fd72:	462b      	mov	r3, r5
 800fd74:	f000 f83c 	bl	800fdf0 <fiprintf>
 800fd78:	f000 f859 	bl	800fe2e <abort>
 800fd7c:	4b04      	ldr	r3, [pc, #16]	@ (800fd90 <__assert_func+0x38>)
 800fd7e:	461c      	mov	r4, r3
 800fd80:	e7f3      	b.n	800fd6a <__assert_func+0x12>
 800fd82:	bf00      	nop
 800fd84:	2000005c 	.word	0x2000005c
 800fd88:	080107a5 	.word	0x080107a5
 800fd8c:	080107b2 	.word	0x080107b2
 800fd90:	080107e0 	.word	0x080107e0

0800fd94 <_calloc_r>:
 800fd94:	b570      	push	{r4, r5, r6, lr}
 800fd96:	fba1 5402 	umull	r5, r4, r1, r2
 800fd9a:	b934      	cbnz	r4, 800fdaa <_calloc_r+0x16>
 800fd9c:	4629      	mov	r1, r5
 800fd9e:	f7ff fa47 	bl	800f230 <_malloc_r>
 800fda2:	4606      	mov	r6, r0
 800fda4:	b928      	cbnz	r0, 800fdb2 <_calloc_r+0x1e>
 800fda6:	4630      	mov	r0, r6
 800fda8:	bd70      	pop	{r4, r5, r6, pc}
 800fdaa:	220c      	movs	r2, #12
 800fdac:	6002      	str	r2, [r0, #0]
 800fdae:	2600      	movs	r6, #0
 800fdb0:	e7f9      	b.n	800fda6 <_calloc_r+0x12>
 800fdb2:	462a      	mov	r2, r5
 800fdb4:	4621      	mov	r1, r4
 800fdb6:	f7fe f96f 	bl	800e098 <memset>
 800fdba:	e7f4      	b.n	800fda6 <_calloc_r+0x12>

0800fdbc <__ascii_mbtowc>:
 800fdbc:	b082      	sub	sp, #8
 800fdbe:	b901      	cbnz	r1, 800fdc2 <__ascii_mbtowc+0x6>
 800fdc0:	a901      	add	r1, sp, #4
 800fdc2:	b142      	cbz	r2, 800fdd6 <__ascii_mbtowc+0x1a>
 800fdc4:	b14b      	cbz	r3, 800fdda <__ascii_mbtowc+0x1e>
 800fdc6:	7813      	ldrb	r3, [r2, #0]
 800fdc8:	600b      	str	r3, [r1, #0]
 800fdca:	7812      	ldrb	r2, [r2, #0]
 800fdcc:	1e10      	subs	r0, r2, #0
 800fdce:	bf18      	it	ne
 800fdd0:	2001      	movne	r0, #1
 800fdd2:	b002      	add	sp, #8
 800fdd4:	4770      	bx	lr
 800fdd6:	4610      	mov	r0, r2
 800fdd8:	e7fb      	b.n	800fdd2 <__ascii_mbtowc+0x16>
 800fdda:	f06f 0001 	mvn.w	r0, #1
 800fdde:	e7f8      	b.n	800fdd2 <__ascii_mbtowc+0x16>

0800fde0 <_malloc_usable_size_r>:
 800fde0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fde4:	1f18      	subs	r0, r3, #4
 800fde6:	2b00      	cmp	r3, #0
 800fde8:	bfbc      	itt	lt
 800fdea:	580b      	ldrlt	r3, [r1, r0]
 800fdec:	18c0      	addlt	r0, r0, r3
 800fdee:	4770      	bx	lr

0800fdf0 <fiprintf>:
 800fdf0:	b40e      	push	{r1, r2, r3}
 800fdf2:	b503      	push	{r0, r1, lr}
 800fdf4:	4601      	mov	r1, r0
 800fdf6:	ab03      	add	r3, sp, #12
 800fdf8:	4805      	ldr	r0, [pc, #20]	@ (800fe10 <fiprintf+0x20>)
 800fdfa:	f853 2b04 	ldr.w	r2, [r3], #4
 800fdfe:	6800      	ldr	r0, [r0, #0]
 800fe00:	9301      	str	r3, [sp, #4]
 800fe02:	f000 f845 	bl	800fe90 <_vfiprintf_r>
 800fe06:	b002      	add	sp, #8
 800fe08:	f85d eb04 	ldr.w	lr, [sp], #4
 800fe0c:	b003      	add	sp, #12
 800fe0e:	4770      	bx	lr
 800fe10:	2000005c 	.word	0x2000005c

0800fe14 <__ascii_wctomb>:
 800fe14:	4603      	mov	r3, r0
 800fe16:	4608      	mov	r0, r1
 800fe18:	b141      	cbz	r1, 800fe2c <__ascii_wctomb+0x18>
 800fe1a:	2aff      	cmp	r2, #255	@ 0xff
 800fe1c:	d904      	bls.n	800fe28 <__ascii_wctomb+0x14>
 800fe1e:	228a      	movs	r2, #138	@ 0x8a
 800fe20:	601a      	str	r2, [r3, #0]
 800fe22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fe26:	4770      	bx	lr
 800fe28:	700a      	strb	r2, [r1, #0]
 800fe2a:	2001      	movs	r0, #1
 800fe2c:	4770      	bx	lr

0800fe2e <abort>:
 800fe2e:	b508      	push	{r3, lr}
 800fe30:	2006      	movs	r0, #6
 800fe32:	f000 fa63 	bl	80102fc <raise>
 800fe36:	2001      	movs	r0, #1
 800fe38:	f7f5 fc78 	bl	800572c <_exit>

0800fe3c <__sfputc_r>:
 800fe3c:	6893      	ldr	r3, [r2, #8]
 800fe3e:	3b01      	subs	r3, #1
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	b410      	push	{r4}
 800fe44:	6093      	str	r3, [r2, #8]
 800fe46:	da08      	bge.n	800fe5a <__sfputc_r+0x1e>
 800fe48:	6994      	ldr	r4, [r2, #24]
 800fe4a:	42a3      	cmp	r3, r4
 800fe4c:	db01      	blt.n	800fe52 <__sfputc_r+0x16>
 800fe4e:	290a      	cmp	r1, #10
 800fe50:	d103      	bne.n	800fe5a <__sfputc_r+0x1e>
 800fe52:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe56:	f000 b933 	b.w	80100c0 <__swbuf_r>
 800fe5a:	6813      	ldr	r3, [r2, #0]
 800fe5c:	1c58      	adds	r0, r3, #1
 800fe5e:	6010      	str	r0, [r2, #0]
 800fe60:	7019      	strb	r1, [r3, #0]
 800fe62:	4608      	mov	r0, r1
 800fe64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fe68:	4770      	bx	lr

0800fe6a <__sfputs_r>:
 800fe6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe6c:	4606      	mov	r6, r0
 800fe6e:	460f      	mov	r7, r1
 800fe70:	4614      	mov	r4, r2
 800fe72:	18d5      	adds	r5, r2, r3
 800fe74:	42ac      	cmp	r4, r5
 800fe76:	d101      	bne.n	800fe7c <__sfputs_r+0x12>
 800fe78:	2000      	movs	r0, #0
 800fe7a:	e007      	b.n	800fe8c <__sfputs_r+0x22>
 800fe7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe80:	463a      	mov	r2, r7
 800fe82:	4630      	mov	r0, r6
 800fe84:	f7ff ffda 	bl	800fe3c <__sfputc_r>
 800fe88:	1c43      	adds	r3, r0, #1
 800fe8a:	d1f3      	bne.n	800fe74 <__sfputs_r+0xa>
 800fe8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800fe90 <_vfiprintf_r>:
 800fe90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe94:	460d      	mov	r5, r1
 800fe96:	b09d      	sub	sp, #116	@ 0x74
 800fe98:	4614      	mov	r4, r2
 800fe9a:	4698      	mov	r8, r3
 800fe9c:	4606      	mov	r6, r0
 800fe9e:	b118      	cbz	r0, 800fea8 <_vfiprintf_r+0x18>
 800fea0:	6a03      	ldr	r3, [r0, #32]
 800fea2:	b90b      	cbnz	r3, 800fea8 <_vfiprintf_r+0x18>
 800fea4:	f7fe f8a2 	bl	800dfec <__sinit>
 800fea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800feaa:	07d9      	lsls	r1, r3, #31
 800feac:	d405      	bmi.n	800feba <_vfiprintf_r+0x2a>
 800feae:	89ab      	ldrh	r3, [r5, #12]
 800feb0:	059a      	lsls	r2, r3, #22
 800feb2:	d402      	bmi.n	800feba <_vfiprintf_r+0x2a>
 800feb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800feb6:	f7fe f922 	bl	800e0fe <__retarget_lock_acquire_recursive>
 800feba:	89ab      	ldrh	r3, [r5, #12]
 800febc:	071b      	lsls	r3, r3, #28
 800febe:	d501      	bpl.n	800fec4 <_vfiprintf_r+0x34>
 800fec0:	692b      	ldr	r3, [r5, #16]
 800fec2:	b99b      	cbnz	r3, 800feec <_vfiprintf_r+0x5c>
 800fec4:	4629      	mov	r1, r5
 800fec6:	4630      	mov	r0, r6
 800fec8:	f000 f938 	bl	801013c <__swsetup_r>
 800fecc:	b170      	cbz	r0, 800feec <_vfiprintf_r+0x5c>
 800fece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800fed0:	07dc      	lsls	r4, r3, #31
 800fed2:	d504      	bpl.n	800fede <_vfiprintf_r+0x4e>
 800fed4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fed8:	b01d      	add	sp, #116	@ 0x74
 800feda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fede:	89ab      	ldrh	r3, [r5, #12]
 800fee0:	0598      	lsls	r0, r3, #22
 800fee2:	d4f7      	bmi.n	800fed4 <_vfiprintf_r+0x44>
 800fee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800fee6:	f7fe f90b 	bl	800e100 <__retarget_lock_release_recursive>
 800feea:	e7f3      	b.n	800fed4 <_vfiprintf_r+0x44>
 800feec:	2300      	movs	r3, #0
 800feee:	9309      	str	r3, [sp, #36]	@ 0x24
 800fef0:	2320      	movs	r3, #32
 800fef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fef6:	f8cd 800c 	str.w	r8, [sp, #12]
 800fefa:	2330      	movs	r3, #48	@ 0x30
 800fefc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80100ac <_vfiprintf_r+0x21c>
 800ff00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ff04:	f04f 0901 	mov.w	r9, #1
 800ff08:	4623      	mov	r3, r4
 800ff0a:	469a      	mov	sl, r3
 800ff0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ff10:	b10a      	cbz	r2, 800ff16 <_vfiprintf_r+0x86>
 800ff12:	2a25      	cmp	r2, #37	@ 0x25
 800ff14:	d1f9      	bne.n	800ff0a <_vfiprintf_r+0x7a>
 800ff16:	ebba 0b04 	subs.w	fp, sl, r4
 800ff1a:	d00b      	beq.n	800ff34 <_vfiprintf_r+0xa4>
 800ff1c:	465b      	mov	r3, fp
 800ff1e:	4622      	mov	r2, r4
 800ff20:	4629      	mov	r1, r5
 800ff22:	4630      	mov	r0, r6
 800ff24:	f7ff ffa1 	bl	800fe6a <__sfputs_r>
 800ff28:	3001      	adds	r0, #1
 800ff2a:	f000 80a7 	beq.w	801007c <_vfiprintf_r+0x1ec>
 800ff2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ff30:	445a      	add	r2, fp
 800ff32:	9209      	str	r2, [sp, #36]	@ 0x24
 800ff34:	f89a 3000 	ldrb.w	r3, [sl]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	f000 809f 	beq.w	801007c <_vfiprintf_r+0x1ec>
 800ff3e:	2300      	movs	r3, #0
 800ff40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ff44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff48:	f10a 0a01 	add.w	sl, sl, #1
 800ff4c:	9304      	str	r3, [sp, #16]
 800ff4e:	9307      	str	r3, [sp, #28]
 800ff50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ff54:	931a      	str	r3, [sp, #104]	@ 0x68
 800ff56:	4654      	mov	r4, sl
 800ff58:	2205      	movs	r2, #5
 800ff5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff5e:	4853      	ldr	r0, [pc, #332]	@ (80100ac <_vfiprintf_r+0x21c>)
 800ff60:	f7f0 f936 	bl	80001d0 <memchr>
 800ff64:	9a04      	ldr	r2, [sp, #16]
 800ff66:	b9d8      	cbnz	r0, 800ffa0 <_vfiprintf_r+0x110>
 800ff68:	06d1      	lsls	r1, r2, #27
 800ff6a:	bf44      	itt	mi
 800ff6c:	2320      	movmi	r3, #32
 800ff6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff72:	0713      	lsls	r3, r2, #28
 800ff74:	bf44      	itt	mi
 800ff76:	232b      	movmi	r3, #43	@ 0x2b
 800ff78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ff80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff82:	d015      	beq.n	800ffb0 <_vfiprintf_r+0x120>
 800ff84:	9a07      	ldr	r2, [sp, #28]
 800ff86:	4654      	mov	r4, sl
 800ff88:	2000      	movs	r0, #0
 800ff8a:	f04f 0c0a 	mov.w	ip, #10
 800ff8e:	4621      	mov	r1, r4
 800ff90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff94:	3b30      	subs	r3, #48	@ 0x30
 800ff96:	2b09      	cmp	r3, #9
 800ff98:	d94b      	bls.n	8010032 <_vfiprintf_r+0x1a2>
 800ff9a:	b1b0      	cbz	r0, 800ffca <_vfiprintf_r+0x13a>
 800ff9c:	9207      	str	r2, [sp, #28]
 800ff9e:	e014      	b.n	800ffca <_vfiprintf_r+0x13a>
 800ffa0:	eba0 0308 	sub.w	r3, r0, r8
 800ffa4:	fa09 f303 	lsl.w	r3, r9, r3
 800ffa8:	4313      	orrs	r3, r2
 800ffaa:	9304      	str	r3, [sp, #16]
 800ffac:	46a2      	mov	sl, r4
 800ffae:	e7d2      	b.n	800ff56 <_vfiprintf_r+0xc6>
 800ffb0:	9b03      	ldr	r3, [sp, #12]
 800ffb2:	1d19      	adds	r1, r3, #4
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	9103      	str	r1, [sp, #12]
 800ffb8:	2b00      	cmp	r3, #0
 800ffba:	bfbb      	ittet	lt
 800ffbc:	425b      	neglt	r3, r3
 800ffbe:	f042 0202 	orrlt.w	r2, r2, #2
 800ffc2:	9307      	strge	r3, [sp, #28]
 800ffc4:	9307      	strlt	r3, [sp, #28]
 800ffc6:	bfb8      	it	lt
 800ffc8:	9204      	strlt	r2, [sp, #16]
 800ffca:	7823      	ldrb	r3, [r4, #0]
 800ffcc:	2b2e      	cmp	r3, #46	@ 0x2e
 800ffce:	d10a      	bne.n	800ffe6 <_vfiprintf_r+0x156>
 800ffd0:	7863      	ldrb	r3, [r4, #1]
 800ffd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ffd4:	d132      	bne.n	801003c <_vfiprintf_r+0x1ac>
 800ffd6:	9b03      	ldr	r3, [sp, #12]
 800ffd8:	1d1a      	adds	r2, r3, #4
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	9203      	str	r2, [sp, #12]
 800ffde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ffe2:	3402      	adds	r4, #2
 800ffe4:	9305      	str	r3, [sp, #20]
 800ffe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80100bc <_vfiprintf_r+0x22c>
 800ffea:	7821      	ldrb	r1, [r4, #0]
 800ffec:	2203      	movs	r2, #3
 800ffee:	4650      	mov	r0, sl
 800fff0:	f7f0 f8ee 	bl	80001d0 <memchr>
 800fff4:	b138      	cbz	r0, 8010006 <_vfiprintf_r+0x176>
 800fff6:	9b04      	ldr	r3, [sp, #16]
 800fff8:	eba0 000a 	sub.w	r0, r0, sl
 800fffc:	2240      	movs	r2, #64	@ 0x40
 800fffe:	4082      	lsls	r2, r0
 8010000:	4313      	orrs	r3, r2
 8010002:	3401      	adds	r4, #1
 8010004:	9304      	str	r3, [sp, #16]
 8010006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801000a:	4829      	ldr	r0, [pc, #164]	@ (80100b0 <_vfiprintf_r+0x220>)
 801000c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010010:	2206      	movs	r2, #6
 8010012:	f7f0 f8dd 	bl	80001d0 <memchr>
 8010016:	2800      	cmp	r0, #0
 8010018:	d03f      	beq.n	801009a <_vfiprintf_r+0x20a>
 801001a:	4b26      	ldr	r3, [pc, #152]	@ (80100b4 <_vfiprintf_r+0x224>)
 801001c:	bb1b      	cbnz	r3, 8010066 <_vfiprintf_r+0x1d6>
 801001e:	9b03      	ldr	r3, [sp, #12]
 8010020:	3307      	adds	r3, #7
 8010022:	f023 0307 	bic.w	r3, r3, #7
 8010026:	3308      	adds	r3, #8
 8010028:	9303      	str	r3, [sp, #12]
 801002a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801002c:	443b      	add	r3, r7
 801002e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010030:	e76a      	b.n	800ff08 <_vfiprintf_r+0x78>
 8010032:	fb0c 3202 	mla	r2, ip, r2, r3
 8010036:	460c      	mov	r4, r1
 8010038:	2001      	movs	r0, #1
 801003a:	e7a8      	b.n	800ff8e <_vfiprintf_r+0xfe>
 801003c:	2300      	movs	r3, #0
 801003e:	3401      	adds	r4, #1
 8010040:	9305      	str	r3, [sp, #20]
 8010042:	4619      	mov	r1, r3
 8010044:	f04f 0c0a 	mov.w	ip, #10
 8010048:	4620      	mov	r0, r4
 801004a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801004e:	3a30      	subs	r2, #48	@ 0x30
 8010050:	2a09      	cmp	r2, #9
 8010052:	d903      	bls.n	801005c <_vfiprintf_r+0x1cc>
 8010054:	2b00      	cmp	r3, #0
 8010056:	d0c6      	beq.n	800ffe6 <_vfiprintf_r+0x156>
 8010058:	9105      	str	r1, [sp, #20]
 801005a:	e7c4      	b.n	800ffe6 <_vfiprintf_r+0x156>
 801005c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010060:	4604      	mov	r4, r0
 8010062:	2301      	movs	r3, #1
 8010064:	e7f0      	b.n	8010048 <_vfiprintf_r+0x1b8>
 8010066:	ab03      	add	r3, sp, #12
 8010068:	9300      	str	r3, [sp, #0]
 801006a:	462a      	mov	r2, r5
 801006c:	4b12      	ldr	r3, [pc, #72]	@ (80100b8 <_vfiprintf_r+0x228>)
 801006e:	a904      	add	r1, sp, #16
 8010070:	4630      	mov	r0, r6
 8010072:	f7fd fb79 	bl	800d768 <_printf_float>
 8010076:	4607      	mov	r7, r0
 8010078:	1c78      	adds	r0, r7, #1
 801007a:	d1d6      	bne.n	801002a <_vfiprintf_r+0x19a>
 801007c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801007e:	07d9      	lsls	r1, r3, #31
 8010080:	d405      	bmi.n	801008e <_vfiprintf_r+0x1fe>
 8010082:	89ab      	ldrh	r3, [r5, #12]
 8010084:	059a      	lsls	r2, r3, #22
 8010086:	d402      	bmi.n	801008e <_vfiprintf_r+0x1fe>
 8010088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801008a:	f7fe f839 	bl	800e100 <__retarget_lock_release_recursive>
 801008e:	89ab      	ldrh	r3, [r5, #12]
 8010090:	065b      	lsls	r3, r3, #25
 8010092:	f53f af1f 	bmi.w	800fed4 <_vfiprintf_r+0x44>
 8010096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010098:	e71e      	b.n	800fed8 <_vfiprintf_r+0x48>
 801009a:	ab03      	add	r3, sp, #12
 801009c:	9300      	str	r3, [sp, #0]
 801009e:	462a      	mov	r2, r5
 80100a0:	4b05      	ldr	r3, [pc, #20]	@ (80100b8 <_vfiprintf_r+0x228>)
 80100a2:	a904      	add	r1, sp, #16
 80100a4:	4630      	mov	r0, r6
 80100a6:	f7fd fdf7 	bl	800dc98 <_printf_i>
 80100aa:	e7e4      	b.n	8010076 <_vfiprintf_r+0x1e6>
 80100ac:	08010731 	.word	0x08010731
 80100b0:	0801073b 	.word	0x0801073b
 80100b4:	0800d769 	.word	0x0800d769
 80100b8:	0800fe6b 	.word	0x0800fe6b
 80100bc:	08010737 	.word	0x08010737

080100c0 <__swbuf_r>:
 80100c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100c2:	460e      	mov	r6, r1
 80100c4:	4614      	mov	r4, r2
 80100c6:	4605      	mov	r5, r0
 80100c8:	b118      	cbz	r0, 80100d2 <__swbuf_r+0x12>
 80100ca:	6a03      	ldr	r3, [r0, #32]
 80100cc:	b90b      	cbnz	r3, 80100d2 <__swbuf_r+0x12>
 80100ce:	f7fd ff8d 	bl	800dfec <__sinit>
 80100d2:	69a3      	ldr	r3, [r4, #24]
 80100d4:	60a3      	str	r3, [r4, #8]
 80100d6:	89a3      	ldrh	r3, [r4, #12]
 80100d8:	071a      	lsls	r2, r3, #28
 80100da:	d501      	bpl.n	80100e0 <__swbuf_r+0x20>
 80100dc:	6923      	ldr	r3, [r4, #16]
 80100de:	b943      	cbnz	r3, 80100f2 <__swbuf_r+0x32>
 80100e0:	4621      	mov	r1, r4
 80100e2:	4628      	mov	r0, r5
 80100e4:	f000 f82a 	bl	801013c <__swsetup_r>
 80100e8:	b118      	cbz	r0, 80100f2 <__swbuf_r+0x32>
 80100ea:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80100ee:	4638      	mov	r0, r7
 80100f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80100f2:	6823      	ldr	r3, [r4, #0]
 80100f4:	6922      	ldr	r2, [r4, #16]
 80100f6:	1a98      	subs	r0, r3, r2
 80100f8:	6963      	ldr	r3, [r4, #20]
 80100fa:	b2f6      	uxtb	r6, r6
 80100fc:	4283      	cmp	r3, r0
 80100fe:	4637      	mov	r7, r6
 8010100:	dc05      	bgt.n	801010e <__swbuf_r+0x4e>
 8010102:	4621      	mov	r1, r4
 8010104:	4628      	mov	r0, r5
 8010106:	f7ff f997 	bl	800f438 <_fflush_r>
 801010a:	2800      	cmp	r0, #0
 801010c:	d1ed      	bne.n	80100ea <__swbuf_r+0x2a>
 801010e:	68a3      	ldr	r3, [r4, #8]
 8010110:	3b01      	subs	r3, #1
 8010112:	60a3      	str	r3, [r4, #8]
 8010114:	6823      	ldr	r3, [r4, #0]
 8010116:	1c5a      	adds	r2, r3, #1
 8010118:	6022      	str	r2, [r4, #0]
 801011a:	701e      	strb	r6, [r3, #0]
 801011c:	6962      	ldr	r2, [r4, #20]
 801011e:	1c43      	adds	r3, r0, #1
 8010120:	429a      	cmp	r2, r3
 8010122:	d004      	beq.n	801012e <__swbuf_r+0x6e>
 8010124:	89a3      	ldrh	r3, [r4, #12]
 8010126:	07db      	lsls	r3, r3, #31
 8010128:	d5e1      	bpl.n	80100ee <__swbuf_r+0x2e>
 801012a:	2e0a      	cmp	r6, #10
 801012c:	d1df      	bne.n	80100ee <__swbuf_r+0x2e>
 801012e:	4621      	mov	r1, r4
 8010130:	4628      	mov	r0, r5
 8010132:	f7ff f981 	bl	800f438 <_fflush_r>
 8010136:	2800      	cmp	r0, #0
 8010138:	d0d9      	beq.n	80100ee <__swbuf_r+0x2e>
 801013a:	e7d6      	b.n	80100ea <__swbuf_r+0x2a>

0801013c <__swsetup_r>:
 801013c:	b538      	push	{r3, r4, r5, lr}
 801013e:	4b29      	ldr	r3, [pc, #164]	@ (80101e4 <__swsetup_r+0xa8>)
 8010140:	4605      	mov	r5, r0
 8010142:	6818      	ldr	r0, [r3, #0]
 8010144:	460c      	mov	r4, r1
 8010146:	b118      	cbz	r0, 8010150 <__swsetup_r+0x14>
 8010148:	6a03      	ldr	r3, [r0, #32]
 801014a:	b90b      	cbnz	r3, 8010150 <__swsetup_r+0x14>
 801014c:	f7fd ff4e 	bl	800dfec <__sinit>
 8010150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010154:	0719      	lsls	r1, r3, #28
 8010156:	d422      	bmi.n	801019e <__swsetup_r+0x62>
 8010158:	06da      	lsls	r2, r3, #27
 801015a:	d407      	bmi.n	801016c <__swsetup_r+0x30>
 801015c:	2209      	movs	r2, #9
 801015e:	602a      	str	r2, [r5, #0]
 8010160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010164:	81a3      	strh	r3, [r4, #12]
 8010166:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801016a:	e033      	b.n	80101d4 <__swsetup_r+0x98>
 801016c:	0758      	lsls	r0, r3, #29
 801016e:	d512      	bpl.n	8010196 <__swsetup_r+0x5a>
 8010170:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010172:	b141      	cbz	r1, 8010186 <__swsetup_r+0x4a>
 8010174:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8010178:	4299      	cmp	r1, r3
 801017a:	d002      	beq.n	8010182 <__swsetup_r+0x46>
 801017c:	4628      	mov	r0, r5
 801017e:	f7fe fe8b 	bl	800ee98 <_free_r>
 8010182:	2300      	movs	r3, #0
 8010184:	6363      	str	r3, [r4, #52]	@ 0x34
 8010186:	89a3      	ldrh	r3, [r4, #12]
 8010188:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801018c:	81a3      	strh	r3, [r4, #12]
 801018e:	2300      	movs	r3, #0
 8010190:	6063      	str	r3, [r4, #4]
 8010192:	6923      	ldr	r3, [r4, #16]
 8010194:	6023      	str	r3, [r4, #0]
 8010196:	89a3      	ldrh	r3, [r4, #12]
 8010198:	f043 0308 	orr.w	r3, r3, #8
 801019c:	81a3      	strh	r3, [r4, #12]
 801019e:	6923      	ldr	r3, [r4, #16]
 80101a0:	b94b      	cbnz	r3, 80101b6 <__swsetup_r+0x7a>
 80101a2:	89a3      	ldrh	r3, [r4, #12]
 80101a4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80101a8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80101ac:	d003      	beq.n	80101b6 <__swsetup_r+0x7a>
 80101ae:	4621      	mov	r1, r4
 80101b0:	4628      	mov	r0, r5
 80101b2:	f000 f83f 	bl	8010234 <__smakebuf_r>
 80101b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80101ba:	f013 0201 	ands.w	r2, r3, #1
 80101be:	d00a      	beq.n	80101d6 <__swsetup_r+0x9a>
 80101c0:	2200      	movs	r2, #0
 80101c2:	60a2      	str	r2, [r4, #8]
 80101c4:	6962      	ldr	r2, [r4, #20]
 80101c6:	4252      	negs	r2, r2
 80101c8:	61a2      	str	r2, [r4, #24]
 80101ca:	6922      	ldr	r2, [r4, #16]
 80101cc:	b942      	cbnz	r2, 80101e0 <__swsetup_r+0xa4>
 80101ce:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80101d2:	d1c5      	bne.n	8010160 <__swsetup_r+0x24>
 80101d4:	bd38      	pop	{r3, r4, r5, pc}
 80101d6:	0799      	lsls	r1, r3, #30
 80101d8:	bf58      	it	pl
 80101da:	6962      	ldrpl	r2, [r4, #20]
 80101dc:	60a2      	str	r2, [r4, #8]
 80101de:	e7f4      	b.n	80101ca <__swsetup_r+0x8e>
 80101e0:	2000      	movs	r0, #0
 80101e2:	e7f7      	b.n	80101d4 <__swsetup_r+0x98>
 80101e4:	2000005c 	.word	0x2000005c

080101e8 <__swhatbuf_r>:
 80101e8:	b570      	push	{r4, r5, r6, lr}
 80101ea:	460c      	mov	r4, r1
 80101ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80101f0:	2900      	cmp	r1, #0
 80101f2:	b096      	sub	sp, #88	@ 0x58
 80101f4:	4615      	mov	r5, r2
 80101f6:	461e      	mov	r6, r3
 80101f8:	da0d      	bge.n	8010216 <__swhatbuf_r+0x2e>
 80101fa:	89a3      	ldrh	r3, [r4, #12]
 80101fc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8010200:	f04f 0100 	mov.w	r1, #0
 8010204:	bf14      	ite	ne
 8010206:	2340      	movne	r3, #64	@ 0x40
 8010208:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801020c:	2000      	movs	r0, #0
 801020e:	6031      	str	r1, [r6, #0]
 8010210:	602b      	str	r3, [r5, #0]
 8010212:	b016      	add	sp, #88	@ 0x58
 8010214:	bd70      	pop	{r4, r5, r6, pc}
 8010216:	466a      	mov	r2, sp
 8010218:	f000 f89c 	bl	8010354 <_fstat_r>
 801021c:	2800      	cmp	r0, #0
 801021e:	dbec      	blt.n	80101fa <__swhatbuf_r+0x12>
 8010220:	9901      	ldr	r1, [sp, #4]
 8010222:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010226:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801022a:	4259      	negs	r1, r3
 801022c:	4159      	adcs	r1, r3
 801022e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010232:	e7eb      	b.n	801020c <__swhatbuf_r+0x24>

08010234 <__smakebuf_r>:
 8010234:	898b      	ldrh	r3, [r1, #12]
 8010236:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010238:	079d      	lsls	r5, r3, #30
 801023a:	4606      	mov	r6, r0
 801023c:	460c      	mov	r4, r1
 801023e:	d507      	bpl.n	8010250 <__smakebuf_r+0x1c>
 8010240:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010244:	6023      	str	r3, [r4, #0]
 8010246:	6123      	str	r3, [r4, #16]
 8010248:	2301      	movs	r3, #1
 801024a:	6163      	str	r3, [r4, #20]
 801024c:	b003      	add	sp, #12
 801024e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010250:	ab01      	add	r3, sp, #4
 8010252:	466a      	mov	r2, sp
 8010254:	f7ff ffc8 	bl	80101e8 <__swhatbuf_r>
 8010258:	9f00      	ldr	r7, [sp, #0]
 801025a:	4605      	mov	r5, r0
 801025c:	4639      	mov	r1, r7
 801025e:	4630      	mov	r0, r6
 8010260:	f7fe ffe6 	bl	800f230 <_malloc_r>
 8010264:	b948      	cbnz	r0, 801027a <__smakebuf_r+0x46>
 8010266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801026a:	059a      	lsls	r2, r3, #22
 801026c:	d4ee      	bmi.n	801024c <__smakebuf_r+0x18>
 801026e:	f023 0303 	bic.w	r3, r3, #3
 8010272:	f043 0302 	orr.w	r3, r3, #2
 8010276:	81a3      	strh	r3, [r4, #12]
 8010278:	e7e2      	b.n	8010240 <__smakebuf_r+0xc>
 801027a:	89a3      	ldrh	r3, [r4, #12]
 801027c:	6020      	str	r0, [r4, #0]
 801027e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010282:	81a3      	strh	r3, [r4, #12]
 8010284:	9b01      	ldr	r3, [sp, #4]
 8010286:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801028a:	b15b      	cbz	r3, 80102a4 <__smakebuf_r+0x70>
 801028c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010290:	4630      	mov	r0, r6
 8010292:	f000 f83b 	bl	801030c <_isatty_r>
 8010296:	b128      	cbz	r0, 80102a4 <__smakebuf_r+0x70>
 8010298:	89a3      	ldrh	r3, [r4, #12]
 801029a:	f023 0303 	bic.w	r3, r3, #3
 801029e:	f043 0301 	orr.w	r3, r3, #1
 80102a2:	81a3      	strh	r3, [r4, #12]
 80102a4:	89a3      	ldrh	r3, [r4, #12]
 80102a6:	431d      	orrs	r5, r3
 80102a8:	81a5      	strh	r5, [r4, #12]
 80102aa:	e7cf      	b.n	801024c <__smakebuf_r+0x18>

080102ac <_raise_r>:
 80102ac:	291f      	cmp	r1, #31
 80102ae:	b538      	push	{r3, r4, r5, lr}
 80102b0:	4605      	mov	r5, r0
 80102b2:	460c      	mov	r4, r1
 80102b4:	d904      	bls.n	80102c0 <_raise_r+0x14>
 80102b6:	2316      	movs	r3, #22
 80102b8:	6003      	str	r3, [r0, #0]
 80102ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80102be:	bd38      	pop	{r3, r4, r5, pc}
 80102c0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80102c2:	b112      	cbz	r2, 80102ca <_raise_r+0x1e>
 80102c4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80102c8:	b94b      	cbnz	r3, 80102de <_raise_r+0x32>
 80102ca:	4628      	mov	r0, r5
 80102cc:	f000 f840 	bl	8010350 <_getpid_r>
 80102d0:	4622      	mov	r2, r4
 80102d2:	4601      	mov	r1, r0
 80102d4:	4628      	mov	r0, r5
 80102d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80102da:	f000 b827 	b.w	801032c <_kill_r>
 80102de:	2b01      	cmp	r3, #1
 80102e0:	d00a      	beq.n	80102f8 <_raise_r+0x4c>
 80102e2:	1c59      	adds	r1, r3, #1
 80102e4:	d103      	bne.n	80102ee <_raise_r+0x42>
 80102e6:	2316      	movs	r3, #22
 80102e8:	6003      	str	r3, [r0, #0]
 80102ea:	2001      	movs	r0, #1
 80102ec:	e7e7      	b.n	80102be <_raise_r+0x12>
 80102ee:	2100      	movs	r1, #0
 80102f0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80102f4:	4620      	mov	r0, r4
 80102f6:	4798      	blx	r3
 80102f8:	2000      	movs	r0, #0
 80102fa:	e7e0      	b.n	80102be <_raise_r+0x12>

080102fc <raise>:
 80102fc:	4b02      	ldr	r3, [pc, #8]	@ (8010308 <raise+0xc>)
 80102fe:	4601      	mov	r1, r0
 8010300:	6818      	ldr	r0, [r3, #0]
 8010302:	f7ff bfd3 	b.w	80102ac <_raise_r>
 8010306:	bf00      	nop
 8010308:	2000005c 	.word	0x2000005c

0801030c <_isatty_r>:
 801030c:	b538      	push	{r3, r4, r5, lr}
 801030e:	4d06      	ldr	r5, [pc, #24]	@ (8010328 <_isatty_r+0x1c>)
 8010310:	2300      	movs	r3, #0
 8010312:	4604      	mov	r4, r0
 8010314:	4608      	mov	r0, r1
 8010316:	602b      	str	r3, [r5, #0]
 8010318:	f7f5 fa68 	bl	80057ec <_isatty>
 801031c:	1c43      	adds	r3, r0, #1
 801031e:	d102      	bne.n	8010326 <_isatty_r+0x1a>
 8010320:	682b      	ldr	r3, [r5, #0]
 8010322:	b103      	cbz	r3, 8010326 <_isatty_r+0x1a>
 8010324:	6023      	str	r3, [r4, #0]
 8010326:	bd38      	pop	{r3, r4, r5, pc}
 8010328:	200058f4 	.word	0x200058f4

0801032c <_kill_r>:
 801032c:	b538      	push	{r3, r4, r5, lr}
 801032e:	4d07      	ldr	r5, [pc, #28]	@ (801034c <_kill_r+0x20>)
 8010330:	2300      	movs	r3, #0
 8010332:	4604      	mov	r4, r0
 8010334:	4608      	mov	r0, r1
 8010336:	4611      	mov	r1, r2
 8010338:	602b      	str	r3, [r5, #0]
 801033a:	f7f5 f9e7 	bl	800570c <_kill>
 801033e:	1c43      	adds	r3, r0, #1
 8010340:	d102      	bne.n	8010348 <_kill_r+0x1c>
 8010342:	682b      	ldr	r3, [r5, #0]
 8010344:	b103      	cbz	r3, 8010348 <_kill_r+0x1c>
 8010346:	6023      	str	r3, [r4, #0]
 8010348:	bd38      	pop	{r3, r4, r5, pc}
 801034a:	bf00      	nop
 801034c:	200058f4 	.word	0x200058f4

08010350 <_getpid_r>:
 8010350:	f7f5 b9d4 	b.w	80056fc <_getpid>

08010354 <_fstat_r>:
 8010354:	b538      	push	{r3, r4, r5, lr}
 8010356:	4d07      	ldr	r5, [pc, #28]	@ (8010374 <_fstat_r+0x20>)
 8010358:	2300      	movs	r3, #0
 801035a:	4604      	mov	r4, r0
 801035c:	4608      	mov	r0, r1
 801035e:	4611      	mov	r1, r2
 8010360:	602b      	str	r3, [r5, #0]
 8010362:	f7f5 fa33 	bl	80057cc <_fstat>
 8010366:	1c43      	adds	r3, r0, #1
 8010368:	d102      	bne.n	8010370 <_fstat_r+0x1c>
 801036a:	682b      	ldr	r3, [r5, #0]
 801036c:	b103      	cbz	r3, 8010370 <_fstat_r+0x1c>
 801036e:	6023      	str	r3, [r4, #0]
 8010370:	bd38      	pop	{r3, r4, r5, pc}
 8010372:	bf00      	nop
 8010374:	200058f4 	.word	0x200058f4

08010378 <_init>:
 8010378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801037a:	bf00      	nop
 801037c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801037e:	bc08      	pop	{r3}
 8010380:	469e      	mov	lr, r3
 8010382:	4770      	bx	lr

08010384 <_fini>:
 8010384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010386:	bf00      	nop
 8010388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801038a:	bc08      	pop	{r3}
 801038c:	469e      	mov	lr, r3
 801038e:	4770      	bx	lr
