
MotorTrueTestingYay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dbe8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  0800dd78  0800dd78  0000ed78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e0a0  0800e0a0  0001008c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e0a0  0800e0a0  0000f0a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e0a8  0800e0a8  0001008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e0a8  0800e0a8  0000f0a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e0ac  0800e0ac  0000f0ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800e0b0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001008c  2**0
                  CONTENTS
 10 .bss          00005894  20000090  20000090  00010090  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20005924  20005924  00010090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002555f  00000000  00000000  000100bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ed3  00000000  00000000  0003561b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000020e8  00000000  00000000  0003a4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000019a8  00000000  00000000  0003c5d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000257c2  00000000  00000000  0003df80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000245b4  00000000  00000000  00063742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16bc  00000000  00000000  00087cf6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001693b2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00009010  00000000  00000000  001693f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007a  00000000  00000000  00172408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800dd60 	.word	0x0800dd60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	0800dd60 	.word	0x0800dd60

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <BMI088_delay_ms>:


}

void BMI088_delay_ms(uint16_t ms)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	4603      	mov	r3, r0
 80005b4:	80fb      	strh	r3, [r7, #6]
    while(ms--)
 80005b6:	e003      	b.n	80005c0 <BMI088_delay_ms+0x14>
    {
        BMI088_delay_us(1000);
 80005b8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80005bc:	f000 f80a 	bl	80005d4 <BMI088_delay_us>
    while(ms--)
 80005c0:	88fb      	ldrh	r3, [r7, #6]
 80005c2:	1e5a      	subs	r2, r3, #1
 80005c4:	80fa      	strh	r2, [r7, #6]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d1f6      	bne.n	80005b8 <BMI088_delay_ms+0xc>
    }
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <BMI088_delay_us>:

void BMI088_delay_us(uint16_t us)
{
 80005d4:	b480      	push	{r7}
 80005d6:	b089      	sub	sp, #36	@ 0x24
 80005d8:	af00      	add	r7, sp, #0
 80005da:	4603      	mov	r3, r0
 80005dc:	80fb      	strh	r3, [r7, #6]

    uint32_t ticks = 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
    uint32_t told = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	61fb      	str	r3, [r7, #28]
    uint32_t tnow = 0;
 80005e6:	2300      	movs	r3, #0
 80005e8:	613b      	str	r3, [r7, #16]
    uint32_t tcnt = 0;
 80005ea:	2300      	movs	r3, #0
 80005ec:	61bb      	str	r3, [r7, #24]
    uint32_t reload = 0;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
    reload = SysTick->LOAD;
 80005f2:	4b19      	ldr	r3, [pc, #100]	@ (8000658 <BMI088_delay_us+0x84>)
 80005f4:	685b      	ldr	r3, [r3, #4]
 80005f6:	60fb      	str	r3, [r7, #12]
    ticks = us * 168;
 80005f8:	88fb      	ldrh	r3, [r7, #6]
 80005fa:	22a8      	movs	r2, #168	@ 0xa8
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	617b      	str	r3, [r7, #20]
    told = SysTick->VAL;
 8000602:	4b15      	ldr	r3, [pc, #84]	@ (8000658 <BMI088_delay_us+0x84>)
 8000604:	689b      	ldr	r3, [r3, #8]
 8000606:	61fb      	str	r3, [r7, #28]
    while (1)
    {
        tnow = SysTick->VAL;
 8000608:	4b13      	ldr	r3, [pc, #76]	@ (8000658 <BMI088_delay_us+0x84>)
 800060a:	689b      	ldr	r3, [r3, #8]
 800060c:	613b      	str	r3, [r7, #16]
        if (tnow != told)
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	429a      	cmp	r2, r3
 8000614:	d0f8      	beq.n	8000608 <BMI088_delay_us+0x34>
        {
            if (tnow < told)
 8000616:	693a      	ldr	r2, [r7, #16]
 8000618:	69fb      	ldr	r3, [r7, #28]
 800061a:	429a      	cmp	r2, r3
 800061c:	d206      	bcs.n	800062c <BMI088_delay_us+0x58>
            {
                tcnt += told - tnow;
 800061e:	69fa      	ldr	r2, [r7, #28]
 8000620:	693b      	ldr	r3, [r7, #16]
 8000622:	1ad3      	subs	r3, r2, r3
 8000624:	69ba      	ldr	r2, [r7, #24]
 8000626:	4413      	add	r3, r2
 8000628:	61bb      	str	r3, [r7, #24]
 800062a:	e007      	b.n	800063c <BMI088_delay_us+0x68>
            }
            else
            {
                tcnt += reload - tnow + told;
 800062c:	68fa      	ldr	r2, [r7, #12]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	1ad2      	subs	r2, r2, r3
 8000632:	69fb      	ldr	r3, [r7, #28]
 8000634:	4413      	add	r3, r2
 8000636:	69ba      	ldr	r2, [r7, #24]
 8000638:	4413      	add	r3, r2
 800063a:	61bb      	str	r3, [r7, #24]
            }
            told = tnow;
 800063c:	693b      	ldr	r3, [r7, #16]
 800063e:	61fb      	str	r3, [r7, #28]
            if (tcnt >= ticks)
 8000640:	69ba      	ldr	r2, [r7, #24]
 8000642:	697b      	ldr	r3, [r7, #20]
 8000644:	429a      	cmp	r2, r3
 8000646:	d200      	bcs.n	800064a <BMI088_delay_us+0x76>
        tnow = SysTick->VAL;
 8000648:	e7de      	b.n	8000608 <BMI088_delay_us+0x34>
            {
                break;
 800064a:	bf00      	nop
            }
        }
    }


}
 800064c:	bf00      	nop
 800064e:	3724      	adds	r7, #36	@ 0x24
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000e010 	.word	0xe000e010

0800065c <BMI088_ACCEL_NS_L>:




void BMI088_ACCEL_NS_L(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_RESET);
 8000660:	4b04      	ldr	r3, [pc, #16]	@ (8000674 <BMI088_ACCEL_NS_L+0x18>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a04      	ldr	r2, [pc, #16]	@ (8000678 <BMI088_ACCEL_NS_L+0x1c>)
 8000666:	8811      	ldrh	r1, [r2, #0]
 8000668:	2200      	movs	r2, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f006 fd76 	bl	800715c <HAL_GPIO_WritePin>
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000000 	.word	0x20000000
 8000678:	20000004 	.word	0x20000004

0800067c <BMI088_ACCEL_NS_H>:
void BMI088_ACCEL_NS_H(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_ACCEL_GPIO_Port, CS1_ACCEL_Pin, GPIO_PIN_SET);
 8000680:	4b04      	ldr	r3, [pc, #16]	@ (8000694 <BMI088_ACCEL_NS_H+0x18>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a04      	ldr	r2, [pc, #16]	@ (8000698 <BMI088_ACCEL_NS_H+0x1c>)
 8000686:	8811      	ldrh	r1, [r2, #0]
 8000688:	2201      	movs	r2, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f006 fd66 	bl	800715c <HAL_GPIO_WritePin>
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	20000000 	.word	0x20000000
 8000698:	20000004 	.word	0x20000004

0800069c <BMI088_GYRO_NS_L>:

void BMI088_GYRO_NS_L(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_RESET);
 80006a0:	4b04      	ldr	r3, [pc, #16]	@ (80006b4 <BMI088_GYRO_NS_L+0x18>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a04      	ldr	r2, [pc, #16]	@ (80006b8 <BMI088_GYRO_NS_L+0x1c>)
 80006a6:	8811      	ldrh	r1, [r2, #0]
 80006a8:	2200      	movs	r2, #0
 80006aa:	4618      	mov	r0, r3
 80006ac:	f006 fd56 	bl	800715c <HAL_GPIO_WritePin>
}
 80006b0:	bf00      	nop
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	20000008 	.word	0x20000008
 80006b8:	2000000c 	.word	0x2000000c

080006bc <BMI088_GYRO_NS_H>:
void BMI088_GYRO_NS_H(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(CS1_GYRO_GPIO_Port, CS1_GYRO_Pin, GPIO_PIN_SET);
 80006c0:	4b04      	ldr	r3, [pc, #16]	@ (80006d4 <BMI088_GYRO_NS_H+0x18>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <BMI088_GYRO_NS_H+0x1c>)
 80006c6:	8811      	ldrh	r1, [r2, #0]
 80006c8:	2201      	movs	r2, #1
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 fd46 	bl	800715c <HAL_GPIO_WritePin>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000008 	.word	0x20000008
 80006d8:	2000000c 	.word	0x2000000c

080006dc <BMI088_read_write_byte>:

uint8_t BMI088_read_write_byte(uint8_t txdata)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b086      	sub	sp, #24
 80006e0:	af02      	add	r7, sp, #8
 80006e2:	4603      	mov	r3, r0
 80006e4:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data;
    HAL_SPI_TransmitReceive(&hspi1, &txdata, &rx_data, 1, 1000);
 80006e6:	f107 020f 	add.w	r2, r7, #15
 80006ea:	1df9      	adds	r1, r7, #7
 80006ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f0:	9300      	str	r3, [sp, #0]
 80006f2:	2301      	movs	r3, #1
 80006f4:	4803      	ldr	r0, [pc, #12]	@ (8000704 <BMI088_read_write_byte+0x28>)
 80006f6:	f007 fbaf 	bl	8007e58 <HAL_SPI_TransmitReceive>
    return rx_data;
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	20000a24 	.word	0x20000a24

08000708 <BMI088_gyro_init>:
    }
    return BMI088_NO_ERROR;
}

uint8_t BMI088_gyro_init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
    uint8_t write_reg_num = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	71fb      	strb	r3, [r7, #7]
    uint8_t res = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	71bb      	strb	r3, [r7, #6]

    //check communication
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000716:	f7ff ffc1 	bl	800069c <BMI088_GYRO_NS_L>
 800071a:	1dbb      	adds	r3, r7, #6
 800071c:	4619      	mov	r1, r3
 800071e:	2000      	movs	r0, #0
 8000720:	f000 f99c 	bl	8000a5c <BMI088_read_single_reg>
 8000724:	f7ff ffca 	bl	80006bc <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000728:	2096      	movs	r0, #150	@ 0x96
 800072a:	f7ff ff53 	bl	80005d4 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800072e:	f7ff ffb5 	bl	800069c <BMI088_GYRO_NS_L>
 8000732:	1dbb      	adds	r3, r7, #6
 8000734:	4619      	mov	r1, r3
 8000736:	2000      	movs	r0, #0
 8000738:	f000 f990 	bl	8000a5c <BMI088_read_single_reg>
 800073c:	f7ff ffbe 	bl	80006bc <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000740:	2096      	movs	r0, #150	@ 0x96
 8000742:	f7ff ff47 	bl	80005d4 <BMI088_delay_us>

    //reset the gyro sensor
    BMI088_gyro_write_single_reg(BMI088_GYRO_SOFTRESET, BMI088_GYRO_SOFTRESET_VALUE);
 8000746:	f7ff ffa9 	bl	800069c <BMI088_GYRO_NS_L>
 800074a:	21b6      	movs	r1, #182	@ 0xb6
 800074c:	2014      	movs	r0, #20
 800074e:	f000 f971 	bl	8000a34 <BMI088_write_single_reg>
 8000752:	f7ff ffb3 	bl	80006bc <BMI088_GYRO_NS_H>
    BMI088_delay_ms(BMI088_LONG_DELAY_TIME);
 8000756:	2050      	movs	r0, #80	@ 0x50
 8000758:	f7ff ff28 	bl	80005ac <BMI088_delay_ms>
    //check commiunication is normal after reset
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 800075c:	f7ff ff9e 	bl	800069c <BMI088_GYRO_NS_L>
 8000760:	1dbb      	adds	r3, r7, #6
 8000762:	4619      	mov	r1, r3
 8000764:	2000      	movs	r0, #0
 8000766:	f000 f979 	bl	8000a5c <BMI088_read_single_reg>
 800076a:	f7ff ffa7 	bl	80006bc <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 800076e:	2096      	movs	r0, #150	@ 0x96
 8000770:	f7ff ff30 	bl	80005d4 <BMI088_delay_us>
    BMI088_gyro_read_single_reg(BMI088_GYRO_CHIP_ID, res);
 8000774:	f7ff ff92 	bl	800069c <BMI088_GYRO_NS_L>
 8000778:	1dbb      	adds	r3, r7, #6
 800077a:	4619      	mov	r1, r3
 800077c:	2000      	movs	r0, #0
 800077e:	f000 f96d 	bl	8000a5c <BMI088_read_single_reg>
 8000782:	f7ff ff9b 	bl	80006bc <BMI088_GYRO_NS_H>
    BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 8000786:	2096      	movs	r0, #150	@ 0x96
 8000788:	f7ff ff24 	bl	80005d4 <BMI088_delay_us>

    // check the "who am I"
    if (res != BMI088_GYRO_CHIP_ID_VALUE)
 800078c:	79bb      	ldrb	r3, [r7, #6]
 800078e:	2b0f      	cmp	r3, #15
 8000790:	d001      	beq.n	8000796 <BMI088_gyro_init+0x8e>
    {
        return BMI088_NO_SENSOR;
 8000792:	23ff      	movs	r3, #255	@ 0xff
 8000794:	e049      	b.n	800082a <BMI088_gyro_init+0x122>
    }

    //set gyro sensor config and check
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 8000796:	2300      	movs	r3, #0
 8000798:	71fb      	strb	r3, [r7, #7]
 800079a:	e042      	b.n	8000822 <BMI088_gyro_init+0x11a>
    {

        BMI088_gyro_write_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], write_BMI088_gyro_reg_data_error[write_reg_num][1]);
 800079c:	f7ff ff7e 	bl	800069c <BMI088_GYRO_NS_L>
 80007a0:	79fa      	ldrb	r2, [r7, #7]
 80007a2:	4924      	ldr	r1, [pc, #144]	@ (8000834 <BMI088_gyro_init+0x12c>)
 80007a4:	4613      	mov	r3, r2
 80007a6:	005b      	lsls	r3, r3, #1
 80007a8:	4413      	add	r3, r2
 80007aa:	440b      	add	r3, r1
 80007ac:	7818      	ldrb	r0, [r3, #0]
 80007ae:	79fa      	ldrb	r2, [r7, #7]
 80007b0:	4920      	ldr	r1, [pc, #128]	@ (8000834 <BMI088_gyro_init+0x12c>)
 80007b2:	4613      	mov	r3, r2
 80007b4:	005b      	lsls	r3, r3, #1
 80007b6:	4413      	add	r3, r2
 80007b8:	440b      	add	r3, r1
 80007ba:	3301      	adds	r3, #1
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	4619      	mov	r1, r3
 80007c0:	f000 f938 	bl	8000a34 <BMI088_write_single_reg>
 80007c4:	f7ff ff7a 	bl	80006bc <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007c8:	2096      	movs	r0, #150	@ 0x96
 80007ca:	f7ff ff03 	bl	80005d4 <BMI088_delay_us>

        BMI088_gyro_read_single_reg(write_BMI088_gyro_reg_data_error[write_reg_num][0], res);
 80007ce:	f7ff ff65 	bl	800069c <BMI088_GYRO_NS_L>
 80007d2:	79fa      	ldrb	r2, [r7, #7]
 80007d4:	4917      	ldr	r1, [pc, #92]	@ (8000834 <BMI088_gyro_init+0x12c>)
 80007d6:	4613      	mov	r3, r2
 80007d8:	005b      	lsls	r3, r3, #1
 80007da:	4413      	add	r3, r2
 80007dc:	440b      	add	r3, r1
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	1dba      	adds	r2, r7, #6
 80007e2:	4611      	mov	r1, r2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f939 	bl	8000a5c <BMI088_read_single_reg>
 80007ea:	f7ff ff67 	bl	80006bc <BMI088_GYRO_NS_H>
        BMI088_delay_us(BMI088_COM_WAIT_SENSOR_TIME);
 80007ee:	2096      	movs	r0, #150	@ 0x96
 80007f0:	f7ff fef0 	bl	80005d4 <BMI088_delay_us>

        if (res != write_BMI088_gyro_reg_data_error[write_reg_num][1])
 80007f4:	79fa      	ldrb	r2, [r7, #7]
 80007f6:	490f      	ldr	r1, [pc, #60]	@ (8000834 <BMI088_gyro_init+0x12c>)
 80007f8:	4613      	mov	r3, r2
 80007fa:	005b      	lsls	r3, r3, #1
 80007fc:	4413      	add	r3, r2
 80007fe:	440b      	add	r3, r1
 8000800:	3301      	adds	r3, #1
 8000802:	781a      	ldrb	r2, [r3, #0]
 8000804:	79bb      	ldrb	r3, [r7, #6]
 8000806:	429a      	cmp	r2, r3
 8000808:	d008      	beq.n	800081c <BMI088_gyro_init+0x114>
        {
            return write_BMI088_gyro_reg_data_error[write_reg_num][2];
 800080a:	79fa      	ldrb	r2, [r7, #7]
 800080c:	4909      	ldr	r1, [pc, #36]	@ (8000834 <BMI088_gyro_init+0x12c>)
 800080e:	4613      	mov	r3, r2
 8000810:	005b      	lsls	r3, r3, #1
 8000812:	4413      	add	r3, r2
 8000814:	440b      	add	r3, r1
 8000816:	3302      	adds	r3, #2
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	e006      	b.n	800082a <BMI088_gyro_init+0x122>
    for (write_reg_num = 0; write_reg_num < BMI088_WRITE_GYRO_REG_NUM; write_reg_num++)
 800081c:	79fb      	ldrb	r3, [r7, #7]
 800081e:	3301      	adds	r3, #1
 8000820:	71fb      	strb	r3, [r7, #7]
 8000822:	79fb      	ldrb	r3, [r7, #7]
 8000824:	2b05      	cmp	r3, #5
 8000826:	d9b9      	bls.n	800079c <BMI088_gyro_init+0x94>
        }
    }

    return BMI088_NO_ERROR;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000018 	.word	0x20000018

08000838 <IMU_get_temp>:
        return accel[2];
    } else {
        return 0;
    }
}
float IMU_get_temp(void) {
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	BMI088_read(gyro, accel, &temp);
 800083c:	4a05      	ldr	r2, [pc, #20]	@ (8000854 <IMU_get_temp+0x1c>)
 800083e:	4906      	ldr	r1, [pc, #24]	@ (8000858 <IMU_get_temp+0x20>)
 8000840:	4806      	ldr	r0, [pc, #24]	@ (800085c <IMU_get_temp+0x24>)
 8000842:	f000 f80d 	bl	8000860 <BMI088_read>
	return temp;
 8000846:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <IMU_get_temp+0x1c>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	ee07 3a90 	vmov	s15, r3
}
 800084e:	eeb0 0a67 	vmov.f32	s0, s15
 8000852:	bd80      	pop	{r7, pc}
 8000854:	200000c4 	.word	0x200000c4
 8000858:	200000b8 	.word	0x200000b8
 800085c:	200000ac 	.word	0x200000ac

08000860 <BMI088_read>:
void BMI088_read(float gyro[3], float accel[3], float *temperate)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b088      	sub	sp, #32
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
    uint8_t buf[8] = {0, 0, 0, 0, 0, 0};
 800086c:	f107 0314 	add.w	r3, r7, #20
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
    int16_t bmi088_raw_temp;

    BMI088_accel_read_muli_reg(BMI088_ACCEL_XOUT_L, buf, 6);
 8000876:	f7ff fef1 	bl	800065c <BMI088_ACCEL_NS_L>
 800087a:	2092      	movs	r0, #146	@ 0x92
 800087c:	f7ff ff2e 	bl	80006dc <BMI088_read_write_byte>
 8000880:	f107 0314 	add.w	r3, r7, #20
 8000884:	2206      	movs	r2, #6
 8000886:	4619      	mov	r1, r3
 8000888:	2012      	movs	r0, #18
 800088a:	f000 f8ff 	bl	8000a8c <BMI088_read_muli_reg>
 800088e:	f7ff fef5 	bl	800067c <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[1]) << 8) | buf[0];
 8000892:	7d7b      	ldrb	r3, [r7, #21]
 8000894:	b21b      	sxth	r3, r3
 8000896:	021b      	lsls	r3, r3, #8
 8000898:	b21a      	sxth	r2, r3
 800089a:	7d3b      	ldrb	r3, [r7, #20]
 800089c:	b21b      	sxth	r3, r3
 800089e:	4313      	orrs	r3, r2
 80008a0:	83fb      	strh	r3, [r7, #30]
    accel[0] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80008a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008a6:	ee07 3a90 	vmov	s15, r3
 80008aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008ae:	4b5f      	ldr	r3, [pc, #380]	@ (8000a2c <BMI088_read+0x1cc>)
 80008b0:	edd3 7a00 	vldr	s15, [r3]
 80008b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 80008be:	7dfb      	ldrb	r3, [r7, #23]
 80008c0:	b21b      	sxth	r3, r3
 80008c2:	021b      	lsls	r3, r3, #8
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	7dbb      	ldrb	r3, [r7, #22]
 80008c8:	b21b      	sxth	r3, r3
 80008ca:	4313      	orrs	r3, r2
 80008cc:	83fb      	strh	r3, [r7, #30]
    accel[1] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80008ce:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80008da:	4b54      	ldr	r3, [pc, #336]	@ (8000a2c <BMI088_read+0x1cc>)
 80008dc:	edd3 7a00 	vldr	s15, [r3]
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	3304      	adds	r3, #4
 80008e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008e8:	edc3 7a00 	vstr	s15, [r3]
    bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 80008ec:	7e7b      	ldrb	r3, [r7, #25]
 80008ee:	b21b      	sxth	r3, r3
 80008f0:	021b      	lsls	r3, r3, #8
 80008f2:	b21a      	sxth	r2, r3
 80008f4:	7e3b      	ldrb	r3, [r7, #24]
 80008f6:	b21b      	sxth	r3, r3
 80008f8:	4313      	orrs	r3, r2
 80008fa:	83fb      	strh	r3, [r7, #30]
    accel[2] = bmi088_raw_temp * BMI088_ACCEL_SEN;
 80008fc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000900:	ee07 3a90 	vmov	s15, r3
 8000904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000908:	4b48      	ldr	r3, [pc, #288]	@ (8000a2c <BMI088_read+0x1cc>)
 800090a:	edd3 7a00 	vldr	s15, [r3]
 800090e:	68bb      	ldr	r3, [r7, #8]
 8000910:	3308      	adds	r3, #8
 8000912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000916:	edc3 7a00 	vstr	s15, [r3]

    BMI088_gyro_read_muli_reg(BMI088_GYRO_CHIP_ID, buf, 8);
 800091a:	f7ff febf 	bl	800069c <BMI088_GYRO_NS_L>
 800091e:	f107 0314 	add.w	r3, r7, #20
 8000922:	2208      	movs	r2, #8
 8000924:	4619      	mov	r1, r3
 8000926:	2000      	movs	r0, #0
 8000928:	f000 f8b0 	bl	8000a8c <BMI088_read_muli_reg>
 800092c:	f7ff fec6 	bl	80006bc <BMI088_GYRO_NS_H>
    if(buf[0] == BMI088_GYRO_CHIP_ID_VALUE)
 8000930:	7d3b      	ldrb	r3, [r7, #20]
 8000932:	2b0f      	cmp	r3, #15
 8000934:	d143      	bne.n	80009be <BMI088_read+0x15e>
    {
        bmi088_raw_temp = (int16_t)((buf[3]) << 8) | buf[2];
 8000936:	7dfb      	ldrb	r3, [r7, #23]
 8000938:	b21b      	sxth	r3, r3
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21a      	sxth	r2, r3
 800093e:	7dbb      	ldrb	r3, [r7, #22]
 8000940:	b21b      	sxth	r3, r3
 8000942:	4313      	orrs	r3, r2
 8000944:	83fb      	strh	r3, [r7, #30]
        gyro[0] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000946:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 800094a:	ee07 3a90 	vmov	s15, r3
 800094e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000952:	4b37      	ldr	r3, [pc, #220]	@ (8000a30 <BMI088_read+0x1d0>)
 8000954:	edd3 7a00 	vldr	s15, [r3]
 8000958:	ee67 7a27 	vmul.f32	s15, s14, s15
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[5]) << 8) | buf[4];
 8000962:	7e7b      	ldrb	r3, [r7, #25]
 8000964:	b21b      	sxth	r3, r3
 8000966:	021b      	lsls	r3, r3, #8
 8000968:	b21a      	sxth	r2, r3
 800096a:	7e3b      	ldrb	r3, [r7, #24]
 800096c:	b21b      	sxth	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	83fb      	strh	r3, [r7, #30]
        gyro[1] = bmi088_raw_temp * BMI088_GYRO_SEN;
 8000972:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000976:	ee07 3a90 	vmov	s15, r3
 800097a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800097e:	4b2c      	ldr	r3, [pc, #176]	@ (8000a30 <BMI088_read+0x1d0>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	3304      	adds	r3, #4
 8000988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800098c:	edc3 7a00 	vstr	s15, [r3]
        bmi088_raw_temp = (int16_t)((buf[7]) << 8) | buf[6];
 8000990:	7efb      	ldrb	r3, [r7, #27]
 8000992:	b21b      	sxth	r3, r3
 8000994:	021b      	lsls	r3, r3, #8
 8000996:	b21a      	sxth	r2, r3
 8000998:	7ebb      	ldrb	r3, [r7, #26]
 800099a:	b21b      	sxth	r3, r3
 800099c:	4313      	orrs	r3, r2
 800099e:	83fb      	strh	r3, [r7, #30]
        gyro[2] = bmi088_raw_temp * BMI088_GYRO_SEN;
 80009a0:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009a4:	ee07 3a90 	vmov	s15, r3
 80009a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009ac:	4b20      	ldr	r3, [pc, #128]	@ (8000a30 <BMI088_read+0x1d0>)
 80009ae:	edd3 7a00 	vldr	s15, [r3]
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	3308      	adds	r3, #8
 80009b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009ba:	edc3 7a00 	vstr	s15, [r3]
    }
    BMI088_accel_read_muli_reg(BMI088_TEMP_M, buf, 2);
 80009be:	f7ff fe4d 	bl	800065c <BMI088_ACCEL_NS_L>
 80009c2:	20a2      	movs	r0, #162	@ 0xa2
 80009c4:	f7ff fe8a 	bl	80006dc <BMI088_read_write_byte>
 80009c8:	f107 0314 	add.w	r3, r7, #20
 80009cc:	2202      	movs	r2, #2
 80009ce:	4619      	mov	r1, r3
 80009d0:	2022      	movs	r0, #34	@ 0x22
 80009d2:	f000 f85b 	bl	8000a8c <BMI088_read_muli_reg>
 80009d6:	f7ff fe51 	bl	800067c <BMI088_ACCEL_NS_H>

    bmi088_raw_temp = (int16_t)((buf[0] << 3) | (buf[1] >> 5));
 80009da:	7d3b      	ldrb	r3, [r7, #20]
 80009dc:	b21b      	sxth	r3, r3
 80009de:	00db      	lsls	r3, r3, #3
 80009e0:	b21a      	sxth	r2, r3
 80009e2:	7d7b      	ldrb	r3, [r7, #21]
 80009e4:	095b      	lsrs	r3, r3, #5
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	b21b      	sxth	r3, r3
 80009ea:	4313      	orrs	r3, r2
 80009ec:	83fb      	strh	r3, [r7, #30]

    if (bmi088_raw_temp > 1023)
 80009ee:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009f6:	db04      	blt.n	8000a02 <BMI088_read+0x1a2>
    {
        bmi088_raw_temp -= 2048;
 80009f8:	8bfb      	ldrh	r3, [r7, #30]
 80009fa:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	83fb      	strh	r3, [r7, #30]
    }

    *temperate = bmi088_raw_temp * BMI088_TEMP_FACTOR + BMI088_TEMP_OFFSET;
 8000a02:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8000a06:	ee07 3a90 	vmov	s15, r3
 8000a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0e:	eeb4 7a00 	vmov.f32	s14, #64	@ 0x3e000000  0.125
 8000a12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a16:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8000a1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	edc3 7a00 	vstr	s15, [r3]
}
 8000a24:	bf00      	nop
 8000a26:	3720      	adds	r7, #32
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000010 	.word	0x20000010
 8000a30:	20000014 	.word	0x20000014

08000a34 <BMI088_write_single_reg>:

#if defined(BMI088_USE_SPI)

static void BMI088_write_single_reg(uint8_t reg, uint8_t data)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	460a      	mov	r2, r1
 8000a3e:	71fb      	strb	r3, [r7, #7]
 8000a40:	4613      	mov	r3, r2
 8000a42:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg);
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff fe48 	bl	80006dc <BMI088_read_write_byte>
    BMI088_read_write_byte(data);
 8000a4c:	79bb      	ldrb	r3, [r7, #6]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f7ff fe44 	bl	80006dc <BMI088_read_write_byte>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <BMI088_read_single_reg>:

static void BMI088_read_single_reg(uint8_t reg, uint8_t *return_data)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
    BMI088_read_write_byte(reg | 0x80);
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000a6e:	b2db      	uxtb	r3, r3
 8000a70:	4618      	mov	r0, r3
 8000a72:	f7ff fe33 	bl	80006dc <BMI088_read_write_byte>
    *return_data = BMI088_read_write_byte(0x55);
 8000a76:	2055      	movs	r0, #85	@ 0x55
 8000a78:	f7ff fe30 	bl	80006dc <BMI088_read_write_byte>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	461a      	mov	r2, r3
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	701a      	strb	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	3708      	adds	r7, #8
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <BMI088_read_muli_reg>:
//    }

//}

static void BMI088_read_muli_reg(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	4603      	mov	r3, r0
 8000a94:	6039      	str	r1, [r7, #0]
 8000a96:	71fb      	strb	r3, [r7, #7]
 8000a98:	4613      	mov	r3, r2
 8000a9a:	71bb      	strb	r3, [r7, #6]
    BMI088_read_write_byte(reg | 0x80);
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000aa2:	b2db      	uxtb	r3, r3
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f7ff fe19 	bl	80006dc <BMI088_read_write_byte>

    while (len != 0)
 8000aaa:	e00c      	b.n	8000ac6 <BMI088_read_muli_reg+0x3a>
    {

        *buf = BMI088_read_write_byte(0x55);
 8000aac:	2055      	movs	r0, #85	@ 0x55
 8000aae:	f7ff fe15 	bl	80006dc <BMI088_read_write_byte>
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	701a      	strb	r2, [r3, #0]
        buf++;
 8000aba:	683b      	ldr	r3, [r7, #0]
 8000abc:	3301      	adds	r3, #1
 8000abe:	603b      	str	r3, [r7, #0]
        len--;
 8000ac0:	79bb      	ldrb	r3, [r7, #6]
 8000ac2:	3b01      	subs	r3, #1
 8000ac4:	71bb      	strb	r3, [r7, #6]
    while (len != 0)
 8000ac6:	79bb      	ldrb	r3, [r7, #6]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d1ef      	bne.n	8000aac <BMI088_read_muli_reg+0x20>
    }
}
 8000acc:	bf00      	nop
 8000ace:	bf00      	nop
 8000ad0:	3708      	adds	r7, #8
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
	...

08000ad8 <CAL_Update>:
int16_t dCounter = 0;

int16_t mouseX = 0;
int16_t mouseY = 0;

void CAL_Update(){
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	if(getDR16_S2()==1){
 8000adc:	f001 fbac 	bl	8002238 <getDR16_S2>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d13b      	bne.n	8000b5e <CAL_Update+0x86>
		isWPressed = getDR16_W();
 8000ae6:	f001 fbb5 	bl	8002254 <getDR16_W>
 8000aea:	4603      	mov	r3, r0
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b90      	ldr	r3, [pc, #576]	@ (8000d30 <CAL_Update+0x258>)
 8000af0:	701a      	strb	r2, [r3, #0]
		isAPressed = getDR16_A();
 8000af2:	f001 fbcb 	bl	800228c <getDR16_A>
 8000af6:	4603      	mov	r3, r0
 8000af8:	461a      	mov	r2, r3
 8000afa:	4b8e      	ldr	r3, [pc, #568]	@ (8000d34 <CAL_Update+0x25c>)
 8000afc:	701a      	strb	r2, [r3, #0]
		isSPressed = getDR16_S();
 8000afe:	f001 fbb7 	bl	8002270 <getDR16_S>
 8000b02:	4603      	mov	r3, r0
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b8c      	ldr	r3, [pc, #560]	@ (8000d38 <CAL_Update+0x260>)
 8000b08:	701a      	strb	r2, [r3, #0]
		isDPressed = getDR16_D();
 8000b0a:	f001 fbcd 	bl	80022a8 <getDR16_D>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	461a      	mov	r2, r3
 8000b12:	4b8a      	ldr	r3, [pc, #552]	@ (8000d3c <CAL_Update+0x264>)
 8000b14:	701a      	strb	r2, [r3, #0]
		mouseX = (int16_t)(((float)getDR16_MouseX())*MOUSE_SCALER);
 8000b16:	f001 fbd5 	bl	80022c4 <getDR16_MouseX>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	ee07 3a90 	vmov	s15, r3
 8000b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b24:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b28:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b30:	ee17 3a90 	vmov	r3, s15
 8000b34:	b21a      	sxth	r2, r3
 8000b36:	4b82      	ldr	r3, [pc, #520]	@ (8000d40 <CAL_Update+0x268>)
 8000b38:	801a      	strh	r2, [r3, #0]
		mouseY = (int16_t)(((float)getDR16_MouseY())*MOUSE_SCALER);
 8000b3a:	f001 fbcf 	bl	80022dc <getDR16_MouseY>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	ee07 3a90 	vmov	s15, r3
 8000b44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b48:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b50:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b54:	ee17 3a90 	vmov	r3, s15
 8000b58:	b21a      	sxth	r2, r3
 8000b5a:	4b7a      	ldr	r3, [pc, #488]	@ (8000d44 <CAL_Update+0x26c>)
 8000b5c:	801a      	strh	r2, [r3, #0]
	}
	if(isWPressed ==1){
 8000b5e:	4b74      	ldr	r3, [pc, #464]	@ (8000d30 <CAL_Update+0x258>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d115      	bne.n	8000b92 <CAL_Update+0xba>
		wCounter = wCounter + RISING_SCALER;
 8000b66:	4b78      	ldr	r3, [pc, #480]	@ (8000d48 <CAL_Update+0x270>)
 8000b68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b6c:	b29a      	uxth	r2, r3
 8000b6e:	2305      	movs	r3, #5
 8000b70:	b29b      	uxth	r3, r3
 8000b72:	4413      	add	r3, r2
 8000b74:	b29b      	uxth	r3, r3
 8000b76:	b21a      	sxth	r2, r3
 8000b78:	4b73      	ldr	r3, [pc, #460]	@ (8000d48 <CAL_Update+0x270>)
 8000b7a:	801a      	strh	r2, [r3, #0]
		if(wCounter>660){
 8000b7c:	4b72      	ldr	r3, [pc, #456]	@ (8000d48 <CAL_Update+0x270>)
 8000b7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b82:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000b86:	dd1c      	ble.n	8000bc2 <CAL_Update+0xea>
			wCounter = 660;
 8000b88:	4b6f      	ldr	r3, [pc, #444]	@ (8000d48 <CAL_Update+0x270>)
 8000b8a:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000b8e:	801a      	strh	r2, [r3, #0]
 8000b90:	e017      	b.n	8000bc2 <CAL_Update+0xea>
		}
	}else{
		if(wCounter>0){
 8000b92:	4b6d      	ldr	r3, [pc, #436]	@ (8000d48 <CAL_Update+0x270>)
 8000b94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	dd0a      	ble.n	8000bb2 <CAL_Update+0xda>
			wCounter = wCounter - FALLING_SCALER;
 8000b9c:	4b6a      	ldr	r3, [pc, #424]	@ (8000d48 <CAL_Update+0x270>)
 8000b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	230a      	movs	r3, #10
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b29b      	uxth	r3, r3
 8000bac:	b21a      	sxth	r2, r3
 8000bae:	4b66      	ldr	r3, [pc, #408]	@ (8000d48 <CAL_Update+0x270>)
 8000bb0:	801a      	strh	r2, [r3, #0]
		}
		if(wCounter<0){
 8000bb2:	4b65      	ldr	r3, [pc, #404]	@ (8000d48 <CAL_Update+0x270>)
 8000bb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	da02      	bge.n	8000bc2 <CAL_Update+0xea>
			wCounter = 0;
 8000bbc:	4b62      	ldr	r3, [pc, #392]	@ (8000d48 <CAL_Update+0x270>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isDPressed ==1){
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	@ (8000d3c <CAL_Update+0x264>)
 8000bc4:	781b      	ldrb	r3, [r3, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d115      	bne.n	8000bf6 <CAL_Update+0x11e>
		dCounter = dCounter + RISING_SCALER;
 8000bca:	4b60      	ldr	r3, [pc, #384]	@ (8000d4c <CAL_Update+0x274>)
 8000bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd0:	b29a      	uxth	r2, r3
 8000bd2:	2305      	movs	r3, #5
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	4413      	add	r3, r2
 8000bd8:	b29b      	uxth	r3, r3
 8000bda:	b21a      	sxth	r2, r3
 8000bdc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d4c <CAL_Update+0x274>)
 8000bde:	801a      	strh	r2, [r3, #0]
		if(dCounter>660){
 8000be0:	4b5a      	ldr	r3, [pc, #360]	@ (8000d4c <CAL_Update+0x274>)
 8000be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000be6:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000bea:	dd1c      	ble.n	8000c26 <CAL_Update+0x14e>
			dCounter = 660;
 8000bec:	4b57      	ldr	r3, [pc, #348]	@ (8000d4c <CAL_Update+0x274>)
 8000bee:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000bf2:	801a      	strh	r2, [r3, #0]
 8000bf4:	e017      	b.n	8000c26 <CAL_Update+0x14e>
		}
	}else{
		if(dCounter>0){
 8000bf6:	4b55      	ldr	r3, [pc, #340]	@ (8000d4c <CAL_Update+0x274>)
 8000bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	dd0a      	ble.n	8000c16 <CAL_Update+0x13e>
			dCounter = dCounter - FALLING_SCALER;
 8000c00:	4b52      	ldr	r3, [pc, #328]	@ (8000d4c <CAL_Update+0x274>)
 8000c02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c06:	b29a      	uxth	r2, r3
 8000c08:	230a      	movs	r3, #10
 8000c0a:	b29b      	uxth	r3, r3
 8000c0c:	1ad3      	subs	r3, r2, r3
 8000c0e:	b29b      	uxth	r3, r3
 8000c10:	b21a      	sxth	r2, r3
 8000c12:	4b4e      	ldr	r3, [pc, #312]	@ (8000d4c <CAL_Update+0x274>)
 8000c14:	801a      	strh	r2, [r3, #0]
		}
		if(dCounter<0){
 8000c16:	4b4d      	ldr	r3, [pc, #308]	@ (8000d4c <CAL_Update+0x274>)
 8000c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	da02      	bge.n	8000c26 <CAL_Update+0x14e>
			dCounter = 0;
 8000c20:	4b4a      	ldr	r3, [pc, #296]	@ (8000d4c <CAL_Update+0x274>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isSPressed ==1){
 8000c26:	4b44      	ldr	r3, [pc, #272]	@ (8000d38 <CAL_Update+0x260>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d115      	bne.n	8000c5a <CAL_Update+0x182>
		sCounter = sCounter + RISING_SCALER;
 8000c2e:	4b48      	ldr	r3, [pc, #288]	@ (8000d50 <CAL_Update+0x278>)
 8000c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c34:	b29a      	uxth	r2, r3
 8000c36:	2305      	movs	r3, #5
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	4413      	add	r3, r2
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	b21a      	sxth	r2, r3
 8000c40:	4b43      	ldr	r3, [pc, #268]	@ (8000d50 <CAL_Update+0x278>)
 8000c42:	801a      	strh	r2, [r3, #0]
		if(sCounter>660){
 8000c44:	4b42      	ldr	r3, [pc, #264]	@ (8000d50 <CAL_Update+0x278>)
 8000c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c4a:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000c4e:	dd1c      	ble.n	8000c8a <CAL_Update+0x1b2>
			sCounter = 660;
 8000c50:	4b3f      	ldr	r3, [pc, #252]	@ (8000d50 <CAL_Update+0x278>)
 8000c52:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000c56:	801a      	strh	r2, [r3, #0]
 8000c58:	e017      	b.n	8000c8a <CAL_Update+0x1b2>
		}
	}else{
		if(sCounter>0){
 8000c5a:	4b3d      	ldr	r3, [pc, #244]	@ (8000d50 <CAL_Update+0x278>)
 8000c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	dd0a      	ble.n	8000c7a <CAL_Update+0x1a2>
			sCounter = sCounter - FALLING_SCALER;
 8000c64:	4b3a      	ldr	r3, [pc, #232]	@ (8000d50 <CAL_Update+0x278>)
 8000c66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c6a:	b29a      	uxth	r2, r3
 8000c6c:	230a      	movs	r3, #10
 8000c6e:	b29b      	uxth	r3, r3
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	b29b      	uxth	r3, r3
 8000c74:	b21a      	sxth	r2, r3
 8000c76:	4b36      	ldr	r3, [pc, #216]	@ (8000d50 <CAL_Update+0x278>)
 8000c78:	801a      	strh	r2, [r3, #0]
		}
		if(sCounter<0){
 8000c7a:	4b35      	ldr	r3, [pc, #212]	@ (8000d50 <CAL_Update+0x278>)
 8000c7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	da02      	bge.n	8000c8a <CAL_Update+0x1b2>
			sCounter = 0;
 8000c84:	4b32      	ldr	r3, [pc, #200]	@ (8000d50 <CAL_Update+0x278>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	801a      	strh	r2, [r3, #0]
		}
	}

	if(isAPressed ==1){
 8000c8a:	4b2a      	ldr	r3, [pc, #168]	@ (8000d34 <CAL_Update+0x25c>)
 8000c8c:	781b      	ldrb	r3, [r3, #0]
 8000c8e:	2b01      	cmp	r3, #1
 8000c90:	d115      	bne.n	8000cbe <CAL_Update+0x1e6>
		aCounter = aCounter + RISING_SCALER;
 8000c92:	4b30      	ldr	r3, [pc, #192]	@ (8000d54 <CAL_Update+0x27c>)
 8000c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	2305      	movs	r3, #5
 8000c9c:	b29b      	uxth	r3, r3
 8000c9e:	4413      	add	r3, r2
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	b21a      	sxth	r2, r3
 8000ca4:	4b2b      	ldr	r3, [pc, #172]	@ (8000d54 <CAL_Update+0x27c>)
 8000ca6:	801a      	strh	r2, [r3, #0]
		if(aCounter>660){
 8000ca8:	4b2a      	ldr	r3, [pc, #168]	@ (8000d54 <CAL_Update+0x27c>)
 8000caa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cae:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000cb2:	dd1c      	ble.n	8000cee <CAL_Update+0x216>
			aCounter = 660;
 8000cb4:	4b27      	ldr	r3, [pc, #156]	@ (8000d54 <CAL_Update+0x27c>)
 8000cb6:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000cba:	801a      	strh	r2, [r3, #0]
 8000cbc:	e017      	b.n	8000cee <CAL_Update+0x216>
		}
	}else{
		if(aCounter>0){
 8000cbe:	4b25      	ldr	r3, [pc, #148]	@ (8000d54 <CAL_Update+0x27c>)
 8000cc0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	dd0a      	ble.n	8000cde <CAL_Update+0x206>
			aCounter = aCounter - FALLING_SCALER;
 8000cc8:	4b22      	ldr	r3, [pc, #136]	@ (8000d54 <CAL_Update+0x27c>)
 8000cca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	230a      	movs	r3, #10
 8000cd2:	b29b      	uxth	r3, r3
 8000cd4:	1ad3      	subs	r3, r2, r3
 8000cd6:	b29b      	uxth	r3, r3
 8000cd8:	b21a      	sxth	r2, r3
 8000cda:	4b1e      	ldr	r3, [pc, #120]	@ (8000d54 <CAL_Update+0x27c>)
 8000cdc:	801a      	strh	r2, [r3, #0]
		}
		if(aCounter<0){
 8000cde:	4b1d      	ldr	r3, [pc, #116]	@ (8000d54 <CAL_Update+0x27c>)
 8000ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	da02      	bge.n	8000cee <CAL_Update+0x216>
			aCounter = 0;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8000d54 <CAL_Update+0x27c>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	801a      	strh	r2, [r3, #0]
		}
	}

	if(mouseX>660){
 8000cee:	4b14      	ldr	r3, [pc, #80]	@ (8000d40 <CAL_Update+0x268>)
 8000cf0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cf4:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000cf8:	dd04      	ble.n	8000d04 <CAL_Update+0x22c>
		mouseX = 660;
 8000cfa:	4b11      	ldr	r3, [pc, #68]	@ (8000d40 <CAL_Update+0x268>)
 8000cfc:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000d00:	801a      	strh	r2, [r3, #0]
 8000d02:	e009      	b.n	8000d18 <CAL_Update+0x240>
	}else if(mouseX<-660){
 8000d04:	4b0e      	ldr	r3, [pc, #56]	@ (8000d40 <CAL_Update+0x268>)
 8000d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0a:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8000d0e:	da03      	bge.n	8000d18 <CAL_Update+0x240>
		mouseX = -660;
 8000d10:	4b0b      	ldr	r3, [pc, #44]	@ (8000d40 <CAL_Update+0x268>)
 8000d12:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8000d16:	801a      	strh	r2, [r3, #0]
	}
	if(mouseY>660){
 8000d18:	4b0a      	ldr	r3, [pc, #40]	@ (8000d44 <CAL_Update+0x26c>)
 8000d1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d1e:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000d22:	dd19      	ble.n	8000d58 <CAL_Update+0x280>
		mouseY = 660;
 8000d24:	4b07      	ldr	r3, [pc, #28]	@ (8000d44 <CAL_Update+0x26c>)
 8000d26:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000d2a:	801a      	strh	r2, [r3, #0]
 8000d2c:	e01e      	b.n	8000d6c <CAL_Update+0x294>
 8000d2e:	bf00      	nop
 8000d30:	20000104 	.word	0x20000104
 8000d34:	20000105 	.word	0x20000105
 8000d38:	20000106 	.word	0x20000106
 8000d3c:	20000107 	.word	0x20000107
 8000d40:	20000110 	.word	0x20000110
 8000d44:	20000112 	.word	0x20000112
 8000d48:	20000108 	.word	0x20000108
 8000d4c:	2000010e 	.word	0x2000010e
 8000d50:	2000010c 	.word	0x2000010c
 8000d54:	2000010a 	.word	0x2000010a
	}else if(mouseY<-660){
 8000d58:	4b4f      	ldr	r3, [pc, #316]	@ (8000e98 <CAL_Update+0x3c0>)
 8000d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5e:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8000d62:	da03      	bge.n	8000d6c <CAL_Update+0x294>
		mouseY = -660;
 8000d64:	4b4c      	ldr	r3, [pc, #304]	@ (8000e98 <CAL_Update+0x3c0>)
 8000d66:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8000d6a:	801a      	strh	r2, [r3, #0]
	}


	CAL_CH0 = getDR16_CH0() + dCounter - aCounter;
 8000d6c:	f001 f9f4 	bl	8002158 <getDR16_CH0>
 8000d70:	4603      	mov	r3, r0
 8000d72:	b29a      	uxth	r2, r3
 8000d74:	4b49      	ldr	r3, [pc, #292]	@ (8000e9c <CAL_Update+0x3c4>)
 8000d76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d7a:	b29b      	uxth	r3, r3
 8000d7c:	4413      	add	r3, r2
 8000d7e:	b29a      	uxth	r2, r3
 8000d80:	4b47      	ldr	r3, [pc, #284]	@ (8000ea0 <CAL_Update+0x3c8>)
 8000d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	b29b      	uxth	r3, r3
 8000d8c:	b21a      	sxth	r2, r3
 8000d8e:	4b45      	ldr	r3, [pc, #276]	@ (8000ea4 <CAL_Update+0x3cc>)
 8000d90:	801a      	strh	r2, [r3, #0]
	CAL_CH1 = getDR16_CH1() + wCounter - sCounter;
 8000d92:	f001 f9fd 	bl	8002190 <getDR16_CH1>
 8000d96:	4603      	mov	r3, r0
 8000d98:	b29a      	uxth	r2, r3
 8000d9a:	4b43      	ldr	r3, [pc, #268]	@ (8000ea8 <CAL_Update+0x3d0>)
 8000d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000da0:	b29b      	uxth	r3, r3
 8000da2:	4413      	add	r3, r2
 8000da4:	b29a      	uxth	r2, r3
 8000da6:	4b41      	ldr	r3, [pc, #260]	@ (8000eac <CAL_Update+0x3d4>)
 8000da8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dac:	b29b      	uxth	r3, r3
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	b29b      	uxth	r3, r3
 8000db2:	b21a      	sxth	r2, r3
 8000db4:	4b3e      	ldr	r3, [pc, #248]	@ (8000eb0 <CAL_Update+0x3d8>)
 8000db6:	801a      	strh	r2, [r3, #0]
	CAL_CH2 = getDR16_CH2()+mouseX;
 8000db8:	f001 fa06 	bl	80021c8 <getDR16_CH2>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8000eb4 <CAL_Update+0x3dc>)
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	4413      	add	r3, r2
 8000dca:	b29b      	uxth	r3, r3
 8000dcc:	b21a      	sxth	r2, r3
 8000dce:	4b3a      	ldr	r3, [pc, #232]	@ (8000eb8 <CAL_Update+0x3e0>)
 8000dd0:	801a      	strh	r2, [r3, #0]
	CAL_CH3 = getDR16_CH3()+mouseY;
 8000dd2:	f001 fa15 	bl	8002200 <getDR16_CH3>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	b29a      	uxth	r2, r3
 8000dda:	4b2f      	ldr	r3, [pc, #188]	@ (8000e98 <CAL_Update+0x3c0>)
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	b29b      	uxth	r3, r3
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	b21a      	sxth	r2, r3
 8000de8:	4b34      	ldr	r3, [pc, #208]	@ (8000ebc <CAL_Update+0x3e4>)
 8000dea:	801a      	strh	r2, [r3, #0]

	if(CAL_CH0>660){
 8000dec:	4b2d      	ldr	r3, [pc, #180]	@ (8000ea4 <CAL_Update+0x3cc>)
 8000dee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000df2:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000df6:	dd04      	ble.n	8000e02 <CAL_Update+0x32a>
		CAL_CH0 = 660;
 8000df8:	4b2a      	ldr	r3, [pc, #168]	@ (8000ea4 <CAL_Update+0x3cc>)
 8000dfa:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000dfe:	801a      	strh	r2, [r3, #0]
 8000e00:	e009      	b.n	8000e16 <CAL_Update+0x33e>
	}else if(CAL_CH0<-660){
 8000e02:	4b28      	ldr	r3, [pc, #160]	@ (8000ea4 <CAL_Update+0x3cc>)
 8000e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e08:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8000e0c:	da03      	bge.n	8000e16 <CAL_Update+0x33e>
		CAL_CH0 = -660;
 8000e0e:	4b25      	ldr	r3, [pc, #148]	@ (8000ea4 <CAL_Update+0x3cc>)
 8000e10:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8000e14:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH1>660){
 8000e16:	4b26      	ldr	r3, [pc, #152]	@ (8000eb0 <CAL_Update+0x3d8>)
 8000e18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e1c:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000e20:	dd04      	ble.n	8000e2c <CAL_Update+0x354>
		CAL_CH1 = 660;
 8000e22:	4b23      	ldr	r3, [pc, #140]	@ (8000eb0 <CAL_Update+0x3d8>)
 8000e24:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000e28:	801a      	strh	r2, [r3, #0]
 8000e2a:	e009      	b.n	8000e40 <CAL_Update+0x368>
	}else if(CAL_CH1<-660){
 8000e2c:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <CAL_Update+0x3d8>)
 8000e2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e32:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8000e36:	da03      	bge.n	8000e40 <CAL_Update+0x368>
		CAL_CH1 = -660;
 8000e38:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb0 <CAL_Update+0x3d8>)
 8000e3a:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8000e3e:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH2>660){
 8000e40:	4b1d      	ldr	r3, [pc, #116]	@ (8000eb8 <CAL_Update+0x3e0>)
 8000e42:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e46:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000e4a:	dd04      	ble.n	8000e56 <CAL_Update+0x37e>
		CAL_CH2 = 660;
 8000e4c:	4b1a      	ldr	r3, [pc, #104]	@ (8000eb8 <CAL_Update+0x3e0>)
 8000e4e:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000e52:	801a      	strh	r2, [r3, #0]
 8000e54:	e009      	b.n	8000e6a <CAL_Update+0x392>
	}else if(CAL_CH2<-660){
 8000e56:	4b18      	ldr	r3, [pc, #96]	@ (8000eb8 <CAL_Update+0x3e0>)
 8000e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e5c:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8000e60:	da03      	bge.n	8000e6a <CAL_Update+0x392>
		CAL_CH2 = -660;
 8000e62:	4b15      	ldr	r3, [pc, #84]	@ (8000eb8 <CAL_Update+0x3e0>)
 8000e64:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8000e68:	801a      	strh	r2, [r3, #0]
	}

	if(CAL_CH3>660){
 8000e6a:	4b14      	ldr	r3, [pc, #80]	@ (8000ebc <CAL_Update+0x3e4>)
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e70:	f5b3 7f25 	cmp.w	r3, #660	@ 0x294
 8000e74:	dd04      	ble.n	8000e80 <CAL_Update+0x3a8>
		CAL_CH3 = 660;
 8000e76:	4b11      	ldr	r3, [pc, #68]	@ (8000ebc <CAL_Update+0x3e4>)
 8000e78:	f44f 7225 	mov.w	r2, #660	@ 0x294
 8000e7c:	801a      	strh	r2, [r3, #0]
	}else if(CAL_CH3<-660){
		CAL_CH3 = -660;
	}


}
 8000e7e:	e009      	b.n	8000e94 <CAL_Update+0x3bc>
	}else if(CAL_CH3<-660){
 8000e80:	4b0e      	ldr	r3, [pc, #56]	@ (8000ebc <CAL_Update+0x3e4>)
 8000e82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e86:	f513 7f25 	cmn.w	r3, #660	@ 0x294
 8000e8a:	da03      	bge.n	8000e94 <CAL_Update+0x3bc>
		CAL_CH3 = -660;
 8000e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ebc <CAL_Update+0x3e4>)
 8000e8e:	f64f 526c 	movw	r2, #64876	@ 0xfd6c
 8000e92:	801a      	strh	r2, [r3, #0]
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	20000112 	.word	0x20000112
 8000e9c:	2000010e 	.word	0x2000010e
 8000ea0:	2000010a 	.word	0x2000010a
 8000ea4:	200000c8 	.word	0x200000c8
 8000ea8:	20000108 	.word	0x20000108
 8000eac:	2000010c 	.word	0x2000010c
 8000eb0:	200000ca 	.word	0x200000ca
 8000eb4:	20000110 	.word	0x20000110
 8000eb8:	200000cc 	.word	0x200000cc
 8000ebc:	200000ce 	.word	0x200000ce

08000ec0 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>:





void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]

}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <PC_CONTROL_RxEventCallback>:




void PC_CONTROL_RxEventCallback(int16_t mouse_x, int16_t mouse_y, int16_t mouse_z, uint8_t left_button_down, uint8_t right_button_down, uint8_t w, uint8_t s, uint8_t a, uint8_t d, uint8_t shift,uint8_t ctrl,uint8_t q, uint8_t e, uint8_t r, uint8_t f, uint8_t g, uint8_t z, uint8_t x, uint8_t c, uint8_t v, uint8_t b){
 8000ed4:	b590      	push	{r4, r7, lr}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4604      	mov	r4, r0
 8000edc:	4608      	mov	r0, r1
 8000ede:	4611      	mov	r1, r2
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4623      	mov	r3, r4
 8000ee4:	80fb      	strh	r3, [r7, #6]
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	80bb      	strh	r3, [r7, #4]
 8000eea:	460b      	mov	r3, r1
 8000eec:	807b      	strh	r3, [r7, #2]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	707b      	strb	r3, [r7, #1]
	if(getDR16_S2()==3||getDR16_S2()==0){
 8000ef2:	f001 f9a1 	bl	8002238 <getDR16_S2>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b03      	cmp	r3, #3
 8000efa:	d004      	beq.n	8000f06 <PC_CONTROL_RxEventCallback+0x32>
 8000efc:	f001 f99c 	bl	8002238 <getDR16_S2>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d16a      	bne.n	8000fdc <PC_CONTROL_RxEventCallback+0x108>
		mouseY = (int16_t)(((float)mouse_y)*MOUSE_SCALER);
 8000f06:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f1e:	ee17 3a90 	vmov	r3, s15
 8000f22:	b21a      	sxth	r2, r3
 8000f24:	4b2f      	ldr	r3, [pc, #188]	@ (8000fe4 <PC_CONTROL_RxEventCallback+0x110>)
 8000f26:	801a      	strh	r2, [r3, #0]
		mouseX = (int16_t)(((float)mouse_x)*MOUSE_SCALER);
 8000f28:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f2c:	ee07 3a90 	vmov	s15, r3
 8000f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000f40:	ee17 3a90 	vmov	r3, s15
 8000f44:	b21a      	sxth	r2, r3
 8000f46:	4b28      	ldr	r3, [pc, #160]	@ (8000fe8 <PC_CONTROL_RxEventCallback+0x114>)
 8000f48:	801a      	strh	r2, [r3, #0]
		CAL_MouseZ = mouse_z;
 8000f4a:	887b      	ldrh	r3, [r7, #2]
 8000f4c:	b2da      	uxtb	r2, r3
 8000f4e:	4b27      	ldr	r3, [pc, #156]	@ (8000fec <PC_CONTROL_RxEventCallback+0x118>)
 8000f50:	701a      	strb	r2, [r3, #0]
		CAL_lb = left_button_down;
 8000f52:	4a27      	ldr	r2, [pc, #156]	@ (8000ff0 <PC_CONTROL_RxEventCallback+0x11c>)
 8000f54:	787b      	ldrb	r3, [r7, #1]
 8000f56:	7013      	strb	r3, [r2, #0]
		CAL_rb = right_button_down;
 8000f58:	4a26      	ldr	r2, [pc, #152]	@ (8000ff4 <PC_CONTROL_RxEventCallback+0x120>)
 8000f5a:	7e3b      	ldrb	r3, [r7, #24]
 8000f5c:	7013      	strb	r3, [r2, #0]
		isWPressed = w;
 8000f5e:	4a26      	ldr	r2, [pc, #152]	@ (8000ff8 <PC_CONTROL_RxEventCallback+0x124>)
 8000f60:	7f3b      	ldrb	r3, [r7, #28]
 8000f62:	7013      	strb	r3, [r2, #0]
		isAPressed = a;
 8000f64:	4a25      	ldr	r2, [pc, #148]	@ (8000ffc <PC_CONTROL_RxEventCallback+0x128>)
 8000f66:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8000f6a:	7013      	strb	r3, [r2, #0]
		isSPressed = s;
 8000f6c:	4a24      	ldr	r2, [pc, #144]	@ (8001000 <PC_CONTROL_RxEventCallback+0x12c>)
 8000f6e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f72:	7013      	strb	r3, [r2, #0]
		isDPressed = d;
 8000f74:	4a23      	ldr	r2, [pc, #140]	@ (8001004 <PC_CONTROL_RxEventCallback+0x130>)
 8000f76:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000f7a:	7013      	strb	r3, [r2, #0]
		CAL_shift = shift;
 8000f7c:	4a22      	ldr	r2, [pc, #136]	@ (8001008 <PC_CONTROL_RxEventCallback+0x134>)
 8000f7e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000f82:	7013      	strb	r3, [r2, #0]
		CAL_ctrl = ctrl;
 8000f84:	4a21      	ldr	r2, [pc, #132]	@ (800100c <PC_CONTROL_RxEventCallback+0x138>)
 8000f86:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8000f8a:	7013      	strb	r3, [r2, #0]
		CAL_q = q;
 8000f8c:	4a20      	ldr	r2, [pc, #128]	@ (8001010 <PC_CONTROL_RxEventCallback+0x13c>)
 8000f8e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8000f92:	7013      	strb	r3, [r2, #0]
		CAL_e = e;
 8000f94:	4a1f      	ldr	r2, [pc, #124]	@ (8001014 <PC_CONTROL_RxEventCallback+0x140>)
 8000f96:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8000f9a:	7013      	strb	r3, [r2, #0]
		CAL_r = r;
 8000f9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001018 <PC_CONTROL_RxEventCallback+0x144>)
 8000f9e:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8000fa2:	7013      	strb	r3, [r2, #0]
		CAL_f = f;
 8000fa4:	4a1d      	ldr	r2, [pc, #116]	@ (800101c <PC_CONTROL_RxEventCallback+0x148>)
 8000fa6:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000faa:	7013      	strb	r3, [r2, #0]
		CAL_g = g;
 8000fac:	4a1c      	ldr	r2, [pc, #112]	@ (8001020 <PC_CONTROL_RxEventCallback+0x14c>)
 8000fae:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000fb2:	7013      	strb	r3, [r2, #0]
		CAL_z = z;
 8000fb4:	4a1b      	ldr	r2, [pc, #108]	@ (8001024 <PC_CONTROL_RxEventCallback+0x150>)
 8000fb6:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000fba:	7013      	strb	r3, [r2, #0]
		CAL_x = x;
 8000fbc:	4a1a      	ldr	r2, [pc, #104]	@ (8001028 <PC_CONTROL_RxEventCallback+0x154>)
 8000fbe:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000fc2:	7013      	strb	r3, [r2, #0]
		CAL_c = c;
 8000fc4:	4a19      	ldr	r2, [pc, #100]	@ (800102c <PC_CONTROL_RxEventCallback+0x158>)
 8000fc6:	f897 3050 	ldrb.w	r3, [r7, #80]	@ 0x50
 8000fca:	7013      	strb	r3, [r2, #0]
		CAL_v = v;
 8000fcc:	4a18      	ldr	r2, [pc, #96]	@ (8001030 <PC_CONTROL_RxEventCallback+0x15c>)
 8000fce:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000fd2:	7013      	strb	r3, [r2, #0]
		CAL_b = b;
 8000fd4:	4a17      	ldr	r2, [pc, #92]	@ (8001034 <PC_CONTROL_RxEventCallback+0x160>)
 8000fd6:	f897 3058 	ldrb.w	r3, [r7, #88]	@ 0x58
 8000fda:	7013      	strb	r3, [r2, #0]
	}
}
 8000fdc:	bf00      	nop
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd90      	pop	{r4, r7, pc}
 8000fe4:	20000112 	.word	0x20000112
 8000fe8:	20000110 	.word	0x20000110
 8000fec:	200000de 	.word	0x200000de
 8000ff0:	200000dc 	.word	0x200000dc
 8000ff4:	200000dd 	.word	0x200000dd
 8000ff8:	20000104 	.word	0x20000104
 8000ffc:	20000105 	.word	0x20000105
 8001000:	20000106 	.word	0x20000106
 8001004:	20000107 	.word	0x20000107
 8001008:	200000d0 	.word	0x200000d0
 800100c:	200000d1 	.word	0x200000d1
 8001010:	200000d2 	.word	0x200000d2
 8001014:	200000d3 	.word	0x200000d3
 8001018:	200000d4 	.word	0x200000d4
 800101c:	200000d5 	.word	0x200000d5
 8001020:	200000d6 	.word	0x200000d6
 8001024:	200000d7 	.word	0x200000d7
 8001028:	200000d8 	.word	0x200000d8
 800102c:	200000d9 	.word	0x200000d9
 8001030:	200000da 	.word	0x200000da
 8001034:	200000db 	.word	0x200000db

08001038 <GAME_STATUS_RxEventCallback>:


void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
 8001038:	b590      	push	{r4, r7, lr}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	4604      	mov	r4, r0
 8001040:	4608      	mov	r0, r1
 8001042:	4611      	mov	r1, r2
 8001044:	461a      	mov	r2, r3
 8001046:	4623      	mov	r3, r4
 8001048:	71fb      	strb	r3, [r7, #7]
 800104a:	4603      	mov	r3, r0
 800104c:	71bb      	strb	r3, [r7, #6]
 800104e:	460b      	mov	r3, r1
 8001050:	717b      	strb	r3, [r7, #5]
 8001052:	4613      	mov	r3, r2
 8001054:	807b      	strh	r3, [r7, #2]
	CAL_game_type = game_type;
 8001056:	79fa      	ldrb	r2, [r7, #7]
 8001058:	4b0c      	ldr	r3, [pc, #48]	@ (800108c <GAME_STATUS_RxEventCallback+0x54>)
 800105a:	701a      	strb	r2, [r3, #0]
	CAL_current_stage = current_stage;
 800105c:	79ba      	ldrb	r2, [r7, #6]
 800105e:	4b0c      	ldr	r3, [pc, #48]	@ (8001090 <GAME_STATUS_RxEventCallback+0x58>)
 8001060:	701a      	strb	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001062:	f107 0308 	add.w	r3, r7, #8
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
	memcpy(&txData[1],&game_type,1);
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[0],&current_stage,1);
 8001070:	79bb      	ldrb	r3, [r7, #6]
 8001072:	723b      	strb	r3, [r7, #8]
	CAN_transmit(bus, CAL_GAME_STATUS,txData);
 8001074:	2002      	movs	r0, #2
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	461a      	mov	r2, r3
 800107c:	f240 2111 	movw	r1, #529	@ 0x211
 8001080:	f000 fab8 	bl	80015f4 <CAN_transmit>
}
 8001084:	bf00      	nop
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	bd90      	pop	{r4, r7, pc}
 800108c:	200000df 	.word	0x200000df
 8001090:	200000e0 	.word	0x200000e0

08001094 <ROBOT_STATUS_RxEventCallback>:

void ROBOT_STATUS_RxEventCallback(uint8_t robot_id, uint8_t robot_level, uint16_t current_HP, uint16_t maximum_HP, uint16_t shooter_barrel_cooling_value, uint16_t shooter_barrel_heat_limit, uint16_t chassis_power_limit, uint8_t power_management_gimbal_output, uint8_t power_management_chassis_output, uint8_t power_management_shooter_output){
 8001094:	b590      	push	{r4, r7, lr}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	4604      	mov	r4, r0
 800109c:	4608      	mov	r0, r1
 800109e:	4611      	mov	r1, r2
 80010a0:	461a      	mov	r2, r3
 80010a2:	4623      	mov	r3, r4
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	4603      	mov	r3, r0
 80010a8:	71bb      	strb	r3, [r7, #6]
 80010aa:	460b      	mov	r3, r1
 80010ac:	80bb      	strh	r3, [r7, #4]
 80010ae:	4613      	mov	r3, r2
 80010b0:	807b      	strh	r3, [r7, #2]
	CAL_robot_id = robot_id;
 80010b2:	79fa      	ldrb	r2, [r7, #7]
 80010b4:	4b14      	ldr	r3, [pc, #80]	@ (8001108 <ROBOT_STATUS_RxEventCallback+0x74>)
 80010b6:	701a      	strb	r2, [r3, #0]
	CAL_robot_level = robot_level;
 80010b8:	79ba      	ldrb	r2, [r7, #6]
 80010ba:	4b14      	ldr	r3, [pc, #80]	@ (800110c <ROBOT_STATUS_RxEventCallback+0x78>)
 80010bc:	701a      	strb	r2, [r3, #0]
	CAL_shooter_barrel_cooling_value = shooter_barrel_cooling_value;
 80010be:	8c3a      	ldrh	r2, [r7, #32]
 80010c0:	4b13      	ldr	r3, [pc, #76]	@ (8001110 <ROBOT_STATUS_RxEventCallback+0x7c>)
 80010c2:	801a      	strh	r2, [r3, #0]
	CAL_shooter_barrel_heat_limit = shooter_barrel_heat_limit;
 80010c4:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80010c6:	4b13      	ldr	r3, [pc, #76]	@ (8001114 <ROBOT_STATUS_RxEventCallback+0x80>)
 80010c8:	801a      	strh	r2, [r3, #0]
	CAL_chassis_power_limit = chassis_power_limit;
 80010ca:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <ROBOT_STATUS_RxEventCallback+0x84>)
 80010ce:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 80010d0:	f107 0308 	add.w	r3, r7, #8
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&robot_id,1);
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	723b      	strb	r3, [r7, #8]
	memcpy(&txData[1],&robot_level,1);
 80010de:	79bb      	ldrb	r3, [r7, #6]
 80010e0:	727b      	strb	r3, [r7, #9]
	memcpy(&txData[2],&shooter_barrel_cooling_value,2);
 80010e2:	8c3b      	ldrh	r3, [r7, #32]
 80010e4:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_barrel_heat_limit,2);
 80010e6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80010e8:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&chassis_power_limit,2);
 80010ea:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010ec:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_ROBOT_STATUS,txData);
 80010ee:	2002      	movs	r0, #2
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	461a      	mov	r2, r3
 80010f6:	f240 2112 	movw	r1, #530	@ 0x212
 80010fa:	f000 fa7b 	bl	80015f4 <CAN_transmit>
}
 80010fe:	bf00      	nop
 8001100:	3714      	adds	r7, #20
 8001102:	46bd      	mov	sp, r7
 8001104:	bd90      	pop	{r4, r7, pc}
 8001106:	bf00      	nop
 8001108:	200000ea 	.word	0x200000ea
 800110c:	200000eb 	.word	0x200000eb
 8001110:	200000ec 	.word	0x200000ec
 8001114:	200000f0 	.word	0x200000f0
 8001118:	200000ee 	.word	0x200000ee

0800111c <POWER_HEAT_DATA_RxEventCallback>:

void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
 800111c:	b590      	push	{r4, r7, lr}
 800111e:	b085      	sub	sp, #20
 8001120:	af00      	add	r7, sp, #0
 8001122:	4604      	mov	r4, r0
 8001124:	4608      	mov	r0, r1
 8001126:	4611      	mov	r1, r2
 8001128:	461a      	mov	r2, r3
 800112a:	4623      	mov	r3, r4
 800112c:	80fb      	strh	r3, [r7, #6]
 800112e:	4603      	mov	r3, r0
 8001130:	80bb      	strh	r3, [r7, #4]
 8001132:	460b      	mov	r3, r1
 8001134:	807b      	strh	r3, [r7, #2]
 8001136:	4613      	mov	r3, r2
 8001138:	803b      	strh	r3, [r7, #0]
	CAL_buffer_energy = buffer_energy;
 800113a:	88fa      	ldrh	r2, [r7, #6]
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <POWER_HEAT_DATA_RxEventCallback+0x68>)
 800113e:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_1_barrel_heat = shooter_17mm_1_barrel_heat;
 8001140:	88ba      	ldrh	r2, [r7, #4]
 8001142:	4b11      	ldr	r3, [pc, #68]	@ (8001188 <POWER_HEAT_DATA_RxEventCallback+0x6c>)
 8001144:	801a      	strh	r2, [r3, #0]
	CAL_shooter_17mm_2_barrel_heat = shooter_17mm_2_barrel_heat;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	4b10      	ldr	r3, [pc, #64]	@ (800118c <POWER_HEAT_DATA_RxEventCallback+0x70>)
 800114a:	801a      	strh	r2, [r3, #0]
	CAL_shooter_42mm_barrel_heat = shooter_42mm_barrel_heat;
 800114c:	883a      	ldrh	r2, [r7, #0]
 800114e:	4b10      	ldr	r3, [pc, #64]	@ (8001190 <POWER_HEAT_DATA_RxEventCallback+0x74>)
 8001150:	801a      	strh	r2, [r3, #0]

	uint8_t txData[8] = {0};
 8001152:	f107 0308 	add.w	r3, r7, #8
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
	memcpy(&txData[0],&buffer_energy,2);
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	813b      	strh	r3, [r7, #8]
	memcpy(&txData[2],&shooter_17mm_1_barrel_heat,2);
 8001160:	88bb      	ldrh	r3, [r7, #4]
 8001162:	817b      	strh	r3, [r7, #10]
	memcpy(&txData[4],&shooter_17mm_2_barrel_heat,2);
 8001164:	887b      	ldrh	r3, [r7, #2]
 8001166:	81bb      	strh	r3, [r7, #12]
	memcpy(&txData[6],&shooter_42mm_barrel_heat,2);
 8001168:	883b      	ldrh	r3, [r7, #0]
 800116a:	81fb      	strh	r3, [r7, #14]
	CAN_transmit(bus, CAL_POWER_HEAT_DATA,txData);
 800116c:	2002      	movs	r0, #2
 800116e:	f107 0308 	add.w	r3, r7, #8
 8001172:	461a      	mov	r2, r3
 8001174:	f240 2113 	movw	r1, #531	@ 0x213
 8001178:	f000 fa3c 	bl	80015f4 <CAN_transmit>
}
 800117c:	bf00      	nop
 800117e:	3714      	adds	r7, #20
 8001180:	46bd      	mov	sp, r7
 8001182:	bd90      	pop	{r4, r7, pc}
 8001184:	200000e2 	.word	0x200000e2
 8001188:	200000e4 	.word	0x200000e4
 800118c:	200000e6 	.word	0x200000e6
 8001190:	200000e8 	.word	0x200000e8

08001194 <CAN_RxEventCallbackPT>:



void CAN_RxEventCallbackPT(uint32_t StdId, uint8_t rxData[8]){
 8001194:	b590      	push	{r4, r7, lr}
 8001196:	b089      	sub	sp, #36	@ 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
	switch(StdId){
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 80011a4:	2b03      	cmp	r3, #3
 80011a6:	f200 8117 	bhi.w	80013d8 <CAN_RxEventCallbackPT+0x244>
 80011aa:	a201      	add	r2, pc, #4	@ (adr r2, 80011b0 <CAN_RxEventCallbackPT+0x1c>)
 80011ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011b0:	080011c1 	.word	0x080011c1
 80011b4:	080011d5 	.word	0x080011d5
 80011b8:	0800120d 	.word	0x0800120d
 80011bc:	0800123d 	.word	0x0800123d
		case(CAL_GAME_STATUS):{
			memcpy(&CAL_game_type,&rxData[0],1);
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	781a      	ldrb	r2, [r3, #0]
 80011c4:	4b87      	ldr	r3, [pc, #540]	@ (80013e4 <CAN_RxEventCallbackPT+0x250>)
 80011c6:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_current_stage,&rxData[1],1);
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	3301      	adds	r3, #1
 80011cc:	781a      	ldrb	r2, [r3, #0]
 80011ce:	4b86      	ldr	r3, [pc, #536]	@ (80013e8 <CAN_RxEventCallbackPT+0x254>)
 80011d0:	701a      	strb	r2, [r3, #0]
			break;
 80011d2:	e102      	b.n	80013da <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_ROBOT_STATUS):{
			memcpy(&CAL_robot_id,&rxData[0],1);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b84      	ldr	r3, [pc, #528]	@ (80013ec <CAN_RxEventCallbackPT+0x258>)
 80011da:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_robot_level,&rxData[1],1);
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	3301      	adds	r3, #1
 80011e0:	781a      	ldrb	r2, [r3, #0]
 80011e2:	4b83      	ldr	r3, [pc, #524]	@ (80013f0 <CAN_RxEventCallbackPT+0x25c>)
 80011e4:	701a      	strb	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_cooling_value,&rxData[2],2);
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	3302      	adds	r3, #2
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	4b81      	ldr	r3, [pc, #516]	@ (80013f4 <CAN_RxEventCallbackPT+0x260>)
 80011f0:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_barrel_heat_limit,&rxData[4],2);
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	3304      	adds	r3, #4
 80011f6:	881b      	ldrh	r3, [r3, #0]
 80011f8:	b29a      	uxth	r2, r3
 80011fa:	4b7f      	ldr	r3, [pc, #508]	@ (80013f8 <CAN_RxEventCallbackPT+0x264>)
 80011fc:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_chassis_power_limit,&rxData[6],2);
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	3306      	adds	r3, #6
 8001202:	881b      	ldrh	r3, [r3, #0]
 8001204:	b29a      	uxth	r2, r3
 8001206:	4b7d      	ldr	r3, [pc, #500]	@ (80013fc <CAN_RxEventCallbackPT+0x268>)
 8001208:	801a      	strh	r2, [r3, #0]
			break;
 800120a:	e0e6      	b.n	80013da <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_POWER_HEAT_DATA):{
			memcpy(&CAL_buffer_energy,&rxData[0],2);
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b7b      	ldr	r3, [pc, #492]	@ (8001400 <CAN_RxEventCallbackPT+0x26c>)
 8001214:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_1_barrel_heat,&rxData[2],2);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	3302      	adds	r3, #2
 800121a:	881b      	ldrh	r3, [r3, #0]
 800121c:	b29a      	uxth	r2, r3
 800121e:	4b79      	ldr	r3, [pc, #484]	@ (8001404 <CAN_RxEventCallbackPT+0x270>)
 8001220:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_17mm_2_barrel_heat,&rxData[4],2);
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	3304      	adds	r3, #4
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	b29a      	uxth	r2, r3
 800122a:	4b77      	ldr	r3, [pc, #476]	@ (8001408 <CAN_RxEventCallbackPT+0x274>)
 800122c:	801a      	strh	r2, [r3, #0]
			memcpy(&CAL_shooter_42mm_barrel_heat,&rxData[6],2);
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	3306      	adds	r3, #6
 8001232:	881b      	ldrh	r3, [r3, #0]
 8001234:	b29a      	uxth	r2, r3
 8001236:	4b75      	ldr	r3, [pc, #468]	@ (800140c <CAN_RxEventCallbackPT+0x278>)
 8001238:	801a      	strh	r2, [r3, #0]
			break;
 800123a:	e0ce      	b.n	80013da <CAN_RxEventCallbackPT+0x246>
		}
		case(CAL_CHASSIS_CONTROL_DATA):{

			uint8_t frontBackBuff[2] = {0};
 800123c:	2300      	movs	r3, #0
 800123e:	83bb      	strh	r3, [r7, #28]
			frontBackBuff[0] = rxData[0];
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	773b      	strb	r3, [r7, #28]
			frontBackBuff[1] = CAL_getBits(rxData[1],0,4);
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	3301      	adds	r3, #1
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2204      	movs	r2, #4
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f000 f8eb 	bl	800142c <CAL_getBits>
 8001256:	4603      	mov	r3, r0
 8001258:	777b      	strb	r3, [r7, #29]
			memcpy(&CAL_FrontBack,frontBackBuff,2);
 800125a:	8bba      	ldrh	r2, [r7, #28]
 800125c:	4b6c      	ldr	r3, [pc, #432]	@ (8001410 <CAN_RxEventCallbackPT+0x27c>)
 800125e:	801a      	strh	r2, [r3, #0]
			CAL_FrontBack = CAL_FrontBack - 2047;
 8001260:	4b6b      	ldr	r3, [pc, #428]	@ (8001410 <CAN_RxEventCallbackPT+0x27c>)
 8001262:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001266:	b29b      	uxth	r3, r3
 8001268:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 800126c:	b29b      	uxth	r3, r3
 800126e:	b21a      	sxth	r2, r3
 8001270:	4b67      	ldr	r3, [pc, #412]	@ (8001410 <CAN_RxEventCallbackPT+0x27c>)
 8001272:	801a      	strh	r2, [r3, #0]

			uint8_t rightLeftBuff[2] = {0};
 8001274:	2300      	movs	r3, #0
 8001276:	833b      	strh	r3, [r7, #24]
			rightLeftBuff[0] = CAL_getBits(rxData[1],4,4)|(CAL_getBits(rxData[2],0,4)<<4);
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	3301      	adds	r3, #1
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2204      	movs	r2, #4
 8001280:	2104      	movs	r1, #4
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f8d2 	bl	800142c <CAL_getBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b25c      	sxtb	r4, r3
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	3302      	adds	r3, #2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2204      	movs	r2, #4
 8001294:	2100      	movs	r1, #0
 8001296:	4618      	mov	r0, r3
 8001298:	f000 f8c8 	bl	800142c <CAL_getBits>
 800129c:	4603      	mov	r3, r0
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	011b      	lsls	r3, r3, #4
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	4323      	orrs	r3, r4
 80012a6:	b25b      	sxtb	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	763b      	strb	r3, [r7, #24]
			rightLeftBuff[1] = CAL_getBits(rxData[2],4,4);
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	3302      	adds	r3, #2
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2204      	movs	r2, #4
 80012b4:	2104      	movs	r1, #4
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f8b8 	bl	800142c <CAL_getBits>
 80012bc:	4603      	mov	r3, r0
 80012be:	767b      	strb	r3, [r7, #25]
			memcpy(&CAL_RightLeft,rightLeftBuff,2);
 80012c0:	8b3a      	ldrh	r2, [r7, #24]
 80012c2:	4b54      	ldr	r3, [pc, #336]	@ (8001414 <CAN_RxEventCallbackPT+0x280>)
 80012c4:	801a      	strh	r2, [r3, #0]
			CAL_RightLeft = CAL_RightLeft - 2047;
 80012c6:	4b53      	ldr	r3, [pc, #332]	@ (8001414 <CAN_RxEventCallbackPT+0x280>)
 80012c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 80012d2:	b29b      	uxth	r3, r3
 80012d4:	b21a      	sxth	r2, r3
 80012d6:	4b4f      	ldr	r3, [pc, #316]	@ (8001414 <CAN_RxEventCallbackPT+0x280>)
 80012d8:	801a      	strh	r2, [r3, #0]

			uint8_t chassisSpinBuff[2] = {0};
 80012da:	2300      	movs	r3, #0
 80012dc:	82bb      	strh	r3, [r7, #20]
			chassisSpinBuff[0] = rxData[3];
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	78db      	ldrb	r3, [r3, #3]
 80012e2:	753b      	strb	r3, [r7, #20]
			chassisSpinBuff[1] = CAL_getBits(rxData[4],0,4);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	2204      	movs	r2, #4
 80012ec:	2100      	movs	r1, #0
 80012ee:	4618      	mov	r0, r3
 80012f0:	f000 f89c 	bl	800142c <CAL_getBits>
 80012f4:	4603      	mov	r3, r0
 80012f6:	757b      	strb	r3, [r7, #21]
			memcpy(&CAL_ChassisSpin,chassisSpinBuff,2);
 80012f8:	8aba      	ldrh	r2, [r7, #20]
 80012fa:	4b47      	ldr	r3, [pc, #284]	@ (8001418 <CAN_RxEventCallbackPT+0x284>)
 80012fc:	801a      	strh	r2, [r3, #0]
			CAL_ChassisSpin = CAL_ChassisSpin - 2047;
 80012fe:	4b46      	ldr	r3, [pc, #280]	@ (8001418 <CAN_RxEventCallbackPT+0x284>)
 8001300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001304:	b29b      	uxth	r3, r3
 8001306:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 800130a:	b29b      	uxth	r3, r3
 800130c:	b21a      	sxth	r2, r3
 800130e:	4b42      	ldr	r3, [pc, #264]	@ (8001418 <CAN_RxEventCallbackPT+0x284>)
 8001310:	801a      	strh	r2, [r3, #0]

			uint8_t turretSpinBuff[2] = {0};
 8001312:	2300      	movs	r3, #0
 8001314:	823b      	strh	r3, [r7, #16]
			turretSpinBuff[0] = CAL_getBits(rxData[4],4,4)|(CAL_getBits(rxData[5],0,4)<<4);
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	3304      	adds	r3, #4
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2204      	movs	r2, #4
 800131e:	2104      	movs	r1, #4
 8001320:	4618      	mov	r0, r3
 8001322:	f000 f883 	bl	800142c <CAL_getBits>
 8001326:	4603      	mov	r3, r0
 8001328:	b25c      	sxtb	r4, r3
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	3305      	adds	r3, #5
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	2204      	movs	r2, #4
 8001332:	2100      	movs	r1, #0
 8001334:	4618      	mov	r0, r3
 8001336:	f000 f879 	bl	800142c <CAL_getBits>
 800133a:	4603      	mov	r3, r0
 800133c:	b25b      	sxtb	r3, r3
 800133e:	011b      	lsls	r3, r3, #4
 8001340:	b25b      	sxtb	r3, r3
 8001342:	4323      	orrs	r3, r4
 8001344:	b25b      	sxtb	r3, r3
 8001346:	b2db      	uxtb	r3, r3
 8001348:	743b      	strb	r3, [r7, #16]
			turretSpinBuff[1] = CAL_getBits(rxData[5],4,4);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	3305      	adds	r3, #5
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2204      	movs	r2, #4
 8001352:	2104      	movs	r1, #4
 8001354:	4618      	mov	r0, r3
 8001356:	f000 f869 	bl	800142c <CAL_getBits>
 800135a:	4603      	mov	r3, r0
 800135c:	747b      	strb	r3, [r7, #17]
			memcpy(&CAL_TurretSpin,turretSpinBuff,2);
 800135e:	8a3a      	ldrh	r2, [r7, #16]
 8001360:	4b2e      	ldr	r3, [pc, #184]	@ (800141c <CAN_RxEventCallbackPT+0x288>)
 8001362:	801a      	strh	r2, [r3, #0]
			CAL_TurretSpin = CAL_TurretSpin;
 8001364:	4b2d      	ldr	r3, [pc, #180]	@ (800141c <CAN_RxEventCallbackPT+0x288>)
 8001366:	f9b3 2000 	ldrsh.w	r2, [r3]
 800136a:	4b2c      	ldr	r3, [pc, #176]	@ (800141c <CAN_RxEventCallbackPT+0x288>)
 800136c:	801a      	strh	r2, [r3, #0]

			uint8_t currentGyroBuff[2] = {0};
 800136e:	2300      	movs	r3, #0
 8001370:	81bb      	strh	r3, [r7, #12]
			currentGyroBuff[0] = rxData[6];
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	799b      	ldrb	r3, [r3, #6]
 8001376:	733b      	strb	r3, [r7, #12]
			currentGyroBuff[1] = CAL_getBits(rxData[7],0,4);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	3307      	adds	r3, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2204      	movs	r2, #4
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f852 	bl	800142c <CAL_getBits>
 8001388:	4603      	mov	r3, r0
 800138a:	737b      	strb	r3, [r7, #13]
			memcpy(&CAL_CurrentGyro,currentGyroBuff,2);
 800138c:	89ba      	ldrh	r2, [r7, #12]
 800138e:	4b24      	ldr	r3, [pc, #144]	@ (8001420 <CAN_RxEventCallbackPT+0x28c>)
 8001390:	801a      	strh	r2, [r3, #0]
			CAL_CurrentGyro = CAL_CurrentGyro - 2047;
 8001392:	4b23      	ldr	r3, [pc, #140]	@ (8001420 <CAN_RxEventCallbackPT+0x28c>)
 8001394:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001398:	b29b      	uxth	r3, r3
 800139a:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 800139e:	b29b      	uxth	r3, r3
 80013a0:	b21a      	sxth	r2, r3
 80013a2:	4b1f      	ldr	r3, [pc, #124]	@ (8001420 <CAN_RxEventCallbackPT+0x28c>)
 80013a4:	801a      	strh	r2, [r3, #0]

			CAL_TriggerPressed = CAL_getBits(rxData[7],4,1);
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	3307      	adds	r3, #7
 80013aa:	781b      	ldrb	r3, [r3, #0]
 80013ac:	2201      	movs	r2, #1
 80013ae:	2104      	movs	r1, #4
 80013b0:	4618      	mov	r0, r3
 80013b2:	f000 f83b 	bl	800142c <CAL_getBits>
 80013b6:	4603      	mov	r3, r0
 80013b8:	461a      	mov	r2, r3
 80013ba:	4b1a      	ldr	r3, [pc, #104]	@ (8001424 <CAN_RxEventCallbackPT+0x290>)
 80013bc:	701a      	strb	r2, [r3, #0]
			CAL_FireMode = CAL_getBits(rxData[7],5,3);
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	3307      	adds	r3, #7
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	2203      	movs	r2, #3
 80013c6:	2105      	movs	r1, #5
 80013c8:	4618      	mov	r0, r3
 80013ca:	f000 f82f 	bl	800142c <CAL_getBits>
 80013ce:	4603      	mov	r3, r0
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b15      	ldr	r3, [pc, #84]	@ (8001428 <CAN_RxEventCallbackPT+0x294>)
 80013d4:	701a      	strb	r2, [r3, #0]
			break;
 80013d6:	e000      	b.n	80013da <CAN_RxEventCallbackPT+0x246>
		}
		default:{

			break;
 80013d8:	bf00      	nop
		}
	}
}
 80013da:	bf00      	nop
 80013dc:	3724      	adds	r7, #36	@ 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200000df 	.word	0x200000df
 80013e8:	200000e0 	.word	0x200000e0
 80013ec:	200000ea 	.word	0x200000ea
 80013f0:	200000eb 	.word	0x200000eb
 80013f4:	200000ec 	.word	0x200000ec
 80013f8:	200000f0 	.word	0x200000f0
 80013fc:	200000ee 	.word	0x200000ee
 8001400:	200000e2 	.word	0x200000e2
 8001404:	200000e4 	.word	0x200000e4
 8001408:	200000e6 	.word	0x200000e6
 800140c:	200000e8 	.word	0x200000e8
 8001410:	200000f8 	.word	0x200000f8
 8001414:	200000fa 	.word	0x200000fa
 8001418:	200000fc 	.word	0x200000fc
 800141c:	200000fe 	.word	0x200000fe
 8001420:	20000100 	.word	0x20000100
 8001424:	20000102 	.word	0x20000102
 8001428:	20000103 	.word	0x20000103

0800142c <CAL_getBits>:

	CAN_transmit(Bus2, CAL_CHASSIS_CONTROL_DATA,txData);
}


uint8_t CAL_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 800142c:	b480      	push	{r7}
 800142e:	b085      	sub	sp, #20
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
 8001436:	460b      	mov	r3, r1
 8001438:	71bb      	strb	r3, [r7, #6]
 800143a:	4613      	mov	r3, r2
 800143c:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8001442:	2300      	movs	r3, #0
 8001444:	73bb      	strb	r3, [r7, #14]
 8001446:	e013      	b.n	8001470 <CAL_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8001448:	79fa      	ldrb	r2, [r7, #7]
 800144a:	79b9      	ldrb	r1, [r7, #6]
 800144c:	7bbb      	ldrb	r3, [r7, #14]
 800144e:	440b      	add	r3, r1
 8001450:	fa42 f303 	asr.w	r3, r2, r3
 8001454:	f003 0201 	and.w	r2, r3, #1
 8001458:	7bbb      	ldrb	r3, [r7, #14]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	b25a      	sxtb	r2, r3
 8001460:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001464:	4313      	orrs	r3, r2
 8001466:	b25b      	sxtb	r3, r3
 8001468:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800146a:	7bbb      	ldrb	r3, [r7, #14]
 800146c:	3301      	adds	r3, #1
 800146e:	73bb      	strb	r3, [r7, #14]
 8001470:	7bba      	ldrb	r2, [r7, #14]
 8001472:	797b      	ldrb	r3, [r7, #5]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3e7      	bcc.n	8001448 <CAL_getBits+0x1c>
	}
	return result;
 8001478:	7bfb      	ldrb	r3, [r7, #15]
}
 800147a:	4618      	mov	r0, r3
 800147c:	3714      	adds	r7, #20
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <PROJECTILE_INFO_RxEventCallback>:

void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	ed87 0a00 	vstr	s0, [r7]
 8001494:	71fb      	strb	r3, [r7, #7]
 8001496:	460b      	mov	r3, r1
 8001498:	71bb      	strb	r3, [r7, #6]
 800149a:	4613      	mov	r3, r2
 800149c:	717b      	strb	r3, [r7, #5]
	CAL_initialSpeed = initial_speed;
 800149e:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <PROJECTILE_INFO_RxEventCallback+0x28>)
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	6013      	str	r3, [r2, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	200000f4 	.word	0x200000f4

080014b4 <HAL_CAN_RxFifo0MsgPendingCallback>:
int16_t RCVAL[7] = {0, 0, 0, 0, 0, 0, 0};

//For CAN Debugger
extern UART_HandleTypeDef huart1;

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b08c      	sub	sp, #48	@ 0x30
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];
    HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data);
 80014bc:	f107 0308 	add.w	r3, r7, #8
 80014c0:	f107 0210 	add.w	r2, r7, #16
 80014c4:	2100      	movs	r1, #0
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	f004 fc08 	bl	8005cdc <HAL_CAN_GetRxMessage>
		// UART_Printf(&huart1,"CAN Received-------stdID:   %X    --------DATA: %X,   %X,   %X,   %X,   %X,   %X,   %X,   %X \n", rx_header.StdId,rx_data[0],rx_data[1],rx_data[2],rx_data[3],rx_data[4],rx_data[5],rx_data[6],rx_data[7]);


    // UART_Printf(&huart1, "%X\r\n", rx_header.StdId);

    switch (rx_header.StdId) {
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 80014d2:	2b0a      	cmp	r3, #10
 80014d4:	d87a      	bhi.n	80015cc <HAL_CAN_RxFifo0MsgPendingCallback+0x118>
        case CAN_G2M3_ID:
        case CAN_G2M4_ID:
        case CAN_G3M1_ID:
        case CAN_G3M2_ID:
        case CAN_G3M3_ID: {
            uint8_t i = rx_header.StdId - CAN_G1M1_ID; // get motor id
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	3b01      	subs	r3, #1
 80014dc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            if (hcan == &hcan1) {
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a41      	ldr	r2, [pc, #260]	@ (80015e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x134>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d134      	bne.n	8001552 <HAL_CAN_RxFifo0MsgPendingCallback+0x9e>
                //memcpy(&motorFeedback[0][i].rotor_position, &rx_data[1], 1);
                //memcpy((motorFeedback[0][i].rotor_position + 1), &rx_data[0], 1);
                get_motor_feedback(&motorFeedback[0][i], rx_data);
 80014e8:	7a3b      	ldrb	r3, [r7, #8]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	7a7b      	ldrb	r3, [r7, #9]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014fc:	b291      	uxth	r1, r2
 80014fe:	4a3b      	ldr	r2, [pc, #236]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001500:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001504:	7abb      	ldrb	r3, [r7, #10]
 8001506:	b21b      	sxth	r3, r3
 8001508:	021b      	lsls	r3, r3, #8
 800150a:	b219      	sxth	r1, r3
 800150c:	7afb      	ldrb	r3, [r7, #11]
 800150e:	b21a      	sxth	r2, r3
 8001510:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001514:	430a      	orrs	r2, r1
 8001516:	b211      	sxth	r1, r2
 8001518:	4a34      	ldr	r2, [pc, #208]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800151a:	00db      	lsls	r3, r3, #3
 800151c:	4413      	add	r3, r2
 800151e:	460a      	mov	r2, r1
 8001520:	805a      	strh	r2, [r3, #2]
 8001522:	7b3b      	ldrb	r3, [r7, #12]
 8001524:	b21b      	sxth	r3, r3
 8001526:	021b      	lsls	r3, r3, #8
 8001528:	b219      	sxth	r1, r3
 800152a:	7b7b      	ldrb	r3, [r7, #13]
 800152c:	b21a      	sxth	r2, r3
 800152e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001532:	430a      	orrs	r2, r1
 8001534:	b211      	sxth	r1, r2
 8001536:	4a2d      	ldr	r2, [pc, #180]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001538:	00db      	lsls	r3, r3, #3
 800153a:	4413      	add	r3, r2
 800153c:	460a      	mov	r2, r1
 800153e:	809a      	strh	r2, [r3, #4]
 8001540:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001544:	7bb9      	ldrb	r1, [r7, #14]
 8001546:	4a29      	ldr	r2, [pc, #164]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001548:	00db      	lsls	r3, r3, #3
 800154a:	4413      	add	r3, r2
 800154c:	460a      	mov	r2, r1
 800154e:	719a      	strb	r2, [r3, #6]
            } else if (hcan == &hcan2) {
                //memcpy(&motorFeedback[1][i], &rx_data[0], 8);
                get_motor_feedback(&motorFeedback[1][i], rx_data);
                //usart_printf("%d \r\n", motorFeedback[1][0].rotor_position);
            }
            break;
 8001550:	e044      	b.n	80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
            } else if (hcan == &hcan2) {
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	4a26      	ldr	r2, [pc, #152]	@ (80015f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x13c>)
 8001556:	4293      	cmp	r3, r2
 8001558:	d140      	bne.n	80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
                get_motor_feedback(&motorFeedback[1][i], rx_data);
 800155a:	7a3b      	ldrb	r3, [r7, #8]
 800155c:	b21b      	sxth	r3, r3
 800155e:	021b      	lsls	r3, r3, #8
 8001560:	b21a      	sxth	r2, r3
 8001562:	7a7b      	ldrb	r3, [r7, #9]
 8001564:	b21b      	sxth	r3, r3
 8001566:	4313      	orrs	r3, r2
 8001568:	b21a      	sxth	r2, r3
 800156a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800156e:	b291      	uxth	r1, r2
 8001570:	4a1e      	ldr	r2, [pc, #120]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 8001572:	330b      	adds	r3, #11
 8001574:	f822 1033 	strh.w	r1, [r2, r3, lsl #3]
 8001578:	7abb      	ldrb	r3, [r7, #10]
 800157a:	b21b      	sxth	r3, r3
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	b219      	sxth	r1, r3
 8001580:	7afb      	ldrb	r3, [r7, #11]
 8001582:	b21a      	sxth	r2, r3
 8001584:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001588:	430a      	orrs	r2, r1
 800158a:	b211      	sxth	r1, r2
 800158c:	4a17      	ldr	r2, [pc, #92]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 800158e:	330b      	adds	r3, #11
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	460a      	mov	r2, r1
 8001596:	805a      	strh	r2, [r3, #2]
 8001598:	7b3b      	ldrb	r3, [r7, #12]
 800159a:	b21b      	sxth	r3, r3
 800159c:	021b      	lsls	r3, r3, #8
 800159e:	b219      	sxth	r1, r3
 80015a0:	7b7b      	ldrb	r3, [r7, #13]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015a8:	430a      	orrs	r2, r1
 80015aa:	b211      	sxth	r1, r2
 80015ac:	4a0f      	ldr	r2, [pc, #60]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80015ae:	330b      	adds	r3, #11
 80015b0:	00db      	lsls	r3, r3, #3
 80015b2:	4413      	add	r3, r2
 80015b4:	460a      	mov	r2, r1
 80015b6:	809a      	strh	r2, [r3, #4]
 80015b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80015bc:	7bb9      	ldrb	r1, [r7, #14]
 80015be:	4a0b      	ldr	r2, [pc, #44]	@ (80015ec <HAL_CAN_RxFifo0MsgPendingCallback+0x138>)
 80015c0:	330b      	adds	r3, #11
 80015c2:	00db      	lsls	r3, r3, #3
 80015c4:	4413      	add	r3, r2
 80015c6:	460a      	mov	r2, r1
 80015c8:	719a      	strb	r2, [r3, #6]
            break;
 80015ca:	e007      	b.n	80015dc <HAL_CAN_RxFifo0MsgPendingCallback+0x128>
        }
        default: {
        	CAN_RxEventCallbackPT(rx_header.StdId,rx_data);
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f107 0208 	add.w	r2, r7, #8
 80015d2:	4611      	mov	r1, r2
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fddd 	bl	8001194 <CAN_RxEventCallbackPT>
            break;
 80015da:	e000      	b.n	80015de <HAL_CAN_RxFifo0MsgPendingCallback+0x12a>
            break;
 80015dc:	bf00      	nop
        }
    }
}
 80015de:	bf00      	nop
 80015e0:	3730      	adds	r7, #48	@ 0x30
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000980 	.word	0x20000980
 80015ec:	2000017c 	.word	0x2000017c
 80015f0:	200009a8 	.word	0x200009a8

080015f4 <CAN_transmit>:

// CAN_transmit needs some work, right now it's "CAN1_sendFloats"
void CAN_transmit(CAN_Bus bus, CAN_ID headerID, uint8_t data[8]) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	603a      	str	r2, [r7, #0]
 80015fe:	71fb      	strb	r3, [r7, #7]
 8001600:	460b      	mov	r3, r1
 8001602:	80bb      	strh	r3, [r7, #4]
    uint32_t send_mail_box;
    B2bTransmitHeader.StdId = headerID;
 8001604:	88bb      	ldrh	r3, [r7, #4]
 8001606:	4a11      	ldr	r2, [pc, #68]	@ (800164c <CAN_transmit+0x58>)
 8001608:	6013      	str	r3, [r2, #0]
    B2bTransmitHeader.IDE = CAN_ID_STD;
 800160a:	4b10      	ldr	r3, [pc, #64]	@ (800164c <CAN_transmit+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    B2bTransmitHeader.RTR = CAN_RTR_DATA;
 8001610:	4b0e      	ldr	r3, [pc, #56]	@ (800164c <CAN_transmit+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    B2bTransmitHeader.DLC = 0x08;
 8001616:	4b0d      	ldr	r3, [pc, #52]	@ (800164c <CAN_transmit+0x58>)
 8001618:	2208      	movs	r2, #8
 800161a:	611a      	str	r2, [r3, #16]
    if(bus == 1){
 800161c:	79fb      	ldrb	r3, [r7, #7]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d106      	bne.n	8001630 <CAN_transmit+0x3c>
    	HAL_CAN_AddTxMessage(&CAN_1, &B2bTransmitHeader, data, &send_mail_box);
 8001622:	f107 030c 	add.w	r3, r7, #12
 8001626:	683a      	ldr	r2, [r7, #0]
 8001628:	4908      	ldr	r1, [pc, #32]	@ (800164c <CAN_transmit+0x58>)
 800162a:	4809      	ldr	r0, [pc, #36]	@ (8001650 <CAN_transmit+0x5c>)
 800162c:	f004 fa86 	bl	8005b3c <HAL_CAN_AddTxMessage>
    }
    if(bus == 2){
 8001630:	79fb      	ldrb	r3, [r7, #7]
 8001632:	2b02      	cmp	r3, #2
 8001634:	d106      	bne.n	8001644 <CAN_transmit+0x50>
		HAL_CAN_AddTxMessage(&CAN_2, &B2bTransmitHeader, data, &send_mail_box);
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	683a      	ldr	r2, [r7, #0]
 800163c:	4903      	ldr	r1, [pc, #12]	@ (800164c <CAN_transmit+0x58>)
 800163e:	4805      	ldr	r0, [pc, #20]	@ (8001654 <CAN_transmit+0x60>)
 8001640:	f004 fa7c 	bl	8005b3c <HAL_CAN_AddTxMessage>
	}
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	20000114 	.word	0x20000114
 8001650:	20000980 	.word	0x20000980
 8001654:	200009a8 	.word	0x200009a8

08001658 <CAN_DriveMotor>:
		HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
	} else {      // do nothing
	}
}

void CAN_DriveMotor(CAN_Bus bus, CAN_ID headerID, int16_t m1, int16_t m2, int16_t m3, int16_t m4) {
 8001658:	b590      	push	{r4, r7, lr}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	4604      	mov	r4, r0
 8001660:	4608      	mov	r0, r1
 8001662:	4611      	mov	r1, r2
 8001664:	461a      	mov	r2, r3
 8001666:	4623      	mov	r3, r4
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	4603      	mov	r3, r0
 800166c:	80bb      	strh	r3, [r7, #4]
 800166e:	460b      	mov	r3, r1
 8001670:	807b      	strh	r3, [r7, #2]
 8001672:	4613      	mov	r3, r2
 8001674:	803b      	strh	r3, [r7, #0]
    uint32_t send_mail_box;
    MotorTransmitHeader.StdId = headerID;
 8001676:	88bb      	ldrh	r3, [r7, #4]
 8001678:	4a27      	ldr	r2, [pc, #156]	@ (8001718 <CAN_DriveMotor+0xc0>)
 800167a:	6013      	str	r3, [r2, #0]
    MotorTransmitHeader.IDE = CAN_ID_STD;
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <CAN_DriveMotor+0xc0>)
 800167e:	2200      	movs	r2, #0
 8001680:	609a      	str	r2, [r3, #8]
    MotorTransmitHeader.RTR = CAN_RTR_DATA;
 8001682:	4b25      	ldr	r3, [pc, #148]	@ (8001718 <CAN_DriveMotor+0xc0>)
 8001684:	2200      	movs	r2, #0
 8001686:	60da      	str	r2, [r3, #12]
    MotorTransmitHeader.DLC = 0x08;
 8001688:	4b23      	ldr	r3, [pc, #140]	@ (8001718 <CAN_DriveMotor+0xc0>)
 800168a:	2208      	movs	r2, #8
 800168c:	611a      	str	r2, [r3, #16]
    //memcpy(&CAN_MotorSendBuffer[0], &m1, 2);
    //memcpy(&CAN_MotorSendBuffer[2], &m2, 2);
    //memcpy(&CAN_MotorSendBuffer[4], &m3, 2);
    //memcpy(&CAN_MotorSendBuffer[6], &m4, 2);     // first 8 bits and last 8 bits of each int16_t is flipped, kms
    CAN_MotorSendBuffer[0] = m1 >> 8;
 800168e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001692:	121b      	asrs	r3, r3, #8
 8001694:	b21b      	sxth	r3, r3
 8001696:	b2da      	uxtb	r2, r3
 8001698:	4b20      	ldr	r3, [pc, #128]	@ (800171c <CAN_DriveMotor+0xc4>)
 800169a:	701a      	strb	r2, [r3, #0]
    CAN_MotorSendBuffer[1] = m1;
 800169c:	887b      	ldrh	r3, [r7, #2]
 800169e:	b2da      	uxtb	r2, r3
 80016a0:	4b1e      	ldr	r3, [pc, #120]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016a2:	705a      	strb	r2, [r3, #1]
    CAN_MotorSendBuffer[2] = m2 >> 8;
 80016a4:	f9b7 3000 	ldrsh.w	r3, [r7]
 80016a8:	121b      	asrs	r3, r3, #8
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	b2da      	uxtb	r2, r3
 80016ae:	4b1b      	ldr	r3, [pc, #108]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016b0:	709a      	strb	r2, [r3, #2]
    CAN_MotorSendBuffer[3] = m2;
 80016b2:	883b      	ldrh	r3, [r7, #0]
 80016b4:	b2da      	uxtb	r2, r3
 80016b6:	4b19      	ldr	r3, [pc, #100]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016b8:	70da      	strb	r2, [r3, #3]
    CAN_MotorSendBuffer[4] = m3 >> 8;
 80016ba:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80016be:	121b      	asrs	r3, r3, #8
 80016c0:	b21b      	sxth	r3, r3
 80016c2:	b2da      	uxtb	r2, r3
 80016c4:	4b15      	ldr	r3, [pc, #84]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016c6:	711a      	strb	r2, [r3, #4]
    CAN_MotorSendBuffer[5] = m3;
 80016c8:	8c3b      	ldrh	r3, [r7, #32]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	4b13      	ldr	r3, [pc, #76]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016ce:	715a      	strb	r2, [r3, #5]
    CAN_MotorSendBuffer[6] = m4 >> 8;
 80016d0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 80016d4:	121b      	asrs	r3, r3, #8
 80016d6:	b21b      	sxth	r3, r3
 80016d8:	b2da      	uxtb	r2, r3
 80016da:	4b10      	ldr	r3, [pc, #64]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016dc:	719a      	strb	r2, [r3, #6]
    CAN_MotorSendBuffer[7] = m4;
 80016de:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80016e0:	b2da      	uxtb	r2, r3
 80016e2:	4b0e      	ldr	r3, [pc, #56]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016e4:	71da      	strb	r2, [r3, #7]
    if (bus == 1) {
 80016e6:	79fb      	ldrb	r3, [r7, #7]
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d107      	bne.n	80016fc <CAN_DriveMotor+0xa4>
    	HAL_CAN_AddTxMessage(&CAN_1, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 80016ec:	f107 030c 	add.w	r3, r7, #12
 80016f0:	4a0a      	ldr	r2, [pc, #40]	@ (800171c <CAN_DriveMotor+0xc4>)
 80016f2:	4909      	ldr	r1, [pc, #36]	@ (8001718 <CAN_DriveMotor+0xc0>)
 80016f4:	480a      	ldr	r0, [pc, #40]	@ (8001720 <CAN_DriveMotor+0xc8>)
 80016f6:	f004 fa21 	bl	8005b3c <HAL_CAN_AddTxMessage>
    } else if (bus == 2) {
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
    } else {      // do nothing
    }
}
 80016fa:	e009      	b.n	8001710 <CAN_DriveMotor+0xb8>
    } else if (bus == 2) {
 80016fc:	79fb      	ldrb	r3, [r7, #7]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d106      	bne.n	8001710 <CAN_DriveMotor+0xb8>
    	HAL_CAN_AddTxMessage(&CAN_2, &MotorTransmitHeader, CAN_MotorSendBuffer, &send_mail_box);
 8001702:	f107 030c 	add.w	r3, r7, #12
 8001706:	4a05      	ldr	r2, [pc, #20]	@ (800171c <CAN_DriveMotor+0xc4>)
 8001708:	4903      	ldr	r1, [pc, #12]	@ (8001718 <CAN_DriveMotor+0xc0>)
 800170a:	4806      	ldr	r0, [pc, #24]	@ (8001724 <CAN_DriveMotor+0xcc>)
 800170c:	f004 fa16 	bl	8005b3c <HAL_CAN_AddTxMessage>
}
 8001710:	bf00      	nop
 8001712:	3714      	adds	r7, #20
 8001714:	46bd      	mov	sp, r7
 8001716:	bd90      	pop	{r4, r7, pc}
 8001718:	2000012c 	.word	0x2000012c
 800171c:	20000144 	.word	0x20000144
 8001720:	20000980 	.word	0x20000980
 8001724:	200009a8 	.word	0x200009a8

08001728 <CAN_setMotorCtrlVal>:
	}
}


// Max Power *
void CAN_setMotorCtrlVal(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t ctrlVal) {
 8001728:	b5b0      	push	{r4, r5, r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af02      	add	r7, sp, #8
 800172e:	4604      	mov	r4, r0
 8001730:	4608      	mov	r0, r1
 8001732:	4611      	mov	r1, r2
 8001734:	461a      	mov	r2, r3
 8001736:	4623      	mov	r3, r4
 8001738:	71fb      	strb	r3, [r7, #7]
 800173a:	4603      	mov	r3, r0
 800173c:	71bb      	strb	r3, [r7, #6]
 800173e:	460b      	mov	r3, r1
 8001740:	717b      	strb	r3, [r7, #5]
 8001742:	4613      	mov	r3, r2
 8001744:	807b      	strh	r3, [r7, #2]
	switch(motorType) {
 8001746:	79bb      	ldrb	r3, [r7, #6]
 8001748:	2b04      	cmp	r3, #4
 800174a:	f000 8142 	beq.w	80019d2 <CAN_setMotorCtrlVal+0x2aa>
 800174e:	2b04      	cmp	r3, #4
 8001750:	f300 81e1 	bgt.w	8001b16 <CAN_setMotorCtrlVal+0x3ee>
 8001754:	2b02      	cmp	r3, #2
 8001756:	dc02      	bgt.n	800175e <CAN_setMotorCtrlVal+0x36>
 8001758:	2b00      	cmp	r3, #0
 800175a:	dc04      	bgt.n	8001766 <CAN_setMotorCtrlVal+0x3e>
				}
			}
			break;
		}
	}
}
 800175c:	e1db      	b.n	8001b16 <CAN_setMotorCtrlVal+0x3ee>
	switch(motorType) {
 800175e:	2b03      	cmp	r3, #3
 8001760:	f000 8097 	beq.w	8001892 <CAN_setMotorCtrlVal+0x16a>
}
 8001764:	e1d7      	b.n	8001b16 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001766:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800176a:	2b04      	cmp	r3, #4
 800176c:	dc02      	bgt.n	8001774 <CAN_setMotorCtrlVal+0x4c>
 800176e:	2b00      	cmp	r3, #0
 8001770:	dc05      	bgt.n	800177e <CAN_setMotorCtrlVal+0x56>
					break;
 8001772:	e08c      	b.n	800188e <CAN_setMotorCtrlVal+0x166>
 8001774:	3b05      	subs	r3, #5
			switch(motorID) {
 8001776:	2b03      	cmp	r3, #3
 8001778:	f200 8089 	bhi.w	800188e <CAN_setMotorCtrlVal+0x166>
 800177c:	e042      	b.n	8001804 <CAN_setMotorCtrlVal+0xdc>
					motorControlBuffer[bus - 1].Group1[motorID - 1] = ctrlVal;
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	1e5a      	subs	r2, r3, #1
 8001782:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001786:	1e59      	subs	r1, r3, #1
 8001788:	48bd      	ldr	r0, [pc, #756]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 800178a:	4613      	mov	r3, r2
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	887a      	ldrh	r2, [r7, #2]
 8001796:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP1_ID, motorControlBuffer[bus - 1].Group1[0], motorControlBuffer[bus - 1].Group1[1], motorControlBuffer[bus - 1].Group1[2], motorControlBuffer[bus - 1].Group1[3]);
 800179a:	79fb      	ldrb	r3, [r7, #7]
 800179c:	1e5a      	subs	r2, r3, #1
 800179e:	49b8      	ldr	r1, [pc, #736]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80017a0:	4613      	mov	r3, r2
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	4413      	add	r3, r2
 80017a6:	00db      	lsls	r3, r3, #3
 80017a8:	440b      	add	r3, r1
 80017aa:	f9b3 4000 	ldrsh.w	r4, [r3]
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	1e5a      	subs	r2, r3, #1
 80017b2:	49b3      	ldr	r1, [pc, #716]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	00db      	lsls	r3, r3, #3
 80017bc:	440b      	add	r3, r1
 80017be:	3302      	adds	r3, #2
 80017c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80017c4:	79fb      	ldrb	r3, [r7, #7]
 80017c6:	1e5a      	subs	r2, r3, #1
 80017c8:	49ad      	ldr	r1, [pc, #692]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80017ca:	4613      	mov	r3, r2
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	4413      	add	r3, r2
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	440b      	add	r3, r1
 80017d4:	3304      	adds	r3, #4
 80017d6:	f9b3 1000 	ldrsh.w	r1, [r3]
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	1e5a      	subs	r2, r3, #1
 80017de:	48a8      	ldr	r0, [pc, #672]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80017e0:	4613      	mov	r3, r2
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	4413      	add	r3, r2
 80017e6:	00db      	lsls	r3, r3, #3
 80017e8:	4403      	add	r3, r0
 80017ea:	3306      	adds	r3, #6
 80017ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f0:	79f8      	ldrb	r0, [r7, #7]
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	9100      	str	r1, [sp, #0]
 80017f6:	462b      	mov	r3, r5
 80017f8:	4622      	mov	r2, r4
 80017fa:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80017fe:	f7ff ff2b 	bl	8001658 <CAN_DriveMotor>
					break;
 8001802:	e045      	b.n	8001890 <CAN_setMotorCtrlVal+0x168>
					motorControlBuffer[bus - 1].Group2[motorID - 5] = ctrlVal;
 8001804:	79fb      	ldrb	r3, [r7, #7]
 8001806:	1e5a      	subs	r2, r3, #1
 8001808:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800180c:	1f59      	subs	r1, r3, #5
 800180e:	489c      	ldr	r0, [pc, #624]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001810:	4613      	mov	r3, r2
 8001812:	005b      	lsls	r3, r3, #1
 8001814:	4413      	add	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	440b      	add	r3, r1
 800181a:	3304      	adds	r3, #4
 800181c:	887a      	ldrh	r2, [r7, #2]
 800181e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001822:	79fb      	ldrb	r3, [r7, #7]
 8001824:	1e5a      	subs	r2, r3, #1
 8001826:	4996      	ldr	r1, [pc, #600]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	00db      	lsls	r3, r3, #3
 8001830:	440b      	add	r3, r1
 8001832:	3308      	adds	r3, #8
 8001834:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001838:	79fb      	ldrb	r3, [r7, #7]
 800183a:	1e5a      	subs	r2, r3, #1
 800183c:	4990      	ldr	r1, [pc, #576]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 800183e:	4613      	mov	r3, r2
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	4413      	add	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	440b      	add	r3, r1
 8001848:	330a      	adds	r3, #10
 800184a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	1e5a      	subs	r2, r3, #1
 8001852:	498b      	ldr	r1, [pc, #556]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001854:	4613      	mov	r3, r2
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	330c      	adds	r3, #12
 8001860:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	1e5a      	subs	r2, r3, #1
 8001868:	4885      	ldr	r0, [pc, #532]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 800186a:	4613      	mov	r3, r2
 800186c:	005b      	lsls	r3, r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	4403      	add	r3, r0
 8001874:	330e      	adds	r3, #14
 8001876:	f9b3 3000 	ldrsh.w	r3, [r3]
 800187a:	79f8      	ldrb	r0, [r7, #7]
 800187c:	9301      	str	r3, [sp, #4]
 800187e:	9100      	str	r1, [sp, #0]
 8001880:	462b      	mov	r3, r5
 8001882:	4622      	mov	r2, r4
 8001884:	f240 11ff 	movw	r1, #511	@ 0x1ff
 8001888:	f7ff fee6 	bl	8001658 <CAN_DriveMotor>
					break;
 800188c:	e000      	b.n	8001890 <CAN_setMotorCtrlVal+0x168>
					break;
 800188e:	bf00      	nop
			break;
 8001890:	e141      	b.n	8001b16 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 8001892:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001896:	2b08      	cmp	r3, #8
 8001898:	f000 8097 	beq.w	80019ca <CAN_setMotorCtrlVal+0x2a2>
 800189c:	2b08      	cmp	r3, #8
 800189e:	f300 8096 	bgt.w	80019ce <CAN_setMotorCtrlVal+0x2a6>
 80018a2:	2b04      	cmp	r3, #4
 80018a4:	dc02      	bgt.n	80018ac <CAN_setMotorCtrlVal+0x184>
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	dc05      	bgt.n	80018b6 <CAN_setMotorCtrlVal+0x18e>
					break;
 80018aa:	e090      	b.n	80019ce <CAN_setMotorCtrlVal+0x2a6>
 80018ac:	3b05      	subs	r3, #5
			switch(motorID) {
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	f200 808d 	bhi.w	80019ce <CAN_setMotorCtrlVal+0x2a6>
 80018b4:	e044      	b.n	8001940 <CAN_setMotorCtrlVal+0x218>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80018b6:	79fb      	ldrb	r3, [r7, #7]
 80018b8:	1e5a      	subs	r2, r3, #1
 80018ba:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018be:	1e59      	subs	r1, r3, #1
 80018c0:	486f      	ldr	r0, [pc, #444]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80018c2:	4613      	mov	r3, r2
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	4413      	add	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	440b      	add	r3, r1
 80018cc:	3304      	adds	r3, #4
 80018ce:	887a      	ldrh	r2, [r7, #2]
 80018d0:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 80018d4:	79fb      	ldrb	r3, [r7, #7]
 80018d6:	1e5a      	subs	r2, r3, #1
 80018d8:	4969      	ldr	r1, [pc, #420]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80018da:	4613      	mov	r3, r2
 80018dc:	005b      	lsls	r3, r3, #1
 80018de:	4413      	add	r3, r2
 80018e0:	00db      	lsls	r3, r3, #3
 80018e2:	440b      	add	r3, r1
 80018e4:	3308      	adds	r3, #8
 80018e6:	f9b3 4000 	ldrsh.w	r4, [r3]
 80018ea:	79fb      	ldrb	r3, [r7, #7]
 80018ec:	1e5a      	subs	r2, r3, #1
 80018ee:	4964      	ldr	r1, [pc, #400]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80018f0:	4613      	mov	r3, r2
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	4413      	add	r3, r2
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	440b      	add	r3, r1
 80018fa:	330a      	adds	r3, #10
 80018fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	1e5a      	subs	r2, r3, #1
 8001904:	495e      	ldr	r1, [pc, #376]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001906:	4613      	mov	r3, r2
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	4413      	add	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	440b      	add	r3, r1
 8001910:	330c      	adds	r3, #12
 8001912:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	1e5a      	subs	r2, r3, #1
 800191a:	4859      	ldr	r0, [pc, #356]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 800191c:	4613      	mov	r3, r2
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	4413      	add	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4403      	add	r3, r0
 8001926:	330e      	adds	r3, #14
 8001928:	f9b3 3000 	ldrsh.w	r3, [r3]
 800192c:	79f8      	ldrb	r0, [r7, #7]
 800192e:	9301      	str	r3, [sp, #4]
 8001930:	9100      	str	r1, [sp, #0]
 8001932:	462b      	mov	r3, r5
 8001934:	4622      	mov	r2, r4
 8001936:	f240 11ff 	movw	r1, #511	@ 0x1ff
 800193a:	f7ff fe8d 	bl	8001658 <CAN_DriveMotor>
					break;
 800193e:	e047      	b.n	80019d0 <CAN_setMotorCtrlVal+0x2a8>
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001940:	79fb      	ldrb	r3, [r7, #7]
 8001942:	1e5a      	subs	r2, r3, #1
 8001944:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001948:	1f59      	subs	r1, r3, #5
 800194a:	484d      	ldr	r0, [pc, #308]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 800194c:	4613      	mov	r3, r2
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	3308      	adds	r3, #8
 8001958:	887a      	ldrh	r2, [r7, #2]
 800195a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 800195e:	79fb      	ldrb	r3, [r7, #7]
 8001960:	1e5a      	subs	r2, r3, #1
 8001962:	4947      	ldr	r1, [pc, #284]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001964:	4613      	mov	r3, r2
 8001966:	005b      	lsls	r3, r3, #1
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	440b      	add	r3, r1
 800196e:	3310      	adds	r3, #16
 8001970:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001974:	79fb      	ldrb	r3, [r7, #7]
 8001976:	1e5a      	subs	r2, r3, #1
 8001978:	4941      	ldr	r1, [pc, #260]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 800197a:	4613      	mov	r3, r2
 800197c:	005b      	lsls	r3, r3, #1
 800197e:	4413      	add	r3, r2
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	440b      	add	r3, r1
 8001984:	3312      	adds	r3, #18
 8001986:	f9b3 5000 	ldrsh.w	r5, [r3]
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	1e5a      	subs	r2, r3, #1
 800198e:	493c      	ldr	r1, [pc, #240]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001990:	4613      	mov	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	4413      	add	r3, r2
 8001996:	00db      	lsls	r3, r3, #3
 8001998:	440b      	add	r3, r1
 800199a:	3314      	adds	r3, #20
 800199c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80019a0:	79fb      	ldrb	r3, [r7, #7]
 80019a2:	1e5a      	subs	r2, r3, #1
 80019a4:	4836      	ldr	r0, [pc, #216]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 80019a6:	4613      	mov	r3, r2
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	4413      	add	r3, r2
 80019ac:	00db      	lsls	r3, r3, #3
 80019ae:	4403      	add	r3, r0
 80019b0:	3316      	adds	r3, #22
 80019b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b6:	79f8      	ldrb	r0, [r7, #7]
 80019b8:	9301      	str	r3, [sp, #4]
 80019ba:	9100      	str	r1, [sp, #0]
 80019bc:	462b      	mov	r3, r5
 80019be:	4622      	mov	r2, r4
 80019c0:	f240 21ff 	movw	r1, #767	@ 0x2ff
 80019c4:	f7ff fe48 	bl	8001658 <CAN_DriveMotor>
					break;
 80019c8:	e002      	b.n	80019d0 <CAN_setMotorCtrlVal+0x2a8>
					break;
 80019ca:	bf00      	nop
 80019cc:	e0a3      	b.n	8001b16 <CAN_setMotorCtrlVal+0x3ee>
					break;
 80019ce:	bf00      	nop
			break;
 80019d0:	e0a1      	b.n	8001b16 <CAN_setMotorCtrlVal+0x3ee>
			switch(motorID) {
 80019d2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019d6:	2b08      	cmp	r3, #8
 80019d8:	f000 8099 	beq.w	8001b0e <CAN_setMotorCtrlVal+0x3e6>
 80019dc:	2b08      	cmp	r3, #8
 80019de:	f300 8098 	bgt.w	8001b12 <CAN_setMotorCtrlVal+0x3ea>
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	dc02      	bgt.n	80019ec <CAN_setMotorCtrlVal+0x2c4>
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	dc05      	bgt.n	80019f6 <CAN_setMotorCtrlVal+0x2ce>
					break;
 80019ea:	e092      	b.n	8001b12 <CAN_setMotorCtrlVal+0x3ea>
 80019ec:	3b05      	subs	r3, #5
			switch(motorID) {
 80019ee:	2b02      	cmp	r3, #2
 80019f0:	f200 808f 	bhi.w	8001b12 <CAN_setMotorCtrlVal+0x3ea>
 80019f4:	e046      	b.n	8001a84 <CAN_setMotorCtrlVal+0x35c>
					motorControlBuffer[bus - 1].Group2[motorID - 1] = ctrlVal;
 80019f6:	79fb      	ldrb	r3, [r7, #7]
 80019f8:	1e5a      	subs	r2, r3, #1
 80019fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80019fe:	1e59      	subs	r1, r3, #1
 8001a00:	481f      	ldr	r0, [pc, #124]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001a02:	4613      	mov	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3304      	adds	r3, #4
 8001a0e:	887a      	ldrh	r2, [r7, #2]
 8001a10:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP2_Current_ID, motorControlBuffer[bus - 1].Group2[0], motorControlBuffer[bus - 1].Group2[1], motorControlBuffer[bus - 1].Group2[2], motorControlBuffer[bus - 1].Group2[3]);
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	1e5a      	subs	r2, r3, #1
 8001a18:	4919      	ldr	r1, [pc, #100]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	4413      	add	r3, r2
 8001a20:	00db      	lsls	r3, r3, #3
 8001a22:	440b      	add	r3, r1
 8001a24:	3308      	adds	r3, #8
 8001a26:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001a2a:	79fb      	ldrb	r3, [r7, #7]
 8001a2c:	1e5a      	subs	r2, r3, #1
 8001a2e:	4914      	ldr	r1, [pc, #80]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001a30:	4613      	mov	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	4413      	add	r3, r2
 8001a36:	00db      	lsls	r3, r3, #3
 8001a38:	440b      	add	r3, r1
 8001a3a:	330a      	adds	r3, #10
 8001a3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	1e5a      	subs	r2, r3, #1
 8001a44:	490e      	ldr	r1, [pc, #56]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001a46:	4613      	mov	r3, r2
 8001a48:	005b      	lsls	r3, r3, #1
 8001a4a:	4413      	add	r3, r2
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	330c      	adds	r3, #12
 8001a52:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001a56:	79fb      	ldrb	r3, [r7, #7]
 8001a58:	1e5a      	subs	r2, r3, #1
 8001a5a:	4809      	ldr	r0, [pc, #36]	@ (8001a80 <CAN_setMotorCtrlVal+0x358>)
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	4403      	add	r3, r0
 8001a66:	330e      	adds	r3, #14
 8001a68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a6c:	79f8      	ldrb	r0, [r7, #7]
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	9100      	str	r1, [sp, #0]
 8001a72:	462b      	mov	r3, r5
 8001a74:	4622      	mov	r2, r4
 8001a76:	f44f 71ff 	mov.w	r1, #510	@ 0x1fe
 8001a7a:	f7ff fded 	bl	8001658 <CAN_DriveMotor>
					break;
 8001a7e:	e049      	b.n	8001b14 <CAN_setMotorCtrlVal+0x3ec>
 8001a80:	2000014c 	.word	0x2000014c
					motorControlBuffer[bus - 1].Group3[motorID - 5] = ctrlVal;
 8001a84:	79fb      	ldrb	r3, [r7, #7]
 8001a86:	1e5a      	subs	r2, r3, #1
 8001a88:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001a8c:	1f59      	subs	r1, r3, #5
 8001a8e:	4824      	ldr	r0, [pc, #144]	@ (8001b20 <CAN_setMotorCtrlVal+0x3f8>)
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	440b      	add	r3, r1
 8001a9a:	3308      	adds	r3, #8
 8001a9c:	887a      	ldrh	r2, [r7, #2]
 8001a9e:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
					CAN_DriveMotor(bus, CAN_DJI_GROUP3_Current_ID, motorControlBuffer[bus - 1].Group3[0], motorControlBuffer[bus - 1].Group3[1], motorControlBuffer[bus - 1].Group3[2], motorControlBuffer[bus - 1].Group3[3]);
 8001aa2:	79fb      	ldrb	r3, [r7, #7]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	491e      	ldr	r1, [pc, #120]	@ (8001b20 <CAN_setMotorCtrlVal+0x3f8>)
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	4413      	add	r3, r2
 8001aae:	00db      	lsls	r3, r3, #3
 8001ab0:	440b      	add	r3, r1
 8001ab2:	3310      	adds	r3, #16
 8001ab4:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	1e5a      	subs	r2, r3, #1
 8001abc:	4918      	ldr	r1, [pc, #96]	@ (8001b20 <CAN_setMotorCtrlVal+0x3f8>)
 8001abe:	4613      	mov	r3, r2
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	4413      	add	r3, r2
 8001ac4:	00db      	lsls	r3, r3, #3
 8001ac6:	440b      	add	r3, r1
 8001ac8:	3312      	adds	r3, #18
 8001aca:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ace:	79fb      	ldrb	r3, [r7, #7]
 8001ad0:	1e5a      	subs	r2, r3, #1
 8001ad2:	4913      	ldr	r1, [pc, #76]	@ (8001b20 <CAN_setMotorCtrlVal+0x3f8>)
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	005b      	lsls	r3, r3, #1
 8001ad8:	4413      	add	r3, r2
 8001ada:	00db      	lsls	r3, r3, #3
 8001adc:	440b      	add	r3, r1
 8001ade:	3314      	adds	r3, #20
 8001ae0:	f9b3 1000 	ldrsh.w	r1, [r3]
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	480d      	ldr	r0, [pc, #52]	@ (8001b20 <CAN_setMotorCtrlVal+0x3f8>)
 8001aea:	4613      	mov	r3, r2
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4413      	add	r3, r2
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4403      	add	r3, r0
 8001af4:	3316      	adds	r3, #22
 8001af6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001afa:	79f8      	ldrb	r0, [r7, #7]
 8001afc:	9301      	str	r3, [sp, #4]
 8001afe:	9100      	str	r1, [sp, #0]
 8001b00:	462b      	mov	r3, r5
 8001b02:	4622      	mov	r2, r4
 8001b04:	f240 21fe 	movw	r1, #766	@ 0x2fe
 8001b08:	f7ff fda6 	bl	8001658 <CAN_DriveMotor>
					break;
 8001b0c:	e002      	b.n	8001b14 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8001b0e:	bf00      	nop
 8001b10:	e000      	b.n	8001b14 <CAN_setMotorCtrlVal+0x3ec>
					break;
 8001b12:	bf00      	nop
			break;
 8001b14:	bf00      	nop
}
 8001b16:	bf00      	nop
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bdb0      	pop	{r4, r5, r7, pc}
 8001b1e:	bf00      	nop
 8001b20:	2000014c 	.word	0x2000014c

08001b24 <calcRPM_PID>:

int32_t calcRPM_PID(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001b24:	b590      	push	{r4, r7, lr}
 8001b26:	b08b      	sub	sp, #44	@ 0x2c
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4604      	mov	r4, r0
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	eef0 6a40 	vmov.f32	s13, s0
 8001b36:	eeb0 7a60 	vmov.f32	s14, s1
 8001b3a:	eef0 7a41 	vmov.f32	s15, s2
 8001b3e:	4623      	mov	r3, r4
 8001b40:	75fb      	strb	r3, [r7, #23]
 8001b42:	4603      	mov	r3, r0
 8001b44:	75bb      	strb	r3, [r7, #22]
 8001b46:	460b      	mov	r3, r1
 8001b48:	757b      	strb	r3, [r7, #21]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	827b      	strh	r3, [r7, #18]
 8001b4e:	edc7 6a01 	vstr	s13, [r7, #4]
 8001b52:	ed87 7a02 	vstr	s14, [r7, #8]
 8001b56:	edc7 7a03 	vstr	s15, [r7, #12]
	uint8_t ID;
	int32_t return_val = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	623b      	str	r3, [r7, #32]
	uint8_t busID = bus - 1;
 8001b5e:	7dfb      	ldrb	r3, [r7, #23]
 8001b60:	3b01      	subs	r3, #1
 8001b62:	77fb      	strb	r3, [r7, #31]
	switch(motorType) {
 8001b64:	7dbb      	ldrb	r3, [r7, #22]
 8001b66:	2b02      	cmp	r3, #2
 8001b68:	dc02      	bgt.n	8001b70 <calcRPM_PID+0x4c>
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	dc04      	bgt.n	8001b78 <calcRPM_PID+0x54>
 8001b6e:	e00d      	b.n	8001b8c <calcRPM_PID+0x68>
 8001b70:	3b03      	subs	r3, #3
 8001b72:	2b01      	cmp	r3, #1
 8001b74:	d80a      	bhi.n	8001b8c <calcRPM_PID+0x68>
 8001b76:	e004      	b.n	8001b82 <calcRPM_PID+0x5e>
		case (1):
		case (2): {
			ID = motorID - 1;
 8001b78:	7d7b      	ldrb	r3, [r7, #21]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b80:	e009      	b.n	8001b96 <calcRPM_PID+0x72>
		}
		case (3):
		case (4): {
			ID = motorID + 3;
 8001b82:	7d7b      	ldrb	r3, [r7, #21]
 8001b84:	3303      	adds	r3, #3
 8001b86:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b8a:	e004      	b.n	8001b96 <calcRPM_PID+0x72>
		}
		default: {
			ID = motorID - 1;
 8001b8c:	7d7b      	ldrb	r3, [r7, #21]
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8001b94:	bf00      	nop
		}
	}
	PID_data[busID][ID].pVal = RPMtarget - motorFeedback[busID][ID].speed_rpm;     // update proportional term
 8001b96:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8001b9a:	7ffa      	ldrb	r2, [r7, #31]
 8001b9c:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001ba0:	4c70      	ldr	r4, [pc, #448]	@ (8001d64 <calcRPM_PID+0x240>)
 8001ba2:	4613      	mov	r3, r2
 8001ba4:	009b      	lsls	r3, r3, #2
 8001ba6:	4413      	add	r3, r2
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	4413      	add	r3, r2
 8001bac:	4403      	add	r3, r0
 8001bae:	00db      	lsls	r3, r3, #3
 8001bb0:	4423      	add	r3, r4
 8001bb2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001bb6:	7ffa      	ldrb	r2, [r7, #31]
 8001bb8:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001bbc:	1ac9      	subs	r1, r1, r3
 8001bbe:	4c6a      	ldr	r4, [pc, #424]	@ (8001d68 <calcRPM_PID+0x244>)
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	4413      	add	r3, r2
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	4413      	add	r3, r2
 8001bca:	4403      	add	r3, r0
 8001bcc:	011b      	lsls	r3, r3, #4
 8001bce:	4423      	add	r3, r4
 8001bd0:	3304      	adds	r3, #4
 8001bd2:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].iVal += PID_data[busID][ID].pVal;                                                         // add to integral term
 8001bd4:	7ffa      	ldrb	r2, [r7, #31]
 8001bd6:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001bda:	4863      	ldr	r0, [pc, #396]	@ (8001d68 <calcRPM_PID+0x244>)
 8001bdc:	4613      	mov	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	4413      	add	r3, r2
 8001be2:	005b      	lsls	r3, r3, #1
 8001be4:	4413      	add	r3, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4403      	add	r3, r0
 8001bec:	3308      	adds	r3, #8
 8001bee:	6819      	ldr	r1, [r3, #0]
 8001bf0:	7ffa      	ldrb	r2, [r7, #31]
 8001bf2:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001bf6:	4c5c      	ldr	r4, [pc, #368]	@ (8001d68 <calcRPM_PID+0x244>)
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	4413      	add	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	4403      	add	r3, r0
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	4423      	add	r3, r4
 8001c08:	3304      	adds	r3, #4
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	7ffa      	ldrb	r2, [r7, #31]
 8001c0e:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c12:	4419      	add	r1, r3
 8001c14:	4c54      	ldr	r4, [pc, #336]	@ (8001d68 <calcRPM_PID+0x244>)
 8001c16:	4613      	mov	r3, r2
 8001c18:	009b      	lsls	r3, r3, #2
 8001c1a:	4413      	add	r3, r2
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	4413      	add	r3, r2
 8001c20:	4403      	add	r3, r0
 8001c22:	011b      	lsls	r3, r3, #4
 8001c24:	4423      	add	r3, r4
 8001c26:	3308      	adds	r3, #8
 8001c28:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].dVal = PID_data[busID][ID].lastVal - motorFeedback[busID][ID].speed_rpm;       // update derivative term
 8001c2a:	7ffa      	ldrb	r2, [r7, #31]
 8001c2c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001c30:	484d      	ldr	r0, [pc, #308]	@ (8001d68 <calcRPM_PID+0x244>)
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	4413      	add	r3, r2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	4403      	add	r3, r0
 8001c42:	6819      	ldr	r1, [r3, #0]
 8001c44:	7ffa      	ldrb	r2, [r7, #31]
 8001c46:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c4a:	4c46      	ldr	r4, [pc, #280]	@ (8001d64 <calcRPM_PID+0x240>)
 8001c4c:	4613      	mov	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	4413      	add	r3, r2
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	4413      	add	r3, r2
 8001c56:	4403      	add	r3, r0
 8001c58:	00db      	lsls	r3, r3, #3
 8001c5a:	4423      	add	r3, r4
 8001c5c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c60:	7ffa      	ldrb	r2, [r7, #31]
 8001c62:	f897 0027 	ldrb.w	r0, [r7, #39]	@ 0x27
 8001c66:	1ac9      	subs	r1, r1, r3
 8001c68:	4c3f      	ldr	r4, [pc, #252]	@ (8001d68 <calcRPM_PID+0x244>)
 8001c6a:	4613      	mov	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	4413      	add	r3, r2
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	4413      	add	r3, r2
 8001c74:	4403      	add	r3, r0
 8001c76:	011b      	lsls	r3, r3, #4
 8001c78:	4423      	add	r3, r4
 8001c7a:	330c      	adds	r3, #12
 8001c7c:	6019      	str	r1, [r3, #0]
	PID_data[busID][ID].lastVal = motorFeedback[busID][ID].speed_rpm;                        // save the current RPM to be used in the next cycle
 8001c7e:	7ffa      	ldrb	r2, [r7, #31]
 8001c80:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001c84:	4837      	ldr	r0, [pc, #220]	@ (8001d64 <calcRPM_PID+0x240>)
 8001c86:	4613      	mov	r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	4413      	add	r3, r2
 8001c8c:	005b      	lsls	r3, r3, #1
 8001c8e:	4413      	add	r3, r2
 8001c90:	440b      	add	r3, r1
 8001c92:	00db      	lsls	r3, r3, #3
 8001c94:	4403      	add	r3, r0
 8001c96:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001c9a:	7ffa      	ldrb	r2, [r7, #31]
 8001c9c:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001ca0:	461c      	mov	r4, r3
 8001ca2:	4831      	ldr	r0, [pc, #196]	@ (8001d68 <calcRPM_PID+0x244>)
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	009b      	lsls	r3, r3, #2
 8001ca8:	4413      	add	r3, r2
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	4413      	add	r3, r2
 8001cae:	440b      	add	r3, r1
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	4403      	add	r3, r0
 8001cb4:	601c      	str	r4, [r3, #0]
	return_val = (preset.kP * PID_data[busID][ID].pVal) + (preset.kI * PID_data[busID][ID].iVal) + (preset.kD * PID_data[busID][ID].dVal);     // calculates PID result
 8001cb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8001cba:	7ffa      	ldrb	r2, [r7, #31]
 8001cbc:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001cc0:	4829      	ldr	r0, [pc, #164]	@ (8001d68 <calcRPM_PID+0x244>)
 8001cc2:	4613      	mov	r3, r2
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	4413      	add	r3, r2
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	4413      	add	r3, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	011b      	lsls	r3, r3, #4
 8001cd0:	4403      	add	r3, r0
 8001cd2:	3304      	adds	r3, #4
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	ee07 3a90 	vmov	s15, r3
 8001cda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ce2:	edd7 6a02 	vldr	s13, [r7, #8]
 8001ce6:	7ffa      	ldrb	r2, [r7, #31]
 8001ce8:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001cec:	481e      	ldr	r0, [pc, #120]	@ (8001d68 <calcRPM_PID+0x244>)
 8001cee:	4613      	mov	r3, r2
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	4413      	add	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	440b      	add	r3, r1
 8001cfa:	011b      	lsls	r3, r3, #4
 8001cfc:	4403      	add	r3, r0
 8001cfe:	3308      	adds	r3, #8
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	ee07 3a90 	vmov	s15, r3
 8001d06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d12:	edd7 6a03 	vldr	s13, [r7, #12]
 8001d16:	7ffa      	ldrb	r2, [r7, #31]
 8001d18:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8001d1c:	4812      	ldr	r0, [pc, #72]	@ (8001d68 <calcRPM_PID+0x244>)
 8001d1e:	4613      	mov	r3, r2
 8001d20:	009b      	lsls	r3, r3, #2
 8001d22:	4413      	add	r3, r2
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	4413      	add	r3, r2
 8001d28:	440b      	add	r3, r1
 8001d2a:	011b      	lsls	r3, r3, #4
 8001d2c:	4403      	add	r3, r0
 8001d2e:	330c      	adds	r3, #12
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	ee07 3a90 	vmov	s15, r3
 8001d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d46:	ee17 3a90 	vmov	r3, s15
 8001d4a:	623b      	str	r3, [r7, #32]
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
 8001d4c:	7dbb      	ldrb	r3, [r7, #22]
 8001d4e:	6a39      	ldr	r1, [r7, #32]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f000 f80b 	bl	8001d6c <applyCtrlLimit>
 8001d56:	6238      	str	r0, [r7, #32]
	// I think this works, but what should the min/max values be for the I term to reset, if it is needed at all?
	return return_val;
 8001d58:	6a3b      	ldr	r3, [r7, #32]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	372c      	adds	r7, #44	@ 0x2c
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bd90      	pop	{r4, r7, pc}
 8001d62:	bf00      	nop
 8001d64:	2000017c 	.word	0x2000017c
 8001d68:	2000022c 	.word	0x2000022c

08001d6c <applyCtrlLimit>:
	return_val = applyCtrlLimit(motorType, return_val);           // applies min/max limits to the final control value
	//usart_printf("ch1: %d\r\n", return_val);
	return return_val;
}

int32_t applyCtrlLimit(MotorType_ID motorType, int32_t val) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	71fb      	strb	r3, [r7, #7]
	switch (motorType) {
 8001d78:	79fb      	ldrb	r3, [r7, #7]
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	d009      	beq.n	8001d92 <applyCtrlLimit+0x26>
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	dc29      	bgt.n	8001dd6 <applyCtrlLimit+0x6a>
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	dc02      	bgt.n	8001d8c <applyCtrlLimit+0x20>
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dc03      	bgt.n	8001d92 <applyCtrlLimit+0x26>
 8001d8a:	e024      	b.n	8001dd6 <applyCtrlLimit+0x6a>
 8001d8c:	2b03      	cmp	r3, #3
 8001d8e:	d00f      	beq.n	8001db0 <applyCtrlLimit+0x44>
 8001d90:	e021      	b.n	8001dd6 <applyCtrlLimit+0x6a>
		case (1):
		case (2):
		case (4): {
			if (val > 16384) {
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001d98:	dd03      	ble.n	8001da2 <applyCtrlLimit+0x36>
				val = 16384;
 8001d9a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d9e:	603b      	str	r3, [r7, #0]
			} else if (val < -16384) {
				val = -16384;
			}
			break;
 8001da0:	e016      	b.n	8001dd0 <applyCtrlLimit+0x64>
			} else if (val < -16384) {
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	f513 4f80 	cmn.w	r3, #16384	@ 0x4000
 8001da8:	da12      	bge.n	8001dd0 <applyCtrlLimit+0x64>
				val = -16384;
 8001daa:	4b0e      	ldr	r3, [pc, #56]	@ (8001de4 <applyCtrlLimit+0x78>)
 8001dac:	603b      	str	r3, [r7, #0]
			break;
 8001dae:	e00f      	b.n	8001dd0 <applyCtrlLimit+0x64>
		}
		case (3): {
			if (val > 25000) {
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001db6:	4293      	cmp	r3, r2
 8001db8:	dd03      	ble.n	8001dc2 <applyCtrlLimit+0x56>
				val = 25000;
 8001dba:	f246 13a8 	movw	r3, #25000	@ 0x61a8
 8001dbe:	603b      	str	r3, [r7, #0]
			} else if (val < -25000) {
				val = -25000;
			}
			break;
 8001dc0:	e008      	b.n	8001dd4 <applyCtrlLimit+0x68>
			} else if (val < -25000) {
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	4a08      	ldr	r2, [pc, #32]	@ (8001de8 <applyCtrlLimit+0x7c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	da04      	bge.n	8001dd4 <applyCtrlLimit+0x68>
				val = -25000;
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <applyCtrlLimit+0x7c>)
 8001dcc:	603b      	str	r3, [r7, #0]
			break;
 8001dce:	e001      	b.n	8001dd4 <applyCtrlLimit+0x68>
			break;
 8001dd0:	bf00      	nop
 8001dd2:	e000      	b.n	8001dd6 <applyCtrlLimit+0x6a>
			break;
 8001dd4:	bf00      	nop
		}
	}
	return val;
 8001dd6:	683b      	ldr	r3, [r7, #0]
}
 8001dd8:	4618      	mov	r0, r3
 8001dda:	370c      	adds	r7, #12
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	ffffc000 	.word	0xffffc000
 8001de8:	ffff9e58 	.word	0xffff9e58

08001dec <setMotorRPM>:

void setMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID, int16_t RPMtarget, PID_preset_t preset) {
 8001dec:	b590      	push	{r4, r7, lr}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	4604      	mov	r4, r0
 8001df4:	4608      	mov	r0, r1
 8001df6:	4611      	mov	r1, r2
 8001df8:	461a      	mov	r2, r3
 8001dfa:	eef0 6a40 	vmov.f32	s13, s0
 8001dfe:	eeb0 7a60 	vmov.f32	s14, s1
 8001e02:	eef0 7a41 	vmov.f32	s15, s2
 8001e06:	4623      	mov	r3, r4
 8001e08:	75fb      	strb	r3, [r7, #23]
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	75bb      	strb	r3, [r7, #22]
 8001e0e:	460b      	mov	r3, r1
 8001e10:	757b      	strb	r3, [r7, #21]
 8001e12:	4613      	mov	r3, r2
 8001e14:	827b      	strh	r3, [r7, #18]
 8001e16:	edc7 6a01 	vstr	s13, [r7, #4]
 8001e1a:	ed87 7a02 	vstr	s14, [r7, #8]
 8001e1e:	edc7 7a03 	vstr	s15, [r7, #12]
	CAN_setMotorCtrlVal(bus, motorType, motorID, calcRPM_PID(bus, motorType, motorID, RPMtarget, preset));
 8001e22:	edd7 6a01 	vldr	s13, [r7, #4]
 8001e26:	ed97 7a02 	vldr	s14, [r7, #8]
 8001e2a:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e2e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001e32:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001e36:	7db9      	ldrb	r1, [r7, #22]
 8001e38:	7df8      	ldrb	r0, [r7, #23]
 8001e3a:	eeb0 0a66 	vmov.f32	s0, s13
 8001e3e:	eef0 0a47 	vmov.f32	s1, s14
 8001e42:	eeb0 1a67 	vmov.f32	s2, s15
 8001e46:	f7ff fe6d 	bl	8001b24 <calcRPM_PID>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001e52:	7db9      	ldrb	r1, [r7, #22]
 8001e54:	7df8      	ldrb	r0, [r7, #23]
 8001e56:	f7ff fc67 	bl	8001728 <CAN_setMotorCtrlVal>
}
 8001e5a:	bf00      	nop
 8001e5c:	371c      	adds	r7, #28
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
	...

08001e64 <getMotorRPM>:
		}
	}
	return -1;
}

int16_t getMotorRPM(CAN_Bus bus, MotorType_ID motorType, int8_t motorID) {
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	71fb      	strb	r3, [r7, #7]
 8001e6e:	460b      	mov	r3, r1
 8001e70:	71bb      	strb	r3, [r7, #6]
 8001e72:	4613      	mov	r3, r2
 8001e74:	717b      	strb	r3, [r7, #5]
	switch (motorType) {
 8001e76:	79bb      	ldrb	r3, [r7, #6]
 8001e78:	2b02      	cmp	r3, #2
 8001e7a:	dc02      	bgt.n	8001e82 <getMotorRPM+0x1e>
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	dc04      	bgt.n	8001e8a <getMotorRPM+0x26>
 8001e80:	e038      	b.n	8001ef4 <getMotorRPM+0x90>
 8001e82:	3b03      	subs	r3, #3
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d835      	bhi.n	8001ef4 <getMotorRPM+0x90>
 8001e88:	e018      	b.n	8001ebc <getMotorRPM+0x58>
		case (1):
		case (2): {
			if (motorID >= 1 && motorID <= 8) {
 8001e8a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	dd2d      	ble.n	8001eee <getMotorRPM+0x8a>
 8001e92:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001e96:	2b08      	cmp	r3, #8
 8001e98:	dc29      	bgt.n	8001eee <getMotorRPM+0x8a>
				return motorFeedback[bus - 1][motorID - 1].speed_rpm;
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	1e5a      	subs	r2, r3, #1
 8001e9e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ea2:	1e59      	subs	r1, r3, #1
 8001ea4:	4817      	ldr	r0, [pc, #92]	@ (8001f04 <getMotorRPM+0xa0>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4413      	add	r3, r2
 8001eb0:	440b      	add	r3, r1
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4403      	add	r3, r0
 8001eb6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eba:	e01d      	b.n	8001ef8 <getMotorRPM+0x94>
			}
			break;
		}
		case (3):
		case (4): {
			if (motorID >= 1 && motorID <= 7) {
 8001ebc:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dd16      	ble.n	8001ef2 <getMotorRPM+0x8e>
 8001ec4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ec8:	2b07      	cmp	r3, #7
 8001eca:	dc12      	bgt.n	8001ef2 <getMotorRPM+0x8e>
				return motorFeedback[bus - 1][motorID + 3].speed_rpm;
 8001ecc:	79fb      	ldrb	r3, [r7, #7]
 8001ece:	1e5a      	subs	r2, r3, #1
 8001ed0:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001ed4:	1cd9      	adds	r1, r3, #3
 8001ed6:	480b      	ldr	r0, [pc, #44]	@ (8001f04 <getMotorRPM+0xa0>)
 8001ed8:	4613      	mov	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	4413      	add	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	440b      	add	r3, r1
 8001ee4:	00db      	lsls	r3, r3, #3
 8001ee6:	4403      	add	r3, r0
 8001ee8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001eec:	e004      	b.n	8001ef8 <getMotorRPM+0x94>
			break;
 8001eee:	bf00      	nop
 8001ef0:	e000      	b.n	8001ef4 <getMotorRPM+0x90>
			}
			break;
 8001ef2:	bf00      	nop
		}
	}
	return -1;
 8001ef4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	370c      	adds	r7, #12
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr
 8001f04:	2000017c 	.word	0x2000017c

08001f08 <CAN_Init>:
	}
	return -1;
}


void CAN_Init(void) {                      // filtering mask code taken from DJI, doesn't actually filter anything
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b08a      	sub	sp, #40	@ 0x28
 8001f0c:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef can_filter_st;
    can_filter_st.FilterActivation = ENABLE;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	623b      	str	r3, [r7, #32]
    can_filter_st.FilterMode = CAN_FILTERMODE_IDMASK;
 8001f12:	2300      	movs	r3, #0
 8001f14:	61bb      	str	r3, [r7, #24]
    can_filter_st.FilterScale = CAN_FILTERSCALE_32BIT;
 8001f16:	2301      	movs	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
    can_filter_st.FilterIdHigh = 0x0000;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	603b      	str	r3, [r7, #0]
    can_filter_st.FilterIdLow = 0x0000;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	607b      	str	r3, [r7, #4]
    can_filter_st.FilterMaskIdHigh = 0x0000;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]
    can_filter_st.FilterMaskIdLow = 0x0000;
 8001f26:	2300      	movs	r3, #0
 8001f28:	60fb      	str	r3, [r7, #12]
    can_filter_st.SlaveStartFilterBank = 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 0;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	617b      	str	r3, [r7, #20]
    can_filter_st.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001f32:	2300      	movs	r3, #0
 8001f34:	613b      	str	r3, [r7, #16]
    HAL_CAN_ConfigFilter(&hcan1, &can_filter_st);
 8001f36:	463b      	mov	r3, r7
 8001f38:	4619      	mov	r1, r3
 8001f3a:	480f      	ldr	r0, [pc, #60]	@ (8001f78 <CAN_Init+0x70>)
 8001f3c:	f003 fcdc 	bl	80058f8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan1);
 8001f40:	480d      	ldr	r0, [pc, #52]	@ (8001f78 <CAN_Init+0x70>)
 8001f42:	f003 fdb7 	bl	8005ab4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f46:	2102      	movs	r1, #2
 8001f48:	480b      	ldr	r0, [pc, #44]	@ (8001f78 <CAN_Init+0x70>)
 8001f4a:	f003 ffe9 	bl	8005f20 <HAL_CAN_ActivateNotification>

    can_filter_st.SlaveStartFilterBank = 13;
 8001f4e:	230d      	movs	r3, #13
 8001f50:	627b      	str	r3, [r7, #36]	@ 0x24
    can_filter_st.FilterBank = 13;
 8001f52:	230d      	movs	r3, #13
 8001f54:	617b      	str	r3, [r7, #20]
    HAL_CAN_ConfigFilter(&hcan2, &can_filter_st);
 8001f56:	463b      	mov	r3, r7
 8001f58:	4619      	mov	r1, r3
 8001f5a:	4808      	ldr	r0, [pc, #32]	@ (8001f7c <CAN_Init+0x74>)
 8001f5c:	f003 fccc 	bl	80058f8 <HAL_CAN_ConfigFilter>
    HAL_CAN_Start(&hcan2);
 8001f60:	4806      	ldr	r0, [pc, #24]	@ (8001f7c <CAN_Init+0x74>)
 8001f62:	f003 fda7 	bl	8005ab4 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8001f66:	2102      	movs	r1, #2
 8001f68:	4804      	ldr	r0, [pc, #16]	@ (8001f7c <CAN_Init+0x74>)
 8001f6a:	f003 ffd9 	bl	8005f20 <HAL_CAN_ActivateNotification>
}
 8001f6e:	bf00      	nop
 8001f70:	3728      	adds	r7, #40	@ 0x28
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000980 	.word	0x20000980
 8001f7c:	200009a8 	.word	0x200009a8

08001f80 <DBUS_Rx_Init>:
uint8_t DBUS_Buff[128];

uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len);


void DBUS_Rx_Init(UART_HandleTypeDef* huart){
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA (huart, DBUS_Buff, 18);
 8001f88:	2212      	movs	r2, #18
 8001f8a:	4914      	ldr	r1, [pc, #80]	@ (8001fdc <DBUS_Rx_Init+0x5c>)
 8001f8c:	6878      	ldr	r0, [r7, #4]
 8001f8e:	f007 f8aa 	bl	80090e6 <HAL_UART_Receive_DMA>
	DR16_DBUS.CH0 = 1024;
 8001f92:	4a13      	ldr	r2, [pc, #76]	@ (8001fe0 <DBUS_Rx_Init+0x60>)
 8001f94:	8813      	ldrh	r3, [r2, #0]
 8001f96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001f9a:	f361 030a 	bfi	r3, r1, #0, #11
 8001f9e:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = 1024;
 8001fa0:	4a0f      	ldr	r2, [pc, #60]	@ (8001fe0 <DBUS_Rx_Init+0x60>)
 8001fa2:	8853      	ldrh	r3, [r2, #2]
 8001fa4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fa8:	f361 030a 	bfi	r3, r1, #0, #11
 8001fac:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = 1024;
 8001fae:	4a0c      	ldr	r2, [pc, #48]	@ (8001fe0 <DBUS_Rx_Init+0x60>)
 8001fb0:	8893      	ldrh	r3, [r2, #4]
 8001fb2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fb6:	f361 030a 	bfi	r3, r1, #0, #11
 8001fba:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = 1024;
 8001fbc:	4a08      	ldr	r2, [pc, #32]	@ (8001fe0 <DBUS_Rx_Init+0x60>)
 8001fbe:	88d3      	ldrh	r3, [r2, #6]
 8001fc0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001fc4:	f361 030a 	bfi	r3, r1, #0, #11
 8001fc8:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.RESERVED = 1024;
 8001fca:	4b05      	ldr	r3, [pc, #20]	@ (8001fe0 <DBUS_Rx_Init+0x60>)
 8001fcc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001fd0:	825a      	strh	r2, [r3, #18]
}
 8001fd2:	bf00      	nop
 8001fd4:	3708      	adds	r7, #8
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200003a0 	.word	0x200003a0
 8001fe0:	2000038c 	.word	0x2000038c

08001fe4 <DBUS_Update>:


void DBUS_Update(){
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
	DR16_DBUS.CH0 = (DBUS_Buff[0] | (DBUS_Buff[1] << 8)) & 0x07ff;        //!< Channel 0
 8001fe8:	4b59      	ldr	r3, [pc, #356]	@ (8002150 <DBUS_Update+0x16c>)
 8001fea:	781b      	ldrb	r3, [r3, #0]
 8001fec:	b21a      	sxth	r2, r3
 8001fee:	4b58      	ldr	r3, [pc, #352]	@ (8002150 <DBUS_Update+0x16c>)
 8001ff0:	785b      	ldrb	r3, [r3, #1]
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	021b      	lsls	r3, r3, #8
 8001ff6:	b21b      	sxth	r3, r3
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b21b      	sxth	r3, r3
 8001ffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002000:	b299      	uxth	r1, r3
 8002002:	4a54      	ldr	r2, [pc, #336]	@ (8002154 <DBUS_Update+0x170>)
 8002004:	8813      	ldrh	r3, [r2, #0]
 8002006:	f361 030a 	bfi	r3, r1, #0, #11
 800200a:	8013      	strh	r3, [r2, #0]
	DR16_DBUS.CH1 = ((DBUS_Buff[1] >> 3) | (DBUS_Buff[2] << 5)) & 0x07ff; //!< Channel 1
 800200c:	4b50      	ldr	r3, [pc, #320]	@ (8002150 <DBUS_Update+0x16c>)
 800200e:	785b      	ldrb	r3, [r3, #1]
 8002010:	08db      	lsrs	r3, r3, #3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	b21a      	sxth	r2, r3
 8002016:	4b4e      	ldr	r3, [pc, #312]	@ (8002150 <DBUS_Update+0x16c>)
 8002018:	789b      	ldrb	r3, [r3, #2]
 800201a:	b21b      	sxth	r3, r3
 800201c:	015b      	lsls	r3, r3, #5
 800201e:	b21b      	sxth	r3, r3
 8002020:	4313      	orrs	r3, r2
 8002022:	b21b      	sxth	r3, r3
 8002024:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002028:	b299      	uxth	r1, r3
 800202a:	4a4a      	ldr	r2, [pc, #296]	@ (8002154 <DBUS_Update+0x170>)
 800202c:	8853      	ldrh	r3, [r2, #2]
 800202e:	f361 030a 	bfi	r3, r1, #0, #11
 8002032:	8053      	strh	r3, [r2, #2]
	DR16_DBUS.CH2 = ((DBUS_Buff[2] >> 6) | (DBUS_Buff[3] << 2) | (DBUS_Buff[4] << 10)) &0x07ff;       //!< Channel 2
 8002034:	4b46      	ldr	r3, [pc, #280]	@ (8002150 <DBUS_Update+0x16c>)
 8002036:	789b      	ldrb	r3, [r3, #2]
 8002038:	099b      	lsrs	r3, r3, #6
 800203a:	b2db      	uxtb	r3, r3
 800203c:	b21a      	sxth	r2, r3
 800203e:	4b44      	ldr	r3, [pc, #272]	@ (8002150 <DBUS_Update+0x16c>)
 8002040:	78db      	ldrb	r3, [r3, #3]
 8002042:	b21b      	sxth	r3, r3
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	b21b      	sxth	r3, r3
 8002048:	4313      	orrs	r3, r2
 800204a:	b21a      	sxth	r2, r3
 800204c:	4b40      	ldr	r3, [pc, #256]	@ (8002150 <DBUS_Update+0x16c>)
 800204e:	791b      	ldrb	r3, [r3, #4]
 8002050:	b21b      	sxth	r3, r3
 8002052:	029b      	lsls	r3, r3, #10
 8002054:	b21b      	sxth	r3, r3
 8002056:	4313      	orrs	r3, r2
 8002058:	b21b      	sxth	r3, r3
 800205a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800205e:	b299      	uxth	r1, r3
 8002060:	4a3c      	ldr	r2, [pc, #240]	@ (8002154 <DBUS_Update+0x170>)
 8002062:	8893      	ldrh	r3, [r2, #4]
 8002064:	f361 030a 	bfi	r3, r1, #0, #11
 8002068:	8093      	strh	r3, [r2, #4]
	DR16_DBUS.CH3 = ((DBUS_Buff[4] >> 1) | (DBUS_Buff[5] << 7)) & 0x07ff; //!< Channel 3
 800206a:	4b39      	ldr	r3, [pc, #228]	@ (8002150 <DBUS_Update+0x16c>)
 800206c:	791b      	ldrb	r3, [r3, #4]
 800206e:	085b      	lsrs	r3, r3, #1
 8002070:	b2db      	uxtb	r3, r3
 8002072:	b21a      	sxth	r2, r3
 8002074:	4b36      	ldr	r3, [pc, #216]	@ (8002150 <DBUS_Update+0x16c>)
 8002076:	795b      	ldrb	r3, [r3, #5]
 8002078:	b21b      	sxth	r3, r3
 800207a:	01db      	lsls	r3, r3, #7
 800207c:	b21b      	sxth	r3, r3
 800207e:	4313      	orrs	r3, r2
 8002080:	b21b      	sxth	r3, r3
 8002082:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002086:	b299      	uxth	r1, r3
 8002088:	4a32      	ldr	r2, [pc, #200]	@ (8002154 <DBUS_Update+0x170>)
 800208a:	88d3      	ldrh	r3, [r2, #6]
 800208c:	f361 030a 	bfi	r3, r1, #0, #11
 8002090:	80d3      	strh	r3, [r2, #6]
	DR16_DBUS.S1 = ((DBUS_Buff[5] >> 4) & 0x0003);                  //!< Switch left
 8002092:	4b2f      	ldr	r3, [pc, #188]	@ (8002150 <DBUS_Update+0x16c>)
 8002094:	795b      	ldrb	r3, [r3, #5]
 8002096:	091b      	lsrs	r3, r3, #4
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f003 0303 	and.w	r3, r3, #3
 800209e:	b2d9      	uxtb	r1, r3
 80020a0:	4a2c      	ldr	r2, [pc, #176]	@ (8002154 <DBUS_Update+0x170>)
 80020a2:	79d3      	ldrb	r3, [r2, #7]
 80020a4:	f361 03c4 	bfi	r3, r1, #3, #2
 80020a8:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.S2 = ((DBUS_Buff[5] >> 4) & 0x000C) >> 2;                       //!< Switch right
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <DBUS_Update+0x16c>)
 80020ac:	795b      	ldrb	r3, [r3, #5]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	b2db      	uxtb	r3, r3
 80020b2:	109b      	asrs	r3, r3, #2
 80020b4:	f003 0303 	and.w	r3, r3, #3
 80020b8:	b2d9      	uxtb	r1, r3
 80020ba:	4a26      	ldr	r2, [pc, #152]	@ (8002154 <DBUS_Update+0x170>)
 80020bc:	79d3      	ldrb	r3, [r2, #7]
 80020be:	f361 1346 	bfi	r3, r1, #5, #2
 80020c2:	71d3      	strb	r3, [r2, #7]
	DR16_DBUS.MouseX = DBUS_Buff[6] | (DBUS_Buff[7] << 8);                    //!< Mouse X axis
 80020c4:	4b22      	ldr	r3, [pc, #136]	@ (8002150 <DBUS_Update+0x16c>)
 80020c6:	799b      	ldrb	r3, [r3, #6]
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	4b21      	ldr	r3, [pc, #132]	@ (8002150 <DBUS_Update+0x16c>)
 80020cc:	79db      	ldrb	r3, [r3, #7]
 80020ce:	b21b      	sxth	r3, r3
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21b      	sxth	r3, r3
 80020d4:	4313      	orrs	r3, r2
 80020d6:	b21a      	sxth	r2, r3
 80020d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002154 <DBUS_Update+0x170>)
 80020da:	811a      	strh	r2, [r3, #8]
	DR16_DBUS.MouseY = DBUS_Buff[8] | (DBUS_Buff[9] << 8);                    //!< Mouse Y axis
 80020dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002150 <DBUS_Update+0x16c>)
 80020de:	7a1b      	ldrb	r3, [r3, #8]
 80020e0:	b21a      	sxth	r2, r3
 80020e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002150 <DBUS_Update+0x16c>)
 80020e4:	7a5b      	ldrb	r3, [r3, #9]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	b21b      	sxth	r3, r3
 80020ec:	4313      	orrs	r3, r2
 80020ee:	b21a      	sxth	r2, r3
 80020f0:	4b18      	ldr	r3, [pc, #96]	@ (8002154 <DBUS_Update+0x170>)
 80020f2:	815a      	strh	r2, [r3, #10]
	DR16_DBUS.MouseZ = DBUS_Buff[10] | (DBUS_Buff[11] << 8);                  //!< Mouse Z axis
 80020f4:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <DBUS_Update+0x16c>)
 80020f6:	7a9b      	ldrb	r3, [r3, #10]
 80020f8:	b21a      	sxth	r2, r3
 80020fa:	4b15      	ldr	r3, [pc, #84]	@ (8002150 <DBUS_Update+0x16c>)
 80020fc:	7adb      	ldrb	r3, [r3, #11]
 80020fe:	b21b      	sxth	r3, r3
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21b      	sxth	r3, r3
 8002104:	4313      	orrs	r3, r2
 8002106:	b21a      	sxth	r2, r3
 8002108:	4b12      	ldr	r3, [pc, #72]	@ (8002154 <DBUS_Update+0x170>)
 800210a:	819a      	strh	r2, [r3, #12]
	DR16_DBUS.MouseL = DBUS_Buff[12];                                  //!< Mouse Left Is Pressed ?
 800210c:	4b10      	ldr	r3, [pc, #64]	@ (8002150 <DBUS_Update+0x16c>)
 800210e:	7b1a      	ldrb	r2, [r3, #12]
 8002110:	4b10      	ldr	r3, [pc, #64]	@ (8002154 <DBUS_Update+0x170>)
 8002112:	739a      	strb	r2, [r3, #14]
	DR16_DBUS.MouseR = DBUS_Buff[13];                                  //!< Mouse Right Is Pressed ?
 8002114:	4b0e      	ldr	r3, [pc, #56]	@ (8002150 <DBUS_Update+0x16c>)
 8002116:	7b5a      	ldrb	r2, [r3, #13]
 8002118:	4b0e      	ldr	r3, [pc, #56]	@ (8002154 <DBUS_Update+0x170>)
 800211a:	73da      	strb	r2, [r3, #15]
	DR16_DBUS.KeyData1 = DBUS_Buff[14];                    //!< KeyBoard value lower bits
 800211c:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <DBUS_Update+0x16c>)
 800211e:	7b9a      	ldrb	r2, [r3, #14]
 8002120:	4b0c      	ldr	r3, [pc, #48]	@ (8002154 <DBUS_Update+0x170>)
 8002122:	741a      	strb	r2, [r3, #16]
	DR16_DBUS.KeyData2 = DBUS_Buff[15];                    //!< KeyBoard value higher bits
 8002124:	4b0a      	ldr	r3, [pc, #40]	@ (8002150 <DBUS_Update+0x16c>)
 8002126:	7bda      	ldrb	r2, [r3, #15]
 8002128:	4b0a      	ldr	r3, [pc, #40]	@ (8002154 <DBUS_Update+0x170>)
 800212a:	745a      	strb	r2, [r3, #17]
	DR16_DBUS.RESERVED = DBUS_Buff[16] | (DBUS_Buff[17] << 8);                 //NULL
 800212c:	4b08      	ldr	r3, [pc, #32]	@ (8002150 <DBUS_Update+0x16c>)
 800212e:	7c1b      	ldrb	r3, [r3, #16]
 8002130:	b21a      	sxth	r2, r3
 8002132:	4b07      	ldr	r3, [pc, #28]	@ (8002150 <DBUS_Update+0x16c>)
 8002134:	7c5b      	ldrb	r3, [r3, #17]
 8002136:	b21b      	sxth	r3, r3
 8002138:	021b      	lsls	r3, r3, #8
 800213a:	b21b      	sxth	r3, r3
 800213c:	4313      	orrs	r3, r2
 800213e:	b21b      	sxth	r3, r3
 8002140:	b29a      	uxth	r2, r3
 8002142:	4b04      	ldr	r3, [pc, #16]	@ (8002154 <DBUS_Update+0x170>)
 8002144:	825a      	strh	r2, [r3, #18]
}
 8002146:	bf00      	nop
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	200003a0 	.word	0x200003a0
 8002154:	2000038c 	.word	0x2000038c

08002158 <getDR16_CH0>:

int16_t getDR16_CH0(){
 8002158:	b480      	push	{r7}
 800215a:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH0>0){
 800215c:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <getDR16_CH0+0x34>)
 800215e:	881b      	ldrh	r3, [r3, #0]
 8002160:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002164:	b29b      	uxth	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d009      	beq.n	800217e <getDR16_CH0+0x26>
		return (int16_t)DR16_DBUS.CH0-1024;
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <getDR16_CH0+0x34>)
 800216c:	881b      	ldrh	r3, [r3, #0]
 800216e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002172:	b29b      	uxth	r3, r3
 8002174:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002178:	b29b      	uxth	r3, r3
 800217a:	b21b      	sxth	r3, r3
 800217c:	e000      	b.n	8002180 <getDR16_CH0+0x28>
	}
	else{
		return 0;
 800217e:	2300      	movs	r3, #0
	}
}
 8002180:	4618      	mov	r0, r3
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	2000038c 	.word	0x2000038c

08002190 <getDR16_CH1>:

int16_t getDR16_CH1(){
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH1>0){
 8002194:	4b0b      	ldr	r3, [pc, #44]	@ (80021c4 <getDR16_CH1+0x34>)
 8002196:	885b      	ldrh	r3, [r3, #2]
 8002198:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800219c:	b29b      	uxth	r3, r3
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d009      	beq.n	80021b6 <getDR16_CH1+0x26>
		return (int16_t)DR16_DBUS.CH1-1024;
 80021a2:	4b08      	ldr	r3, [pc, #32]	@ (80021c4 <getDR16_CH1+0x34>)
 80021a4:	885b      	ldrh	r3, [r3, #2]
 80021a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80021b0:	b29b      	uxth	r3, r3
 80021b2:	b21b      	sxth	r3, r3
 80021b4:	e000      	b.n	80021b8 <getDR16_CH1+0x28>
	}
	else{
		return 0;
 80021b6:	2300      	movs	r3, #0
	}
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	2000038c 	.word	0x2000038c

080021c8 <getDR16_CH2>:

int16_t getDR16_CH2(){
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH2>0){
 80021cc:	4b0b      	ldr	r3, [pc, #44]	@ (80021fc <getDR16_CH2+0x34>)
 80021ce:	889b      	ldrh	r3, [r3, #4]
 80021d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d009      	beq.n	80021ee <getDR16_CH2+0x26>
		return (int16_t)DR16_DBUS.CH2-1024;
 80021da:	4b08      	ldr	r3, [pc, #32]	@ (80021fc <getDR16_CH2+0x34>)
 80021dc:	889b      	ldrh	r3, [r3, #4]
 80021de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80021e2:	b29b      	uxth	r3, r3
 80021e4:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	b21b      	sxth	r3, r3
 80021ec:	e000      	b.n	80021f0 <getDR16_CH2+0x28>
	}
	else{
		return 0;
 80021ee:	2300      	movs	r3, #0
	}
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	46bd      	mov	sp, r7
 80021f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f8:	4770      	bx	lr
 80021fa:	bf00      	nop
 80021fc:	2000038c 	.word	0x2000038c

08002200 <getDR16_CH3>:

int16_t getDR16_CH3(){
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
	if(DR16_DBUS.CH3>0){
 8002204:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <getDR16_CH3+0x34>)
 8002206:	88db      	ldrh	r3, [r3, #6]
 8002208:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800220c:	b29b      	uxth	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d009      	beq.n	8002226 <getDR16_CH3+0x26>
		return (int16_t)DR16_DBUS.CH3-1024;
 8002212:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <getDR16_CH3+0x34>)
 8002214:	88db      	ldrh	r3, [r3, #6]
 8002216:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800221a:	b29b      	uxth	r3, r3
 800221c:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
 8002220:	b29b      	uxth	r3, r3
 8002222:	b21b      	sxth	r3, r3
 8002224:	e000      	b.n	8002228 <getDR16_CH3+0x28>
	}
	else{
		return 0;
 8002226:	2300      	movs	r3, #0
	}
}
 8002228:	4618      	mov	r0, r3
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	2000038c 	.word	0x2000038c

08002238 <getDR16_S2>:

uint8_t getDR16_S1(){
	return DR16_DBUS.S1;
}

uint8_t getDR16_S2(){
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
	return DR16_DBUS.S2;
 800223c:	4b04      	ldr	r3, [pc, #16]	@ (8002250 <getDR16_S2+0x18>)
 800223e:	79db      	ldrb	r3, [r3, #7]
 8002240:	f3c3 1341 	ubfx	r3, r3, #5, #2
 8002244:	b2db      	uxtb	r3, r3
}
 8002246:	4618      	mov	r0, r3
 8002248:	46bd      	mov	sp, r7
 800224a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224e:	4770      	bx	lr
 8002250:	2000038c 	.word	0x2000038c

08002254 <getDR16_W>:
	else{
		return 0;
	}
}

uint8_t getDR16_W(){
 8002254:	b580      	push	{r7, lr}
 8002256:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,0,1);
 8002258:	4b04      	ldr	r3, [pc, #16]	@ (800226c <getDR16_W+0x18>)
 800225a:	7c1b      	ldrb	r3, [r3, #16]
 800225c:	2201      	movs	r2, #1
 800225e:	2100      	movs	r1, #0
 8002260:	4618      	mov	r0, r3
 8002262:	f000 f847 	bl	80022f4 <DBUS_getBits>
 8002266:	4603      	mov	r3, r0
}
 8002268:	4618      	mov	r0, r3
 800226a:	bd80      	pop	{r7, pc}
 800226c:	2000038c 	.word	0x2000038c

08002270 <getDR16_S>:

uint8_t getDR16_S(){
 8002270:	b580      	push	{r7, lr}
 8002272:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,1,1);
 8002274:	4b04      	ldr	r3, [pc, #16]	@ (8002288 <getDR16_S+0x18>)
 8002276:	7c1b      	ldrb	r3, [r3, #16]
 8002278:	2201      	movs	r2, #1
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f000 f839 	bl	80022f4 <DBUS_getBits>
 8002282:	4603      	mov	r3, r0
}
 8002284:	4618      	mov	r0, r3
 8002286:	bd80      	pop	{r7, pc}
 8002288:	2000038c 	.word	0x2000038c

0800228c <getDR16_A>:

uint8_t getDR16_A(){
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,2,1);
 8002290:	4b04      	ldr	r3, [pc, #16]	@ (80022a4 <getDR16_A+0x18>)
 8002292:	7c1b      	ldrb	r3, [r3, #16]
 8002294:	2201      	movs	r2, #1
 8002296:	2102      	movs	r1, #2
 8002298:	4618      	mov	r0, r3
 800229a:	f000 f82b 	bl	80022f4 <DBUS_getBits>
 800229e:	4603      	mov	r3, r0
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	2000038c 	.word	0x2000038c

080022a8 <getDR16_D>:

uint8_t getDR16_D(){
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
	return DBUS_getBits(DR16_DBUS.KeyData1,3,1);
 80022ac:	4b04      	ldr	r3, [pc, #16]	@ (80022c0 <getDR16_D+0x18>)
 80022ae:	7c1b      	ldrb	r3, [r3, #16]
 80022b0:	2201      	movs	r2, #1
 80022b2:	2103      	movs	r1, #3
 80022b4:	4618      	mov	r0, r3
 80022b6:	f000 f81d 	bl	80022f4 <DBUS_getBits>
 80022ba:	4603      	mov	r3, r0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	2000038c 	.word	0x2000038c

080022c4 <getDR16_MouseX>:
uint8_t getDR16_B(){
	return DBUS_getBits(DR16_DBUS.KeyData2,7,1); //b
}

//mouse
int16_t getDR16_MouseX(){
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseX;
 80022c8:	4b03      	ldr	r3, [pc, #12]	@ (80022d8 <getDR16_MouseX+0x14>)
 80022ca:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	2000038c 	.word	0x2000038c

080022dc <getDR16_MouseY>:

int16_t getDR16_MouseY(){
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
	return DR16_DBUS.MouseY;
 80022e0:	4b03      	ldr	r3, [pc, #12]	@ (80022f0 <getDR16_MouseY+0x14>)
 80022e2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	2000038c 	.word	0x2000038c

080022f4 <DBUS_getBits>:
uint8_t getDR16_MouseR(){
	return DR16_DBUS.MouseR;
}


uint8_t DBUS_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 80022f4:	b480      	push	{r7}
 80022f6:	b085      	sub	sp, #20
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	460b      	mov	r3, r1
 8002300:	71bb      	strb	r3, [r7, #6]
 8002302:	4613      	mov	r3, r2
 8002304:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 8002306:	2300      	movs	r3, #0
 8002308:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800230a:	2300      	movs	r3, #0
 800230c:	73bb      	strb	r3, [r7, #14]
 800230e:	e013      	b.n	8002338 <DBUS_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 8002310:	79fa      	ldrb	r2, [r7, #7]
 8002312:	79b9      	ldrb	r1, [r7, #6]
 8002314:	7bbb      	ldrb	r3, [r7, #14]
 8002316:	440b      	add	r3, r1
 8002318:	fa42 f303 	asr.w	r3, r2, r3
 800231c:	f003 0201 	and.w	r2, r3, #1
 8002320:	7bbb      	ldrb	r3, [r7, #14]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	b25a      	sxtb	r2, r3
 8002328:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800232c:	4313      	orrs	r3, r2
 800232e:	b25b      	sxtb	r3, r3
 8002330:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 8002332:	7bbb      	ldrb	r3, [r7, #14]
 8002334:	3301      	adds	r3, #1
 8002336:	73bb      	strb	r3, [r7, #14]
 8002338:	7bba      	ldrb	r2, [r7, #14]
 800233a:	797b      	ldrb	r3, [r7, #5]
 800233c:	429a      	cmp	r2, r3
 800233e:	d3e7      	bcc.n	8002310 <DBUS_getBits+0x1c>
	}
	return result;
 8002340:	7bfb      	ldrb	r3, [r7, #15]
}
 8002342:	4618      	mov	r0, r3
 8002344:	3714      	adds	r7, #20
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <Get_CRC16_Check_Sum>:
/*
** Descriptions: CRC16 checksum function
** Input: Data to check,Stream length, initialized checksum
** Output: CRC checksum
*/
uint16_t Get_CRC16_Check_Sum(uint8_t *pchMessage, uint32_t dwLength, uint16_t wCRC){
 8002350:	b480      	push	{r7}
 8002352:	b087      	sub	sp, #28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	4613      	mov	r3, r2
 800235c:	80fb      	strh	r3, [r7, #6]
	uint8_t chData;

	if (pchMessage == NULL){
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d116      	bne.n	8002392 <Get_CRC16_Check_Sum+0x42>
		return 0xFFFF;
 8002364:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002368:	e017      	b.n	800239a <Get_CRC16_Check_Sum+0x4a>
	}

	while(dwLength>0){
		chData = *pchMessage++;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1c5a      	adds	r2, r3, #1
 800236e:	60fa      	str	r2, [r7, #12]
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	75fb      	strb	r3, [r7, #23]
		(wCRC) = ((uint16_t)(wCRC) >> 8) ^ wCRC_Table[((uint16_t)(wCRC) ^ (uint16_t)(chData)) & 0x00ff];
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	0a1b      	lsrs	r3, r3, #8
 8002378:	b29a      	uxth	r2, r3
 800237a:	88f9      	ldrh	r1, [r7, #6]
 800237c:	7dfb      	ldrb	r3, [r7, #23]
 800237e:	404b      	eors	r3, r1
 8002380:	b2db      	uxtb	r3, r3
 8002382:	4909      	ldr	r1, [pc, #36]	@ (80023a8 <Get_CRC16_Check_Sum+0x58>)
 8002384:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002388:	4053      	eors	r3, r2
 800238a:	80fb      	strh	r3, [r7, #6]
		dwLength--;
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3b01      	subs	r3, #1
 8002390:	60bb      	str	r3, [r7, #8]
	while(dwLength>0){
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1e8      	bne.n	800236a <Get_CRC16_Check_Sum+0x1a>
	}

	return wCRC;
 8002398:	88fb      	ldrh	r3, [r7, #6]
}
 800239a:	4618      	mov	r0, r3
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a4:	4770      	bx	lr
 80023a6:	bf00      	nop
 80023a8:	0800ddd4 	.word	0x0800ddd4

080023ac <UART_Printf>:
/*
** Descriptions: Send a message in fmt format over chosen uart instance
** Input: UART instance to send over, message to send in fmt format
** Output: message transmitted over uart
*/
void UART_Printf(UART_HandleTypeDef *huart,const char *fmt,...) {
 80023ac:	b40e      	push	{r1, r2, r3}
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
    static uint8_t tx_buf[256] = {0};
    static va_list ap;
    static uint16_t len;
    va_start(ap, fmt);
 80023b6:	f107 0318 	add.w	r3, r7, #24
 80023ba:	4a0d      	ldr	r2, [pc, #52]	@ (80023f0 <UART_Printf+0x44>)
 80023bc:	6013      	str	r3, [r2, #0]
    len = vsprintf((char *)tx_buf, fmt, ap);
 80023be:	4b0c      	ldr	r3, [pc, #48]	@ (80023f0 <UART_Printf+0x44>)
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	6979      	ldr	r1, [r7, #20]
 80023c4:	480b      	ldr	r0, [pc, #44]	@ (80023f4 <UART_Printf+0x48>)
 80023c6:	f00a ffe5 	bl	800d394 <vsiprintf>
 80023ca:	4603      	mov	r3, r0
 80023cc:	b29a      	uxth	r2, r3
 80023ce:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <UART_Printf+0x4c>)
 80023d0:	801a      	strh	r2, [r3, #0]
    va_end(ap);
    HAL_UART_Transmit(huart, tx_buf, len,100);
 80023d2:	4b09      	ldr	r3, [pc, #36]	@ (80023f8 <UART_Printf+0x4c>)
 80023d4:	881a      	ldrh	r2, [r3, #0]
 80023d6:	2364      	movs	r3, #100	@ 0x64
 80023d8:	4906      	ldr	r1, [pc, #24]	@ (80023f4 <UART_Printf+0x48>)
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f006 fdf8 	bl	8008fd0 <HAL_UART_Transmit>
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023ea:	b003      	add	sp, #12
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	20000824 	.word	0x20000824
 80023f4:	20000828 	.word	0x20000828
 80023f8:	20000928 	.word	0x20000928

080023fc <UART_Ex_Init>:
/*
** Descriptions: Initialize the chosen uart instance using advanced reception service.
** 				 Must be called previously to enable HAL_UARTEx_RxEventCallback function
** Input: Target uart instance
*/
void UART_Ex_Init(UART_HandleTypeDef *huart) {
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxInitBuff, 256);
 8002404:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002408:	4903      	ldr	r1, [pc, #12]	@ (8002418 <UART_Ex_Init+0x1c>)
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f006 fe90 	bl	8009130 <HAL_UARTEx_ReceiveToIdle_DMA>

}
 8002410:	bf00      	nop
 8002412:	3708      	adds	r7, #8
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20000420 	.word	0x20000420

0800241c <HAL_UARTEx_RxEventCallback>:
/*
** Descriptions: is triggered on recieve
** Input: Data to CRC and append,Stream length = Data + checksum
** Output: True or False (CRC Verify Result)
*/
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t size) {
 800241c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002420:	b0af      	sub	sp, #188	@ 0xbc
 8002422:	af12      	add	r7, sp, #72	@ 0x48
 8002424:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8002426:	460b      	mov	r3, r1
 8002428:	877b      	strh	r3, [r7, #58]	@ 0x3a
 800242a:	466b      	mov	r3, sp
 800242c:	607b      	str	r3, [r7, #4]

	//write uart to RxBuff until idle state
	HAL_UARTEx_ReceiveToIdle_DMA(huart, RxBuff, 256);
 800242e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002432:	49b7      	ldr	r1, [pc, #732]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8002434:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8002436:	f006 fe7b 	bl	8009130 <HAL_UARTEx_ReceiveToIdle_DMA>
	UART_RxEventCallback_RM25Passthrough(huart,RxBuff);
 800243a:	49b5      	ldr	r1, [pc, #724]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800243c:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800243e:	f001 f9a3 	bl	8003788 <UART_RxEventCallback_RM25Passthrough>
	//parse frame information
	uint16_t cmd_id = ((uint16_t) RxBuff[6] << 8) | RxBuff[5];
 8002442:	4bb3      	ldr	r3, [pc, #716]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8002444:	799b      	ldrb	r3, [r3, #6]
 8002446:	b21b      	sxth	r3, r3
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	b21a      	sxth	r2, r3
 800244c:	4bb0      	ldr	r3, [pc, #704]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800244e:	795b      	ldrb	r3, [r3, #5]
 8002450:	b21b      	sxth	r3, r3
 8002452:	4313      	orrs	r3, r2
 8002454:	b21b      	sxth	r3, r3
 8002456:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
	uint16_t data_length = ((uint16_t) RxBuff[2] << 8) | RxBuff[1];
 800245a:	4bad      	ldr	r3, [pc, #692]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800245c:	789b      	ldrb	r3, [r3, #2]
 800245e:	b21b      	sxth	r3, r3
 8002460:	021b      	lsls	r3, r3, #8
 8002462:	b21a      	sxth	r2, r3
 8002464:	4baa      	ldr	r3, [pc, #680]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	b21b      	sxth	r3, r3
 800246a:	4313      	orrs	r3, r2
 800246c:	b21b      	sxth	r3, r3
 800246e:	f8a7 306a 	strh.w	r3, [r7, #106]	@ 0x6a
	uint16_t CRC16 = ((uint16_t) RxBuff[data_length+8] << 8) | RxBuff[data_length+7];
 8002472:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002476:	3308      	adds	r3, #8
 8002478:	4aa5      	ldr	r2, [pc, #660]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800247a:	5cd3      	ldrb	r3, [r2, r3]
 800247c:	b21b      	sxth	r3, r3
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	b21a      	sxth	r2, r3
 8002482:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002486:	3307      	adds	r3, #7
 8002488:	49a1      	ldr	r1, [pc, #644]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 800248a:	5ccb      	ldrb	r3, [r1, r3]
 800248c:	b21b      	sxth	r3, r3
 800248e:	4313      	orrs	r3, r2
 8002490:	b21b      	sxth	r3, r3
 8002492:	f8a7 3068 	strh.w	r3, [r7, #104]	@ 0x68

	//fills transmissionBuffer array with transmission bytes without CRC16
	uint8_t transmissionBuff[data_length+7];
 8002496:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800249a:	1dd9      	adds	r1, r3, #7
 800249c:	1e4b      	subs	r3, r1, #1
 800249e:	667b      	str	r3, [r7, #100]	@ 0x64
 80024a0:	460a      	mov	r2, r1
 80024a2:	2300      	movs	r3, #0
 80024a4:	633a      	str	r2, [r7, #48]	@ 0x30
 80024a6:	637b      	str	r3, [r7, #52]	@ 0x34
 80024a8:	f04f 0200 	mov.w	r2, #0
 80024ac:	f04f 0300 	mov.w	r3, #0
 80024b0:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 80024b2:	00c3      	lsls	r3, r0, #3
 80024b4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024b6:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80024ba:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80024bc:	00c2      	lsls	r2, r0, #3
 80024be:	460a      	mov	r2, r1
 80024c0:	2300      	movs	r3, #0
 80024c2:	4692      	mov	sl, r2
 80024c4:	469b      	mov	fp, r3
 80024c6:	f04f 0200 	mov.w	r2, #0
 80024ca:	f04f 0300 	mov.w	r3, #0
 80024ce:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80024d2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80024d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80024da:	460b      	mov	r3, r1
 80024dc:	3307      	adds	r3, #7
 80024de:	08db      	lsrs	r3, r3, #3
 80024e0:	00db      	lsls	r3, r3, #3
 80024e2:	ebad 0d03 	sub.w	sp, sp, r3
 80024e6:	ab12      	add	r3, sp, #72	@ 0x48
 80024e8:	3300      	adds	r3, #0
 80024ea:	663b      	str	r3, [r7, #96]	@ 0x60
	for(uint16_t i = 0; i<data_length+7;i++){
 80024ec:	2300      	movs	r3, #0
 80024ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 80024f2:	e00c      	b.n	800250e <HAL_UARTEx_RxEventCallback+0xf2>
		transmissionBuff[i] = RxBuff[i];
 80024f4:	f8b7 206e 	ldrh.w	r2, [r7, #110]	@ 0x6e
 80024f8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80024fc:	4984      	ldr	r1, [pc, #528]	@ (8002710 <HAL_UARTEx_RxEventCallback+0x2f4>)
 80024fe:	5c89      	ldrb	r1, [r1, r2]
 8002500:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002502:	54d1      	strb	r1, [r2, r3]
	for(uint16_t i = 0; i<data_length+7;i++){
 8002504:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002508:	3301      	adds	r3, #1
 800250a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
 800250e:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002512:	1d9a      	adds	r2, r3, #6
 8002514:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8002518:	429a      	cmp	r2, r3
 800251a:	daeb      	bge.n	80024f4 <HAL_UARTEx_RxEventCallback+0xd8>
	}

	uint16_t expected_CRC16 = Get_CRC16_Check_Sum(transmissionBuff,data_length+7, CRC_INIT);
 800251c:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 8002520:	3307      	adds	r3, #7
 8002522:	4619      	mov	r1, r3
 8002524:	4b7b      	ldr	r3, [pc, #492]	@ (8002714 <HAL_UARTEx_RxEventCallback+0x2f8>)
 8002526:	881b      	ldrh	r3, [r3, #0]
 8002528:	461a      	mov	r2, r3
 800252a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800252c:	f7ff ff10 	bl	8002350 <Get_CRC16_Check_Sum>
 8002530:	4603      	mov	r3, r0
 8002532:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e


	if(expected_CRC16 == CRC16){
 8002536:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 800253a:	f8b7 3068 	ldrh.w	r3, [r7, #104]	@ 0x68
 800253e:	429a      	cmp	r2, r3
 8002540:	f040 87b7 	bne.w	80034b2 <HAL_UARTEx_RxEventCallback+0x1096>
 8002544:	466b      	mov	r3, sp
 8002546:	469a      	mov	sl, r3
		//seperate data
		uint8_t data[data_length];
 8002548:	f8b7 106a 	ldrh.w	r1, [r7, #106]	@ 0x6a
 800254c:	460b      	mov	r3, r1
 800254e:	3b01      	subs	r3, #1
 8002550:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002552:	b28b      	uxth	r3, r1
 8002554:	2200      	movs	r2, #0
 8002556:	4698      	mov	r8, r3
 8002558:	4691      	mov	r9, r2
 800255a:	f04f 0200 	mov.w	r2, #0
 800255e:	f04f 0300 	mov.w	r3, #0
 8002562:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002566:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800256a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800256e:	b28b      	uxth	r3, r1
 8002570:	2200      	movs	r2, #0
 8002572:	461c      	mov	r4, r3
 8002574:	4615      	mov	r5, r2
 8002576:	f04f 0200 	mov.w	r2, #0
 800257a:	f04f 0300 	mov.w	r3, #0
 800257e:	00eb      	lsls	r3, r5, #3
 8002580:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002584:	00e2      	lsls	r2, r4, #3
 8002586:	460b      	mov	r3, r1
 8002588:	3307      	adds	r3, #7
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	00db      	lsls	r3, r3, #3
 800258e:	ebad 0d03 	sub.w	sp, sp, r3
 8002592:	ab12      	add	r3, sp, #72	@ 0x48
 8002594:	3300      	adds	r3, #0
 8002596:	657b      	str	r3, [r7, #84]	@ 0x54
		memcpy(data,&RxBuff[7],data_length);
 8002598:	f8b7 306a 	ldrh.w	r3, [r7, #106]	@ 0x6a
 800259c:	461a      	mov	r2, r3
 800259e:	495e      	ldr	r1, [pc, #376]	@ (8002718 <HAL_UARTEx_RxEventCallback+0x2fc>)
 80025a0:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 80025a2:	f00a ff93 	bl	800d4cc <memcpy>

		switch (cmd_id) {
 80025a6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80025aa:	f240 4201 	movw	r2, #1025	@ 0x401
 80025ae:	4293      	cmp	r3, r2
 80025b0:	f000 8772 	beq.w	8003498 <HAL_UARTEx_RxEventCallback+0x107c>
 80025b4:	f240 4201 	movw	r2, #1025	@ 0x401
 80025b8:	4293      	cmp	r3, r2
 80025ba:	f300 8779 	bgt.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 80025be:	f5b3 7f42 	cmp.w	r3, #776	@ 0x308
 80025c2:	f280 8775 	bge.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 80025c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025ca:	dc1c      	bgt.n	8002606 <HAL_UARTEx_RxEventCallback+0x1ea>
 80025cc:	f240 220e 	movw	r2, #526	@ 0x20e
 80025d0:	4293      	cmp	r3, r2
 80025d2:	f300 876d 	bgt.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 80025d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025da:	dc2b      	bgt.n	8002634 <HAL_UARTEx_RxEventCallback+0x218>
 80025dc:	f5b3 7f91 	cmp.w	r3, #290	@ 0x122
 80025e0:	f280 8766 	bge.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 80025e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025e8:	dc48      	bgt.n	800267c <HAL_UARTEx_RxEventCallback+0x260>
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	f000 80db 	beq.w	80027a6 <HAL_UARTEx_RxEventCallback+0x38a>
 80025f0:	2b03      	cmp	r3, #3
 80025f2:	f300 875d 	bgt.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	f000 8090 	beq.w	800271c <HAL_UARTEx_RxEventCallback+0x300>
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	f000 80c7 	beq.w	8002790 <HAL_UARTEx_RxEventCallback+0x374>
 8002602:	f000 bf55 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 8002606:	f2a3 3301 	subw	r3, r3, #769	@ 0x301
 800260a:	2b06      	cmp	r3, #6
 800260c:	f200 8750 	bhi.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 8002610:	a201      	add	r2, pc, #4	@ (adr r2, 8002618 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8002612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002616:	bf00      	nop
 8002618:	080034b1 	.word	0x080034b1
 800261c:	080030f5 	.word	0x080030f5
 8002620:	0800311b 	.word	0x0800311b
 8002624:	08003189 	.word	0x08003189
 8002628:	080034b1 	.word	0x080034b1
 800262c:	080034b1 	.word	0x080034b1
 8002630:	080033e5 	.word	0x080033e5
 8002634:	f2a3 2301 	subw	r3, r3, #513	@ 0x201
 8002638:	2b0d      	cmp	r3, #13
 800263a:	f200 8739 	bhi.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 800263e:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <HAL_UARTEx_RxEventCallback+0x228>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002ac5 	.word	0x08002ac5
 8002648:	08002bd3 	.word	0x08002bd3
 800264c:	08002c1b 	.word	0x08002c1b
 8002650:	08002c5f 	.word	0x08002c5f
 8002654:	080034b1 	.word	0x080034b1
 8002658:	08002cc1 	.word	0x08002cc1
 800265c:	08002cff 	.word	0x08002cff
 8002660:	08002d5d 	.word	0x08002d5d
 8002664:	08002d93 	.word	0x08002d93
 8002668:	08002da9 	.word	0x08002da9
 800266c:	08002ddd 	.word	0x08002ddd
 8002670:	08002e95 	.word	0x08002e95
 8002674:	08002f35 	.word	0x08002f35
 8002678:	080030b7 	.word	0x080030b7
 800267c:	f2a3 1301 	subw	r3, r3, #257	@ 0x101
 8002680:	2b20      	cmp	r3, #32
 8002682:	f200 8715 	bhi.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 8002686:	a201      	add	r2, pc, #4	@ (adr r2, 800268c <HAL_UARTEx_RxEventCallback+0x270>)
 8002688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268c:	080028c9 	.word	0x080028c9
 8002690:	080034b1 	.word	0x080034b1
 8002694:	080034b1 	.word	0x080034b1
 8002698:	08002a25 	.word	0x08002a25
 800269c:	08002a57 	.word	0x08002a57
 80026a0:	080034b1 	.word	0x080034b1
 80026a4:	080034b1 	.word	0x080034b1
 80026a8:	080034b1 	.word	0x080034b1
 80026ac:	080034b1 	.word	0x080034b1
 80026b0:	080034b1 	.word	0x080034b1
 80026b4:	080034b1 	.word	0x080034b1
 80026b8:	080034b1 	.word	0x080034b1
 80026bc:	080034b1 	.word	0x080034b1
 80026c0:	080034b1 	.word	0x080034b1
 80026c4:	080034b1 	.word	0x080034b1
 80026c8:	080034b1 	.word	0x080034b1
 80026cc:	080034b1 	.word	0x080034b1
 80026d0:	080034b1 	.word	0x080034b1
 80026d4:	080034b1 	.word	0x080034b1
 80026d8:	080034b1 	.word	0x080034b1
 80026dc:	080034b1 	.word	0x080034b1
 80026e0:	080034b1 	.word	0x080034b1
 80026e4:	080034b1 	.word	0x080034b1
 80026e8:	080034b1 	.word	0x080034b1
 80026ec:	080034b1 	.word	0x080034b1
 80026f0:	080034b1 	.word	0x080034b1
 80026f4:	080034b1 	.word	0x080034b1
 80026f8:	080034b1 	.word	0x080034b1
 80026fc:	080034b1 	.word	0x080034b1
 8002700:	080034b1 	.word	0x080034b1
 8002704:	080034b1 	.word	0x080034b1
 8002708:	080034b1 	.word	0x080034b1
 800270c:	080034b1 	.word	0x080034b1
 8002710:	20000520 	.word	0x20000520
 8002714:	2000002a 	.word	0x2000002a
 8002718:	20000527 	.word	0x20000527
			case GAME_STATUS_HEADER : {
				game_status.game_type = UART_RM25_getBits(data[0],0,4);
 800271c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2204      	movs	r2, #4
 8002722:	2100      	movs	r1, #0
 8002724:	4618      	mov	r0, r3
 8002726:	f000 fed3 	bl	80034d0 <UART_RM25_getBits>
 800272a:	4603      	mov	r3, r0
 800272c:	461a      	mov	r2, r3
 800272e:	4b63      	ldr	r3, [pc, #396]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002730:	701a      	strb	r2, [r3, #0]
				game_status.current_stage = UART_RM25_getBits(data[0],4,4);
 8002732:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2204      	movs	r2, #4
 8002738:	2104      	movs	r1, #4
 800273a:	4618      	mov	r0, r3
 800273c:	f000 fec8 	bl	80034d0 <UART_RM25_getBits>
 8002740:	4603      	mov	r3, r0
 8002742:	461a      	mov	r2, r3
 8002744:	4b5d      	ldr	r3, [pc, #372]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002746:	705a      	strb	r2, [r3, #1]
				memcpy(&game_status.stage_remain_time,&data[1],2);
 8002748:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800274a:	3301      	adds	r3, #1
 800274c:	881b      	ldrh	r3, [r3, #0]
 800274e:	b29a      	uxth	r2, r3
 8002750:	4b5a      	ldr	r3, [pc, #360]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002752:	809a      	strh	r2, [r3, #4]
				memcpy(&game_status.SyncTimeStamp,&data[3],8);
 8002754:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002756:	3303      	adds	r3, #3
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002760:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002764:	4955      	ldr	r1, [pc, #340]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002766:	e9c1 2302 	strd	r2, r3, [r1, #8]
				GAME_STATUS_RxEventCallback(game_status.game_type,game_status.current_stage,game_status.game_progress,game_status.stage_remain_time,game_status.SyncTimeStamp);
 800276a:	4b54      	ldr	r3, [pc, #336]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 800276c:	7818      	ldrb	r0, [r3, #0]
 800276e:	4b53      	ldr	r3, [pc, #332]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002770:	7859      	ldrb	r1, [r3, #1]
 8002772:	4b52      	ldr	r3, [pc, #328]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002774:	789c      	ldrb	r4, [r3, #2]
 8002776:	4b51      	ldr	r3, [pc, #324]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 8002778:	889d      	ldrh	r5, [r3, #4]
 800277a:	4b50      	ldr	r3, [pc, #320]	@ (80028bc <HAL_UARTEx_RxEventCallback+0x4a0>)
 800277c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002780:	e9cd 2300 	strd	r2, r3, [sp]
 8002784:	462b      	mov	r3, r5
 8002786:	4622      	mov	r2, r4
 8002788:	f7fe fc56 	bl	8001038 <GAME_STATUS_RxEventCallback>
				break;
 800278c:	f000 be90 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case GAME_RESULT_HEADER : {
				game_result.winner=data[0];
 8002790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002792:	781a      	ldrb	r2, [r3, #0]
 8002794:	4b4a      	ldr	r3, [pc, #296]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0x4a4>)
 8002796:	701a      	strb	r2, [r3, #0]
				GAME_RESULT_RxEventCallback(game_result.winner);
 8002798:	4b49      	ldr	r3, [pc, #292]	@ (80028c0 <HAL_UARTEx_RxEventCallback+0x4a4>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f000 fec4 	bl	800352a <GAME_RESULT_RxEventCallback>
				break;
 80027a2:	f000 be85 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_HP_HEADER : {
				memcpy(&robot_HP.red_1_robot_HP,&data[0],2);
 80027a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027a8:	881b      	ldrh	r3, [r3, #0]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	4b45      	ldr	r3, [pc, #276]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 80027ae:	801a      	strh	r2, [r3, #0]
				memcpy(&robot_HP.red_2_robot_HP,&data[2],2);
 80027b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027b2:	3302      	adds	r3, #2
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	b29a      	uxth	r2, r3
 80027b8:	4b42      	ldr	r3, [pc, #264]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 80027ba:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_HP.red_3_robot_HP,&data[4],2);
 80027bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027be:	3304      	adds	r3, #4
 80027c0:	881b      	ldrh	r3, [r3, #0]
 80027c2:	b29a      	uxth	r2, r3
 80027c4:	4b3f      	ldr	r3, [pc, #252]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 80027c6:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_HP.red_4_robot_HP,&data[6],2);
 80027c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ca:	3306      	adds	r3, #6
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	b29a      	uxth	r2, r3
 80027d0:	4b3c      	ldr	r3, [pc, #240]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 80027d2:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_HP.red_7_robot_HP,&data[10],2);
 80027d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027d6:	330a      	adds	r3, #10
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b39      	ldr	r3, [pc, #228]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 80027de:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_HP.red_outpost_HP,&data[12],2);
 80027e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027e2:	330c      	adds	r3, #12
 80027e4:	881b      	ldrh	r3, [r3, #0]
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	4b36      	ldr	r3, [pc, #216]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 80027ea:	815a      	strh	r2, [r3, #10]
				memcpy(&robot_HP.red_base_HP,&data[14],2);
 80027ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027ee:	330e      	adds	r3, #14
 80027f0:	881b      	ldrh	r3, [r3, #0]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b33      	ldr	r3, [pc, #204]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 80027f6:	819a      	strh	r2, [r3, #12]
				memcpy(&robot_HP.blue_1_robot_HP,&data[16],2);
 80027f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80027fa:	3310      	adds	r3, #16
 80027fc:	881b      	ldrh	r3, [r3, #0]
 80027fe:	b29a      	uxth	r2, r3
 8002800:	4b30      	ldr	r3, [pc, #192]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002802:	81da      	strh	r2, [r3, #14]
				memcpy(&robot_HP.blue_2_robot_HP,&data[18],2);
 8002804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002806:	3312      	adds	r3, #18
 8002808:	881b      	ldrh	r3, [r3, #0]
 800280a:	b29a      	uxth	r2, r3
 800280c:	4b2d      	ldr	r3, [pc, #180]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800280e:	821a      	strh	r2, [r3, #16]
				memcpy(&robot_HP.blue_3_robot_HP,&data[20],2);
 8002810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002812:	3314      	adds	r3, #20
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29a      	uxth	r2, r3
 8002818:	4b2a      	ldr	r3, [pc, #168]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800281a:	825a      	strh	r2, [r3, #18]
				memcpy(&robot_HP.blue_4_robot_HP,&data[22],2);
 800281c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800281e:	3316      	adds	r3, #22
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	b29a      	uxth	r2, r3
 8002824:	4b27      	ldr	r3, [pc, #156]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002826:	829a      	strh	r2, [r3, #20]
				memcpy(&robot_HP.blue_7_robot_HP,&data[26],2);
 8002828:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800282a:	331a      	adds	r3, #26
 800282c:	881b      	ldrh	r3, [r3, #0]
 800282e:	b29a      	uxth	r2, r3
 8002830:	4b24      	ldr	r3, [pc, #144]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002832:	82da      	strh	r2, [r3, #22]
				memcpy(&robot_HP.blue_outpost_HP,&data[28],2);
 8002834:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002836:	331c      	adds	r3, #28
 8002838:	881b      	ldrh	r3, [r3, #0]
 800283a:	b29a      	uxth	r2, r3
 800283c:	4b21      	ldr	r3, [pc, #132]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800283e:	831a      	strh	r2, [r3, #24]
				memcpy(&robot_HP.blue_base_HP,&data[30],2);
 8002840:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002842:	331e      	adds	r3, #30
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29a      	uxth	r2, r3
 8002848:	4b1e      	ldr	r3, [pc, #120]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800284a:	835a      	strh	r2, [r3, #26]
				ROBOT_HP_HEADER_RxEventCallback(robot_HP.red_1_robot_HP, robot_HP.red_2_robot_HP, robot_HP.red_3_robot_HP, robot_HP.red_4_robot_HP, robot_HP.red_7_robot_HP, robot_HP.red_outpost_HP, robot_HP.red_base_HP, robot_HP.blue_1_robot_HP, robot_HP.blue_2_robot_HP, robot_HP.blue_3_robot_HP, robot_HP.blue_4_robot_HP, robot_HP.blue_7_robot_HP, robot_HP.blue_outpost_HP, robot_HP.blue_base_HP);
 800284c:	4b1d      	ldr	r3, [pc, #116]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800284e:	f8b3 c000 	ldrh.w	ip, [r3]
 8002852:	4b1c      	ldr	r3, [pc, #112]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002854:	f8b3 e002 	ldrh.w	lr, [r3, #2]
 8002858:	4b1a      	ldr	r3, [pc, #104]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800285a:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 800285e:	4b19      	ldr	r3, [pc, #100]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002860:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8002864:	4b17      	ldr	r3, [pc, #92]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002866:	8918      	ldrh	r0, [r3, #8]
 8002868:	4b16      	ldr	r3, [pc, #88]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800286a:	895c      	ldrh	r4, [r3, #10]
 800286c:	4b15      	ldr	r3, [pc, #84]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800286e:	899d      	ldrh	r5, [r3, #12]
 8002870:	4b14      	ldr	r3, [pc, #80]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002872:	89de      	ldrh	r6, [r3, #14]
 8002874:	4b13      	ldr	r3, [pc, #76]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002876:	8a1b      	ldrh	r3, [r3, #16]
 8002878:	633b      	str	r3, [r7, #48]	@ 0x30
 800287a:	4b12      	ldr	r3, [pc, #72]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800287c:	8a5a      	ldrh	r2, [r3, #18]
 800287e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002880:	4b10      	ldr	r3, [pc, #64]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002882:	8a99      	ldrh	r1, [r3, #20]
 8002884:	6279      	str	r1, [r7, #36]	@ 0x24
 8002886:	4b0f      	ldr	r3, [pc, #60]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002888:	8ad9      	ldrh	r1, [r3, #22]
 800288a:	4b0e      	ldr	r3, [pc, #56]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 800288c:	8b1a      	ldrh	r2, [r3, #24]
 800288e:	4b0d      	ldr	r3, [pc, #52]	@ (80028c4 <HAL_UARTEx_RxEventCallback+0x4a8>)
 8002890:	8b5b      	ldrh	r3, [r3, #26]
 8002892:	9309      	str	r3, [sp, #36]	@ 0x24
 8002894:	9208      	str	r2, [sp, #32]
 8002896:	9107      	str	r1, [sp, #28]
 8002898:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800289a:	9106      	str	r1, [sp, #24]
 800289c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800289e:	9205      	str	r2, [sp, #20]
 80028a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a2:	9304      	str	r3, [sp, #16]
 80028a4:	9603      	str	r6, [sp, #12]
 80028a6:	9502      	str	r5, [sp, #8]
 80028a8:	9401      	str	r4, [sp, #4]
 80028aa:	9000      	str	r0, [sp, #0]
 80028ac:	464b      	mov	r3, r9
 80028ae:	4642      	mov	r2, r8
 80028b0:	4671      	mov	r1, lr
 80028b2:	4660      	mov	r0, ip
 80028b4:	f000 fe44 	bl	8003540 <ROBOT_HP_HEADER_RxEventCallback>
				break;
 80028b8:	f000 bdfa 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 80028bc:	20000620 	.word	0x20000620
 80028c0:	20000630 	.word	0x20000630
 80028c4:	20000634 	.word	0x20000634
			}
			case EVENT_DATA_HEADER : {
				event_data.resupply_zone_1 = UART_RM25_getBits(data[0],0,1);
 80028c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2201      	movs	r2, #1
 80028ce:	2100      	movs	r1, #0
 80028d0:	4618      	mov	r0, r3
 80028d2:	f000 fdfd 	bl	80034d0 <UART_RM25_getBits>
 80028d6:	4603      	mov	r3, r0
 80028d8:	461a      	mov	r2, r3
 80028da:	4b77      	ldr	r3, [pc, #476]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80028dc:	701a      	strb	r2, [r3, #0]
				event_data.resupply_zone_2 = UART_RM25_getBits(data[0],1,1);
 80028de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	2201      	movs	r2, #1
 80028e4:	2101      	movs	r1, #1
 80028e6:	4618      	mov	r0, r3
 80028e8:	f000 fdf2 	bl	80034d0 <UART_RM25_getBits>
 80028ec:	4603      	mov	r3, r0
 80028ee:	461a      	mov	r2, r3
 80028f0:	4b71      	ldr	r3, [pc, #452]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80028f2:	705a      	strb	r2, [r3, #1]
				event_data.resupply_zone_3 = UART_RM25_getBits(data[0],2,1);
 80028f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	2201      	movs	r2, #1
 80028fa:	2102      	movs	r1, #2
 80028fc:	4618      	mov	r0, r3
 80028fe:	f000 fde7 	bl	80034d0 <UART_RM25_getBits>
 8002902:	4603      	mov	r3, r0
 8002904:	461a      	mov	r2, r3
 8002906:	4b6c      	ldr	r3, [pc, #432]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002908:	709a      	strb	r2, [r3, #2]
				event_data.small_power_rune = UART_RM25_getBits(data[0],3,1);
 800290a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800290c:	781b      	ldrb	r3, [r3, #0]
 800290e:	2201      	movs	r2, #1
 8002910:	2103      	movs	r1, #3
 8002912:	4618      	mov	r0, r3
 8002914:	f000 fddc 	bl	80034d0 <UART_RM25_getBits>
 8002918:	4603      	mov	r3, r0
 800291a:	461a      	mov	r2, r3
 800291c:	4b66      	ldr	r3, [pc, #408]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 800291e:	70da      	strb	r2, [r3, #3]
				event_data.large_power_rune = UART_RM25_getBits(data[0],4,1);
 8002920:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	2201      	movs	r2, #1
 8002926:	2104      	movs	r1, #4
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fdd1 	bl	80034d0 <UART_RM25_getBits>
 800292e:	4603      	mov	r3, r0
 8002930:	461a      	mov	r2, r3
 8002932:	4b61      	ldr	r3, [pc, #388]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002934:	711a      	strb	r2, [r3, #4]
				event_data.central_elevated_ground = UART_RM25_getBits(data[0],5,2);
 8002936:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2202      	movs	r2, #2
 800293c:	2105      	movs	r1, #5
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fdc6 	bl	80034d0 <UART_RM25_getBits>
 8002944:	4603      	mov	r3, r0
 8002946:	461a      	mov	r2, r3
 8002948:	4b5b      	ldr	r3, [pc, #364]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 800294a:	715a      	strb	r2, [r3, #5]
				event_data.trapezoid_elevated_ground = UART_RM25_getBits(data[0],7,1) | (UART_RM25_getBits(data[1],0,1)<<1);
 800294c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	2107      	movs	r1, #7
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fdbb 	bl	80034d0 <UART_RM25_getBits>
 800295a:	4603      	mov	r3, r0
 800295c:	b25c      	sxtb	r4, r3
 800295e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	2201      	movs	r2, #1
 8002964:	2100      	movs	r1, #0
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fdb2 	bl	80034d0 <UART_RM25_getBits>
 800296c:	4603      	mov	r3, r0
 800296e:	b25b      	sxtb	r3, r3
 8002970:	005b      	lsls	r3, r3, #1
 8002972:	b25b      	sxtb	r3, r3
 8002974:	4323      	orrs	r3, r4
 8002976:	b25b      	sxtb	r3, r3
 8002978:	b2da      	uxtb	r2, r3
 800297a:	4b4f      	ldr	r3, [pc, #316]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 800297c:	719a      	strb	r2, [r3, #6]
				uint8_t last_dart_hit[] = {UART_RM25_getBits(data[1],1,8),UART_RM25_getBits(data[2],0,2)};
 800297e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002980:	785b      	ldrb	r3, [r3, #1]
 8002982:	2208      	movs	r2, #8
 8002984:	2101      	movs	r1, #1
 8002986:	4618      	mov	r0, r3
 8002988:	f000 fda2 	bl	80034d0 <UART_RM25_getBits>
 800298c:	4603      	mov	r3, r0
 800298e:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
 8002992:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002994:	789b      	ldrb	r3, [r3, #2]
 8002996:	2202      	movs	r2, #2
 8002998:	2100      	movs	r1, #0
 800299a:	4618      	mov	r0, r3
 800299c:	f000 fd98 	bl	80034d0 <UART_RM25_getBits>
 80029a0:	4603      	mov	r3, r0
 80029a2:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
				memcpy(&event_data.last_dart_hit,last_dart_hit,2);
 80029a6:	f8b7 2050 	ldrh.w	r2, [r7, #80]	@ 0x50
 80029aa:	4b43      	ldr	r3, [pc, #268]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029ac:	811a      	strh	r2, [r3, #8]
				event_data.last_dart_hit_target = UART_RM25_getBits(data[2],2,3);
 80029ae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029b0:	789b      	ldrb	r3, [r3, #2]
 80029b2:	2203      	movs	r2, #3
 80029b4:	2102      	movs	r1, #2
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fd8a 	bl	80034d0 <UART_RM25_getBits>
 80029bc:	4603      	mov	r3, r0
 80029be:	461a      	mov	r2, r3
 80029c0:	4b3d      	ldr	r3, [pc, #244]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029c2:	729a      	strb	r2, [r3, #10]
				event_data.central_buff = UART_RM25_getBits(data[2],5,2);
 80029c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80029c6:	789b      	ldrb	r3, [r3, #2]
 80029c8:	2202      	movs	r2, #2
 80029ca:	2105      	movs	r1, #5
 80029cc:	4618      	mov	r0, r3
 80029ce:	f000 fd7f 	bl	80034d0 <UART_RM25_getBits>
 80029d2:	4603      	mov	r3, r0
 80029d4:	461a      	mov	r2, r3
 80029d6:	4b38      	ldr	r3, [pc, #224]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029d8:	72da      	strb	r2, [r3, #11]
				EVENT_DATA_RxEventCallback(event_data.resupply_zone_1, event_data.resupply_zone_2, event_data.resupply_zone_3, event_data.small_power_rune, event_data.large_power_rune, event_data.central_elevated_ground, event_data.trapezoid_elevated_ground, event_data.last_dart_hit, event_data.last_dart_hit_target, event_data.central_buff);
 80029da:	4b37      	ldr	r3, [pc, #220]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029dc:	781e      	ldrb	r6, [r3, #0]
 80029de:	4b36      	ldr	r3, [pc, #216]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029e0:	f893 c001 	ldrb.w	ip, [r3, #1]
 80029e4:	4b34      	ldr	r3, [pc, #208]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029e6:	f893 e002 	ldrb.w	lr, [r3, #2]
 80029ea:	4b33      	ldr	r3, [pc, #204]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029ec:	f893 8003 	ldrb.w	r8, [r3, #3]
 80029f0:	4b31      	ldr	r3, [pc, #196]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029f2:	791b      	ldrb	r3, [r3, #4]
 80029f4:	4a30      	ldr	r2, [pc, #192]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029f6:	7952      	ldrb	r2, [r2, #5]
 80029f8:	492f      	ldr	r1, [pc, #188]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029fa:	7989      	ldrb	r1, [r1, #6]
 80029fc:	482e      	ldr	r0, [pc, #184]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 80029fe:	8900      	ldrh	r0, [r0, #8]
 8002a00:	4c2d      	ldr	r4, [pc, #180]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002a02:	7aa4      	ldrb	r4, [r4, #10]
 8002a04:	4d2c      	ldr	r5, [pc, #176]	@ (8002ab8 <HAL_UARTEx_RxEventCallback+0x69c>)
 8002a06:	7aed      	ldrb	r5, [r5, #11]
 8002a08:	9505      	str	r5, [sp, #20]
 8002a0a:	9404      	str	r4, [sp, #16]
 8002a0c:	9003      	str	r0, [sp, #12]
 8002a0e:	9102      	str	r1, [sp, #8]
 8002a10:	9201      	str	r2, [sp, #4]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	4643      	mov	r3, r8
 8002a16:	4672      	mov	r2, lr
 8002a18:	4661      	mov	r1, ip
 8002a1a:	4630      	mov	r0, r6
 8002a1c:	f000 fda4 	bl	8003568 <EVENT_DATA_RxEventCallback>
				break;
 8002a20:	f000 bd46 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case REFEREE_WARNING_HEADER : {
				memcpy(&referee_warning.penalty,&data[0],1);
 8002a24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a26:	781a      	ldrb	r2, [r3, #0]
 8002a28:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002a2a:	701a      	strb	r2, [r3, #0]
				memcpy(&referee_warning.offending_robot_id,&data[1],1);
 8002a2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a2e:	3301      	adds	r3, #1
 8002a30:	781a      	ldrb	r2, [r3, #0]
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002a34:	705a      	strb	r2, [r3, #1]
				memcpy(&referee_warning.count,&data[2],1);
 8002a36:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a38:	3302      	adds	r3, #2
 8002a3a:	781a      	ldrb	r2, [r3, #0]
 8002a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8002abc <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002a3e:	709a      	strb	r2, [r3, #2]
				REFEREE_WARNING_RxEventCallback(referee_warning.penalty,referee_warning.offending_robot_id,referee_warning.count);
 8002a40:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	4a1d      	ldr	r2, [pc, #116]	@ (8002abc <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002a46:	7851      	ldrb	r1, [r2, #1]
 8002a48:	4a1c      	ldr	r2, [pc, #112]	@ (8002abc <HAL_UARTEx_RxEventCallback+0x6a0>)
 8002a4a:	7892      	ldrb	r2, [r2, #2]
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	f000 fd9f 	bl	8003590 <REFEREE_WARNING_RxEventCallback>
				break;
 8002a52:	f000 bd2d 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_INFO_HEADER : {
				memcpy(&dart_info.dart_remaining_time,&data[0],1);
 8002a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a58:	781a      	ldrb	r2, [r3, #0]
 8002a5a:	4b19      	ldr	r3, [pc, #100]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002a5c:	701a      	strb	r2, [r3, #0]
				dart_info.last_dart_hit_target = UART_RM25_getBits(data[1],0,3);
 8002a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a60:	785b      	ldrb	r3, [r3, #1]
 8002a62:	2203      	movs	r2, #3
 8002a64:	2100      	movs	r1, #0
 8002a66:	4618      	mov	r0, r3
 8002a68:	f000 fd32 	bl	80034d0 <UART_RM25_getBits>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	461a      	mov	r2, r3
 8002a70:	4b13      	ldr	r3, [pc, #76]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002a72:	705a      	strb	r2, [r3, #1]
				dart_info.last_target_hit_count = UART_RM25_getBits(data[1],3,3);
 8002a74:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a76:	785b      	ldrb	r3, [r3, #1]
 8002a78:	2203      	movs	r2, #3
 8002a7a:	2103      	movs	r1, #3
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f000 fd27 	bl	80034d0 <UART_RM25_getBits>
 8002a82:	4603      	mov	r3, r0
 8002a84:	461a      	mov	r2, r3
 8002a86:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002a88:	709a      	strb	r2, [r3, #2]
				dart_info.current_dart_target = UART_RM25_getBits(data[1],6,2);
 8002a8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002a8c:	785b      	ldrb	r3, [r3, #1]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	2106      	movs	r1, #6
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 fd1c 	bl	80034d0 <UART_RM25_getBits>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	461a      	mov	r2, r3
 8002a9c:	4b08      	ldr	r3, [pc, #32]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002a9e:	70da      	strb	r2, [r3, #3]
				DART_INFO_RxEventCallback(dart_info.dart_remaining_time,dart_info.last_dart_hit_target,dart_info.last_target_hit_count, dart_info.current_dart_target);
 8002aa0:	4b07      	ldr	r3, [pc, #28]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002aa2:	7818      	ldrb	r0, [r3, #0]
 8002aa4:	4b06      	ldr	r3, [pc, #24]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002aa6:	7859      	ldrb	r1, [r3, #1]
 8002aa8:	4b05      	ldr	r3, [pc, #20]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002aaa:	789a      	ldrb	r2, [r3, #2]
 8002aac:	4b04      	ldr	r3, [pc, #16]	@ (8002ac0 <HAL_UARTEx_RxEventCallback+0x6a4>)
 8002aae:	78db      	ldrb	r3, [r3, #3]
 8002ab0:	f000 fd7d 	bl	80035ae <DART_INFO_RxEventCallback>
				break;
 8002ab4:	f000 bcfc 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 8002ab8:	20000650 	.word	0x20000650
 8002abc:	2000065c 	.word	0x2000065c
 8002ac0:	20000660 	.word	0x20000660
			}
			case ROBOT_STATUS_HEADER : {
				memcpy(&robot_status.robot_id,&data[0],1);
 8002ac4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ac6:	781a      	ldrb	r2, [r3, #0]
 8002ac8:	4b9e      	ldr	r3, [pc, #632]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002aca:	701a      	strb	r2, [r3, #0]
				memcpy(&robot_status.robot_level,&data[1],1);
 8002acc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ace:	3301      	adds	r3, #1
 8002ad0:	781a      	ldrb	r2, [r3, #0]
 8002ad2:	4b9c      	ldr	r3, [pc, #624]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002ad4:	705a      	strb	r2, [r3, #1]
				memcpy(&robot_status.current_HP,&data[2],2);
 8002ad6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ad8:	3302      	adds	r3, #2
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	4b99      	ldr	r3, [pc, #612]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002ae0:	805a      	strh	r2, [r3, #2]
				memcpy(&robot_status.maximum_HP,&data[4],2);
 8002ae2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ae4:	3304      	adds	r3, #4
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29a      	uxth	r2, r3
 8002aea:	4b96      	ldr	r3, [pc, #600]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002aec:	809a      	strh	r2, [r3, #4]
				memcpy(&robot_status.shooter_barrel_cooling_value,&data[6],2);
 8002aee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002af0:	3306      	adds	r3, #6
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	4b93      	ldr	r3, [pc, #588]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002af8:	80da      	strh	r2, [r3, #6]
				memcpy(&robot_status.shooter_barrel_heat_limit,&data[8],2);
 8002afa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002afc:	3308      	adds	r3, #8
 8002afe:	881b      	ldrh	r3, [r3, #0]
 8002b00:	b29a      	uxth	r2, r3
 8002b02:	4b90      	ldr	r3, [pc, #576]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b04:	811a      	strh	r2, [r3, #8]
				memcpy(&robot_status.chassis_power_limit,&data[10],2);
 8002b06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b08:	330a      	adds	r3, #10
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	4b8d      	ldr	r3, [pc, #564]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b10:	815a      	strh	r2, [r3, #10]
				robot_status.power_management_gimbal_output = UART_RM25_getBits(data[12],0,1);
 8002b12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b14:	7b1b      	ldrb	r3, [r3, #12]
 8002b16:	2201      	movs	r2, #1
 8002b18:	2100      	movs	r1, #0
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 fcd8 	bl	80034d0 <UART_RM25_getBits>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f003 0301 	and.w	r3, r3, #1
 8002b26:	b2d9      	uxtb	r1, r3
 8002b28:	4a86      	ldr	r2, [pc, #536]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b2a:	7b13      	ldrb	r3, [r2, #12]
 8002b2c:	f361 0300 	bfi	r3, r1, #0, #1
 8002b30:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_chassis_output = UART_RM25_getBits(data[12],1,1);
 8002b32:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b34:	7b1b      	ldrb	r3, [r3, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fcc8 	bl	80034d0 <UART_RM25_getBits>
 8002b40:	4603      	mov	r3, r0
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	b2d9      	uxtb	r1, r3
 8002b48:	4a7e      	ldr	r2, [pc, #504]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b4a:	7b13      	ldrb	r3, [r2, #12]
 8002b4c:	f361 0341 	bfi	r3, r1, #1, #1
 8002b50:	7313      	strb	r3, [r2, #12]
				robot_status.power_management_shooter_output = UART_RM25_getBits(data[12],2,1);
 8002b52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002b54:	7b1b      	ldrb	r3, [r3, #12]
 8002b56:	2201      	movs	r2, #1
 8002b58:	2102      	movs	r1, #2
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fcb8 	bl	80034d0 <UART_RM25_getBits>
 8002b60:	4603      	mov	r3, r0
 8002b62:	f003 0301 	and.w	r3, r3, #1
 8002b66:	b2d9      	uxtb	r1, r3
 8002b68:	4a76      	ldr	r2, [pc, #472]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b6a:	7b13      	ldrb	r3, [r2, #12]
 8002b6c:	f361 0382 	bfi	r3, r1, #2, #1
 8002b70:	7313      	strb	r3, [r2, #12]
				ROBOT_STATUS_RxEventCallback(robot_status.robot_id, robot_status.robot_level, robot_status.current_HP, robot_status.maximum_HP, robot_status.shooter_barrel_cooling_value, robot_status.shooter_barrel_heat_limit, robot_status.chassis_power_limit, robot_status.power_management_gimbal_output, robot_status.power_management_chassis_output, robot_status.power_management_shooter_output);
 8002b72:	4b74      	ldr	r3, [pc, #464]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b74:	781c      	ldrb	r4, [r3, #0]
 8002b76:	4b73      	ldr	r3, [pc, #460]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b78:	785d      	ldrb	r5, [r3, #1]
 8002b7a:	4b72      	ldr	r3, [pc, #456]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b7c:	885e      	ldrh	r6, [r3, #2]
 8002b7e:	4b71      	ldr	r3, [pc, #452]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b80:	f8b3 c004 	ldrh.w	ip, [r3, #4]
 8002b84:	4b6f      	ldr	r3, [pc, #444]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b86:	88db      	ldrh	r3, [r3, #6]
 8002b88:	4a6e      	ldr	r2, [pc, #440]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b8a:	8912      	ldrh	r2, [r2, #8]
 8002b8c:	496d      	ldr	r1, [pc, #436]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b8e:	8949      	ldrh	r1, [r1, #10]
 8002b90:	486c      	ldr	r0, [pc, #432]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b92:	7b00      	ldrb	r0, [r0, #12]
 8002b94:	f3c0 0000 	ubfx	r0, r0, #0, #1
 8002b98:	b2c0      	uxtb	r0, r0
 8002b9a:	6338      	str	r0, [r7, #48]	@ 0x30
 8002b9c:	4869      	ldr	r0, [pc, #420]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002b9e:	7b00      	ldrb	r0, [r0, #12]
 8002ba0:	f3c0 0040 	ubfx	r0, r0, #1, #1
 8002ba4:	b2c0      	uxtb	r0, r0
 8002ba6:	62b8      	str	r0, [r7, #40]	@ 0x28
 8002ba8:	4866      	ldr	r0, [pc, #408]	@ (8002d44 <HAL_UARTEx_RxEventCallback+0x928>)
 8002baa:	7b00      	ldrb	r0, [r0, #12]
 8002bac:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002bb0:	b2c0      	uxtb	r0, r0
 8002bb2:	9005      	str	r0, [sp, #20]
 8002bb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002bb6:	9004      	str	r0, [sp, #16]
 8002bb8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002bba:	9003      	str	r0, [sp, #12]
 8002bbc:	9102      	str	r1, [sp, #8]
 8002bbe:	9201      	str	r2, [sp, #4]
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	4663      	mov	r3, ip
 8002bc4:	4632      	mov	r2, r6
 8002bc6:	4629      	mov	r1, r5
 8002bc8:	4620      	mov	r0, r4
 8002bca:	f7fe fa63 	bl	8001094 <ROBOT_STATUS_RxEventCallback>
				break;
 8002bce:	f000 bc6f 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case POWER_HEAT_DATA_HEADER : {
				memcpy(&power_heat_data.buffer_energy,&data[8],2);
 8002bd2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bd4:	3308      	adds	r3, #8
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	4b5b      	ldr	r3, [pc, #364]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002bdc:	801a      	strh	r2, [r3, #0]
				memcpy(&power_heat_data.shooter_17mm_1_barrel_heat,&data[10],2);
 8002bde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002be0:	330a      	adds	r3, #10
 8002be2:	881b      	ldrh	r3, [r3, #0]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	4b58      	ldr	r3, [pc, #352]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002be8:	805a      	strh	r2, [r3, #2]
				memcpy(&power_heat_data.shooter_17mm_2_barrel_heat,&data[12],2);
 8002bea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bec:	330c      	adds	r3, #12
 8002bee:	881b      	ldrh	r3, [r3, #0]
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	4b55      	ldr	r3, [pc, #340]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002bf4:	809a      	strh	r2, [r3, #4]
				memcpy(&power_heat_data.shooter_42mm_barrel_heat,&data[14],2);
 8002bf6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002bf8:	330e      	adds	r3, #14
 8002bfa:	881b      	ldrh	r3, [r3, #0]
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b52      	ldr	r3, [pc, #328]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002c00:	80da      	strh	r2, [r3, #6]
				POWER_HEAT_DATA_RxEventCallback(power_heat_data.buffer_energy, power_heat_data.shooter_17mm_1_barrel_heat, power_heat_data.shooter_17mm_2_barrel_heat, power_heat_data.shooter_42mm_barrel_heat);
 8002c02:	4b51      	ldr	r3, [pc, #324]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002c04:	8818      	ldrh	r0, [r3, #0]
 8002c06:	4b50      	ldr	r3, [pc, #320]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002c08:	8859      	ldrh	r1, [r3, #2]
 8002c0a:	4b4f      	ldr	r3, [pc, #316]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002c0c:	889a      	ldrh	r2, [r3, #4]
 8002c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8002d48 <HAL_UARTEx_RxEventCallback+0x92c>)
 8002c10:	88db      	ldrh	r3, [r3, #6]
 8002c12:	f7fe fa83 	bl	800111c <POWER_HEAT_DATA_RxEventCallback>
				break;
 8002c16:	f000 bc4b 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case ROBOT_POSITION_HEADER : {
				memcpy(&robot_position.x,&data[0],4);
 8002c1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	461a      	mov	r2, r3
 8002c20:	4b4a      	ldr	r3, [pc, #296]	@ (8002d4c <HAL_UARTEx_RxEventCallback+0x930>)
 8002c22:	601a      	str	r2, [r3, #0]
				memcpy(&robot_position.y,&data[0],4);
 8002c24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	461a      	mov	r2, r3
 8002c2a:	4b48      	ldr	r3, [pc, #288]	@ (8002d4c <HAL_UARTEx_RxEventCallback+0x930>)
 8002c2c:	605a      	str	r2, [r3, #4]
				memcpy(&robot_position.angle,&data[0],4);
 8002c2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4b45      	ldr	r3, [pc, #276]	@ (8002d4c <HAL_UARTEx_RxEventCallback+0x930>)
 8002c36:	609a      	str	r2, [r3, #8]
				ROBOT_POSITION_RxEventCallback(robot_position.x, robot_position.y, robot_position.angle);
 8002c38:	4b44      	ldr	r3, [pc, #272]	@ (8002d4c <HAL_UARTEx_RxEventCallback+0x930>)
 8002c3a:	edd3 7a00 	vldr	s15, [r3]
 8002c3e:	4b43      	ldr	r3, [pc, #268]	@ (8002d4c <HAL_UARTEx_RxEventCallback+0x930>)
 8002c40:	ed93 7a01 	vldr	s14, [r3, #4]
 8002c44:	4b41      	ldr	r3, [pc, #260]	@ (8002d4c <HAL_UARTEx_RxEventCallback+0x930>)
 8002c46:	edd3 6a02 	vldr	s13, [r3, #8]
 8002c4a:	eeb0 1a66 	vmov.f32	s2, s13
 8002c4e:	eef0 0a47 	vmov.f32	s1, s14
 8002c52:	eeb0 0a67 	vmov.f32	s0, s15
 8002c56:	f000 fcbe 	bl	80035d6 <ROBOT_POSITION_RxEventCallback>
				break;
 8002c5a:	f000 bc29 	b.w	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case BUFF_HEADER : {
				memcpy(&buffs.recovery_buff,&data[0],1);
 8002c5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c60:	781a      	ldrb	r2, [r3, #0]
 8002c62:	4b3b      	ldr	r3, [pc, #236]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002c64:	701a      	strb	r2, [r3, #0]
				memcpy(&buffs.cooling_buff,&data[1],1);
 8002c66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c68:	3301      	adds	r3, #1
 8002c6a:	781a      	ldrb	r2, [r3, #0]
 8002c6c:	4b38      	ldr	r3, [pc, #224]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002c6e:	705a      	strb	r2, [r3, #1]
				memcpy(&buffs.defence_buff,&data[2],1);
 8002c70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c72:	3302      	adds	r3, #2
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	4b36      	ldr	r3, [pc, #216]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002c78:	709a      	strb	r2, [r3, #2]
				memcpy(&buffs.vulnerability_buff,&data[3],1);
 8002c7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c7c:	3303      	adds	r3, #3
 8002c7e:	781a      	ldrb	r2, [r3, #0]
 8002c80:	4b33      	ldr	r3, [pc, #204]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002c82:	70da      	strb	r2, [r3, #3]
				memcpy(&buffs.attack_buff,&data[4],2);
 8002c84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c86:	3304      	adds	r3, #4
 8002c88:	881b      	ldrh	r3, [r3, #0]
 8002c8a:	b29a      	uxth	r2, r3
 8002c8c:	4b30      	ldr	r3, [pc, #192]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002c8e:	809a      	strh	r2, [r3, #4]
				memcpy(&buffs.remaining_energy,&data[5],1);
 8002c90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c92:	3305      	adds	r3, #5
 8002c94:	781a      	ldrb	r2, [r3, #0]
 8002c96:	4b2e      	ldr	r3, [pc, #184]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002c98:	719a      	strb	r2, [r3, #6]
				BUFF_RxEventCallback(buffs.recovery_buff, buffs.cooling_buff, buffs.defence_buff, buffs.vulnerability_buff, buffs.attack_buff, buffs.remaining_energy);
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002c9c:	7818      	ldrb	r0, [r3, #0]
 8002c9e:	4b2c      	ldr	r3, [pc, #176]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002ca0:	7859      	ldrb	r1, [r3, #1]
 8002ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002ca4:	789c      	ldrb	r4, [r3, #2]
 8002ca6:	4b2a      	ldr	r3, [pc, #168]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002ca8:	78dd      	ldrb	r5, [r3, #3]
 8002caa:	4b29      	ldr	r3, [pc, #164]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002cac:	889b      	ldrh	r3, [r3, #4]
 8002cae:	4a28      	ldr	r2, [pc, #160]	@ (8002d50 <HAL_UARTEx_RxEventCallback+0x934>)
 8002cb0:	7992      	ldrb	r2, [r2, #6]
 8002cb2:	9201      	str	r2, [sp, #4]
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	462b      	mov	r3, r5
 8002cb8:	4622      	mov	r2, r4
 8002cba:	f000 fc9b 	bl	80035f4 <BUFF_RxEventCallback>
				break;
 8002cbe:	e3f7      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DAMAGE_DATA_HEADER : {
				damage_data.armor_id = UART_RM25_getBits(data[0],0,4);
 8002cc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	2100      	movs	r1, #0
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f000 fc01 	bl	80034d0 <UART_RM25_getBits>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	461a      	mov	r2, r3
 8002cd2:	4b20      	ldr	r3, [pc, #128]	@ (8002d54 <HAL_UARTEx_RxEventCallback+0x938>)
 8002cd4:	701a      	strb	r2, [r3, #0]
				damage_data.HP_deduction_reason = UART_RM25_getBits(data[0],4,4);
 8002cd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	2204      	movs	r2, #4
 8002cdc:	2104      	movs	r1, #4
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f000 fbf6 	bl	80034d0 <UART_RM25_getBits>
 8002ce4:	4603      	mov	r3, r0
 8002ce6:	461a      	mov	r2, r3
 8002ce8:	4b1a      	ldr	r3, [pc, #104]	@ (8002d54 <HAL_UARTEx_RxEventCallback+0x938>)
 8002cea:	705a      	strb	r2, [r3, #1]
				DAMAGE_SOURCE_RxEventCallback(damage_data.armor_id, damage_data.HP_deduction_reason);
 8002cec:	4b19      	ldr	r3, [pc, #100]	@ (8002d54 <HAL_UARTEx_RxEventCallback+0x938>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	4a18      	ldr	r2, [pc, #96]	@ (8002d54 <HAL_UARTEx_RxEventCallback+0x938>)
 8002cf2:	7852      	ldrb	r2, [r2, #1]
 8002cf4:	4611      	mov	r1, r2
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fc90 	bl	800361c <DAMAGE_SOURCE_RxEventCallback>
				break;
 8002cfc:	e3d8      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case PROJECTILE_INFO_HEADER : {
				memcpy(&shoot_data.bullet_type,&data[0],1);
 8002cfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d00:	781a      	ldrb	r2, [r3, #0]
 8002d02:	4b15      	ldr	r3, [pc, #84]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d04:	701a      	strb	r2, [r3, #0]
				memcpy(&shoot_data.shooter_number,&data[1],1);
 8002d06:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d08:	3301      	adds	r3, #1
 8002d0a:	781a      	ldrb	r2, [r3, #0]
 8002d0c:	4b12      	ldr	r3, [pc, #72]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d0e:	705a      	strb	r2, [r3, #1]
				memcpy(&shoot_data.launching_frequency,&data[2],1);
 8002d10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d12:	3302      	adds	r3, #2
 8002d14:	781a      	ldrb	r2, [r3, #0]
 8002d16:	4b10      	ldr	r3, [pc, #64]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d18:	709a      	strb	r2, [r3, #2]
				memcpy(&shoot_data.initial_speed,&data[3],4);
 8002d1a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d1c:	3303      	adds	r3, #3
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	461a      	mov	r2, r3
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d24:	605a      	str	r2, [r3, #4]
				PROJECTILE_INFO_RxEventCallback(shoot_data.bullet_type, shoot_data.shooter_number, shoot_data.launching_frequency,shoot_data.initial_speed);
 8002d26:	4b0c      	ldr	r3, [pc, #48]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d2c:	7851      	ldrb	r1, [r2, #1]
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d30:	7892      	ldrb	r2, [r2, #2]
 8002d32:	4809      	ldr	r0, [pc, #36]	@ (8002d58 <HAL_UARTEx_RxEventCallback+0x93c>)
 8002d34:	edd0 7a01 	vldr	s15, [r0, #4]
 8002d38:	eeb0 0a67 	vmov.f32	s0, s15
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7fe fba3 	bl	8001488 <PROJECTILE_INFO_RxEventCallback>
				break;
 8002d42:	e3b5      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 8002d44:	20000664 	.word	0x20000664
 8002d48:	20000674 	.word	0x20000674
 8002d4c:	2000067c 	.word	0x2000067c
 8002d50:	20000688 	.word	0x20000688
 8002d54:	20000690 	.word	0x20000690
 8002d58:	20000694 	.word	0x20000694
			}
			case PROJECTILE_ALLOWANCE_HEADER : {
				memcpy(&projectile_allowance.projectile_allowance_17mm,&data[0],2);
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d5e:	881b      	ldrh	r3, [r3, #0]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	4b6f      	ldr	r3, [pc, #444]	@ (8002f20 <HAL_UARTEx_RxEventCallback+0xb04>)
 8002d64:	801a      	strh	r2, [r3, #0]
				memcpy(&projectile_allowance.projectile_allowance_42mm,&data[2],2);
 8002d66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d68:	3302      	adds	r3, #2
 8002d6a:	881b      	ldrh	r3, [r3, #0]
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	4b6c      	ldr	r3, [pc, #432]	@ (8002f20 <HAL_UARTEx_RxEventCallback+0xb04>)
 8002d70:	805a      	strh	r2, [r3, #2]
				memcpy(&projectile_allowance.remaining_gold_coin,&data[4],2);
 8002d72:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d74:	3304      	adds	r3, #4
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	4b69      	ldr	r3, [pc, #420]	@ (8002f20 <HAL_UARTEx_RxEventCallback+0xb04>)
 8002d7c:	809a      	strh	r2, [r3, #4]
				PROJECTILE_ALLOWANCE_RxEventCallback(projectile_allowance.projectile_allowance_17mm, projectile_allowance.projectile_allowance_42mm, projectile_allowance.remaining_gold_coin);
 8002d7e:	4b68      	ldr	r3, [pc, #416]	@ (8002f20 <HAL_UARTEx_RxEventCallback+0xb04>)
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	4a67      	ldr	r2, [pc, #412]	@ (8002f20 <HAL_UARTEx_RxEventCallback+0xb04>)
 8002d84:	8851      	ldrh	r1, [r2, #2]
 8002d86:	4a66      	ldr	r2, [pc, #408]	@ (8002f20 <HAL_UARTEx_RxEventCallback+0xb04>)
 8002d88:	8892      	ldrh	r2, [r2, #4]
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f000 fc54 	bl	8003638 <PROJECTILE_ALLOWANCE_RxEventCallback>
				break;
 8002d90:	e38e      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RFID_HEADER : {
				memcpy(&rfid_status.rfid_status,data,4);
 8002d92:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b62      	ldr	r3, [pc, #392]	@ (8002f24 <HAL_UARTEx_RxEventCallback+0xb08>)
 8002d9a:	601a      	str	r2, [r3, #0]
				RFID_RxEventCallback(rfid_status.rfid_status);
 8002d9c:	4b61      	ldr	r3, [pc, #388]	@ (8002f24 <HAL_UARTEx_RxEventCallback+0xb08>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f000 fc58 	bl	8003656 <RFID_RxEventCallback>
				break;
 8002da6:	e383      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case DART_COMMAND_HEADER : {
				memcpy(&dart_client_cmd.dart_launch_opening_status,&data[0],1);
 8002da8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002daa:	781a      	ldrb	r2, [r3, #0]
 8002dac:	4b5e      	ldr	r3, [pc, #376]	@ (8002f28 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8002dae:	701a      	strb	r2, [r3, #0]
				memcpy(&dart_client_cmd.target_change_remaining_time,&data[2],2);
 8002db0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002db2:	3302      	adds	r3, #2
 8002db4:	881b      	ldrh	r3, [r3, #0]
 8002db6:	b29a      	uxth	r2, r3
 8002db8:	4b5b      	ldr	r3, [pc, #364]	@ (8002f28 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8002dba:	805a      	strh	r2, [r3, #2]
				memcpy(&dart_client_cmd.latest_launch_cmd_remaining_time,&data[4],2);
 8002dbc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	4b58      	ldr	r3, [pc, #352]	@ (8002f28 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8002dc6:	809a      	strh	r2, [r3, #4]
				DART_COMMAND_RxEventCallback(dart_client_cmd.dart_launch_opening_status, dart_client_cmd.target_change_remaining_time, dart_client_cmd.latest_launch_cmd_remaining_time);
 8002dc8:	4b57      	ldr	r3, [pc, #348]	@ (8002f28 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	4a56      	ldr	r2, [pc, #344]	@ (8002f28 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8002dce:	8851      	ldrh	r1, [r2, #2]
 8002dd0:	4a55      	ldr	r2, [pc, #340]	@ (8002f28 <HAL_UARTEx_RxEventCallback+0xb0c>)
 8002dd2:	8892      	ldrh	r2, [r2, #4]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fc48 	bl	800366a <DART_COMMAND_RxEventCallback>
				break;
 8002dda:	e369      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case TEAM_POSITION_HEADER : {
				memcpy(&robot_positions.hero_x,&data[0],4);
 8002ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b52      	ldr	r3, [pc, #328]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002de4:	601a      	str	r2, [r3, #0]
				memcpy(&robot_positions.hero_y,&data[4],4);
 8002de6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002de8:	3304      	adds	r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b4f      	ldr	r3, [pc, #316]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002df0:	605a      	str	r2, [r3, #4]
				memcpy(&robot_positions.engineer_x,&data[8],4);
 8002df2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002df4:	3308      	adds	r3, #8
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	461a      	mov	r2, r3
 8002dfa:	4b4c      	ldr	r3, [pc, #304]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002dfc:	609a      	str	r2, [r3, #8]
				memcpy(&robot_positions.engineer_y,&data[12],4);
 8002dfe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e00:	330c      	adds	r3, #12
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	461a      	mov	r2, r3
 8002e06:	4b49      	ldr	r3, [pc, #292]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e08:	60da      	str	r2, [r3, #12]
				memcpy(&robot_positions.standard_3_x,&data[16],4);
 8002e0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e0c:	3310      	adds	r3, #16
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	461a      	mov	r2, r3
 8002e12:	4b46      	ldr	r3, [pc, #280]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e14:	611a      	str	r2, [r3, #16]
				memcpy(&robot_positions.standard_3_y,&data[20],4);
 8002e16:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e18:	3314      	adds	r3, #20
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4b43      	ldr	r3, [pc, #268]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e20:	615a      	str	r2, [r3, #20]
				memcpy(&robot_positions.standard_4_x,&data[24],4);
 8002e22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e24:	3318      	adds	r3, #24
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b40      	ldr	r3, [pc, #256]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e2c:	619a      	str	r2, [r3, #24]
				memcpy(&robot_positions.standard_4_y,&data[28],4);
 8002e2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e30:	331c      	adds	r3, #28
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	4b3d      	ldr	r3, [pc, #244]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e38:	61da      	str	r2, [r3, #28]
				TEAM_POSITION_RxEventCallback(robot_positions.hero_x, robot_positions.hero_y, robot_positions.engineer_x, robot_positions.engineer_y, robot_positions.standard_3_x, robot_positions.standard_3_y, robot_positions.standard_4_x, robot_positions.standard_4_y, robot_positions.standard_5_x, robot_positions.standard_5_y);
 8002e3a:	4b3c      	ldr	r3, [pc, #240]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	4b3a      	ldr	r3, [pc, #232]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e42:	ed93 7a01 	vldr	s14, [r3, #4]
 8002e46:	4b39      	ldr	r3, [pc, #228]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e48:	edd3 6a02 	vldr	s13, [r3, #8]
 8002e4c:	4b37      	ldr	r3, [pc, #220]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e4e:	ed93 6a03 	vldr	s12, [r3, #12]
 8002e52:	4b36      	ldr	r3, [pc, #216]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e54:	edd3 5a04 	vldr	s11, [r3, #16]
 8002e58:	4b34      	ldr	r3, [pc, #208]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e5a:	ed93 5a05 	vldr	s10, [r3, #20]
 8002e5e:	4b33      	ldr	r3, [pc, #204]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e60:	ed93 3a06 	vldr	s6, [r3, #24]
 8002e64:	4b31      	ldr	r3, [pc, #196]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e66:	edd3 3a07 	vldr	s7, [r3, #28]
 8002e6a:	4b30      	ldr	r3, [pc, #192]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e6c:	ed93 4a08 	vldr	s8, [r3, #32]
 8002e70:	4b2e      	ldr	r3, [pc, #184]	@ (8002f2c <HAL_UARTEx_RxEventCallback+0xb10>)
 8002e72:	edd3 4a09 	vldr	s9, [r3, #36]	@ 0x24
 8002e76:	eef0 2a45 	vmov.f32	s5, s10
 8002e7a:	eeb0 2a65 	vmov.f32	s4, s11
 8002e7e:	eef0 1a46 	vmov.f32	s3, s12
 8002e82:	eeb0 1a66 	vmov.f32	s2, s13
 8002e86:	eef0 0a47 	vmov.f32	s1, s14
 8002e8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8e:	f000 fbfb 	bl	8003688 <TEAM_POSITION_RxEventCallback>
				break;
 8002e92:	e30d      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_MARKING_HEADER : {
				radar_mark_data.mark_hero_progress = UART_RM25_getBits(data[0],0,1);
 8002e94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2201      	movs	r2, #1
 8002e9a:	2100      	movs	r1, #0
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fb17 	bl	80034d0 <UART_RM25_getBits>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	4b22      	ldr	r3, [pc, #136]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002ea8:	701a      	strb	r2, [r3, #0]
				radar_mark_data.mark_engineer_progress = UART_RM25_getBits(data[0],1,1);
 8002eaa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f000 fb0c 	bl	80034d0 <UART_RM25_getBits>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	461a      	mov	r2, r3
 8002ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002ebe:	705a      	strb	r2, [r3, #1]
				radar_mark_data.mark_standard_3_progress = UART_RM25_getBits(data[0],2,1);
 8002ec0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f000 fb01 	bl	80034d0 <UART_RM25_getBits>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4b17      	ldr	r3, [pc, #92]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002ed4:	709a      	strb	r2, [r3, #2]
				radar_mark_data.mark_standard_4_progress = UART_RM25_getBits(data[0],3,1);
 8002ed6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	2201      	movs	r2, #1
 8002edc:	2103      	movs	r1, #3
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 faf6 	bl	80034d0 <UART_RM25_getBits>
 8002ee4:	4603      	mov	r3, r0
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	4b11      	ldr	r3, [pc, #68]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002eea:	70da      	strb	r2, [r3, #3]
				radar_mark_data.mark_sentry_progress = UART_RM25_getBits(data[0],4,1);
 8002eec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	2104      	movs	r1, #4
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f000 faeb 	bl	80034d0 <UART_RM25_getBits>
 8002efa:	4603      	mov	r3, r0
 8002efc:	461a      	mov	r2, r3
 8002efe:	4b0c      	ldr	r3, [pc, #48]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002f00:	711a      	strb	r2, [r3, #4]
				RADAR_MARKING_RxEventCallback(radar_mark_data.mark_hero_progress, radar_mark_data.mark_engineer_progress, radar_mark_data.mark_standard_3_progress, radar_mark_data.mark_standard_4_progress, radar_mark_data.mark_sentry_progress);
 8002f02:	4b0b      	ldr	r3, [pc, #44]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002f04:	7818      	ldrb	r0, [r3, #0]
 8002f06:	4b0a      	ldr	r3, [pc, #40]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002f08:	7859      	ldrb	r1, [r3, #1]
 8002f0a:	4b09      	ldr	r3, [pc, #36]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002f0c:	789a      	ldrb	r2, [r3, #2]
 8002f0e:	4b08      	ldr	r3, [pc, #32]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002f10:	78dc      	ldrb	r4, [r3, #3]
 8002f12:	4b07      	ldr	r3, [pc, #28]	@ (8002f30 <HAL_UARTEx_RxEventCallback+0xb14>)
 8002f14:	791b      	ldrb	r3, [r3, #4]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	4623      	mov	r3, r4
 8002f1a:	f000 fbd2 	bl	80036c2 <RADAR_MARKING_RxEventCallback>
				break;
 8002f1e:	e2c7      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 8002f20:	2000069c 	.word	0x2000069c
 8002f24:	200006a4 	.word	0x200006a4
 8002f28:	200006a8 	.word	0x200006a8
 8002f2c:	200006b0 	.word	0x200006b0
 8002f30:	200006d8 	.word	0x200006d8
			}
			case SENTRY_HEADER : {
				uint8_t exchanged_projectiles_buff[2] = {data[0],UART_RM25_getBits(data[1],0,3)};
 8002f34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
 8002f3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f3e:	785b      	ldrb	r3, [r3, #1]
 8002f40:	2203      	movs	r2, #3
 8002f42:	2100      	movs	r1, #0
 8002f44:	4618      	mov	r0, r3
 8002f46:	f000 fac3 	bl	80034d0 <UART_RM25_getBits>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
				memcpy(&sentry_info.exchanged_projectiles,&exchanged_projectiles_buff,2);
 8002f50:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8002f54:	4b88      	ldr	r3, [pc, #544]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8002f56:	801a      	strh	r2, [r3, #0]
				sentry_info.projectile_exchange_count = UART_RM25_getBits(data[1],3,4);
 8002f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f5a:	785b      	ldrb	r3, [r3, #1]
 8002f5c:	2204      	movs	r2, #4
 8002f5e:	2103      	movs	r1, #3
 8002f60:	4618      	mov	r0, r3
 8002f62:	f000 fab5 	bl	80034d0 <UART_RM25_getBits>
 8002f66:	4603      	mov	r3, r0
 8002f68:	461a      	mov	r2, r3
 8002f6a:	4b83      	ldr	r3, [pc, #524]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8002f6c:	709a      	strb	r2, [r3, #2]
				sentry_info.HP_exchange_count = UART_RM25_getBits(data[1],7,1) | (UART_RM25_getBits(data[2],0,3)<<1);
 8002f6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	2201      	movs	r2, #1
 8002f74:	2107      	movs	r1, #7
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 faaa 	bl	80034d0 <UART_RM25_getBits>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	b25c      	sxtb	r4, r3
 8002f80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002f82:	789b      	ldrb	r3, [r3, #2]
 8002f84:	2203      	movs	r2, #3
 8002f86:	2100      	movs	r1, #0
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 faa1 	bl	80034d0 <UART_RM25_getBits>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	b25b      	sxtb	r3, r3
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	b25b      	sxtb	r3, r3
 8002f96:	4323      	orrs	r3, r4
 8002f98:	b25b      	sxtb	r3, r3
 8002f9a:	b2da      	uxtb	r2, r3
 8002f9c:	4b76      	ldr	r3, [pc, #472]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8002f9e:	70da      	strb	r2, [r3, #3]
				sentry_info.confirm_free_respawn = UART_RM25_getBits(data[2],3,1);
 8002fa0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fa2:	789b      	ldrb	r3, [r3, #2]
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	2103      	movs	r1, #3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 fa91 	bl	80034d0 <UART_RM25_getBits>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	4b71      	ldr	r3, [pc, #452]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8002fb4:	711a      	strb	r2, [r3, #4]
				sentry_info.instant_respawn_available = UART_RM25_getBits(data[2],4,1);
 8002fb6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fb8:	789b      	ldrb	r3, [r3, #2]
 8002fba:	2201      	movs	r2, #1
 8002fbc:	2104      	movs	r1, #4
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	f000 fa86 	bl	80034d0 <UART_RM25_getBits>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	4b6b      	ldr	r3, [pc, #428]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8002fca:	715a      	strb	r2, [r3, #5]
				uint8_t instant_respawn_cost_buff[2] = {UART_RM25_getBits(data[2],5,3)| (UART_RM25_getBits(data[3],0,5)<<3),UART_RM25_getBits(data[3],5,2)};
 8002fcc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fce:	789b      	ldrb	r3, [r3, #2]
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	2105      	movs	r1, #5
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 fa7b 	bl	80034d0 <UART_RM25_getBits>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	b25c      	sxtb	r4, r3
 8002fde:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002fe0:	78db      	ldrb	r3, [r3, #3]
 8002fe2:	2205      	movs	r2, #5
 8002fe4:	2100      	movs	r1, #0
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	f000 fa72 	bl	80034d0 <UART_RM25_getBits>
 8002fec:	4603      	mov	r3, r0
 8002fee:	b25b      	sxtb	r3, r3
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	b25b      	sxtb	r3, r3
 8002ff4:	4323      	orrs	r3, r4
 8002ff6:	b25b      	sxtb	r3, r3
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8002ffe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003000:	78db      	ldrb	r3, [r3, #3]
 8003002:	2202      	movs	r2, #2
 8003004:	2105      	movs	r1, #5
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fa62 	bl	80034d0 <UART_RM25_getBits>
 800300c:	4603      	mov	r3, r0
 800300e:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
				memcpy(&sentry_info.instant_respawn_cost,instant_respawn_cost_buff,2);
 8003012:	f8b7 2048 	ldrh.w	r2, [r7, #72]	@ 0x48
 8003016:	4b58      	ldr	r3, [pc, #352]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003018:	80da      	strh	r2, [r3, #6]
				sentry_info.in_combat = UART_RM25_getBits(data[4],0,1);
 800301a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800301c:	791b      	ldrb	r3, [r3, #4]
 800301e:	2201      	movs	r2, #1
 8003020:	2100      	movs	r1, #0
 8003022:	4618      	mov	r0, r3
 8003024:	f000 fa54 	bl	80034d0 <UART_RM25_getBits>
 8003028:	4603      	mov	r3, r0
 800302a:	461a      	mov	r2, r3
 800302c:	4b52      	ldr	r3, [pc, #328]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800302e:	721a      	strb	r2, [r3, #8]
				uint8_t remaining_allowance_to_exchange_buff[2] = {UART_RM25_getBits(data[4],1,7)|(UART_RM25_getBits(data[5],0,1)<<7),UART_RM25_getBits(data[5],1,3)};
 8003030:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003032:	791b      	ldrb	r3, [r3, #4]
 8003034:	2207      	movs	r2, #7
 8003036:	2101      	movs	r1, #1
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa49 	bl	80034d0 <UART_RM25_getBits>
 800303e:	4603      	mov	r3, r0
 8003040:	b25c      	sxtb	r4, r3
 8003042:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003044:	795b      	ldrb	r3, [r3, #5]
 8003046:	2201      	movs	r2, #1
 8003048:	2100      	movs	r1, #0
 800304a:	4618      	mov	r0, r3
 800304c:	f000 fa40 	bl	80034d0 <UART_RM25_getBits>
 8003050:	4603      	mov	r3, r0
 8003052:	b25b      	sxtb	r3, r3
 8003054:	01db      	lsls	r3, r3, #7
 8003056:	b25b      	sxtb	r3, r3
 8003058:	4323      	orrs	r3, r4
 800305a:	b25b      	sxtb	r3, r3
 800305c:	b2db      	uxtb	r3, r3
 800305e:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8003062:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003064:	795b      	ldrb	r3, [r3, #5]
 8003066:	2203      	movs	r2, #3
 8003068:	2101      	movs	r1, #1
 800306a:	4618      	mov	r0, r3
 800306c:	f000 fa30 	bl	80034d0 <UART_RM25_getBits>
 8003070:	4603      	mov	r3, r0
 8003072:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
				memcpy(&sentry_info.remaining_allowance_to_exchange,remaining_allowance_to_exchange_buff,2);
 8003076:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 800307a:	4b3f      	ldr	r3, [pc, #252]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800307c:	815a      	strh	r2, [r3, #10]
				SENTRY_RxEventCallback(sentry_info.exchanged_projectiles, sentry_info.projectile_exchange_count, sentry_info.HP_exchange_count, sentry_info.confirm_free_respawn, sentry_info.instant_respawn_available, sentry_info.instant_respawn_cost, sentry_info.in_combat, sentry_info.remaining_allowance_to_exchange);
 800307e:	4b3e      	ldr	r3, [pc, #248]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003080:	881c      	ldrh	r4, [r3, #0]
 8003082:	4b3d      	ldr	r3, [pc, #244]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003084:	789d      	ldrb	r5, [r3, #2]
 8003086:	4b3c      	ldr	r3, [pc, #240]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003088:	78de      	ldrb	r6, [r3, #3]
 800308a:	4b3b      	ldr	r3, [pc, #236]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800308c:	f893 c004 	ldrb.w	ip, [r3, #4]
 8003090:	4b39      	ldr	r3, [pc, #228]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003092:	795b      	ldrb	r3, [r3, #5]
 8003094:	4a38      	ldr	r2, [pc, #224]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 8003096:	88d2      	ldrh	r2, [r2, #6]
 8003098:	4937      	ldr	r1, [pc, #220]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800309a:	7a09      	ldrb	r1, [r1, #8]
 800309c:	4836      	ldr	r0, [pc, #216]	@ (8003178 <HAL_UARTEx_RxEventCallback+0xd5c>)
 800309e:	8940      	ldrh	r0, [r0, #10]
 80030a0:	9003      	str	r0, [sp, #12]
 80030a2:	9102      	str	r1, [sp, #8]
 80030a4:	9201      	str	r2, [sp, #4]
 80030a6:	9300      	str	r3, [sp, #0]
 80030a8:	4663      	mov	r3, ip
 80030aa:	4632      	mov	r2, r6
 80030ac:	4629      	mov	r1, r5
 80030ae:	4620      	mov	r0, r4
 80030b0:	f000 fb1b 	bl	80036ea <SENTRY_RxEventCallback>
				break;
 80030b4:	e1fc      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case RADAR_BUFF_HEADER : {
				radar_info.double_vulnerability_chances = UART_RM25_getBits(data[0],0,1);
 80030b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2201      	movs	r2, #1
 80030bc:	2100      	movs	r1, #0
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 fa06 	bl	80034d0 <UART_RM25_getBits>
 80030c4:	4603      	mov	r3, r0
 80030c6:	461a      	mov	r2, r3
 80030c8:	4b2c      	ldr	r3, [pc, #176]	@ (800317c <HAL_UARTEx_RxEventCallback+0xd60>)
 80030ca:	701a      	strb	r2, [r3, #0]
				radar_info.double_vulnerability_triggered = UART_RM25_getBits(data[0],1,1);
 80030cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2201      	movs	r2, #1
 80030d2:	2101      	movs	r1, #1
 80030d4:	4618      	mov	r0, r3
 80030d6:	f000 f9fb 	bl	80034d0 <UART_RM25_getBits>
 80030da:	4603      	mov	r3, r0
 80030dc:	461a      	mov	r2, r3
 80030de:	4b27      	ldr	r3, [pc, #156]	@ (800317c <HAL_UARTEx_RxEventCallback+0xd60>)
 80030e0:	705a      	strb	r2, [r3, #1]
				RADAR_BUFF_RxEventCallback(radar_info.double_vulnerability_chances, radar_info.double_vulnerability_triggered);
 80030e2:	4b26      	ldr	r3, [pc, #152]	@ (800317c <HAL_UARTEx_RxEventCallback+0xd60>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	4a25      	ldr	r2, [pc, #148]	@ (800317c <HAL_UARTEx_RxEventCallback+0xd60>)
 80030e8:	7852      	ldrb	r2, [r2, #1]
 80030ea:	4611      	mov	r1, r2
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 fb10 	bl	8003712 <RADAR_BUFF_RxEventCallback>
				break;
 80030f2:	e1dd      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
				break;
			}
			//end of unfinished

			case CUSTOM_CONTROLLER_ROBOT_HEADER : {
				memcpy(&custom_controller_robot.custom_data,data,30);
 80030f4:	4a22      	ldr	r2, [pc, #136]	@ (8003180 <HAL_UARTEx_RxEventCallback+0xd64>)
 80030f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80030f8:	4614      	mov	r4, r2
 80030fa:	461d      	mov	r5, r3
 80030fc:	6828      	ldr	r0, [r5, #0]
 80030fe:	6869      	ldr	r1, [r5, #4]
 8003100:	68aa      	ldr	r2, [r5, #8]
 8003102:	68eb      	ldr	r3, [r5, #12]
 8003104:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003106:	6928      	ldr	r0, [r5, #16]
 8003108:	6969      	ldr	r1, [r5, #20]
 800310a:	69aa      	ldr	r2, [r5, #24]
 800310c:	c407      	stmia	r4!, {r0, r1, r2}
 800310e:	8bab      	ldrh	r3, [r5, #28]
 8003110:	8023      	strh	r3, [r4, #0]
				CUSTOM_CONTROLLER_ROBOT_RxEventCallback(custom_controller_robot.custom_data);
 8003112:	481b      	ldr	r0, [pc, #108]	@ (8003180 <HAL_UARTEx_RxEventCallback+0xd64>)
 8003114:	f7fd fed4 	bl	8000ec0 <CUSTOM_CONTROLLER_ROBOT_RxEventCallback>
				break;
 8003118:	e1ca      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case MINIMAP_COMMAND_HEADER : {
				memcpy(&map_command.target_position_x,&data[0],4);
 800311a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	461a      	mov	r2, r3
 8003120:	4b18      	ldr	r3, [pc, #96]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 8003122:	601a      	str	r2, [r3, #0]
				memcpy(&map_command.target_position_y,&data[4],4);
 8003124:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003126:	3304      	adds	r3, #4
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	461a      	mov	r2, r3
 800312c:	4b15      	ldr	r3, [pc, #84]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 800312e:	605a      	str	r2, [r3, #4]
				memcpy(&map_command.cmd_keyboard,&data[8],1);
 8003130:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003132:	3308      	adds	r3, #8
 8003134:	781a      	ldrb	r2, [r3, #0]
 8003136:	4b13      	ldr	r3, [pc, #76]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 8003138:	721a      	strb	r2, [r3, #8]
				memcpy(&map_command.target_robot_id,&data[9],1);
 800313a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800313c:	3309      	adds	r3, #9
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 8003142:	725a      	strb	r2, [r3, #9]
				memcpy(&map_command.cmd_source,&data[10],2);
 8003144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003146:	330a      	adds	r3, #10
 8003148:	881b      	ldrh	r3, [r3, #0]
 800314a:	b29a      	uxth	r2, r3
 800314c:	4b0d      	ldr	r3, [pc, #52]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 800314e:	815a      	strh	r2, [r3, #10]
				MINIMAP_COMMAND_RxEventCallback(map_command.target_position_x, map_command.target_position_y, map_command.cmd_keyboard, map_command.target_robot_id, map_command.cmd_source);
 8003150:	4b0c      	ldr	r3, [pc, #48]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 8003152:	edd3 7a00 	vldr	s15, [r3]
 8003156:	4b0b      	ldr	r3, [pc, #44]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 8003158:	ed93 7a01 	vldr	s14, [r3, #4]
 800315c:	4b09      	ldr	r3, [pc, #36]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 800315e:	7a1b      	ldrb	r3, [r3, #8]
 8003160:	4a08      	ldr	r2, [pc, #32]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 8003162:	7a51      	ldrb	r1, [r2, #9]
 8003164:	4a07      	ldr	r2, [pc, #28]	@ (8003184 <HAL_UARTEx_RxEventCallback+0xd68>)
 8003166:	8952      	ldrh	r2, [r2, #10]
 8003168:	4618      	mov	r0, r3
 800316a:	eef0 0a47 	vmov.f32	s1, s14
 800316e:	eeb0 0a67 	vmov.f32	s0, s15
 8003172:	f000 fadc 	bl	800372e <MINIMAP_COMMAND_RxEventCallback>
				break;
 8003176:	e19b      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 8003178:	200006e0 	.word	0x200006e0
 800317c:	200006ec 	.word	0x200006ec
 8003180:	20000784 	.word	0x20000784
 8003184:	200006f0 	.word	0x200006f0
			}
			case PC_CONTROL_HEADER : {
				memcpy(&pc_control.mouse_x,&data[0],2);
 8003188:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800318a:	881b      	ldrh	r3, [r3, #0]
 800318c:	b29a      	uxth	r2, r3
 800318e:	4b94      	ldr	r3, [pc, #592]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003190:	801a      	strh	r2, [r3, #0]
				memcpy(&pc_control.mouse_y,&data[2],2);
 8003192:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003194:	3302      	adds	r3, #2
 8003196:	881b      	ldrh	r3, [r3, #0]
 8003198:	b29a      	uxth	r2, r3
 800319a:	4b91      	ldr	r3, [pc, #580]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800319c:	805a      	strh	r2, [r3, #2]
				memcpy(&pc_control.mouse_z,&data[4],2);
 800319e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031a0:	3304      	adds	r3, #4
 80031a2:	881b      	ldrh	r3, [r3, #0]
 80031a4:	b29a      	uxth	r2, r3
 80031a6:	4b8e      	ldr	r3, [pc, #568]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80031a8:	809a      	strh	r2, [r3, #4]
				memcpy(&pc_control.left_button_down,&data[6],1);
 80031aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ac:	3306      	adds	r3, #6
 80031ae:	781a      	ldrb	r2, [r3, #0]
 80031b0:	4b8b      	ldr	r3, [pc, #556]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80031b2:	719a      	strb	r2, [r3, #6]
				memcpy(&pc_control.right_button_down,&data[7],1);
 80031b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031b6:	3307      	adds	r3, #7
 80031b8:	781a      	ldrb	r2, [r3, #0]
 80031ba:	4b89      	ldr	r3, [pc, #548]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80031bc:	71da      	strb	r2, [r3, #7]
				pc_control.w = UART_RM25_getBits(data[8],0,1);
 80031be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031c0:	7a1b      	ldrb	r3, [r3, #8]
 80031c2:	2201      	movs	r2, #1
 80031c4:	2100      	movs	r1, #0
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f982 	bl	80034d0 <UART_RM25_getBits>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	4b83      	ldr	r3, [pc, #524]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80031d2:	731a      	strb	r2, [r3, #12]
				pc_control.s = UART_RM25_getBits(data[8],1,1);
 80031d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031d6:	7a1b      	ldrb	r3, [r3, #8]
 80031d8:	2201      	movs	r2, #1
 80031da:	2101      	movs	r1, #1
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f977 	bl	80034d0 <UART_RM25_getBits>
 80031e2:	4603      	mov	r3, r0
 80031e4:	461a      	mov	r2, r3
 80031e6:	4b7e      	ldr	r3, [pc, #504]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80031e8:	735a      	strb	r2, [r3, #13]
				pc_control.a = UART_RM25_getBits(data[8],2,1);
 80031ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80031ec:	7a1b      	ldrb	r3, [r3, #8]
 80031ee:	2201      	movs	r2, #1
 80031f0:	2102      	movs	r1, #2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f000 f96c 	bl	80034d0 <UART_RM25_getBits>
 80031f8:	4603      	mov	r3, r0
 80031fa:	461a      	mov	r2, r3
 80031fc:	4b78      	ldr	r3, [pc, #480]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80031fe:	739a      	strb	r2, [r3, #14]
				pc_control.d = UART_RM25_getBits(data[8],3,1);
 8003200:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003202:	7a1b      	ldrb	r3, [r3, #8]
 8003204:	2201      	movs	r2, #1
 8003206:	2103      	movs	r1, #3
 8003208:	4618      	mov	r0, r3
 800320a:	f000 f961 	bl	80034d0 <UART_RM25_getBits>
 800320e:	4603      	mov	r3, r0
 8003210:	461a      	mov	r2, r3
 8003212:	4b73      	ldr	r3, [pc, #460]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003214:	73da      	strb	r2, [r3, #15]
				pc_control.shift = UART_RM25_getBits(data[8],4,1);
 8003216:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003218:	7a1b      	ldrb	r3, [r3, #8]
 800321a:	2201      	movs	r2, #1
 800321c:	2104      	movs	r1, #4
 800321e:	4618      	mov	r0, r3
 8003220:	f000 f956 	bl	80034d0 <UART_RM25_getBits>
 8003224:	4603      	mov	r3, r0
 8003226:	461a      	mov	r2, r3
 8003228:	4b6d      	ldr	r3, [pc, #436]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800322a:	741a      	strb	r2, [r3, #16]
				pc_control.ctrl = UART_RM25_getBits(data[8],5,1);
 800322c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800322e:	7a1b      	ldrb	r3, [r3, #8]
 8003230:	2201      	movs	r2, #1
 8003232:	2105      	movs	r1, #5
 8003234:	4618      	mov	r0, r3
 8003236:	f000 f94b 	bl	80034d0 <UART_RM25_getBits>
 800323a:	4603      	mov	r3, r0
 800323c:	461a      	mov	r2, r3
 800323e:	4b68      	ldr	r3, [pc, #416]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003240:	745a      	strb	r2, [r3, #17]
				pc_control.q = UART_RM25_getBits(data[8],6,1);
 8003242:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003244:	7a1b      	ldrb	r3, [r3, #8]
 8003246:	2201      	movs	r2, #1
 8003248:	2106      	movs	r1, #6
 800324a:	4618      	mov	r0, r3
 800324c:	f000 f940 	bl	80034d0 <UART_RM25_getBits>
 8003250:	4603      	mov	r3, r0
 8003252:	461a      	mov	r2, r3
 8003254:	4b62      	ldr	r3, [pc, #392]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003256:	749a      	strb	r2, [r3, #18]
				pc_control.e = UART_RM25_getBits(data[8],7,1);
 8003258:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800325a:	7a1b      	ldrb	r3, [r3, #8]
 800325c:	2201      	movs	r2, #1
 800325e:	2107      	movs	r1, #7
 8003260:	4618      	mov	r0, r3
 8003262:	f000 f935 	bl	80034d0 <UART_RM25_getBits>
 8003266:	4603      	mov	r3, r0
 8003268:	461a      	mov	r2, r3
 800326a:	4b5d      	ldr	r3, [pc, #372]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800326c:	74da      	strb	r2, [r3, #19]
				pc_control.r = UART_RM25_getBits(data[9],0,1);
 800326e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003270:	7a5b      	ldrb	r3, [r3, #9]
 8003272:	2201      	movs	r2, #1
 8003274:	2100      	movs	r1, #0
 8003276:	4618      	mov	r0, r3
 8003278:	f000 f92a 	bl	80034d0 <UART_RM25_getBits>
 800327c:	4603      	mov	r3, r0
 800327e:	461a      	mov	r2, r3
 8003280:	4b57      	ldr	r3, [pc, #348]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003282:	751a      	strb	r2, [r3, #20]
				pc_control.f = UART_RM25_getBits(data[9],1,1);
 8003284:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003286:	7a5b      	ldrb	r3, [r3, #9]
 8003288:	2201      	movs	r2, #1
 800328a:	2101      	movs	r1, #1
 800328c:	4618      	mov	r0, r3
 800328e:	f000 f91f 	bl	80034d0 <UART_RM25_getBits>
 8003292:	4603      	mov	r3, r0
 8003294:	461a      	mov	r2, r3
 8003296:	4b52      	ldr	r3, [pc, #328]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003298:	755a      	strb	r2, [r3, #21]
				pc_control.g = UART_RM25_getBits(data[9],2,1);
 800329a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800329c:	7a5b      	ldrb	r3, [r3, #9]
 800329e:	2201      	movs	r2, #1
 80032a0:	2102      	movs	r1, #2
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 f914 	bl	80034d0 <UART_RM25_getBits>
 80032a8:	4603      	mov	r3, r0
 80032aa:	461a      	mov	r2, r3
 80032ac:	4b4c      	ldr	r3, [pc, #304]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80032ae:	759a      	strb	r2, [r3, #22]
				pc_control.z = UART_RM25_getBits(data[9],3,1);
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	7a5b      	ldrb	r3, [r3, #9]
 80032b4:	2201      	movs	r2, #1
 80032b6:	2103      	movs	r1, #3
 80032b8:	4618      	mov	r0, r3
 80032ba:	f000 f909 	bl	80034d0 <UART_RM25_getBits>
 80032be:	4603      	mov	r3, r0
 80032c0:	461a      	mov	r2, r3
 80032c2:	4b47      	ldr	r3, [pc, #284]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80032c4:	75da      	strb	r2, [r3, #23]
				pc_control.x = UART_RM25_getBits(data[9],4,1);
 80032c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032c8:	7a5b      	ldrb	r3, [r3, #9]
 80032ca:	2201      	movs	r2, #1
 80032cc:	2104      	movs	r1, #4
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f8fe 	bl	80034d0 <UART_RM25_getBits>
 80032d4:	4603      	mov	r3, r0
 80032d6:	461a      	mov	r2, r3
 80032d8:	4b41      	ldr	r3, [pc, #260]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80032da:	761a      	strb	r2, [r3, #24]
				pc_control.c = UART_RM25_getBits(data[9],5,1);
 80032dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032de:	7a5b      	ldrb	r3, [r3, #9]
 80032e0:	2201      	movs	r2, #1
 80032e2:	2105      	movs	r1, #5
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 f8f3 	bl	80034d0 <UART_RM25_getBits>
 80032ea:	4603      	mov	r3, r0
 80032ec:	461a      	mov	r2, r3
 80032ee:	4b3c      	ldr	r3, [pc, #240]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 80032f0:	765a      	strb	r2, [r3, #25]
				pc_control.v = UART_RM25_getBits(data[9],6,1);
 80032f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032f4:	7a5b      	ldrb	r3, [r3, #9]
 80032f6:	2201      	movs	r2, #1
 80032f8:	2106      	movs	r1, #6
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 f8e8 	bl	80034d0 <UART_RM25_getBits>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	4b36      	ldr	r3, [pc, #216]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003306:	769a      	strb	r2, [r3, #26]
				pc_control.b = UART_RM25_getBits(data[9],7,1);
 8003308:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330a:	7a5b      	ldrb	r3, [r3, #9]
 800330c:	2201      	movs	r2, #1
 800330e:	2107      	movs	r1, #7
 8003310:	4618      	mov	r0, r3
 8003312:	f000 f8dd 	bl	80034d0 <UART_RM25_getBits>
 8003316:	4603      	mov	r3, r0
 8003318:	461a      	mov	r2, r3
 800331a:	4b31      	ldr	r3, [pc, #196]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800331c:	76da      	strb	r2, [r3, #27]
				PC_CONTROL_RxEventCallback(pc_control.mouse_x,pc_control.mouse_y,pc_control.mouse_z,pc_control.left_button_down,pc_control.right_button_down,pc_control.w,pc_control.s,pc_control.a,pc_control.d,pc_control.shift,pc_control.ctrl,pc_control.q,pc_control.e,pc_control.r,pc_control.f,pc_control.g,pc_control.z,pc_control.x,pc_control.c,pc_control.v,pc_control.b);
 800331e:	4b30      	ldr	r3, [pc, #192]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003320:	f9b3 c000 	ldrsh.w	ip, [r3]
 8003324:	4b2e      	ldr	r3, [pc, #184]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003326:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 800332a:	4b2d      	ldr	r3, [pc, #180]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800332c:	f9b3 8004 	ldrsh.w	r8, [r3, #4]
 8003330:	4b2b      	ldr	r3, [pc, #172]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003332:	f893 9006 	ldrb.w	r9, [r3, #6]
 8003336:	4b2a      	ldr	r3, [pc, #168]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003338:	79db      	ldrb	r3, [r3, #7]
 800333a:	633b      	str	r3, [r7, #48]	@ 0x30
 800333c:	4b28      	ldr	r3, [pc, #160]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800333e:	7b1a      	ldrb	r2, [r3, #12]
 8003340:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003342:	4b27      	ldr	r3, [pc, #156]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003344:	7b59      	ldrb	r1, [r3, #13]
 8003346:	6279      	str	r1, [r7, #36]	@ 0x24
 8003348:	4b25      	ldr	r3, [pc, #148]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800334a:	7b98      	ldrb	r0, [r3, #14]
 800334c:	6238      	str	r0, [r7, #32]
 800334e:	4b24      	ldr	r3, [pc, #144]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003350:	7bdc      	ldrb	r4, [r3, #15]
 8003352:	61fc      	str	r4, [r7, #28]
 8003354:	4b22      	ldr	r3, [pc, #136]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003356:	7c1d      	ldrb	r5, [r3, #16]
 8003358:	61bd      	str	r5, [r7, #24]
 800335a:	4b21      	ldr	r3, [pc, #132]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800335c:	7c5e      	ldrb	r6, [r3, #17]
 800335e:	617e      	str	r6, [r7, #20]
 8003360:	4b1f      	ldr	r3, [pc, #124]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003362:	f893 b012 	ldrb.w	fp, [r3, #18]
 8003366:	465b      	mov	r3, fp
 8003368:	613b      	str	r3, [r7, #16]
 800336a:	4b1d      	ldr	r3, [pc, #116]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800336c:	f893 b013 	ldrb.w	fp, [r3, #19]
 8003370:	465a      	mov	r2, fp
 8003372:	60fa      	str	r2, [r7, #12]
 8003374:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003376:	f893 b014 	ldrb.w	fp, [r3, #20]
 800337a:	4659      	mov	r1, fp
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	4b18      	ldr	r3, [pc, #96]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003380:	7d5e      	ldrb	r6, [r3, #21]
 8003382:	4b17      	ldr	r3, [pc, #92]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003384:	7d9d      	ldrb	r5, [r3, #22]
 8003386:	4b16      	ldr	r3, [pc, #88]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003388:	7ddc      	ldrb	r4, [r3, #23]
 800338a:	4b15      	ldr	r3, [pc, #84]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 800338c:	7e18      	ldrb	r0, [r3, #24]
 800338e:	4b14      	ldr	r3, [pc, #80]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003390:	7e59      	ldrb	r1, [r3, #25]
 8003392:	4b13      	ldr	r3, [pc, #76]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003394:	7e9a      	ldrb	r2, [r3, #26]
 8003396:	4b12      	ldr	r3, [pc, #72]	@ (80033e0 <HAL_UARTEx_RxEventCallback+0xfc4>)
 8003398:	7edb      	ldrb	r3, [r3, #27]
 800339a:	9310      	str	r3, [sp, #64]	@ 0x40
 800339c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800339e:	910e      	str	r1, [sp, #56]	@ 0x38
 80033a0:	900d      	str	r0, [sp, #52]	@ 0x34
 80033a2:	940c      	str	r4, [sp, #48]	@ 0x30
 80033a4:	950b      	str	r5, [sp, #44]	@ 0x2c
 80033a6:	960a      	str	r6, [sp, #40]	@ 0x28
 80033a8:	68b9      	ldr	r1, [r7, #8]
 80033aa:	9109      	str	r1, [sp, #36]	@ 0x24
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	9208      	str	r2, [sp, #32]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	9307      	str	r3, [sp, #28]
 80033b4:	697e      	ldr	r6, [r7, #20]
 80033b6:	9606      	str	r6, [sp, #24]
 80033b8:	69bd      	ldr	r5, [r7, #24]
 80033ba:	9505      	str	r5, [sp, #20]
 80033bc:	69fc      	ldr	r4, [r7, #28]
 80033be:	9404      	str	r4, [sp, #16]
 80033c0:	6a38      	ldr	r0, [r7, #32]
 80033c2:	9003      	str	r0, [sp, #12]
 80033c4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80033c6:	9102      	str	r1, [sp, #8]
 80033c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80033ca:	9201      	str	r2, [sp, #4]
 80033cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	464b      	mov	r3, r9
 80033d2:	4642      	mov	r2, r8
 80033d4:	4671      	mov	r1, lr
 80033d6:	4660      	mov	r0, ip
 80033d8:	f7fd fd7c 	bl	8000ed4 <PC_CONTROL_RxEventCallback>
				break;
 80033dc:	e068      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
 80033de:	bf00      	nop
 80033e0:	20000768 	.word	0x20000768
			}
			case CUSTOM_CONTROLLER_CLIENT_HEADER : {
				break;
			}
			case MINIMAP_DATA_HEADER : {
				memcpy(&map_data.intention,&data[0],1);
 80033e4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	4b35      	ldr	r3, [pc, #212]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80033ea:	701a      	strb	r2, [r3, #0]
				memcpy(&map_data.start_position_x,&data[1],2);
 80033ec:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033ee:	3301      	adds	r3, #1
 80033f0:	881b      	ldrh	r3, [r3, #0]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	4b32      	ldr	r3, [pc, #200]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 80033f6:	805a      	strh	r2, [r3, #2]
				memcpy(&map_data.start_position_y,&data[3],2);
 80033f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80033fa:	3303      	adds	r3, #3
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	b29a      	uxth	r2, r3
 8003400:	4b2f      	ldr	r3, [pc, #188]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003402:	809a      	strh	r2, [r3, #4]
				memcpy(&map_data.delta_x,&data[5],49);
 8003404:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003406:	3305      	adds	r3, #5
 8003408:	4a2d      	ldr	r2, [pc, #180]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800340a:	1d90      	adds	r0, r2, #6
 800340c:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8003410:	4602      	mov	r2, r0
 8003412:	4619      	mov	r1, r3
 8003414:	f8d1 c000 	ldr.w	ip, [r1]
 8003418:	684e      	ldr	r6, [r1, #4]
 800341a:	688d      	ldr	r5, [r1, #8]
 800341c:	68c9      	ldr	r1, [r1, #12]
 800341e:	f8c2 c000 	str.w	ip, [r2]
 8003422:	6056      	str	r6, [r2, #4]
 8003424:	6095      	str	r5, [r2, #8]
 8003426:	60d1      	str	r1, [r2, #12]
 8003428:	3310      	adds	r3, #16
 800342a:	3010      	adds	r0, #16
 800342c:	42a3      	cmp	r3, r4
 800342e:	d1ef      	bne.n	8003410 <HAL_UARTEx_RxEventCallback+0xff4>
 8003430:	4602      	mov	r2, r0
 8003432:	781b      	ldrb	r3, [r3, #0]
 8003434:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.delta_y,&data[54],49);
 8003436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003438:	3336      	adds	r3, #54	@ 0x36
 800343a:	4a21      	ldr	r2, [pc, #132]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800343c:	f102 0037 	add.w	r0, r2, #55	@ 0x37
 8003440:	f103 0430 	add.w	r4, r3, #48	@ 0x30
 8003444:	4602      	mov	r2, r0
 8003446:	4619      	mov	r1, r3
 8003448:	f8d1 c000 	ldr.w	ip, [r1]
 800344c:	684e      	ldr	r6, [r1, #4]
 800344e:	688d      	ldr	r5, [r1, #8]
 8003450:	68c9      	ldr	r1, [r1, #12]
 8003452:	f8c2 c000 	str.w	ip, [r2]
 8003456:	6056      	str	r6, [r2, #4]
 8003458:	6095      	str	r5, [r2, #8]
 800345a:	60d1      	str	r1, [r2, #12]
 800345c:	3310      	adds	r3, #16
 800345e:	3010      	adds	r0, #16
 8003460:	42a3      	cmp	r3, r4
 8003462:	d1ef      	bne.n	8003444 <HAL_UARTEx_RxEventCallback+0x1028>
 8003464:	4602      	mov	r2, r0
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	7013      	strb	r3, [r2, #0]
				memcpy(&map_data.sender_id,&data[103],2);
 800346a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800346c:	3367      	adds	r3, #103	@ 0x67
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	b29a      	uxth	r2, r3
 8003472:	4b13      	ldr	r3, [pc, #76]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003474:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
				MINIMAP_DATA_RxEventCallback(map_data.intention, map_data.start_position_x, map_data.start_position_y, map_data.delta_x, map_data.delta_y, map_data.sender_id);
 8003478:	4b11      	ldr	r3, [pc, #68]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800347a:	7818      	ldrb	r0, [r3, #0]
 800347c:	4b10      	ldr	r3, [pc, #64]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 800347e:	8859      	ldrh	r1, [r3, #2]
 8003480:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003482:	889a      	ldrh	r2, [r3, #4]
 8003484:	4b0e      	ldr	r3, [pc, #56]	@ (80034c0 <HAL_UARTEx_RxEventCallback+0x10a4>)
 8003486:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800348a:	9301      	str	r3, [sp, #4]
 800348c:	4b0d      	ldr	r3, [pc, #52]	@ (80034c4 <HAL_UARTEx_RxEventCallback+0x10a8>)
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	4b0d      	ldr	r3, [pc, #52]	@ (80034c8 <HAL_UARTEx_RxEventCallback+0x10ac>)
 8003492:	f000 f95f 	bl	8003754 <MINIMAP_DATA_RxEventCallback>
				break;
 8003496:	e00b      	b.n	80034b0 <HAL_UARTEx_RxEventCallback+0x1094>
			}
			case CUSTOM_MESSAGE_HEADER : {
				//UART_Printf(&huart1,"CallBack Check");
				memcpy(&custom_message.custom_message,data,128);
 8003498:	4a0c      	ldr	r2, [pc, #48]	@ (80034cc <HAL_UARTEx_RxEventCallback+0x10b0>)
 800349a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800349c:	4610      	mov	r0, r2
 800349e:	4619      	mov	r1, r3
 80034a0:	2380      	movs	r3, #128	@ 0x80
 80034a2:	461a      	mov	r2, r3
 80034a4:	f00a f812 	bl	800d4cc <memcpy>
				CUSTOM_MESSAGE_RxEventCallback(custom_message.custom_message);
 80034a8:	4808      	ldr	r0, [pc, #32]	@ (80034cc <HAL_UARTEx_RxEventCallback+0x10b0>)
 80034aa:	f000 f963 	bl	8003774 <CUSTOM_MESSAGE_RxEventCallback>
				break;
 80034ae:	bf00      	nop
 80034b0:	46d5      	mov	sp, sl
 80034b2:	f8d7 d004 	ldr.w	sp, [r7, #4]
			}
		}
	}
}
 80034b6:	bf00      	nop
 80034b8:	3774      	adds	r7, #116	@ 0x74
 80034ba:	46bd      	mov	sp, r7
 80034bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034c0:	200006fc 	.word	0x200006fc
 80034c4:	20000733 	.word	0x20000733
 80034c8:	20000702 	.word	0x20000702
 80034cc:	200007a4 	.word	0x200007a4

080034d0 <UART_RM25_getBits>:
		seq=0;
	}
}


uint8_t UART_RM25_getBits(uint8_t data, uint8_t startBit, uint8_t len){
 80034d0:	b480      	push	{r7}
 80034d2:	b085      	sub	sp, #20
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	71fb      	strb	r3, [r7, #7]
 80034da:	460b      	mov	r3, r1
 80034dc:	71bb      	strb	r3, [r7, #6]
 80034de:	4613      	mov	r3, r2
 80034e0:	717b      	strb	r3, [r7, #5]
	uint8_t result = 0;
 80034e2:	2300      	movs	r3, #0
 80034e4:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 80034e6:	2300      	movs	r3, #0
 80034e8:	73bb      	strb	r3, [r7, #14]
 80034ea:	e013      	b.n	8003514 <UART_RM25_getBits+0x44>
		result = result | (((data>>(startBit+index))& 1)<<index);
 80034ec:	79fa      	ldrb	r2, [r7, #7]
 80034ee:	79b9      	ldrb	r1, [r7, #6]
 80034f0:	7bbb      	ldrb	r3, [r7, #14]
 80034f2:	440b      	add	r3, r1
 80034f4:	fa42 f303 	asr.w	r3, r2, r3
 80034f8:	f003 0201 	and.w	r2, r3, #1
 80034fc:	7bbb      	ldrb	r3, [r7, #14]
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	b25a      	sxtb	r2, r3
 8003504:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003508:	4313      	orrs	r3, r2
 800350a:	b25b      	sxtb	r3, r3
 800350c:	73fb      	strb	r3, [r7, #15]
	for(uint8_t index=0;index<len;index++){
 800350e:	7bbb      	ldrb	r3, [r7, #14]
 8003510:	3301      	adds	r3, #1
 8003512:	73bb      	strb	r3, [r7, #14]
 8003514:	7bba      	ldrb	r2, [r7, #14]
 8003516:	797b      	ldrb	r3, [r7, #5]
 8003518:	429a      	cmp	r2, r3
 800351a:	d3e7      	bcc.n	80034ec <UART_RM25_getBits+0x1c>
	}
	return result;
 800351c:	7bfb      	ldrb	r3, [r7, #15]
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr

0800352a <GAME_RESULT_RxEventCallback>:

__weak void GAME_STATUS_RxEventCallback(uint8_t game_type,uint8_t current_stage,uint8_t game_progress, uint16_t stage_remain_time,uint64_t SyncTimeStamp){
	//NOTE: This function should not be modified
}

__weak void GAME_RESULT_RxEventCallback(uint8_t winner){
 800352a:	b480      	push	{r7}
 800352c:	b083      	sub	sp, #12
 800352e:	af00      	add	r7, sp, #0
 8003530:	4603      	mov	r3, r0
 8003532:	71fb      	strb	r3, [r7, #7]
	//NOTE: This function should not be modified
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <ROBOT_HP_HEADER_RxEventCallback>:

__weak void ROBOT_HP_HEADER_RxEventCallback(uint16_t red_1_robot_HP, uint16_t red_2_robot_HP, uint16_t red_3_robot_HP, uint16_t red_4_robot_HP, uint16_t red_7_robot_HP, uint16_t red_outpost_HP, uint16_t red_base_HP, uint16_t blue_1_robot_HP, uint16_t blue_2_robot_HP, uint16_t blue_3_robot_HP, uint16_t blue_4_robot_HP, uint16_t blue_7_robot_HP, uint16_t blue_outpost_HP, uint16_t blue_base_HP){
 8003540:	b490      	push	{r4, r7}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0
 8003546:	4604      	mov	r4, r0
 8003548:	4608      	mov	r0, r1
 800354a:	4611      	mov	r1, r2
 800354c:	461a      	mov	r2, r3
 800354e:	4623      	mov	r3, r4
 8003550:	80fb      	strh	r3, [r7, #6]
 8003552:	4603      	mov	r3, r0
 8003554:	80bb      	strh	r3, [r7, #4]
 8003556:	460b      	mov	r3, r1
 8003558:	807b      	strh	r3, [r7, #2]
 800355a:	4613      	mov	r3, r2
 800355c:	803b      	strh	r3, [r7, #0]
	//NOTE: This function should not be modified
}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bc90      	pop	{r4, r7}
 8003566:	4770      	bx	lr

08003568 <EVENT_DATA_RxEventCallback>:

__weak void EVENT_DATA_RxEventCallback(uint8_t resupply_zone_1, uint8_t resupply_zone_2, uint8_t resupply_zone_3, uint8_t small_power_rune, uint8_t large_power_rune, uint8_t central_elevated_ground, uint8_t trapezoid_elevated_ground, uint16_t last_dart_hit, uint8_t last_dart_hit_target, uint8_t central_buff){
 8003568:	b490      	push	{r4, r7}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	4604      	mov	r4, r0
 8003570:	4608      	mov	r0, r1
 8003572:	4611      	mov	r1, r2
 8003574:	461a      	mov	r2, r3
 8003576:	4623      	mov	r3, r4
 8003578:	71fb      	strb	r3, [r7, #7]
 800357a:	4603      	mov	r3, r0
 800357c:	71bb      	strb	r3, [r7, #6]
 800357e:	460b      	mov	r3, r1
 8003580:	717b      	strb	r3, [r7, #5]
 8003582:	4613      	mov	r3, r2
 8003584:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bc90      	pop	{r4, r7}
 800358e:	4770      	bx	lr

08003590 <REFEREE_WARNING_RxEventCallback>:

__weak void REFEREE_WARNING_RxEventCallback(uint8_t penalty,uint8_t offending_robot_id,uint8_t count){
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
 8003596:	4603      	mov	r3, r0
 8003598:	71fb      	strb	r3, [r7, #7]
 800359a:	460b      	mov	r3, r1
 800359c:	71bb      	strb	r3, [r7, #6]
 800359e:	4613      	mov	r3, r2
 80035a0:	717b      	strb	r3, [r7, #5]
	//NOTE: This function should not be modified
}
 80035a2:	bf00      	nop
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr

080035ae <DART_INFO_RxEventCallback>:

__weak void DART_INFO_RxEventCallback(uint8_t dart_remaining_time,uint8_t last_dart_hit_target,uint8_t last_target_hit_count, uint8_t current_dart_target){
 80035ae:	b490      	push	{r4, r7}
 80035b0:	b082      	sub	sp, #8
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	4604      	mov	r4, r0
 80035b6:	4608      	mov	r0, r1
 80035b8:	4611      	mov	r1, r2
 80035ba:	461a      	mov	r2, r3
 80035bc:	4623      	mov	r3, r4
 80035be:	71fb      	strb	r3, [r7, #7]
 80035c0:	4603      	mov	r3, r0
 80035c2:	71bb      	strb	r3, [r7, #6]
 80035c4:	460b      	mov	r3, r1
 80035c6:	717b      	strb	r3, [r7, #5]
 80035c8:	4613      	mov	r3, r2
 80035ca:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80035cc:	bf00      	nop
 80035ce:	3708      	adds	r7, #8
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bc90      	pop	{r4, r7}
 80035d4:	4770      	bx	lr

080035d6 <ROBOT_POSITION_RxEventCallback>:

__weak void POWER_HEAT_DATA_RxEventCallback(uint16_t buffer_energy, uint16_t shooter_17mm_1_barrel_heat, uint16_t shooter_17mm_2_barrel_heat, uint16_t shooter_42mm_barrel_heat){
	//NOTE: This function should not be modified
}

__weak void ROBOT_POSITION_RxEventCallback(float x, float y, float angle){
 80035d6:	b480      	push	{r7}
 80035d8:	b085      	sub	sp, #20
 80035da:	af00      	add	r7, sp, #0
 80035dc:	ed87 0a03 	vstr	s0, [r7, #12]
 80035e0:	edc7 0a02 	vstr	s1, [r7, #8]
 80035e4:	ed87 1a01 	vstr	s2, [r7, #4]
	//NOTE: This function should not be modified
}
 80035e8:	bf00      	nop
 80035ea:	3714      	adds	r7, #20
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr

080035f4 <BUFF_RxEventCallback>:

__weak void BUFF_RxEventCallback(uint8_t recovery_buff, uint8_t cooling_buff, uint8_t defence_buff, uint8_t vulnerability_buff, uint16_t attack_buff, uint8_t remaining_energy){
 80035f4:	b490      	push	{r4, r7}
 80035f6:	b082      	sub	sp, #8
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	4604      	mov	r4, r0
 80035fc:	4608      	mov	r0, r1
 80035fe:	4611      	mov	r1, r2
 8003600:	461a      	mov	r2, r3
 8003602:	4623      	mov	r3, r4
 8003604:	71fb      	strb	r3, [r7, #7]
 8003606:	4603      	mov	r3, r0
 8003608:	71bb      	strb	r3, [r7, #6]
 800360a:	460b      	mov	r3, r1
 800360c:	717b      	strb	r3, [r7, #5]
 800360e:	4613      	mov	r3, r2
 8003610:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bc90      	pop	{r4, r7}
 800361a:	4770      	bx	lr

0800361c <DAMAGE_SOURCE_RxEventCallback>:

__weak void DAMAGE_SOURCE_RxEventCallback(uint8_t armor_id, uint8_t HP_deduction_reason){
 800361c:	b480      	push	{r7}
 800361e:	b083      	sub	sp, #12
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	460a      	mov	r2, r1
 8003626:	71fb      	strb	r3, [r7, #7]
 8003628:	4613      	mov	r3, r2
 800362a:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 800362c:	bf00      	nop
 800362e:	370c      	adds	r7, #12
 8003630:	46bd      	mov	sp, r7
 8003632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003636:	4770      	bx	lr

08003638 <PROJECTILE_ALLOWANCE_RxEventCallback>:

__weak void PROJECTILE_INFO_RxEventCallback(uint8_t bullet_type, uint8_t shooter_number, uint8_t launching_frequency,float initial_speed){
	//NOTE: This function should not be modified
}

__weak void PROJECTILE_ALLOWANCE_RxEventCallback(uint16_t projectile_allowance_17mm, uint16_t projectile_allowance_42mm, uint16_t remaining_gold_coin){
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	4603      	mov	r3, r0
 8003640:	80fb      	strh	r3, [r7, #6]
 8003642:	460b      	mov	r3, r1
 8003644:	80bb      	strh	r3, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <RFID_RxEventCallback>:

__weak void RFID_RxEventCallback(uint32_t rfid_status){
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 800365e:	bf00      	nop
 8003660:	370c      	adds	r7, #12
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr

0800366a <DART_COMMAND_RxEventCallback>:

__weak void DART_COMMAND_RxEventCallback(uint8_t dart_launch_opening_status, uint16_t target_change_remaining_time, uint16_t latest_launch_cmd_remaining_time){
 800366a:	b480      	push	{r7}
 800366c:	b083      	sub	sp, #12
 800366e:	af00      	add	r7, sp, #0
 8003670:	4603      	mov	r3, r0
 8003672:	71fb      	strb	r3, [r7, #7]
 8003674:	460b      	mov	r3, r1
 8003676:	80bb      	strh	r3, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	807b      	strh	r3, [r7, #2]
	//NOTE: This function should not be modified
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <TEAM_POSITION_RxEventCallback>:

__weak void TEAM_POSITION_RxEventCallback(float hero_x, float hero_y, float engineer_x, float engineer_y, float standard_3_x, float standard_3_y, float standard_4_x, float standard_4_y, float standard_5_x, float standard_5_y){
 8003688:	b480      	push	{r7}
 800368a:	b08b      	sub	sp, #44	@ 0x2c
 800368c:	af00      	add	r7, sp, #0
 800368e:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8003692:	edc7 0a08 	vstr	s1, [r7, #32]
 8003696:	ed87 1a07 	vstr	s2, [r7, #28]
 800369a:	edc7 1a06 	vstr	s3, [r7, #24]
 800369e:	ed87 2a05 	vstr	s4, [r7, #20]
 80036a2:	edc7 2a04 	vstr	s5, [r7, #16]
 80036a6:	ed87 3a03 	vstr	s6, [r7, #12]
 80036aa:	edc7 3a02 	vstr	s7, [r7, #8]
 80036ae:	ed87 4a01 	vstr	s8, [r7, #4]
 80036b2:	edc7 4a00 	vstr	s9, [r7]
	//NOTE: This function should not be modified
}
 80036b6:	bf00      	nop
 80036b8:	372c      	adds	r7, #44	@ 0x2c
 80036ba:	46bd      	mov	sp, r7
 80036bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c0:	4770      	bx	lr

080036c2 <RADAR_MARKING_RxEventCallback>:

__weak void RADAR_MARKING_RxEventCallback(uint8_t mark_hero_progress, uint8_t mark_engineer_progress, uint8_t mark_standard_3_progress, uint8_t mark_standard_4_progress, uint8_t mark_sentry_progress){
 80036c2:	b490      	push	{r4, r7}
 80036c4:	b082      	sub	sp, #8
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	4604      	mov	r4, r0
 80036ca:	4608      	mov	r0, r1
 80036cc:	4611      	mov	r1, r2
 80036ce:	461a      	mov	r2, r3
 80036d0:	4623      	mov	r3, r4
 80036d2:	71fb      	strb	r3, [r7, #7]
 80036d4:	4603      	mov	r3, r0
 80036d6:	71bb      	strb	r3, [r7, #6]
 80036d8:	460b      	mov	r3, r1
 80036da:	717b      	strb	r3, [r7, #5]
 80036dc:	4613      	mov	r3, r2
 80036de:	713b      	strb	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 80036e0:	bf00      	nop
 80036e2:	3708      	adds	r7, #8
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bc90      	pop	{r4, r7}
 80036e8:	4770      	bx	lr

080036ea <SENTRY_RxEventCallback>:

__weak void SENTRY_RxEventCallback(uint16_t exchanged_projectiles, uint8_t projectile_exchange_count, uint8_t HP_exchange_count, uint8_t confirm_free_respawn, uint8_t instant_respawn_available, uint16_t instant_respawn_cost, uint8_t in_combat, uint16_t remaining_allowance_to_exchange){
 80036ea:	b490      	push	{r4, r7}
 80036ec:	b082      	sub	sp, #8
 80036ee:	af00      	add	r7, sp, #0
 80036f0:	4604      	mov	r4, r0
 80036f2:	4608      	mov	r0, r1
 80036f4:	4611      	mov	r1, r2
 80036f6:	461a      	mov	r2, r3
 80036f8:	4623      	mov	r3, r4
 80036fa:	80fb      	strh	r3, [r7, #6]
 80036fc:	4603      	mov	r3, r0
 80036fe:	717b      	strb	r3, [r7, #5]
 8003700:	460b      	mov	r3, r1
 8003702:	713b      	strb	r3, [r7, #4]
 8003704:	4613      	mov	r3, r2
 8003706:	70fb      	strb	r3, [r7, #3]
	//NOTE: This function should not be modified
}
 8003708:	bf00      	nop
 800370a:	3708      	adds	r7, #8
 800370c:	46bd      	mov	sp, r7
 800370e:	bc90      	pop	{r4, r7}
 8003710:	4770      	bx	lr

08003712 <RADAR_BUFF_RxEventCallback>:

__weak void RADAR_BUFF_RxEventCallback(uint8_t double_vulnerability_chances, uint8_t double_vulnerability_triggered){
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	4603      	mov	r3, r0
 800371a:	460a      	mov	r2, r1
 800371c:	71fb      	strb	r3, [r7, #7]
 800371e:	4613      	mov	r3, r2
 8003720:	71bb      	strb	r3, [r7, #6]
	//NOTE: This function should not be modified
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr

0800372e <MINIMAP_COMMAND_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_ROBOT_RxEventCallback(uint8_t customData[30]){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_COMMAND_RxEventCallback(float target_position_x, float target_position_y, uint8_t cmd_keyboard, uint8_t target_robot_id, uint16_t cmd_source){
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	ed87 0a03 	vstr	s0, [r7, #12]
 8003738:	edc7 0a02 	vstr	s1, [r7, #8]
 800373c:	4603      	mov	r3, r0
 800373e:	71fb      	strb	r3, [r7, #7]
 8003740:	460b      	mov	r3, r1
 8003742:	71bb      	strb	r3, [r7, #6]
 8003744:	4613      	mov	r3, r2
 8003746:	80bb      	strh	r3, [r7, #4]
	//NOTE: This function should not be modified
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <MINIMAP_DATA_RxEventCallback>:

__weak void CUSTOM_CONTROLLER_CLIENT_RxEventCallback(uint16_t key_value, uint16_t x_position, uint16_t mouse_left, uint16_t y_position, uint16_t mouse_right){
	//NOTE: This function should not be modified
}

__weak void MINIMAP_DATA_RxEventCallback(uint8_t intention, uint16_t start_position_x, uint16_t start_position_y, int8_t delta_x[49], int8_t delta_y[49], uint16_t sender_id){
 8003754:	b480      	push	{r7}
 8003756:	b085      	sub	sp, #20
 8003758:	af00      	add	r7, sp, #0
 800375a:	607b      	str	r3, [r7, #4]
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]
 8003760:	460b      	mov	r3, r1
 8003762:	81bb      	strh	r3, [r7, #12]
 8003764:	4613      	mov	r3, r2
 8003766:	817b      	strh	r3, [r7, #10]
	//NOTE: This function should not be modified
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr

08003774 <CUSTOM_MESSAGE_RxEventCallback>:

__weak void CUSTOM_MESSAGE_RxEventCallback(uint8_t customMessage[128]){
 8003774:	b480      	push	{r7}
 8003776:	b083      	sub	sp, #12
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	//NOTE: This function should not be modified
}
 800377c:	bf00      	nop
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <UART_RxEventCallback_RM25Passthrough>:

__weak void UART_RxEventCallback_RM25Passthrough(UART_HandleTypeDef *huart,uint8_t RxBuff[256]){
 8003788:	b480      	push	{r7}
 800378a:	b083      	sub	sp, #12
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]

}
 8003792:	bf00      	nop
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
	...

080037a0 <imu_pwm_set>:
#include "bsp_imu_pwm.h"
#include "main.h"

void imu_pwm_set(uint16_t pwm)
{
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	80fb      	strh	r3, [r7, #6]
    TIM10->CCR1 = (pwm);
 80037aa:	4a04      	ldr	r2, [pc, #16]	@ (80037bc <imu_pwm_set+0x1c>)
 80037ac:	88fb      	ldrh	r3, [r7, #6]
 80037ae:	6353      	str	r3, [r2, #52]	@ 0x34

}
 80037b0:	bf00      	nop
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40014400 	.word	0x40014400

080037c0 <imu_temp_control_task>:
  * @brief          bmi088�¶ȿ���
  * @param[in]      argument: NULL
  * @retval         none
  */
void imu_temp_control_task(void const * argument)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
    osDelay(500);
 80037c8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80037cc:	f006 ff20 	bl	800a610 <osDelay>
    //PID init
    PID_init(&imu_temp_pid, PID_POSITION, imu_temp_PID, TEMPERATURE_PID_MAX_OUT, TEMPERATURE_PID_MAX_IOUT);
 80037d0:	eddf 0a28 	vldr	s1, [pc, #160]	@ 8003874 <imu_temp_control_task+0xb4>
 80037d4:	ed9f 0a28 	vldr	s0, [pc, #160]	@ 8003878 <imu_temp_control_task+0xb8>
 80037d8:	4a28      	ldr	r2, [pc, #160]	@ (800387c <imu_temp_control_task+0xbc>)
 80037da:	2100      	movs	r1, #0
 80037dc:	4828      	ldr	r0, [pc, #160]	@ (8003880 <imu_temp_control_task+0xc0>)
 80037de:	f000 ffd9 	bl	8004794 <PID_init>

    //set spi frequency
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80037e2:	4b28      	ldr	r3, [pc, #160]	@ (8003884 <imu_temp_control_task+0xc4>)
 80037e4:	2210      	movs	r2, #16
 80037e6:	61da      	str	r2, [r3, #28]
    
    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80037e8:	4826      	ldr	r0, [pc, #152]	@ (8003884 <imu_temp_control_task+0xc4>)
 80037ea:	f004 faac 	bl	8007d46 <HAL_SPI_Init>
 80037ee:	4603      	mov	r3, r0
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d001      	beq.n	80037f8 <imu_temp_control_task+0x38>
    {
        Error_Handler();
 80037f4:	f000 ffc8 	bl	8004788 <Error_Handler>
    }
    //get task handle, must enable 'xTaskGetHandle' in cubeMX
    INS_task_local_handler = xTaskGetHandle(pcTaskGetName(NULL));
 80037f8:	2000      	movs	r0, #0
 80037fa:	f008 f827 	bl	800b84c <pcTaskGetName>
 80037fe:	4603      	mov	r3, r0
 8003800:	4618      	mov	r0, r3
 8003802:	f008 f8b7 	bl	800b974 <xTaskGetHandle>
 8003806:	4603      	mov	r3, r0
 8003808:	4a1f      	ldr	r2, [pc, #124]	@ (8003888 <imu_temp_control_task+0xc8>)
 800380a:	6013      	str	r3, [r2, #0]
    imu_start_flag = 1;
 800380c:	4b1f      	ldr	r3, [pc, #124]	@ (800388c <imu_temp_control_task+0xcc>)
 800380e:	2201      	movs	r2, #1
 8003810:	701a      	strb	r2, [r3, #0]
    while(1)
    {

        //wait for task waked up
        while (ulTaskNotifyTake(pdTRUE, portMAX_DELAY) != pdPASS) {
 8003812:	bf00      	nop
 8003814:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003818:	2001      	movs	r0, #1
 800381a:	f008 fcd7 	bl	800c1cc <ulTaskNotifyTake>
 800381e:	4603      	mov	r3, r0
 8003820:	2b01      	cmp	r3, #1
 8003822:	d1f7      	bne.n	8003814 <imu_temp_control_task+0x54>

        }
        uint16_t tempPWM;
        //calculate PID
        PID_calc(&imu_temp_pid, IMU_get_temp(), 40.0f);
 8003824:	f7fd f808 	bl	8000838 <IMU_get_temp>
 8003828:	eef0 7a40 	vmov.f32	s15, s0
 800382c:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8003890 <imu_temp_control_task+0xd0>
 8003830:	eeb0 0a67 	vmov.f32	s0, s15
 8003834:	4812      	ldr	r0, [pc, #72]	@ (8003880 <imu_temp_control_task+0xc0>)
 8003836:	f001 f804 	bl	8004842 <PID_calc>
        if (imu_temp_pid.out < 0.0f)
 800383a:	4b11      	ldr	r3, [pc, #68]	@ (8003880 <imu_temp_control_task+0xc0>)
 800383c:	edd3 7a08 	vldr	s15, [r3, #32]
 8003840:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003844:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003848:	d503      	bpl.n	8003852 <imu_temp_control_task+0x92>
        {
            imu_temp_pid.out = 0.0f;
 800384a:	4b0d      	ldr	r3, [pc, #52]	@ (8003880 <imu_temp_control_task+0xc0>)
 800384c:	f04f 0200 	mov.w	r2, #0
 8003850:	621a      	str	r2, [r3, #32]
        }
        tempPWM = (uint16_t)imu_temp_pid.out;
 8003852:	4b0b      	ldr	r3, [pc, #44]	@ (8003880 <imu_temp_control_task+0xc0>)
 8003854:	edd3 7a08 	vldr	s15, [r3, #32]
 8003858:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800385c:	ee17 3a90 	vmov	r3, s15
 8003860:	81fb      	strh	r3, [r7, #14]
        IMU_temp_PWM(tempPWM);
 8003862:	89fb      	ldrh	r3, [r7, #14]
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff9b 	bl	80037a0 <imu_pwm_set>
        osDelay(5);
 800386a:	2005      	movs	r0, #5
 800386c:	f006 fed0 	bl	800a610 <osDelay>
    {
 8003870:	e7cf      	b.n	8003812 <imu_temp_control_task+0x52>
 8003872:	bf00      	nop
 8003874:	45898000 	.word	0x45898000
 8003878:	458ca000 	.word	0x458ca000
 800387c:	0800dfd4 	.word	0x0800dfd4
 8003880:	20000934 	.word	0x20000934
 8003884:	20000a24 	.word	0x20000a24
 8003888:	2000092c 	.word	0x2000092c
 800388c:	20000930 	.word	0x20000930
 8003890:	42200000 	.word	0x42200000

08003894 <HAL_GPIO_EXTI_Callback>:
    }
}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b082      	sub	sp, #8
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == INT1_ACCEL_Pin)
 800389e:	4b12      	ldr	r3, [pc, #72]	@ (80038e8 <HAL_GPIO_EXTI_Callback+0x54>)
 80038a0:	881b      	ldrh	r3, [r3, #0]
 80038a2:	88fa      	ldrh	r2, [r7, #6]
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d11b      	bne.n	80038e0 <HAL_GPIO_EXTI_Callback+0x4c>
    {

        if(imu_start_flag)
 80038a8:	4b10      	ldr	r3, [pc, #64]	@ (80038ec <HAL_GPIO_EXTI_Callback+0x58>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d016      	beq.n	80038e0 <HAL_GPIO_EXTI_Callback+0x4c>
        {
            //wake up the task
            if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80038b2:	f008 fbfd 	bl	800c0b0 <xTaskGetSchedulerState>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d011      	beq.n	80038e0 <HAL_GPIO_EXTI_Callback+0x4c>
            {
                static BaseType_t xHigherPriorityTaskWoken;
                vTaskNotifyGiveFromISR(INS_task_local_handler, &xHigherPriorityTaskWoken);
 80038bc:	4b0c      	ldr	r3, [pc, #48]	@ (80038f0 <HAL_GPIO_EXTI_Callback+0x5c>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	490c      	ldr	r1, [pc, #48]	@ (80038f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f008 fcce 	bl	800c264 <vTaskNotifyGiveFromISR>
                portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80038c8:	4b0a      	ldr	r3, [pc, #40]	@ (80038f4 <HAL_GPIO_EXTI_Callback+0x60>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d007      	beq.n	80038e0 <HAL_GPIO_EXTI_Callback+0x4c>
 80038d0:	4b09      	ldr	r3, [pc, #36]	@ (80038f8 <HAL_GPIO_EXTI_Callback+0x64>)
 80038d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038d6:	601a      	str	r2, [r3, #0]
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	f3bf 8f6f 	isb	sy
    }
    else if (GPIO_Pin == INT1_GRYO_Pin)
    {

    }
}
 80038e0:	bf00      	nop
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	2000000e 	.word	0x2000000e
 80038ec:	20000930 	.word	0x20000930
 80038f0:	2000092c 	.word	0x2000092c
 80038f4:	2000097c 	.word	0x2000097c
 80038f8:	e000ed04 	.word	0xe000ed04

080038fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003900:	f001 fe8c 	bl	800561c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003904:	f000 f84c 	bl	80039a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003908:	f000 fcbe 	bl	8004288 <MX_GPIO_Init>
  MX_DMA_Init();
 800390c:	f000 fc7e 	bl	800420c <MX_DMA_Init>
  MX_CAN1_Init();
 8003910:	f000 f8b2 	bl	8003a78 <MX_CAN1_Init>
  MX_CAN2_Init();
 8003914:	f000 f8e6 	bl	8003ae4 <MX_CAN2_Init>
  MX_SPI1_Init();
 8003918:	f000 f948 	bl	8003bac <MX_SPI1_Init>
  MX_TIM4_Init();
 800391c:	f000 fa24 	bl	8003d68 <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8003920:	f000 fbf4 	bl	800410c <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8003924:	f000 fc48 	bl	80041b8 <MX_USART6_UART_Init>
  MX_TIM1_Init();
 8003928:	f000 f976 	bl	8003c18 <MX_TIM1_Init>
  MX_TIM8_Init();
 800392c:	f000 fb04 	bl	8003f38 <MX_TIM8_Init>
  MX_USART3_UART_Init();
 8003930:	f000 fc16 	bl	8004160 <MX_USART3_UART_Init>
  MX_TIM10_Init();
 8003934:	f000 fb9c 	bl	8004070 <MX_TIM10_Init>
  MX_I2C3_Init();
 8003938:	f000 f90a 	bl	8003b50 <MX_I2C3_Init>
  MX_TIM5_Init();
 800393c:	f000 fa8c 	bl	8003e58 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003940:	f006 fd8a 	bl	800a458 <osKernelInitialize>

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of FlowManager */
  FlowManagerHandle = osThreadNew(StartFlowManager, NULL, &FlowManager_attributes);
 8003944:	4a0d      	ldr	r2, [pc, #52]	@ (800397c <main+0x80>)
 8003946:	2100      	movs	r1, #0
 8003948:	480d      	ldr	r0, [pc, #52]	@ (8003980 <main+0x84>)
 800394a:	f006 fdcf 	bl	800a4ec <osThreadNew>
 800394e:	4603      	mov	r3, r0
 8003950:	4a0c      	ldr	r2, [pc, #48]	@ (8003984 <main+0x88>)
 8003952:	6013      	str	r3, [r2, #0]

  /* creation of IMUtempPIDtask */
  IMUtempPIDtaskHandle = osThreadNew(imu_temp_control_task, NULL, &IMUtempPIDtask_attributes);
 8003954:	4a0c      	ldr	r2, [pc, #48]	@ (8003988 <main+0x8c>)
 8003956:	2100      	movs	r1, #0
 8003958:	480c      	ldr	r0, [pc, #48]	@ (800398c <main+0x90>)
 800395a:	f006 fdc7 	bl	800a4ec <osThreadNew>
 800395e:	4603      	mov	r3, r0
 8003960:	4a0b      	ldr	r2, [pc, #44]	@ (8003990 <main+0x94>)
 8003962:	6013      	str	r3, [r2, #0]

  /* creation of ChassisTask */
  ChassisTaskHandle = osThreadNew(StartChassisTask, NULL, &ChassisTask_attributes);
 8003964:	4a0b      	ldr	r2, [pc, #44]	@ (8003994 <main+0x98>)
 8003966:	2100      	movs	r1, #0
 8003968:	480b      	ldr	r0, [pc, #44]	@ (8003998 <main+0x9c>)
 800396a:	f006 fdbf 	bl	800a4ec <osThreadNew>
 800396e:	4603      	mov	r3, r0
 8003970:	4a0a      	ldr	r2, [pc, #40]	@ (800399c <main+0xa0>)
 8003972:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003974:	f006 fd94 	bl	800a4a0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003978:	bf00      	nop
 800397a:	e7fd      	b.n	8003978 <main+0x7c>
 800397c:	0800dfe0 	.word	0x0800dfe0
 8003980:	08004495 	.word	0x08004495
 8003984:	20000ddc 	.word	0x20000ddc
 8003988:	0800e004 	.word	0x0800e004
 800398c:	080037c1 	.word	0x080037c1
 8003990:	20000de0 	.word	0x20000de0
 8003994:	0800e028 	.word	0x0800e028
 8003998:	08004505 	.word	0x08004505
 800399c:	20000de4 	.word	0x20000de4

080039a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b094      	sub	sp, #80	@ 0x50
 80039a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039a6:	f107 0320 	add.w	r3, r7, #32
 80039aa:	2230      	movs	r2, #48	@ 0x30
 80039ac:	2100      	movs	r1, #0
 80039ae:	4618      	mov	r0, r3
 80039b0:	f009 fcfa 	bl	800d3a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039b4:	f107 030c 	add.w	r3, r7, #12
 80039b8:	2200      	movs	r2, #0
 80039ba:	601a      	str	r2, [r3, #0]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	609a      	str	r2, [r3, #8]
 80039c0:	60da      	str	r2, [r3, #12]
 80039c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80039c4:	2300      	movs	r3, #0
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	4b29      	ldr	r3, [pc, #164]	@ (8003a70 <SystemClock_Config+0xd0>)
 80039ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039cc:	4a28      	ldr	r2, [pc, #160]	@ (8003a70 <SystemClock_Config+0xd0>)
 80039ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80039d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80039d4:	4b26      	ldr	r3, [pc, #152]	@ (8003a70 <SystemClock_Config+0xd0>)
 80039d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039dc:	60bb      	str	r3, [r7, #8]
 80039de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80039e0:	2300      	movs	r3, #0
 80039e2:	607b      	str	r3, [r7, #4]
 80039e4:	4b23      	ldr	r3, [pc, #140]	@ (8003a74 <SystemClock_Config+0xd4>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a22      	ldr	r2, [pc, #136]	@ (8003a74 <SystemClock_Config+0xd4>)
 80039ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039ee:	6013      	str	r3, [r2, #0]
 80039f0:	4b20      	ldr	r3, [pc, #128]	@ (8003a74 <SystemClock_Config+0xd4>)
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039f8:	607b      	str	r3, [r7, #4]
 80039fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80039fc:	2301      	movs	r3, #1
 80039fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a06:	2302      	movs	r3, #2
 8003a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003a0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003a10:	2306      	movs	r3, #6
 8003a12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003a14:	23a8      	movs	r3, #168	@ 0xa8
 8003a16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003a18:	2302      	movs	r3, #2
 8003a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003a1c:	2304      	movs	r3, #4
 8003a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a20:	f107 0320 	add.w	r3, r7, #32
 8003a24:	4618      	mov	r0, r3
 8003a26:	f003 fd0f 	bl	8007448 <HAL_RCC_OscConfig>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003a30:	f000 feaa 	bl	8004788 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a34:	230f      	movs	r3, #15
 8003a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003a40:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003a46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003a4a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003a4c:	f107 030c 	add.w	r3, r7, #12
 8003a50:	2105      	movs	r1, #5
 8003a52:	4618      	mov	r0, r3
 8003a54:	f003 ff70 	bl	8007938 <HAL_RCC_ClockConfig>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d001      	beq.n	8003a62 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8003a5e:	f000 fe93 	bl	8004788 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8003a62:	f004 f84f 	bl	8007b04 <HAL_RCC_EnableCSS>
}
 8003a66:	bf00      	nop
 8003a68:	3750      	adds	r7, #80	@ 0x50
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40007000 	.word	0x40007000

08003a78 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003a7c:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003a7e:	4a18      	ldr	r2, [pc, #96]	@ (8003ae0 <MX_CAN1_Init+0x68>)
 8003a80:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8003a82:	4b16      	ldr	r3, [pc, #88]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003a84:	2203      	movs	r2, #3
 8003a86:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003a88:	4b14      	ldr	r3, [pc, #80]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003a8e:	4b13      	ldr	r3, [pc, #76]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003a94:	4b11      	ldr	r3, [pc, #68]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003a96:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003a9a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003a9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003a9e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003aa2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8003aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8003aaa:	4b0c      	ldr	r3, [pc, #48]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003abc:	4b07      	ldr	r3, [pc, #28]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8003ac2:	4b06      	ldr	r3, [pc, #24]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003ac8:	4804      	ldr	r0, [pc, #16]	@ (8003adc <MX_CAN1_Init+0x64>)
 8003aca:	f001 fe19 	bl	8005700 <HAL_CAN_Init>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d001      	beq.n	8003ad8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8003ad4:	f000 fe58 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003ad8:	bf00      	nop
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	20000980 	.word	0x20000980
 8003ae0:	40006400 	.word	0x40006400

08003ae4 <MX_CAN2_Init>:
  * @brief CAN2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN2_Init(void)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 8003ae8:	4b17      	ldr	r3, [pc, #92]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003aea:	4a18      	ldr	r2, [pc, #96]	@ (8003b4c <MX_CAN2_Init+0x68>)
 8003aec:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 3;
 8003aee:	4b16      	ldr	r3, [pc, #88]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003af0:	2203      	movs	r2, #3
 8003af2:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8003af4:	4b14      	ldr	r3, [pc, #80]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003afa:	4b13      	ldr	r3, [pc, #76]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;
 8003b00:	4b11      	ldr	r3, [pc, #68]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b02:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 8003b06:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;
 8003b08:	4b0f      	ldr	r3, [pc, #60]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b0a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003b0e:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8003b10:	4b0d      	ldr	r3, [pc, #52]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 8003b16:	4b0c      	ldr	r3, [pc, #48]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b18:	2200      	movs	r2, #0
 8003b1a:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8003b1c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b1e:	2200      	movs	r2, #0
 8003b20:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8003b22:	4b09      	ldr	r3, [pc, #36]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 8003b28:	4b07      	ldr	r3, [pc, #28]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8003b2e:	4b06      	ldr	r3, [pc, #24]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8003b34:	4804      	ldr	r0, [pc, #16]	@ (8003b48 <MX_CAN2_Init+0x64>)
 8003b36:	f001 fde3 	bl	8005700 <HAL_CAN_Init>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d001      	beq.n	8003b44 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8003b40:	f000 fe22 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8003b44:	bf00      	nop
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	200009a8 	.word	0x200009a8
 8003b4c:	40006800 	.word	0x40006800

08003b50 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8003b54:	4b12      	ldr	r3, [pc, #72]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b56:	4a13      	ldr	r2, [pc, #76]	@ (8003ba4 <MX_I2C3_Init+0x54>)
 8003b58:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8003b5a:	4b11      	ldr	r3, [pc, #68]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b5c:	4a12      	ldr	r2, [pc, #72]	@ (8003ba8 <MX_I2C3_Init+0x58>)
 8003b5e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003b60:	4b0f      	ldr	r3, [pc, #60]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8003b66:	4b0e      	ldr	r3, [pc, #56]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b6c:	4b0c      	ldr	r3, [pc, #48]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b6e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8003b72:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b74:	4b0a      	ldr	r3, [pc, #40]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8003b7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b80:	4b07      	ldr	r3, [pc, #28]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b86:	4b06      	ldr	r3, [pc, #24]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b8c:	4804      	ldr	r0, [pc, #16]	@ (8003ba0 <MX_I2C3_Init+0x50>)
 8003b8e:	f003 fb17 	bl	80071c0 <HAL_I2C_Init>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8003b98:	f000 fdf6 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8003b9c:	bf00      	nop
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	200009d0 	.word	0x200009d0
 8003ba4:	40005c00 	.word	0x40005c00
 8003ba8:	00061a80 	.word	0x00061a80

08003bac <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003bb0:	4b17      	ldr	r3, [pc, #92]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bb2:	4a18      	ldr	r2, [pc, #96]	@ (8003c14 <MX_SPI1_Init+0x68>)
 8003bb4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003bb6:	4b16      	ldr	r3, [pc, #88]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bb8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003bbc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003bbe:	4b14      	ldr	r3, [pc, #80]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003bc4:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8003bca:	4b11      	ldr	r3, [pc, #68]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bcc:	2202      	movs	r2, #2
 8003bce:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8003bd0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003bd6:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003bdc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8003bde:	4b0c      	ldr	r3, [pc, #48]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003be0:	2238      	movs	r2, #56	@ 0x38
 8003be2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003be4:	4b0a      	ldr	r3, [pc, #40]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003be6:	2200      	movs	r2, #0
 8003be8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003bea:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bf0:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003bf6:	4b06      	ldr	r3, [pc, #24]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003bfc:	4804      	ldr	r0, [pc, #16]	@ (8003c10 <MX_SPI1_Init+0x64>)
 8003bfe:	f004 f8a2 	bl	8007d46 <HAL_SPI_Init>
 8003c02:	4603      	mov	r3, r0
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003c08:	f000 fdbe 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003c0c:	bf00      	nop
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	20000a24 	.word	0x20000a24
 8003c14:	40013000 	.word	0x40013000

08003c18 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b092      	sub	sp, #72	@ 0x48
 8003c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c1e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003c22:	2200      	movs	r2, #0
 8003c24:	601a      	str	r2, [r3, #0]
 8003c26:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]
 8003c30:	605a      	str	r2, [r3, #4]
 8003c32:	609a      	str	r2, [r3, #8]
 8003c34:	60da      	str	r2, [r3, #12]
 8003c36:	611a      	str	r2, [r3, #16]
 8003c38:	615a      	str	r2, [r3, #20]
 8003c3a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	2220      	movs	r2, #32
 8003c40:	2100      	movs	r1, #0
 8003c42:	4618      	mov	r0, r3
 8003c44:	f009 fbb0 	bl	800d3a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003c48:	4b45      	ldr	r3, [pc, #276]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c4a:	4a46      	ldr	r2, [pc, #280]	@ (8003d64 <MX_TIM1_Init+0x14c>)
 8003c4c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8003c4e:	4b44      	ldr	r3, [pc, #272]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c50:	2253      	movs	r2, #83	@ 0x53
 8003c52:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c54:	4b42      	ldr	r3, [pc, #264]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c56:	2200      	movs	r2, #0
 8003c58:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8003c5a:	4b41      	ldr	r3, [pc, #260]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c5c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003c60:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c62:	4b3f      	ldr	r3, [pc, #252]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c64:	2200      	movs	r2, #0
 8003c66:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003c68:	4b3d      	ldr	r3, [pc, #244]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c70:	2200      	movs	r2, #0
 8003c72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003c74:	483a      	ldr	r0, [pc, #232]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c76:	f004 fbc4 	bl	8008402 <HAL_TIM_PWM_Init>
 8003c7a:	4603      	mov	r3, r0
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d001      	beq.n	8003c84 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8003c80:	f000 fd82 	bl	8004788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c84:	2300      	movs	r3, #0
 8003c86:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003c8c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003c90:	4619      	mov	r1, r3
 8003c92:	4833      	ldr	r0, [pc, #204]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003c94:	f005 f87e 	bl	8008d94 <HAL_TIMEx_MasterConfigSynchronization>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d001      	beq.n	8003ca2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8003c9e:	f000 fd73 	bl	8004788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ca2:	2360      	movs	r3, #96	@ 0x60
 8003ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003ca6:	2300      	movs	r3, #0
 8003ca8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003caa:	2300      	movs	r3, #0
 8003cac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003cae:	2300      	movs	r3, #0
 8003cb0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003cbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	4619      	mov	r1, r3
 8003cc6:	4826      	ldr	r0, [pc, #152]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003cc8:	f004 fbea 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8003cd2:	f000 fd59 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003cd6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cda:	2204      	movs	r2, #4
 8003cdc:	4619      	mov	r1, r3
 8003cde:	4820      	ldr	r0, [pc, #128]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003ce0:	f004 fbde 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d001      	beq.n	8003cee <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8003cea:	f000 fd4d 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003cee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cf2:	2208      	movs	r2, #8
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	481a      	ldr	r0, [pc, #104]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003cf8:	f004 fbd2 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8003d02:	f000 fd41 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d0a:	220c      	movs	r2, #12
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4814      	ldr	r0, [pc, #80]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003d10:	f004 fbc6 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8003d1a:	f000 fd35 	bl	8004788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003d22:	2300      	movs	r3, #0
 8003d24:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003d26:	2300      	movs	r3, #0
 8003d28:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003d32:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003d36:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003d3c:	1d3b      	adds	r3, r7, #4
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4807      	ldr	r0, [pc, #28]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003d42:	f005 f8a3 	bl	8008e8c <HAL_TIMEx_ConfigBreakDeadTime>
 8003d46:	4603      	mov	r3, r0
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d001      	beq.n	8003d50 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8003d4c:	f000 fd1c 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8003d50:	4803      	ldr	r0, [pc, #12]	@ (8003d60 <MX_TIM1_Init+0x148>)
 8003d52:	f001 f8f3 	bl	8004f3c <HAL_TIM_MspPostInit>

}
 8003d56:	bf00      	nop
 8003d58:	3748      	adds	r7, #72	@ 0x48
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	20000a7c 	.word	0x20000a7c
 8003d64:	40010000 	.word	0x40010000

08003d68 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b08e      	sub	sp, #56	@ 0x38
 8003d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003d6e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003d72:	2200      	movs	r2, #0
 8003d74:	601a      	str	r2, [r3, #0]
 8003d76:	605a      	str	r2, [r3, #4]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003d7c:	f107 0320 	add.w	r3, r7, #32
 8003d80:	2200      	movs	r2, #0
 8003d82:	601a      	str	r2, [r3, #0]
 8003d84:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003d86:	1d3b      	adds	r3, r7, #4
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	605a      	str	r2, [r3, #4]
 8003d8e:	609a      	str	r2, [r3, #8]
 8003d90:	60da      	str	r2, [r3, #12]
 8003d92:	611a      	str	r2, [r3, #16]
 8003d94:	615a      	str	r2, [r3, #20]
 8003d96:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003d98:	4b2d      	ldr	r3, [pc, #180]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003d9a:	4a2e      	ldr	r2, [pc, #184]	@ (8003e54 <MX_TIM4_Init+0xec>)
 8003d9c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8003d9e:	4b2c      	ldr	r3, [pc, #176]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003da4:	4b2a      	ldr	r3, [pc, #168]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003da6:	2200      	movs	r2, #0
 8003da8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 20999;
 8003daa:	4b29      	ldr	r3, [pc, #164]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003dac:	f245 2207 	movw	r2, #20999	@ 0x5207
 8003db0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003db2:	4b27      	ldr	r3, [pc, #156]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003db8:	4b25      	ldr	r3, [pc, #148]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003dba:	2280      	movs	r2, #128	@ 0x80
 8003dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003dbe:	4824      	ldr	r0, [pc, #144]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003dc0:	f004 fad0 	bl	8008364 <HAL_TIM_Base_Init>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d001      	beq.n	8003dce <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8003dca:	f000 fcdd 	bl	8004788 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003dce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003dd4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003dd8:	4619      	mov	r1, r3
 8003dda:	481d      	ldr	r0, [pc, #116]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003ddc:	f004 fc22 	bl	8008624 <HAL_TIM_ConfigClockSource>
 8003de0:	4603      	mov	r3, r0
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8003de6:	f000 fccf 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003dea:	4819      	ldr	r0, [pc, #100]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003dec:	f004 fb09 	bl	8008402 <HAL_TIM_PWM_Init>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8003df6:	f000 fcc7 	bl	8004788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003e02:	f107 0320 	add.w	r3, r7, #32
 8003e06:	4619      	mov	r1, r3
 8003e08:	4811      	ldr	r0, [pc, #68]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003e0a:	f004 ffc3 	bl	8008d94 <HAL_TIMEx_MasterConfigSynchronization>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d001      	beq.n	8003e18 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8003e14:	f000 fcb8 	bl	8004788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003e18:	2360      	movs	r3, #96	@ 0x60
 8003e1a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10499;
 8003e1c:	f642 1303 	movw	r3, #10499	@ 0x2903
 8003e20:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003e22:	2300      	movs	r3, #0
 8003e24:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003e2a:	1d3b      	adds	r3, r7, #4
 8003e2c:	2208      	movs	r2, #8
 8003e2e:	4619      	mov	r1, r3
 8003e30:	4807      	ldr	r0, [pc, #28]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003e32:	f004 fb35 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d001      	beq.n	8003e40 <MX_TIM4_Init+0xd8>
  {
    Error_Handler();
 8003e3c:	f000 fca4 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8003e40:	4803      	ldr	r0, [pc, #12]	@ (8003e50 <MX_TIM4_Init+0xe8>)
 8003e42:	f001 f87b 	bl	8004f3c <HAL_TIM_MspPostInit>

}
 8003e46:	bf00      	nop
 8003e48:	3738      	adds	r7, #56	@ 0x38
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	20000ac4 	.word	0x20000ac4
 8003e54:	40000800 	.word	0x40000800

08003e58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08a      	sub	sp, #40	@ 0x28
 8003e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003e5e:	f107 0320 	add.w	r3, r7, #32
 8003e62:	2200      	movs	r2, #0
 8003e64:	601a      	str	r2, [r3, #0]
 8003e66:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003e68:	1d3b      	adds	r3, r7, #4
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	601a      	str	r2, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	60da      	str	r2, [r3, #12]
 8003e74:	611a      	str	r2, [r3, #16]
 8003e76:	615a      	str	r2, [r3, #20]
 8003e78:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003e7c:	4a2d      	ldr	r2, [pc, #180]	@ (8003f34 <MX_TIM5_Init+0xdc>)
 8003e7e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 42;
 8003e80:	4b2b      	ldr	r3, [pc, #172]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003e82:	222a      	movs	r2, #42	@ 0x2a
 8003e84:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003e86:	4b2a      	ldr	r3, [pc, #168]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003e88:	2200      	movs	r2, #0
 8003e8a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 19999;
 8003e8c:	4b28      	ldr	r3, [pc, #160]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003e8e:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003e92:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003e94:	4b26      	ldr	r3, [pc, #152]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003e96:	2200      	movs	r2, #0
 8003e98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e9a:	4b25      	ldr	r3, [pc, #148]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8003ea0:	4823      	ldr	r0, [pc, #140]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003ea2:	f004 faae 	bl	8008402 <HAL_TIM_PWM_Init>
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d001      	beq.n	8003eb0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8003eac:	f000 fc6c 	bl	8004788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8003eb8:	f107 0320 	add.w	r3, r7, #32
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	481c      	ldr	r0, [pc, #112]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003ec0:	f004 ff68 	bl	8008d94 <HAL_TIMEx_MasterConfigSynchronization>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8003eca:	f000 fc5d 	bl	8004788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003ece:	2360      	movs	r3, #96	@ 0x60
 8003ed0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003eda:	2300      	movs	r3, #0
 8003edc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ede:	1d3b      	adds	r3, r7, #4
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	4812      	ldr	r0, [pc, #72]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003ee6:	f004 fadb 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8003ef0:	f000 fc4a 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ef4:	1d3b      	adds	r3, r7, #4
 8003ef6:	2204      	movs	r2, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	480d      	ldr	r0, [pc, #52]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003efc:	f004 fad0 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8003f06:	f000 fc3f 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8003f0a:	1d3b      	adds	r3, r7, #4
 8003f0c:	2208      	movs	r2, #8
 8003f0e:	4619      	mov	r1, r3
 8003f10:	4807      	ldr	r0, [pc, #28]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003f12:	f004 fac5 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d001      	beq.n	8003f20 <MX_TIM5_Init+0xc8>
  {
    Error_Handler();
 8003f1c:	f000 fc34 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8003f20:	4803      	ldr	r0, [pc, #12]	@ (8003f30 <MX_TIM5_Init+0xd8>)
 8003f22:	f001 f80b 	bl	8004f3c <HAL_TIM_MspPostInit>

}
 8003f26:	bf00      	nop
 8003f28:	3728      	adds	r7, #40	@ 0x28
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd80      	pop	{r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	20000b0c 	.word	0x20000b0c
 8003f34:	40000c00 	.word	0x40000c00

08003f38 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b092      	sub	sp, #72	@ 0x48
 8003f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003f3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003f42:	2200      	movs	r2, #0
 8003f44:	601a      	str	r2, [r3, #0]
 8003f46:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003f48:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	601a      	str	r2, [r3, #0]
 8003f50:	605a      	str	r2, [r3, #4]
 8003f52:	609a      	str	r2, [r3, #8]
 8003f54:	60da      	str	r2, [r3, #12]
 8003f56:	611a      	str	r2, [r3, #16]
 8003f58:	615a      	str	r2, [r3, #20]
 8003f5a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003f5c:	1d3b      	adds	r3, r7, #4
 8003f5e:	2220      	movs	r2, #32
 8003f60:	2100      	movs	r1, #0
 8003f62:	4618      	mov	r0, r3
 8003f64:	f009 fa20 	bl	800d3a8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8003f68:	4b3f      	ldr	r3, [pc, #252]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f6a:	4a40      	ldr	r2, [pc, #256]	@ (800406c <MX_TIM8_Init+0x134>)
 8003f6c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 83;
 8003f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f70:	2253      	movs	r2, #83	@ 0x53
 8003f72:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f74:	4b3c      	ldr	r3, [pc, #240]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8003f7a:	4b3b      	ldr	r3, [pc, #236]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f7c:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003f80:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003f82:	4b39      	ldr	r3, [pc, #228]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f84:	2200      	movs	r2, #0
 8003f86:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8003f88:	4b37      	ldr	r3, [pc, #220]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003f8e:	4b36      	ldr	r3, [pc, #216]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f90:	2280      	movs	r2, #128	@ 0x80
 8003f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8003f94:	4834      	ldr	r0, [pc, #208]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003f96:	f004 fa34 	bl	8008402 <HAL_TIM_PWM_Init>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <MX_TIM8_Init+0x6c>
  {
    Error_Handler();
 8003fa0:	f000 fbf2 	bl	8004788 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8003fac:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	482d      	ldr	r0, [pc, #180]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003fb4:	f004 feee 	bl	8008d94 <HAL_TIMEx_MasterConfigSynchronization>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <MX_TIM8_Init+0x8a>
  {
    Error_Handler();
 8003fbe:	f000 fbe3 	bl	8004788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003fc2:	2360      	movs	r3, #96	@ 0x60
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003fce:	2300      	movs	r3, #0
 8003fd0:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	4820      	ldr	r0, [pc, #128]	@ (8004068 <MX_TIM8_Init+0x130>)
 8003fe8:	f004 fa5a 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <MX_TIM8_Init+0xbe>
  {
    Error_Handler();
 8003ff2:	f000 fbc9 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003ff6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	4619      	mov	r1, r3
 8003ffe:	481a      	ldr	r0, [pc, #104]	@ (8004068 <MX_TIM8_Init+0x130>)
 8004000:	f004 fa4e 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <MX_TIM8_Init+0xd6>
  {
    Error_Handler();
 800400a:	f000 fbbd 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800400e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004012:	2208      	movs	r2, #8
 8004014:	4619      	mov	r1, r3
 8004016:	4814      	ldr	r0, [pc, #80]	@ (8004068 <MX_TIM8_Init+0x130>)
 8004018:	f004 fa42 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 800401c:	4603      	mov	r3, r0
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <MX_TIM8_Init+0xee>
  {
    Error_Handler();
 8004022:	f000 fbb1 	bl	8004788 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8004026:	2300      	movs	r3, #0
 8004028:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800402e:	2300      	movs	r3, #0
 8004030:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8004032:	2300      	movs	r3, #0
 8004034:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8004036:	2300      	movs	r3, #0
 8004038:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800403a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800403e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8004040:	2300      	movs	r3, #0
 8004042:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8004044:	1d3b      	adds	r3, r7, #4
 8004046:	4619      	mov	r1, r3
 8004048:	4807      	ldr	r0, [pc, #28]	@ (8004068 <MX_TIM8_Init+0x130>)
 800404a:	f004 ff1f 	bl	8008e8c <HAL_TIMEx_ConfigBreakDeadTime>
 800404e:	4603      	mov	r3, r0
 8004050:	2b00      	cmp	r3, #0
 8004052:	d001      	beq.n	8004058 <MX_TIM8_Init+0x120>
  {
    Error_Handler();
 8004054:	f000 fb98 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8004058:	4803      	ldr	r0, [pc, #12]	@ (8004068 <MX_TIM8_Init+0x130>)
 800405a:	f000 ff6f 	bl	8004f3c <HAL_TIM_MspPostInit>

}
 800405e:	bf00      	nop
 8004060:	3748      	adds	r7, #72	@ 0x48
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	20000b54 	.word	0x20000b54
 800406c:	40010400 	.word	0x40010400

08004070 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b088      	sub	sp, #32
 8004074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8004076:	1d3b      	adds	r3, r7, #4
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]
 800407c:	605a      	str	r2, [r3, #4]
 800407e:	609a      	str	r2, [r3, #8]
 8004080:	60da      	str	r2, [r3, #12]
 8004082:	611a      	str	r2, [r3, #16]
 8004084:	615a      	str	r2, [r3, #20]
 8004086:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8004088:	4b1e      	ldr	r3, [pc, #120]	@ (8004104 <MX_TIM10_Init+0x94>)
 800408a:	4a1f      	ldr	r2, [pc, #124]	@ (8004108 <MX_TIM10_Init+0x98>)
 800408c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 0;
 800408e:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <MX_TIM10_Init+0x94>)
 8004090:	2200      	movs	r2, #0
 8004092:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004094:	4b1b      	ldr	r3, [pc, #108]	@ (8004104 <MX_TIM10_Init+0x94>)
 8004096:	2200      	movs	r2, #0
 8004098:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 4999;
 800409a:	4b1a      	ldr	r3, [pc, #104]	@ (8004104 <MX_TIM10_Init+0x94>)
 800409c:	f241 3287 	movw	r2, #4999	@ 0x1387
 80040a0:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80040a2:	4b18      	ldr	r3, [pc, #96]	@ (8004104 <MX_TIM10_Init+0x94>)
 80040a4:	2200      	movs	r2, #0
 80040a6:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80040a8:	4b16      	ldr	r3, [pc, #88]	@ (8004104 <MX_TIM10_Init+0x94>)
 80040aa:	2200      	movs	r2, #0
 80040ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 80040ae:	4815      	ldr	r0, [pc, #84]	@ (8004104 <MX_TIM10_Init+0x94>)
 80040b0:	f004 f958 	bl	8008364 <HAL_TIM_Base_Init>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80040ba:	f000 fb65 	bl	8004788 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80040be:	4811      	ldr	r0, [pc, #68]	@ (8004104 <MX_TIM10_Init+0x94>)
 80040c0:	f004 f99f 	bl	8008402 <HAL_TIM_PWM_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80040ca:	f000 fb5d 	bl	8004788 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80040ce:	2360      	movs	r3, #96	@ 0x60
 80040d0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80040d2:	2300      	movs	r3, #0
 80040d4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80040d6:	2300      	movs	r3, #0
 80040d8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80040da:	2300      	movs	r3, #0
 80040dc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80040de:	1d3b      	adds	r3, r7, #4
 80040e0:	2200      	movs	r2, #0
 80040e2:	4619      	mov	r1, r3
 80040e4:	4807      	ldr	r0, [pc, #28]	@ (8004104 <MX_TIM10_Init+0x94>)
 80040e6:	f004 f9db 	bl	80084a0 <HAL_TIM_PWM_ConfigChannel>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d001      	beq.n	80040f4 <MX_TIM10_Init+0x84>
  {
    Error_Handler();
 80040f0:	f000 fb4a 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80040f4:	4803      	ldr	r0, [pc, #12]	@ (8004104 <MX_TIM10_Init+0x94>)
 80040f6:	f000 ff21 	bl	8004f3c <HAL_TIM_MspPostInit>

}
 80040fa:	bf00      	nop
 80040fc:	3720      	adds	r7, #32
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
 8004102:	bf00      	nop
 8004104:	20000b9c 	.word	0x20000b9c
 8004108:	40014400 	.word	0x40014400

0800410c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004110:	4b11      	ldr	r3, [pc, #68]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 8004112:	4a12      	ldr	r2, [pc, #72]	@ (800415c <MX_USART1_UART_Init+0x50>)
 8004114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004116:	4b10      	ldr	r3, [pc, #64]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 8004118:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800411c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800411e:	4b0e      	ldr	r3, [pc, #56]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 8004120:	2200      	movs	r2, #0
 8004122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004124:	4b0c      	ldr	r3, [pc, #48]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 8004126:	2200      	movs	r2, #0
 8004128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800412a:	4b0b      	ldr	r3, [pc, #44]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 800412c:	2200      	movs	r2, #0
 800412e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004130:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 8004132:	220c      	movs	r2, #12
 8004134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004136:	4b08      	ldr	r3, [pc, #32]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800413c:	4b06      	ldr	r3, [pc, #24]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 800413e:	2200      	movs	r2, #0
 8004140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004142:	4805      	ldr	r0, [pc, #20]	@ (8004158 <MX_USART1_UART_Init+0x4c>)
 8004144:	f004 fef4 	bl	8008f30 <HAL_UART_Init>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800414e:	f000 fb1b 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004152:	bf00      	nop
 8004154:	bd80      	pop	{r7, pc}
 8004156:	bf00      	nop
 8004158:	20000be4 	.word	0x20000be4
 800415c:	40011000 	.word	0x40011000

08004160 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004164:	4b11      	ldr	r3, [pc, #68]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 8004166:	4a12      	ldr	r2, [pc, #72]	@ (80041b0 <MX_USART3_UART_Init+0x50>)
 8004168:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 100000;
 800416a:	4b10      	ldr	r3, [pc, #64]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 800416c:	4a11      	ldr	r2, [pc, #68]	@ (80041b4 <MX_USART3_UART_Init+0x54>)
 800416e:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004170:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 8004172:	2200      	movs	r2, #0
 8004174:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004176:	4b0d      	ldr	r3, [pc, #52]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 8004178:	2200      	movs	r2, #0
 800417a:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_EVEN;
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 800417e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004182:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004184:	4b09      	ldr	r3, [pc, #36]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 8004186:	220c      	movs	r2, #12
 8004188:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800418a:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 800418c:	2200      	movs	r2, #0
 800418e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004190:	4b06      	ldr	r3, [pc, #24]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 8004192:	2200      	movs	r2, #0
 8004194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004196:	4805      	ldr	r0, [pc, #20]	@ (80041ac <MX_USART3_UART_Init+0x4c>)
 8004198:	f004 feca 	bl	8008f30 <HAL_UART_Init>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d001      	beq.n	80041a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80041a2:	f000 faf1 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80041a6:	bf00      	nop
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000c2c 	.word	0x20000c2c
 80041b0:	40004800 	.word	0x40004800
 80041b4:	000186a0 	.word	0x000186a0

080041b8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80041bc:	4b11      	ldr	r3, [pc, #68]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041be:	4a12      	ldr	r2, [pc, #72]	@ (8004208 <MX_USART6_UART_Init+0x50>)
 80041c0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80041c2:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80041c8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80041ca:	4b0e      	ldr	r3, [pc, #56]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041cc:	2200      	movs	r2, #0
 80041ce:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80041d0:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041d2:	2200      	movs	r2, #0
 80041d4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80041dc:	4b09      	ldr	r3, [pc, #36]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041de:	220c      	movs	r2, #12
 80041e0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80041e2:	4b08      	ldr	r3, [pc, #32]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041e4:	2200      	movs	r2, #0
 80041e6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80041e8:	4b06      	ldr	r3, [pc, #24]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041ea:	2200      	movs	r2, #0
 80041ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80041ee:	4805      	ldr	r0, [pc, #20]	@ (8004204 <MX_USART6_UART_Init+0x4c>)
 80041f0:	f004 fe9e 	bl	8008f30 <HAL_UART_Init>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d001      	beq.n	80041fe <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80041fa:	f000 fac5 	bl	8004788 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	20000c74 	.word	0x20000c74
 8004208:	40011400 	.word	0x40011400

0800420c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
 8004216:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <MX_DMA_Init+0x78>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	4a1a      	ldr	r2, [pc, #104]	@ (8004284 <MX_DMA_Init+0x78>)
 800421c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004220:	6313      	str	r3, [r2, #48]	@ 0x30
 8004222:	4b18      	ldr	r3, [pc, #96]	@ (8004284 <MX_DMA_Init+0x78>)
 8004224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004226:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800422a:	607b      	str	r3, [r7, #4]
 800422c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800422e:	2300      	movs	r3, #0
 8004230:	603b      	str	r3, [r7, #0]
 8004232:	4b14      	ldr	r3, [pc, #80]	@ (8004284 <MX_DMA_Init+0x78>)
 8004234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004236:	4a13      	ldr	r2, [pc, #76]	@ (8004284 <MX_DMA_Init+0x78>)
 8004238:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800423c:	6313      	str	r3, [r2, #48]	@ 0x30
 800423e:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <MX_DMA_Init+0x78>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004242:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 800424a:	2200      	movs	r2, #0
 800424c:	2105      	movs	r1, #5
 800424e:	200c      	movs	r0, #12
 8004250:	f002 f997 	bl	8006582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004254:	200c      	movs	r0, #12
 8004256:	f002 f9b0 	bl	80065ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 800425a:	2200      	movs	r2, #0
 800425c:	2105      	movs	r1, #5
 800425e:	2039      	movs	r0, #57	@ 0x39
 8004260:	f002 f98f 	bl	8006582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8004264:	2039      	movs	r0, #57	@ 0x39
 8004266:	f002 f9a8 	bl	80065ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 800426a:	2200      	movs	r2, #0
 800426c:	2105      	movs	r1, #5
 800426e:	203a      	movs	r0, #58	@ 0x3a
 8004270:	f002 f987 	bl	8006582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8004274:	203a      	movs	r0, #58	@ 0x3a
 8004276:	f002 f9a0 	bl	80065ba <HAL_NVIC_EnableIRQ>

}
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	40023800 	.word	0x40023800

08004288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b08e      	sub	sp, #56	@ 0x38
 800428c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800428e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004292:	2200      	movs	r2, #0
 8004294:	601a      	str	r2, [r3, #0]
 8004296:	605a      	str	r2, [r3, #4]
 8004298:	609a      	str	r2, [r3, #8]
 800429a:	60da      	str	r2, [r3, #12]
 800429c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800429e:	2300      	movs	r3, #0
 80042a0:	623b      	str	r3, [r7, #32]
 80042a2:	4b77      	ldr	r3, [pc, #476]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042a6:	4a76      	ldr	r2, [pc, #472]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042a8:	f043 0302 	orr.w	r3, r3, #2
 80042ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ae:	4b74      	ldr	r3, [pc, #464]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	623b      	str	r3, [r7, #32]
 80042b8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80042ba:	2300      	movs	r3, #0
 80042bc:	61fb      	str	r3, [r7, #28]
 80042be:	4b70      	ldr	r3, [pc, #448]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c2:	4a6f      	ldr	r2, [pc, #444]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80042ca:	4b6d      	ldr	r3, [pc, #436]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042d2:	61fb      	str	r3, [r7, #28]
 80042d4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
 80042da:	4b69      	ldr	r3, [pc, #420]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042de:	4a68      	ldr	r2, [pc, #416]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042e0:	f043 0301 	orr.w	r3, r3, #1
 80042e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80042e6:	4b66      	ldr	r3, [pc, #408]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ea:	f003 0301 	and.w	r3, r3, #1
 80042ee:	61bb      	str	r3, [r7, #24]
 80042f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80042f2:	2300      	movs	r3, #0
 80042f4:	617b      	str	r3, [r7, #20]
 80042f6:	4b62      	ldr	r3, [pc, #392]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042fa:	4a61      	ldr	r2, [pc, #388]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 80042fc:	f043 0308 	orr.w	r3, r3, #8
 8004300:	6313      	str	r3, [r2, #48]	@ 0x30
 8004302:	4b5f      	ldr	r3, [pc, #380]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	617b      	str	r3, [r7, #20]
 800430c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800430e:	2300      	movs	r3, #0
 8004310:	613b      	str	r3, [r7, #16]
 8004312:	4b5b      	ldr	r3, [pc, #364]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004316:	4a5a      	ldr	r2, [pc, #360]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004318:	f043 0304 	orr.w	r3, r3, #4
 800431c:	6313      	str	r3, [r2, #48]	@ 0x30
 800431e:	4b58      	ldr	r3, [pc, #352]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004322:	f003 0304 	and.w	r3, r3, #4
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800432a:	2300      	movs	r3, #0
 800432c:	60fb      	str	r3, [r7, #12]
 800432e:	4b54      	ldr	r3, [pc, #336]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004332:	4a53      	ldr	r2, [pc, #332]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004334:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004338:	6313      	str	r3, [r2, #48]	@ 0x30
 800433a:	4b51      	ldr	r3, [pc, #324]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 800433c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004342:	60fb      	str	r3, [r7, #12]
 8004344:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b4d      	ldr	r3, [pc, #308]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 800434c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800434e:	4a4c      	ldr	r2, [pc, #304]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004350:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004354:	6313      	str	r3, [r2, #48]	@ 0x30
 8004356:	4b4a      	ldr	r3, [pc, #296]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800435a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
 8004366:	4b46      	ldr	r3, [pc, #280]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436a:	4a45      	ldr	r2, [pc, #276]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 800436c:	f043 0320 	orr.w	r3, r3, #32
 8004370:	6313      	str	r3, [r2, #48]	@ 0x30
 8004372:	4b43      	ldr	r3, [pc, #268]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004374:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004376:	f003 0320 	and.w	r3, r3, #32
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800437e:	2300      	movs	r3, #0
 8004380:	603b      	str	r3, [r7, #0]
 8004382:	4b3f      	ldr	r3, [pc, #252]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004386:	4a3e      	ldr	r2, [pc, #248]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004388:	f043 0310 	orr.w	r3, r3, #16
 800438c:	6313      	str	r3, [r2, #48]	@ 0x30
 800438e:	4b3c      	ldr	r3, [pc, #240]	@ (8004480 <MX_GPIO_Init+0x1f8>)
 8004390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	603b      	str	r3, [r7, #0]
 8004398:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 800439a:	2200      	movs	r2, #0
 800439c:	2140      	movs	r1, #64	@ 0x40
 800439e:	4839      	ldr	r0, [pc, #228]	@ (8004484 <MX_GPIO_Init+0x1fc>)
 80043a0:	f002 fedc 	bl	800715c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 80043a4:	2200      	movs	r2, #0
 80043a6:	2110      	movs	r1, #16
 80043a8:	4837      	ldr	r0, [pc, #220]	@ (8004488 <MX_GPIO_Init+0x200>)
 80043aa:	f002 fed7 	bl	800715c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 80043ae:	2200      	movs	r2, #0
 80043b0:	2101      	movs	r1, #1
 80043b2:	4836      	ldr	r0, [pc, #216]	@ (800448c <MX_GPIO_Init+0x204>)
 80043b4:	f002 fed2 	bl	800715c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80043b8:	2340      	movs	r3, #64	@ 0x40
 80043ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80043bc:	2301      	movs	r3, #1
 80043be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043c4:	2300      	movs	r3, #0
 80043c6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043cc:	4619      	mov	r1, r3
 80043ce:	482d      	ldr	r0, [pc, #180]	@ (8004484 <MX_GPIO_Init+0x1fc>)
 80043d0:	f002 fd10 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80043d4:	2308      	movs	r3, #8
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80043d8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80043dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043de:	2300      	movs	r3, #0
 80043e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80043e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043e6:	4619      	mov	r1, r3
 80043e8:	4826      	ldr	r0, [pc, #152]	@ (8004484 <MX_GPIO_Init+0x1fc>)
 80043ea:	f002 fd03 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80043ee:	2301      	movs	r3, #1
 80043f0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80043f2:	2300      	movs	r3, #0
 80043f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043f6:	2300      	movs	r3, #0
 80043f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80043fe:	4619      	mov	r1, r3
 8004400:	4821      	ldr	r0, [pc, #132]	@ (8004488 <MX_GPIO_Init+0x200>)
 8004402:	f002 fcf7 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004406:	2310      	movs	r3, #16
 8004408:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800440a:	2301      	movs	r3, #1
 800440c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800440e:	2300      	movs	r3, #0
 8004410:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004412:	2300      	movs	r3, #0
 8004414:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004416:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800441a:	4619      	mov	r1, r3
 800441c:	481a      	ldr	r0, [pc, #104]	@ (8004488 <MX_GPIO_Init+0x200>)
 800441e:	f002 fce9 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_ACCEL_Pin_Pin INT1_GRYO_Pin_Pin */
  GPIO_InitStruct.Pin = INT1_ACCEL_Pin_Pin|INT1_GRYO_Pin_Pin;
 8004422:	2330      	movs	r3, #48	@ 0x30
 8004424:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004426:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800442a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800442c:	2300      	movs	r3, #0
 800442e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004430:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004434:	4619      	mov	r1, r3
 8004436:	4816      	ldr	r0, [pc, #88]	@ (8004490 <MX_GPIO_Init+0x208>)
 8004438:	f002 fcdc 	bl	8006df4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800443c:	2301      	movs	r3, #1
 800443e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004440:	2301      	movs	r3, #1
 8004442:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004444:	2300      	movs	r3, #0
 8004446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004448:	2300      	movs	r3, #0
 800444a:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800444c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004450:	4619      	mov	r1, r3
 8004452:	480e      	ldr	r0, [pc, #56]	@ (800448c <MX_GPIO_Init+0x204>)
 8004454:	f002 fcce 	bl	8006df4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 8004458:	2200      	movs	r2, #0
 800445a:	2105      	movs	r1, #5
 800445c:	2009      	movs	r0, #9
 800445e:	f002 f890 	bl	8006582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8004462:	2009      	movs	r0, #9
 8004464:	f002 f8a9 	bl	80065ba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8004468:	2200      	movs	r2, #0
 800446a:	2105      	movs	r1, #5
 800446c:	200a      	movs	r0, #10
 800446e:	f002 f888 	bl	8006582 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8004472:	200a      	movs	r0, #10
 8004474:	f002 f8a1 	bl	80065ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8004478:	bf00      	nop
 800447a:	3738      	adds	r7, #56	@ 0x38
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	40023800 	.word	0x40023800
 8004484:	40021800 	.word	0x40021800
 8004488:	40020000 	.word	0x40020000
 800448c:	40020400 	.word	0x40020400
 8004490:	40020800 	.word	0x40020800

08004494 <StartFlowManager>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartFlowManager */
void StartFlowManager(void *argument)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b084      	sub	sp, #16
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t iCount = 0;
 800449c:	2300      	movs	r3, #0
 800449e:	73fb      	strb	r3, [r7, #15]

	DBUS_Rx_Init(&huart3);
 80044a0:	4814      	ldr	r0, [pc, #80]	@ (80044f4 <StartFlowManager+0x60>)
 80044a2:	f7fd fd6d 	bl	8001f80 <DBUS_Rx_Init>

	UART_Ex_Init(&huart1);
 80044a6:	4814      	ldr	r0, [pc, #80]	@ (80044f8 <StartFlowManager+0x64>)
 80044a8:	f7fd ffa8 	bl	80023fc <UART_Ex_Init>
	UART_Ex_Init(&huart6);
 80044ac:	4813      	ldr	r0, [pc, #76]	@ (80044fc <StartFlowManager+0x68>)
 80044ae:	f7fd ffa5 	bl	80023fc <UART_Ex_Init>
	CAN_Init();
 80044b2:	f7fd fd29 	bl	8001f08 <CAN_Init>
	BMI088_gyro_init();
 80044b6:	f7fc f927 	bl	8000708 <BMI088_gyro_init>
  /* Infinite loop */
  for(;;)
  {
	  DBUS_Update();
 80044ba:	f7fd fd93 	bl	8001fe4 <DBUS_Update>

	  // UART_Printf(&huart1, "%d %d\r\n", CAL_getBufferEnergy(), CAL_getPowerLimit());

	  if(iCount%3==0){
 80044be:	7bfa      	ldrb	r2, [r7, #15]
 80044c0:	4b0f      	ldr	r3, [pc, #60]	@ (8004500 <StartFlowManager+0x6c>)
 80044c2:	fba3 1302 	umull	r1, r3, r3, r2
 80044c6:	0859      	lsrs	r1, r3, #1
 80044c8:	460b      	mov	r3, r1
 80044ca:	005b      	lsls	r3, r3, #1
 80044cc:	440b      	add	r3, r1
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d101      	bne.n	80044da <StartFlowManager+0x46>
		  CAL_Update();
 80044d6:	f7fc faff 	bl	8000ad8 <CAL_Update>


	  //UART_Printf(&huart6,"DBUS Check: %d %d \n", getDR16_W(),getCC_W());
	  //UART_Printfmt(&huart6,"%d \n",getDR16_CH1());

	  if(iCount<255){
 80044da:	7bfb      	ldrb	r3, [r7, #15]
 80044dc:	2bff      	cmp	r3, #255	@ 0xff
 80044de:	d003      	beq.n	80044e8 <StartFlowManager+0x54>
		  iCount++;
 80044e0:	7bfb      	ldrb	r3, [r7, #15]
 80044e2:	3301      	adds	r3, #1
 80044e4:	73fb      	strb	r3, [r7, #15]
 80044e6:	e001      	b.n	80044ec <StartFlowManager+0x58>
	  }else{
		  iCount = 0;
 80044e8:	2300      	movs	r3, #0
 80044ea:	73fb      	strb	r3, [r7, #15]
	  }
	  osDelay(1);
 80044ec:	2001      	movs	r0, #1
 80044ee:	f006 f88f 	bl	800a610 <osDelay>
	  DBUS_Update();
 80044f2:	e7e2      	b.n	80044ba <StartFlowManager+0x26>
 80044f4:	20000c2c 	.word	0x20000c2c
 80044f8:	20000be4 	.word	0x20000be4
 80044fc:	20000c74 	.word	0x20000c74
 8004500:	aaaaaaab 	.word	0xaaaaaaab

08004504 <StartChassisTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartChassisTask */
void StartChassisTask(void *argument)
{
 8004504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004506:	b08f      	sub	sp, #60	@ 0x3c
 8004508:	af02      	add	r7, sp, #8
 800450a:	6078      	str	r0, [r7, #4]
	EXAMPLE: PID_preset_t motorDrive1 = {300.0, 0.0001, 120.5};
		This will create a struct of PID_preset_t with PID values of 300.0f, 0.0001f, and 120.5f accordingly
	*/

	// PID_preset_t preset1 = {0.8, 0.0, 0.0};
	PID_preset_t preset2 = {0.0, 0.0, 0.0};
 800450c:	f04f 0300 	mov.w	r3, #0
 8004510:	61bb      	str	r3, [r7, #24]
 8004512:	f04f 0300 	mov.w	r3, #0
 8004516:	61fb      	str	r3, [r7, #28]
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	623b      	str	r3, [r7, #32]
	PID_preset_t preset = {20.0, 0.0, 8.0};
 800451e:	4a96      	ldr	r2, [pc, #600]	@ (8004778 <StartChassisTask+0x274>)
 8004520:	f107 030c 	add.w	r3, r7, #12
 8004524:	ca07      	ldmia	r2, {r0, r1, r2}
 8004526:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	int16_t rotationSpeed = 0;
 800452a:	2300      	movs	r3, #0
 800452c:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t activate = 0;
 800452e:	2300      	movs	r3, #0
 8004530:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

	uint8_t toggle = 0;
 8004534:	2300      	movs	r3, #0
 8004536:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	uint8_t previous = 0;
 800453a:	2300      	movs	r3, #0
 800453c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	uint16_t minMaxCounter = 0;
 8004540:	2300      	movs	r3, #0
 8004542:	85bb      	strh	r3, [r7, #44]	@ 0x2c
	uint16_t M1min = 9000;
 8004544:	f242 3328 	movw	r3, #9000	@ 0x2328
 8004548:	857b      	strh	r3, [r7, #42]	@ 0x2a
	uint16_t M2min = 9000;
 800454a:	f242 3328 	movw	r3, #9000	@ 0x2328
 800454e:	853b      	strh	r3, [r7, #40]	@ 0x28

				EXAMPLE: if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) {}
					Note that in this case, 0 is Pressed and 1 is Not Pressed
		 */

	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) && previous == 1) {
 8004550:	2101      	movs	r1, #1
 8004552:	488a      	ldr	r0, [pc, #552]	@ (800477c <StartChassisTask+0x278>)
 8004554:	f002 fdea 	bl	800712c <HAL_GPIO_ReadPin>
 8004558:	4603      	mov	r3, r0
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10e      	bne.n	800457c <StartChassisTask+0x78>
 800455e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004562:	2b01      	cmp	r3, #1
 8004564:	d10a      	bne.n	800457c <StartChassisTask+0x78>
		  if (toggle == 1) {
 8004566:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800456a:	2b01      	cmp	r3, #1
 800456c:	d103      	bne.n	8004576 <StartChassisTask+0x72>
			  toggle = 0;
 800456e:	2300      	movs	r3, #0
 8004570:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8004574:	e002      	b.n	800457c <StartChassisTask+0x78>
		  } else {
			  toggle = 1;
 8004576:	2301      	movs	r3, #1
 8004578:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		  }
	  }
	  previous = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800457c:	2101      	movs	r1, #1
 800457e:	487f      	ldr	r0, [pc, #508]	@ (800477c <StartChassisTask+0x278>)
 8004580:	f002 fdd4 	bl	800712c <HAL_GPIO_ReadPin>
 8004584:	4603      	mov	r3, r0
 8004586:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e

	  if (toggle == 1) {
 800458a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800458e:	2b01      	cmp	r3, #1
 8004590:	d17e      	bne.n	8004690 <StartChassisTask+0x18c>
		  rotationSpeed = 6000;
 8004592:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004596:	84fb      	strh	r3, [r7, #38]	@ 0x26
		  setMotorRPM(Bus1, M3508, 1, rotationSpeed, preset);
 8004598:	edd7 6a03 	vldr	s13, [r7, #12]
 800459c:	ed97 7a04 	vldr	s14, [r7, #16]
 80045a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045a4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80045a8:	eeb0 0a66 	vmov.f32	s0, s13
 80045ac:	eef0 0a47 	vmov.f32	s1, s14
 80045b0:	eeb0 1a67 	vmov.f32	s2, s15
 80045b4:	2201      	movs	r2, #1
 80045b6:	2101      	movs	r1, #1
 80045b8:	2001      	movs	r0, #1
 80045ba:	f7fd fc17 	bl	8001dec <setMotorRPM>
		  setMotorRPM(Bus1, M3508, 2, -1*rotationSpeed, preset);
 80045be:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80045c0:	425b      	negs	r3, r3
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	b21b      	sxth	r3, r3
 80045c6:	edd7 6a03 	vldr	s13, [r7, #12]
 80045ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80045ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80045d2:	eeb0 0a66 	vmov.f32	s0, s13
 80045d6:	eef0 0a47 	vmov.f32	s1, s14
 80045da:	eeb0 1a67 	vmov.f32	s2, s15
 80045de:	2202      	movs	r2, #2
 80045e0:	2101      	movs	r1, #1
 80045e2:	2001      	movs	r0, #1
 80045e4:	f7fd fc02 	bl	8001dec <setMotorRPM>
		  setMotorRPM(Bus1, M3508, 3, rotationSpeed, preset);
 80045e8:	edd7 6a03 	vldr	s13, [r7, #12]
 80045ec:	ed97 7a04 	vldr	s14, [r7, #16]
 80045f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80045f4:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80045f8:	eeb0 0a66 	vmov.f32	s0, s13
 80045fc:	eef0 0a47 	vmov.f32	s1, s14
 8004600:	eeb0 1a67 	vmov.f32	s2, s15
 8004604:	2203      	movs	r2, #3
 8004606:	2101      	movs	r1, #1
 8004608:	2001      	movs	r0, #1
 800460a:	f7fd fbef 	bl	8001dec <setMotorRPM>
		  setMotorRPM(Bus1, M3508, 4, -1*rotationSpeed, preset);
 800460e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004610:	425b      	negs	r3, r3
 8004612:	b29b      	uxth	r3, r3
 8004614:	b21b      	sxth	r3, r3
 8004616:	edd7 6a03 	vldr	s13, [r7, #12]
 800461a:	ed97 7a04 	vldr	s14, [r7, #16]
 800461e:	edd7 7a05 	vldr	s15, [r7, #20]
 8004622:	eeb0 0a66 	vmov.f32	s0, s13
 8004626:	eef0 0a47 	vmov.f32	s1, s14
 800462a:	eeb0 1a67 	vmov.f32	s2, s15
 800462e:	2204      	movs	r2, #4
 8004630:	2101      	movs	r1, #1
 8004632:	2001      	movs	r0, #1
 8004634:	f7fd fbda 	bl	8001dec <setMotorRPM>
		  if (minMaxCounter >= 500) {
 8004638:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800463a:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800463e:	d323      	bcc.n	8004688 <StartChassisTask+0x184>
			  if (M1min > -1*getMotorRPM(Bus1, M3508, 1)) {
 8004640:	8d7c      	ldrh	r4, [r7, #42]	@ 0x2a
 8004642:	2201      	movs	r2, #1
 8004644:	2101      	movs	r1, #1
 8004646:	2001      	movs	r0, #1
 8004648:	f7fd fc0c 	bl	8001e64 <getMotorRPM>
 800464c:	4603      	mov	r3, r0
 800464e:	425b      	negs	r3, r3
 8004650:	429c      	cmp	r4, r3
 8004652:	dd08      	ble.n	8004666 <StartChassisTask+0x162>
				  M1min = -1*getMotorRPM(Bus1, M3508, 1);
 8004654:	2201      	movs	r2, #1
 8004656:	2101      	movs	r1, #1
 8004658:	2001      	movs	r0, #1
 800465a:	f7fd fc03 	bl	8001e64 <getMotorRPM>
 800465e:	4603      	mov	r3, r0
 8004660:	b29b      	uxth	r3, r3
 8004662:	425b      	negs	r3, r3
 8004664:	857b      	strh	r3, [r7, #42]	@ 0x2a
			  }
			  if (M2min > getMotorRPM(Bus1, M3508, 2)) {
 8004666:	8d3c      	ldrh	r4, [r7, #40]	@ 0x28
 8004668:	2202      	movs	r2, #2
 800466a:	2101      	movs	r1, #1
 800466c:	2001      	movs	r0, #1
 800466e:	f7fd fbf9 	bl	8001e64 <getMotorRPM>
 8004672:	4603      	mov	r3, r0
 8004674:	429c      	cmp	r4, r3
 8004676:	dd57      	ble.n	8004728 <StartChassisTask+0x224>
				  M2min = getMotorRPM(Bus1, M3508, 2);
 8004678:	2202      	movs	r2, #2
 800467a:	2101      	movs	r1, #1
 800467c:	2001      	movs	r0, #1
 800467e:	f7fd fbf1 	bl	8001e64 <getMotorRPM>
 8004682:	4603      	mov	r3, r0
 8004684:	853b      	strh	r3, [r7, #40]	@ 0x28
 8004686:	e04f      	b.n	8004728 <StartChassisTask+0x224>
			  }
		  } else {
			  minMaxCounter++;
 8004688:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800468a:	3301      	adds	r3, #1
 800468c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 800468e:	e04b      	b.n	8004728 <StartChassisTask+0x224>
	  } else {
		  /*
		  M1min = 9000;
		  M2min = 9000;
		  */
		  rotationSpeed = 0;
 8004690:	2300      	movs	r3, #0
 8004692:	84fb      	strh	r3, [r7, #38]	@ 0x26
		  minMaxCounter = 0;
 8004694:	2300      	movs	r3, #0
 8004696:	85bb      	strh	r3, [r7, #44]	@ 0x2c
		  setMotorRPM(Bus1, M3508, 1, 0, preset);
 8004698:	edd7 6a03 	vldr	s13, [r7, #12]
 800469c:	ed97 7a04 	vldr	s14, [r7, #16]
 80046a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80046a4:	eeb0 0a66 	vmov.f32	s0, s13
 80046a8:	eef0 0a47 	vmov.f32	s1, s14
 80046ac:	eeb0 1a67 	vmov.f32	s2, s15
 80046b0:	2300      	movs	r3, #0
 80046b2:	2201      	movs	r2, #1
 80046b4:	2101      	movs	r1, #1
 80046b6:	2001      	movs	r0, #1
 80046b8:	f7fd fb98 	bl	8001dec <setMotorRPM>
		  setMotorRPM(Bus1, M3508, 2, 0, preset);
 80046bc:	edd7 6a03 	vldr	s13, [r7, #12]
 80046c0:	ed97 7a04 	vldr	s14, [r7, #16]
 80046c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80046c8:	eeb0 0a66 	vmov.f32	s0, s13
 80046cc:	eef0 0a47 	vmov.f32	s1, s14
 80046d0:	eeb0 1a67 	vmov.f32	s2, s15
 80046d4:	2300      	movs	r3, #0
 80046d6:	2202      	movs	r2, #2
 80046d8:	2101      	movs	r1, #1
 80046da:	2001      	movs	r0, #1
 80046dc:	f7fd fb86 	bl	8001dec <setMotorRPM>
		  setMotorRPM(Bus1, M3508, 3, 0, preset);
 80046e0:	edd7 6a03 	vldr	s13, [r7, #12]
 80046e4:	ed97 7a04 	vldr	s14, [r7, #16]
 80046e8:	edd7 7a05 	vldr	s15, [r7, #20]
 80046ec:	eeb0 0a66 	vmov.f32	s0, s13
 80046f0:	eef0 0a47 	vmov.f32	s1, s14
 80046f4:	eeb0 1a67 	vmov.f32	s2, s15
 80046f8:	2300      	movs	r3, #0
 80046fa:	2203      	movs	r2, #3
 80046fc:	2101      	movs	r1, #1
 80046fe:	2001      	movs	r0, #1
 8004700:	f7fd fb74 	bl	8001dec <setMotorRPM>
		  setMotorRPM(Bus1, M3508, 4, 0, preset);
 8004704:	edd7 6a03 	vldr	s13, [r7, #12]
 8004708:	ed97 7a04 	vldr	s14, [r7, #16]
 800470c:	edd7 7a05 	vldr	s15, [r7, #20]
 8004710:	eeb0 0a66 	vmov.f32	s0, s13
 8004714:	eef0 0a47 	vmov.f32	s1, s14
 8004718:	eeb0 1a67 	vmov.f32	s2, s15
 800471c:	2300      	movs	r3, #0
 800471e:	2204      	movs	r2, #4
 8004720:	2101      	movs	r1, #1
 8004722:	2001      	movs	r0, #1
 8004724:	f7fd fb62 	bl	8001dec <setMotorRPM>
	  }

	  UART_Printf(&huart1, "%d %d %d %d\r\n", getMotorRPM(Bus1, M3508, 1), -1*getMotorRPM(Bus1, M3508, 2),  getMotorRPM(Bus1, M3508, 3),  -1*getMotorRPM(Bus1, M3508, 4));
 8004728:	2201      	movs	r2, #1
 800472a:	2101      	movs	r1, #1
 800472c:	2001      	movs	r0, #1
 800472e:	f7fd fb99 	bl	8001e64 <getMotorRPM>
 8004732:	4603      	mov	r3, r0
 8004734:	461e      	mov	r6, r3
 8004736:	2202      	movs	r2, #2
 8004738:	2101      	movs	r1, #1
 800473a:	2001      	movs	r0, #1
 800473c:	f7fd fb92 	bl	8001e64 <getMotorRPM>
 8004740:	4603      	mov	r3, r0
 8004742:	425c      	negs	r4, r3
 8004744:	2203      	movs	r2, #3
 8004746:	2101      	movs	r1, #1
 8004748:	2001      	movs	r0, #1
 800474a:	f7fd fb8b 	bl	8001e64 <getMotorRPM>
 800474e:	4603      	mov	r3, r0
 8004750:	461d      	mov	r5, r3
 8004752:	2204      	movs	r2, #4
 8004754:	2101      	movs	r1, #1
 8004756:	2001      	movs	r0, #1
 8004758:	f7fd fb84 	bl	8001e64 <getMotorRPM>
 800475c:	4603      	mov	r3, r0
 800475e:	425b      	negs	r3, r3
 8004760:	9301      	str	r3, [sp, #4]
 8004762:	9500      	str	r5, [sp, #0]
 8004764:	4623      	mov	r3, r4
 8004766:	4632      	mov	r2, r6
 8004768:	4905      	ldr	r1, [pc, #20]	@ (8004780 <StartChassisTask+0x27c>)
 800476a:	4806      	ldr	r0, [pc, #24]	@ (8004784 <StartChassisTask+0x280>)
 800476c:	f7fd fe1e 	bl	80023ac <UART_Printf>
	  setMotorRPM(Bus1, M3508, 2, rotationSpeed, preset);
	  */


	  // DO NOT DELETE THIS!!!!
	  osDelay(5);
 8004770:	2005      	movs	r0, #5
 8004772:	f005 ff4d 	bl	800a610 <osDelay>
	  if ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == 0) && previous == 1) {
 8004776:	e6eb      	b.n	8004550 <StartChassisTask+0x4c>
 8004778:	0800ddb0 	.word	0x0800ddb0
 800477c:	40020000 	.word	0x40020000
 8004780:	0800dda0 	.word	0x0800dda0
 8004784:	20000be4 	.word	0x20000be4

08004788 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800478c:	b672      	cpsid	i
}
 800478e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004790:	bf00      	nop
 8004792:	e7fd      	b.n	8004790 <Error_Handler+0x8>

08004794 <PID_init>:
  * @param[in]      max_out: pid������
  * @param[in]      max_iout: pid���������
  * @retval         none
  */
void PID_init(pid_type_def *pid, uint8_t mode, const float PID[3], float max_out, float max_iout)
{
 8004794:	b480      	push	{r7}
 8004796:	b087      	sub	sp, #28
 8004798:	af00      	add	r7, sp, #0
 800479a:	6178      	str	r0, [r7, #20]
 800479c:	460b      	mov	r3, r1
 800479e:	60fa      	str	r2, [r7, #12]
 80047a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80047a4:	edc7 0a01 	vstr	s1, [r7, #4]
 80047a8:	74fb      	strb	r3, [r7, #19]
    if (pid == NULL || PID == NULL)
 80047aa:	697b      	ldr	r3, [r7, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d042      	beq.n	8004836 <PID_init+0xa2>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d03f      	beq.n	8004836 <PID_init+0xa2>
    {
        return;
    }
    pid->mode = mode;
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	7cfa      	ldrb	r2, [r7, #19]
 80047ba:	701a      	strb	r2, [r3, #0]
    pid->Kp = PID[0];
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681a      	ldr	r2, [r3, #0]
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	605a      	str	r2, [r3, #4]
    pid->Ki = PID[1];
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	3304      	adds	r3, #4
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	609a      	str	r2, [r3, #8]
    pid->Kd = PID[2];
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	3308      	adds	r3, #8
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	60da      	str	r2, [r3, #12]
    pid->max_out = max_out;
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	68ba      	ldr	r2, [r7, #8]
 80047dc:	611a      	str	r2, [r3, #16]
    pid->max_iout = max_iout;
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	615a      	str	r2, [r3, #20]
    pid->Dbuf[0] = pid->Dbuf[1] = pid->Dbuf[2] = 0.0f;
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f04f 0200 	mov.w	r2, #0
 80047ea:	639a      	str	r2, [r3, #56]	@ 0x38
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80047f0:	697b      	ldr	r3, [r7, #20]
 80047f2:	635a      	str	r2, [r3, #52]	@ 0x34
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047f8:	697b      	ldr	r3, [r7, #20]
 80047fa:	631a      	str	r2, [r3, #48]	@ 0x30
    pid->error[0] = pid->error[1] = pid->error[2] = pid->Pout = pid->Iout = pid->Dout = pid->out = 0.0f;
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	621a      	str	r2, [r3, #32]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	6a1a      	ldr	r2, [r3, #32]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	629a      	str	r2, [r3, #40]	@ 0x28
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	625a      	str	r2, [r3, #36]	@ 0x24
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	645a      	str	r2, [r3, #68]	@ 0x44
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	641a      	str	r2, [r3, #64]	@ 0x40
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004834:	e000      	b.n	8004838 <PID_init+0xa4>
        return;
 8004836:	bf00      	nop
}
 8004838:	371c      	adds	r7, #28
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <PID_calc>:
  * @param[in]      ref: ��������
  * @param[in]      set: �趨ֵ
  * @retval         pid���
  */
float PID_calc(pid_type_def *pid, float ref, float set)
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	ed87 0a02 	vstr	s0, [r7, #8]
 800484e:	edc7 0a01 	vstr	s1, [r7, #4]
    if (pid == NULL)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d102      	bne.n	800485e <PID_calc+0x1c>
    {
        return 0.0f;
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	e130      	b.n	8004ac0 <PID_calc+0x27e>
    }

    pid->error[2] = pid->error[1];
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44
    pid->error[1] = pid->error[0];
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	641a      	str	r2, [r3, #64]	@ 0x40
    pid->set = set;
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	619a      	str	r2, [r3, #24]
    pid->fdb = ref;
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	61da      	str	r2, [r3, #28]
    pid->error[0] = set - ref;
 800487a:	ed97 7a01 	vldr	s14, [r7, #4]
 800487e:	edd7 7a02 	vldr	s15, [r7, #8]
 8004882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	edc3 7a0f 	vstr	s15, [r3, #60]	@ 0x3c
    if (pid->mode == PID_POSITION)
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	f040 8095 	bne.w	80049c0 <PID_calc+0x17e>
    {
        pid->Pout = pid->Kp * pid->error[0];
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	ed93 7a01 	vldr	s14, [r3, #4]
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80048a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout += pid->Ki * pid->error[0];
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80048be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - pid->error[1]);
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80048e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	ed93 7a03 	vldr	s14, [r3, #12]
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 80048fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        LimitMax(pid->Iout, pid->max_iout);
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	edd3 7a05 	vldr	s15, [r3, #20]
 8004914:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	dd04      	ble.n	8004928 <PID_calc+0xe6>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	695a      	ldr	r2, [r3, #20]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	629a      	str	r2, [r3, #40]	@ 0x28
 8004926:	e014      	b.n	8004952 <PID_calc+0x110>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	ed93 7a0a 	vldr	s14, [r3, #40]	@ 0x28
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	edd3 7a05 	vldr	s15, [r3, #20]
 8004934:	eef1 7a67 	vneg.f32	s15, s15
 8004938:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800493c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004940:	d507      	bpl.n	8004952 <PID_calc+0x110>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	edd3 7a05 	vldr	s15, [r3, #20]
 8004948:	eef1 7a67 	vneg.f32	s15, s15
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->out = pid->Pout + pid->Iout + pid->Dout;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	ed93 7a09 	vldr	s14, [r3, #36]	@ 0x24
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 800495e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004968:	ee77 7a27 	vadd.f32	s15, s14, s15
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	ed93 7a08 	vldr	s14, [r3, #32]
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	edd3 7a04 	vldr	s15, [r3, #16]
 800497e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004986:	dd04      	ble.n	8004992 <PID_calc+0x150>
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	691a      	ldr	r2, [r3, #16]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	621a      	str	r2, [r3, #32]
 8004990:	e094      	b.n	8004abc <PID_calc+0x27a>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	ed93 7a08 	vldr	s14, [r3, #32]
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	edd3 7a04 	vldr	s15, [r3, #16]
 800499e:	eef1 7a67 	vneg.f32	s15, s15
 80049a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	f140 8087 	bpl.w	8004abc <PID_calc+0x27a>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80049b4:	eef1 7a67 	vneg.f32	s15, s15
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	edc3 7a08 	vstr	s15, [r3, #32]
 80049be:	e07d      	b.n	8004abc <PID_calc+0x27a>
    }
    else if (pid->mode == PID_DELTA)
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d179      	bne.n	8004abc <PID_calc+0x27a>
    {
        pid->Pout = pid->Kp * (pid->error[0] - pid->error[1]);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	ed93 7a01 	vldr	s14, [r3, #4]
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	edd3 6a0f 	vldr	s13, [r3, #60]	@ 0x3c
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 80049da:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
        pid->Iout = pid->Ki * pid->error[0];
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	ed93 7a02 	vldr	s14, [r3, #8]
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 80049f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
        pid->Dbuf[2] = pid->Dbuf[1];
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	639a      	str	r2, [r3, #56]	@ 0x38
        pid->Dbuf[1] = pid->Dbuf[0];
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	635a      	str	r2, [r3, #52]	@ 0x34
        pid->Dbuf[0] = (pid->error[0] - 2.0f * pid->error[1] + pid->error[2]);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	ed93 7a0f 	vldr	s14, [r3, #60]	@ 0x3c
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8004a1a:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8004a1e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	edd3 7a11 	vldr	s15, [r3, #68]	@ 0x44
 8004a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	edc3 7a0c 	vstr	s15, [r3, #48]	@ 0x30
        pid->Dout = pid->Kd * pid->Dbuf[0];
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	ed93 7a03 	vldr	s14, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8004a3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	edc3 7a0b 	vstr	s15, [r3, #44]	@ 0x2c
        pid->out += pid->Pout + pid->Iout + pid->Dout;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	edd3 7a0a 	vldr	s15, [r3, #40]	@ 0x28
 8004a5a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	edd3 7a0b 	vldr	s15, [r3, #44]	@ 0x2c
 8004a64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	edc3 7a08 	vstr	s15, [r3, #32]
        LimitMax(pid->out, pid->max_out);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a86:	dd04      	ble.n	8004a92 <PID_calc+0x250>
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	621a      	str	r2, [r3, #32]
 8004a90:	e014      	b.n	8004abc <PID_calc+0x27a>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	ed93 7a08 	vldr	s14, [r3, #32]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	edd3 7a04 	vldr	s15, [r3, #16]
 8004a9e:	eef1 7a67 	vneg.f32	s15, s15
 8004aa2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aaa:	d507      	bpl.n	8004abc <PID_calc+0x27a>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	edd3 7a04 	vldr	s15, [r3, #16]
 8004ab2:	eef1 7a67 	vneg.f32	s15, s15
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	edc3 7a08 	vstr	s15, [r3, #32]
    }
    return pid->out;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a1b      	ldr	r3, [r3, #32]
}
 8004ac0:	ee07 3a90 	vmov	s15, r3
 8004ac4:	eeb0 0a67 	vmov.f32	s0, s15
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
	...

08004ad4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	607b      	str	r3, [r7, #4]
 8004ade:	4b12      	ldr	r3, [pc, #72]	@ (8004b28 <HAL_MspInit+0x54>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae2:	4a11      	ldr	r2, [pc, #68]	@ (8004b28 <HAL_MspInit+0x54>)
 8004ae4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aea:	4b0f      	ldr	r3, [pc, #60]	@ (8004b28 <HAL_MspInit+0x54>)
 8004aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004af2:	607b      	str	r3, [r7, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004af6:	2300      	movs	r3, #0
 8004af8:	603b      	str	r3, [r7, #0]
 8004afa:	4b0b      	ldr	r3, [pc, #44]	@ (8004b28 <HAL_MspInit+0x54>)
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	4a0a      	ldr	r2, [pc, #40]	@ (8004b28 <HAL_MspInit+0x54>)
 8004b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b06:	4b08      	ldr	r3, [pc, #32]	@ (8004b28 <HAL_MspInit+0x54>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b0e:	603b      	str	r3, [r7, #0]
 8004b10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004b12:	2200      	movs	r2, #0
 8004b14:	210f      	movs	r1, #15
 8004b16:	f06f 0001 	mvn.w	r0, #1
 8004b1a:	f001 fd32 	bl	8006582 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40023800 	.word	0x40023800

08004b2c <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08c      	sub	sp, #48	@ 0x30
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b34:	f107 031c 	add.w	r3, r7, #28
 8004b38:	2200      	movs	r2, #0
 8004b3a:	601a      	str	r2, [r3, #0]
 8004b3c:	605a      	str	r2, [r3, #4]
 8004b3e:	609a      	str	r2, [r3, #8]
 8004b40:	60da      	str	r2, [r3, #12]
 8004b42:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	4a4a      	ldr	r2, [pc, #296]	@ (8004c74 <HAL_CAN_MspInit+0x148>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d13d      	bne.n	8004bca <HAL_CAN_MspInit+0x9e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004b4e:	4b4a      	ldr	r3, [pc, #296]	@ (8004c78 <HAL_CAN_MspInit+0x14c>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	3301      	adds	r3, #1
 8004b54:	4a48      	ldr	r2, [pc, #288]	@ (8004c78 <HAL_CAN_MspInit+0x14c>)
 8004b56:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004b58:	4b47      	ldr	r3, [pc, #284]	@ (8004c78 <HAL_CAN_MspInit+0x14c>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d10d      	bne.n	8004b7c <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004b60:	2300      	movs	r3, #0
 8004b62:	61bb      	str	r3, [r7, #24]
 8004b64:	4b45      	ldr	r3, [pc, #276]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004b66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b68:	4a44      	ldr	r2, [pc, #272]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004b6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004b6e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b70:	4b42      	ldr	r3, [pc, #264]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b74:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b78:	61bb      	str	r3, [r7, #24]
 8004b7a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
 8004b80:	4b3e      	ldr	r3, [pc, #248]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b84:	4a3d      	ldr	r2, [pc, #244]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004b86:	f043 0308 	orr.w	r3, r3, #8
 8004b8a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b8c:	4b3b      	ldr	r3, [pc, #236]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	617b      	str	r3, [r7, #20]
 8004b96:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b9c:	2302      	movs	r3, #2
 8004b9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004ba8:	2309      	movs	r3, #9
 8004baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004bac:	f107 031c 	add.w	r3, r7, #28
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4833      	ldr	r0, [pc, #204]	@ (8004c80 <HAL_CAN_MspInit+0x154>)
 8004bb4:	f002 f91e 	bl	8006df4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2105      	movs	r1, #5
 8004bbc:	2014      	movs	r0, #20
 8004bbe:	f001 fce0 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004bc2:	2014      	movs	r0, #20
 8004bc4:	f001 fcf9 	bl	80065ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8004bc8:	e04f      	b.n	8004c6a <HAL_CAN_MspInit+0x13e>
  else if(hcan->Instance==CAN2)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a2d      	ldr	r2, [pc, #180]	@ (8004c84 <HAL_CAN_MspInit+0x158>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d14a      	bne.n	8004c6a <HAL_CAN_MspInit+0x13e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	613b      	str	r3, [r7, #16]
 8004bd8:	4b28      	ldr	r3, [pc, #160]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004bda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bdc:	4a27      	ldr	r2, [pc, #156]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004bde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004be2:	6413      	str	r3, [r2, #64]	@ 0x40
 8004be4:	4b25      	ldr	r3, [pc, #148]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004bec:	613b      	str	r3, [r7, #16]
 8004bee:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8004bf0:	4b21      	ldr	r3, [pc, #132]	@ (8004c78 <HAL_CAN_MspInit+0x14c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	3301      	adds	r3, #1
 8004bf6:	4a20      	ldr	r2, [pc, #128]	@ (8004c78 <HAL_CAN_MspInit+0x14c>)
 8004bf8:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8004bfa:	4b1f      	ldr	r3, [pc, #124]	@ (8004c78 <HAL_CAN_MspInit+0x14c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10d      	bne.n	8004c1e <HAL_CAN_MspInit+0xf2>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	4b1d      	ldr	r3, [pc, #116]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004c0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004c10:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c12:	4b1a      	ldr	r3, [pc, #104]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c1a:	60fb      	str	r3, [r7, #12]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c1e:	2300      	movs	r3, #0
 8004c20:	60bb      	str	r3, [r7, #8]
 8004c22:	4b16      	ldr	r3, [pc, #88]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c26:	4a15      	ldr	r2, [pc, #84]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004c2e:	4b13      	ldr	r3, [pc, #76]	@ (8004c7c <HAL_CAN_MspInit+0x150>)
 8004c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	60bb      	str	r3, [r7, #8]
 8004c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8004c3a:	2360      	movs	r3, #96	@ 0x60
 8004c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c3e:	2302      	movs	r3, #2
 8004c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c42:	2300      	movs	r3, #0
 8004c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c46:	2303      	movs	r3, #3
 8004c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8004c4a:	2309      	movs	r3, #9
 8004c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c4e:	f107 031c 	add.w	r3, r7, #28
 8004c52:	4619      	mov	r1, r3
 8004c54:	480c      	ldr	r0, [pc, #48]	@ (8004c88 <HAL_CAN_MspInit+0x15c>)
 8004c56:	f002 f8cd 	bl	8006df4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2105      	movs	r1, #5
 8004c5e:	2040      	movs	r0, #64	@ 0x40
 8004c60:	f001 fc8f 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8004c64:	2040      	movs	r0, #64	@ 0x40
 8004c66:	f001 fca8 	bl	80065ba <HAL_NVIC_EnableIRQ>
}
 8004c6a:	bf00      	nop
 8004c6c:	3730      	adds	r7, #48	@ 0x30
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40006400 	.word	0x40006400
 8004c78:	20000de8 	.word	0x20000de8
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40020c00 	.word	0x40020c00
 8004c84:	40006800 	.word	0x40006800
 8004c88:	40020400 	.word	0x40020400

08004c8c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	@ 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c94:	f107 0314 	add.w	r3, r7, #20
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
 8004c9c:	605a      	str	r2, [r3, #4]
 8004c9e:	609a      	str	r2, [r3, #8]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a29      	ldr	r2, [pc, #164]	@ (8004d50 <HAL_I2C_MspInit+0xc4>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d14b      	bne.n	8004d46 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004cae:	2300      	movs	r3, #0
 8004cb0:	613b      	str	r3, [r7, #16]
 8004cb2:	4b28      	ldr	r3, [pc, #160]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb6:	4a27      	ldr	r2, [pc, #156]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004cb8:	f043 0304 	orr.w	r3, r3, #4
 8004cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cbe:	4b25      	ldr	r3, [pc, #148]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc2:	f003 0304 	and.w	r3, r3, #4
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cca:	2300      	movs	r3, #0
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	4b21      	ldr	r3, [pc, #132]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cd2:	4a20      	ldr	r2, [pc, #128]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004cd4:	f043 0301 	orr.w	r3, r3, #1
 8004cd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004cda:	4b1e      	ldr	r3, [pc, #120]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004ce6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004cea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004cec:	2312      	movs	r3, #18
 8004cee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cf4:	2303      	movs	r3, #3
 8004cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004cf8:	2304      	movs	r3, #4
 8004cfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004cfc:	f107 0314 	add.w	r3, r7, #20
 8004d00:	4619      	mov	r1, r3
 8004d02:	4815      	ldr	r0, [pc, #84]	@ (8004d58 <HAL_I2C_MspInit+0xcc>)
 8004d04:	f002 f876 	bl	8006df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004d08:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004d0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d0e:	2312      	movs	r3, #18
 8004d10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d16:	2303      	movs	r3, #3
 8004d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004d1a:	2304      	movs	r3, #4
 8004d1c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d1e:	f107 0314 	add.w	r3, r7, #20
 8004d22:	4619      	mov	r1, r3
 8004d24:	480d      	ldr	r0, [pc, #52]	@ (8004d5c <HAL_I2C_MspInit+0xd0>)
 8004d26:	f002 f865 	bl	8006df4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60bb      	str	r3, [r7, #8]
 8004d2e:	4b09      	ldr	r3, [pc, #36]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d32:	4a08      	ldr	r2, [pc, #32]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004d34:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8004d3a:	4b06      	ldr	r3, [pc, #24]	@ (8004d54 <HAL_I2C_MspInit+0xc8>)
 8004d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d42:	60bb      	str	r3, [r7, #8]
 8004d44:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8004d46:	bf00      	nop
 8004d48:	3728      	adds	r7, #40	@ 0x28
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	40005c00 	.word	0x40005c00
 8004d54:	40023800 	.word	0x40023800
 8004d58:	40020800 	.word	0x40020800
 8004d5c:	40020000 	.word	0x40020000

08004d60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b08a      	sub	sp, #40	@ 0x28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d68:	f107 0314 	add.w	r3, r7, #20
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	601a      	str	r2, [r3, #0]
 8004d70:	605a      	str	r2, [r3, #4]
 8004d72:	609a      	str	r2, [r3, #8]
 8004d74:	60da      	str	r2, [r3, #12]
 8004d76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	4a28      	ldr	r2, [pc, #160]	@ (8004e20 <HAL_SPI_MspInit+0xc0>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d149      	bne.n	8004e16 <HAL_SPI_MspInit+0xb6>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004d82:	2300      	movs	r3, #0
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	4b27      	ldr	r3, [pc, #156]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8a:	4a26      	ldr	r2, [pc, #152]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004d8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8004d92:	4b24      	ldr	r3, [pc, #144]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b20      	ldr	r3, [pc, #128]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004da6:	4a1f      	ldr	r2, [pc, #124]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004da8:	f043 0302 	orr.w	r3, r3, #2
 8004dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dae:	4b1d      	ldr	r3, [pc, #116]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60bb      	str	r3, [r7, #8]
 8004dbe:	4b19      	ldr	r3, [pc, #100]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dc2:	4a18      	ldr	r2, [pc, #96]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004dc4:	f043 0301 	orr.w	r3, r3, #1
 8004dc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8004dca:	4b16      	ldr	r3, [pc, #88]	@ (8004e24 <HAL_SPI_MspInit+0xc4>)
 8004dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004dce:	f003 0301 	and.w	r3, r3, #1
 8004dd2:	60bb      	str	r3, [r7, #8]
 8004dd4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PB4     ------> SPI1_MISO
    PB3     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_3;
 8004dd6:	2318      	movs	r3, #24
 8004dd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dda:	2302      	movs	r3, #2
 8004ddc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dde:	2300      	movs	r3, #0
 8004de0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004de2:	2303      	movs	r3, #3
 8004de4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004de6:	2305      	movs	r3, #5
 8004de8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dea:	f107 0314 	add.w	r3, r7, #20
 8004dee:	4619      	mov	r1, r3
 8004df0:	480d      	ldr	r0, [pc, #52]	@ (8004e28 <HAL_SPI_MspInit+0xc8>)
 8004df2:	f001 ffff 	bl	8006df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004df6:	2380      	movs	r3, #128	@ 0x80
 8004df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004dfa:	2302      	movs	r3, #2
 8004dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dfe:	2300      	movs	r3, #0
 8004e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e02:	2303      	movs	r3, #3
 8004e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8004e06:	2305      	movs	r3, #5
 8004e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e0a:	f107 0314 	add.w	r3, r7, #20
 8004e0e:	4619      	mov	r1, r3
 8004e10:	4806      	ldr	r0, [pc, #24]	@ (8004e2c <HAL_SPI_MspInit+0xcc>)
 8004e12:	f001 ffef 	bl	8006df4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8004e16:	bf00      	nop
 8004e18:	3728      	adds	r7, #40	@ 0x28
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
 8004e1e:	bf00      	nop
 8004e20:	40013000 	.word	0x40013000
 8004e24:	40023800 	.word	0x40023800
 8004e28:	40020400 	.word	0x40020400
 8004e2c:	40020000 	.word	0x40020000

08004e30 <HAL_TIM_PWM_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_pwm: TIM_PWM handle pointer
  * @retval None
  */
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b087      	sub	sp, #28
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a1f      	ldr	r2, [pc, #124]	@ (8004ebc <HAL_TIM_PWM_MspInit+0x8c>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d10e      	bne.n	8004e60 <HAL_TIM_PWM_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e42:	2300      	movs	r3, #0
 8004e44:	617b      	str	r3, [r7, #20]
 8004e46:	4b1e      	ldr	r3, [pc, #120]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e4a:	4a1d      	ldr	r2, [pc, #116]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e4c:	f043 0301 	orr.w	r3, r3, #1
 8004e50:	6453      	str	r3, [r2, #68]	@ 0x44
 8004e52:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e56:	f003 0301 	and.w	r3, r3, #1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM8_MspInit 1 */

    /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004e5e:	e026      	b.n	8004eae <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM5)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a17      	ldr	r2, [pc, #92]	@ (8004ec4 <HAL_TIM_PWM_MspInit+0x94>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d10e      	bne.n	8004e88 <HAL_TIM_PWM_MspInit+0x58>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
 8004e6e:	4b14      	ldr	r3, [pc, #80]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e72:	4a13      	ldr	r2, [pc, #76]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e74:	f043 0308 	orr.w	r3, r3, #8
 8004e78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e7a:	4b11      	ldr	r3, [pc, #68]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e7e:	f003 0308 	and.w	r3, r3, #8
 8004e82:	613b      	str	r3, [r7, #16]
 8004e84:	693b      	ldr	r3, [r7, #16]
}
 8004e86:	e012      	b.n	8004eae <HAL_TIM_PWM_MspInit+0x7e>
  else if(htim_pwm->Instance==TIM8)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a0e      	ldr	r2, [pc, #56]	@ (8004ec8 <HAL_TIM_PWM_MspInit+0x98>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d10d      	bne.n	8004eae <HAL_TIM_PWM_MspInit+0x7e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e9a:	4a09      	ldr	r2, [pc, #36]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004e9c:	f043 0302 	orr.w	r3, r3, #2
 8004ea0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ea2:	4b07      	ldr	r3, [pc, #28]	@ (8004ec0 <HAL_TIM_PWM_MspInit+0x90>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ea6:	f003 0302 	and.w	r3, r3, #2
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]
}
 8004eae:	bf00      	nop
 8004eb0:	371c      	adds	r7, #28
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	40010000 	.word	0x40010000
 8004ec0:	40023800 	.word	0x40023800
 8004ec4:	40000c00 	.word	0x40000c00
 8004ec8:	40010400 	.word	0x40010400

08004ecc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b085      	sub	sp, #20
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	@ (8004f30 <HAL_TIM_Base_MspInit+0x64>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d10e      	bne.n	8004efc <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM4_MspInit 0 */

    /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004ede:	2300      	movs	r3, #0
 8004ee0:	60fb      	str	r3, [r7, #12]
 8004ee2:	4b14      	ldr	r3, [pc, #80]	@ (8004f34 <HAL_TIM_Base_MspInit+0x68>)
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ee6:	4a13      	ldr	r2, [pc, #76]	@ (8004f34 <HAL_TIM_Base_MspInit+0x68>)
 8004ee8:	f043 0304 	orr.w	r3, r3, #4
 8004eec:	6413      	str	r3, [r2, #64]	@ 0x40
 8004eee:	4b11      	ldr	r3, [pc, #68]	@ (8004f34 <HAL_TIM_Base_MspInit+0x68>)
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ef2:	f003 0304 	and.w	r3, r3, #4
 8004ef6:	60fb      	str	r3, [r7, #12]
 8004ef8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM10_MspInit 1 */

    /* USER CODE END TIM10_MspInit 1 */
  }

}
 8004efa:	e012      	b.n	8004f22 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM10)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a0d      	ldr	r2, [pc, #52]	@ (8004f38 <HAL_TIM_Base_MspInit+0x6c>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10d      	bne.n	8004f22 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8004f06:	2300      	movs	r3, #0
 8004f08:	60bb      	str	r3, [r7, #8]
 8004f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8004f34 <HAL_TIM_Base_MspInit+0x68>)
 8004f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f0e:	4a09      	ldr	r2, [pc, #36]	@ (8004f34 <HAL_TIM_Base_MspInit+0x68>)
 8004f10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f16:	4b07      	ldr	r3, [pc, #28]	@ (8004f34 <HAL_TIM_Base_MspInit+0x68>)
 8004f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f1e:	60bb      	str	r3, [r7, #8]
 8004f20:	68bb      	ldr	r3, [r7, #8]
}
 8004f22:	bf00      	nop
 8004f24:	3714      	adds	r7, #20
 8004f26:	46bd      	mov	sp, r7
 8004f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2c:	4770      	bx	lr
 8004f2e:	bf00      	nop
 8004f30:	40000800 	.word	0x40000800
 8004f34:	40023800 	.word	0x40023800
 8004f38:	40014400 	.word	0x40014400

08004f3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b08e      	sub	sp, #56	@ 0x38
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f48:	2200      	movs	r2, #0
 8004f4a:	601a      	str	r2, [r3, #0]
 8004f4c:	605a      	str	r2, [r3, #4]
 8004f4e:	609a      	str	r2, [r3, #8]
 8004f50:	60da      	str	r2, [r3, #12]
 8004f52:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	4a6a      	ldr	r2, [pc, #424]	@ (8005104 <HAL_TIM_MspPostInit+0x1c8>)
 8004f5a:	4293      	cmp	r3, r2
 8004f5c:	d11f      	bne.n	8004f9e <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	623b      	str	r3, [r7, #32]
 8004f62:	4b69      	ldr	r3, [pc, #420]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f66:	4a68      	ldr	r2, [pc, #416]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004f68:	f043 0310 	orr.w	r3, r3, #16
 8004f6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f6e:	4b66      	ldr	r3, [pc, #408]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f72:	f003 0310 	and.w	r3, r3, #16
 8004f76:	623b      	str	r3, [r7, #32]
 8004f78:	6a3b      	ldr	r3, [r7, #32]
    PE13     ------> TIM1_CH3
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_14;
 8004f7a:	f44f 43d4 	mov.w	r3, #27136	@ 0x6a00
 8004f7e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f80:	2302      	movs	r3, #2
 8004f82:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f84:	2300      	movs	r3, #0
 8004f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f94:	4619      	mov	r1, r3
 8004f96:	485d      	ldr	r0, [pc, #372]	@ (800510c <HAL_TIM_MspPostInit+0x1d0>)
 8004f98:	f001 ff2c 	bl	8006df4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM10_MspPostInit 1 */

    /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8004f9c:	e0ae      	b.n	80050fc <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a5b      	ldr	r2, [pc, #364]	@ (8005110 <HAL_TIM_MspPostInit+0x1d4>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d11f      	bne.n	8004fe8 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004fa8:	2300      	movs	r3, #0
 8004faa:	61fb      	str	r3, [r7, #28]
 8004fac:	4b56      	ldr	r3, [pc, #344]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004fae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fb0:	4a55      	ldr	r2, [pc, #340]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004fb2:	f043 0308 	orr.w	r3, r3, #8
 8004fb6:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fb8:	4b53      	ldr	r3, [pc, #332]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fbc:	f003 0308 	and.w	r3, r3, #8
 8004fc0:	61fb      	str	r3, [r7, #28]
 8004fc2:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8004fc4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fca:	2302      	movs	r3, #2
 8004fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004fd6:	2302      	movs	r3, #2
 8004fd8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004fda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004fde:	4619      	mov	r1, r3
 8004fe0:	484c      	ldr	r0, [pc, #304]	@ (8005114 <HAL_TIM_MspPostInit+0x1d8>)
 8004fe2:	f001 ff07 	bl	8006df4 <HAL_GPIO_Init>
}
 8004fe6:	e089      	b.n	80050fc <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a4a      	ldr	r2, [pc, #296]	@ (8005118 <HAL_TIM_MspPostInit+0x1dc>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d11f      	bne.n	8005032 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	61bb      	str	r3, [r7, #24]
 8004ff6:	4b44      	ldr	r3, [pc, #272]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ffa:	4a43      	ldr	r2, [pc, #268]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8004ffc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005000:	6313      	str	r3, [r2, #48]	@ 0x30
 8005002:	4b41      	ldr	r3, [pc, #260]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8005004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10;
 800500e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8005012:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005014:	2302      	movs	r3, #2
 8005016:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005018:	2300      	movs	r3, #0
 800501a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800501c:	2300      	movs	r3, #0
 800501e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8005020:	2302      	movs	r3, #2
 8005022:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005024:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005028:	4619      	mov	r1, r3
 800502a:	483c      	ldr	r0, [pc, #240]	@ (800511c <HAL_TIM_MspPostInit+0x1e0>)
 800502c:	f001 fee2 	bl	8006df4 <HAL_GPIO_Init>
}
 8005030:	e064      	b.n	80050fc <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a3a      	ldr	r2, [pc, #232]	@ (8005120 <HAL_TIM_MspPostInit+0x1e4>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d13c      	bne.n	80050b6 <HAL_TIM_MspPostInit+0x17a>
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800503c:	2300      	movs	r3, #0
 800503e:	617b      	str	r3, [r7, #20]
 8005040:	4b31      	ldr	r3, [pc, #196]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8005042:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005044:	4a30      	ldr	r2, [pc, #192]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8005046:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800504a:	6313      	str	r3, [r2, #48]	@ 0x30
 800504c:	4b2e      	ldr	r3, [pc, #184]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 800504e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005054:	617b      	str	r3, [r7, #20]
 8005056:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005058:	2300      	movs	r3, #0
 800505a:	613b      	str	r3, [r7, #16]
 800505c:	4b2a      	ldr	r3, [pc, #168]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 800505e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005060:	4a29      	ldr	r2, [pc, #164]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 8005062:	f043 0304 	orr.w	r3, r3, #4
 8005066:	6313      	str	r3, [r2, #48]	@ 0x30
 8005068:	4b27      	ldr	r3, [pc, #156]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 800506a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800506c:	f003 0304 	and.w	r3, r3, #4
 8005070:	613b      	str	r3, [r7, #16]
 8005072:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005074:	23c0      	movs	r3, #192	@ 0xc0
 8005076:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005078:	2302      	movs	r3, #2
 800507a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800507c:	2300      	movs	r3, #0
 800507e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005080:	2300      	movs	r3, #0
 8005082:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8005084:	2303      	movs	r3, #3
 8005086:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005088:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800508c:	4619      	mov	r1, r3
 800508e:	4825      	ldr	r0, [pc, #148]	@ (8005124 <HAL_TIM_MspPostInit+0x1e8>)
 8005090:	f001 feb0 	bl	8006df4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8005094:	2340      	movs	r3, #64	@ 0x40
 8005096:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005098:	2302      	movs	r3, #2
 800509a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800509c:	2300      	movs	r3, #0
 800509e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050a0:	2300      	movs	r3, #0
 80050a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80050a4:	2303      	movs	r3, #3
 80050a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80050a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050ac:	4619      	mov	r1, r3
 80050ae:	481e      	ldr	r0, [pc, #120]	@ (8005128 <HAL_TIM_MspPostInit+0x1ec>)
 80050b0:	f001 fea0 	bl	8006df4 <HAL_GPIO_Init>
}
 80050b4:	e022      	b.n	80050fc <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM10)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1c      	ldr	r2, [pc, #112]	@ (800512c <HAL_TIM_MspPostInit+0x1f0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d11d      	bne.n	80050fc <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
 80050c4:	4b10      	ldr	r3, [pc, #64]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 80050c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 80050ca:	f043 0320 	orr.w	r3, r3, #32
 80050ce:	6313      	str	r3, [r2, #48]	@ 0x30
 80050d0:	4b0d      	ldr	r3, [pc, #52]	@ (8005108 <HAL_TIM_MspPostInit+0x1cc>)
 80050d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d4:	f003 0320 	and.w	r3, r3, #32
 80050d8:	60fb      	str	r3, [r7, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80050dc:	2340      	movs	r3, #64	@ 0x40
 80050de:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050e0:	2302      	movs	r3, #2
 80050e2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050e4:	2301      	movs	r3, #1
 80050e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80050e8:	2302      	movs	r3, #2
 80050ea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80050ec:	2303      	movs	r3, #3
 80050ee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80050f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050f4:	4619      	mov	r1, r3
 80050f6:	480e      	ldr	r0, [pc, #56]	@ (8005130 <HAL_TIM_MspPostInit+0x1f4>)
 80050f8:	f001 fe7c 	bl	8006df4 <HAL_GPIO_Init>
}
 80050fc:	bf00      	nop
 80050fe:	3738      	adds	r7, #56	@ 0x38
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}
 8005104:	40010000 	.word	0x40010000
 8005108:	40023800 	.word	0x40023800
 800510c:	40021000 	.word	0x40021000
 8005110:	40000800 	.word	0x40000800
 8005114:	40020c00 	.word	0x40020c00
 8005118:	40000c00 	.word	0x40000c00
 800511c:	40021c00 	.word	0x40021c00
 8005120:	40010400 	.word	0x40010400
 8005124:	40022000 	.word	0x40022000
 8005128:	40020800 	.word	0x40020800
 800512c:	40014400 	.word	0x40014400
 8005130:	40021400 	.word	0x40021400

08005134 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08e      	sub	sp, #56	@ 0x38
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800513c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005140:	2200      	movs	r2, #0
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	605a      	str	r2, [r3, #4]
 8005146:	609a      	str	r2, [r3, #8]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a74      	ldr	r2, [pc, #464]	@ (8005324 <HAL_UART_MspInit+0x1f0>)
 8005152:	4293      	cmp	r3, r2
 8005154:	f040 8083 	bne.w	800525e <HAL_UART_MspInit+0x12a>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005158:	2300      	movs	r3, #0
 800515a:	623b      	str	r3, [r7, #32]
 800515c:	4b72      	ldr	r3, [pc, #456]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800515e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005160:	4a71      	ldr	r2, [pc, #452]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 8005162:	f043 0310 	orr.w	r3, r3, #16
 8005166:	6453      	str	r3, [r2, #68]	@ 0x44
 8005168:	4b6f      	ldr	r3, [pc, #444]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800516a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800516c:	f003 0310 	and.w	r3, r3, #16
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005174:	2300      	movs	r3, #0
 8005176:	61fb      	str	r3, [r7, #28]
 8005178:	4b6b      	ldr	r3, [pc, #428]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800517a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800517c:	4a6a      	ldr	r2, [pc, #424]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800517e:	f043 0302 	orr.w	r3, r3, #2
 8005182:	6313      	str	r3, [r2, #48]	@ 0x30
 8005184:	4b68      	ldr	r3, [pc, #416]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 8005186:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	61fb      	str	r3, [r7, #28]
 800518e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005190:	2300      	movs	r3, #0
 8005192:	61bb      	str	r3, [r7, #24]
 8005194:	4b64      	ldr	r3, [pc, #400]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 8005196:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005198:	4a63      	ldr	r2, [pc, #396]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800519a:	f043 0301 	orr.w	r3, r3, #1
 800519e:	6313      	str	r3, [r2, #48]	@ 0x30
 80051a0:	4b61      	ldr	r3, [pc, #388]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 80051a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a4:	f003 0301 	and.w	r3, r3, #1
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80051ac:	2380      	movs	r3, #128	@ 0x80
 80051ae:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051b0:	2302      	movs	r3, #2
 80051b2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b4:	2300      	movs	r3, #0
 80051b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051b8:	2303      	movs	r3, #3
 80051ba:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051bc:	2307      	movs	r3, #7
 80051be:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80051c0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051c4:	4619      	mov	r1, r3
 80051c6:	4859      	ldr	r0, [pc, #356]	@ (800532c <HAL_UART_MspInit+0x1f8>)
 80051c8:	f001 fe14 	bl	8006df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80051cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80051d0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051d2:	2302      	movs	r3, #2
 80051d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d6:	2300      	movs	r3, #0
 80051d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051da:	2303      	movs	r3, #3
 80051dc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80051de:	2307      	movs	r3, #7
 80051e0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80051e6:	4619      	mov	r1, r3
 80051e8:	4851      	ldr	r0, [pc, #324]	@ (8005330 <HAL_UART_MspInit+0x1fc>)
 80051ea:	f001 fe03 	bl	8006df4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80051ee:	4b51      	ldr	r3, [pc, #324]	@ (8005334 <HAL_UART_MspInit+0x200>)
 80051f0:	4a51      	ldr	r2, [pc, #324]	@ (8005338 <HAL_UART_MspInit+0x204>)
 80051f2:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80051f4:	4b4f      	ldr	r3, [pc, #316]	@ (8005334 <HAL_UART_MspInit+0x200>)
 80051f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80051fa:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80051fc:	4b4d      	ldr	r3, [pc, #308]	@ (8005334 <HAL_UART_MspInit+0x200>)
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005202:	4b4c      	ldr	r3, [pc, #304]	@ (8005334 <HAL_UART_MspInit+0x200>)
 8005204:	2200      	movs	r2, #0
 8005206:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005208:	4b4a      	ldr	r3, [pc, #296]	@ (8005334 <HAL_UART_MspInit+0x200>)
 800520a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800520e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005210:	4b48      	ldr	r3, [pc, #288]	@ (8005334 <HAL_UART_MspInit+0x200>)
 8005212:	2200      	movs	r2, #0
 8005214:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005216:	4b47      	ldr	r3, [pc, #284]	@ (8005334 <HAL_UART_MspInit+0x200>)
 8005218:	2200      	movs	r2, #0
 800521a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800521c:	4b45      	ldr	r3, [pc, #276]	@ (8005334 <HAL_UART_MspInit+0x200>)
 800521e:	2200      	movs	r2, #0
 8005220:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8005222:	4b44      	ldr	r3, [pc, #272]	@ (8005334 <HAL_UART_MspInit+0x200>)
 8005224:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8005228:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800522a:	4b42      	ldr	r3, [pc, #264]	@ (8005334 <HAL_UART_MspInit+0x200>)
 800522c:	2200      	movs	r2, #0
 800522e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005230:	4840      	ldr	r0, [pc, #256]	@ (8005334 <HAL_UART_MspInit+0x200>)
 8005232:	f001 f9dd 	bl	80065f0 <HAL_DMA_Init>
 8005236:	4603      	mov	r3, r0
 8005238:	2b00      	cmp	r3, #0
 800523a:	d001      	beq.n	8005240 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 800523c:	f7ff faa4 	bl	8004788 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	4a3c      	ldr	r2, [pc, #240]	@ (8005334 <HAL_UART_MspInit+0x200>)
 8005244:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005246:	4a3b      	ldr	r2, [pc, #236]	@ (8005334 <HAL_UART_MspInit+0x200>)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800524c:	2200      	movs	r2, #0
 800524e:	2105      	movs	r1, #5
 8005250:	2025      	movs	r0, #37	@ 0x25
 8005252:	f001 f996 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005256:	2025      	movs	r0, #37	@ 0x25
 8005258:	f001 f9af 	bl	80065ba <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART6_MspInit 1 */

    /* USER CODE END USART6_MspInit 1 */
  }

}
 800525c:	e0df      	b.n	800541e <HAL_UART_MspInit+0x2ea>
  else if(huart->Instance==USART3)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a36      	ldr	r2, [pc, #216]	@ (800533c <HAL_UART_MspInit+0x208>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d171      	bne.n	800534c <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005268:	2300      	movs	r3, #0
 800526a:	617b      	str	r3, [r7, #20]
 800526c:	4b2e      	ldr	r3, [pc, #184]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800526e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005270:	4a2d      	ldr	r2, [pc, #180]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 8005272:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005276:	6413      	str	r3, [r2, #64]	@ 0x40
 8005278:	4b2b      	ldr	r3, [pc, #172]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800527a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800527c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005280:	617b      	str	r3, [r7, #20]
 8005282:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005284:	2300      	movs	r3, #0
 8005286:	613b      	str	r3, [r7, #16]
 8005288:	4b27      	ldr	r3, [pc, #156]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800528c:	4a26      	ldr	r2, [pc, #152]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 800528e:	f043 0304 	orr.w	r3, r3, #4
 8005292:	6313      	str	r3, [r2, #48]	@ 0x30
 8005294:	4b24      	ldr	r3, [pc, #144]	@ (8005328 <HAL_UART_MspInit+0x1f4>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005298:	f003 0304 	and.w	r3, r3, #4
 800529c:	613b      	str	r3, [r7, #16]
 800529e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80052a0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80052a4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052a6:	2302      	movs	r3, #2
 80052a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052aa:	2300      	movs	r3, #0
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ae:	2303      	movs	r3, #3
 80052b0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80052b2:	2307      	movs	r3, #7
 80052b4:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80052b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80052ba:	4619      	mov	r1, r3
 80052bc:	4820      	ldr	r0, [pc, #128]	@ (8005340 <HAL_UART_MspInit+0x20c>)
 80052be:	f001 fd99 	bl	8006df4 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80052c2:	4b20      	ldr	r3, [pc, #128]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052c4:	4a20      	ldr	r2, [pc, #128]	@ (8005348 <HAL_UART_MspInit+0x214>)
 80052c6:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80052c8:	4b1e      	ldr	r3, [pc, #120]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052ca:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80052ce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80052d0:	4b1c      	ldr	r3, [pc, #112]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80052d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052d8:	2200      	movs	r2, #0
 80052da:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80052dc:	4b19      	ldr	r3, [pc, #100]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052de:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80052e2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80052e4:	4b17      	ldr	r3, [pc, #92]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80052ea:	4b16      	ldr	r3, [pc, #88]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052ec:	2200      	movs	r2, #0
 80052ee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 80052f0:	4b14      	ldr	r3, [pc, #80]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80052f6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80052f8:	4b12      	ldr	r3, [pc, #72]	@ (8005344 <HAL_UART_MspInit+0x210>)
 80052fa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80052fe:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005300:	4b10      	ldr	r3, [pc, #64]	@ (8005344 <HAL_UART_MspInit+0x210>)
 8005302:	2200      	movs	r2, #0
 8005304:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005306:	480f      	ldr	r0, [pc, #60]	@ (8005344 <HAL_UART_MspInit+0x210>)
 8005308:	f001 f972 	bl	80065f0 <HAL_DMA_Init>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d001      	beq.n	8005316 <HAL_UART_MspInit+0x1e2>
      Error_Handler();
 8005312:	f7ff fa39 	bl	8004788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a0a      	ldr	r2, [pc, #40]	@ (8005344 <HAL_UART_MspInit+0x210>)
 800531a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800531c:	4a09      	ldr	r2, [pc, #36]	@ (8005344 <HAL_UART_MspInit+0x210>)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8005322:	e07c      	b.n	800541e <HAL_UART_MspInit+0x2ea>
 8005324:	40011000 	.word	0x40011000
 8005328:	40023800 	.word	0x40023800
 800532c:	40020400 	.word	0x40020400
 8005330:	40020000 	.word	0x40020000
 8005334:	20000cbc 	.word	0x20000cbc
 8005338:	40026440 	.word	0x40026440
 800533c:	40004800 	.word	0x40004800
 8005340:	40020800 	.word	0x40020800
 8005344:	20000d1c 	.word	0x20000d1c
 8005348:	40026028 	.word	0x40026028
  else if(huart->Instance==USART6)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a35      	ldr	r2, [pc, #212]	@ (8005428 <HAL_UART_MspInit+0x2f4>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d163      	bne.n	800541e <HAL_UART_MspInit+0x2ea>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	60fb      	str	r3, [r7, #12]
 800535a:	4b34      	ldr	r3, [pc, #208]	@ (800542c <HAL_UART_MspInit+0x2f8>)
 800535c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800535e:	4a33      	ldr	r2, [pc, #204]	@ (800542c <HAL_UART_MspInit+0x2f8>)
 8005360:	f043 0320 	orr.w	r3, r3, #32
 8005364:	6453      	str	r3, [r2, #68]	@ 0x44
 8005366:	4b31      	ldr	r3, [pc, #196]	@ (800542c <HAL_UART_MspInit+0x2f8>)
 8005368:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800536a:	f003 0320 	and.w	r3, r3, #32
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	60bb      	str	r3, [r7, #8]
 8005376:	4b2d      	ldr	r3, [pc, #180]	@ (800542c <HAL_UART_MspInit+0x2f8>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	4a2c      	ldr	r2, [pc, #176]	@ (800542c <HAL_UART_MspInit+0x2f8>)
 800537c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005380:	6313      	str	r3, [r2, #48]	@ 0x30
 8005382:	4b2a      	ldr	r3, [pc, #168]	@ (800542c <HAL_UART_MspInit+0x2f8>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005386:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800538a:	60bb      	str	r3, [r7, #8]
 800538c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_9;
 800538e:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8005392:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005394:	2302      	movs	r3, #2
 8005396:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005398:	2300      	movs	r3, #0
 800539a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800539c:	2303      	movs	r3, #3
 800539e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80053a0:	2308      	movs	r3, #8
 80053a2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80053a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80053a8:	4619      	mov	r1, r3
 80053aa:	4821      	ldr	r0, [pc, #132]	@ (8005430 <HAL_UART_MspInit+0x2fc>)
 80053ac:	f001 fd22 	bl	8006df4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80053b0:	4b20      	ldr	r3, [pc, #128]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053b2:	4a21      	ldr	r2, [pc, #132]	@ (8005438 <HAL_UART_MspInit+0x304>)
 80053b4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80053b6:	4b1f      	ldr	r3, [pc, #124]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053b8:	f04f 6220 	mov.w	r2, #167772160	@ 0xa000000
 80053bc:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80053be:	4b1d      	ldr	r3, [pc, #116]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80053c4:	4b1b      	ldr	r3, [pc, #108]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80053ca:	4b1a      	ldr	r3, [pc, #104]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053cc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80053d0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80053d2:	4b18      	ldr	r3, [pc, #96]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053d4:	2200      	movs	r2, #0
 80053d6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80053d8:	4b16      	ldr	r3, [pc, #88]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053da:	2200      	movs	r2, #0
 80053dc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80053de:	4b15      	ldr	r3, [pc, #84]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80053e4:	4b13      	ldr	r3, [pc, #76]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053e6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80053ea:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80053ec:	4b11      	ldr	r3, [pc, #68]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80053f2:	4810      	ldr	r0, [pc, #64]	@ (8005434 <HAL_UART_MspInit+0x300>)
 80053f4:	f001 f8fc 	bl	80065f0 <HAL_DMA_Init>
 80053f8:	4603      	mov	r3, r0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 80053fe:	f7ff f9c3 	bl	8004788 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart6_rx);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a0b      	ldr	r2, [pc, #44]	@ (8005434 <HAL_UART_MspInit+0x300>)
 8005406:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005408:	4a0a      	ldr	r2, [pc, #40]	@ (8005434 <HAL_UART_MspInit+0x300>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 800540e:	2200      	movs	r2, #0
 8005410:	2105      	movs	r1, #5
 8005412:	2047      	movs	r0, #71	@ 0x47
 8005414:	f001 f8b5 	bl	8006582 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005418:	2047      	movs	r0, #71	@ 0x47
 800541a:	f001 f8ce 	bl	80065ba <HAL_NVIC_EnableIRQ>
}
 800541e:	bf00      	nop
 8005420:	3738      	adds	r7, #56	@ 0x38
 8005422:	46bd      	mov	sp, r7
 8005424:	bd80      	pop	{r7, pc}
 8005426:	bf00      	nop
 8005428:	40011400 	.word	0x40011400
 800542c:	40023800 	.word	0x40023800
 8005430:	40021800 	.word	0x40021800
 8005434:	20000d7c 	.word	0x20000d7c
 8005438:	40026428 	.word	0x40026428

0800543c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8005440:	f002 fc66 	bl	8007d10 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <NMI_Handler+0x8>

08005448 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <HardFault_Handler+0x4>

08005450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005450:	b480      	push	{r7}
 8005452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005454:	bf00      	nop
 8005456:	e7fd      	b.n	8005454 <MemManage_Handler+0x4>

08005458 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005458:	b480      	push	{r7}
 800545a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800545c:	bf00      	nop
 800545e:	e7fd      	b.n	800545c <BusFault_Handler+0x4>

08005460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005464:	bf00      	nop
 8005466:	e7fd      	b.n	8005464 <UsageFault_Handler+0x4>

08005468 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005468:	b480      	push	{r7}
 800546a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800546c:	bf00      	nop
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr

08005476 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005476:	b580      	push	{r7, lr}
 8005478:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800547a:	f000 f921 	bl	80056c0 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800547e:	f006 fe17 	bl	800c0b0 <xTaskGetSchedulerState>
 8005482:	4603      	mov	r3, r0
 8005484:	2b01      	cmp	r3, #1
 8005486:	d001      	beq.n	800548c <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8005488:	f007 fcee 	bl	800ce68 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800548c:	bf00      	nop
 800548e:	bd80      	pop	{r7, pc}

08005490 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8005494:	2008      	movs	r0, #8
 8005496:	f001 fe7b 	bl	8007190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800549a:	bf00      	nop
 800549c:	bd80      	pop	{r7, pc}

0800549e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800549e:	b580      	push	{r7, lr}
 80054a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(INT1_ACCEL_Pin_Pin);
 80054a2:	2010      	movs	r0, #16
 80054a4:	f001 fe74 	bl	8007190 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80054a8:	bf00      	nop
 80054aa:	bd80      	pop	{r7, pc}

080054ac <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80054b0:	4802      	ldr	r0, [pc, #8]	@ (80054bc <DMA1_Stream1_IRQHandler+0x10>)
 80054b2:	f001 fa35 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80054b6:	bf00      	nop
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	20000d1c 	.word	0x20000d1c

080054c0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80054c4:	4802      	ldr	r0, [pc, #8]	@ (80054d0 <CAN1_RX0_IRQHandler+0x10>)
 80054c6:	f000 fd51 	bl	8005f6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80054ca:	bf00      	nop
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	20000980 	.word	0x20000980

080054d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80054d8:	4802      	ldr	r0, [pc, #8]	@ (80054e4 <USART1_IRQHandler+0x10>)
 80054da:	f003 fe83 	bl	80091e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80054de:	bf00      	nop
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	20000be4 	.word	0x20000be4

080054e8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80054ec:	4802      	ldr	r0, [pc, #8]	@ (80054f8 <DMA2_Stream1_IRQHandler+0x10>)
 80054ee:	f001 fa17 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	20000d7c 	.word	0x20000d7c

080054fc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8005500:	4802      	ldr	r0, [pc, #8]	@ (800550c <DMA2_Stream2_IRQHandler+0x10>)
 8005502:	f001 fa0d 	bl	8006920 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8005506:	bf00      	nop
 8005508:	bd80      	pop	{r7, pc}
 800550a:	bf00      	nop
 800550c:	20000cbc 	.word	0x20000cbc

08005510 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8005514:	4802      	ldr	r0, [pc, #8]	@ (8005520 <CAN2_RX0_IRQHandler+0x10>)
 8005516:	f000 fd29 	bl	8005f6c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 800551a:	bf00      	nop
 800551c:	bd80      	pop	{r7, pc}
 800551e:	bf00      	nop
 8005520:	200009a8 	.word	0x200009a8

08005524 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005528:	4802      	ldr	r0, [pc, #8]	@ (8005534 <USART6_IRQHandler+0x10>)
 800552a:	f003 fe5b 	bl	80091e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800552e:	bf00      	nop
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000c74 	.word	0x20000c74

08005538 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005540:	4a14      	ldr	r2, [pc, #80]	@ (8005594 <_sbrk+0x5c>)
 8005542:	4b15      	ldr	r3, [pc, #84]	@ (8005598 <_sbrk+0x60>)
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800554c:	4b13      	ldr	r3, [pc, #76]	@ (800559c <_sbrk+0x64>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d102      	bne.n	800555a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005554:	4b11      	ldr	r3, [pc, #68]	@ (800559c <_sbrk+0x64>)
 8005556:	4a12      	ldr	r2, [pc, #72]	@ (80055a0 <_sbrk+0x68>)
 8005558:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800555a:	4b10      	ldr	r3, [pc, #64]	@ (800559c <_sbrk+0x64>)
 800555c:	681a      	ldr	r2, [r3, #0]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4413      	add	r3, r2
 8005562:	693a      	ldr	r2, [r7, #16]
 8005564:	429a      	cmp	r2, r3
 8005566:	d207      	bcs.n	8005578 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005568:	f007 ff26 	bl	800d3b8 <__errno>
 800556c:	4603      	mov	r3, r0
 800556e:	220c      	movs	r2, #12
 8005570:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005572:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005576:	e009      	b.n	800558c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005578:	4b08      	ldr	r3, [pc, #32]	@ (800559c <_sbrk+0x64>)
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800557e:	4b07      	ldr	r3, [pc, #28]	@ (800559c <_sbrk+0x64>)
 8005580:	681a      	ldr	r2, [r3, #0]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4413      	add	r3, r2
 8005586:	4a05      	ldr	r2, [pc, #20]	@ (800559c <_sbrk+0x64>)
 8005588:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800558a:	68fb      	ldr	r3, [r7, #12]
}
 800558c:	4618      	mov	r0, r3
 800558e:	3718      	adds	r7, #24
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	20020000 	.word	0x20020000
 8005598:	00000400 	.word	0x00000400
 800559c:	20000dec 	.word	0x20000dec
 80055a0:	20005928 	.word	0x20005928

080055a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80055a4:	b480      	push	{r7}
 80055a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80055a8:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <SystemInit+0x20>)
 80055aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ae:	4a05      	ldr	r2, [pc, #20]	@ (80055c4 <SystemInit+0x20>)
 80055b0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80055b4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80055b8:	bf00      	nop
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
 80055c2:	bf00      	nop
 80055c4:	e000ed00 	.word	0xe000ed00

080055c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8005600 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80055cc:	f7ff ffea 	bl	80055a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055d0:	480c      	ldr	r0, [pc, #48]	@ (8005604 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80055d2:	490d      	ldr	r1, [pc, #52]	@ (8005608 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80055d4:	4a0d      	ldr	r2, [pc, #52]	@ (800560c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80055d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055d8:	e002      	b.n	80055e0 <LoopCopyDataInit>

080055da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055de:	3304      	adds	r3, #4

080055e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055e4:	d3f9      	bcc.n	80055da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055e6:	4a0a      	ldr	r2, [pc, #40]	@ (8005610 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80055e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005614 <LoopFillZerobss+0x22>)
  movs r3, #0
 80055ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055ec:	e001      	b.n	80055f2 <LoopFillZerobss>

080055ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055f0:	3204      	adds	r2, #4

080055f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055f4:	d3fb      	bcc.n	80055ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80055f6:	f007 fee5 	bl	800d3c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055fa:	f7fe f97f 	bl	80038fc <main>
  bx  lr    
 80055fe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8005600:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005604:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005608:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 800560c:	0800e0b0 	.word	0x0800e0b0
  ldr r2, =_sbss
 8005610:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8005614:	20005924 	.word	0x20005924

08005618 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005618:	e7fe      	b.n	8005618 <ADC_IRQHandler>
	...

0800561c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800561c:	b580      	push	{r7, lr}
 800561e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005620:	4b0e      	ldr	r3, [pc, #56]	@ (800565c <HAL_Init+0x40>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a0d      	ldr	r2, [pc, #52]	@ (800565c <HAL_Init+0x40>)
 8005626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800562a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800562c:	4b0b      	ldr	r3, [pc, #44]	@ (800565c <HAL_Init+0x40>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a0a      	ldr	r2, [pc, #40]	@ (800565c <HAL_Init+0x40>)
 8005632:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005636:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005638:	4b08      	ldr	r3, [pc, #32]	@ (800565c <HAL_Init+0x40>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a07      	ldr	r2, [pc, #28]	@ (800565c <HAL_Init+0x40>)
 800563e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005642:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005644:	2003      	movs	r0, #3
 8005646:	f000 ff91 	bl	800656c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800564a:	200f      	movs	r0, #15
 800564c:	f000 f808 	bl	8005660 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005650:	f7ff fa40 	bl	8004ad4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005654:	2300      	movs	r3, #0
}
 8005656:	4618      	mov	r0, r3
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40023c00 	.word	0x40023c00

08005660 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005668:	4b12      	ldr	r3, [pc, #72]	@ (80056b4 <HAL_InitTick+0x54>)
 800566a:	681a      	ldr	r2, [r3, #0]
 800566c:	4b12      	ldr	r3, [pc, #72]	@ (80056b8 <HAL_InitTick+0x58>)
 800566e:	781b      	ldrb	r3, [r3, #0]
 8005670:	4619      	mov	r1, r3
 8005672:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005676:	fbb3 f3f1 	udiv	r3, r3, r1
 800567a:	fbb2 f3f3 	udiv	r3, r2, r3
 800567e:	4618      	mov	r0, r3
 8005680:	f000 ffa9 	bl	80065d6 <HAL_SYSTICK_Config>
 8005684:	4603      	mov	r3, r0
 8005686:	2b00      	cmp	r3, #0
 8005688:	d001      	beq.n	800568e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800568a:	2301      	movs	r3, #1
 800568c:	e00e      	b.n	80056ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b0f      	cmp	r3, #15
 8005692:	d80a      	bhi.n	80056aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005694:	2200      	movs	r2, #0
 8005696:	6879      	ldr	r1, [r7, #4]
 8005698:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800569c:	f000 ff71 	bl	8006582 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80056a0:	4a06      	ldr	r2, [pc, #24]	@ (80056bc <HAL_InitTick+0x5c>)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80056a6:	2300      	movs	r3, #0
 80056a8:	e000      	b.n	80056ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3708      	adds	r7, #8
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	2000002c 	.word	0x2000002c
 80056b8:	20000034 	.word	0x20000034
 80056bc:	20000030 	.word	0x20000030

080056c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80056c0:	b480      	push	{r7}
 80056c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80056c4:	4b06      	ldr	r3, [pc, #24]	@ (80056e0 <HAL_IncTick+0x20>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	461a      	mov	r2, r3
 80056ca:	4b06      	ldr	r3, [pc, #24]	@ (80056e4 <HAL_IncTick+0x24>)
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	4413      	add	r3, r2
 80056d0:	4a04      	ldr	r2, [pc, #16]	@ (80056e4 <HAL_IncTick+0x24>)
 80056d2:	6013      	str	r3, [r2, #0]
}
 80056d4:	bf00      	nop
 80056d6:	46bd      	mov	sp, r7
 80056d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056dc:	4770      	bx	lr
 80056de:	bf00      	nop
 80056e0:	20000034 	.word	0x20000034
 80056e4:	20000df0 	.word	0x20000df0

080056e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80056e8:	b480      	push	{r7}
 80056ea:	af00      	add	r7, sp, #0
  return uwTick;
 80056ec:	4b03      	ldr	r3, [pc, #12]	@ (80056fc <HAL_GetTick+0x14>)
 80056ee:	681b      	ldr	r3, [r3, #0]
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	20000df0 	.word	0x20000df0

08005700 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d101      	bne.n	8005712 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e0ed      	b.n	80058ee <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b00      	cmp	r3, #0
 800571c:	d102      	bne.n	8005724 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7ff fa04 	bl	8004b2c <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005734:	f7ff ffd8 	bl	80056e8 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800573a:	e012      	b.n	8005762 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800573c:	f7ff ffd4 	bl	80056e8 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b0a      	cmp	r3, #10
 8005748:	d90b      	bls.n	8005762 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800574e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2205      	movs	r2, #5
 800575a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e0c5      	b.n	80058ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0e5      	beq.n	800573c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	681a      	ldr	r2, [r3, #0]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f022 0202 	bic.w	r2, r2, #2
 800577e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005780:	f7ff ffb2 	bl	80056e8 <HAL_GetTick>
 8005784:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8005786:	e012      	b.n	80057ae <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005788:	f7ff ffae 	bl	80056e8 <HAL_GetTick>
 800578c:	4602      	mov	r2, r0
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b0a      	cmp	r3, #10
 8005794:	d90b      	bls.n	80057ae <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2205      	movs	r2, #5
 80057a6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e09f      	b.n	80058ee <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 0302 	and.w	r3, r3, #2
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	7e1b      	ldrb	r3, [r3, #24]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d108      	bne.n	80057d6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	681a      	ldr	r2, [r3, #0]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80057d2:	601a      	str	r2, [r3, #0]
 80057d4:	e007      	b.n	80057e6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	681a      	ldr	r2, [r3, #0]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80057e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	7e5b      	ldrb	r3, [r3, #25]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d108      	bne.n	8005800 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057fc:	601a      	str	r2, [r3, #0]
 80057fe:	e007      	b.n	8005810 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800580e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	7e9b      	ldrb	r3, [r3, #26]
 8005814:	2b01      	cmp	r3, #1
 8005816:	d108      	bne.n	800582a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0220 	orr.w	r2, r2, #32
 8005826:	601a      	str	r2, [r3, #0]
 8005828:	e007      	b.n	800583a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 0220 	bic.w	r2, r2, #32
 8005838:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	7edb      	ldrb	r3, [r3, #27]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d108      	bne.n	8005854 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f022 0210 	bic.w	r2, r2, #16
 8005850:	601a      	str	r2, [r3, #0]
 8005852:	e007      	b.n	8005864 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681a      	ldr	r2, [r3, #0]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f042 0210 	orr.w	r2, r2, #16
 8005862:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	7f1b      	ldrb	r3, [r3, #28]
 8005868:	2b01      	cmp	r3, #1
 800586a:	d108      	bne.n	800587e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f042 0208 	orr.w	r2, r2, #8
 800587a:	601a      	str	r2, [r3, #0]
 800587c:	e007      	b.n	800588e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	681a      	ldr	r2, [r3, #0]
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f022 0208 	bic.w	r2, r2, #8
 800588c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	7f5b      	ldrb	r3, [r3, #29]
 8005892:	2b01      	cmp	r3, #1
 8005894:	d108      	bne.n	80058a8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f042 0204 	orr.w	r2, r2, #4
 80058a4:	601a      	str	r2, [r3, #0]
 80058a6:	e007      	b.n	80058b8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f022 0204 	bic.w	r2, r2, #4
 80058b6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	431a      	orrs	r2, r3
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	431a      	orrs	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	695b      	ldr	r3, [r3, #20]
 80058cc:	ea42 0103 	orr.w	r1, r2, r3
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	685b      	ldr	r3, [r3, #4]
 80058d4:	1e5a      	subs	r2, r3, #1
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	430a      	orrs	r2, r1
 80058dc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2200      	movs	r2, #0
 80058e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80058ec:	2300      	movs	r3, #0
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3710      	adds	r7, #16
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}
	...

080058f8 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b087      	sub	sp, #28
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005908:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 800590a:	7dfb      	ldrb	r3, [r7, #23]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d003      	beq.n	8005918 <HAL_CAN_ConfigFilter+0x20>
 8005910:	7dfb      	ldrb	r3, [r7, #23]
 8005912:	2b02      	cmp	r3, #2
 8005914:	f040 80be 	bne.w	8005a94 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8005918:	4b65      	ldr	r3, [pc, #404]	@ (8005ab0 <HAL_CAN_ConfigFilter+0x1b8>)
 800591a:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005922:	f043 0201 	orr.w	r2, r3, #1
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005932:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	431a      	orrs	r2, r3
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	f003 031f 	and.w	r3, r3, #31
 8005958:	2201      	movs	r2, #1
 800595a:	fa02 f303 	lsl.w	r3, r2, r3
 800595e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	43db      	mvns	r3, r3
 800596a:	401a      	ands	r2, r3
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8005972:	683b      	ldr	r3, [r7, #0]
 8005974:	69db      	ldr	r3, [r3, #28]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d123      	bne.n	80059c2 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	43db      	mvns	r3, r3
 8005984:	401a      	ands	r2, r3
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800599c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	3248      	adds	r2, #72	@ 0x48
 80059a2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059b6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80059b8:	6939      	ldr	r1, [r7, #16]
 80059ba:	3348      	adds	r3, #72	@ 0x48
 80059bc:	00db      	lsls	r3, r3, #3
 80059be:	440b      	add	r3, r1
 80059c0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	69db      	ldr	r3, [r3, #28]
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d122      	bne.n	8005a10 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	431a      	orrs	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80059da:	683b      	ldr	r3, [r7, #0]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059e6:	683a      	ldr	r2, [r7, #0]
 80059e8:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 80059ea:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	3248      	adds	r2, #72	@ 0x48
 80059f0:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80059f4:	683b      	ldr	r3, [r7, #0]
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005a04:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005a06:	6939      	ldr	r1, [r7, #16]
 8005a08:	3348      	adds	r3, #72	@ 0x48
 8005a0a:	00db      	lsls	r3, r3, #3
 8005a0c:	440b      	add	r3, r1
 8005a0e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	43db      	mvns	r3, r3
 8005a22:	401a      	ands	r2, r3
 8005a24:	693b      	ldr	r3, [r7, #16]
 8005a26:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8005a2a:	e007      	b.n	8005a3c <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	431a      	orrs	r2, r3
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	401a      	ands	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8005a56:	e007      	b.n	8005a68 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	431a      	orrs	r2, r3
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	6a1b      	ldr	r3, [r3, #32]
 8005a6c:	2b01      	cmp	r3, #1
 8005a6e:	d107      	bne.n	8005a80 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8005a86:	f023 0201 	bic.w	r2, r3, #1
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8005a90:	2300      	movs	r3, #0
 8005a92:	e006      	b.n	8005aa2 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a98:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
  }
}
 8005aa2:	4618      	mov	r0, r3
 8005aa4:	371c      	adds	r7, #28
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aac:	4770      	bx	lr
 8005aae:	bf00      	nop
 8005ab0:	40006400 	.word	0x40006400

08005ab4 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005ac2:	b2db      	uxtb	r3, r3
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d12e      	bne.n	8005b26 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0201 	bic.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005ae0:	f7ff fe02 	bl	80056e8 <HAL_GetTick>
 8005ae4:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005ae6:	e012      	b.n	8005b0e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8005ae8:	f7ff fdfe 	bl	80056e8 <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	2b0a      	cmp	r3, #10
 8005af4:	d90b      	bls.n	8005b0e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afa:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2205      	movs	r2, #5
 8005b06:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e012      	b.n	8005b34 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	e006      	b.n	8005b34 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2a:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005b32:	2301      	movs	r3, #1
  }
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3710      	adds	r7, #16
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	bd80      	pop	{r7, pc}

08005b3c <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b089      	sub	sp, #36	@ 0x24
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	60f8      	str	r0, [r7, #12]
 8005b44:	60b9      	str	r1, [r7, #8]
 8005b46:	607a      	str	r2, [r7, #4]
 8005b48:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005b50:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005b5a:	7ffb      	ldrb	r3, [r7, #31]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	d003      	beq.n	8005b68 <HAL_CAN_AddTxMessage+0x2c>
 8005b60:	7ffb      	ldrb	r3, [r7, #31]
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	f040 80ad 	bne.w	8005cc2 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005b68:	69bb      	ldr	r3, [r7, #24]
 8005b6a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d10a      	bne.n	8005b88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d105      	bne.n	8005b88 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	f000 8095 	beq.w	8005cb2 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8005b88:	69bb      	ldr	r3, [r7, #24]
 8005b8a:	0e1b      	lsrs	r3, r3, #24
 8005b8c:	f003 0303 	and.w	r3, r3, #3
 8005b90:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005b92:	2201      	movs	r2, #1
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	409a      	lsls	r2, r3
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d10d      	bne.n	8005bc0 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8005bae:	68f9      	ldr	r1, [r7, #12]
 8005bb0:	6809      	ldr	r1, [r1, #0]
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	3318      	adds	r3, #24
 8005bb8:	011b      	lsls	r3, r3, #4
 8005bba:	440b      	add	r3, r1
 8005bbc:	601a      	str	r2, [r3, #0]
 8005bbe:	e00f      	b.n	8005be0 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bca:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bd0:	68f9      	ldr	r1, [r7, #12]
 8005bd2:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8005bd4:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	3318      	adds	r3, #24
 8005bda:	011b      	lsls	r3, r3, #4
 8005bdc:	440b      	add	r3, r1
 8005bde:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	6819      	ldr	r1, [r3, #0]
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3318      	adds	r3, #24
 8005bec:	011b      	lsls	r3, r3, #4
 8005bee:	440b      	add	r3, r1
 8005bf0:	3304      	adds	r3, #4
 8005bf2:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8005bf4:	68bb      	ldr	r3, [r7, #8]
 8005bf6:	7d1b      	ldrb	r3, [r3, #20]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d111      	bne.n	8005c20 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	3318      	adds	r3, #24
 8005c04:	011b      	lsls	r3, r3, #4
 8005c06:	4413      	add	r3, r2
 8005c08:	3304      	adds	r3, #4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68fa      	ldr	r2, [r7, #12]
 8005c0e:	6811      	ldr	r1, [r2, #0]
 8005c10:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3318      	adds	r3, #24
 8005c18:	011b      	lsls	r3, r3, #4
 8005c1a:	440b      	add	r3, r1
 8005c1c:	3304      	adds	r3, #4
 8005c1e:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	3307      	adds	r3, #7
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	061a      	lsls	r2, r3, #24
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	3306      	adds	r3, #6
 8005c2c:	781b      	ldrb	r3, [r3, #0]
 8005c2e:	041b      	lsls	r3, r3, #16
 8005c30:	431a      	orrs	r2, r3
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3305      	adds	r3, #5
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	021b      	lsls	r3, r3, #8
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	687a      	ldr	r2, [r7, #4]
 8005c3e:	3204      	adds	r2, #4
 8005c40:	7812      	ldrb	r2, [r2, #0]
 8005c42:	4610      	mov	r0, r2
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	6811      	ldr	r1, [r2, #0]
 8005c48:	ea43 0200 	orr.w	r2, r3, r0
 8005c4c:	697b      	ldr	r3, [r7, #20]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	440b      	add	r3, r1
 8005c52:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005c56:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	3303      	adds	r3, #3
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	061a      	lsls	r2, r3, #24
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	3302      	adds	r3, #2
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	041b      	lsls	r3, r3, #16
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	021b      	lsls	r3, r3, #8
 8005c72:	4313      	orrs	r3, r2
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	7812      	ldrb	r2, [r2, #0]
 8005c78:	4610      	mov	r0, r2
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	6811      	ldr	r1, [r2, #0]
 8005c7e:	ea43 0200 	orr.w	r2, r3, r0
 8005c82:	697b      	ldr	r3, [r7, #20]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	440b      	add	r3, r1
 8005c88:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005c8c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681a      	ldr	r2, [r3, #0]
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	3318      	adds	r3, #24
 8005c96:	011b      	lsls	r3, r3, #4
 8005c98:	4413      	add	r3, r2
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	6811      	ldr	r1, [r2, #0]
 8005ca0:	f043 0201 	orr.w	r2, r3, #1
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	3318      	adds	r3, #24
 8005ca8:	011b      	lsls	r3, r3, #4
 8005caa:	440b      	add	r3, r1
 8005cac:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	e00e      	b.n	8005cd0 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e006      	b.n	8005cd0 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
  }
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3724      	adds	r7, #36	@ 0x24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cda:	4770      	bx	lr

08005cdc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005cdc:	b480      	push	{r7}
 8005cde:	b087      	sub	sp, #28
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	60f8      	str	r0, [r7, #12]
 8005ce4:	60b9      	str	r1, [r7, #8]
 8005ce6:	607a      	str	r2, [r7, #4]
 8005ce8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005cf0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005cf2:	7dfb      	ldrb	r3, [r7, #23]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d003      	beq.n	8005d00 <HAL_CAN_GetRxMessage+0x24>
 8005cf8:	7dfb      	ldrb	r3, [r7, #23]
 8005cfa:	2b02      	cmp	r3, #2
 8005cfc:	f040 8103 	bne.w	8005f06 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d10e      	bne.n	8005d24 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	f003 0303 	and.w	r3, r3, #3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d116      	bne.n	8005d42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d18:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	e0f7      	b.n	8005f14 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	691b      	ldr	r3, [r3, #16]
 8005d2a:	f003 0303 	and.w	r3, r3, #3
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d107      	bne.n	8005d42 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d36:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e0e8      	b.n	8005f14 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681a      	ldr	r2, [r3, #0]
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	331b      	adds	r3, #27
 8005d4a:	011b      	lsls	r3, r3, #4
 8005d4c:	4413      	add	r3, r2
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f003 0204 	and.w	r2, r3, #4
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10c      	bne.n	8005d7a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	331b      	adds	r3, #27
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	4413      	add	r3, r2
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	0d5b      	lsrs	r3, r3, #21
 8005d70:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	601a      	str	r2, [r3, #0]
 8005d78:	e00b      	b.n	8005d92 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	681a      	ldr	r2, [r3, #0]
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	331b      	adds	r3, #27
 8005d82:	011b      	lsls	r3, r3, #4
 8005d84:	4413      	add	r3, r2
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	08db      	lsrs	r3, r3, #3
 8005d8a:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681a      	ldr	r2, [r3, #0]
 8005d96:	68bb      	ldr	r3, [r7, #8]
 8005d98:	331b      	adds	r3, #27
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4413      	add	r3, r2
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	f003 0202 	and.w	r2, r3, #2
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	331b      	adds	r3, #27
 8005db0:	011b      	lsls	r3, r3, #4
 8005db2:	4413      	add	r3, r2
 8005db4:	3304      	adds	r3, #4
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f003 0308 	and.w	r3, r3, #8
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d003      	beq.n	8005dc8 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	2208      	movs	r2, #8
 8005dc4:	611a      	str	r2, [r3, #16]
 8005dc6:	e00b      	b.n	8005de0 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	331b      	adds	r3, #27
 8005dd0:	011b      	lsls	r3, r3, #4
 8005dd2:	4413      	add	r3, r2
 8005dd4:	3304      	adds	r3, #4
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 020f 	and.w	r2, r3, #15
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681a      	ldr	r2, [r3, #0]
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	331b      	adds	r3, #27
 8005de8:	011b      	lsls	r3, r3, #4
 8005dea:	4413      	add	r3, r2
 8005dec:	3304      	adds	r3, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	0a1b      	lsrs	r3, r3, #8
 8005df2:	b2da      	uxtb	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	331b      	adds	r3, #27
 8005e00:	011b      	lsls	r3, r3, #4
 8005e02:	4413      	add	r3, r2
 8005e04:	3304      	adds	r3, #4
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	0c1b      	lsrs	r3, r3, #16
 8005e0a:	b29a      	uxth	r2, r3
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	011b      	lsls	r3, r3, #4
 8005e18:	4413      	add	r3, r2
 8005e1a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	b2da      	uxtb	r2, r3
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681a      	ldr	r2, [r3, #0]
 8005e2a:	68bb      	ldr	r3, [r7, #8]
 8005e2c:	011b      	lsls	r3, r3, #4
 8005e2e:	4413      	add	r3, r2
 8005e30:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	0a1a      	lsrs	r2, r3, #8
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	4413      	add	r3, r2
 8005e4a:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	0c1a      	lsrs	r2, r3, #16
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	3302      	adds	r3, #2
 8005e56:	b2d2      	uxtb	r2, r2
 8005e58:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681a      	ldr	r2, [r3, #0]
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	011b      	lsls	r3, r3, #4
 8005e62:	4413      	add	r3, r2
 8005e64:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	0e1a      	lsrs	r2, r3, #24
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	3303      	adds	r3, #3
 8005e70:	b2d2      	uxtb	r2, r2
 8005e72:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	011b      	lsls	r3, r3, #4
 8005e7c:	4413      	add	r3, r2
 8005e7e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	3304      	adds	r3, #4
 8005e88:	b2d2      	uxtb	r2, r2
 8005e8a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	011b      	lsls	r3, r3, #4
 8005e94:	4413      	add	r3, r2
 8005e96:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	0a1a      	lsrs	r2, r3, #8
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	3305      	adds	r3, #5
 8005ea2:	b2d2      	uxtb	r2, r2
 8005ea4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681a      	ldr	r2, [r3, #0]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	011b      	lsls	r3, r3, #4
 8005eae:	4413      	add	r3, r2
 8005eb0:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	0c1a      	lsrs	r2, r3, #16
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	3306      	adds	r3, #6
 8005ebc:	b2d2      	uxtb	r2, r2
 8005ebe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681a      	ldr	r2, [r3, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	4413      	add	r3, r2
 8005eca:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	0e1a      	lsrs	r2, r3, #24
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	3307      	adds	r3, #7
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d108      	bne.n	8005ef2 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f042 0220 	orr.w	r2, r2, #32
 8005eee:	60da      	str	r2, [r3, #12]
 8005ef0:	e007      	b.n	8005f02 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	691a      	ldr	r2, [r3, #16]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f042 0220 	orr.w	r2, r2, #32
 8005f00:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005f02:	2300      	movs	r3, #0
 8005f04:	e006      	b.n	8005f14 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f0a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
  }
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	371c      	adds	r7, #28
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b085      	sub	sp, #20
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
 8005f28:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005f30:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005f32:	7bfb      	ldrb	r3, [r7, #15]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d002      	beq.n	8005f3e <HAL_CAN_ActivateNotification+0x1e>
 8005f38:	7bfb      	ldrb	r3, [r7, #15]
 8005f3a:	2b02      	cmp	r3, #2
 8005f3c:	d109      	bne.n	8005f52 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6959      	ldr	r1, [r3, #20]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	683a      	ldr	r2, [r7, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	e006      	b.n	8005f60 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f56:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005f5e:	2301      	movs	r3, #1
  }
}
 8005f60:	4618      	mov	r0, r3
 8005f62:	3714      	adds	r7, #20
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	@ 0x28
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005f74:	2300      	movs	r3, #0
 8005f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	695b      	ldr	r3, [r3, #20]
 8005f7e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	685b      	ldr	r3, [r3, #4]
 8005f86:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
 8005f96:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005fa8:	6a3b      	ldr	r3, [r7, #32]
 8005faa:	f003 0301 	and.w	r3, r3, #1
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d07c      	beq.n	80060ac <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005fb2:	69bb      	ldr	r3, [r7, #24]
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d023      	beq.n	8006004 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2201      	movs	r2, #1
 8005fc2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005fc4:	69bb      	ldr	r3, [r7, #24]
 8005fc6:	f003 0302 	and.w	r3, r3, #2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 f983 	bl	80062da <HAL_CAN_TxMailbox0CompleteCallback>
 8005fd4:	e016      	b.n	8006004 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	f003 0304 	and.w	r3, r3, #4
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d004      	beq.n	8005fea <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8005fe6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fe8:	e00c      	b.n	8006004 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005fea:	69bb      	ldr	r3, [r7, #24]
 8005fec:	f003 0308 	and.w	r3, r3, #8
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d004      	beq.n	8005ffe <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005ffa:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffc:	e002      	b.n	8006004 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005ffe:	6878      	ldr	r0, [r7, #4]
 8006000:	f000 f989 	bl	8006316 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800600a:	2b00      	cmp	r3, #0
 800600c:	d024      	beq.n	8006058 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006016:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800601e:	2b00      	cmp	r3, #0
 8006020:	d003      	beq.n	800602a <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 f963 	bl	80062ee <HAL_CAN_TxMailbox1CompleteCallback>
 8006028:	e016      	b.n	8006058 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800602a:	69bb      	ldr	r3, [r7, #24]
 800602c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006030:	2b00      	cmp	r3, #0
 8006032:	d004      	beq.n	800603e <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006036:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800603a:	627b      	str	r3, [r7, #36]	@ 0x24
 800603c:	e00c      	b.n	8006058 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006044:	2b00      	cmp	r3, #0
 8006046:	d004      	beq.n	8006052 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006048:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800604e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006050:	e002      	b.n	8006058 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	f000 f969 	bl	800632a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006058:	69bb      	ldr	r3, [r7, #24]
 800605a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800605e:	2b00      	cmp	r3, #0
 8006060:	d024      	beq.n	80060ac <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800606a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d003      	beq.n	800607e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 f943 	bl	8006302 <HAL_CAN_TxMailbox2CompleteCallback>
 800607c:	e016      	b.n	80060ac <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800607e:	69bb      	ldr	r3, [r7, #24]
 8006080:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006084:	2b00      	cmp	r3, #0
 8006086:	d004      	beq.n	8006092 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800608e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006090:	e00c      	b.n	80060ac <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006098:	2b00      	cmp	r3, #0
 800609a:	d004      	beq.n	80060a6 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800609c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060a4:	e002      	b.n	80060ac <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 f949 	bl	800633e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	f003 0308 	and.w	r3, r3, #8
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d00c      	beq.n	80060d0 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d007      	beq.n	80060d0 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80060c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060c2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	2210      	movs	r2, #16
 80060ce:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f003 0308 	and.w	r3, r3, #8
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d006      	beq.n	80060f2 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2208      	movs	r2, #8
 80060ea:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f000 f930 	bl	8006352 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80060f2:	6a3b      	ldr	r3, [r7, #32]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d009      	beq.n	8006110 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f003 0303 	and.w	r3, r3, #3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d002      	beq.n	8006110 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7fb f9d2 	bl	80014b4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006110:	6a3b      	ldr	r3, [r7, #32]
 8006112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00c      	beq.n	8006134 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f003 0310 	and.w	r3, r3, #16
 8006120:	2b00      	cmp	r3, #0
 8006122:	d007      	beq.n	8006134 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006124:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006126:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800612a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2210      	movs	r2, #16
 8006132:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006134:	6a3b      	ldr	r3, [r7, #32]
 8006136:	f003 0320 	and.w	r3, r3, #32
 800613a:	2b00      	cmp	r3, #0
 800613c:	d00b      	beq.n	8006156 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	f003 0308 	and.w	r3, r3, #8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d006      	beq.n	8006156 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	2208      	movs	r2, #8
 800614e:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f912 	bl	800637a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	d009      	beq.n	8006174 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	f003 0303 	and.w	r3, r3, #3
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8f9 	bl	8006366 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006174:	6a3b      	ldr	r3, [r7, #32]
 8006176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800617a:	2b00      	cmp	r3, #0
 800617c:	d00b      	beq.n	8006196 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	f003 0310 	and.w	r3, r3, #16
 8006184:	2b00      	cmp	r3, #0
 8006186:	d006      	beq.n	8006196 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2210      	movs	r2, #16
 800618e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f000 f8fc 	bl	800638e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800619c:	2b00      	cmp	r3, #0
 800619e:	d00b      	beq.n	80061b8 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	f003 0308 	and.w	r3, r3, #8
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d006      	beq.n	80061b8 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2208      	movs	r2, #8
 80061b0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f8f5 	bl	80063a2 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80061b8:	6a3b      	ldr	r3, [r7, #32]
 80061ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d07b      	beq.n	80062ba <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	f003 0304 	and.w	r3, r3, #4
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d072      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061cc:	6a3b      	ldr	r3, [r7, #32]
 80061ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d008      	beq.n	80061e8 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d003      	beq.n	80061e8 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80061e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061e2:	f043 0301 	orr.w	r3, r3, #1
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80061e8:	6a3b      	ldr	r3, [r7, #32]
 80061ea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d008      	beq.n	8006204 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d003      	beq.n	8006204 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80061fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061fe:	f043 0302 	orr.w	r3, r3, #2
 8006202:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800620a:	2b00      	cmp	r3, #0
 800620c:	d008      	beq.n	8006220 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006214:	2b00      	cmp	r3, #0
 8006216:	d003      	beq.n	8006220 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	f043 0304 	orr.w	r3, r3, #4
 800621e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006220:	6a3b      	ldr	r3, [r7, #32]
 8006222:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006226:	2b00      	cmp	r3, #0
 8006228:	d043      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006230:	2b00      	cmp	r3, #0
 8006232:	d03e      	beq.n	80062b2 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800623a:	2b60      	cmp	r3, #96	@ 0x60
 800623c:	d02b      	beq.n	8006296 <HAL_CAN_IRQHandler+0x32a>
 800623e:	2b60      	cmp	r3, #96	@ 0x60
 8006240:	d82e      	bhi.n	80062a0 <HAL_CAN_IRQHandler+0x334>
 8006242:	2b50      	cmp	r3, #80	@ 0x50
 8006244:	d022      	beq.n	800628c <HAL_CAN_IRQHandler+0x320>
 8006246:	2b50      	cmp	r3, #80	@ 0x50
 8006248:	d82a      	bhi.n	80062a0 <HAL_CAN_IRQHandler+0x334>
 800624a:	2b40      	cmp	r3, #64	@ 0x40
 800624c:	d019      	beq.n	8006282 <HAL_CAN_IRQHandler+0x316>
 800624e:	2b40      	cmp	r3, #64	@ 0x40
 8006250:	d826      	bhi.n	80062a0 <HAL_CAN_IRQHandler+0x334>
 8006252:	2b30      	cmp	r3, #48	@ 0x30
 8006254:	d010      	beq.n	8006278 <HAL_CAN_IRQHandler+0x30c>
 8006256:	2b30      	cmp	r3, #48	@ 0x30
 8006258:	d822      	bhi.n	80062a0 <HAL_CAN_IRQHandler+0x334>
 800625a:	2b10      	cmp	r3, #16
 800625c:	d002      	beq.n	8006264 <HAL_CAN_IRQHandler+0x2f8>
 800625e:	2b20      	cmp	r3, #32
 8006260:	d005      	beq.n	800626e <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006262:	e01d      	b.n	80062a0 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006266:	f043 0308 	orr.w	r3, r3, #8
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800626c:	e019      	b.n	80062a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	f043 0310 	orr.w	r3, r3, #16
 8006274:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006276:	e014      	b.n	80062a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800627a:	f043 0320 	orr.w	r3, r3, #32
 800627e:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006280:	e00f      	b.n	80062a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006284:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006288:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800628a:	e00a      	b.n	80062a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800628c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800628e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006292:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8006294:	e005      	b.n	80062a2 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800629c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800629e:	e000      	b.n	80062a2 <HAL_CAN_IRQHandler+0x336>
            break;
 80062a0:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	699a      	ldr	r2, [r3, #24]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80062b0:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2204      	movs	r2, #4
 80062b8:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80062ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d008      	beq.n	80062d2 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80062c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c6:	431a      	orrs	r2, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f872 	bl	80063b6 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80062d2:	bf00      	nop
 80062d4:	3728      	adds	r7, #40	@ 0x28
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}

080062da <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062da:	b480      	push	{r7}
 80062dc:	b083      	sub	sp, #12
 80062de:	af00      	add	r7, sp, #0
 80062e0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80062e2:	bf00      	nop
 80062e4:	370c      	adds	r7, #12
 80062e6:	46bd      	mov	sp, r7
 80062e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ec:	4770      	bx	lr

080062ee <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80062ee:	b480      	push	{r7}
 80062f0:	b083      	sub	sp, #12
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80062f6:	bf00      	nop
 80062f8:	370c      	adds	r7, #12
 80062fa:	46bd      	mov	sp, r7
 80062fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006300:	4770      	bx	lr

08006302 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800630a:	bf00      	nop
 800630c:	370c      	adds	r7, #12
 800630e:	46bd      	mov	sp, r7
 8006310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006314:	4770      	bx	lr

08006316 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006316:	b480      	push	{r7}
 8006318:	b083      	sub	sp, #12
 800631a:	af00      	add	r7, sp, #0
 800631c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800631e:	bf00      	nop
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800632a:	b480      	push	{r7}
 800632c:	b083      	sub	sp, #12
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006332:	bf00      	nop
 8006334:	370c      	adds	r7, #12
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800633e:	b480      	push	{r7}
 8006340:	b083      	sub	sp, #12
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006346:	bf00      	nop
 8006348:	370c      	adds	r7, #12
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr

08006352 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006352:	b480      	push	{r7}
 8006354:	b083      	sub	sp, #12
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006364:	4770      	bx	lr

08006366 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006366:	b480      	push	{r7}
 8006368:	b083      	sub	sp, #12
 800636a:	af00      	add	r7, sp, #0
 800636c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800637a:	b480      	push	{r7}
 800637c:	b083      	sub	sp, #12
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006382:	bf00      	nop
 8006384:	370c      	adds	r7, #12
 8006386:	46bd      	mov	sp, r7
 8006388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638c:	4770      	bx	lr

0800638e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800638e:	b480      	push	{r7}
 8006390:	b083      	sub	sp, #12
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006396:	bf00      	nop
 8006398:	370c      	adds	r7, #12
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr

080063a2 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80063a2:	b480      	push	{r7}
 80063a4:	b083      	sub	sp, #12
 80063a6:	af00      	add	r7, sp, #0
 80063a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80063aa:	bf00      	nop
 80063ac:	370c      	adds	r7, #12
 80063ae:	46bd      	mov	sp, r7
 80063b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b4:	4770      	bx	lr

080063b6 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80063b6:	b480      	push	{r7}
 80063b8:	b083      	sub	sp, #12
 80063ba:	af00      	add	r7, sp, #0
 80063bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80063be:	bf00      	nop
 80063c0:	370c      	adds	r7, #12
 80063c2:	46bd      	mov	sp, r7
 80063c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c8:	4770      	bx	lr
	...

080063cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b085      	sub	sp, #20
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063dc:	4b0c      	ldr	r3, [pc, #48]	@ (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80063e8:	4013      	ands	r3, r2
 80063ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80063f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80063fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063fe:	4a04      	ldr	r2, [pc, #16]	@ (8006410 <__NVIC_SetPriorityGrouping+0x44>)
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	60d3      	str	r3, [r2, #12]
}
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	e000ed00 	.word	0xe000ed00

08006414 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006414:	b480      	push	{r7}
 8006416:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006418:	4b04      	ldr	r3, [pc, #16]	@ (800642c <__NVIC_GetPriorityGrouping+0x18>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	0a1b      	lsrs	r3, r3, #8
 800641e:	f003 0307 	and.w	r3, r3, #7
}
 8006422:	4618      	mov	r0, r3
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr
 800642c:	e000ed00 	.word	0xe000ed00

08006430 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	4603      	mov	r3, r0
 8006438:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800643a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800643e:	2b00      	cmp	r3, #0
 8006440:	db0b      	blt.n	800645a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006442:	79fb      	ldrb	r3, [r7, #7]
 8006444:	f003 021f 	and.w	r2, r3, #31
 8006448:	4907      	ldr	r1, [pc, #28]	@ (8006468 <__NVIC_EnableIRQ+0x38>)
 800644a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800644e:	095b      	lsrs	r3, r3, #5
 8006450:	2001      	movs	r0, #1
 8006452:	fa00 f202 	lsl.w	r2, r0, r2
 8006456:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	e000e100 	.word	0xe000e100

0800646c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800646c:	b480      	push	{r7}
 800646e:	b083      	sub	sp, #12
 8006470:	af00      	add	r7, sp, #0
 8006472:	4603      	mov	r3, r0
 8006474:	6039      	str	r1, [r7, #0]
 8006476:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800647c:	2b00      	cmp	r3, #0
 800647e:	db0a      	blt.n	8006496 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	b2da      	uxtb	r2, r3
 8006484:	490c      	ldr	r1, [pc, #48]	@ (80064b8 <__NVIC_SetPriority+0x4c>)
 8006486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800648a:	0112      	lsls	r2, r2, #4
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	440b      	add	r3, r1
 8006490:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006494:	e00a      	b.n	80064ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	b2da      	uxtb	r2, r3
 800649a:	4908      	ldr	r1, [pc, #32]	@ (80064bc <__NVIC_SetPriority+0x50>)
 800649c:	79fb      	ldrb	r3, [r7, #7]
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	3b04      	subs	r3, #4
 80064a4:	0112      	lsls	r2, r2, #4
 80064a6:	b2d2      	uxtb	r2, r2
 80064a8:	440b      	add	r3, r1
 80064aa:	761a      	strb	r2, [r3, #24]
}
 80064ac:	bf00      	nop
 80064ae:	370c      	adds	r7, #12
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr
 80064b8:	e000e100 	.word	0xe000e100
 80064bc:	e000ed00 	.word	0xe000ed00

080064c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b089      	sub	sp, #36	@ 0x24
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	60f8      	str	r0, [r7, #12]
 80064c8:	60b9      	str	r1, [r7, #8]
 80064ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	f1c3 0307 	rsb	r3, r3, #7
 80064da:	2b04      	cmp	r3, #4
 80064dc:	bf28      	it	cs
 80064de:	2304      	movcs	r3, #4
 80064e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064e2:	69fb      	ldr	r3, [r7, #28]
 80064e4:	3304      	adds	r3, #4
 80064e6:	2b06      	cmp	r3, #6
 80064e8:	d902      	bls.n	80064f0 <NVIC_EncodePriority+0x30>
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	3b03      	subs	r3, #3
 80064ee:	e000      	b.n	80064f2 <NVIC_EncodePriority+0x32>
 80064f0:	2300      	movs	r3, #0
 80064f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	fa02 f303 	lsl.w	r3, r2, r3
 80064fe:	43da      	mvns	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	401a      	ands	r2, r3
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006508:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	fa01 f303 	lsl.w	r3, r1, r3
 8006512:	43d9      	mvns	r1, r3
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006518:	4313      	orrs	r3, r2
         );
}
 800651a:	4618      	mov	r0, r3
 800651c:	3724      	adds	r7, #36	@ 0x24
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3b01      	subs	r3, #1
 8006534:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006538:	d301      	bcc.n	800653e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800653a:	2301      	movs	r3, #1
 800653c:	e00f      	b.n	800655e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800653e:	4a0a      	ldr	r2, [pc, #40]	@ (8006568 <SysTick_Config+0x40>)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	3b01      	subs	r3, #1
 8006544:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006546:	210f      	movs	r1, #15
 8006548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800654c:	f7ff ff8e 	bl	800646c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006550:	4b05      	ldr	r3, [pc, #20]	@ (8006568 <SysTick_Config+0x40>)
 8006552:	2200      	movs	r2, #0
 8006554:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006556:	4b04      	ldr	r3, [pc, #16]	@ (8006568 <SysTick_Config+0x40>)
 8006558:	2207      	movs	r2, #7
 800655a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800655c:	2300      	movs	r3, #0
}
 800655e:	4618      	mov	r0, r3
 8006560:	3708      	adds	r7, #8
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	e000e010 	.word	0xe000e010

0800656c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f7ff ff29 	bl	80063cc <__NVIC_SetPriorityGrouping>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006582:	b580      	push	{r7, lr}
 8006584:	b086      	sub	sp, #24
 8006586:	af00      	add	r7, sp, #0
 8006588:	4603      	mov	r3, r0
 800658a:	60b9      	str	r1, [r7, #8]
 800658c:	607a      	str	r2, [r7, #4]
 800658e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006590:	2300      	movs	r3, #0
 8006592:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006594:	f7ff ff3e 	bl	8006414 <__NVIC_GetPriorityGrouping>
 8006598:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	68b9      	ldr	r1, [r7, #8]
 800659e:	6978      	ldr	r0, [r7, #20]
 80065a0:	f7ff ff8e 	bl	80064c0 <NVIC_EncodePriority>
 80065a4:	4602      	mov	r2, r0
 80065a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80065aa:	4611      	mov	r1, r2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7ff ff5d 	bl	800646c <__NVIC_SetPriority>
}
 80065b2:	bf00      	nop
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b082      	sub	sp, #8
 80065be:	af00      	add	r7, sp, #0
 80065c0:	4603      	mov	r3, r0
 80065c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f7ff ff31 	bl	8006430 <__NVIC_EnableIRQ>
}
 80065ce:	bf00      	nop
 80065d0:	3708      	adds	r7, #8
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}

080065d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065d6:	b580      	push	{r7, lr}
 80065d8:	b082      	sub	sp, #8
 80065da:	af00      	add	r7, sp, #0
 80065dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065de:	6878      	ldr	r0, [r7, #4]
 80065e0:	f7ff ffa2 	bl	8006528 <SysTick_Config>
 80065e4:	4603      	mov	r3, r0
}
 80065e6:	4618      	mov	r0, r3
 80065e8:	3708      	adds	r7, #8
 80065ea:	46bd      	mov	sp, r7
 80065ec:	bd80      	pop	{r7, pc}
	...

080065f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80065f0:	b580      	push	{r7, lr}
 80065f2:	b086      	sub	sp, #24
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80065fc:	f7ff f874 	bl	80056e8 <HAL_GetTick>
 8006600:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e099      	b.n	8006740 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2202      	movs	r2, #2
 8006610:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2200      	movs	r2, #0
 8006618:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0201 	bic.w	r2, r2, #1
 800662a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800662c:	e00f      	b.n	800664e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800662e:	f7ff f85b 	bl	80056e8 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b05      	cmp	r3, #5
 800663a:	d908      	bls.n	800664e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2203      	movs	r2, #3
 8006646:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800664a:	2303      	movs	r3, #3
 800664c:	e078      	b.n	8006740 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f003 0301 	and.w	r3, r3, #1
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e8      	bne.n	800662e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	4b38      	ldr	r3, [pc, #224]	@ (8006748 <HAL_DMA_Init+0x158>)
 8006668:	4013      	ands	r3, r2
 800666a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685a      	ldr	r2, [r3, #4]
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800667a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006686:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	699b      	ldr	r3, [r3, #24]
 800668c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006692:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a1b      	ldr	r3, [r3, #32]
 8006698:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800669a:	697a      	ldr	r2, [r7, #20]
 800669c:	4313      	orrs	r3, r2
 800669e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066a4:	2b04      	cmp	r3, #4
 80066a6:	d107      	bne.n	80066b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80066b0:	4313      	orrs	r3, r2
 80066b2:	697a      	ldr	r2, [r7, #20]
 80066b4:	4313      	orrs	r3, r2
 80066b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	695b      	ldr	r3, [r3, #20]
 80066c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	f023 0307 	bic.w	r3, r3, #7
 80066ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	697a      	ldr	r2, [r7, #20]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066de:	2b04      	cmp	r3, #4
 80066e0:	d117      	bne.n	8006712 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d00e      	beq.n	8006712 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fb01 	bl	8006cfc <DMA_CheckFifoParam>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d008      	beq.n	8006712 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2240      	movs	r2, #64	@ 0x40
 8006704:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2201      	movs	r2, #1
 800670a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800670e:	2301      	movs	r3, #1
 8006710:	e016      	b.n	8006740 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800671a:	6878      	ldr	r0, [r7, #4]
 800671c:	f000 fab8 	bl	8006c90 <DMA_CalcBaseAndBitshift>
 8006720:	4603      	mov	r3, r0
 8006722:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006728:	223f      	movs	r2, #63	@ 0x3f
 800672a:	409a      	lsls	r2, r3
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3718      	adds	r7, #24
 8006744:	46bd      	mov	sp, r7
 8006746:	bd80      	pop	{r7, pc}
 8006748:	f010803f 	.word	0xf010803f

0800674c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b086      	sub	sp, #24
 8006750:	af00      	add	r7, sp, #0
 8006752:	60f8      	str	r0, [r7, #12]
 8006754:	60b9      	str	r1, [r7, #8]
 8006756:	607a      	str	r2, [r7, #4]
 8006758:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006762:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800676a:	2b01      	cmp	r3, #1
 800676c:	d101      	bne.n	8006772 <HAL_DMA_Start_IT+0x26>
 800676e:	2302      	movs	r3, #2
 8006770:	e040      	b.n	80067f4 <HAL_DMA_Start_IT+0xa8>
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2201      	movs	r2, #1
 8006776:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006780:	b2db      	uxtb	r3, r3
 8006782:	2b01      	cmp	r3, #1
 8006784:	d12f      	bne.n	80067e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2202      	movs	r2, #2
 800678a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	68b9      	ldr	r1, [r7, #8]
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f000 fa4a 	bl	8006c34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80067a4:	223f      	movs	r2, #63	@ 0x3f
 80067a6:	409a      	lsls	r2, r3
 80067a8:	693b      	ldr	r3, [r7, #16]
 80067aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f042 0216 	orr.w	r2, r2, #22
 80067ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d007      	beq.n	80067d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	681a      	ldr	r2, [r3, #0]
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f042 0208 	orr.w	r2, r2, #8
 80067d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	681a      	ldr	r2, [r3, #0]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f042 0201 	orr.w	r2, r2, #1
 80067e2:	601a      	str	r2, [r3, #0]
 80067e4:	e005      	b.n	80067f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	2200      	movs	r2, #0
 80067ea:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80067ee:	2302      	movs	r3, #2
 80067f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80067f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80067f4:	4618      	mov	r0, r3
 80067f6:	3718      	adds	r7, #24
 80067f8:	46bd      	mov	sp, r7
 80067fa:	bd80      	pop	{r7, pc}

080067fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006808:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800680a:	f7fe ff6d 	bl	80056e8 <HAL_GetTick>
 800680e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006816:	b2db      	uxtb	r3, r3
 8006818:	2b02      	cmp	r3, #2
 800681a:	d008      	beq.n	800682e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2280      	movs	r2, #128	@ 0x80
 8006820:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800682a:	2301      	movs	r3, #1
 800682c:	e052      	b.n	80068d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	681a      	ldr	r2, [r3, #0]
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	f022 0216 	bic.w	r2, r2, #22
 800683c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	695a      	ldr	r2, [r3, #20]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800684c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	2b00      	cmp	r3, #0
 8006854:	d103      	bne.n	800685e <HAL_DMA_Abort+0x62>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800685a:	2b00      	cmp	r3, #0
 800685c:	d007      	beq.n	800686e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f022 0208 	bic.w	r2, r2, #8
 800686c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800687e:	e013      	b.n	80068a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006880:	f7fe ff32 	bl	80056e8 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b05      	cmp	r3, #5
 800688c:	d90c      	bls.n	80068a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2220      	movs	r2, #32
 8006892:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2203      	movs	r2, #3
 8006898:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	2200      	movs	r2, #0
 80068a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80068a4:	2303      	movs	r3, #3
 80068a6:	e015      	b.n	80068d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f003 0301 	and.w	r3, r3, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e4      	bne.n	8006880 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80068ba:	223f      	movs	r2, #63	@ 0x3f
 80068bc:	409a      	lsls	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2201      	movs	r2, #1
 80068c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d004      	beq.n	80068fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2280      	movs	r2, #128	@ 0x80
 80068f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e00c      	b.n	8006914 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2205      	movs	r2, #5
 80068fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006928:	2300      	movs	r3, #0
 800692a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800692c:	4b8e      	ldr	r3, [pc, #568]	@ (8006b68 <HAL_DMA_IRQHandler+0x248>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	4a8e      	ldr	r2, [pc, #568]	@ (8006b6c <HAL_DMA_IRQHandler+0x24c>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	0a9b      	lsrs	r3, r3, #10
 8006938:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800693e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8006940:	693b      	ldr	r3, [r7, #16]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800694a:	2208      	movs	r2, #8
 800694c:	409a      	lsls	r2, r3
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	4013      	ands	r3, r2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d01a      	beq.n	800698c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d013      	beq.n	800698c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	681a      	ldr	r2, [r3, #0]
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f022 0204 	bic.w	r2, r2, #4
 8006972:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006978:	2208      	movs	r2, #8
 800697a:	409a      	lsls	r2, r3
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006984:	f043 0201 	orr.w	r2, r3, #1
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006990:	2201      	movs	r2, #1
 8006992:	409a      	lsls	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	4013      	ands	r3, r2
 8006998:	2b00      	cmp	r3, #0
 800699a:	d012      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069ae:	2201      	movs	r2, #1
 80069b0:	409a      	lsls	r2, r3
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ba:	f043 0202 	orr.w	r2, r3, #2
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069c6:	2204      	movs	r2, #4
 80069c8:	409a      	lsls	r2, r3
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	4013      	ands	r3, r2
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d012      	beq.n	80069f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f003 0302 	and.w	r3, r3, #2
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d00b      	beq.n	80069f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069e4:	2204      	movs	r2, #4
 80069e6:	409a      	lsls	r2, r3
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069f0:	f043 0204 	orr.w	r2, r3, #4
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069fc:	2210      	movs	r2, #16
 80069fe:	409a      	lsls	r2, r3
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d043      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d03c      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a1a:	2210      	movs	r2, #16
 8006a1c:	409a      	lsls	r2, r3
 8006a1e:	693b      	ldr	r3, [r7, #16]
 8006a20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d018      	beq.n	8006a62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d108      	bne.n	8006a50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d024      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	4798      	blx	r3
 8006a4e:	e01f      	b.n	8006a90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d01b      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006a5c:	6878      	ldr	r0, [r7, #4]
 8006a5e:	4798      	blx	r3
 8006a60:	e016      	b.n	8006a90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d107      	bne.n	8006a80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f022 0208 	bic.w	r2, r2, #8
 8006a7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d003      	beq.n	8006a90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006a94:	2220      	movs	r2, #32
 8006a96:	409a      	lsls	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	f000 808f 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0310 	and.w	r3, r3, #16
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	f000 8087 	beq.w	8006bc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006ab6:	2220      	movs	r2, #32
 8006ab8:	409a      	lsls	r2, r3
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d136      	bne.n	8006b38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f022 0216 	bic.w	r2, r2, #22
 8006ad8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	695a      	ldr	r2, [r3, #20]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ae8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d103      	bne.n	8006afa <HAL_DMA_IRQHandler+0x1da>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d007      	beq.n	8006b0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	681a      	ldr	r2, [r3, #0]
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f022 0208 	bic.w	r2, r2, #8
 8006b08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006b0e:	223f      	movs	r2, #63	@ 0x3f
 8006b10:	409a      	lsls	r2, r3
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d07e      	beq.n	8006c2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	4798      	blx	r3
        }
        return;
 8006b36:	e079      	b.n	8006c2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d01d      	beq.n	8006b82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10d      	bne.n	8006b70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d031      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	4798      	blx	r3
 8006b64:	e02c      	b.n	8006bc0 <HAL_DMA_IRQHandler+0x2a0>
 8006b66:	bf00      	nop
 8006b68:	2000002c 	.word	0x2000002c
 8006b6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d023      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006b7c:	6878      	ldr	r0, [r7, #4]
 8006b7e:	4798      	blx	r3
 8006b80:	e01e      	b.n	8006bc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d10f      	bne.n	8006bb0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	681a      	ldr	r2, [r3, #0]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f022 0210 	bic.w	r2, r2, #16
 8006b9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d032      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006bcc:	f003 0301 	and.w	r3, r3, #1
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d022      	beq.n	8006c1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f022 0201 	bic.w	r2, r2, #1
 8006bea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	3301      	adds	r3, #1
 8006bf0:	60bb      	str	r3, [r7, #8]
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	429a      	cmp	r2, r3
 8006bf6:	d307      	bcc.n	8006c08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 0301 	and.w	r3, r3, #1
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1f2      	bne.n	8006bec <HAL_DMA_IRQHandler+0x2cc>
 8006c06:	e000      	b.n	8006c0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006c08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	2201      	movs	r2, #1
 8006c0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d005      	beq.n	8006c2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	4798      	blx	r3
 8006c2a:	e000      	b.n	8006c2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8006c2c:	bf00      	nop
    }
  }
}
 8006c2e:	3718      	adds	r7, #24
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b085      	sub	sp, #20
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	607a      	str	r2, [r7, #4]
 8006c40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006c50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	683a      	ldr	r2, [r7, #0]
 8006c58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	2b40      	cmp	r3, #64	@ 0x40
 8006c60:	d108      	bne.n	8006c74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	68ba      	ldr	r2, [r7, #8]
 8006c70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006c72:	e007      	b.n	8006c84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	687a      	ldr	r2, [r7, #4]
 8006c82:	60da      	str	r2, [r3, #12]
}
 8006c84:	bf00      	nop
 8006c86:	3714      	adds	r7, #20
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8e:	4770      	bx	lr

08006c90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b085      	sub	sp, #20
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	b2db      	uxtb	r3, r3
 8006c9e:	3b10      	subs	r3, #16
 8006ca0:	4a14      	ldr	r2, [pc, #80]	@ (8006cf4 <DMA_CalcBaseAndBitshift+0x64>)
 8006ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ca6:	091b      	lsrs	r3, r3, #4
 8006ca8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006caa:	4a13      	ldr	r2, [pc, #76]	@ (8006cf8 <DMA_CalcBaseAndBitshift+0x68>)
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	461a      	mov	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2b03      	cmp	r3, #3
 8006cbc:	d909      	bls.n	8006cd2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006cc6:	f023 0303 	bic.w	r3, r3, #3
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	659a      	str	r2, [r3, #88]	@ 0x58
 8006cd0:	e007      	b.n	8006ce2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8006cda:	f023 0303 	bic.w	r3, r3, #3
 8006cde:	687a      	ldr	r2, [r7, #4]
 8006ce0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3714      	adds	r7, #20
 8006cea:	46bd      	mov	sp, r7
 8006cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf0:	4770      	bx	lr
 8006cf2:	bf00      	nop
 8006cf4:	aaaaaaab 	.word	0xaaaaaaab
 8006cf8:	0800e064 	.word	0x0800e064

08006cfc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d04:	2300      	movs	r3, #0
 8006d06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	699b      	ldr	r3, [r3, #24]
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d11f      	bne.n	8006d56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	2b03      	cmp	r3, #3
 8006d1a:	d856      	bhi.n	8006dca <DMA_CheckFifoParam+0xce>
 8006d1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006d24 <DMA_CheckFifoParam+0x28>)
 8006d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d22:	bf00      	nop
 8006d24:	08006d35 	.word	0x08006d35
 8006d28:	08006d47 	.word	0x08006d47
 8006d2c:	08006d35 	.word	0x08006d35
 8006d30:	08006dcb 	.word	0x08006dcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d3c:	2b00      	cmp	r3, #0
 8006d3e:	d046      	beq.n	8006dce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d44:	e043      	b.n	8006dce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d4e:	d140      	bne.n	8006dd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006d50:	2301      	movs	r3, #1
 8006d52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d54:	e03d      	b.n	8006dd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006d5e:	d121      	bne.n	8006da4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b03      	cmp	r3, #3
 8006d64:	d837      	bhi.n	8006dd6 <DMA_CheckFifoParam+0xda>
 8006d66:	a201      	add	r2, pc, #4	@ (adr r2, 8006d6c <DMA_CheckFifoParam+0x70>)
 8006d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d6c:	08006d7d 	.word	0x08006d7d
 8006d70:	08006d83 	.word	0x08006d83
 8006d74:	08006d7d 	.word	0x08006d7d
 8006d78:	08006d95 	.word	0x08006d95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d80:	e030      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d86:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d025      	beq.n	8006dda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006d8e:	2301      	movs	r3, #1
 8006d90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006d92:	e022      	b.n	8006dda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d98:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8006d9c:	d11f      	bne.n	8006dde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006da2:	e01c      	b.n	8006dde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006da4:	68bb      	ldr	r3, [r7, #8]
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d903      	bls.n	8006db2 <DMA_CheckFifoParam+0xb6>
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	2b03      	cmp	r3, #3
 8006dae:	d003      	beq.n	8006db8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006db0:	e018      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	73fb      	strb	r3, [r7, #15]
      break;
 8006db6:	e015      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00e      	beq.n	8006de2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006dc4:	2301      	movs	r3, #1
 8006dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8006dc8:	e00b      	b.n	8006de2 <DMA_CheckFifoParam+0xe6>
      break;
 8006dca:	bf00      	nop
 8006dcc:	e00a      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dce:	bf00      	nop
 8006dd0:	e008      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dd2:	bf00      	nop
 8006dd4:	e006      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dd6:	bf00      	nop
 8006dd8:	e004      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      break;
 8006dda:	bf00      	nop
 8006ddc:	e002      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      break;   
 8006dde:	bf00      	nop
 8006de0:	e000      	b.n	8006de4 <DMA_CheckFifoParam+0xe8>
      break;
 8006de2:	bf00      	nop
    }
  } 
  
  return status; 
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006de6:	4618      	mov	r0, r3
 8006de8:	3714      	adds	r7, #20
 8006dea:	46bd      	mov	sp, r7
 8006dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df0:	4770      	bx	lr
 8006df2:	bf00      	nop

08006df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006df4:	b480      	push	{r7}
 8006df6:	b089      	sub	sp, #36	@ 0x24
 8006df8:	af00      	add	r7, sp, #0
 8006dfa:	6078      	str	r0, [r7, #4]
 8006dfc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006e02:	2300      	movs	r3, #0
 8006e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006e06:	2300      	movs	r3, #0
 8006e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	e16b      	b.n	80070e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006e10:	2201      	movs	r2, #1
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	fa02 f303 	lsl.w	r3, r2, r3
 8006e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e1a:	683b      	ldr	r3, [r7, #0]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4013      	ands	r3, r2
 8006e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e24:	693a      	ldr	r2, [r7, #16]
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	429a      	cmp	r2, r3
 8006e2a:	f040 815a 	bne.w	80070e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f003 0303 	and.w	r3, r3, #3
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d005      	beq.n	8006e46 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006e42:	2b02      	cmp	r3, #2
 8006e44:	d130      	bne.n	8006ea8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	689b      	ldr	r3, [r3, #8]
 8006e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006e4c:	69fb      	ldr	r3, [r7, #28]
 8006e4e:	005b      	lsls	r3, r3, #1
 8006e50:	2203      	movs	r2, #3
 8006e52:	fa02 f303 	lsl.w	r3, r2, r3
 8006e56:	43db      	mvns	r3, r3
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006e5e:	683b      	ldr	r3, [r7, #0]
 8006e60:	68da      	ldr	r2, [r3, #12]
 8006e62:	69fb      	ldr	r3, [r7, #28]
 8006e64:	005b      	lsls	r3, r3, #1
 8006e66:	fa02 f303 	lsl.w	r3, r2, r3
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	69ba      	ldr	r2, [r7, #24]
 8006e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006e7c:	2201      	movs	r2, #1
 8006e7e:	69fb      	ldr	r3, [r7, #28]
 8006e80:	fa02 f303 	lsl.w	r3, r2, r3
 8006e84:	43db      	mvns	r3, r3
 8006e86:	69ba      	ldr	r2, [r7, #24]
 8006e88:	4013      	ands	r3, r2
 8006e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	091b      	lsrs	r3, r3, #4
 8006e92:	f003 0201 	and.w	r2, r3, #1
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9c:	69ba      	ldr	r2, [r7, #24]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	f003 0303 	and.w	r3, r3, #3
 8006eb0:	2b03      	cmp	r3, #3
 8006eb2:	d017      	beq.n	8006ee4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	68db      	ldr	r3, [r3, #12]
 8006eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006eba:	69fb      	ldr	r3, [r7, #28]
 8006ebc:	005b      	lsls	r3, r3, #1
 8006ebe:	2203      	movs	r2, #3
 8006ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ec4:	43db      	mvns	r3, r3
 8006ec6:	69ba      	ldr	r2, [r7, #24]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	689a      	ldr	r2, [r3, #8]
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	4313      	orrs	r3, r2
 8006edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69ba      	ldr	r2, [r7, #24]
 8006ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	f003 0303 	and.w	r3, r3, #3
 8006eec:	2b02      	cmp	r3, #2
 8006eee:	d123      	bne.n	8006f38 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006ef0:	69fb      	ldr	r3, [r7, #28]
 8006ef2:	08da      	lsrs	r2, r3, #3
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	3208      	adds	r2, #8
 8006ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006efc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006efe:	69fb      	ldr	r3, [r7, #28]
 8006f00:	f003 0307 	and.w	r3, r3, #7
 8006f04:	009b      	lsls	r3, r3, #2
 8006f06:	220f      	movs	r2, #15
 8006f08:	fa02 f303 	lsl.w	r3, r2, r3
 8006f0c:	43db      	mvns	r3, r3
 8006f0e:	69ba      	ldr	r2, [r7, #24]
 8006f10:	4013      	ands	r3, r2
 8006f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	691a      	ldr	r2, [r3, #16]
 8006f18:	69fb      	ldr	r3, [r7, #28]
 8006f1a:	f003 0307 	and.w	r3, r3, #7
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	fa02 f303 	lsl.w	r3, r2, r3
 8006f24:	69ba      	ldr	r2, [r7, #24]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	08da      	lsrs	r2, r3, #3
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	3208      	adds	r2, #8
 8006f32:	69b9      	ldr	r1, [r7, #24]
 8006f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006f3e:	69fb      	ldr	r3, [r7, #28]
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	2203      	movs	r2, #3
 8006f44:	fa02 f303 	lsl.w	r3, r2, r3
 8006f48:	43db      	mvns	r3, r3
 8006f4a:	69ba      	ldr	r2, [r7, #24]
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f003 0203 	and.w	r2, r3, #3
 8006f58:	69fb      	ldr	r3, [r7, #28]
 8006f5a:	005b      	lsls	r3, r3, #1
 8006f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f60:	69ba      	ldr	r2, [r7, #24]
 8006f62:	4313      	orrs	r3, r2
 8006f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	69ba      	ldr	r2, [r7, #24]
 8006f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	685b      	ldr	r3, [r3, #4]
 8006f70:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 80b4 	beq.w	80070e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	60fb      	str	r3, [r7, #12]
 8006f7e:	4b60      	ldr	r3, [pc, #384]	@ (8007100 <HAL_GPIO_Init+0x30c>)
 8006f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f82:	4a5f      	ldr	r2, [pc, #380]	@ (8007100 <HAL_GPIO_Init+0x30c>)
 8006f84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006f88:	6453      	str	r3, [r2, #68]	@ 0x44
 8006f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8007100 <HAL_GPIO_Init+0x30c>)
 8006f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006f8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006f92:	60fb      	str	r3, [r7, #12]
 8006f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006f96:	4a5b      	ldr	r2, [pc, #364]	@ (8007104 <HAL_GPIO_Init+0x310>)
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	089b      	lsrs	r3, r3, #2
 8006f9c:	3302      	adds	r3, #2
 8006f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0303 	and.w	r3, r3, #3
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	220f      	movs	r2, #15
 8006fae:	fa02 f303 	lsl.w	r3, r2, r3
 8006fb2:	43db      	mvns	r3, r3
 8006fb4:	69ba      	ldr	r2, [r7, #24]
 8006fb6:	4013      	ands	r3, r2
 8006fb8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	4a52      	ldr	r2, [pc, #328]	@ (8007108 <HAL_GPIO_Init+0x314>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d02b      	beq.n	800701a <HAL_GPIO_Init+0x226>
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	4a51      	ldr	r2, [pc, #324]	@ (800710c <HAL_GPIO_Init+0x318>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d025      	beq.n	8007016 <HAL_GPIO_Init+0x222>
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	4a50      	ldr	r2, [pc, #320]	@ (8007110 <HAL_GPIO_Init+0x31c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d01f      	beq.n	8007012 <HAL_GPIO_Init+0x21e>
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	4a4f      	ldr	r2, [pc, #316]	@ (8007114 <HAL_GPIO_Init+0x320>)
 8006fd6:	4293      	cmp	r3, r2
 8006fd8:	d019      	beq.n	800700e <HAL_GPIO_Init+0x21a>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	4a4e      	ldr	r2, [pc, #312]	@ (8007118 <HAL_GPIO_Init+0x324>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d013      	beq.n	800700a <HAL_GPIO_Init+0x216>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a4d      	ldr	r2, [pc, #308]	@ (800711c <HAL_GPIO_Init+0x328>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d00d      	beq.n	8007006 <HAL_GPIO_Init+0x212>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a4c      	ldr	r2, [pc, #304]	@ (8007120 <HAL_GPIO_Init+0x32c>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d007      	beq.n	8007002 <HAL_GPIO_Init+0x20e>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a4b      	ldr	r2, [pc, #300]	@ (8007124 <HAL_GPIO_Init+0x330>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d101      	bne.n	8006ffe <HAL_GPIO_Init+0x20a>
 8006ffa:	2307      	movs	r3, #7
 8006ffc:	e00e      	b.n	800701c <HAL_GPIO_Init+0x228>
 8006ffe:	2308      	movs	r3, #8
 8007000:	e00c      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007002:	2306      	movs	r3, #6
 8007004:	e00a      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007006:	2305      	movs	r3, #5
 8007008:	e008      	b.n	800701c <HAL_GPIO_Init+0x228>
 800700a:	2304      	movs	r3, #4
 800700c:	e006      	b.n	800701c <HAL_GPIO_Init+0x228>
 800700e:	2303      	movs	r3, #3
 8007010:	e004      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007012:	2302      	movs	r3, #2
 8007014:	e002      	b.n	800701c <HAL_GPIO_Init+0x228>
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <HAL_GPIO_Init+0x228>
 800701a:	2300      	movs	r3, #0
 800701c:	69fa      	ldr	r2, [r7, #28]
 800701e:	f002 0203 	and.w	r2, r2, #3
 8007022:	0092      	lsls	r2, r2, #2
 8007024:	4093      	lsls	r3, r2
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	4313      	orrs	r3, r2
 800702a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800702c:	4935      	ldr	r1, [pc, #212]	@ (8007104 <HAL_GPIO_Init+0x310>)
 800702e:	69fb      	ldr	r3, [r7, #28]
 8007030:	089b      	lsrs	r3, r3, #2
 8007032:	3302      	adds	r3, #2
 8007034:	69ba      	ldr	r2, [r7, #24]
 8007036:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800703a:	4b3b      	ldr	r3, [pc, #236]	@ (8007128 <HAL_GPIO_Init+0x334>)
 800703c:	689b      	ldr	r3, [r3, #8]
 800703e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	43db      	mvns	r3, r3
 8007044:	69ba      	ldr	r2, [r7, #24]
 8007046:	4013      	ands	r3, r2
 8007048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	685b      	ldr	r3, [r3, #4]
 800704e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007056:	69ba      	ldr	r2, [r7, #24]
 8007058:	693b      	ldr	r3, [r7, #16]
 800705a:	4313      	orrs	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800705e:	4a32      	ldr	r2, [pc, #200]	@ (8007128 <HAL_GPIO_Init+0x334>)
 8007060:	69bb      	ldr	r3, [r7, #24]
 8007062:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007064:	4b30      	ldr	r3, [pc, #192]	@ (8007128 <HAL_GPIO_Init+0x334>)
 8007066:	68db      	ldr	r3, [r3, #12]
 8007068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800707c:	2b00      	cmp	r3, #0
 800707e:	d003      	beq.n	8007088 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	4313      	orrs	r3, r2
 8007086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007088:	4a27      	ldr	r2, [pc, #156]	@ (8007128 <HAL_GPIO_Init+0x334>)
 800708a:	69bb      	ldr	r3, [r7, #24]
 800708c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800708e:	4b26      	ldr	r3, [pc, #152]	@ (8007128 <HAL_GPIO_Init+0x334>)
 8007090:	685b      	ldr	r3, [r3, #4]
 8007092:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	43db      	mvns	r3, r3
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	4013      	ands	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d003      	beq.n	80070b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80070aa:	69ba      	ldr	r2, [r7, #24]
 80070ac:	693b      	ldr	r3, [r7, #16]
 80070ae:	4313      	orrs	r3, r2
 80070b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070b2:	4a1d      	ldr	r2, [pc, #116]	@ (8007128 <HAL_GPIO_Init+0x334>)
 80070b4:	69bb      	ldr	r3, [r7, #24]
 80070b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80070b8:	4b1b      	ldr	r3, [pc, #108]	@ (8007128 <HAL_GPIO_Init+0x334>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	43db      	mvns	r3, r3
 80070c2:	69ba      	ldr	r2, [r7, #24]
 80070c4:	4013      	ands	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d003      	beq.n	80070dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80070d4:	69ba      	ldr	r2, [r7, #24]
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	4313      	orrs	r3, r2
 80070da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80070dc:	4a12      	ldr	r2, [pc, #72]	@ (8007128 <HAL_GPIO_Init+0x334>)
 80070de:	69bb      	ldr	r3, [r7, #24]
 80070e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80070e2:	69fb      	ldr	r3, [r7, #28]
 80070e4:	3301      	adds	r3, #1
 80070e6:	61fb      	str	r3, [r7, #28]
 80070e8:	69fb      	ldr	r3, [r7, #28]
 80070ea:	2b0f      	cmp	r3, #15
 80070ec:	f67f ae90 	bls.w	8006e10 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80070f0:	bf00      	nop
 80070f2:	bf00      	nop
 80070f4:	3724      	adds	r7, #36	@ 0x24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr
 80070fe:	bf00      	nop
 8007100:	40023800 	.word	0x40023800
 8007104:	40013800 	.word	0x40013800
 8007108:	40020000 	.word	0x40020000
 800710c:	40020400 	.word	0x40020400
 8007110:	40020800 	.word	0x40020800
 8007114:	40020c00 	.word	0x40020c00
 8007118:	40021000 	.word	0x40021000
 800711c:	40021400 	.word	0x40021400
 8007120:	40021800 	.word	0x40021800
 8007124:	40021c00 	.word	0x40021c00
 8007128:	40013c00 	.word	0x40013c00

0800712c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800712c:	b480      	push	{r7}
 800712e:	b085      	sub	sp, #20
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
 8007134:	460b      	mov	r3, r1
 8007136:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691a      	ldr	r2, [r3, #16]
 800713c:	887b      	ldrh	r3, [r7, #2]
 800713e:	4013      	ands	r3, r2
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007144:	2301      	movs	r3, #1
 8007146:	73fb      	strb	r3, [r7, #15]
 8007148:	e001      	b.n	800714e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800714a:	2300      	movs	r3, #0
 800714c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800714e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007150:	4618      	mov	r0, r3
 8007152:	3714      	adds	r7, #20
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr

0800715c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	460b      	mov	r3, r1
 8007166:	807b      	strh	r3, [r7, #2]
 8007168:	4613      	mov	r3, r2
 800716a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800716c:	787b      	ldrb	r3, [r7, #1]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d003      	beq.n	800717a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007172:	887a      	ldrh	r2, [r7, #2]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007178:	e003      	b.n	8007182 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800717a:	887b      	ldrh	r3, [r7, #2]
 800717c:	041a      	lsls	r2, r3, #16
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	619a      	str	r2, [r3, #24]
}
 8007182:	bf00      	nop
 8007184:	370c      	adds	r7, #12
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr
	...

08007190 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800719a:	4b08      	ldr	r3, [pc, #32]	@ (80071bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800719c:	695a      	ldr	r2, [r3, #20]
 800719e:	88fb      	ldrh	r3, [r7, #6]
 80071a0:	4013      	ands	r3, r2
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d006      	beq.n	80071b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80071a6:	4a05      	ldr	r2, [pc, #20]	@ (80071bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80071ac:	88fb      	ldrh	r3, [r7, #6]
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7fc fb70 	bl	8003894 <HAL_GPIO_EXTI_Callback>
  }
}
 80071b4:	bf00      	nop
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}
 80071bc:	40013c00 	.word	0x40013c00

080071c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b084      	sub	sp, #16
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d101      	bne.n	80071d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80071ce:	2301      	movs	r3, #1
 80071d0:	e12b      	b.n	800742a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80071d8:	b2db      	uxtb	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d106      	bne.n	80071ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f7fd fd50 	bl	8004c8c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2224      	movs	r2, #36	@ 0x24
 80071f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f022 0201 	bic.w	r2, r2, #1
 8007202:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007212:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681a      	ldr	r2, [r3, #0]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007222:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8007224:	f000 fd4c 	bl	8007cc0 <HAL_RCC_GetPCLK1Freq>
 8007228:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	685b      	ldr	r3, [r3, #4]
 800722e:	4a81      	ldr	r2, [pc, #516]	@ (8007434 <HAL_I2C_Init+0x274>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d807      	bhi.n	8007244 <HAL_I2C_Init+0x84>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4a80      	ldr	r2, [pc, #512]	@ (8007438 <HAL_I2C_Init+0x278>)
 8007238:	4293      	cmp	r3, r2
 800723a:	bf94      	ite	ls
 800723c:	2301      	movls	r3, #1
 800723e:	2300      	movhi	r3, #0
 8007240:	b2db      	uxtb	r3, r3
 8007242:	e006      	b.n	8007252 <HAL_I2C_Init+0x92>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	4a7d      	ldr	r2, [pc, #500]	@ (800743c <HAL_I2C_Init+0x27c>)
 8007248:	4293      	cmp	r3, r2
 800724a:	bf94      	ite	ls
 800724c:	2301      	movls	r3, #1
 800724e:	2300      	movhi	r3, #0
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b00      	cmp	r3, #0
 8007254:	d001      	beq.n	800725a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e0e7      	b.n	800742a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	4a78      	ldr	r2, [pc, #480]	@ (8007440 <HAL_I2C_Init+0x280>)
 800725e:	fba2 2303 	umull	r2, r3, r2, r3
 8007262:	0c9b      	lsrs	r3, r3, #18
 8007264:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	685b      	ldr	r3, [r3, #4]
 800726c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	68ba      	ldr	r2, [r7, #8]
 8007276:	430a      	orrs	r2, r1
 8007278:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6a1b      	ldr	r3, [r3, #32]
 8007280:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	685b      	ldr	r3, [r3, #4]
 8007288:	4a6a      	ldr	r2, [pc, #424]	@ (8007434 <HAL_I2C_Init+0x274>)
 800728a:	4293      	cmp	r3, r2
 800728c:	d802      	bhi.n	8007294 <HAL_I2C_Init+0xd4>
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	3301      	adds	r3, #1
 8007292:	e009      	b.n	80072a8 <HAL_I2C_Init+0xe8>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800729a:	fb02 f303 	mul.w	r3, r2, r3
 800729e:	4a69      	ldr	r2, [pc, #420]	@ (8007444 <HAL_I2C_Init+0x284>)
 80072a0:	fba2 2303 	umull	r2, r3, r2, r3
 80072a4:	099b      	lsrs	r3, r3, #6
 80072a6:	3301      	adds	r3, #1
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	6812      	ldr	r2, [r2, #0]
 80072ac:	430b      	orrs	r3, r1
 80072ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80072ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	685b      	ldr	r3, [r3, #4]
 80072c2:	495c      	ldr	r1, [pc, #368]	@ (8007434 <HAL_I2C_Init+0x274>)
 80072c4:	428b      	cmp	r3, r1
 80072c6:	d819      	bhi.n	80072fc <HAL_I2C_Init+0x13c>
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	1e59      	subs	r1, r3, #1
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	685b      	ldr	r3, [r3, #4]
 80072d0:	005b      	lsls	r3, r3, #1
 80072d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80072d6:	1c59      	adds	r1, r3, #1
 80072d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80072dc:	400b      	ands	r3, r1
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d00a      	beq.n	80072f8 <HAL_I2C_Init+0x138>
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	1e59      	subs	r1, r3, #1
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	685b      	ldr	r3, [r3, #4]
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80072f0:	3301      	adds	r3, #1
 80072f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072f6:	e051      	b.n	800739c <HAL_I2C_Init+0x1dc>
 80072f8:	2304      	movs	r3, #4
 80072fa:	e04f      	b.n	800739c <HAL_I2C_Init+0x1dc>
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d111      	bne.n	8007328 <HAL_I2C_Init+0x168>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	1e58      	subs	r0, r3, #1
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	6859      	ldr	r1, [r3, #4]
 800730c:	460b      	mov	r3, r1
 800730e:	005b      	lsls	r3, r3, #1
 8007310:	440b      	add	r3, r1
 8007312:	fbb0 f3f3 	udiv	r3, r0, r3
 8007316:	3301      	adds	r3, #1
 8007318:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800731c:	2b00      	cmp	r3, #0
 800731e:	bf0c      	ite	eq
 8007320:	2301      	moveq	r3, #1
 8007322:	2300      	movne	r3, #0
 8007324:	b2db      	uxtb	r3, r3
 8007326:	e012      	b.n	800734e <HAL_I2C_Init+0x18e>
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	1e58      	subs	r0, r3, #1
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	6859      	ldr	r1, [r3, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	009b      	lsls	r3, r3, #2
 8007334:	440b      	add	r3, r1
 8007336:	0099      	lsls	r1, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	fbb0 f3f3 	udiv	r3, r0, r3
 800733e:	3301      	adds	r3, #1
 8007340:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007344:	2b00      	cmp	r3, #0
 8007346:	bf0c      	ite	eq
 8007348:	2301      	moveq	r3, #1
 800734a:	2300      	movne	r3, #0
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d001      	beq.n	8007356 <HAL_I2C_Init+0x196>
 8007352:	2301      	movs	r3, #1
 8007354:	e022      	b.n	800739c <HAL_I2C_Init+0x1dc>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d10e      	bne.n	800737c <HAL_I2C_Init+0x1bc>
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	1e58      	subs	r0, r3, #1
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6859      	ldr	r1, [r3, #4]
 8007366:	460b      	mov	r3, r1
 8007368:	005b      	lsls	r3, r3, #1
 800736a:	440b      	add	r3, r1
 800736c:	fbb0 f3f3 	udiv	r3, r0, r3
 8007370:	3301      	adds	r3, #1
 8007372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007376:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800737a:	e00f      	b.n	800739c <HAL_I2C_Init+0x1dc>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	1e58      	subs	r0, r3, #1
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6859      	ldr	r1, [r3, #4]
 8007384:	460b      	mov	r3, r1
 8007386:	009b      	lsls	r3, r3, #2
 8007388:	440b      	add	r3, r1
 800738a:	0099      	lsls	r1, r3, #2
 800738c:	440b      	add	r3, r1
 800738e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007392:	3301      	adds	r3, #1
 8007394:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007398:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800739c:	6879      	ldr	r1, [r7, #4]
 800739e:	6809      	ldr	r1, [r1, #0]
 80073a0:	4313      	orrs	r3, r2
 80073a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	69da      	ldr	r2, [r3, #28]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6a1b      	ldr	r3, [r3, #32]
 80073b6:	431a      	orrs	r2, r3
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	430a      	orrs	r2, r1
 80073be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	689b      	ldr	r3, [r3, #8]
 80073c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80073ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	6911      	ldr	r1, [r2, #16]
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	68d2      	ldr	r2, [r2, #12]
 80073d6:	4311      	orrs	r1, r2
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	6812      	ldr	r2, [r2, #0]
 80073dc:	430b      	orrs	r3, r1
 80073de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	695a      	ldr	r2, [r3, #20]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	699b      	ldr	r3, [r3, #24]
 80073f2:	431a      	orrs	r2, r3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	430a      	orrs	r2, r1
 80073fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	681a      	ldr	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f042 0201 	orr.w	r2, r2, #1
 800740a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2220      	movs	r2, #32
 8007416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3710      	adds	r7, #16
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop
 8007434:	000186a0 	.word	0x000186a0
 8007438:	001e847f 	.word	0x001e847f
 800743c:	003d08ff 	.word	0x003d08ff
 8007440:	431bde83 	.word	0x431bde83
 8007444:	10624dd3 	.word	0x10624dd3

08007448 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b086      	sub	sp, #24
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d101      	bne.n	800745a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007456:	2301      	movs	r3, #1
 8007458:	e267      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d075      	beq.n	8007552 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007466:	4b88      	ldr	r3, [pc, #544]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 8007468:	689b      	ldr	r3, [r3, #8]
 800746a:	f003 030c 	and.w	r3, r3, #12
 800746e:	2b04      	cmp	r3, #4
 8007470:	d00c      	beq.n	800748c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007472:	4b85      	ldr	r3, [pc, #532]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800747a:	2b08      	cmp	r3, #8
 800747c:	d112      	bne.n	80074a4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800747e:	4b82      	ldr	r3, [pc, #520]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007486:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800748a:	d10b      	bne.n	80074a4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800748c:	4b7e      	ldr	r3, [pc, #504]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007494:	2b00      	cmp	r3, #0
 8007496:	d05b      	beq.n	8007550 <HAL_RCC_OscConfig+0x108>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d157      	bne.n	8007550 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e242      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80074ac:	d106      	bne.n	80074bc <HAL_RCC_OscConfig+0x74>
 80074ae:	4b76      	ldr	r3, [pc, #472]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	4a75      	ldr	r2, [pc, #468]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074b8:	6013      	str	r3, [r2, #0]
 80074ba:	e01d      	b.n	80074f8 <HAL_RCC_OscConfig+0xb0>
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80074c4:	d10c      	bne.n	80074e0 <HAL_RCC_OscConfig+0x98>
 80074c6:	4b70      	ldr	r3, [pc, #448]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	4a6f      	ldr	r2, [pc, #444]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074cc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80074d0:	6013      	str	r3, [r2, #0]
 80074d2:	4b6d      	ldr	r3, [pc, #436]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	4a6c      	ldr	r2, [pc, #432]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074dc:	6013      	str	r3, [r2, #0]
 80074de:	e00b      	b.n	80074f8 <HAL_RCC_OscConfig+0xb0>
 80074e0:	4b69      	ldr	r3, [pc, #420]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a68      	ldr	r2, [pc, #416]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074ea:	6013      	str	r3, [r2, #0]
 80074ec:	4b66      	ldr	r3, [pc, #408]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a65      	ldr	r2, [pc, #404]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80074f2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80074f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d013      	beq.n	8007528 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007500:	f7fe f8f2 	bl	80056e8 <HAL_GetTick>
 8007504:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007506:	e008      	b.n	800751a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007508:	f7fe f8ee 	bl	80056e8 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	2b64      	cmp	r3, #100	@ 0x64
 8007514:	d901      	bls.n	800751a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007516:	2303      	movs	r3, #3
 8007518:	e207      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800751a:	4b5b      	ldr	r3, [pc, #364]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0f0      	beq.n	8007508 <HAL_RCC_OscConfig+0xc0>
 8007526:	e014      	b.n	8007552 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007528:	f7fe f8de 	bl	80056e8 <HAL_GetTick>
 800752c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800752e:	e008      	b.n	8007542 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007530:	f7fe f8da 	bl	80056e8 <HAL_GetTick>
 8007534:	4602      	mov	r2, r0
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	1ad3      	subs	r3, r2, r3
 800753a:	2b64      	cmp	r3, #100	@ 0x64
 800753c:	d901      	bls.n	8007542 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800753e:	2303      	movs	r3, #3
 8007540:	e1f3      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007542:	4b51      	ldr	r3, [pc, #324]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800754a:	2b00      	cmp	r3, #0
 800754c:	d1f0      	bne.n	8007530 <HAL_RCC_OscConfig+0xe8>
 800754e:	e000      	b.n	8007552 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007550:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f003 0302 	and.w	r3, r3, #2
 800755a:	2b00      	cmp	r3, #0
 800755c:	d063      	beq.n	8007626 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800755e:	4b4a      	ldr	r3, [pc, #296]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 030c 	and.w	r3, r3, #12
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800756a:	4b47      	ldr	r3, [pc, #284]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 800756c:	689b      	ldr	r3, [r3, #8]
 800756e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007572:	2b08      	cmp	r3, #8
 8007574:	d11c      	bne.n	80075b0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007576:	4b44      	ldr	r3, [pc, #272]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d116      	bne.n	80075b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007582:	4b41      	ldr	r3, [pc, #260]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d005      	beq.n	800759a <HAL_RCC_OscConfig+0x152>
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	2b01      	cmp	r3, #1
 8007594:	d001      	beq.n	800759a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e1c7      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800759a:	4b3b      	ldr	r3, [pc, #236]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	691b      	ldr	r3, [r3, #16]
 80075a6:	00db      	lsls	r3, r3, #3
 80075a8:	4937      	ldr	r1, [pc, #220]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80075aa:	4313      	orrs	r3, r2
 80075ac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075ae:	e03a      	b.n	8007626 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d020      	beq.n	80075fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075b8:	4b34      	ldr	r3, [pc, #208]	@ (800768c <HAL_RCC_OscConfig+0x244>)
 80075ba:	2201      	movs	r2, #1
 80075bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80075be:	f7fe f893 	bl	80056e8 <HAL_GetTick>
 80075c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075c4:	e008      	b.n	80075d8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80075c6:	f7fe f88f 	bl	80056e8 <HAL_GetTick>
 80075ca:	4602      	mov	r2, r0
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1ad3      	subs	r3, r2, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d901      	bls.n	80075d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80075d4:	2303      	movs	r3, #3
 80075d6:	e1a8      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075d8:	4b2b      	ldr	r3, [pc, #172]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	f003 0302 	and.w	r3, r3, #2
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d0f0      	beq.n	80075c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075e4:	4b28      	ldr	r3, [pc, #160]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	691b      	ldr	r3, [r3, #16]
 80075f0:	00db      	lsls	r3, r3, #3
 80075f2:	4925      	ldr	r1, [pc, #148]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 80075f4:	4313      	orrs	r3, r2
 80075f6:	600b      	str	r3, [r1, #0]
 80075f8:	e015      	b.n	8007626 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80075fa:	4b24      	ldr	r3, [pc, #144]	@ (800768c <HAL_RCC_OscConfig+0x244>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007600:	f7fe f872 	bl	80056e8 <HAL_GetTick>
 8007604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007606:	e008      	b.n	800761a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007608:	f7fe f86e 	bl	80056e8 <HAL_GetTick>
 800760c:	4602      	mov	r2, r0
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	1ad3      	subs	r3, r2, r3
 8007612:	2b02      	cmp	r3, #2
 8007614:	d901      	bls.n	800761a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007616:	2303      	movs	r3, #3
 8007618:	e187      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800761a:	4b1b      	ldr	r3, [pc, #108]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0302 	and.w	r3, r3, #2
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1f0      	bne.n	8007608 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f003 0308 	and.w	r3, r3, #8
 800762e:	2b00      	cmp	r3, #0
 8007630:	d036      	beq.n	80076a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	695b      	ldr	r3, [r3, #20]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d016      	beq.n	8007668 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800763a:	4b15      	ldr	r3, [pc, #84]	@ (8007690 <HAL_RCC_OscConfig+0x248>)
 800763c:	2201      	movs	r2, #1
 800763e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007640:	f7fe f852 	bl	80056e8 <HAL_GetTick>
 8007644:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007646:	e008      	b.n	800765a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007648:	f7fe f84e 	bl	80056e8 <HAL_GetTick>
 800764c:	4602      	mov	r2, r0
 800764e:	693b      	ldr	r3, [r7, #16]
 8007650:	1ad3      	subs	r3, r2, r3
 8007652:	2b02      	cmp	r3, #2
 8007654:	d901      	bls.n	800765a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007656:	2303      	movs	r3, #3
 8007658:	e167      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800765a:	4b0b      	ldr	r3, [pc, #44]	@ (8007688 <HAL_RCC_OscConfig+0x240>)
 800765c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d0f0      	beq.n	8007648 <HAL_RCC_OscConfig+0x200>
 8007666:	e01b      	b.n	80076a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007668:	4b09      	ldr	r3, [pc, #36]	@ (8007690 <HAL_RCC_OscConfig+0x248>)
 800766a:	2200      	movs	r2, #0
 800766c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800766e:	f7fe f83b 	bl	80056e8 <HAL_GetTick>
 8007672:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007674:	e00e      	b.n	8007694 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007676:	f7fe f837 	bl	80056e8 <HAL_GetTick>
 800767a:	4602      	mov	r2, r0
 800767c:	693b      	ldr	r3, [r7, #16]
 800767e:	1ad3      	subs	r3, r2, r3
 8007680:	2b02      	cmp	r3, #2
 8007682:	d907      	bls.n	8007694 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e150      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
 8007688:	40023800 	.word	0x40023800
 800768c:	42470000 	.word	0x42470000
 8007690:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007694:	4b88      	ldr	r3, [pc, #544]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007696:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007698:	f003 0302 	and.w	r3, r3, #2
 800769c:	2b00      	cmp	r3, #0
 800769e:	d1ea      	bne.n	8007676 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f003 0304 	and.w	r3, r3, #4
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	f000 8097 	beq.w	80077dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80076ae:	2300      	movs	r3, #0
 80076b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80076b2:	4b81      	ldr	r3, [pc, #516]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80076b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d10f      	bne.n	80076de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80076be:	2300      	movs	r3, #0
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	4b7d      	ldr	r3, [pc, #500]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80076c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076c6:	4a7c      	ldr	r2, [pc, #496]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80076c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80076cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80076ce:	4b7a      	ldr	r3, [pc, #488]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80076d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80076d6:	60bb      	str	r3, [r7, #8]
 80076d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80076da:	2301      	movs	r3, #1
 80076dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076de:	4b77      	ldr	r3, [pc, #476]	@ (80078bc <HAL_RCC_OscConfig+0x474>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d118      	bne.n	800771c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80076ea:	4b74      	ldr	r3, [pc, #464]	@ (80078bc <HAL_RCC_OscConfig+0x474>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a73      	ldr	r2, [pc, #460]	@ (80078bc <HAL_RCC_OscConfig+0x474>)
 80076f0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80076f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80076f6:	f7fd fff7 	bl	80056e8 <HAL_GetTick>
 80076fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076fc:	e008      	b.n	8007710 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80076fe:	f7fd fff3 	bl	80056e8 <HAL_GetTick>
 8007702:	4602      	mov	r2, r0
 8007704:	693b      	ldr	r3, [r7, #16]
 8007706:	1ad3      	subs	r3, r2, r3
 8007708:	2b02      	cmp	r3, #2
 800770a:	d901      	bls.n	8007710 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800770c:	2303      	movs	r3, #3
 800770e:	e10c      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007710:	4b6a      	ldr	r3, [pc, #424]	@ (80078bc <HAL_RCC_OscConfig+0x474>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007718:	2b00      	cmp	r3, #0
 800771a:	d0f0      	beq.n	80076fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	689b      	ldr	r3, [r3, #8]
 8007720:	2b01      	cmp	r3, #1
 8007722:	d106      	bne.n	8007732 <HAL_RCC_OscConfig+0x2ea>
 8007724:	4b64      	ldr	r3, [pc, #400]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007728:	4a63      	ldr	r2, [pc, #396]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 800772a:	f043 0301 	orr.w	r3, r3, #1
 800772e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007730:	e01c      	b.n	800776c <HAL_RCC_OscConfig+0x324>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	689b      	ldr	r3, [r3, #8]
 8007736:	2b05      	cmp	r3, #5
 8007738:	d10c      	bne.n	8007754 <HAL_RCC_OscConfig+0x30c>
 800773a:	4b5f      	ldr	r3, [pc, #380]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 800773c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800773e:	4a5e      	ldr	r2, [pc, #376]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007740:	f043 0304 	orr.w	r3, r3, #4
 8007744:	6713      	str	r3, [r2, #112]	@ 0x70
 8007746:	4b5c      	ldr	r3, [pc, #368]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007748:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800774a:	4a5b      	ldr	r2, [pc, #364]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 800774c:	f043 0301 	orr.w	r3, r3, #1
 8007750:	6713      	str	r3, [r2, #112]	@ 0x70
 8007752:	e00b      	b.n	800776c <HAL_RCC_OscConfig+0x324>
 8007754:	4b58      	ldr	r3, [pc, #352]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007756:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007758:	4a57      	ldr	r2, [pc, #348]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 800775a:	f023 0301 	bic.w	r3, r3, #1
 800775e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007760:	4b55      	ldr	r3, [pc, #340]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007762:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007764:	4a54      	ldr	r2, [pc, #336]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007766:	f023 0304 	bic.w	r3, r3, #4
 800776a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d015      	beq.n	80077a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007774:	f7fd ffb8 	bl	80056e8 <HAL_GetTick>
 8007778:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800777a:	e00a      	b.n	8007792 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800777c:	f7fd ffb4 	bl	80056e8 <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	f241 3288 	movw	r2, #5000	@ 0x1388
 800778a:	4293      	cmp	r3, r2
 800778c:	d901      	bls.n	8007792 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800778e:	2303      	movs	r3, #3
 8007790:	e0cb      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007792:	4b49      	ldr	r3, [pc, #292]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007794:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007796:	f003 0302 	and.w	r3, r3, #2
 800779a:	2b00      	cmp	r3, #0
 800779c:	d0ee      	beq.n	800777c <HAL_RCC_OscConfig+0x334>
 800779e:	e014      	b.n	80077ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077a0:	f7fd ffa2 	bl	80056e8 <HAL_GetTick>
 80077a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077a6:	e00a      	b.n	80077be <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80077a8:	f7fd ff9e 	bl	80056e8 <HAL_GetTick>
 80077ac:	4602      	mov	r2, r0
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	1ad3      	subs	r3, r2, r3
 80077b2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80077b6:	4293      	cmp	r3, r2
 80077b8:	d901      	bls.n	80077be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e0b5      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80077be:	4b3e      	ldr	r3, [pc, #248]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80077c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80077c2:	f003 0302 	and.w	r3, r3, #2
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d1ee      	bne.n	80077a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d105      	bne.n	80077dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80077d0:	4b39      	ldr	r3, [pc, #228]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80077d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077d4:	4a38      	ldr	r2, [pc, #224]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80077d6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80077da:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	699b      	ldr	r3, [r3, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	f000 80a1 	beq.w	8007928 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80077e6:	4b34      	ldr	r3, [pc, #208]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80077e8:	689b      	ldr	r3, [r3, #8]
 80077ea:	f003 030c 	and.w	r3, r3, #12
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d05c      	beq.n	80078ac <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	699b      	ldr	r3, [r3, #24]
 80077f6:	2b02      	cmp	r3, #2
 80077f8:	d141      	bne.n	800787e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80077fa:	4b31      	ldr	r3, [pc, #196]	@ (80078c0 <HAL_RCC_OscConfig+0x478>)
 80077fc:	2200      	movs	r2, #0
 80077fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007800:	f7fd ff72 	bl	80056e8 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007808:	f7fd ff6e 	bl	80056e8 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b02      	cmp	r3, #2
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e087      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800781a:	4b27      	ldr	r3, [pc, #156]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d1f0      	bne.n	8007808 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	69da      	ldr	r2, [r3, #28]
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	6a1b      	ldr	r3, [r3, #32]
 800782e:	431a      	orrs	r2, r3
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007834:	019b      	lsls	r3, r3, #6
 8007836:	431a      	orrs	r2, r3
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800783c:	085b      	lsrs	r3, r3, #1
 800783e:	3b01      	subs	r3, #1
 8007840:	041b      	lsls	r3, r3, #16
 8007842:	431a      	orrs	r2, r3
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007848:	061b      	lsls	r3, r3, #24
 800784a:	491b      	ldr	r1, [pc, #108]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 800784c:	4313      	orrs	r3, r2
 800784e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007850:	4b1b      	ldr	r3, [pc, #108]	@ (80078c0 <HAL_RCC_OscConfig+0x478>)
 8007852:	2201      	movs	r2, #1
 8007854:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007856:	f7fd ff47 	bl	80056e8 <HAL_GetTick>
 800785a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800785c:	e008      	b.n	8007870 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800785e:	f7fd ff43 	bl	80056e8 <HAL_GetTick>
 8007862:	4602      	mov	r2, r0
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	1ad3      	subs	r3, r2, r3
 8007868:	2b02      	cmp	r3, #2
 800786a:	d901      	bls.n	8007870 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800786c:	2303      	movs	r3, #3
 800786e:	e05c      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007870:	4b11      	ldr	r3, [pc, #68]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007878:	2b00      	cmp	r3, #0
 800787a:	d0f0      	beq.n	800785e <HAL_RCC_OscConfig+0x416>
 800787c:	e054      	b.n	8007928 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800787e:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <HAL_RCC_OscConfig+0x478>)
 8007880:	2200      	movs	r2, #0
 8007882:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007884:	f7fd ff30 	bl	80056e8 <HAL_GetTick>
 8007888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800788a:	e008      	b.n	800789e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800788c:	f7fd ff2c 	bl	80056e8 <HAL_GetTick>
 8007890:	4602      	mov	r2, r0
 8007892:	693b      	ldr	r3, [r7, #16]
 8007894:	1ad3      	subs	r3, r2, r3
 8007896:	2b02      	cmp	r3, #2
 8007898:	d901      	bls.n	800789e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800789a:	2303      	movs	r3, #3
 800789c:	e045      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800789e:	4b06      	ldr	r3, [pc, #24]	@ (80078b8 <HAL_RCC_OscConfig+0x470>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1f0      	bne.n	800788c <HAL_RCC_OscConfig+0x444>
 80078aa:	e03d      	b.n	8007928 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	699b      	ldr	r3, [r3, #24]
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d107      	bne.n	80078c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80078b4:	2301      	movs	r3, #1
 80078b6:	e038      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
 80078b8:	40023800 	.word	0x40023800
 80078bc:	40007000 	.word	0x40007000
 80078c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80078c4:	4b1b      	ldr	r3, [pc, #108]	@ (8007934 <HAL_RCC_OscConfig+0x4ec>)
 80078c6:	685b      	ldr	r3, [r3, #4]
 80078c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	699b      	ldr	r3, [r3, #24]
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d028      	beq.n	8007924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80078dc:	429a      	cmp	r2, r3
 80078de:	d121      	bne.n	8007924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80078ea:	429a      	cmp	r2, r3
 80078ec:	d11a      	bne.n	8007924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078ee:	68fa      	ldr	r2, [r7, #12]
 80078f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80078f4:	4013      	ands	r3, r2
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80078fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d111      	bne.n	8007924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800790a:	085b      	lsrs	r3, r3, #1
 800790c:	3b01      	subs	r3, #1
 800790e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007910:	429a      	cmp	r2, r3
 8007912:	d107      	bne.n	8007924 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800791e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007920:	429a      	cmp	r2, r3
 8007922:	d001      	beq.n	8007928 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007924:	2301      	movs	r3, #1
 8007926:	e000      	b.n	800792a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007928:	2300      	movs	r3, #0
}
 800792a:	4618      	mov	r0, r3
 800792c:	3718      	adds	r7, #24
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}
 8007932:	bf00      	nop
 8007934:	40023800 	.word	0x40023800

08007938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b084      	sub	sp, #16
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
 8007940:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b00      	cmp	r3, #0
 8007946:	d101      	bne.n	800794c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007948:	2301      	movs	r3, #1
 800794a:	e0cc      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800794c:	4b68      	ldr	r3, [pc, #416]	@ (8007af0 <HAL_RCC_ClockConfig+0x1b8>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f003 0307 	and.w	r3, r3, #7
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d90c      	bls.n	8007974 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800795a:	4b65      	ldr	r3, [pc, #404]	@ (8007af0 <HAL_RCC_ClockConfig+0x1b8>)
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	b2d2      	uxtb	r2, r2
 8007960:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007962:	4b63      	ldr	r3, [pc, #396]	@ (8007af0 <HAL_RCC_ClockConfig+0x1b8>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f003 0307 	and.w	r3, r3, #7
 800796a:	683a      	ldr	r2, [r7, #0]
 800796c:	429a      	cmp	r2, r3
 800796e:	d001      	beq.n	8007974 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007970:	2301      	movs	r3, #1
 8007972:	e0b8      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	f003 0302 	and.w	r3, r3, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	d020      	beq.n	80079c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f003 0304 	and.w	r3, r3, #4
 8007988:	2b00      	cmp	r3, #0
 800798a:	d005      	beq.n	8007998 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800798c:	4b59      	ldr	r3, [pc, #356]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 800798e:	689b      	ldr	r3, [r3, #8]
 8007990:	4a58      	ldr	r2, [pc, #352]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007992:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007996:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f003 0308 	and.w	r3, r3, #8
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d005      	beq.n	80079b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80079a4:	4b53      	ldr	r3, [pc, #332]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	4a52      	ldr	r2, [pc, #328]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 80079aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80079ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80079b0:	4b50      	ldr	r3, [pc, #320]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	494d      	ldr	r1, [pc, #308]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 80079be:	4313      	orrs	r3, r2
 80079c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	f003 0301 	and.w	r3, r3, #1
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d044      	beq.n	8007a58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	685b      	ldr	r3, [r3, #4]
 80079d2:	2b01      	cmp	r3, #1
 80079d4:	d107      	bne.n	80079e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80079d6:	4b47      	ldr	r3, [pc, #284]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d119      	bne.n	8007a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e07f      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	2b02      	cmp	r3, #2
 80079ec:	d003      	beq.n	80079f6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80079f2:	2b03      	cmp	r3, #3
 80079f4:	d107      	bne.n	8007a06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80079f6:	4b3f      	ldr	r3, [pc, #252]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d109      	bne.n	8007a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e06f      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007a06:	4b3b      	ldr	r3, [pc, #236]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 0302 	and.w	r3, r3, #2
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d101      	bne.n	8007a16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007a12:	2301      	movs	r3, #1
 8007a14:	e067      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007a16:	4b37      	ldr	r3, [pc, #220]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a18:	689b      	ldr	r3, [r3, #8]
 8007a1a:	f023 0203 	bic.w	r2, r3, #3
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	685b      	ldr	r3, [r3, #4]
 8007a22:	4934      	ldr	r1, [pc, #208]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a24:	4313      	orrs	r3, r2
 8007a26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007a28:	f7fd fe5e 	bl	80056e8 <HAL_GetTick>
 8007a2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a2e:	e00a      	b.n	8007a46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007a30:	f7fd fe5a 	bl	80056e8 <HAL_GetTick>
 8007a34:	4602      	mov	r2, r0
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	1ad3      	subs	r3, r2, r3
 8007a3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007a3e:	4293      	cmp	r3, r2
 8007a40:	d901      	bls.n	8007a46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007a42:	2303      	movs	r3, #3
 8007a44:	e04f      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007a46:	4b2b      	ldr	r3, [pc, #172]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a48:	689b      	ldr	r3, [r3, #8]
 8007a4a:	f003 020c 	and.w	r2, r3, #12
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	685b      	ldr	r3, [r3, #4]
 8007a52:	009b      	lsls	r3, r3, #2
 8007a54:	429a      	cmp	r2, r3
 8007a56:	d1eb      	bne.n	8007a30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007a58:	4b25      	ldr	r3, [pc, #148]	@ (8007af0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0307 	and.w	r3, r3, #7
 8007a60:	683a      	ldr	r2, [r7, #0]
 8007a62:	429a      	cmp	r2, r3
 8007a64:	d20c      	bcs.n	8007a80 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a66:	4b22      	ldr	r3, [pc, #136]	@ (8007af0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a68:	683a      	ldr	r2, [r7, #0]
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a6e:	4b20      	ldr	r3, [pc, #128]	@ (8007af0 <HAL_RCC_ClockConfig+0x1b8>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 0307 	and.w	r3, r3, #7
 8007a76:	683a      	ldr	r2, [r7, #0]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d001      	beq.n	8007a80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	e032      	b.n	8007ae6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f003 0304 	and.w	r3, r3, #4
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d008      	beq.n	8007a9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a8c:	4b19      	ldr	r3, [pc, #100]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	4916      	ldr	r1, [pc, #88]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007a9a:	4313      	orrs	r3, r2
 8007a9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f003 0308 	and.w	r3, r3, #8
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d009      	beq.n	8007abe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007aaa:	4b12      	ldr	r3, [pc, #72]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aac:	689b      	ldr	r3, [r3, #8]
 8007aae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	00db      	lsls	r3, r3, #3
 8007ab8:	490e      	ldr	r1, [pc, #56]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007aba:	4313      	orrs	r3, r2
 8007abc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007abe:	f000 f82d 	bl	8007b1c <HAL_RCC_GetSysClockFreq>
 8007ac2:	4602      	mov	r2, r0
 8007ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8007af4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	091b      	lsrs	r3, r3, #4
 8007aca:	f003 030f 	and.w	r3, r3, #15
 8007ace:	490a      	ldr	r1, [pc, #40]	@ (8007af8 <HAL_RCC_ClockConfig+0x1c0>)
 8007ad0:	5ccb      	ldrb	r3, [r1, r3]
 8007ad2:	fa22 f303 	lsr.w	r3, r2, r3
 8007ad6:	4a09      	ldr	r2, [pc, #36]	@ (8007afc <HAL_RCC_ClockConfig+0x1c4>)
 8007ad8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007ada:	4b09      	ldr	r3, [pc, #36]	@ (8007b00 <HAL_RCC_ClockConfig+0x1c8>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4618      	mov	r0, r3
 8007ae0:	f7fd fdbe 	bl	8005660 <HAL_InitTick>

  return HAL_OK;
 8007ae4:	2300      	movs	r3, #0
}
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	3710      	adds	r7, #16
 8007aea:	46bd      	mov	sp, r7
 8007aec:	bd80      	pop	{r7, pc}
 8007aee:	bf00      	nop
 8007af0:	40023c00 	.word	0x40023c00
 8007af4:	40023800 	.word	0x40023800
 8007af8:	0800e04c 	.word	0x0800e04c
 8007afc:	2000002c 	.word	0x2000002c
 8007b00:	20000030 	.word	0x20000030

08007b04 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8007b04:	b480      	push	{r7}
 8007b06:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8007b08:	4b03      	ldr	r3, [pc, #12]	@ (8007b18 <HAL_RCC_EnableCSS+0x14>)
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	601a      	str	r2, [r3, #0]
}
 8007b0e:	bf00      	nop
 8007b10:	46bd      	mov	sp, r7
 8007b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b16:	4770      	bx	lr
 8007b18:	4247004c 	.word	0x4247004c

08007b1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007b1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b20:	b090      	sub	sp, #64	@ 0x40
 8007b22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007b34:	4b59      	ldr	r3, [pc, #356]	@ (8007c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b36:	689b      	ldr	r3, [r3, #8]
 8007b38:	f003 030c 	and.w	r3, r3, #12
 8007b3c:	2b08      	cmp	r3, #8
 8007b3e:	d00d      	beq.n	8007b5c <HAL_RCC_GetSysClockFreq+0x40>
 8007b40:	2b08      	cmp	r3, #8
 8007b42:	f200 80a1 	bhi.w	8007c88 <HAL_RCC_GetSysClockFreq+0x16c>
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d002      	beq.n	8007b50 <HAL_RCC_GetSysClockFreq+0x34>
 8007b4a:	2b04      	cmp	r3, #4
 8007b4c:	d003      	beq.n	8007b56 <HAL_RCC_GetSysClockFreq+0x3a>
 8007b4e:	e09b      	b.n	8007c88 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007b50:	4b53      	ldr	r3, [pc, #332]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007b52:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b54:	e09b      	b.n	8007c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007b56:	4b53      	ldr	r3, [pc, #332]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007b5a:	e098      	b.n	8007c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007b5c:	4b4f      	ldr	r3, [pc, #316]	@ (8007c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007b64:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007b66:	4b4d      	ldr	r3, [pc, #308]	@ (8007c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b68:	685b      	ldr	r3, [r3, #4]
 8007b6a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d028      	beq.n	8007bc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b72:	4b4a      	ldr	r3, [pc, #296]	@ (8007c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	099b      	lsrs	r3, r3, #6
 8007b78:	2200      	movs	r2, #0
 8007b7a:	623b      	str	r3, [r7, #32]
 8007b7c:	627a      	str	r2, [r7, #36]	@ 0x24
 8007b7e:	6a3b      	ldr	r3, [r7, #32]
 8007b80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007b84:	2100      	movs	r1, #0
 8007b86:	4b47      	ldr	r3, [pc, #284]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b88:	fb03 f201 	mul.w	r2, r3, r1
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	fb00 f303 	mul.w	r3, r0, r3
 8007b92:	4413      	add	r3, r2
 8007b94:	4a43      	ldr	r2, [pc, #268]	@ (8007ca4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007b96:	fba0 1202 	umull	r1, r2, r0, r2
 8007b9a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007b9c:	460a      	mov	r2, r1
 8007b9e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8007ba0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ba2:	4413      	add	r3, r2
 8007ba4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ba6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ba8:	2200      	movs	r2, #0
 8007baa:	61bb      	str	r3, [r7, #24]
 8007bac:	61fa      	str	r2, [r7, #28]
 8007bae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007bb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8007bb6:	f7f8 fb63 	bl	8000280 <__aeabi_uldivmod>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	460b      	mov	r3, r1
 8007bbe:	4613      	mov	r3, r2
 8007bc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007bc2:	e053      	b.n	8007c6c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007bc4:	4b35      	ldr	r3, [pc, #212]	@ (8007c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	099b      	lsrs	r3, r3, #6
 8007bca:	2200      	movs	r2, #0
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	617a      	str	r2, [r7, #20]
 8007bd0:	693b      	ldr	r3, [r7, #16]
 8007bd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007bd6:	f04f 0b00 	mov.w	fp, #0
 8007bda:	4652      	mov	r2, sl
 8007bdc:	465b      	mov	r3, fp
 8007bde:	f04f 0000 	mov.w	r0, #0
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	0159      	lsls	r1, r3, #5
 8007be8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007bec:	0150      	lsls	r0, r2, #5
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	ebb2 080a 	subs.w	r8, r2, sl
 8007bf6:	eb63 090b 	sbc.w	r9, r3, fp
 8007bfa:	f04f 0200 	mov.w	r2, #0
 8007bfe:	f04f 0300 	mov.w	r3, #0
 8007c02:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007c06:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007c0a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007c0e:	ebb2 0408 	subs.w	r4, r2, r8
 8007c12:	eb63 0509 	sbc.w	r5, r3, r9
 8007c16:	f04f 0200 	mov.w	r2, #0
 8007c1a:	f04f 0300 	mov.w	r3, #0
 8007c1e:	00eb      	lsls	r3, r5, #3
 8007c20:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c24:	00e2      	lsls	r2, r4, #3
 8007c26:	4614      	mov	r4, r2
 8007c28:	461d      	mov	r5, r3
 8007c2a:	eb14 030a 	adds.w	r3, r4, sl
 8007c2e:	603b      	str	r3, [r7, #0]
 8007c30:	eb45 030b 	adc.w	r3, r5, fp
 8007c34:	607b      	str	r3, [r7, #4]
 8007c36:	f04f 0200 	mov.w	r2, #0
 8007c3a:	f04f 0300 	mov.w	r3, #0
 8007c3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007c42:	4629      	mov	r1, r5
 8007c44:	028b      	lsls	r3, r1, #10
 8007c46:	4621      	mov	r1, r4
 8007c48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007c4c:	4621      	mov	r1, r4
 8007c4e:	028a      	lsls	r2, r1, #10
 8007c50:	4610      	mov	r0, r2
 8007c52:	4619      	mov	r1, r3
 8007c54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c56:	2200      	movs	r2, #0
 8007c58:	60bb      	str	r3, [r7, #8]
 8007c5a:	60fa      	str	r2, [r7, #12]
 8007c5c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007c60:	f7f8 fb0e 	bl	8000280 <__aeabi_uldivmod>
 8007c64:	4602      	mov	r2, r0
 8007c66:	460b      	mov	r3, r1
 8007c68:	4613      	mov	r3, r2
 8007c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8007c9c <HAL_RCC_GetSysClockFreq+0x180>)
 8007c6e:	685b      	ldr	r3, [r3, #4]
 8007c70:	0c1b      	lsrs	r3, r3, #16
 8007c72:	f003 0303 	and.w	r3, r3, #3
 8007c76:	3301      	adds	r3, #1
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8007c7c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c84:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c86:	e002      	b.n	8007c8e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c88:	4b05      	ldr	r3, [pc, #20]	@ (8007ca0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007c8a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007c8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8007c90:	4618      	mov	r0, r3
 8007c92:	3740      	adds	r7, #64	@ 0x40
 8007c94:	46bd      	mov	sp, r7
 8007c96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c9a:	bf00      	nop
 8007c9c:	40023800 	.word	0x40023800
 8007ca0:	00f42400 	.word	0x00f42400
 8007ca4:	00b71b00 	.word	0x00b71b00

08007ca8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007cac:	4b03      	ldr	r3, [pc, #12]	@ (8007cbc <HAL_RCC_GetHCLKFreq+0x14>)
 8007cae:	681b      	ldr	r3, [r3, #0]
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	2000002c 	.word	0x2000002c

08007cc0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007cc4:	f7ff fff0 	bl	8007ca8 <HAL_RCC_GetHCLKFreq>
 8007cc8:	4602      	mov	r2, r0
 8007cca:	4b05      	ldr	r3, [pc, #20]	@ (8007ce0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	0a9b      	lsrs	r3, r3, #10
 8007cd0:	f003 0307 	and.w	r3, r3, #7
 8007cd4:	4903      	ldr	r1, [pc, #12]	@ (8007ce4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007cd6:	5ccb      	ldrb	r3, [r1, r3]
 8007cd8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	bd80      	pop	{r7, pc}
 8007ce0:	40023800 	.word	0x40023800
 8007ce4:	0800e05c 	.word	0x0800e05c

08007ce8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007cec:	f7ff ffdc 	bl	8007ca8 <HAL_RCC_GetHCLKFreq>
 8007cf0:	4602      	mov	r2, r0
 8007cf2:	4b05      	ldr	r3, [pc, #20]	@ (8007d08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	0b5b      	lsrs	r3, r3, #13
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	4903      	ldr	r1, [pc, #12]	@ (8007d0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cfe:	5ccb      	ldrb	r3, [r1, r3]
 8007d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	bd80      	pop	{r7, pc}
 8007d08:	40023800 	.word	0x40023800
 8007d0c:	0800e05c 	.word	0x0800e05c

08007d10 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8007d10:	b580      	push	{r7, lr}
 8007d12:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8007d14:	4b06      	ldr	r3, [pc, #24]	@ (8007d30 <HAL_RCC_NMI_IRQHandler+0x20>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d1c:	2b80      	cmp	r3, #128	@ 0x80
 8007d1e:	d104      	bne.n	8007d2a <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8007d20:	f000 f80a 	bl	8007d38 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8007d24:	4b03      	ldr	r3, [pc, #12]	@ (8007d34 <HAL_RCC_NMI_IRQHandler+0x24>)
 8007d26:	2280      	movs	r2, #128	@ 0x80
 8007d28:	701a      	strb	r2, [r3, #0]
  }
}
 8007d2a:	bf00      	nop
 8007d2c:	bd80      	pop	{r7, pc}
 8007d2e:	bf00      	nop
 8007d30:	40023800 	.word	0x40023800
 8007d34:	4002380e 	.word	0x4002380e

08007d38 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8007d38:	b480      	push	{r7}
 8007d3a:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8007d3c:	bf00      	nop
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr

08007d46 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d46:	b580      	push	{r7, lr}
 8007d48:	b082      	sub	sp, #8
 8007d4a:	af00      	add	r7, sp, #0
 8007d4c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d101      	bne.n	8007d58 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e07b      	b.n	8007e50 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d108      	bne.n	8007d72 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007d68:	d009      	beq.n	8007d7e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	61da      	str	r2, [r3, #28]
 8007d70:	e005      	b.n	8007d7e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	2200      	movs	r2, #0
 8007d76:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	2200      	movs	r2, #0
 8007d82:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d8a:	b2db      	uxtb	r3, r3
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d106      	bne.n	8007d9e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2200      	movs	r2, #0
 8007d94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007d98:	6878      	ldr	r0, [r7, #4]
 8007d9a:	f7fc ffe1 	bl	8004d60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2202      	movs	r2, #2
 8007da2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007db4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	689b      	ldr	r3, [r3, #8]
 8007dc2:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	68db      	ldr	r3, [r3, #12]
 8007dcc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007dd0:	431a      	orrs	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	f003 0302 	and.w	r3, r3, #2
 8007dda:	431a      	orrs	r2, r3
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	695b      	ldr	r3, [r3, #20]
 8007de0:	f003 0301 	and.w	r3, r3, #1
 8007de4:	431a      	orrs	r2, r3
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007dee:	431a      	orrs	r2, r3
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	69db      	ldr	r3, [r3, #28]
 8007df4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007df8:	431a      	orrs	r2, r3
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6a1b      	ldr	r3, [r3, #32]
 8007dfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007e02:	ea42 0103 	orr.w	r1, r2, r3
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e0a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	430a      	orrs	r2, r1
 8007e14:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	0c1b      	lsrs	r3, r3, #16
 8007e1c:	f003 0104 	and.w	r1, r3, #4
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e24:	f003 0210 	and.w	r2, r3, #16
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	69da      	ldr	r2, [r3, #28]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e3e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b08a      	sub	sp, #40	@ 0x28
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	60f8      	str	r0, [r7, #12]
 8007e60:	60b9      	str	r1, [r7, #8]
 8007e62:	607a      	str	r2, [r7, #4]
 8007e64:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007e66:	2301      	movs	r3, #1
 8007e68:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e6a:	f7fd fc3d 	bl	80056e8 <HAL_GetTick>
 8007e6e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007e76:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	685b      	ldr	r3, [r3, #4]
 8007e7c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007e7e:	887b      	ldrh	r3, [r7, #2]
 8007e80:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007e82:	7ffb      	ldrb	r3, [r7, #31]
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d00c      	beq.n	8007ea2 <HAL_SPI_TransmitReceive+0x4a>
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e8e:	d106      	bne.n	8007e9e <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	689b      	ldr	r3, [r3, #8]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d102      	bne.n	8007e9e <HAL_SPI_TransmitReceive+0x46>
 8007e98:	7ffb      	ldrb	r3, [r7, #31]
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d001      	beq.n	8007ea2 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8007e9e:	2302      	movs	r3, #2
 8007ea0:	e17f      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d005      	beq.n	8007eb4 <HAL_SPI_TransmitReceive+0x5c>
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d002      	beq.n	8007eb4 <HAL_SPI_TransmitReceive+0x5c>
 8007eae:	887b      	ldrh	r3, [r7, #2]
 8007eb0:	2b00      	cmp	r3, #0
 8007eb2:	d101      	bne.n	8007eb8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	e174      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007ebe:	2b01      	cmp	r3, #1
 8007ec0:	d101      	bne.n	8007ec6 <HAL_SPI_TransmitReceive+0x6e>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e16d      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x34a>
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2201      	movs	r2, #1
 8007eca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ed4:	b2db      	uxtb	r3, r3
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	d003      	beq.n	8007ee2 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	2205      	movs	r2, #5
 8007ede:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	687a      	ldr	r2, [r7, #4]
 8007eec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	887a      	ldrh	r2, [r7, #2]
 8007ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	887a      	ldrh	r2, [r7, #2]
 8007ef8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	68ba      	ldr	r2, [r7, #8]
 8007efe:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	887a      	ldrh	r2, [r7, #2]
 8007f04:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	887a      	ldrh	r2, [r7, #2]
 8007f0a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	2200      	movs	r2, #0
 8007f16:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f22:	2b40      	cmp	r3, #64	@ 0x40
 8007f24:	d007      	beq.n	8007f36 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	681a      	ldr	r2, [r3, #0]
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007f34:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	68db      	ldr	r3, [r3, #12]
 8007f3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007f3e:	d17e      	bne.n	800803e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d002      	beq.n	8007f4e <HAL_SPI_TransmitReceive+0xf6>
 8007f48:	8afb      	ldrh	r3, [r7, #22]
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d16c      	bne.n	8008028 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f52:	881a      	ldrh	r2, [r3, #0]
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f5e:	1c9a      	adds	r2, r3, #2
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f68:	b29b      	uxth	r3, r3
 8007f6a:	3b01      	subs	r3, #1
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007f72:	e059      	b.n	8008028 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d11b      	bne.n	8007fba <HAL_SPI_TransmitReceive+0x162>
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d016      	beq.n	8007fba <HAL_SPI_TransmitReceive+0x162>
 8007f8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f8e:	2b01      	cmp	r3, #1
 8007f90:	d113      	bne.n	8007fba <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	881a      	ldrh	r2, [r3, #0]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa2:	1c9a      	adds	r2, r3, #2
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007fac:	b29b      	uxth	r3, r3
 8007fae:	3b01      	subs	r3, #1
 8007fb0:	b29a      	uxth	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	f003 0301 	and.w	r3, r3, #1
 8007fc4:	2b01      	cmp	r3, #1
 8007fc6:	d119      	bne.n	8007ffc <HAL_SPI_TransmitReceive+0x1a4>
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d014      	beq.n	8007ffc <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68da      	ldr	r2, [r3, #12]
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fdc:	b292      	uxth	r2, r2
 8007fde:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fe4:	1c9a      	adds	r2, r3, #2
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3b01      	subs	r3, #1
 8007ff2:	b29a      	uxth	r2, r3
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007ffc:	f7fd fb74 	bl	80056e8 <HAL_GetTick>
 8008000:	4602      	mov	r2, r0
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	1ad3      	subs	r3, r2, r3
 8008006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008008:	429a      	cmp	r2, r3
 800800a:	d80d      	bhi.n	8008028 <HAL_SPI_TransmitReceive+0x1d0>
 800800c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800800e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008012:	d009      	beq.n	8008028 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	2201      	movs	r2, #1
 8008018:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e0bc      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800802c:	b29b      	uxth	r3, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1a0      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x11c>
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008036:	b29b      	uxth	r3, r3
 8008038:	2b00      	cmp	r3, #0
 800803a:	d19b      	bne.n	8007f74 <HAL_SPI_TransmitReceive+0x11c>
 800803c:	e082      	b.n	8008144 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	685b      	ldr	r3, [r3, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d002      	beq.n	800804c <HAL_SPI_TransmitReceive+0x1f4>
 8008046:	8afb      	ldrh	r3, [r7, #22]
 8008048:	2b01      	cmp	r3, #1
 800804a:	d171      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	330c      	adds	r3, #12
 8008056:	7812      	ldrb	r2, [r2, #0]
 8008058:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800805e:	1c5a      	adds	r2, r3, #1
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008068:	b29b      	uxth	r3, r3
 800806a:	3b01      	subs	r3, #1
 800806c:	b29a      	uxth	r2, r3
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008072:	e05d      	b.n	8008130 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	689b      	ldr	r3, [r3, #8]
 800807a:	f003 0302 	and.w	r3, r3, #2
 800807e:	2b02      	cmp	r3, #2
 8008080:	d11c      	bne.n	80080bc <HAL_SPI_TransmitReceive+0x264>
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008086:	b29b      	uxth	r3, r3
 8008088:	2b00      	cmp	r3, #0
 800808a:	d017      	beq.n	80080bc <HAL_SPI_TransmitReceive+0x264>
 800808c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800808e:	2b01      	cmp	r3, #1
 8008090:	d114      	bne.n	80080bc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	330c      	adds	r3, #12
 800809c:	7812      	ldrb	r2, [r2, #0]
 800809e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a4:	1c5a      	adds	r2, r3, #1
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80080ae:	b29b      	uxth	r3, r3
 80080b0:	3b01      	subs	r3, #1
 80080b2:	b29a      	uxth	r2, r3
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80080b8:	2300      	movs	r3, #0
 80080ba:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	689b      	ldr	r3, [r3, #8]
 80080c2:	f003 0301 	and.w	r3, r3, #1
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d119      	bne.n	80080fe <HAL_SPI_TransmitReceive+0x2a6>
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d014      	beq.n	80080fe <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	68da      	ldr	r2, [r3, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080de:	b2d2      	uxtb	r2, r2
 80080e0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080f0:	b29b      	uxth	r3, r3
 80080f2:	3b01      	subs	r3, #1
 80080f4:	b29a      	uxth	r2, r3
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80080fa:	2301      	movs	r3, #1
 80080fc:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80080fe:	f7fd faf3 	bl	80056e8 <HAL_GetTick>
 8008102:	4602      	mov	r2, r0
 8008104:	6a3b      	ldr	r3, [r7, #32]
 8008106:	1ad3      	subs	r3, r2, r3
 8008108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800810a:	429a      	cmp	r2, r3
 800810c:	d803      	bhi.n	8008116 <HAL_SPI_TransmitReceive+0x2be>
 800810e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008110:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008114:	d102      	bne.n	800811c <HAL_SPI_TransmitReceive+0x2c4>
 8008116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008118:	2b00      	cmp	r3, #0
 800811a:	d109      	bne.n	8008130 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2201      	movs	r2, #1
 8008120:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800812c:	2303      	movs	r3, #3
 800812e:	e038      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b00      	cmp	r3, #0
 8008138:	d19c      	bne.n	8008074 <HAL_SPI_TransmitReceive+0x21c>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800813e:	b29b      	uxth	r3, r3
 8008140:	2b00      	cmp	r3, #0
 8008142:	d197      	bne.n	8008074 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008144:	6a3a      	ldr	r2, [r7, #32]
 8008146:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008148:	68f8      	ldr	r0, [r7, #12]
 800814a:	f000 f8b7 	bl	80082bc <SPI_EndRxTxTransaction>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d008      	beq.n	8008166 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2220      	movs	r2, #32
 8008158:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8008162:	2301      	movs	r3, #1
 8008164:	e01d      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d10a      	bne.n	8008184 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800816e:	2300      	movs	r3, #0
 8008170:	613b      	str	r3, [r7, #16]
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	613b      	str	r3, [r7, #16]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	689b      	ldr	r3, [r3, #8]
 8008180:	613b      	str	r3, [r7, #16]
 8008182:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	2201      	movs	r2, #1
 8008188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	2200      	movs	r2, #0
 8008190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008194:	68fb      	ldr	r3, [r7, #12]
 8008196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008198:	2b00      	cmp	r3, #0
 800819a:	d001      	beq.n	80081a0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800819c:	2301      	movs	r3, #1
 800819e:	e000      	b.n	80081a2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80081a0:	2300      	movs	r3, #0
  }
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3728      	adds	r7, #40	@ 0x28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
	...

080081ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b088      	sub	sp, #32
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	60f8      	str	r0, [r7, #12]
 80081b4:	60b9      	str	r1, [r7, #8]
 80081b6:	603b      	str	r3, [r7, #0]
 80081b8:	4613      	mov	r3, r2
 80081ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80081bc:	f7fd fa94 	bl	80056e8 <HAL_GetTick>
 80081c0:	4602      	mov	r2, r0
 80081c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80081c4:	1a9b      	subs	r3, r3, r2
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	4413      	add	r3, r2
 80081ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80081cc:	f7fd fa8c 	bl	80056e8 <HAL_GetTick>
 80081d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80081d2:	4b39      	ldr	r3, [pc, #228]	@ (80082b8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	015b      	lsls	r3, r3, #5
 80081d8:	0d1b      	lsrs	r3, r3, #20
 80081da:	69fa      	ldr	r2, [r7, #28]
 80081dc:	fb02 f303 	mul.w	r3, r2, r3
 80081e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80081e2:	e055      	b.n	8008290 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80081ea:	d051      	beq.n	8008290 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80081ec:	f7fd fa7c 	bl	80056e8 <HAL_GetTick>
 80081f0:	4602      	mov	r2, r0
 80081f2:	69bb      	ldr	r3, [r7, #24]
 80081f4:	1ad3      	subs	r3, r2, r3
 80081f6:	69fa      	ldr	r2, [r7, #28]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d902      	bls.n	8008202 <SPI_WaitFlagStateUntilTimeout+0x56>
 80081fc:	69fb      	ldr	r3, [r7, #28]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d13d      	bne.n	800827e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	685a      	ldr	r2, [r3, #4]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008210:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	685b      	ldr	r3, [r3, #4]
 8008216:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800821a:	d111      	bne.n	8008240 <SPI_WaitFlagStateUntilTimeout+0x94>
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008224:	d004      	beq.n	8008230 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	689b      	ldr	r3, [r3, #8]
 800822a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800822e:	d107      	bne.n	8008240 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800823e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008244:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008248:	d10f      	bne.n	800826a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	681a      	ldr	r2, [r3, #0]
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008258:	601a      	str	r2, [r3, #0]
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008268:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	2201      	movs	r2, #1
 800826e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800827a:	2303      	movs	r3, #3
 800827c:	e018      	b.n	80082b0 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800827e:	697b      	ldr	r3, [r7, #20]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8008284:	2300      	movs	r3, #0
 8008286:	61fb      	str	r3, [r7, #28]
 8008288:	e002      	b.n	8008290 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	3b01      	subs	r3, #1
 800828e:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	4013      	ands	r3, r2
 800829a:	68ba      	ldr	r2, [r7, #8]
 800829c:	429a      	cmp	r2, r3
 800829e:	bf0c      	ite	eq
 80082a0:	2301      	moveq	r3, #1
 80082a2:	2300      	movne	r3, #0
 80082a4:	b2db      	uxtb	r3, r3
 80082a6:	461a      	mov	r2, r3
 80082a8:	79fb      	ldrb	r3, [r7, #7]
 80082aa:	429a      	cmp	r2, r3
 80082ac:	d19a      	bne.n	80081e4 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80082ae:	2300      	movs	r3, #0
}
 80082b0:	4618      	mov	r0, r3
 80082b2:	3720      	adds	r7, #32
 80082b4:	46bd      	mov	sp, r7
 80082b6:	bd80      	pop	{r7, pc}
 80082b8:	2000002c 	.word	0x2000002c

080082bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	b088      	sub	sp, #32
 80082c0:	af02      	add	r7, sp, #8
 80082c2:	60f8      	str	r0, [r7, #12]
 80082c4:	60b9      	str	r1, [r7, #8]
 80082c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	2201      	movs	r2, #1
 80082d0:	2102      	movs	r1, #2
 80082d2:	68f8      	ldr	r0, [r7, #12]
 80082d4:	f7ff ff6a 	bl	80081ac <SPI_WaitFlagStateUntilTimeout>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80082e2:	f043 0220 	orr.w	r2, r3, #32
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80082ea:	2303      	movs	r3, #3
 80082ec:	e032      	b.n	8008354 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80082ee:	4b1b      	ldr	r3, [pc, #108]	@ (800835c <SPI_EndRxTxTransaction+0xa0>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a1b      	ldr	r2, [pc, #108]	@ (8008360 <SPI_EndRxTxTransaction+0xa4>)
 80082f4:	fba2 2303 	umull	r2, r3, r2, r3
 80082f8:	0d5b      	lsrs	r3, r3, #21
 80082fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800830c:	d112      	bne.n	8008334 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	9300      	str	r3, [sp, #0]
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2200      	movs	r2, #0
 8008316:	2180      	movs	r1, #128	@ 0x80
 8008318:	68f8      	ldr	r0, [r7, #12]
 800831a:	f7ff ff47 	bl	80081ac <SPI_WaitFlagStateUntilTimeout>
 800831e:	4603      	mov	r3, r0
 8008320:	2b00      	cmp	r3, #0
 8008322:	d016      	beq.n	8008352 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008328:	f043 0220 	orr.w	r2, r3, #32
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008330:	2303      	movs	r3, #3
 8008332:	e00f      	b.n	8008354 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d00a      	beq.n	8008350 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800833a:	697b      	ldr	r3, [r7, #20]
 800833c:	3b01      	subs	r3, #1
 800833e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	689b      	ldr	r3, [r3, #8]
 8008346:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800834a:	2b80      	cmp	r3, #128	@ 0x80
 800834c:	d0f2      	beq.n	8008334 <SPI_EndRxTxTransaction+0x78>
 800834e:	e000      	b.n	8008352 <SPI_EndRxTxTransaction+0x96>
        break;
 8008350:	bf00      	nop
  }

  return HAL_OK;
 8008352:	2300      	movs	r3, #0
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	2000002c 	.word	0x2000002c
 8008360:	165e9f81 	.word	0x165e9f81

08008364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b082      	sub	sp, #8
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	d101      	bne.n	8008376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008372:	2301      	movs	r3, #1
 8008374:	e041      	b.n	80083fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800837c:	b2db      	uxtb	r3, r3
 800837e:	2b00      	cmp	r3, #0
 8008380:	d106      	bne.n	8008390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800838a:	6878      	ldr	r0, [r7, #4]
 800838c:	f7fc fd9e 	bl	8004ecc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2202      	movs	r2, #2
 8008394:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681a      	ldr	r2, [r3, #0]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	3304      	adds	r3, #4
 80083a0:	4619      	mov	r1, r3
 80083a2:	4610      	mov	r0, r2
 80083a4:	f000 fa06 	bl	80087b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2201      	movs	r2, #1
 80083ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2201      	movs	r2, #1
 80083b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2201      	movs	r2, #1
 80083bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2201      	movs	r2, #1
 80083c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	2201      	movs	r2, #1
 80083cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2201      	movs	r2, #1
 80083ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	2201      	movs	r2, #1
 80083f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3708      	adds	r7, #8
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b082      	sub	sp, #8
 8008406:	af00      	add	r7, sp, #0
 8008408:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008410:	2301      	movs	r3, #1
 8008412:	e041      	b.n	8008498 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f7fc fd01 	bl	8004e30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2202      	movs	r2, #2
 8008432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	3304      	adds	r3, #4
 800843e:	4619      	mov	r1, r3
 8008440:	4610      	mov	r0, r2
 8008442:	f000 f9b7 	bl	80087b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2201      	movs	r2, #1
 800844a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2201      	movs	r2, #1
 8008452:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	2201      	movs	r2, #1
 8008462:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2201      	movs	r2, #1
 800846a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2201      	movs	r2, #1
 8008472:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2201      	movs	r2, #1
 8008482:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	2201      	movs	r2, #1
 800848a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2201      	movs	r2, #1
 8008492:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008496:	2300      	movs	r3, #0
}
 8008498:	4618      	mov	r0, r3
 800849a:	3708      	adds	r7, #8
 800849c:	46bd      	mov	sp, r7
 800849e:	bd80      	pop	{r7, pc}

080084a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b086      	sub	sp, #24
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	60f8      	str	r0, [r7, #12]
 80084a8:	60b9      	str	r1, [r7, #8]
 80084aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084ac:	2300      	movs	r3, #0
 80084ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	d101      	bne.n	80084be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80084ba:	2302      	movs	r3, #2
 80084bc:	e0ae      	b.n	800861c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	2201      	movs	r2, #1
 80084c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2b0c      	cmp	r3, #12
 80084ca:	f200 809f 	bhi.w	800860c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80084ce:	a201      	add	r2, pc, #4	@ (adr r2, 80084d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80084d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d4:	08008509 	.word	0x08008509
 80084d8:	0800860d 	.word	0x0800860d
 80084dc:	0800860d 	.word	0x0800860d
 80084e0:	0800860d 	.word	0x0800860d
 80084e4:	08008549 	.word	0x08008549
 80084e8:	0800860d 	.word	0x0800860d
 80084ec:	0800860d 	.word	0x0800860d
 80084f0:	0800860d 	.word	0x0800860d
 80084f4:	0800858b 	.word	0x0800858b
 80084f8:	0800860d 	.word	0x0800860d
 80084fc:	0800860d 	.word	0x0800860d
 8008500:	0800860d 	.word	0x0800860d
 8008504:	080085cb 	.word	0x080085cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68b9      	ldr	r1, [r7, #8]
 800850e:	4618      	mov	r0, r3
 8008510:	f000 f9f6 	bl	8008900 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	699a      	ldr	r2, [r3, #24]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f042 0208 	orr.w	r2, r2, #8
 8008522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	699a      	ldr	r2, [r3, #24]
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0204 	bic.w	r2, r2, #4
 8008532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	6999      	ldr	r1, [r3, #24]
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	691a      	ldr	r2, [r3, #16]
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	430a      	orrs	r2, r1
 8008544:	619a      	str	r2, [r3, #24]
      break;
 8008546:	e064      	b.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68b9      	ldr	r1, [r7, #8]
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fa46 	bl	80089e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	699a      	ldr	r2, [r3, #24]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	699a      	ldr	r2, [r3, #24]
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	6999      	ldr	r1, [r3, #24]
 800857a:	68bb      	ldr	r3, [r7, #8]
 800857c:	691b      	ldr	r3, [r3, #16]
 800857e:	021a      	lsls	r2, r3, #8
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	430a      	orrs	r2, r1
 8008586:	619a      	str	r2, [r3, #24]
      break;
 8008588:	e043      	b.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68b9      	ldr	r1, [r7, #8]
 8008590:	4618      	mov	r0, r3
 8008592:	f000 fa9b 	bl	8008acc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	69da      	ldr	r2, [r3, #28]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f042 0208 	orr.w	r2, r2, #8
 80085a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	69da      	ldr	r2, [r3, #28]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0204 	bic.w	r2, r2, #4
 80085b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	69d9      	ldr	r1, [r3, #28]
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	691a      	ldr	r2, [r3, #16]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	430a      	orrs	r2, r1
 80085c6:	61da      	str	r2, [r3, #28]
      break;
 80085c8:	e023      	b.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	68b9      	ldr	r1, [r7, #8]
 80085d0:	4618      	mov	r0, r3
 80085d2:	f000 faef 	bl	8008bb4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	69da      	ldr	r2, [r3, #28]
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	69da      	ldr	r2, [r3, #28]
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80085f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	69d9      	ldr	r1, [r3, #28]
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	691b      	ldr	r3, [r3, #16]
 8008600:	021a      	lsls	r2, r3, #8
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	61da      	str	r2, [r3, #28]
      break;
 800860a:	e002      	b.n	8008612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	75fb      	strb	r3, [r7, #23]
      break;
 8008610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	2200      	movs	r2, #0
 8008616:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800861a:	7dfb      	ldrb	r3, [r7, #23]
}
 800861c:	4618      	mov	r0, r3
 800861e:	3718      	adds	r7, #24
 8008620:	46bd      	mov	sp, r7
 8008622:	bd80      	pop	{r7, pc}

08008624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
 800862c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800862e:	2300      	movs	r3, #0
 8008630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008638:	2b01      	cmp	r3, #1
 800863a:	d101      	bne.n	8008640 <HAL_TIM_ConfigClockSource+0x1c>
 800863c:	2302      	movs	r3, #2
 800863e:	e0b4      	b.n	80087aa <HAL_TIM_ConfigClockSource+0x186>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2201      	movs	r2, #1
 8008644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	689b      	ldr	r3, [r3, #8]
 8008656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008658:	68bb      	ldr	r3, [r7, #8]
 800865a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800865e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68ba      	ldr	r2, [r7, #8]
 800866e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008670:	683b      	ldr	r3, [r7, #0]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008678:	d03e      	beq.n	80086f8 <HAL_TIM_ConfigClockSource+0xd4>
 800867a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800867e:	f200 8087 	bhi.w	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 8008682:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008686:	f000 8086 	beq.w	8008796 <HAL_TIM_ConfigClockSource+0x172>
 800868a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800868e:	d87f      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 8008690:	2b70      	cmp	r3, #112	@ 0x70
 8008692:	d01a      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0xa6>
 8008694:	2b70      	cmp	r3, #112	@ 0x70
 8008696:	d87b      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 8008698:	2b60      	cmp	r3, #96	@ 0x60
 800869a:	d050      	beq.n	800873e <HAL_TIM_ConfigClockSource+0x11a>
 800869c:	2b60      	cmp	r3, #96	@ 0x60
 800869e:	d877      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 80086a0:	2b50      	cmp	r3, #80	@ 0x50
 80086a2:	d03c      	beq.n	800871e <HAL_TIM_ConfigClockSource+0xfa>
 80086a4:	2b50      	cmp	r3, #80	@ 0x50
 80086a6:	d873      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 80086a8:	2b40      	cmp	r3, #64	@ 0x40
 80086aa:	d058      	beq.n	800875e <HAL_TIM_ConfigClockSource+0x13a>
 80086ac:	2b40      	cmp	r3, #64	@ 0x40
 80086ae:	d86f      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 80086b0:	2b30      	cmp	r3, #48	@ 0x30
 80086b2:	d064      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x15a>
 80086b4:	2b30      	cmp	r3, #48	@ 0x30
 80086b6:	d86b      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 80086b8:	2b20      	cmp	r3, #32
 80086ba:	d060      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x15a>
 80086bc:	2b20      	cmp	r3, #32
 80086be:	d867      	bhi.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d05c      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x15a>
 80086c4:	2b10      	cmp	r3, #16
 80086c6:	d05a      	beq.n	800877e <HAL_TIM_ConfigClockSource+0x15a>
 80086c8:	e062      	b.n	8008790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80086d6:	683b      	ldr	r3, [r7, #0]
 80086d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80086da:	f000 fb3b 	bl	8008d54 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	689b      	ldr	r3, [r3, #8]
 80086e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80086ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	68ba      	ldr	r2, [r7, #8]
 80086f4:	609a      	str	r2, [r3, #8]
      break;
 80086f6:	e04f      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008708:	f000 fb24 	bl	8008d54 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	689a      	ldr	r2, [r3, #8]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800871a:	609a      	str	r2, [r3, #8]
      break;
 800871c:	e03c      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800872a:	461a      	mov	r2, r3
 800872c:	f000 fa98 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2150      	movs	r1, #80	@ 0x50
 8008736:	4618      	mov	r0, r3
 8008738:	f000 faf1 	bl	8008d1e <TIM_ITRx_SetConfig>
      break;
 800873c:	e02c      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008742:	683b      	ldr	r3, [r7, #0]
 8008744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800874a:	461a      	mov	r2, r3
 800874c:	f000 fab7 	bl	8008cbe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2160      	movs	r1, #96	@ 0x60
 8008756:	4618      	mov	r0, r3
 8008758:	f000 fae1 	bl	8008d1e <TIM_ITRx_SetConfig>
      break;
 800875c:	e01c      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800876a:	461a      	mov	r2, r3
 800876c:	f000 fa78 	bl	8008c60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	2140      	movs	r1, #64	@ 0x40
 8008776:	4618      	mov	r0, r3
 8008778:	f000 fad1 	bl	8008d1e <TIM_ITRx_SetConfig>
      break;
 800877c:	e00c      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4619      	mov	r1, r3
 8008788:	4610      	mov	r0, r2
 800878a:	f000 fac8 	bl	8008d1e <TIM_ITRx_SetConfig>
      break;
 800878e:	e003      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008790:	2301      	movs	r3, #1
 8008792:	73fb      	strb	r3, [r7, #15]
      break;
 8008794:	e000      	b.n	8008798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80087a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3710      	adds	r7, #16
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b085      	sub	sp, #20
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	4a43      	ldr	r2, [pc, #268]	@ (80088d4 <TIM_Base_SetConfig+0x120>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d013      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d2:	d00f      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	4a40      	ldr	r2, [pc, #256]	@ (80088d8 <TIM_Base_SetConfig+0x124>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d00b      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	4a3f      	ldr	r2, [pc, #252]	@ (80088dc <TIM_Base_SetConfig+0x128>)
 80087e0:	4293      	cmp	r3, r2
 80087e2:	d007      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	4a3e      	ldr	r2, [pc, #248]	@ (80088e0 <TIM_Base_SetConfig+0x12c>)
 80087e8:	4293      	cmp	r3, r2
 80087ea:	d003      	beq.n	80087f4 <TIM_Base_SetConfig+0x40>
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	4a3d      	ldr	r2, [pc, #244]	@ (80088e4 <TIM_Base_SetConfig+0x130>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d108      	bne.n	8008806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087fc:	683b      	ldr	r3, [r7, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	68fa      	ldr	r2, [r7, #12]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	4a32      	ldr	r2, [pc, #200]	@ (80088d4 <TIM_Base_SetConfig+0x120>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d02b      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008814:	d027      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	4a2f      	ldr	r2, [pc, #188]	@ (80088d8 <TIM_Base_SetConfig+0x124>)
 800881a:	4293      	cmp	r3, r2
 800881c:	d023      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	4a2e      	ldr	r2, [pc, #184]	@ (80088dc <TIM_Base_SetConfig+0x128>)
 8008822:	4293      	cmp	r3, r2
 8008824:	d01f      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	4a2d      	ldr	r2, [pc, #180]	@ (80088e0 <TIM_Base_SetConfig+0x12c>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d01b      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	4a2c      	ldr	r2, [pc, #176]	@ (80088e4 <TIM_Base_SetConfig+0x130>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d017      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	4a2b      	ldr	r2, [pc, #172]	@ (80088e8 <TIM_Base_SetConfig+0x134>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d013      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	4a2a      	ldr	r2, [pc, #168]	@ (80088ec <TIM_Base_SetConfig+0x138>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d00f      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	4a29      	ldr	r2, [pc, #164]	@ (80088f0 <TIM_Base_SetConfig+0x13c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d00b      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	4a28      	ldr	r2, [pc, #160]	@ (80088f4 <TIM_Base_SetConfig+0x140>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d007      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	4a27      	ldr	r2, [pc, #156]	@ (80088f8 <TIM_Base_SetConfig+0x144>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d003      	beq.n	8008866 <TIM_Base_SetConfig+0xb2>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	4a26      	ldr	r2, [pc, #152]	@ (80088fc <TIM_Base_SetConfig+0x148>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d108      	bne.n	8008878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800886c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800886e:	683b      	ldr	r3, [r7, #0]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	68fa      	ldr	r2, [r7, #12]
 8008874:	4313      	orrs	r3, r2
 8008876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800887e:	683b      	ldr	r3, [r7, #0]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	4313      	orrs	r3, r2
 8008884:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	689a      	ldr	r2, [r3, #8]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800888e:	683b      	ldr	r3, [r7, #0]
 8008890:	681a      	ldr	r2, [r3, #0]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a0e      	ldr	r2, [pc, #56]	@ (80088d4 <TIM_Base_SetConfig+0x120>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d003      	beq.n	80088a6 <TIM_Base_SetConfig+0xf2>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a10      	ldr	r2, [pc, #64]	@ (80088e4 <TIM_Base_SetConfig+0x130>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d103      	bne.n	80088ae <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088a6:	683b      	ldr	r3, [r7, #0]
 80088a8:	691a      	ldr	r2, [r3, #16]
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f043 0204 	orr.w	r2, r3, #4
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2201      	movs	r2, #1
 80088be:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	68fa      	ldr	r2, [r7, #12]
 80088c4:	601a      	str	r2, [r3, #0]
}
 80088c6:	bf00      	nop
 80088c8:	3714      	adds	r7, #20
 80088ca:	46bd      	mov	sp, r7
 80088cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088d0:	4770      	bx	lr
 80088d2:	bf00      	nop
 80088d4:	40010000 	.word	0x40010000
 80088d8:	40000400 	.word	0x40000400
 80088dc:	40000800 	.word	0x40000800
 80088e0:	40000c00 	.word	0x40000c00
 80088e4:	40010400 	.word	0x40010400
 80088e8:	40014000 	.word	0x40014000
 80088ec:	40014400 	.word	0x40014400
 80088f0:	40014800 	.word	0x40014800
 80088f4:	40001800 	.word	0x40001800
 80088f8:	40001c00 	.word	0x40001c00
 80088fc:	40002000 	.word	0x40002000

08008900 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
 8008908:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6a1b      	ldr	r3, [r3, #32]
 800890e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	f023 0201 	bic.w	r2, r3, #1
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	699b      	ldr	r3, [r3, #24]
 8008926:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008928:	68fb      	ldr	r3, [r7, #12]
 800892a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800892e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f023 0303 	bic.w	r3, r3, #3
 8008936:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008938:	683b      	ldr	r3, [r7, #0]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	68fa      	ldr	r2, [r7, #12]
 800893e:	4313      	orrs	r3, r2
 8008940:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	f023 0302 	bic.w	r3, r3, #2
 8008948:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	689b      	ldr	r3, [r3, #8]
 800894e:	697a      	ldr	r2, [r7, #20]
 8008950:	4313      	orrs	r3, r2
 8008952:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	4a20      	ldr	r2, [pc, #128]	@ (80089d8 <TIM_OC1_SetConfig+0xd8>)
 8008958:	4293      	cmp	r3, r2
 800895a:	d003      	beq.n	8008964 <TIM_OC1_SetConfig+0x64>
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	4a1f      	ldr	r2, [pc, #124]	@ (80089dc <TIM_OC1_SetConfig+0xdc>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d10c      	bne.n	800897e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008964:	697b      	ldr	r3, [r7, #20]
 8008966:	f023 0308 	bic.w	r3, r3, #8
 800896a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	68db      	ldr	r3, [r3, #12]
 8008970:	697a      	ldr	r2, [r7, #20]
 8008972:	4313      	orrs	r3, r2
 8008974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008976:	697b      	ldr	r3, [r7, #20]
 8008978:	f023 0304 	bic.w	r3, r3, #4
 800897c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	4a15      	ldr	r2, [pc, #84]	@ (80089d8 <TIM_OC1_SetConfig+0xd8>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d003      	beq.n	800898e <TIM_OC1_SetConfig+0x8e>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4a14      	ldr	r2, [pc, #80]	@ (80089dc <TIM_OC1_SetConfig+0xdc>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d111      	bne.n	80089b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800899c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800899e:	683b      	ldr	r3, [r7, #0]
 80089a0:	695b      	ldr	r3, [r3, #20]
 80089a2:	693a      	ldr	r2, [r7, #16]
 80089a4:	4313      	orrs	r3, r2
 80089a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	699b      	ldr	r3, [r3, #24]
 80089ac:	693a      	ldr	r2, [r7, #16]
 80089ae:	4313      	orrs	r3, r2
 80089b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	693a      	ldr	r2, [r7, #16]
 80089b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	697a      	ldr	r2, [r7, #20]
 80089ca:	621a      	str	r2, [r3, #32]
}
 80089cc:	bf00      	nop
 80089ce:	371c      	adds	r7, #28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	40010000 	.word	0x40010000
 80089dc:	40010400 	.word	0x40010400

080089e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089e0:	b480      	push	{r7}
 80089e2:	b087      	sub	sp, #28
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	f023 0210 	bic.w	r2, r3, #16
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	699b      	ldr	r3, [r3, #24]
 8008a06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a18:	683b      	ldr	r3, [r7, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	021b      	lsls	r3, r3, #8
 8008a1e:	68fa      	ldr	r2, [r7, #12]
 8008a20:	4313      	orrs	r3, r2
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a24:	697b      	ldr	r3, [r7, #20]
 8008a26:	f023 0320 	bic.w	r3, r3, #32
 8008a2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a2c:	683b      	ldr	r3, [r7, #0]
 8008a2e:	689b      	ldr	r3, [r3, #8]
 8008a30:	011b      	lsls	r3, r3, #4
 8008a32:	697a      	ldr	r2, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	4a22      	ldr	r2, [pc, #136]	@ (8008ac4 <TIM_OC2_SetConfig+0xe4>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d003      	beq.n	8008a48 <TIM_OC2_SetConfig+0x68>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a21      	ldr	r2, [pc, #132]	@ (8008ac8 <TIM_OC2_SetConfig+0xe8>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d10d      	bne.n	8008a64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a48:	697b      	ldr	r3, [r7, #20]
 8008a4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	68db      	ldr	r3, [r3, #12]
 8008a54:	011b      	lsls	r3, r3, #4
 8008a56:	697a      	ldr	r2, [r7, #20]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	4a17      	ldr	r2, [pc, #92]	@ (8008ac4 <TIM_OC2_SetConfig+0xe4>)
 8008a68:	4293      	cmp	r3, r2
 8008a6a:	d003      	beq.n	8008a74 <TIM_OC2_SetConfig+0x94>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	4a16      	ldr	r2, [pc, #88]	@ (8008ac8 <TIM_OC2_SetConfig+0xe8>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d113      	bne.n	8008a9c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a7c:	693b      	ldr	r3, [r7, #16]
 8008a7e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	695b      	ldr	r3, [r3, #20]
 8008a88:	009b      	lsls	r3, r3, #2
 8008a8a:	693a      	ldr	r2, [r7, #16]
 8008a8c:	4313      	orrs	r3, r2
 8008a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	699b      	ldr	r3, [r3, #24]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	693a      	ldr	r2, [r7, #16]
 8008aa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	68fa      	ldr	r2, [r7, #12]
 8008aa6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	685a      	ldr	r2, [r3, #4]
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	697a      	ldr	r2, [r7, #20]
 8008ab4:	621a      	str	r2, [r3, #32]
}
 8008ab6:	bf00      	nop
 8008ab8:	371c      	adds	r7, #28
 8008aba:	46bd      	mov	sp, r7
 8008abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	40010000 	.word	0x40010000
 8008ac8:	40010400 	.word	0x40010400

08008acc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008acc:	b480      	push	{r7}
 8008ace:	b087      	sub	sp, #28
 8008ad0:	af00      	add	r7, sp, #0
 8008ad2:	6078      	str	r0, [r7, #4]
 8008ad4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6a1b      	ldr	r3, [r3, #32]
 8008ada:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6a1b      	ldr	r3, [r3, #32]
 8008ae0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	69db      	ldr	r3, [r3, #28]
 8008af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008afa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0303 	bic.w	r3, r3, #3
 8008b02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	68fa      	ldr	r2, [r7, #12]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	021b      	lsls	r3, r3, #8
 8008b1c:	697a      	ldr	r2, [r7, #20]
 8008b1e:	4313      	orrs	r3, r2
 8008b20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	4a21      	ldr	r2, [pc, #132]	@ (8008bac <TIM_OC3_SetConfig+0xe0>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d003      	beq.n	8008b32 <TIM_OC3_SetConfig+0x66>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a20      	ldr	r2, [pc, #128]	@ (8008bb0 <TIM_OC3_SetConfig+0xe4>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10d      	bne.n	8008b4e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	021b      	lsls	r3, r3, #8
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a16      	ldr	r2, [pc, #88]	@ (8008bac <TIM_OC3_SetConfig+0xe0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d003      	beq.n	8008b5e <TIM_OC3_SetConfig+0x92>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	4a15      	ldr	r2, [pc, #84]	@ (8008bb0 <TIM_OC3_SetConfig+0xe4>)
 8008b5a:	4293      	cmp	r3, r2
 8008b5c:	d113      	bne.n	8008b86 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b66:	693b      	ldr	r3, [r7, #16]
 8008b68:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	695b      	ldr	r3, [r3, #20]
 8008b72:	011b      	lsls	r3, r3, #4
 8008b74:	693a      	ldr	r2, [r7, #16]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b7a:	683b      	ldr	r3, [r7, #0]
 8008b7c:	699b      	ldr	r3, [r3, #24]
 8008b7e:	011b      	lsls	r3, r3, #4
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	4313      	orrs	r3, r2
 8008b84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68fa      	ldr	r2, [r7, #12]
 8008b90:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	685a      	ldr	r2, [r3, #4]
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	697a      	ldr	r2, [r7, #20]
 8008b9e:	621a      	str	r2, [r3, #32]
}
 8008ba0:	bf00      	nop
 8008ba2:	371c      	adds	r7, #28
 8008ba4:	46bd      	mov	sp, r7
 8008ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008baa:	4770      	bx	lr
 8008bac:	40010000 	.word	0x40010000
 8008bb0:	40010400 	.word	0x40010400

08008bb4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b087      	sub	sp, #28
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
 8008bbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a1b      	ldr	r3, [r3, #32]
 8008bc2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	6a1b      	ldr	r3, [r3, #32]
 8008bc8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	685b      	ldr	r3, [r3, #4]
 8008bd4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	69db      	ldr	r3, [r3, #28]
 8008bda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008be2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	021b      	lsls	r3, r3, #8
 8008bf2:	68fa      	ldr	r2, [r7, #12]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bf8:	693b      	ldr	r3, [r7, #16]
 8008bfa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bfe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	689b      	ldr	r3, [r3, #8]
 8008c04:	031b      	lsls	r3, r3, #12
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	4a12      	ldr	r2, [pc, #72]	@ (8008c58 <TIM_OC4_SetConfig+0xa4>)
 8008c10:	4293      	cmp	r3, r2
 8008c12:	d003      	beq.n	8008c1c <TIM_OC4_SetConfig+0x68>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	4a11      	ldr	r2, [pc, #68]	@ (8008c5c <TIM_OC4_SetConfig+0xa8>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d109      	bne.n	8008c30 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	695b      	ldr	r3, [r3, #20]
 8008c28:	019b      	lsls	r3, r3, #6
 8008c2a:	697a      	ldr	r2, [r7, #20]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	685a      	ldr	r2, [r3, #4]
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	693a      	ldr	r2, [r7, #16]
 8008c48:	621a      	str	r2, [r3, #32]
}
 8008c4a:	bf00      	nop
 8008c4c:	371c      	adds	r7, #28
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c54:	4770      	bx	lr
 8008c56:	bf00      	nop
 8008c58:	40010000 	.word	0x40010000
 8008c5c:	40010400 	.word	0x40010400

08008c60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c60:	b480      	push	{r7}
 8008c62:	b087      	sub	sp, #28
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	60f8      	str	r0, [r7, #12]
 8008c68:	60b9      	str	r1, [r7, #8]
 8008c6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a1b      	ldr	r3, [r3, #32]
 8008c70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	6a1b      	ldr	r3, [r3, #32]
 8008c76:	f023 0201 	bic.w	r2, r3, #1
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	699b      	ldr	r3, [r3, #24]
 8008c82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	011b      	lsls	r3, r3, #4
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c96:	697b      	ldr	r3, [r7, #20]
 8008c98:	f023 030a 	bic.w	r3, r3, #10
 8008c9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c9e:	697a      	ldr	r2, [r7, #20]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	697a      	ldr	r2, [r7, #20]
 8008cb0:	621a      	str	r2, [r3, #32]
}
 8008cb2:	bf00      	nop
 8008cb4:	371c      	adds	r7, #28
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr

08008cbe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cbe:	b480      	push	{r7}
 8008cc0:	b087      	sub	sp, #28
 8008cc2:	af00      	add	r7, sp, #0
 8008cc4:	60f8      	str	r0, [r7, #12]
 8008cc6:	60b9      	str	r1, [r7, #8]
 8008cc8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	6a1b      	ldr	r3, [r3, #32]
 8008cce:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	6a1b      	ldr	r3, [r3, #32]
 8008cd4:	f023 0210 	bic.w	r2, r3, #16
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ce2:	693b      	ldr	r3, [r7, #16]
 8008ce4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008ce8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	031b      	lsls	r3, r3, #12
 8008cee:	693a      	ldr	r2, [r7, #16]
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cf4:	697b      	ldr	r3, [r7, #20]
 8008cf6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cfa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008cfc:	68bb      	ldr	r3, [r7, #8]
 8008cfe:	011b      	lsls	r3, r3, #4
 8008d00:	697a      	ldr	r2, [r7, #20]
 8008d02:	4313      	orrs	r3, r2
 8008d04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	693a      	ldr	r2, [r7, #16]
 8008d0a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	697a      	ldr	r2, [r7, #20]
 8008d10:	621a      	str	r2, [r3, #32]
}
 8008d12:	bf00      	nop
 8008d14:	371c      	adds	r7, #28
 8008d16:	46bd      	mov	sp, r7
 8008d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1c:	4770      	bx	lr

08008d1e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d1e:	b480      	push	{r7}
 8008d20:	b085      	sub	sp, #20
 8008d22:	af00      	add	r7, sp, #0
 8008d24:	6078      	str	r0, [r7, #4]
 8008d26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d34:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d36:	683a      	ldr	r2, [r7, #0]
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	f043 0307 	orr.w	r3, r3, #7
 8008d40:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	609a      	str	r2, [r3, #8]
}
 8008d48:	bf00      	nop
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b087      	sub	sp, #28
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	60f8      	str	r0, [r7, #12]
 8008d5c:	60b9      	str	r1, [r7, #8]
 8008d5e:	607a      	str	r2, [r7, #4]
 8008d60:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d68:	697b      	ldr	r3, [r7, #20]
 8008d6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d6e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	021a      	lsls	r2, r3, #8
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	431a      	orrs	r2, r3
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	4313      	orrs	r3, r2
 8008d7c:	697a      	ldr	r2, [r7, #20]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	697a      	ldr	r2, [r7, #20]
 8008d86:	609a      	str	r2, [r3, #8]
}
 8008d88:	bf00      	nop
 8008d8a:	371c      	adds	r7, #28
 8008d8c:	46bd      	mov	sp, r7
 8008d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d92:	4770      	bx	lr

08008d94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d94:	b480      	push	{r7}
 8008d96:	b085      	sub	sp, #20
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]
 8008d9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008da4:	2b01      	cmp	r3, #1
 8008da6:	d101      	bne.n	8008dac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008da8:	2302      	movs	r3, #2
 8008daa:	e05a      	b.n	8008e62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	2201      	movs	r2, #1
 8008db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2202      	movs	r2, #2
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008dd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68fa      	ldr	r2, [r7, #12]
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a21      	ldr	r2, [pc, #132]	@ (8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d022      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008df8:	d01d      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8008e74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008e00:	4293      	cmp	r3, r2
 8008e02:	d018      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	4a1b      	ldr	r2, [pc, #108]	@ (8008e78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d013      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a1a      	ldr	r2, [pc, #104]	@ (8008e7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d00e      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a18      	ldr	r2, [pc, #96]	@ (8008e80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d009      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a17      	ldr	r2, [pc, #92]	@ (8008e84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d004      	beq.n	8008e36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a15      	ldr	r2, [pc, #84]	@ (8008e88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d10c      	bne.n	8008e50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e36:	68bb      	ldr	r3, [r7, #8]
 8008e38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	685b      	ldr	r3, [r3, #4]
 8008e42:	68ba      	ldr	r2, [r7, #8]
 8008e44:	4313      	orrs	r3, r2
 8008e46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	68ba      	ldr	r2, [r7, #8]
 8008e4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	2201      	movs	r2, #1
 8008e54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	40010000 	.word	0x40010000
 8008e74:	40000400 	.word	0x40000400
 8008e78:	40000800 	.word	0x40000800
 8008e7c:	40000c00 	.word	0x40000c00
 8008e80:	40010400 	.word	0x40010400
 8008e84:	40014000 	.word	0x40014000
 8008e88:	40001800 	.word	0x40001800

08008e8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008e8c:	b480      	push	{r7}
 8008e8e:	b085      	sub	sp, #20
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	6078      	str	r0, [r7, #4]
 8008e94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008e96:	2300      	movs	r3, #0
 8008e98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e03d      	b.n	8008f24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	68db      	ldr	r3, [r3, #12]
 8008eba:	4313      	orrs	r3, r2
 8008ebc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	4313      	orrs	r3, r2
 8008eca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8008ed2:	683b      	ldr	r3, [r7, #0]
 8008ed4:	685b      	ldr	r3, [r3, #4]
 8008ed6:	4313      	orrs	r3, r2
 8008ed8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008eee:	683b      	ldr	r3, [r7, #0]
 8008ef0:	691b      	ldr	r3, [r3, #16]
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	695b      	ldr	r3, [r3, #20]
 8008f00:	4313      	orrs	r3, r2
 8008f02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8008f0a:	683b      	ldr	r3, [r7, #0]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68fa      	ldr	r2, [r7, #12]
 8008f18:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008f22:	2300      	movs	r3, #0
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3714      	adds	r7, #20
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2e:	4770      	bx	lr

08008f30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b082      	sub	sp, #8
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d101      	bne.n	8008f42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	e042      	b.n	8008fc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008f48:	b2db      	uxtb	r3, r3
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d106      	bne.n	8008f5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	2200      	movs	r2, #0
 8008f52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008f56:	6878      	ldr	r0, [r7, #4]
 8008f58:	f7fc f8ec 	bl	8005134 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2224      	movs	r2, #36	@ 0x24
 8008f60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68da      	ldr	r2, [r3, #12]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008f74:	6878      	ldr	r0, [r7, #4]
 8008f76:	f000 ffc7 	bl	8009f08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	691a      	ldr	r2, [r3, #16]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8008f88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	695a      	ldr	r2, [r3, #20]
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8008f98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	68da      	ldr	r2, [r3, #12]
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008fa8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	2200      	movs	r2, #0
 8008fae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2220      	movs	r2, #32
 8008fbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008fc6:	2300      	movs	r3, #0
}
 8008fc8:	4618      	mov	r0, r3
 8008fca:	3708      	adds	r7, #8
 8008fcc:	46bd      	mov	sp, r7
 8008fce:	bd80      	pop	{r7, pc}

08008fd0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	b08a      	sub	sp, #40	@ 0x28
 8008fd4:	af02      	add	r7, sp, #8
 8008fd6:	60f8      	str	r0, [r7, #12]
 8008fd8:	60b9      	str	r1, [r7, #8]
 8008fda:	603b      	str	r3, [r7, #0]
 8008fdc:	4613      	mov	r3, r2
 8008fde:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008fea:	b2db      	uxtb	r3, r3
 8008fec:	2b20      	cmp	r3, #32
 8008fee:	d175      	bne.n	80090dc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d002      	beq.n	8008ffc <HAL_UART_Transmit+0x2c>
 8008ff6:	88fb      	ldrh	r3, [r7, #6]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d101      	bne.n	8009000 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	e06e      	b.n	80090de <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	2200      	movs	r2, #0
 8009004:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	2221      	movs	r2, #33	@ 0x21
 800900a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800900e:	f7fc fb6b 	bl	80056e8 <HAL_GetTick>
 8009012:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	88fa      	ldrh	r2, [r7, #6]
 8009018:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800901a:	68fb      	ldr	r3, [r7, #12]
 800901c:	88fa      	ldrh	r2, [r7, #6]
 800901e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	689b      	ldr	r3, [r3, #8]
 8009024:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009028:	d108      	bne.n	800903c <HAL_UART_Transmit+0x6c>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	691b      	ldr	r3, [r3, #16]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d104      	bne.n	800903c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	61bb      	str	r3, [r7, #24]
 800903a:	e003      	b.n	8009044 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800903c:	68bb      	ldr	r3, [r7, #8]
 800903e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009040:	2300      	movs	r3, #0
 8009042:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8009044:	e02e      	b.n	80090a4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009046:	683b      	ldr	r3, [r7, #0]
 8009048:	9300      	str	r3, [sp, #0]
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	2200      	movs	r2, #0
 800904e:	2180      	movs	r1, #128	@ 0x80
 8009050:	68f8      	ldr	r0, [r7, #12]
 8009052:	f000 fc97 	bl	8009984 <UART_WaitOnFlagUntilTimeout>
 8009056:	4603      	mov	r3, r0
 8009058:	2b00      	cmp	r3, #0
 800905a:	d005      	beq.n	8009068 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	2220      	movs	r2, #32
 8009060:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e03a      	b.n	80090de <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d10b      	bne.n	8009086 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800906e:	69bb      	ldr	r3, [r7, #24]
 8009070:	881b      	ldrh	r3, [r3, #0]
 8009072:	461a      	mov	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800907c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800907e:	69bb      	ldr	r3, [r7, #24]
 8009080:	3302      	adds	r3, #2
 8009082:	61bb      	str	r3, [r7, #24]
 8009084:	e007      	b.n	8009096 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009086:	69fb      	ldr	r3, [r7, #28]
 8009088:	781a      	ldrb	r2, [r3, #0]
 800908a:	68fb      	ldr	r3, [r7, #12]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	3301      	adds	r3, #1
 8009094:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29a      	uxth	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80090a8:	b29b      	uxth	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d1cb      	bne.n	8009046 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	9300      	str	r3, [sp, #0]
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2200      	movs	r2, #0
 80090b6:	2140      	movs	r1, #64	@ 0x40
 80090b8:	68f8      	ldr	r0, [r7, #12]
 80090ba:	f000 fc63 	bl	8009984 <UART_WaitOnFlagUntilTimeout>
 80090be:	4603      	mov	r3, r0
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d005      	beq.n	80090d0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	2220      	movs	r2, #32
 80090c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80090cc:	2303      	movs	r3, #3
 80090ce:	e006      	b.n	80090de <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2220      	movs	r2, #32
 80090d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	e000      	b.n	80090de <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80090dc:	2302      	movs	r3, #2
  }
}
 80090de:	4618      	mov	r0, r3
 80090e0:	3720      	adds	r7, #32
 80090e2:	46bd      	mov	sp, r7
 80090e4:	bd80      	pop	{r7, pc}

080090e6 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80090e6:	b580      	push	{r7, lr}
 80090e8:	b084      	sub	sp, #16
 80090ea:	af00      	add	r7, sp, #0
 80090ec:	60f8      	str	r0, [r7, #12]
 80090ee:	60b9      	str	r1, [r7, #8]
 80090f0:	4613      	mov	r3, r2
 80090f2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b20      	cmp	r3, #32
 80090fe:	d112      	bne.n	8009126 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d002      	beq.n	800910c <HAL_UART_Receive_DMA+0x26>
 8009106:	88fb      	ldrh	r3, [r7, #6]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800910c:	2301      	movs	r3, #1
 800910e:	e00b      	b.n	8009128 <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8009116:	88fb      	ldrh	r3, [r7, #6]
 8009118:	461a      	mov	r2, r3
 800911a:	68b9      	ldr	r1, [r7, #8]
 800911c:	68f8      	ldr	r0, [r7, #12]
 800911e:	f000 fc8b 	bl	8009a38 <UART_Start_Receive_DMA>
 8009122:	4603      	mov	r3, r0
 8009124:	e000      	b.n	8009128 <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8009126:	2302      	movs	r3, #2
  }
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08c      	sub	sp, #48	@ 0x30
 8009134:	af00      	add	r7, sp, #0
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	4613      	mov	r3, r2
 800913c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009144:	b2db      	uxtb	r3, r3
 8009146:	2b20      	cmp	r3, #32
 8009148:	d146      	bne.n	80091d8 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d002      	beq.n	8009156 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8009150:	88fb      	ldrh	r3, [r7, #6]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d101      	bne.n	800915a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8009156:	2301      	movs	r3, #1
 8009158:	e03f      	b.n	80091da <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	2201      	movs	r2, #1
 800915e:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8009166:	88fb      	ldrh	r3, [r7, #6]
 8009168:	461a      	mov	r2, r3
 800916a:	68b9      	ldr	r1, [r7, #8]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f000 fc63 	bl	8009a38 <UART_Start_Receive_DMA>
 8009172:	4603      	mov	r3, r0
 8009174:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800917c:	2b01      	cmp	r3, #1
 800917e:	d125      	bne.n	80091cc <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009180:	2300      	movs	r3, #0
 8009182:	613b      	str	r3, [r7, #16]
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	613b      	str	r3, [r7, #16]
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	613b      	str	r3, [r7, #16]
 8009194:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	330c      	adds	r3, #12
 800919c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	e853 3f00 	ldrex	r3, [r3]
 80091a4:	617b      	str	r3, [r7, #20]
   return(result);
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	f043 0310 	orr.w	r3, r3, #16
 80091ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	330c      	adds	r3, #12
 80091b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80091b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80091b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ba:	6a39      	ldr	r1, [r7, #32]
 80091bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80091be:	e841 2300 	strex	r3, r2, [r1]
 80091c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80091c4:	69fb      	ldr	r3, [r7, #28]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d1e5      	bne.n	8009196 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 80091ca:	e002      	b.n	80091d2 <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 80091cc:	2301      	movs	r3, #1
 80091ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 80091d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80091d6:	e000      	b.n	80091da <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 80091d8:	2302      	movs	r3, #2
  }
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3730      	adds	r7, #48	@ 0x30
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}
	...

080091e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b0ba      	sub	sp, #232	@ 0xe8
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	68db      	ldr	r3, [r3, #12]
 80091fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	695b      	ldr	r3, [r3, #20]
 8009206:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800920a:	2300      	movs	r3, #0
 800920c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8009210:	2300      	movs	r3, #0
 8009212:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009216:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800921a:	f003 030f 	and.w	r3, r3, #15
 800921e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8009222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8009226:	2b00      	cmp	r3, #0
 8009228:	d10f      	bne.n	800924a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800922a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800922e:	f003 0320 	and.w	r3, r3, #32
 8009232:	2b00      	cmp	r3, #0
 8009234:	d009      	beq.n	800924a <HAL_UART_IRQHandler+0x66>
 8009236:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f000 fda2 	bl	8009d8c <UART_Receive_IT>
      return;
 8009248:	e273      	b.n	8009732 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800924a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800924e:	2b00      	cmp	r3, #0
 8009250:	f000 80de 	beq.w	8009410 <HAL_UART_IRQHandler+0x22c>
 8009254:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8009258:	f003 0301 	and.w	r3, r3, #1
 800925c:	2b00      	cmp	r3, #0
 800925e:	d106      	bne.n	800926e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009260:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009264:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8009268:	2b00      	cmp	r3, #0
 800926a:	f000 80d1 	beq.w	8009410 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800926e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009272:	f003 0301 	and.w	r3, r3, #1
 8009276:	2b00      	cmp	r3, #0
 8009278:	d00b      	beq.n	8009292 <HAL_UART_IRQHandler+0xae>
 800927a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800927e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009282:	2b00      	cmp	r3, #0
 8009284:	d005      	beq.n	8009292 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800928a:	f043 0201 	orr.w	r2, r3, #1
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009292:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009296:	f003 0304 	and.w	r3, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	d00b      	beq.n	80092b6 <HAL_UART_IRQHandler+0xd2>
 800929e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092a2:	f003 0301 	and.w	r3, r3, #1
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d005      	beq.n	80092b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092ae:	f043 0202 	orr.w	r2, r3, #2
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80092b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092ba:	f003 0302 	and.w	r3, r3, #2
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d00b      	beq.n	80092da <HAL_UART_IRQHandler+0xf6>
 80092c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092c6:	f003 0301 	and.w	r3, r3, #1
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	d005      	beq.n	80092da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092d2:	f043 0204 	orr.w	r2, r3, #4
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80092da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80092de:	f003 0308 	and.w	r3, r3, #8
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d011      	beq.n	800930a <HAL_UART_IRQHandler+0x126>
 80092e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80092f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80092f6:	f003 0301 	and.w	r3, r3, #1
 80092fa:	2b00      	cmp	r3, #0
 80092fc:	d005      	beq.n	800930a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009302:	f043 0208 	orr.w	r2, r3, #8
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800930e:	2b00      	cmp	r3, #0
 8009310:	f000 820a 	beq.w	8009728 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009314:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8009318:	f003 0320 	and.w	r3, r3, #32
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <HAL_UART_IRQHandler+0x14e>
 8009320:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009324:	f003 0320 	and.w	r3, r3, #32
 8009328:	2b00      	cmp	r3, #0
 800932a:	d002      	beq.n	8009332 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 fd2d 	bl	8009d8c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	695b      	ldr	r3, [r3, #20]
 8009338:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800933c:	2b40      	cmp	r3, #64	@ 0x40
 800933e:	bf0c      	ite	eq
 8009340:	2301      	moveq	r3, #1
 8009342:	2300      	movne	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800934e:	f003 0308 	and.w	r3, r3, #8
 8009352:	2b00      	cmp	r3, #0
 8009354:	d103      	bne.n	800935e <HAL_UART_IRQHandler+0x17a>
 8009356:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800935a:	2b00      	cmp	r3, #0
 800935c:	d04f      	beq.n	80093fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 fc38 	bl	8009bd4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800936e:	2b40      	cmp	r3, #64	@ 0x40
 8009370:	d141      	bne.n	80093f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	3314      	adds	r3, #20
 8009378:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800937c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8009380:	e853 3f00 	ldrex	r3, [r3]
 8009384:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8009388:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800938c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009390:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3314      	adds	r3, #20
 800939a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800939e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80093a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80093aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80093ae:	e841 2300 	strex	r3, r2, [r1]
 80093b2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80093b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d1d9      	bne.n	8009372 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d013      	beq.n	80093ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ca:	4a8a      	ldr	r2, [pc, #552]	@ (80095f4 <HAL_UART_IRQHandler+0x410>)
 80093cc:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093d2:	4618      	mov	r0, r3
 80093d4:	f7fd fa82 	bl	80068dc <HAL_DMA_Abort_IT>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d016      	beq.n	800940c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093e2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80093e8:	4610      	mov	r0, r2
 80093ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093ec:	e00e      	b.n	800940c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80093ee:	6878      	ldr	r0, [r7, #4]
 80093f0:	f000 f9c0 	bl	8009774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093f4:	e00a      	b.n	800940c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80093f6:	6878      	ldr	r0, [r7, #4]
 80093f8:	f000 f9bc 	bl	8009774 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80093fc:	e006      	b.n	800940c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80093fe:	6878      	ldr	r0, [r7, #4]
 8009400:	f000 f9b8 	bl	8009774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800940a:	e18d      	b.n	8009728 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800940c:	bf00      	nop
    return;
 800940e:	e18b      	b.n	8009728 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009414:	2b01      	cmp	r3, #1
 8009416:	f040 8167 	bne.w	80096e8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800941a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800941e:	f003 0310 	and.w	r3, r3, #16
 8009422:	2b00      	cmp	r3, #0
 8009424:	f000 8160 	beq.w	80096e8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8009428:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800942c:	f003 0310 	and.w	r3, r3, #16
 8009430:	2b00      	cmp	r3, #0
 8009432:	f000 8159 	beq.w	80096e8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009436:	2300      	movs	r3, #0
 8009438:	60bb      	str	r3, [r7, #8]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60bb      	str	r3, [r7, #8]
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	60bb      	str	r3, [r7, #8]
 800944a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695b      	ldr	r3, [r3, #20]
 8009452:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009456:	2b40      	cmp	r3, #64	@ 0x40
 8009458:	f040 80ce 	bne.w	80095f8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	685b      	ldr	r3, [r3, #4]
 8009464:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009468:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800946c:	2b00      	cmp	r3, #0
 800946e:	f000 80a9 	beq.w	80095c4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009476:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800947a:	429a      	cmp	r2, r3
 800947c:	f080 80a2 	bcs.w	80095c4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8009486:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800948c:	69db      	ldr	r3, [r3, #28]
 800948e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009492:	f000 8088 	beq.w	80095a6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	330c      	adds	r3, #12
 800949c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80094a4:	e853 3f00 	ldrex	r3, [r3]
 80094a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80094ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80094b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094b4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	330c      	adds	r3, #12
 80094be:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80094c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80094c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ca:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80094ce:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80094d2:	e841 2300 	strex	r3, r2, [r1]
 80094d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80094da:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d1d9      	bne.n	8009496 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	3314      	adds	r3, #20
 80094e8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094ea:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094ec:	e853 3f00 	ldrex	r3, [r3]
 80094f0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094f2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094f4:	f023 0301 	bic.w	r3, r3, #1
 80094f8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	3314      	adds	r3, #20
 8009502:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8009506:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800950a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800950c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800950e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8009512:	e841 2300 	strex	r3, r2, [r1]
 8009516:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8009518:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800951a:	2b00      	cmp	r3, #0
 800951c:	d1e1      	bne.n	80094e2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3314      	adds	r3, #20
 8009524:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009526:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8009528:	e853 3f00 	ldrex	r3, [r3]
 800952c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800952e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009530:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009534:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	3314      	adds	r3, #20
 800953e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8009542:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8009544:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009546:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009548:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800954a:	e841 2300 	strex	r3, r2, [r1]
 800954e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009550:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009552:	2b00      	cmp	r3, #0
 8009554:	d1e3      	bne.n	800951e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2220      	movs	r2, #32
 800955a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2200      	movs	r2, #0
 8009562:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	330c      	adds	r3, #12
 800956a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800956c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800956e:	e853 3f00 	ldrex	r3, [r3]
 8009572:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009574:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8009576:	f023 0310 	bic.w	r3, r3, #16
 800957a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	330c      	adds	r3, #12
 8009584:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8009588:	65ba      	str	r2, [r7, #88]	@ 0x58
 800958a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800958c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800958e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009590:	e841 2300 	strex	r3, r2, [r1]
 8009594:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8009596:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8009598:	2b00      	cmp	r3, #0
 800959a:	d1e3      	bne.n	8009564 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095a0:	4618      	mov	r0, r3
 80095a2:	f7fd f92b 	bl	80067fc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2202      	movs	r2, #2
 80095aa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80095b4:	b29b      	uxth	r3, r3
 80095b6:	1ad3      	subs	r3, r2, r3
 80095b8:	b29b      	uxth	r3, r3
 80095ba:	4619      	mov	r1, r3
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7f8 ff2d 	bl	800241c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80095c2:	e0b3      	b.n	800972c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095c8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80095cc:	429a      	cmp	r2, r3
 80095ce:	f040 80ad 	bne.w	800972c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80095d6:	69db      	ldr	r3, [r3, #28]
 80095d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80095dc:	f040 80a6 	bne.w	800972c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2202      	movs	r2, #2
 80095e4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80095ea:	4619      	mov	r1, r3
 80095ec:	6878      	ldr	r0, [r7, #4]
 80095ee:	f7f8 ff15 	bl	800241c <HAL_UARTEx_RxEventCallback>
      return;
 80095f2:	e09b      	b.n	800972c <HAL_UART_IRQHandler+0x548>
 80095f4:	08009c9b 	.word	0x08009c9b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009600:	b29b      	uxth	r3, r3
 8009602:	1ad3      	subs	r3, r2, r3
 8009604:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800960c:	b29b      	uxth	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	f000 808e 	beq.w	8009730 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8009614:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8009618:	2b00      	cmp	r3, #0
 800961a:	f000 8089 	beq.w	8009730 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	330c      	adds	r3, #12
 8009624:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009628:	e853 3f00 	ldrex	r3, [r3]
 800962c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800962e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009630:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009634:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	330c      	adds	r3, #12
 800963e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8009642:	647a      	str	r2, [r7, #68]	@ 0x44
 8009644:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009646:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009648:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800964a:	e841 2300 	strex	r3, r2, [r1]
 800964e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1e3      	bne.n	800961e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	3314      	adds	r3, #20
 800965c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800965e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009660:	e853 3f00 	ldrex	r3, [r3]
 8009664:	623b      	str	r3, [r7, #32]
   return(result);
 8009666:	6a3b      	ldr	r3, [r7, #32]
 8009668:	f023 0301 	bic.w	r3, r3, #1
 800966c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	3314      	adds	r3, #20
 8009676:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800967a:	633a      	str	r2, [r7, #48]	@ 0x30
 800967c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800967e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009680:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009682:	e841 2300 	strex	r3, r2, [r1]
 8009686:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800968a:	2b00      	cmp	r3, #0
 800968c:	d1e3      	bne.n	8009656 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2220      	movs	r2, #32
 8009692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	2200      	movs	r2, #0
 800969a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	330c      	adds	r3, #12
 80096a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	e853 3f00 	ldrex	r3, [r3]
 80096aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	f023 0310 	bic.w	r3, r3, #16
 80096b2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	330c      	adds	r3, #12
 80096bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80096c0:	61fa      	str	r2, [r7, #28]
 80096c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	69b9      	ldr	r1, [r7, #24]
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	617b      	str	r3, [r7, #20]
   return(result);
 80096ce:	697b      	ldr	r3, [r7, #20]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e3      	bne.n	800969c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2202      	movs	r2, #2
 80096d8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80096da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80096de:	4619      	mov	r1, r3
 80096e0:	6878      	ldr	r0, [r7, #4]
 80096e2:	f7f8 fe9b 	bl	800241c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80096e6:	e023      	b.n	8009730 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80096e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80096ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d009      	beq.n	8009708 <HAL_UART_IRQHandler+0x524>
 80096f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80096f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d003      	beq.n	8009708 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8009700:	6878      	ldr	r0, [r7, #4]
 8009702:	f000 fadb 	bl	8009cbc <UART_Transmit_IT>
    return;
 8009706:	e014      	b.n	8009732 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8009708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800970c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009710:	2b00      	cmp	r3, #0
 8009712:	d00e      	beq.n	8009732 <HAL_UART_IRQHandler+0x54e>
 8009714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8009718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800971c:	2b00      	cmp	r3, #0
 800971e:	d008      	beq.n	8009732 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	f000 fb1b 	bl	8009d5c <UART_EndTransmit_IT>
    return;
 8009726:	e004      	b.n	8009732 <HAL_UART_IRQHandler+0x54e>
    return;
 8009728:	bf00      	nop
 800972a:	e002      	b.n	8009732 <HAL_UART_IRQHandler+0x54e>
      return;
 800972c:	bf00      	nop
 800972e:	e000      	b.n	8009732 <HAL_UART_IRQHandler+0x54e>
      return;
 8009730:	bf00      	nop
  }
}
 8009732:	37e8      	adds	r7, #232	@ 0xe8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009738:	b480      	push	{r7}
 800973a:	b083      	sub	sp, #12
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009740:	bf00      	nop
 8009742:	370c      	adds	r7, #12
 8009744:	46bd      	mov	sp, r7
 8009746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800974a:	4770      	bx	lr

0800974c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800974c:	b480      	push	{r7}
 800974e:	b083      	sub	sp, #12
 8009750:	af00      	add	r7, sp, #0
 8009752:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8009754:	bf00      	nop
 8009756:	370c      	adds	r7, #12
 8009758:	46bd      	mov	sp, r7
 800975a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800975e:	4770      	bx	lr

08009760 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8009760:	b480      	push	{r7}
 8009762:	b083      	sub	sp, #12
 8009764:	af00      	add	r7, sp, #0
 8009766:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009768:	bf00      	nop
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009774:	b480      	push	{r7}
 8009776:	b083      	sub	sp, #12
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800977c:	bf00      	nop
 800977e:	370c      	adds	r7, #12
 8009780:	46bd      	mov	sp, r7
 8009782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009786:	4770      	bx	lr

08009788 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8009788:	b580      	push	{r7, lr}
 800978a:	b09c      	sub	sp, #112	@ 0x70
 800978c:	af00      	add	r7, sp, #0
 800978e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009794:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d172      	bne.n	800988a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 80097a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097a6:	2200      	movs	r2, #0
 80097a8:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80097aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	330c      	adds	r3, #12
 80097b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80097b4:	e853 3f00 	ldrex	r3, [r3]
 80097b8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80097ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80097bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80097c2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	330c      	adds	r3, #12
 80097c8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80097ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80097cc:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097ce:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80097d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80097d2:	e841 2300 	strex	r3, r2, [r1]
 80097d6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80097d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d1e5      	bne.n	80097aa <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097de:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	3314      	adds	r3, #20
 80097e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80097e8:	e853 3f00 	ldrex	r3, [r3]
 80097ec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80097ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80097f0:	f023 0301 	bic.w	r3, r3, #1
 80097f4:	667b      	str	r3, [r7, #100]	@ 0x64
 80097f6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3314      	adds	r3, #20
 80097fc:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80097fe:	647a      	str	r2, [r7, #68]	@ 0x44
 8009800:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009802:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8009804:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009806:	e841 2300 	strex	r3, r2, [r1]
 800980a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800980c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1e5      	bne.n	80097de <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009812:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	3314      	adds	r3, #20
 8009818:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800981a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800981c:	e853 3f00 	ldrex	r3, [r3]
 8009820:	623b      	str	r3, [r7, #32]
   return(result);
 8009822:	6a3b      	ldr	r3, [r7, #32]
 8009824:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009828:	663b      	str	r3, [r7, #96]	@ 0x60
 800982a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	3314      	adds	r3, #20
 8009830:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8009832:	633a      	str	r2, [r7, #48]	@ 0x30
 8009834:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009836:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009838:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800983a:	e841 2300 	strex	r3, r2, [r1]
 800983e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009842:	2b00      	cmp	r3, #0
 8009844:	d1e5      	bne.n	8009812 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009846:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009848:	2220      	movs	r2, #32
 800984a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800984e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009852:	2b01      	cmp	r3, #1
 8009854:	d119      	bne.n	800988a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	330c      	adds	r3, #12
 800985c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	e853 3f00 	ldrex	r3, [r3]
 8009864:	60fb      	str	r3, [r7, #12]
   return(result);
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	f023 0310 	bic.w	r3, r3, #16
 800986c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800986e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	330c      	adds	r3, #12
 8009874:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8009876:	61fa      	str	r2, [r7, #28]
 8009878:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800987a:	69b9      	ldr	r1, [r7, #24]
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	e841 2300 	strex	r3, r2, [r1]
 8009882:	617b      	str	r3, [r7, #20]
   return(result);
 8009884:	697b      	ldr	r3, [r7, #20]
 8009886:	2b00      	cmp	r3, #0
 8009888:	d1e5      	bne.n	8009856 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800988a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800988c:	2200      	movs	r2, #0
 800988e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009890:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009894:	2b01      	cmp	r3, #1
 8009896:	d106      	bne.n	80098a6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009898:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800989a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800989c:	4619      	mov	r1, r3
 800989e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80098a0:	f7f8 fdbc 	bl	800241c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098a4:	e002      	b.n	80098ac <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 80098a6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80098a8:	f7ff ff50 	bl	800974c <HAL_UART_RxCpltCallback>
}
 80098ac:	bf00      	nop
 80098ae:	3770      	adds	r7, #112	@ 0x70
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}

080098b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b084      	sub	sp, #16
 80098b8:	af00      	add	r7, sp, #0
 80098ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	2201      	movs	r2, #1
 80098c6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098cc:	2b01      	cmp	r3, #1
 80098ce:	d108      	bne.n	80098e2 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80098d4:	085b      	lsrs	r3, r3, #1
 80098d6:	b29b      	uxth	r3, r3
 80098d8:	4619      	mov	r1, r3
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7f8 fd9e 	bl	800241c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80098e0:	e002      	b.n	80098e8 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 80098e2:	68f8      	ldr	r0, [r7, #12]
 80098e4:	f7ff ff3c 	bl	8009760 <HAL_UART_RxHalfCpltCallback>
}
 80098e8:	bf00      	nop
 80098ea:	3710      	adds	r7, #16
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b084      	sub	sp, #16
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80098f8:	2300      	movs	r3, #0
 80098fa:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009900:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8009902:	68bb      	ldr	r3, [r7, #8]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	695b      	ldr	r3, [r3, #20]
 8009908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800990c:	2b80      	cmp	r3, #128	@ 0x80
 800990e:	bf0c      	ite	eq
 8009910:	2301      	moveq	r3, #1
 8009912:	2300      	movne	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8009918:	68bb      	ldr	r3, [r7, #8]
 800991a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800991e:	b2db      	uxtb	r3, r3
 8009920:	2b21      	cmp	r3, #33	@ 0x21
 8009922:	d108      	bne.n	8009936 <UART_DMAError+0x46>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d005      	beq.n	8009936 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	2200      	movs	r2, #0
 800992e:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8009930:	68b8      	ldr	r0, [r7, #8]
 8009932:	f000 f927 	bl	8009b84 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	695b      	ldr	r3, [r3, #20]
 800993c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009940:	2b40      	cmp	r3, #64	@ 0x40
 8009942:	bf0c      	ite	eq
 8009944:	2301      	moveq	r3, #1
 8009946:	2300      	movne	r3, #0
 8009948:	b2db      	uxtb	r3, r3
 800994a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009952:	b2db      	uxtb	r3, r3
 8009954:	2b22      	cmp	r3, #34	@ 0x22
 8009956:	d108      	bne.n	800996a <UART_DMAError+0x7a>
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d005      	beq.n	800996a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	2200      	movs	r2, #0
 8009962:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8009964:	68b8      	ldr	r0, [r7, #8]
 8009966:	f000 f935 	bl	8009bd4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800996a:	68bb      	ldr	r3, [r7, #8]
 800996c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800996e:	f043 0210 	orr.w	r2, r3, #16
 8009972:	68bb      	ldr	r3, [r7, #8]
 8009974:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009976:	68b8      	ldr	r0, [r7, #8]
 8009978:	f7ff fefc 	bl	8009774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800997c:	bf00      	nop
 800997e:	3710      	adds	r7, #16
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	60b9      	str	r1, [r7, #8]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	4613      	mov	r3, r2
 8009992:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009994:	e03b      	b.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009996:	6a3b      	ldr	r3, [r7, #32]
 8009998:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800999c:	d037      	beq.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800999e:	f7fb fea3 	bl	80056e8 <HAL_GetTick>
 80099a2:	4602      	mov	r2, r0
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	1ad3      	subs	r3, r2, r3
 80099a8:	6a3a      	ldr	r2, [r7, #32]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d302      	bcc.n	80099b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80099ae:	6a3b      	ldr	r3, [r7, #32]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d101      	bne.n	80099b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80099b4:	2303      	movs	r3, #3
 80099b6:	e03a      	b.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	f003 0304 	and.w	r3, r3, #4
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d023      	beq.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x8a>
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	2b80      	cmp	r3, #128	@ 0x80
 80099ca:	d020      	beq.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x8a>
 80099cc:	68bb      	ldr	r3, [r7, #8]
 80099ce:	2b40      	cmp	r3, #64	@ 0x40
 80099d0:	d01d      	beq.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f003 0308 	and.w	r3, r3, #8
 80099dc:	2b08      	cmp	r3, #8
 80099de:	d116      	bne.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80099e0:	2300      	movs	r3, #0
 80099e2:	617b      	str	r3, [r7, #20]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	617b      	str	r3, [r7, #20]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	685b      	ldr	r3, [r3, #4]
 80099f2:	617b      	str	r3, [r7, #20]
 80099f4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80099f6:	68f8      	ldr	r0, [r7, #12]
 80099f8:	f000 f8ec 	bl	8009bd4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	2208      	movs	r2, #8
 8009a00:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	2200      	movs	r2, #0
 8009a06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e00f      	b.n	8009a2e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	681a      	ldr	r2, [r3, #0]
 8009a14:	68bb      	ldr	r3, [r7, #8]
 8009a16:	4013      	ands	r3, r2
 8009a18:	68ba      	ldr	r2, [r7, #8]
 8009a1a:	429a      	cmp	r2, r3
 8009a1c:	bf0c      	ite	eq
 8009a1e:	2301      	moveq	r3, #1
 8009a20:	2300      	movne	r3, #0
 8009a22:	b2db      	uxtb	r3, r3
 8009a24:	461a      	mov	r2, r3
 8009a26:	79fb      	ldrb	r3, [r7, #7]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d0b4      	beq.n	8009996 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a2c:	2300      	movs	r3, #0
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
	...

08009a38 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b098      	sub	sp, #96	@ 0x60
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	4613      	mov	r3, r2
 8009a44:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8009a46:	68ba      	ldr	r2, [r7, #8]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	88fa      	ldrh	r2, [r7, #6]
 8009a50:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	2222      	movs	r2, #34	@ 0x22
 8009a5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a64:	4a44      	ldr	r2, [pc, #272]	@ (8009b78 <UART_Start_Receive_DMA+0x140>)
 8009a66:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a6c:	4a43      	ldr	r2, [pc, #268]	@ (8009b7c <UART_Start_Receive_DMA+0x144>)
 8009a6e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a74:	4a42      	ldr	r2, [pc, #264]	@ (8009b80 <UART_Start_Receive_DMA+0x148>)
 8009a76:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8009a80:	f107 0308 	add.w	r3, r7, #8
 8009a84:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3304      	adds	r3, #4
 8009a90:	4619      	mov	r1, r3
 8009a92:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	88fb      	ldrh	r3, [r7, #6]
 8009a98:	f7fc fe58 	bl	800674c <HAL_DMA_Start_IT>
 8009a9c:	4603      	mov	r3, r0
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d008      	beq.n	8009ab4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2210      	movs	r2, #16
 8009aa6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2220      	movs	r2, #32
 8009aac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 8009ab0:	2301      	movs	r3, #1
 8009ab2:	e05d      	b.n	8009b70 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	613b      	str	r3, [r7, #16]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	613b      	str	r3, [r7, #16]
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	685b      	ldr	r3, [r3, #4]
 8009ac6:	613b      	str	r3, [r7, #16]
 8009ac8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	691b      	ldr	r3, [r3, #16]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d019      	beq.n	8009b06 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	330c      	adds	r3, #12
 8009ad8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ada:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009adc:	e853 3f00 	ldrex	r3, [r3]
 8009ae0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8009ae2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8009ae4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009ae8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	330c      	adds	r3, #12
 8009af0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009af2:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8009af4:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009af6:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8009af8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009afa:	e841 2300 	strex	r3, r2, [r1]
 8009afe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009b00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d1e5      	bne.n	8009ad2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	3314      	adds	r3, #20
 8009b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b10:	e853 3f00 	ldrex	r3, [r3]
 8009b14:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009b18:	f043 0301 	orr.w	r3, r3, #1
 8009b1c:	657b      	str	r3, [r7, #84]	@ 0x54
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3314      	adds	r3, #20
 8009b24:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8009b26:	63ba      	str	r2, [r7, #56]	@ 0x38
 8009b28:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b2a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8009b2c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009b2e:	e841 2300 	strex	r3, r2, [r1]
 8009b32:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d1e5      	bne.n	8009b06 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	3314      	adds	r3, #20
 8009b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	e853 3f00 	ldrex	r3, [r3]
 8009b48:	617b      	str	r3, [r7, #20]
   return(result);
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009b50:	653b      	str	r3, [r7, #80]	@ 0x50
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	3314      	adds	r3, #20
 8009b58:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009b5a:	627a      	str	r2, [r7, #36]	@ 0x24
 8009b5c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b5e:	6a39      	ldr	r1, [r7, #32]
 8009b60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b62:	e841 2300 	strex	r3, r2, [r1]
 8009b66:	61fb      	str	r3, [r7, #28]
   return(result);
 8009b68:	69fb      	ldr	r3, [r7, #28]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d1e5      	bne.n	8009b3a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 8009b6e:	2300      	movs	r3, #0
}
 8009b70:	4618      	mov	r0, r3
 8009b72:	3760      	adds	r7, #96	@ 0x60
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}
 8009b78:	08009789 	.word	0x08009789
 8009b7c:	080098b5 	.word	0x080098b5
 8009b80:	080098f1 	.word	0x080098f1

08009b84 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b089      	sub	sp, #36	@ 0x24
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	330c      	adds	r3, #12
 8009b92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b94:	68fb      	ldr	r3, [r7, #12]
 8009b96:	e853 3f00 	ldrex	r3, [r3]
 8009b9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8009ba2:	61fb      	str	r3, [r7, #28]
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	330c      	adds	r3, #12
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	61ba      	str	r2, [r7, #24]
 8009bae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bb0:	6979      	ldr	r1, [r7, #20]
 8009bb2:	69ba      	ldr	r2, [r7, #24]
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	613b      	str	r3, [r7, #16]
   return(result);
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1e5      	bne.n	8009b8c <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2220      	movs	r2, #32
 8009bc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8009bc8:	bf00      	nop
 8009bca:	3724      	adds	r7, #36	@ 0x24
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd2:	4770      	bx	lr

08009bd4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b095      	sub	sp, #84	@ 0x54
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	330c      	adds	r3, #12
 8009be2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009be4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009be6:	e853 3f00 	ldrex	r3, [r3]
 8009bea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009bee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009bf2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	330c      	adds	r3, #12
 8009bfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009bfc:	643a      	str	r2, [r7, #64]	@ 0x40
 8009bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009c02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009c04:	e841 2300 	strex	r3, r2, [r1]
 8009c08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009c0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d1e5      	bne.n	8009bdc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	681b      	ldr	r3, [r3, #0]
 8009c14:	3314      	adds	r3, #20
 8009c16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c18:	6a3b      	ldr	r3, [r7, #32]
 8009c1a:	e853 3f00 	ldrex	r3, [r3]
 8009c1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	f023 0301 	bic.w	r3, r3, #1
 8009c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	3314      	adds	r3, #20
 8009c2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009c30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009c32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c38:	e841 2300 	strex	r3, r2, [r1]
 8009c3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d1e5      	bne.n	8009c10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d119      	bne.n	8009c80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	330c      	adds	r3, #12
 8009c52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	e853 3f00 	ldrex	r3, [r3]
 8009c5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	f023 0310 	bic.w	r3, r3, #16
 8009c62:	647b      	str	r3, [r7, #68]	@ 0x44
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	330c      	adds	r3, #12
 8009c6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009c6c:	61ba      	str	r2, [r7, #24]
 8009c6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c70:	6979      	ldr	r1, [r7, #20]
 8009c72:	69ba      	ldr	r2, [r7, #24]
 8009c74:	e841 2300 	strex	r3, r2, [r1]
 8009c78:	613b      	str	r3, [r7, #16]
   return(result);
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d1e5      	bne.n	8009c4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2220      	movs	r2, #32
 8009c84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8009c8e:	bf00      	nop
 8009c90:	3754      	adds	r7, #84	@ 0x54
 8009c92:	46bd      	mov	sp, r7
 8009c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c98:	4770      	bx	lr

08009c9a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c9a:	b580      	push	{r7, lr}
 8009c9c:	b084      	sub	sp, #16
 8009c9e:	af00      	add	r7, sp, #0
 8009ca0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ca6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	2200      	movs	r2, #0
 8009cac:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009cae:	68f8      	ldr	r0, [r7, #12]
 8009cb0:	f7ff fd60 	bl	8009774 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cb4:	bf00      	nop
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	b085      	sub	sp, #20
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8009cca:	b2db      	uxtb	r3, r3
 8009ccc:	2b21      	cmp	r3, #33	@ 0x21
 8009cce:	d13e      	bne.n	8009d4e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	689b      	ldr	r3, [r3, #8]
 8009cd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cd8:	d114      	bne.n	8009d04 <UART_Transmit_IT+0x48>
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d110      	bne.n	8009d04 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6a1b      	ldr	r3, [r3, #32]
 8009ce6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	881b      	ldrh	r3, [r3, #0]
 8009cec:	461a      	mov	r2, r3
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cf6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	6a1b      	ldr	r3, [r3, #32]
 8009cfc:	1c9a      	adds	r2, r3, #2
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	621a      	str	r2, [r3, #32]
 8009d02:	e008      	b.n	8009d16 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	6a1b      	ldr	r3, [r3, #32]
 8009d08:	1c59      	adds	r1, r3, #1
 8009d0a:	687a      	ldr	r2, [r7, #4]
 8009d0c:	6211      	str	r1, [r2, #32]
 8009d0e:	781a      	ldrb	r2, [r3, #0]
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009d1a:	b29b      	uxth	r3, r3
 8009d1c:	3b01      	subs	r3, #1
 8009d1e:	b29b      	uxth	r3, r3
 8009d20:	687a      	ldr	r2, [r7, #4]
 8009d22:	4619      	mov	r1, r3
 8009d24:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d10f      	bne.n	8009d4a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68da      	ldr	r2, [r3, #12]
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8009d38:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	68da      	ldr	r2, [r3, #12]
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d48:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009d4a:	2300      	movs	r3, #0
 8009d4c:	e000      	b.n	8009d50 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009d4e:	2302      	movs	r3, #2
  }
}
 8009d50:	4618      	mov	r0, r3
 8009d52:	3714      	adds	r7, #20
 8009d54:	46bd      	mov	sp, r7
 8009d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d5a:	4770      	bx	lr

08009d5c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b082      	sub	sp, #8
 8009d60:	af00      	add	r7, sp, #0
 8009d62:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	68da      	ldr	r2, [r3, #12]
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d72:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	2220      	movs	r2, #32
 8009d78:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f7ff fcdb 	bl	8009738 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3708      	adds	r7, #8
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08c      	sub	sp, #48	@ 0x30
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8009d94:	2300      	movs	r3, #0
 8009d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	2b22      	cmp	r3, #34	@ 0x22
 8009da6:	f040 80aa 	bne.w	8009efe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	689b      	ldr	r3, [r3, #8]
 8009dae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009db2:	d115      	bne.n	8009de0 <UART_Receive_IT+0x54>
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	691b      	ldr	r3, [r3, #16]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d111      	bne.n	8009de0 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dc0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	685b      	ldr	r3, [r3, #4]
 8009dc8:	b29b      	uxth	r3, r3
 8009dca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009dce:	b29a      	uxth	r2, r3
 8009dd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dd2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009dd8:	1c9a      	adds	r2, r3, #2
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	629a      	str	r2, [r3, #40]	@ 0x28
 8009dde:	e024      	b.n	8009e2a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009dee:	d007      	beq.n	8009e00 <UART_Receive_IT+0x74>
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	689b      	ldr	r3, [r3, #8]
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d10a      	bne.n	8009e0e <UART_Receive_IT+0x82>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	691b      	ldr	r3, [r3, #16]
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d106      	bne.n	8009e0e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	685b      	ldr	r3, [r3, #4]
 8009e06:	b2da      	uxtb	r2, r3
 8009e08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e0a:	701a      	strb	r2, [r3, #0]
 8009e0c:	e008      	b.n	8009e20 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	685b      	ldr	r3, [r3, #4]
 8009e14:	b2db      	uxtb	r3, r3
 8009e16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009e1a:	b2da      	uxtb	r2, r3
 8009e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e24:	1c5a      	adds	r2, r3, #1
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8009e2e:	b29b      	uxth	r3, r3
 8009e30:	3b01      	subs	r3, #1
 8009e32:	b29b      	uxth	r3, r3
 8009e34:	687a      	ldr	r2, [r7, #4]
 8009e36:	4619      	mov	r1, r3
 8009e38:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d15d      	bne.n	8009efa <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	68da      	ldr	r2, [r3, #12]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f022 0220 	bic.w	r2, r2, #32
 8009e4c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	68da      	ldr	r2, [r3, #12]
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8009e5c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	695a      	ldr	r2, [r3, #20]
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	f022 0201 	bic.w	r2, r2, #1
 8009e6c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d135      	bne.n	8009ef0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	330c      	adds	r3, #12
 8009e90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009e92:	697b      	ldr	r3, [r7, #20]
 8009e94:	e853 3f00 	ldrex	r3, [r3]
 8009e98:	613b      	str	r3, [r7, #16]
   return(result);
 8009e9a:	693b      	ldr	r3, [r7, #16]
 8009e9c:	f023 0310 	bic.w	r3, r3, #16
 8009ea0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	330c      	adds	r3, #12
 8009ea8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eaa:	623a      	str	r2, [r7, #32]
 8009eac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009eae:	69f9      	ldr	r1, [r7, #28]
 8009eb0:	6a3a      	ldr	r2, [r7, #32]
 8009eb2:	e841 2300 	strex	r3, r2, [r1]
 8009eb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1e5      	bne.n	8009e8a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0310 	and.w	r3, r3, #16
 8009ec8:	2b10      	cmp	r3, #16
 8009eca:	d10a      	bne.n	8009ee2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009ecc:	2300      	movs	r3, #0
 8009ece:	60fb      	str	r3, [r7, #12]
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	60fb      	str	r3, [r7, #12]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	685b      	ldr	r3, [r3, #4]
 8009ede:	60fb      	str	r3, [r7, #12]
 8009ee0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8009ee6:	4619      	mov	r1, r3
 8009ee8:	6878      	ldr	r0, [r7, #4]
 8009eea:	f7f8 fa97 	bl	800241c <HAL_UARTEx_RxEventCallback>
 8009eee:	e002      	b.n	8009ef6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f7ff fc2b 	bl	800974c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	e002      	b.n	8009f00 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	e000      	b.n	8009f00 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8009efe:	2302      	movs	r3, #2
  }
}
 8009f00:	4618      	mov	r0, r3
 8009f02:	3730      	adds	r7, #48	@ 0x30
 8009f04:	46bd      	mov	sp, r7
 8009f06:	bd80      	pop	{r7, pc}

08009f08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009f0c:	b0c0      	sub	sp, #256	@ 0x100
 8009f0e:	af00      	add	r7, sp, #0
 8009f10:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	691b      	ldr	r3, [r3, #16]
 8009f1c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8009f20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f24:	68d9      	ldr	r1, [r3, #12]
 8009f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	ea40 0301 	orr.w	r3, r0, r1
 8009f30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f3c:	691b      	ldr	r3, [r3, #16]
 8009f3e:	431a      	orrs	r2, r3
 8009f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f44:	695b      	ldr	r3, [r3, #20]
 8009f46:	431a      	orrs	r2, r3
 8009f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f4c:	69db      	ldr	r3, [r3, #28]
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009f60:	f021 010c 	bic.w	r1, r1, #12
 8009f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f68:	681a      	ldr	r2, [r3, #0]
 8009f6a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009f6e:	430b      	orrs	r3, r1
 8009f70:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009f72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	695b      	ldr	r3, [r3, #20]
 8009f7a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f82:	6999      	ldr	r1, [r3, #24]
 8009f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f88:	681a      	ldr	r2, [r3, #0]
 8009f8a:	ea40 0301 	orr.w	r3, r0, r1
 8009f8e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009f94:	681a      	ldr	r2, [r3, #0]
 8009f96:	4b8f      	ldr	r3, [pc, #572]	@ (800a1d4 <UART_SetConfig+0x2cc>)
 8009f98:	429a      	cmp	r2, r3
 8009f9a:	d005      	beq.n	8009fa8 <UART_SetConfig+0xa0>
 8009f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fa0:	681a      	ldr	r2, [r3, #0]
 8009fa2:	4b8d      	ldr	r3, [pc, #564]	@ (800a1d8 <UART_SetConfig+0x2d0>)
 8009fa4:	429a      	cmp	r2, r3
 8009fa6:	d104      	bne.n	8009fb2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009fa8:	f7fd fe9e 	bl	8007ce8 <HAL_RCC_GetPCLK2Freq>
 8009fac:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009fb0:	e003      	b.n	8009fba <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009fb2:	f7fd fe85 	bl	8007cc0 <HAL_RCC_GetPCLK1Freq>
 8009fb6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009fbe:	69db      	ldr	r3, [r3, #28]
 8009fc0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009fc4:	f040 810c 	bne.w	800a1e0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009fc8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009fcc:	2200      	movs	r2, #0
 8009fce:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8009fd2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8009fd6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009fda:	4622      	mov	r2, r4
 8009fdc:	462b      	mov	r3, r5
 8009fde:	1891      	adds	r1, r2, r2
 8009fe0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8009fe2:	415b      	adcs	r3, r3
 8009fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009fe6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8009fea:	4621      	mov	r1, r4
 8009fec:	eb12 0801 	adds.w	r8, r2, r1
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	eb43 0901 	adc.w	r9, r3, r1
 8009ff6:	f04f 0200 	mov.w	r2, #0
 8009ffa:	f04f 0300 	mov.w	r3, #0
 8009ffe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a002:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a006:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a00a:	4690      	mov	r8, r2
 800a00c:	4699      	mov	r9, r3
 800a00e:	4623      	mov	r3, r4
 800a010:	eb18 0303 	adds.w	r3, r8, r3
 800a014:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800a018:	462b      	mov	r3, r5
 800a01a:	eb49 0303 	adc.w	r3, r9, r3
 800a01e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800a022:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	2200      	movs	r2, #0
 800a02a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800a02e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800a032:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800a036:	460b      	mov	r3, r1
 800a038:	18db      	adds	r3, r3, r3
 800a03a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a03c:	4613      	mov	r3, r2
 800a03e:	eb42 0303 	adc.w	r3, r2, r3
 800a042:	657b      	str	r3, [r7, #84]	@ 0x54
 800a044:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800a048:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800a04c:	f7f6 f918 	bl	8000280 <__aeabi_uldivmod>
 800a050:	4602      	mov	r2, r0
 800a052:	460b      	mov	r3, r1
 800a054:	4b61      	ldr	r3, [pc, #388]	@ (800a1dc <UART_SetConfig+0x2d4>)
 800a056:	fba3 2302 	umull	r2, r3, r3, r2
 800a05a:	095b      	lsrs	r3, r3, #5
 800a05c:	011c      	lsls	r4, r3, #4
 800a05e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a062:	2200      	movs	r2, #0
 800a064:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800a068:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800a06c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800a070:	4642      	mov	r2, r8
 800a072:	464b      	mov	r3, r9
 800a074:	1891      	adds	r1, r2, r2
 800a076:	64b9      	str	r1, [r7, #72]	@ 0x48
 800a078:	415b      	adcs	r3, r3
 800a07a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a07c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800a080:	4641      	mov	r1, r8
 800a082:	eb12 0a01 	adds.w	sl, r2, r1
 800a086:	4649      	mov	r1, r9
 800a088:	eb43 0b01 	adc.w	fp, r3, r1
 800a08c:	f04f 0200 	mov.w	r2, #0
 800a090:	f04f 0300 	mov.w	r3, #0
 800a094:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a098:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a09c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a0a0:	4692      	mov	sl, r2
 800a0a2:	469b      	mov	fp, r3
 800a0a4:	4643      	mov	r3, r8
 800a0a6:	eb1a 0303 	adds.w	r3, sl, r3
 800a0aa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	eb4b 0303 	adc.w	r3, fp, r3
 800a0b4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800a0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800a0c4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800a0c8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800a0cc:	460b      	mov	r3, r1
 800a0ce:	18db      	adds	r3, r3, r3
 800a0d0:	643b      	str	r3, [r7, #64]	@ 0x40
 800a0d2:	4613      	mov	r3, r2
 800a0d4:	eb42 0303 	adc.w	r3, r2, r3
 800a0d8:	647b      	str	r3, [r7, #68]	@ 0x44
 800a0da:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800a0de:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800a0e2:	f7f6 f8cd 	bl	8000280 <__aeabi_uldivmod>
 800a0e6:	4602      	mov	r2, r0
 800a0e8:	460b      	mov	r3, r1
 800a0ea:	4611      	mov	r1, r2
 800a0ec:	4b3b      	ldr	r3, [pc, #236]	@ (800a1dc <UART_SetConfig+0x2d4>)
 800a0ee:	fba3 2301 	umull	r2, r3, r3, r1
 800a0f2:	095b      	lsrs	r3, r3, #5
 800a0f4:	2264      	movs	r2, #100	@ 0x64
 800a0f6:	fb02 f303 	mul.w	r3, r2, r3
 800a0fa:	1acb      	subs	r3, r1, r3
 800a0fc:	00db      	lsls	r3, r3, #3
 800a0fe:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800a102:	4b36      	ldr	r3, [pc, #216]	@ (800a1dc <UART_SetConfig+0x2d4>)
 800a104:	fba3 2302 	umull	r2, r3, r3, r2
 800a108:	095b      	lsrs	r3, r3, #5
 800a10a:	005b      	lsls	r3, r3, #1
 800a10c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800a110:	441c      	add	r4, r3
 800a112:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a116:	2200      	movs	r2, #0
 800a118:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800a11c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800a120:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800a124:	4642      	mov	r2, r8
 800a126:	464b      	mov	r3, r9
 800a128:	1891      	adds	r1, r2, r2
 800a12a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800a12c:	415b      	adcs	r3, r3
 800a12e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a130:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800a134:	4641      	mov	r1, r8
 800a136:	1851      	adds	r1, r2, r1
 800a138:	6339      	str	r1, [r7, #48]	@ 0x30
 800a13a:	4649      	mov	r1, r9
 800a13c:	414b      	adcs	r3, r1
 800a13e:	637b      	str	r3, [r7, #52]	@ 0x34
 800a140:	f04f 0200 	mov.w	r2, #0
 800a144:	f04f 0300 	mov.w	r3, #0
 800a148:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800a14c:	4659      	mov	r1, fp
 800a14e:	00cb      	lsls	r3, r1, #3
 800a150:	4651      	mov	r1, sl
 800a152:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a156:	4651      	mov	r1, sl
 800a158:	00ca      	lsls	r2, r1, #3
 800a15a:	4610      	mov	r0, r2
 800a15c:	4619      	mov	r1, r3
 800a15e:	4603      	mov	r3, r0
 800a160:	4642      	mov	r2, r8
 800a162:	189b      	adds	r3, r3, r2
 800a164:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800a168:	464b      	mov	r3, r9
 800a16a:	460a      	mov	r2, r1
 800a16c:	eb42 0303 	adc.w	r3, r2, r3
 800a170:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800a174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	2200      	movs	r2, #0
 800a17c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800a180:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800a184:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800a188:	460b      	mov	r3, r1
 800a18a:	18db      	adds	r3, r3, r3
 800a18c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a18e:	4613      	mov	r3, r2
 800a190:	eb42 0303 	adc.w	r3, r2, r3
 800a194:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a196:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800a19a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800a19e:	f7f6 f86f 	bl	8000280 <__aeabi_uldivmod>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	460b      	mov	r3, r1
 800a1a6:	4b0d      	ldr	r3, [pc, #52]	@ (800a1dc <UART_SetConfig+0x2d4>)
 800a1a8:	fba3 1302 	umull	r1, r3, r3, r2
 800a1ac:	095b      	lsrs	r3, r3, #5
 800a1ae:	2164      	movs	r1, #100	@ 0x64
 800a1b0:	fb01 f303 	mul.w	r3, r1, r3
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	00db      	lsls	r3, r3, #3
 800a1b8:	3332      	adds	r3, #50	@ 0x32
 800a1ba:	4a08      	ldr	r2, [pc, #32]	@ (800a1dc <UART_SetConfig+0x2d4>)
 800a1bc:	fba2 2303 	umull	r2, r3, r2, r3
 800a1c0:	095b      	lsrs	r3, r3, #5
 800a1c2:	f003 0207 	and.w	r2, r3, #7
 800a1c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4422      	add	r2, r4
 800a1ce:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800a1d0:	e106      	b.n	800a3e0 <UART_SetConfig+0x4d8>
 800a1d2:	bf00      	nop
 800a1d4:	40011000 	.word	0x40011000
 800a1d8:	40011400 	.word	0x40011400
 800a1dc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800a1e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800a1ea:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800a1ee:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800a1f2:	4642      	mov	r2, r8
 800a1f4:	464b      	mov	r3, r9
 800a1f6:	1891      	adds	r1, r2, r2
 800a1f8:	6239      	str	r1, [r7, #32]
 800a1fa:	415b      	adcs	r3, r3
 800a1fc:	627b      	str	r3, [r7, #36]	@ 0x24
 800a1fe:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800a202:	4641      	mov	r1, r8
 800a204:	1854      	adds	r4, r2, r1
 800a206:	4649      	mov	r1, r9
 800a208:	eb43 0501 	adc.w	r5, r3, r1
 800a20c:	f04f 0200 	mov.w	r2, #0
 800a210:	f04f 0300 	mov.w	r3, #0
 800a214:	00eb      	lsls	r3, r5, #3
 800a216:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800a21a:	00e2      	lsls	r2, r4, #3
 800a21c:	4614      	mov	r4, r2
 800a21e:	461d      	mov	r5, r3
 800a220:	4643      	mov	r3, r8
 800a222:	18e3      	adds	r3, r4, r3
 800a224:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800a228:	464b      	mov	r3, r9
 800a22a:	eb45 0303 	adc.w	r3, r5, r3
 800a22e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800a232:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a236:	685b      	ldr	r3, [r3, #4]
 800a238:	2200      	movs	r2, #0
 800a23a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800a23e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800a242:	f04f 0200 	mov.w	r2, #0
 800a246:	f04f 0300 	mov.w	r3, #0
 800a24a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800a24e:	4629      	mov	r1, r5
 800a250:	008b      	lsls	r3, r1, #2
 800a252:	4621      	mov	r1, r4
 800a254:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a258:	4621      	mov	r1, r4
 800a25a:	008a      	lsls	r2, r1, #2
 800a25c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800a260:	f7f6 f80e 	bl	8000280 <__aeabi_uldivmod>
 800a264:	4602      	mov	r2, r0
 800a266:	460b      	mov	r3, r1
 800a268:	4b60      	ldr	r3, [pc, #384]	@ (800a3ec <UART_SetConfig+0x4e4>)
 800a26a:	fba3 2302 	umull	r2, r3, r3, r2
 800a26e:	095b      	lsrs	r3, r3, #5
 800a270:	011c      	lsls	r4, r3, #4
 800a272:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a276:	2200      	movs	r2, #0
 800a278:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800a27c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800a280:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800a284:	4642      	mov	r2, r8
 800a286:	464b      	mov	r3, r9
 800a288:	1891      	adds	r1, r2, r2
 800a28a:	61b9      	str	r1, [r7, #24]
 800a28c:	415b      	adcs	r3, r3
 800a28e:	61fb      	str	r3, [r7, #28]
 800a290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800a294:	4641      	mov	r1, r8
 800a296:	1851      	adds	r1, r2, r1
 800a298:	6139      	str	r1, [r7, #16]
 800a29a:	4649      	mov	r1, r9
 800a29c:	414b      	adcs	r3, r1
 800a29e:	617b      	str	r3, [r7, #20]
 800a2a0:	f04f 0200 	mov.w	r2, #0
 800a2a4:	f04f 0300 	mov.w	r3, #0
 800a2a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800a2ac:	4659      	mov	r1, fp
 800a2ae:	00cb      	lsls	r3, r1, #3
 800a2b0:	4651      	mov	r1, sl
 800a2b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a2b6:	4651      	mov	r1, sl
 800a2b8:	00ca      	lsls	r2, r1, #3
 800a2ba:	4610      	mov	r0, r2
 800a2bc:	4619      	mov	r1, r3
 800a2be:	4603      	mov	r3, r0
 800a2c0:	4642      	mov	r2, r8
 800a2c2:	189b      	adds	r3, r3, r2
 800a2c4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800a2c8:	464b      	mov	r3, r9
 800a2ca:	460a      	mov	r2, r1
 800a2cc:	eb42 0303 	adc.w	r3, r2, r3
 800a2d0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800a2d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	2200      	movs	r2, #0
 800a2dc:	67bb      	str	r3, [r7, #120]	@ 0x78
 800a2de:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a2e0:	f04f 0200 	mov.w	r2, #0
 800a2e4:	f04f 0300 	mov.w	r3, #0
 800a2e8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800a2ec:	4649      	mov	r1, r9
 800a2ee:	008b      	lsls	r3, r1, #2
 800a2f0:	4641      	mov	r1, r8
 800a2f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a2f6:	4641      	mov	r1, r8
 800a2f8:	008a      	lsls	r2, r1, #2
 800a2fa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800a2fe:	f7f5 ffbf 	bl	8000280 <__aeabi_uldivmod>
 800a302:	4602      	mov	r2, r0
 800a304:	460b      	mov	r3, r1
 800a306:	4611      	mov	r1, r2
 800a308:	4b38      	ldr	r3, [pc, #224]	@ (800a3ec <UART_SetConfig+0x4e4>)
 800a30a:	fba3 2301 	umull	r2, r3, r3, r1
 800a30e:	095b      	lsrs	r3, r3, #5
 800a310:	2264      	movs	r2, #100	@ 0x64
 800a312:	fb02 f303 	mul.w	r3, r2, r3
 800a316:	1acb      	subs	r3, r1, r3
 800a318:	011b      	lsls	r3, r3, #4
 800a31a:	3332      	adds	r3, #50	@ 0x32
 800a31c:	4a33      	ldr	r2, [pc, #204]	@ (800a3ec <UART_SetConfig+0x4e4>)
 800a31e:	fba2 2303 	umull	r2, r3, r2, r3
 800a322:	095b      	lsrs	r3, r3, #5
 800a324:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a328:	441c      	add	r4, r3
 800a32a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800a32e:	2200      	movs	r2, #0
 800a330:	673b      	str	r3, [r7, #112]	@ 0x70
 800a332:	677a      	str	r2, [r7, #116]	@ 0x74
 800a334:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800a338:	4642      	mov	r2, r8
 800a33a:	464b      	mov	r3, r9
 800a33c:	1891      	adds	r1, r2, r2
 800a33e:	60b9      	str	r1, [r7, #8]
 800a340:	415b      	adcs	r3, r3
 800a342:	60fb      	str	r3, [r7, #12]
 800a344:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a348:	4641      	mov	r1, r8
 800a34a:	1851      	adds	r1, r2, r1
 800a34c:	6039      	str	r1, [r7, #0]
 800a34e:	4649      	mov	r1, r9
 800a350:	414b      	adcs	r3, r1
 800a352:	607b      	str	r3, [r7, #4]
 800a354:	f04f 0200 	mov.w	r2, #0
 800a358:	f04f 0300 	mov.w	r3, #0
 800a35c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800a360:	4659      	mov	r1, fp
 800a362:	00cb      	lsls	r3, r1, #3
 800a364:	4651      	mov	r1, sl
 800a366:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a36a:	4651      	mov	r1, sl
 800a36c:	00ca      	lsls	r2, r1, #3
 800a36e:	4610      	mov	r0, r2
 800a370:	4619      	mov	r1, r3
 800a372:	4603      	mov	r3, r0
 800a374:	4642      	mov	r2, r8
 800a376:	189b      	adds	r3, r3, r2
 800a378:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a37a:	464b      	mov	r3, r9
 800a37c:	460a      	mov	r2, r1
 800a37e:	eb42 0303 	adc.w	r3, r2, r3
 800a382:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a388:	685b      	ldr	r3, [r3, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	663b      	str	r3, [r7, #96]	@ 0x60
 800a38e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a390:	f04f 0200 	mov.w	r2, #0
 800a394:	f04f 0300 	mov.w	r3, #0
 800a398:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800a39c:	4649      	mov	r1, r9
 800a39e:	008b      	lsls	r3, r1, #2
 800a3a0:	4641      	mov	r1, r8
 800a3a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800a3a6:	4641      	mov	r1, r8
 800a3a8:	008a      	lsls	r2, r1, #2
 800a3aa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800a3ae:	f7f5 ff67 	bl	8000280 <__aeabi_uldivmod>
 800a3b2:	4602      	mov	r2, r0
 800a3b4:	460b      	mov	r3, r1
 800a3b6:	4b0d      	ldr	r3, [pc, #52]	@ (800a3ec <UART_SetConfig+0x4e4>)
 800a3b8:	fba3 1302 	umull	r1, r3, r3, r2
 800a3bc:	095b      	lsrs	r3, r3, #5
 800a3be:	2164      	movs	r1, #100	@ 0x64
 800a3c0:	fb01 f303 	mul.w	r3, r1, r3
 800a3c4:	1ad3      	subs	r3, r2, r3
 800a3c6:	011b      	lsls	r3, r3, #4
 800a3c8:	3332      	adds	r3, #50	@ 0x32
 800a3ca:	4a08      	ldr	r2, [pc, #32]	@ (800a3ec <UART_SetConfig+0x4e4>)
 800a3cc:	fba2 2303 	umull	r2, r3, r2, r3
 800a3d0:	095b      	lsrs	r3, r3, #5
 800a3d2:	f003 020f 	and.w	r2, r3, #15
 800a3d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	4422      	add	r2, r4
 800a3de:	609a      	str	r2, [r3, #8]
}
 800a3e0:	bf00      	nop
 800a3e2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800a3e6:	46bd      	mov	sp, r7
 800a3e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a3ec:	51eb851f 	.word	0x51eb851f

0800a3f0 <__NVIC_SetPriority>:
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b083      	sub	sp, #12
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	6039      	str	r1, [r7, #0]
 800a3fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800a3fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a400:	2b00      	cmp	r3, #0
 800a402:	db0a      	blt.n	800a41a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	b2da      	uxtb	r2, r3
 800a408:	490c      	ldr	r1, [pc, #48]	@ (800a43c <__NVIC_SetPriority+0x4c>)
 800a40a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800a40e:	0112      	lsls	r2, r2, #4
 800a410:	b2d2      	uxtb	r2, r2
 800a412:	440b      	add	r3, r1
 800a414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800a418:	e00a      	b.n	800a430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	b2da      	uxtb	r2, r3
 800a41e:	4908      	ldr	r1, [pc, #32]	@ (800a440 <__NVIC_SetPriority+0x50>)
 800a420:	79fb      	ldrb	r3, [r7, #7]
 800a422:	f003 030f 	and.w	r3, r3, #15
 800a426:	3b04      	subs	r3, #4
 800a428:	0112      	lsls	r2, r2, #4
 800a42a:	b2d2      	uxtb	r2, r2
 800a42c:	440b      	add	r3, r1
 800a42e:	761a      	strb	r2, [r3, #24]
}
 800a430:	bf00      	nop
 800a432:	370c      	adds	r7, #12
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr
 800a43c:	e000e100 	.word	0xe000e100
 800a440:	e000ed00 	.word	0xe000ed00

0800a444 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800a444:	b580      	push	{r7, lr}
 800a446:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800a448:	2100      	movs	r1, #0
 800a44a:	f06f 0004 	mvn.w	r0, #4
 800a44e:	f7ff ffcf 	bl	800a3f0 <__NVIC_SetPriority>
#endif
}
 800a452:	bf00      	nop
 800a454:	bd80      	pop	{r7, pc}
	...

0800a458 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a45e:	f3ef 8305 	mrs	r3, IPSR
 800a462:	603b      	str	r3, [r7, #0]
  return(result);
 800a464:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a466:	2b00      	cmp	r3, #0
 800a468:	d003      	beq.n	800a472 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800a46a:	f06f 0305 	mvn.w	r3, #5
 800a46e:	607b      	str	r3, [r7, #4]
 800a470:	e00c      	b.n	800a48c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800a472:	4b0a      	ldr	r3, [pc, #40]	@ (800a49c <osKernelInitialize+0x44>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	2b00      	cmp	r3, #0
 800a478:	d105      	bne.n	800a486 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800a47a:	4b08      	ldr	r3, [pc, #32]	@ (800a49c <osKernelInitialize+0x44>)
 800a47c:	2201      	movs	r2, #1
 800a47e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800a480:	2300      	movs	r3, #0
 800a482:	607b      	str	r3, [r7, #4]
 800a484:	e002      	b.n	800a48c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800a486:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a48a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a48c:	687b      	ldr	r3, [r7, #4]
}
 800a48e:	4618      	mov	r0, r3
 800a490:	370c      	adds	r7, #12
 800a492:	46bd      	mov	sp, r7
 800a494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	20000df4 	.word	0x20000df4

0800a4a0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800a4a0:	b580      	push	{r7, lr}
 800a4a2:	b082      	sub	sp, #8
 800a4a4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4a6:	f3ef 8305 	mrs	r3, IPSR
 800a4aa:	603b      	str	r3, [r7, #0]
  return(result);
 800a4ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d003      	beq.n	800a4ba <osKernelStart+0x1a>
    stat = osErrorISR;
 800a4b2:	f06f 0305 	mvn.w	r3, #5
 800a4b6:	607b      	str	r3, [r7, #4]
 800a4b8:	e010      	b.n	800a4dc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800a4ba:	4b0b      	ldr	r3, [pc, #44]	@ (800a4e8 <osKernelStart+0x48>)
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	2b01      	cmp	r3, #1
 800a4c0:	d109      	bne.n	800a4d6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800a4c2:	f7ff ffbf 	bl	800a444 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800a4c6:	4b08      	ldr	r3, [pc, #32]	@ (800a4e8 <osKernelStart+0x48>)
 800a4c8:	2202      	movs	r2, #2
 800a4ca:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800a4cc:	f001 f892 	bl	800b5f4 <vTaskStartScheduler>
      stat = osOK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	607b      	str	r3, [r7, #4]
 800a4d4:	e002      	b.n	800a4dc <osKernelStart+0x3c>
    } else {
      stat = osError;
 800a4d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a4da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800a4dc:	687b      	ldr	r3, [r7, #4]
}
 800a4de:	4618      	mov	r0, r3
 800a4e0:	3708      	adds	r7, #8
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	bd80      	pop	{r7, pc}
 800a4e6:	bf00      	nop
 800a4e8:	20000df4 	.word	0x20000df4

0800a4ec <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b08e      	sub	sp, #56	@ 0x38
 800a4f0:	af04      	add	r7, sp, #16
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a4fc:	f3ef 8305 	mrs	r3, IPSR
 800a500:	617b      	str	r3, [r7, #20]
  return(result);
 800a502:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800a504:	2b00      	cmp	r3, #0
 800a506:	d17e      	bne.n	800a606 <osThreadNew+0x11a>
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d07b      	beq.n	800a606 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800a50e:	2380      	movs	r3, #128	@ 0x80
 800a510:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800a512:	2318      	movs	r3, #24
 800a514:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800a516:	2300      	movs	r3, #0
 800a518:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800a51a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800a51e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d045      	beq.n	800a5b2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d002      	beq.n	800a534 <osThreadNew+0x48>
        name = attr->name;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d002      	beq.n	800a542 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	699b      	ldr	r3, [r3, #24]
 800a540:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800a542:	69fb      	ldr	r3, [r7, #28]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d008      	beq.n	800a55a <osThreadNew+0x6e>
 800a548:	69fb      	ldr	r3, [r7, #28]
 800a54a:	2b38      	cmp	r3, #56	@ 0x38
 800a54c:	d805      	bhi.n	800a55a <osThreadNew+0x6e>
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	685b      	ldr	r3, [r3, #4]
 800a552:	f003 0301 	and.w	r3, r3, #1
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <osThreadNew+0x72>
        return (NULL);
 800a55a:	2300      	movs	r3, #0
 800a55c:	e054      	b.n	800a608 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	695b      	ldr	r3, [r3, #20]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d003      	beq.n	800a56e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	695b      	ldr	r3, [r3, #20]
 800a56a:	089b      	lsrs	r3, r3, #2
 800a56c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	689b      	ldr	r3, [r3, #8]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d00e      	beq.n	800a594 <osThreadNew+0xa8>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	68db      	ldr	r3, [r3, #12]
 800a57a:	2ba7      	cmp	r3, #167	@ 0xa7
 800a57c:	d90a      	bls.n	800a594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800a582:	2b00      	cmp	r3, #0
 800a584:	d006      	beq.n	800a594 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	695b      	ldr	r3, [r3, #20]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d002      	beq.n	800a594 <osThreadNew+0xa8>
        mem = 1;
 800a58e:	2301      	movs	r3, #1
 800a590:	61bb      	str	r3, [r7, #24]
 800a592:	e010      	b.n	800a5b6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	689b      	ldr	r3, [r3, #8]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d10c      	bne.n	800a5b6 <osThreadNew+0xca>
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	68db      	ldr	r3, [r3, #12]
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d108      	bne.n	800a5b6 <osThreadNew+0xca>
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d104      	bne.n	800a5b6 <osThreadNew+0xca>
          mem = 0;
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	61bb      	str	r3, [r7, #24]
 800a5b0:	e001      	b.n	800a5b6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800a5b6:	69bb      	ldr	r3, [r7, #24]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d110      	bne.n	800a5de <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800a5c0:	687a      	ldr	r2, [r7, #4]
 800a5c2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800a5c4:	9202      	str	r2, [sp, #8]
 800a5c6:	9301      	str	r3, [sp, #4]
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	9300      	str	r3, [sp, #0]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	6a3a      	ldr	r2, [r7, #32]
 800a5d0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5d2:	68f8      	ldr	r0, [r7, #12]
 800a5d4:	f000 fe1a 	bl	800b20c <xTaskCreateStatic>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	613b      	str	r3, [r7, #16]
 800a5dc:	e013      	b.n	800a606 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d110      	bne.n	800a606 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	b29a      	uxth	r2, r3
 800a5e8:	f107 0310 	add.w	r3, r7, #16
 800a5ec:	9301      	str	r3, [sp, #4]
 800a5ee:	69fb      	ldr	r3, [r7, #28]
 800a5f0:	9300      	str	r3, [sp, #0]
 800a5f2:	68bb      	ldr	r3, [r7, #8]
 800a5f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a5f6:	68f8      	ldr	r0, [r7, #12]
 800a5f8:	f000 fe68 	bl	800b2cc <xTaskCreate>
 800a5fc:	4603      	mov	r3, r0
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d001      	beq.n	800a606 <osThreadNew+0x11a>
            hTask = NULL;
 800a602:	2300      	movs	r3, #0
 800a604:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a606:	693b      	ldr	r3, [r7, #16]
}
 800a608:	4618      	mov	r0, r3
 800a60a:	3728      	adds	r7, #40	@ 0x28
 800a60c:	46bd      	mov	sp, r7
 800a60e:	bd80      	pop	{r7, pc}

0800a610 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a610:	b580      	push	{r7, lr}
 800a612:	b084      	sub	sp, #16
 800a614:	af00      	add	r7, sp, #0
 800a616:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a618:	f3ef 8305 	mrs	r3, IPSR
 800a61c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a61e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a620:	2b00      	cmp	r3, #0
 800a622:	d003      	beq.n	800a62c <osDelay+0x1c>
    stat = osErrorISR;
 800a624:	f06f 0305 	mvn.w	r3, #5
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	e007      	b.n	800a63c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	2b00      	cmp	r3, #0
 800a634:	d002      	beq.n	800a63c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f000 ffa6 	bl	800b588 <vTaskDelay>
    }
  }

  return (stat);
 800a63c:	68fb      	ldr	r3, [r7, #12]
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}
	...

0800a648 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a648:	b480      	push	{r7}
 800a64a:	b085      	sub	sp, #20
 800a64c:	af00      	add	r7, sp, #0
 800a64e:	60f8      	str	r0, [r7, #12]
 800a650:	60b9      	str	r1, [r7, #8]
 800a652:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	4a07      	ldr	r2, [pc, #28]	@ (800a674 <vApplicationGetIdleTaskMemory+0x2c>)
 800a658:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	4a06      	ldr	r2, [pc, #24]	@ (800a678 <vApplicationGetIdleTaskMemory+0x30>)
 800a65e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2280      	movs	r2, #128	@ 0x80
 800a664:	601a      	str	r2, [r3, #0]
}
 800a666:	bf00      	nop
 800a668:	3714      	adds	r7, #20
 800a66a:	46bd      	mov	sp, r7
 800a66c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a670:	4770      	bx	lr
 800a672:	bf00      	nop
 800a674:	20000df8 	.word	0x20000df8
 800a678:	20000ea0 	.word	0x20000ea0

0800a67c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a67c:	b480      	push	{r7}
 800a67e:	b085      	sub	sp, #20
 800a680:	af00      	add	r7, sp, #0
 800a682:	60f8      	str	r0, [r7, #12]
 800a684:	60b9      	str	r1, [r7, #8]
 800a686:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	4a07      	ldr	r2, [pc, #28]	@ (800a6a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800a68c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	4a06      	ldr	r2, [pc, #24]	@ (800a6ac <vApplicationGetTimerTaskMemory+0x30>)
 800a692:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a69a:	601a      	str	r2, [r3, #0]
}
 800a69c:	bf00      	nop
 800a69e:	3714      	adds	r7, #20
 800a6a0:	46bd      	mov	sp, r7
 800a6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a6:	4770      	bx	lr
 800a6a8:	200010a0 	.word	0x200010a0
 800a6ac:	20001148 	.word	0x20001148

0800a6b0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a6b0:	b480      	push	{r7}
 800a6b2:	b083      	sub	sp, #12
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f103 0208 	add.w	r2, r3, #8
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a6c8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	f103 0208 	add.w	r2, r3, #8
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f103 0208 	add.w	r2, r3, #8
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a6e4:	bf00      	nop
 800a6e6:	370c      	adds	r7, #12
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b083      	sub	sp, #12
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a6fe:	bf00      	nop
 800a700:	370c      	adds	r7, #12
 800a702:	46bd      	mov	sp, r7
 800a704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a708:	4770      	bx	lr

0800a70a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a70a:	b480      	push	{r7}
 800a70c:	b085      	sub	sp, #20
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
 800a712:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	689a      	ldr	r2, [r3, #8]
 800a724:	683b      	ldr	r3, [r7, #0]
 800a726:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	689b      	ldr	r3, [r3, #8]
 800a72c:	683a      	ldr	r2, [r7, #0]
 800a72e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	687a      	ldr	r2, [r7, #4]
 800a73a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	1c5a      	adds	r2, r3, #1
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	601a      	str	r2, [r3, #0]
}
 800a746:	bf00      	nop
 800a748:	3714      	adds	r7, #20
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a752:	b480      	push	{r7}
 800a754:	b085      	sub	sp, #20
 800a756:	af00      	add	r7, sp, #0
 800a758:	6078      	str	r0, [r7, #4]
 800a75a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a768:	d103      	bne.n	800a772 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	691b      	ldr	r3, [r3, #16]
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	e00c      	b.n	800a78c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	3308      	adds	r3, #8
 800a776:	60fb      	str	r3, [r7, #12]
 800a778:	e002      	b.n	800a780 <vListInsert+0x2e>
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	60fb      	str	r3, [r7, #12]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	685b      	ldr	r3, [r3, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	68ba      	ldr	r2, [r7, #8]
 800a788:	429a      	cmp	r2, r3
 800a78a:	d2f6      	bcs.n	800a77a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	685a      	ldr	r2, [r3, #4]
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	685b      	ldr	r3, [r3, #4]
 800a798:	683a      	ldr	r2, [r7, #0]
 800a79a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a79c:	683b      	ldr	r3, [r7, #0]
 800a79e:	68fa      	ldr	r2, [r7, #12]
 800a7a0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	683a      	ldr	r2, [r7, #0]
 800a7a6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a7a8:	683b      	ldr	r3, [r7, #0]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	1c5a      	adds	r2, r3, #1
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	601a      	str	r2, [r3, #0]
}
 800a7b8:	bf00      	nop
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr

0800a7c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a7c4:	b480      	push	{r7}
 800a7c6:	b085      	sub	sp, #20
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	691b      	ldr	r3, [r3, #16]
 800a7d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	6892      	ldr	r2, [r2, #8]
 800a7da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	689b      	ldr	r3, [r3, #8]
 800a7e0:	687a      	ldr	r2, [r7, #4]
 800a7e2:	6852      	ldr	r2, [r2, #4]
 800a7e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	685b      	ldr	r3, [r3, #4]
 800a7ea:	687a      	ldr	r2, [r7, #4]
 800a7ec:	429a      	cmp	r2, r3
 800a7ee:	d103      	bne.n	800a7f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	689a      	ldr	r2, [r3, #8]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	1e5a      	subs	r2, r3, #1
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3714      	adds	r7, #20
 800a810:	46bd      	mov	sp, r7
 800a812:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a816:	4770      	bx	lr

0800a818 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d10b      	bne.n	800a844 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a82c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a830:	f383 8811 	msr	BASEPRI, r3
 800a834:	f3bf 8f6f 	isb	sy
 800a838:	f3bf 8f4f 	dsb	sy
 800a83c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a83e:	bf00      	nop
 800a840:	bf00      	nop
 800a842:	e7fd      	b.n	800a840 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a844:	f002 fa80 	bl	800cd48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a848:	68fb      	ldr	r3, [r7, #12]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a850:	68f9      	ldr	r1, [r7, #12]
 800a852:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a854:	fb01 f303 	mul.w	r3, r1, r3
 800a858:	441a      	add	r2, r3
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2200      	movs	r2, #0
 800a862:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	681a      	ldr	r2, [r3, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	681a      	ldr	r2, [r3, #0]
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a874:	3b01      	subs	r3, #1
 800a876:	68f9      	ldr	r1, [r7, #12]
 800a878:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800a87a:	fb01 f303 	mul.w	r3, r1, r3
 800a87e:	441a      	add	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	22ff      	movs	r2, #255	@ 0xff
 800a888:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	22ff      	movs	r2, #255	@ 0xff
 800a890:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d114      	bne.n	800a8c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d01a      	beq.n	800a8d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	3310      	adds	r3, #16
 800a8a6:	4618      	mov	r0, r3
 800a8a8:	f001 fa3c 	bl	800bd24 <xTaskRemoveFromEventList>
 800a8ac:	4603      	mov	r3, r0
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d012      	beq.n	800a8d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a8b2:	4b0d      	ldr	r3, [pc, #52]	@ (800a8e8 <xQueueGenericReset+0xd0>)
 800a8b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a8b8:	601a      	str	r2, [r3, #0]
 800a8ba:	f3bf 8f4f 	dsb	sy
 800a8be:	f3bf 8f6f 	isb	sy
 800a8c2:	e009      	b.n	800a8d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	3310      	adds	r3, #16
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f7ff fef1 	bl	800a6b0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3324      	adds	r3, #36	@ 0x24
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff feec 	bl	800a6b0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a8d8:	f002 fa68 	bl	800cdac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a8dc:	2301      	movs	r3, #1
}
 800a8de:	4618      	mov	r0, r3
 800a8e0:	3710      	adds	r7, #16
 800a8e2:	46bd      	mov	sp, r7
 800a8e4:	bd80      	pop	{r7, pc}
 800a8e6:	bf00      	nop
 800a8e8:	e000ed04 	.word	0xe000ed04

0800a8ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a8ec:	b580      	push	{r7, lr}
 800a8ee:	b08e      	sub	sp, #56	@ 0x38
 800a8f0:	af02      	add	r7, sp, #8
 800a8f2:	60f8      	str	r0, [r7, #12]
 800a8f4:	60b9      	str	r1, [r7, #8]
 800a8f6:	607a      	str	r2, [r7, #4]
 800a8f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d10b      	bne.n	800a918 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a900:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a904:	f383 8811 	msr	BASEPRI, r3
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	f3bf 8f4f 	dsb	sy
 800a910:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a912:	bf00      	nop
 800a914:	bf00      	nop
 800a916:	e7fd      	b.n	800a914 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d10b      	bne.n	800a936 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a922:	f383 8811 	msr	BASEPRI, r3
 800a926:	f3bf 8f6f 	isb	sy
 800a92a:	f3bf 8f4f 	dsb	sy
 800a92e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a930:	bf00      	nop
 800a932:	bf00      	nop
 800a934:	e7fd      	b.n	800a932 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d002      	beq.n	800a942 <xQueueGenericCreateStatic+0x56>
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d001      	beq.n	800a946 <xQueueGenericCreateStatic+0x5a>
 800a942:	2301      	movs	r3, #1
 800a944:	e000      	b.n	800a948 <xQueueGenericCreateStatic+0x5c>
 800a946:	2300      	movs	r3, #0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10b      	bne.n	800a964 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a94c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a950:	f383 8811 	msr	BASEPRI, r3
 800a954:	f3bf 8f6f 	isb	sy
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	623b      	str	r3, [r7, #32]
}
 800a95e:	bf00      	nop
 800a960:	bf00      	nop
 800a962:	e7fd      	b.n	800a960 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d102      	bne.n	800a970 <xQueueGenericCreateStatic+0x84>
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d101      	bne.n	800a974 <xQueueGenericCreateStatic+0x88>
 800a970:	2301      	movs	r3, #1
 800a972:	e000      	b.n	800a976 <xQueueGenericCreateStatic+0x8a>
 800a974:	2300      	movs	r3, #0
 800a976:	2b00      	cmp	r3, #0
 800a978:	d10b      	bne.n	800a992 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	61fb      	str	r3, [r7, #28]
}
 800a98c:	bf00      	nop
 800a98e:	bf00      	nop
 800a990:	e7fd      	b.n	800a98e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a992:	2350      	movs	r3, #80	@ 0x50
 800a994:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a996:	697b      	ldr	r3, [r7, #20]
 800a998:	2b50      	cmp	r3, #80	@ 0x50
 800a99a:	d00b      	beq.n	800a9b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a99c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a0:	f383 8811 	msr	BASEPRI, r3
 800a9a4:	f3bf 8f6f 	isb	sy
 800a9a8:	f3bf 8f4f 	dsb	sy
 800a9ac:	61bb      	str	r3, [r7, #24]
}
 800a9ae:	bf00      	nop
 800a9b0:	bf00      	nop
 800a9b2:	e7fd      	b.n	800a9b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a9b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a9ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d00d      	beq.n	800a9dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c2:	2201      	movs	r2, #1
 800a9c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a9c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a9cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9ce:	9300      	str	r3, [sp, #0]
 800a9d0:	4613      	mov	r3, r2
 800a9d2:	687a      	ldr	r2, [r7, #4]
 800a9d4:	68b9      	ldr	r1, [r7, #8]
 800a9d6:	68f8      	ldr	r0, [r7, #12]
 800a9d8:	f000 f805 	bl	800a9e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a9dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a9de:	4618      	mov	r0, r3
 800a9e0:	3730      	adds	r7, #48	@ 0x30
 800a9e2:	46bd      	mov	sp, r7
 800a9e4:	bd80      	pop	{r7, pc}

0800a9e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a9e6:	b580      	push	{r7, lr}
 800a9e8:	b084      	sub	sp, #16
 800a9ea:	af00      	add	r7, sp, #0
 800a9ec:	60f8      	str	r0, [r7, #12]
 800a9ee:	60b9      	str	r1, [r7, #8]
 800a9f0:	607a      	str	r2, [r7, #4]
 800a9f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a9f4:	68bb      	ldr	r3, [r7, #8]
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	d103      	bne.n	800aa02 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a9fa:	69bb      	ldr	r3, [r7, #24]
 800a9fc:	69ba      	ldr	r2, [r7, #24]
 800a9fe:	601a      	str	r2, [r3, #0]
 800aa00:	e002      	b.n	800aa08 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800aa02:	69bb      	ldr	r3, [r7, #24]
 800aa04:	687a      	ldr	r2, [r7, #4]
 800aa06:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800aa08:	69bb      	ldr	r3, [r7, #24]
 800aa0a:	68fa      	ldr	r2, [r7, #12]
 800aa0c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800aa0e:	69bb      	ldr	r3, [r7, #24]
 800aa10:	68ba      	ldr	r2, [r7, #8]
 800aa12:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800aa14:	2101      	movs	r1, #1
 800aa16:	69b8      	ldr	r0, [r7, #24]
 800aa18:	f7ff fefe 	bl	800a818 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800aa1c:	69bb      	ldr	r3, [r7, #24]
 800aa1e:	78fa      	ldrb	r2, [r7, #3]
 800aa20:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800aa24:	bf00      	nop
 800aa26:	3710      	adds	r7, #16
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	bd80      	pop	{r7, pc}

0800aa2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	b08e      	sub	sp, #56	@ 0x38
 800aa30:	af00      	add	r7, sp, #0
 800aa32:	60f8      	str	r0, [r7, #12]
 800aa34:	60b9      	str	r1, [r7, #8]
 800aa36:	607a      	str	r2, [r7, #4]
 800aa38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800aa3a:	2300      	movs	r3, #0
 800aa3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800aa42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d10b      	bne.n	800aa60 <xQueueGenericSend+0x34>
	__asm volatile
 800aa48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa4c:	f383 8811 	msr	BASEPRI, r3
 800aa50:	f3bf 8f6f 	isb	sy
 800aa54:	f3bf 8f4f 	dsb	sy
 800aa58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800aa5a:	bf00      	nop
 800aa5c:	bf00      	nop
 800aa5e:	e7fd      	b.n	800aa5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa60:	68bb      	ldr	r3, [r7, #8]
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d103      	bne.n	800aa6e <xQueueGenericSend+0x42>
 800aa66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d101      	bne.n	800aa72 <xQueueGenericSend+0x46>
 800aa6e:	2301      	movs	r3, #1
 800aa70:	e000      	b.n	800aa74 <xQueueGenericSend+0x48>
 800aa72:	2300      	movs	r3, #0
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d10b      	bne.n	800aa90 <xQueueGenericSend+0x64>
	__asm volatile
 800aa78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa7c:	f383 8811 	msr	BASEPRI, r3
 800aa80:	f3bf 8f6f 	isb	sy
 800aa84:	f3bf 8f4f 	dsb	sy
 800aa88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800aa8a:	bf00      	nop
 800aa8c:	bf00      	nop
 800aa8e:	e7fd      	b.n	800aa8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aa90:	683b      	ldr	r3, [r7, #0]
 800aa92:	2b02      	cmp	r3, #2
 800aa94:	d103      	bne.n	800aa9e <xQueueGenericSend+0x72>
 800aa96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aa9a:	2b01      	cmp	r3, #1
 800aa9c:	d101      	bne.n	800aaa2 <xQueueGenericSend+0x76>
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	e000      	b.n	800aaa4 <xQueueGenericSend+0x78>
 800aaa2:	2300      	movs	r3, #0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d10b      	bne.n	800aac0 <xQueueGenericSend+0x94>
	__asm volatile
 800aaa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaac:	f383 8811 	msr	BASEPRI, r3
 800aab0:	f3bf 8f6f 	isb	sy
 800aab4:	f3bf 8f4f 	dsb	sy
 800aab8:	623b      	str	r3, [r7, #32]
}
 800aaba:	bf00      	nop
 800aabc:	bf00      	nop
 800aabe:	e7fd      	b.n	800aabc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800aac0:	f001 faf6 	bl	800c0b0 <xTaskGetSchedulerState>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d102      	bne.n	800aad0 <xQueueGenericSend+0xa4>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d101      	bne.n	800aad4 <xQueueGenericSend+0xa8>
 800aad0:	2301      	movs	r3, #1
 800aad2:	e000      	b.n	800aad6 <xQueueGenericSend+0xaa>
 800aad4:	2300      	movs	r3, #0
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d10b      	bne.n	800aaf2 <xQueueGenericSend+0xc6>
	__asm volatile
 800aada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	61fb      	str	r3, [r7, #28]
}
 800aaec:	bf00      	nop
 800aaee:	bf00      	nop
 800aaf0:	e7fd      	b.n	800aaee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800aaf2:	f002 f929 	bl	800cd48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aaf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800aafa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aafc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d302      	bcc.n	800ab08 <xQueueGenericSend+0xdc>
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2b02      	cmp	r3, #2
 800ab06:	d129      	bne.n	800ab5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab08:	683a      	ldr	r2, [r7, #0]
 800ab0a:	68b9      	ldr	r1, [r7, #8]
 800ab0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ab0e:	f000 fa0f 	bl	800af30 <prvCopyDataToQueue>
 800ab12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d010      	beq.n	800ab3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab1e:	3324      	adds	r3, #36	@ 0x24
 800ab20:	4618      	mov	r0, r3
 800ab22:	f001 f8ff 	bl	800bd24 <xTaskRemoveFromEventList>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d013      	beq.n	800ab54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ab2c:	4b3f      	ldr	r3, [pc, #252]	@ (800ac2c <xQueueGenericSend+0x200>)
 800ab2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab32:	601a      	str	r2, [r3, #0]
 800ab34:	f3bf 8f4f 	dsb	sy
 800ab38:	f3bf 8f6f 	isb	sy
 800ab3c:	e00a      	b.n	800ab54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ab3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	d007      	beq.n	800ab54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ab44:	4b39      	ldr	r3, [pc, #228]	@ (800ac2c <xQueueGenericSend+0x200>)
 800ab46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	f3bf 8f4f 	dsb	sy
 800ab50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800ab54:	f002 f92a 	bl	800cdac <vPortExitCritical>
				return pdPASS;
 800ab58:	2301      	movs	r3, #1
 800ab5a:	e063      	b.n	800ac24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d103      	bne.n	800ab6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ab62:	f002 f923 	bl	800cdac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ab66:	2300      	movs	r3, #0
 800ab68:	e05c      	b.n	800ac24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ab6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d106      	bne.n	800ab7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ab70:	f107 0314 	add.w	r3, r7, #20
 800ab74:	4618      	mov	r0, r3
 800ab76:	f001 f939 	bl	800bdec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ab7a:	2301      	movs	r3, #1
 800ab7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ab7e:	f002 f915 	bl	800cdac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ab82:	f000 fda7 	bl	800b6d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ab86:	f002 f8df 	bl	800cd48 <vPortEnterCritical>
 800ab8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab90:	b25b      	sxtb	r3, r3
 800ab92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ab96:	d103      	bne.n	800aba0 <xQueueGenericSend+0x174>
 800ab98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800aba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aba2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aba6:	b25b      	sxtb	r3, r3
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800abac:	d103      	bne.n	800abb6 <xQueueGenericSend+0x18a>
 800abae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abb0:	2200      	movs	r2, #0
 800abb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800abb6:	f002 f8f9 	bl	800cdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800abba:	1d3a      	adds	r2, r7, #4
 800abbc:	f107 0314 	add.w	r3, r7, #20
 800abc0:	4611      	mov	r1, r2
 800abc2:	4618      	mov	r0, r3
 800abc4:	f001 f928 	bl	800be18 <xTaskCheckForTimeOut>
 800abc8:	4603      	mov	r3, r0
 800abca:	2b00      	cmp	r3, #0
 800abcc:	d124      	bne.n	800ac18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800abce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abd0:	f000 faa6 	bl	800b120 <prvIsQueueFull>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d018      	beq.n	800ac0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800abda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800abdc:	3310      	adds	r3, #16
 800abde:	687a      	ldr	r2, [r7, #4]
 800abe0:	4611      	mov	r1, r2
 800abe2:	4618      	mov	r0, r3
 800abe4:	f001 f84c 	bl	800bc80 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800abe8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800abea:	f000 fa31 	bl	800b050 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800abee:	f000 fd7f 	bl	800b6f0 <xTaskResumeAll>
 800abf2:	4603      	mov	r3, r0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	f47f af7c 	bne.w	800aaf2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800abfa:	4b0c      	ldr	r3, [pc, #48]	@ (800ac2c <xQueueGenericSend+0x200>)
 800abfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ac00:	601a      	str	r2, [r3, #0]
 800ac02:	f3bf 8f4f 	dsb	sy
 800ac06:	f3bf 8f6f 	isb	sy
 800ac0a:	e772      	b.n	800aaf2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ac0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac0e:	f000 fa1f 	bl	800b050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ac12:	f000 fd6d 	bl	800b6f0 <xTaskResumeAll>
 800ac16:	e76c      	b.n	800aaf2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ac18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800ac1a:	f000 fa19 	bl	800b050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ac1e:	f000 fd67 	bl	800b6f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ac22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ac24:	4618      	mov	r0, r3
 800ac26:	3738      	adds	r7, #56	@ 0x38
 800ac28:	46bd      	mov	sp, r7
 800ac2a:	bd80      	pop	{r7, pc}
 800ac2c:	e000ed04 	.word	0xe000ed04

0800ac30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ac30:	b580      	push	{r7, lr}
 800ac32:	b090      	sub	sp, #64	@ 0x40
 800ac34:	af00      	add	r7, sp, #0
 800ac36:	60f8      	str	r0, [r7, #12]
 800ac38:	60b9      	str	r1, [r7, #8]
 800ac3a:	607a      	str	r2, [r7, #4]
 800ac3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800ac42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac44:	2b00      	cmp	r3, #0
 800ac46:	d10b      	bne.n	800ac60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800ac48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac4c:	f383 8811 	msr	BASEPRI, r3
 800ac50:	f3bf 8f6f 	isb	sy
 800ac54:	f3bf 8f4f 	dsb	sy
 800ac58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800ac5a:	bf00      	nop
 800ac5c:	bf00      	nop
 800ac5e:	e7fd      	b.n	800ac5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d103      	bne.n	800ac6e <xQueueGenericSendFromISR+0x3e>
 800ac66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d101      	bne.n	800ac72 <xQueueGenericSendFromISR+0x42>
 800ac6e:	2301      	movs	r3, #1
 800ac70:	e000      	b.n	800ac74 <xQueueGenericSendFromISR+0x44>
 800ac72:	2300      	movs	r3, #0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d10b      	bne.n	800ac90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800ac78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac7c:	f383 8811 	msr	BASEPRI, r3
 800ac80:	f3bf 8f6f 	isb	sy
 800ac84:	f3bf 8f4f 	dsb	sy
 800ac88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800ac8a:	bf00      	nop
 800ac8c:	bf00      	nop
 800ac8e:	e7fd      	b.n	800ac8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ac90:	683b      	ldr	r3, [r7, #0]
 800ac92:	2b02      	cmp	r3, #2
 800ac94:	d103      	bne.n	800ac9e <xQueueGenericSendFromISR+0x6e>
 800ac96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d101      	bne.n	800aca2 <xQueueGenericSendFromISR+0x72>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	e000      	b.n	800aca4 <xQueueGenericSendFromISR+0x74>
 800aca2:	2300      	movs	r3, #0
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10b      	bne.n	800acc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800aca8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acac:	f383 8811 	msr	BASEPRI, r3
 800acb0:	f3bf 8f6f 	isb	sy
 800acb4:	f3bf 8f4f 	dsb	sy
 800acb8:	623b      	str	r3, [r7, #32]
}
 800acba:	bf00      	nop
 800acbc:	bf00      	nop
 800acbe:	e7fd      	b.n	800acbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800acc0:	f002 f922 	bl	800cf08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800acc4:	f3ef 8211 	mrs	r2, BASEPRI
 800acc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800accc:	f383 8811 	msr	BASEPRI, r3
 800acd0:	f3bf 8f6f 	isb	sy
 800acd4:	f3bf 8f4f 	dsb	sy
 800acd8:	61fa      	str	r2, [r7, #28]
 800acda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800acdc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800acde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ace0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ace4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ace8:	429a      	cmp	r2, r3
 800acea:	d302      	bcc.n	800acf2 <xQueueGenericSendFromISR+0xc2>
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	d12f      	bne.n	800ad52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800acf2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acf4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800acf8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800acfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ad02:	683a      	ldr	r2, [r7, #0]
 800ad04:	68b9      	ldr	r1, [r7, #8]
 800ad06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800ad08:	f000 f912 	bl	800af30 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ad0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800ad10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad14:	d112      	bne.n	800ad3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ad16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d016      	beq.n	800ad4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ad1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad20:	3324      	adds	r3, #36	@ 0x24
 800ad22:	4618      	mov	r0, r3
 800ad24:	f000 fffe 	bl	800bd24 <xTaskRemoveFromEventList>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d00e      	beq.n	800ad4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d00b      	beq.n	800ad4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2201      	movs	r2, #1
 800ad38:	601a      	str	r2, [r3, #0]
 800ad3a:	e007      	b.n	800ad4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ad3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800ad40:	3301      	adds	r3, #1
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	b25a      	sxtb	r2, r3
 800ad46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ad48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800ad4c:	2301      	movs	r3, #1
 800ad4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800ad50:	e001      	b.n	800ad56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ad52:	2300      	movs	r3, #0
 800ad54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ad56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ad58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ad5a:	697b      	ldr	r3, [r7, #20]
 800ad5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ad60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ad62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3740      	adds	r7, #64	@ 0x40
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	bd80      	pop	{r7, pc}

0800ad6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ad6c:	b580      	push	{r7, lr}
 800ad6e:	b08c      	sub	sp, #48	@ 0x30
 800ad70:	af00      	add	r7, sp, #0
 800ad72:	60f8      	str	r0, [r7, #12]
 800ad74:	60b9      	str	r1, [r7, #8]
 800ad76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d10b      	bne.n	800ad9e <xQueueReceive+0x32>
	__asm volatile
 800ad86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ad8a:	f383 8811 	msr	BASEPRI, r3
 800ad8e:	f3bf 8f6f 	isb	sy
 800ad92:	f3bf 8f4f 	dsb	sy
 800ad96:	623b      	str	r3, [r7, #32]
}
 800ad98:	bf00      	nop
 800ad9a:	bf00      	nop
 800ad9c:	e7fd      	b.n	800ad9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d103      	bne.n	800adac <xQueueReceive+0x40>
 800ada4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ada6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d101      	bne.n	800adb0 <xQueueReceive+0x44>
 800adac:	2301      	movs	r3, #1
 800adae:	e000      	b.n	800adb2 <xQueueReceive+0x46>
 800adb0:	2300      	movs	r3, #0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d10b      	bne.n	800adce <xQueueReceive+0x62>
	__asm volatile
 800adb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adba:	f383 8811 	msr	BASEPRI, r3
 800adbe:	f3bf 8f6f 	isb	sy
 800adc2:	f3bf 8f4f 	dsb	sy
 800adc6:	61fb      	str	r3, [r7, #28]
}
 800adc8:	bf00      	nop
 800adca:	bf00      	nop
 800adcc:	e7fd      	b.n	800adca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800adce:	f001 f96f 	bl	800c0b0 <xTaskGetSchedulerState>
 800add2:	4603      	mov	r3, r0
 800add4:	2b00      	cmp	r3, #0
 800add6:	d102      	bne.n	800adde <xQueueReceive+0x72>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	2b00      	cmp	r3, #0
 800addc:	d101      	bne.n	800ade2 <xQueueReceive+0x76>
 800adde:	2301      	movs	r3, #1
 800ade0:	e000      	b.n	800ade4 <xQueueReceive+0x78>
 800ade2:	2300      	movs	r3, #0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d10b      	bne.n	800ae00 <xQueueReceive+0x94>
	__asm volatile
 800ade8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adec:	f383 8811 	msr	BASEPRI, r3
 800adf0:	f3bf 8f6f 	isb	sy
 800adf4:	f3bf 8f4f 	dsb	sy
 800adf8:	61bb      	str	r3, [r7, #24]
}
 800adfa:	bf00      	nop
 800adfc:	bf00      	nop
 800adfe:	e7fd      	b.n	800adfc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ae00:	f001 ffa2 	bl	800cd48 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ae04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ae08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ae0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d01f      	beq.n	800ae50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ae10:	68b9      	ldr	r1, [r7, #8]
 800ae12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800ae14:	f000 f8f6 	bl	800b004 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ae18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1a:	1e5a      	subs	r2, r3, #1
 800ae1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ae20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae22:	691b      	ldr	r3, [r3, #16]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d00f      	beq.n	800ae48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ae28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae2a:	3310      	adds	r3, #16
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f000 ff79 	bl	800bd24 <xTaskRemoveFromEventList>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d007      	beq.n	800ae48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae38:	4b3c      	ldr	r3, [pc, #240]	@ (800af2c <xQueueReceive+0x1c0>)
 800ae3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ae3e:	601a      	str	r2, [r3, #0]
 800ae40:	f3bf 8f4f 	dsb	sy
 800ae44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae48:	f001 ffb0 	bl	800cdac <vPortExitCritical>
				return pdPASS;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e069      	b.n	800af24 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d103      	bne.n	800ae5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ae56:	f001 ffa9 	bl	800cdac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	e062      	b.n	800af24 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d106      	bne.n	800ae72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae64:	f107 0310 	add.w	r3, r7, #16
 800ae68:	4618      	mov	r0, r3
 800ae6a:	f000 ffbf 	bl	800bdec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae6e:	2301      	movs	r3, #1
 800ae70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae72:	f001 ff9b 	bl	800cdac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae76:	f000 fc2d 	bl	800b6d4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae7a:	f001 ff65 	bl	800cd48 <vPortEnterCritical>
 800ae7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ae84:	b25b      	sxtb	r3, r3
 800ae86:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ae8a:	d103      	bne.n	800ae94 <xQueueReceive+0x128>
 800ae8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae8e:	2200      	movs	r2, #0
 800ae90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ae94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ae9a:	b25b      	sxtb	r3, r3
 800ae9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aea0:	d103      	bne.n	800aeaa <xQueueReceive+0x13e>
 800aea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aea4:	2200      	movs	r2, #0
 800aea6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800aeaa:	f001 ff7f 	bl	800cdac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800aeae:	1d3a      	adds	r2, r7, #4
 800aeb0:	f107 0310 	add.w	r3, r7, #16
 800aeb4:	4611      	mov	r1, r2
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 ffae 	bl	800be18 <xTaskCheckForTimeOut>
 800aebc:	4603      	mov	r3, r0
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d123      	bne.n	800af0a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aec4:	f000 f916 	bl	800b0f4 <prvIsQueueEmpty>
 800aec8:	4603      	mov	r3, r0
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d017      	beq.n	800aefe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed0:	3324      	adds	r3, #36	@ 0x24
 800aed2:	687a      	ldr	r2, [r7, #4]
 800aed4:	4611      	mov	r1, r2
 800aed6:	4618      	mov	r0, r3
 800aed8:	f000 fed2 	bl	800bc80 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aedc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800aede:	f000 f8b7 	bl	800b050 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aee2:	f000 fc05 	bl	800b6f0 <xTaskResumeAll>
 800aee6:	4603      	mov	r3, r0
 800aee8:	2b00      	cmp	r3, #0
 800aeea:	d189      	bne.n	800ae00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800aeec:	4b0f      	ldr	r3, [pc, #60]	@ (800af2c <xQueueReceive+0x1c0>)
 800aeee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aef2:	601a      	str	r2, [r3, #0]
 800aef4:	f3bf 8f4f 	dsb	sy
 800aef8:	f3bf 8f6f 	isb	sy
 800aefc:	e780      	b.n	800ae00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800aefe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af00:	f000 f8a6 	bl	800b050 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af04:	f000 fbf4 	bl	800b6f0 <xTaskResumeAll>
 800af08:	e77a      	b.n	800ae00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800af0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af0c:	f000 f8a0 	bl	800b050 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af10:	f000 fbee 	bl	800b6f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af14:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800af16:	f000 f8ed 	bl	800b0f4 <prvIsQueueEmpty>
 800af1a:	4603      	mov	r3, r0
 800af1c:	2b00      	cmp	r3, #0
 800af1e:	f43f af6f 	beq.w	800ae00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af22:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af24:	4618      	mov	r0, r3
 800af26:	3730      	adds	r7, #48	@ 0x30
 800af28:	46bd      	mov	sp, r7
 800af2a:	bd80      	pop	{r7, pc}
 800af2c:	e000ed04 	.word	0xe000ed04

0800af30 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af30:	b580      	push	{r7, lr}
 800af32:	b086      	sub	sp, #24
 800af34:	af00      	add	r7, sp, #0
 800af36:	60f8      	str	r0, [r7, #12]
 800af38:	60b9      	str	r1, [r7, #8]
 800af3a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af3c:	2300      	movs	r3, #0
 800af3e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800af44:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d10d      	bne.n	800af6a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d14d      	bne.n	800aff2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	689b      	ldr	r3, [r3, #8]
 800af5a:	4618      	mov	r0, r3
 800af5c:	f001 f8c6 	bl	800c0ec <xTaskPriorityDisinherit>
 800af60:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	2200      	movs	r2, #0
 800af66:	609a      	str	r2, [r3, #8]
 800af68:	e043      	b.n	800aff2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d119      	bne.n	800afa4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	6858      	ldr	r0, [r3, #4]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af78:	461a      	mov	r2, r3
 800af7a:	68b9      	ldr	r1, [r7, #8]
 800af7c:	f002 faa6 	bl	800d4cc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af88:	441a      	add	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	685a      	ldr	r2, [r3, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	689b      	ldr	r3, [r3, #8]
 800af96:	429a      	cmp	r2, r3
 800af98:	d32b      	bcc.n	800aff2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	605a      	str	r2, [r3, #4]
 800afa2:	e026      	b.n	800aff2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	68d8      	ldr	r0, [r3, #12]
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afac:	461a      	mov	r2, r3
 800afae:	68b9      	ldr	r1, [r7, #8]
 800afb0:	f002 fa8c 	bl	800d4cc <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	68da      	ldr	r2, [r3, #12]
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbc:	425b      	negs	r3, r3
 800afbe:	441a      	add	r2, r3
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afc4:	68fb      	ldr	r3, [r7, #12]
 800afc6:	68da      	ldr	r2, [r3, #12]
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	429a      	cmp	r2, r3
 800afce:	d207      	bcs.n	800afe0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	689a      	ldr	r2, [r3, #8]
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afd8:	425b      	negs	r3, r3
 800afda:	441a      	add	r2, r3
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2b02      	cmp	r3, #2
 800afe4:	d105      	bne.n	800aff2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d002      	beq.n	800aff2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	3b01      	subs	r3, #1
 800aff0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aff2:	693b      	ldr	r3, [r7, #16]
 800aff4:	1c5a      	adds	r2, r3, #1
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800affa:	697b      	ldr	r3, [r7, #20]
}
 800affc:	4618      	mov	r0, r3
 800affe:	3718      	adds	r7, #24
 800b000:	46bd      	mov	sp, r7
 800b002:	bd80      	pop	{r7, pc}

0800b004 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b012:	2b00      	cmp	r3, #0
 800b014:	d018      	beq.n	800b048 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b01e:	441a      	add	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	68da      	ldr	r2, [r3, #12]
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	429a      	cmp	r2, r3
 800b02e:	d303      	bcc.n	800b038 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	68d9      	ldr	r1, [r3, #12]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b040:	461a      	mov	r2, r3
 800b042:	6838      	ldr	r0, [r7, #0]
 800b044:	f002 fa42 	bl	800d4cc <memcpy>
	}
}
 800b048:	bf00      	nop
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b058:	f001 fe76 	bl	800cd48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b062:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b064:	e011      	b.n	800b08a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d012      	beq.n	800b094 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	3324      	adds	r3, #36	@ 0x24
 800b072:	4618      	mov	r0, r3
 800b074:	f000 fe56 	bl	800bd24 <xTaskRemoveFromEventList>
 800b078:	4603      	mov	r3, r0
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d001      	beq.n	800b082 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b07e:	f000 ff2f 	bl	800bee0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b082:	7bfb      	ldrb	r3, [r7, #15]
 800b084:	3b01      	subs	r3, #1
 800b086:	b2db      	uxtb	r3, r3
 800b088:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b08a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	dce9      	bgt.n	800b066 <prvUnlockQueue+0x16>
 800b092:	e000      	b.n	800b096 <prvUnlockQueue+0x46>
					break;
 800b094:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	22ff      	movs	r2, #255	@ 0xff
 800b09a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800b09e:	f001 fe85 	bl	800cdac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0a2:	f001 fe51 	bl	800cd48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b0ac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0ae:	e011      	b.n	800b0d4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	691b      	ldr	r3, [r3, #16]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d012      	beq.n	800b0de <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	3310      	adds	r3, #16
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fe31 	bl	800bd24 <xTaskRemoveFromEventList>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d001      	beq.n	800b0cc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b0c8:	f000 ff0a 	bl	800bee0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b0cc:	7bbb      	ldrb	r3, [r7, #14]
 800b0ce:	3b01      	subs	r3, #1
 800b0d0:	b2db      	uxtb	r3, r3
 800b0d2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b0d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	dce9      	bgt.n	800b0b0 <prvUnlockQueue+0x60>
 800b0dc:	e000      	b.n	800b0e0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b0de:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	22ff      	movs	r2, #255	@ 0xff
 800b0e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800b0e8:	f001 fe60 	bl	800cdac <vPortExitCritical>
}
 800b0ec:	bf00      	nop
 800b0ee:	3710      	adds	r7, #16
 800b0f0:	46bd      	mov	sp, r7
 800b0f2:	bd80      	pop	{r7, pc}

0800b0f4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b0fc:	f001 fe24 	bl	800cd48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b104:	2b00      	cmp	r3, #0
 800b106:	d102      	bne.n	800b10e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b108:	2301      	movs	r3, #1
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	e001      	b.n	800b112 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b10e:	2300      	movs	r3, #0
 800b110:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b112:	f001 fe4b 	bl	800cdac <vPortExitCritical>

	return xReturn;
 800b116:	68fb      	ldr	r3, [r7, #12]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b128:	f001 fe0e 	bl	800cd48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b134:	429a      	cmp	r2, r3
 800b136:	d102      	bne.n	800b13e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b138:	2301      	movs	r3, #1
 800b13a:	60fb      	str	r3, [r7, #12]
 800b13c:	e001      	b.n	800b142 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b13e:	2300      	movs	r3, #0
 800b140:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b142:	f001 fe33 	bl	800cdac <vPortExitCritical>

	return xReturn;
 800b146:	68fb      	ldr	r3, [r7, #12]
}
 800b148:	4618      	mov	r0, r3
 800b14a:	3710      	adds	r7, #16
 800b14c:	46bd      	mov	sp, r7
 800b14e:	bd80      	pop	{r7, pc}

0800b150 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b150:	b480      	push	{r7}
 800b152:	b085      	sub	sp, #20
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
 800b15e:	e014      	b.n	800b18a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b160:	4a0f      	ldr	r2, [pc, #60]	@ (800b1a0 <vQueueAddToRegistry+0x50>)
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b168:	2b00      	cmp	r3, #0
 800b16a:	d10b      	bne.n	800b184 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b16c:	490c      	ldr	r1, [pc, #48]	@ (800b1a0 <vQueueAddToRegistry+0x50>)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	683a      	ldr	r2, [r7, #0]
 800b172:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b176:	4a0a      	ldr	r2, [pc, #40]	@ (800b1a0 <vQueueAddToRegistry+0x50>)
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	00db      	lsls	r3, r3, #3
 800b17c:	4413      	add	r3, r2
 800b17e:	687a      	ldr	r2, [r7, #4]
 800b180:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b182:	e006      	b.n	800b192 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	3301      	adds	r3, #1
 800b188:	60fb      	str	r3, [r7, #12]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2b07      	cmp	r3, #7
 800b18e:	d9e7      	bls.n	800b160 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b190:	bf00      	nop
 800b192:	bf00      	nop
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr
 800b19e:	bf00      	nop
 800b1a0:	20001548 	.word	0x20001548

0800b1a4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b086      	sub	sp, #24
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	60f8      	str	r0, [r7, #12]
 800b1ac:	60b9      	str	r1, [r7, #8]
 800b1ae:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b1b4:	f001 fdc8 	bl	800cd48 <vPortEnterCritical>
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800b1be:	b25b      	sxtb	r3, r3
 800b1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1c4:	d103      	bne.n	800b1ce <vQueueWaitForMessageRestricted+0x2a>
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800b1d4:	b25b      	sxtb	r3, r3
 800b1d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b1da:	d103      	bne.n	800b1e4 <vQueueWaitForMessageRestricted+0x40>
 800b1dc:	697b      	ldr	r3, [r7, #20]
 800b1de:	2200      	movs	r2, #0
 800b1e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800b1e4:	f001 fde2 	bl	800cdac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b1e8:	697b      	ldr	r3, [r7, #20]
 800b1ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d106      	bne.n	800b1fe <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	3324      	adds	r3, #36	@ 0x24
 800b1f4:	687a      	ldr	r2, [r7, #4]
 800b1f6:	68b9      	ldr	r1, [r7, #8]
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f000 fd67 	bl	800bccc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b1fe:	6978      	ldr	r0, [r7, #20]
 800b200:	f7ff ff26 	bl	800b050 <prvUnlockQueue>
	}
 800b204:	bf00      	nop
 800b206:	3718      	adds	r7, #24
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b08e      	sub	sp, #56	@ 0x38
 800b210:	af04      	add	r7, sp, #16
 800b212:	60f8      	str	r0, [r7, #12]
 800b214:	60b9      	str	r1, [r7, #8]
 800b216:	607a      	str	r2, [r7, #4]
 800b218:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b21a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d10b      	bne.n	800b238 <xTaskCreateStatic+0x2c>
	__asm volatile
 800b220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b224:	f383 8811 	msr	BASEPRI, r3
 800b228:	f3bf 8f6f 	isb	sy
 800b22c:	f3bf 8f4f 	dsb	sy
 800b230:	623b      	str	r3, [r7, #32]
}
 800b232:	bf00      	nop
 800b234:	bf00      	nop
 800b236:	e7fd      	b.n	800b234 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d10b      	bne.n	800b256 <xTaskCreateStatic+0x4a>
	__asm volatile
 800b23e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b242:	f383 8811 	msr	BASEPRI, r3
 800b246:	f3bf 8f6f 	isb	sy
 800b24a:	f3bf 8f4f 	dsb	sy
 800b24e:	61fb      	str	r3, [r7, #28]
}
 800b250:	bf00      	nop
 800b252:	bf00      	nop
 800b254:	e7fd      	b.n	800b252 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b256:	23a8      	movs	r3, #168	@ 0xa8
 800b258:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b25a:	693b      	ldr	r3, [r7, #16]
 800b25c:	2ba8      	cmp	r3, #168	@ 0xa8
 800b25e:	d00b      	beq.n	800b278 <xTaskCreateStatic+0x6c>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	61bb      	str	r3, [r7, #24]
}
 800b272:	bf00      	nop
 800b274:	bf00      	nop
 800b276:	e7fd      	b.n	800b274 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b278:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b27a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d01e      	beq.n	800b2be <xTaskCreateStatic+0xb2>
 800b280:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b282:	2b00      	cmp	r3, #0
 800b284:	d01b      	beq.n	800b2be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b288:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b28a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b28c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b28e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b290:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b292:	2202      	movs	r2, #2
 800b294:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b298:	2300      	movs	r3, #0
 800b29a:	9303      	str	r3, [sp, #12]
 800b29c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b29e:	9302      	str	r3, [sp, #8]
 800b2a0:	f107 0314 	add.w	r3, r7, #20
 800b2a4:	9301      	str	r3, [sp, #4]
 800b2a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2a8:	9300      	str	r3, [sp, #0]
 800b2aa:	683b      	ldr	r3, [r7, #0]
 800b2ac:	687a      	ldr	r2, [r7, #4]
 800b2ae:	68b9      	ldr	r1, [r7, #8]
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 f851 	bl	800b358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b2b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b2b8:	f000 f8f6 	bl	800b4a8 <prvAddNewTaskToReadyList>
 800b2bc:	e001      	b.n	800b2c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b2c2:	697b      	ldr	r3, [r7, #20]
	}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3728      	adds	r7, #40	@ 0x28
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}

0800b2cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	b08c      	sub	sp, #48	@ 0x30
 800b2d0:	af04      	add	r7, sp, #16
 800b2d2:	60f8      	str	r0, [r7, #12]
 800b2d4:	60b9      	str	r1, [r7, #8]
 800b2d6:	603b      	str	r3, [r7, #0]
 800b2d8:	4613      	mov	r3, r2
 800b2da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b2dc:	88fb      	ldrh	r3, [r7, #6]
 800b2de:	009b      	lsls	r3, r3, #2
 800b2e0:	4618      	mov	r0, r3
 800b2e2:	f001 fe53 	bl	800cf8c <pvPortMalloc>
 800b2e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b2e8:	697b      	ldr	r3, [r7, #20]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d00e      	beq.n	800b30c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b2ee:	20a8      	movs	r0, #168	@ 0xa8
 800b2f0:	f001 fe4c 	bl	800cf8c <pvPortMalloc>
 800b2f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b2f6:	69fb      	ldr	r3, [r7, #28]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d003      	beq.n	800b304 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b2fc:	69fb      	ldr	r3, [r7, #28]
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	631a      	str	r2, [r3, #48]	@ 0x30
 800b302:	e005      	b.n	800b310 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b304:	6978      	ldr	r0, [r7, #20]
 800b306:	f001 ff0f 	bl	800d128 <vPortFree>
 800b30a:	e001      	b.n	800b310 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b30c:	2300      	movs	r3, #0
 800b30e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b310:	69fb      	ldr	r3, [r7, #28]
 800b312:	2b00      	cmp	r3, #0
 800b314:	d017      	beq.n	800b346 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b316:	69fb      	ldr	r3, [r7, #28]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b31e:	88fa      	ldrh	r2, [r7, #6]
 800b320:	2300      	movs	r3, #0
 800b322:	9303      	str	r3, [sp, #12]
 800b324:	69fb      	ldr	r3, [r7, #28]
 800b326:	9302      	str	r3, [sp, #8]
 800b328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b32a:	9301      	str	r3, [sp, #4]
 800b32c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b32e:	9300      	str	r3, [sp, #0]
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	68b9      	ldr	r1, [r7, #8]
 800b334:	68f8      	ldr	r0, [r7, #12]
 800b336:	f000 f80f 	bl	800b358 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b33a:	69f8      	ldr	r0, [r7, #28]
 800b33c:	f000 f8b4 	bl	800b4a8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b340:	2301      	movs	r3, #1
 800b342:	61bb      	str	r3, [r7, #24]
 800b344:	e002      	b.n	800b34c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b346:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b34a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b34c:	69bb      	ldr	r3, [r7, #24]
	}
 800b34e:	4618      	mov	r0, r3
 800b350:	3720      	adds	r7, #32
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
	...

0800b358 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b358:	b580      	push	{r7, lr}
 800b35a:	b088      	sub	sp, #32
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	60f8      	str	r0, [r7, #12]
 800b360:	60b9      	str	r1, [r7, #8]
 800b362:	607a      	str	r2, [r7, #4]
 800b364:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b366:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b368:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	009b      	lsls	r3, r3, #2
 800b36e:	461a      	mov	r2, r3
 800b370:	21a5      	movs	r1, #165	@ 0xa5
 800b372:	f002 f819 	bl	800d3a8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800b380:	3b01      	subs	r3, #1
 800b382:	009b      	lsls	r3, r3, #2
 800b384:	4413      	add	r3, r2
 800b386:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b388:	69bb      	ldr	r3, [r7, #24]
 800b38a:	f023 0307 	bic.w	r3, r3, #7
 800b38e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b390:	69bb      	ldr	r3, [r7, #24]
 800b392:	f003 0307 	and.w	r3, r3, #7
 800b396:	2b00      	cmp	r3, #0
 800b398:	d00b      	beq.n	800b3b2 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800b39a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b39e:	f383 8811 	msr	BASEPRI, r3
 800b3a2:	f3bf 8f6f 	isb	sy
 800b3a6:	f3bf 8f4f 	dsb	sy
 800b3aa:	617b      	str	r3, [r7, #20]
}
 800b3ac:	bf00      	nop
 800b3ae:	bf00      	nop
 800b3b0:	e7fd      	b.n	800b3ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d01f      	beq.n	800b3f8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	61fb      	str	r3, [r7, #28]
 800b3bc:	e012      	b.n	800b3e4 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	69fb      	ldr	r3, [r7, #28]
 800b3c2:	4413      	add	r3, r2
 800b3c4:	7819      	ldrb	r1, [r3, #0]
 800b3c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	4413      	add	r3, r2
 800b3cc:	3334      	adds	r3, #52	@ 0x34
 800b3ce:	460a      	mov	r2, r1
 800b3d0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b3d2:	68ba      	ldr	r2, [r7, #8]
 800b3d4:	69fb      	ldr	r3, [r7, #28]
 800b3d6:	4413      	add	r3, r2
 800b3d8:	781b      	ldrb	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d006      	beq.n	800b3ec <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	3301      	adds	r3, #1
 800b3e2:	61fb      	str	r3, [r7, #28]
 800b3e4:	69fb      	ldr	r3, [r7, #28]
 800b3e6:	2b0f      	cmp	r3, #15
 800b3e8:	d9e9      	bls.n	800b3be <prvInitialiseNewTask+0x66>
 800b3ea:	e000      	b.n	800b3ee <prvInitialiseNewTask+0x96>
			{
				break;
 800b3ec:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b3ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800b3f6:	e003      	b.n	800b400 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b402:	2b37      	cmp	r3, #55	@ 0x37
 800b404:	d901      	bls.n	800b40a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b406:	2337      	movs	r3, #55	@ 0x37
 800b408:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b40a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b40e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b410:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b412:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b414:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b418:	2200      	movs	r2, #0
 800b41a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	3304      	adds	r3, #4
 800b420:	4618      	mov	r0, r3
 800b422:	f7ff f965 	bl	800a6f0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	3318      	adds	r3, #24
 800b42a:	4618      	mov	r0, r3
 800b42c:	f7ff f960 	bl	800a6f0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b432:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b434:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b438:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b43c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b444:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b448:	2200      	movs	r2, #0
 800b44a:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b44e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b450:	2200      	movs	r2, #0
 800b452:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b456:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b458:	3354      	adds	r3, #84	@ 0x54
 800b45a:	224c      	movs	r2, #76	@ 0x4c
 800b45c:	2100      	movs	r1, #0
 800b45e:	4618      	mov	r0, r3
 800b460:	f001 ffa2 	bl	800d3a8 <memset>
 800b464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b466:	4a0d      	ldr	r2, [pc, #52]	@ (800b49c <prvInitialiseNewTask+0x144>)
 800b468:	659a      	str	r2, [r3, #88]	@ 0x58
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	4a0c      	ldr	r2, [pc, #48]	@ (800b4a0 <prvInitialiseNewTask+0x148>)
 800b46e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b472:	4a0c      	ldr	r2, [pc, #48]	@ (800b4a4 <prvInitialiseNewTask+0x14c>)
 800b474:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b476:	683a      	ldr	r2, [r7, #0]
 800b478:	68f9      	ldr	r1, [r7, #12]
 800b47a:	69b8      	ldr	r0, [r7, #24]
 800b47c:	f001 fb36 	bl	800caec <pxPortInitialiseStack>
 800b480:	4602      	mov	r2, r0
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b486:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d002      	beq.n	800b492 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b48c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b48e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b490:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b492:	bf00      	nop
 800b494:	3720      	adds	r7, #32
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	200057dc 	.word	0x200057dc
 800b4a0:	20005844 	.word	0x20005844
 800b4a4:	200058ac 	.word	0x200058ac

0800b4a8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4a8:	b580      	push	{r7, lr}
 800b4aa:	b082      	sub	sp, #8
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4b0:	f001 fc4a 	bl	800cd48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b4b4:	4b2d      	ldr	r3, [pc, #180]	@ (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	3301      	adds	r3, #1
 800b4ba:	4a2c      	ldr	r2, [pc, #176]	@ (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4bc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b4be:	4b2c      	ldr	r3, [pc, #176]	@ (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d109      	bne.n	800b4da <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b4c6:	4a2a      	ldr	r2, [pc, #168]	@ (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b4cc:	4b27      	ldr	r3, [pc, #156]	@ (800b56c <prvAddNewTaskToReadyList+0xc4>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d110      	bne.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b4d4:	f000 fd28 	bl	800bf28 <prvInitialiseTaskLists>
 800b4d8:	e00d      	b.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b4da:	4b26      	ldr	r3, [pc, #152]	@ (800b574 <prvAddNewTaskToReadyList+0xcc>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d109      	bne.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b4e2:	4b23      	ldr	r3, [pc, #140]	@ (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d802      	bhi.n	800b4f6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b4f0:	4a1f      	ldr	r2, [pc, #124]	@ (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b4f6:	4b20      	ldr	r3, [pc, #128]	@ (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	3301      	adds	r3, #1
 800b4fc:	4a1e      	ldr	r2, [pc, #120]	@ (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b4fe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b500:	4b1d      	ldr	r3, [pc, #116]	@ (800b578 <prvAddNewTaskToReadyList+0xd0>)
 800b502:	681a      	ldr	r2, [r3, #0]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b50c:	4b1b      	ldr	r3, [pc, #108]	@ (800b57c <prvAddNewTaskToReadyList+0xd4>)
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	429a      	cmp	r2, r3
 800b512:	d903      	bls.n	800b51c <prvAddNewTaskToReadyList+0x74>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b518:	4a18      	ldr	r2, [pc, #96]	@ (800b57c <prvAddNewTaskToReadyList+0xd4>)
 800b51a:	6013      	str	r3, [r2, #0]
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b520:	4613      	mov	r3, r2
 800b522:	009b      	lsls	r3, r3, #2
 800b524:	4413      	add	r3, r2
 800b526:	009b      	lsls	r3, r3, #2
 800b528:	4a15      	ldr	r2, [pc, #84]	@ (800b580 <prvAddNewTaskToReadyList+0xd8>)
 800b52a:	441a      	add	r2, r3
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	3304      	adds	r3, #4
 800b530:	4619      	mov	r1, r3
 800b532:	4610      	mov	r0, r2
 800b534:	f7ff f8e9 	bl	800a70a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b538:	f001 fc38 	bl	800cdac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b53c:	4b0d      	ldr	r3, [pc, #52]	@ (800b574 <prvAddNewTaskToReadyList+0xcc>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00e      	beq.n	800b562 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b544:	4b0a      	ldr	r3, [pc, #40]	@ (800b570 <prvAddNewTaskToReadyList+0xc8>)
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b54e:	429a      	cmp	r2, r3
 800b550:	d207      	bcs.n	800b562 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b552:	4b0c      	ldr	r3, [pc, #48]	@ (800b584 <prvAddNewTaskToReadyList+0xdc>)
 800b554:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b558:	601a      	str	r2, [r3, #0]
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b562:	bf00      	nop
 800b564:	3708      	adds	r7, #8
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	20001a5c 	.word	0x20001a5c
 800b570:	20001588 	.word	0x20001588
 800b574:	20001a68 	.word	0x20001a68
 800b578:	20001a78 	.word	0x20001a78
 800b57c:	20001a64 	.word	0x20001a64
 800b580:	2000158c 	.word	0x2000158c
 800b584:	e000ed04 	.word	0xe000ed04

0800b588 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b084      	sub	sp, #16
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b590:	2300      	movs	r3, #0
 800b592:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d018      	beq.n	800b5cc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b59a:	4b14      	ldr	r3, [pc, #80]	@ (800b5ec <vTaskDelay+0x64>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <vTaskDelay+0x32>
	__asm volatile
 800b5a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5a6:	f383 8811 	msr	BASEPRI, r3
 800b5aa:	f3bf 8f6f 	isb	sy
 800b5ae:	f3bf 8f4f 	dsb	sy
 800b5b2:	60bb      	str	r3, [r7, #8]
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop
 800b5b8:	e7fd      	b.n	800b5b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b5ba:	f000 f88b 	bl	800b6d4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b5be:	2100      	movs	r1, #0
 800b5c0:	6878      	ldr	r0, [r7, #4]
 800b5c2:	f000 fee5 	bl	800c390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b5c6:	f000 f893 	bl	800b6f0 <xTaskResumeAll>
 800b5ca:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d107      	bne.n	800b5e2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b5d2:	4b07      	ldr	r3, [pc, #28]	@ (800b5f0 <vTaskDelay+0x68>)
 800b5d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b5d8:	601a      	str	r2, [r3, #0]
 800b5da:	f3bf 8f4f 	dsb	sy
 800b5de:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b5e2:	bf00      	nop
 800b5e4:	3710      	adds	r7, #16
 800b5e6:	46bd      	mov	sp, r7
 800b5e8:	bd80      	pop	{r7, pc}
 800b5ea:	bf00      	nop
 800b5ec:	20001a84 	.word	0x20001a84
 800b5f0:	e000ed04 	.word	0xe000ed04

0800b5f4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b08a      	sub	sp, #40	@ 0x28
 800b5f8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b5fe:	2300      	movs	r3, #0
 800b600:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b602:	463a      	mov	r2, r7
 800b604:	1d39      	adds	r1, r7, #4
 800b606:	f107 0308 	add.w	r3, r7, #8
 800b60a:	4618      	mov	r0, r3
 800b60c:	f7ff f81c 	bl	800a648 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b610:	6839      	ldr	r1, [r7, #0]
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68ba      	ldr	r2, [r7, #8]
 800b616:	9202      	str	r2, [sp, #8]
 800b618:	9301      	str	r3, [sp, #4]
 800b61a:	2300      	movs	r3, #0
 800b61c:	9300      	str	r3, [sp, #0]
 800b61e:	2300      	movs	r3, #0
 800b620:	460a      	mov	r2, r1
 800b622:	4924      	ldr	r1, [pc, #144]	@ (800b6b4 <vTaskStartScheduler+0xc0>)
 800b624:	4824      	ldr	r0, [pc, #144]	@ (800b6b8 <vTaskStartScheduler+0xc4>)
 800b626:	f7ff fdf1 	bl	800b20c <xTaskCreateStatic>
 800b62a:	4603      	mov	r3, r0
 800b62c:	4a23      	ldr	r2, [pc, #140]	@ (800b6bc <vTaskStartScheduler+0xc8>)
 800b62e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b630:	4b22      	ldr	r3, [pc, #136]	@ (800b6bc <vTaskStartScheduler+0xc8>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	2b00      	cmp	r3, #0
 800b636:	d002      	beq.n	800b63e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b638:	2301      	movs	r3, #1
 800b63a:	617b      	str	r3, [r7, #20]
 800b63c:	e001      	b.n	800b642 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b63e:	2300      	movs	r3, #0
 800b640:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b642:	697b      	ldr	r3, [r7, #20]
 800b644:	2b01      	cmp	r3, #1
 800b646:	d102      	bne.n	800b64e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b648:	f000 fef6 	bl	800c438 <xTimerCreateTimerTask>
 800b64c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b64e:	697b      	ldr	r3, [r7, #20]
 800b650:	2b01      	cmp	r3, #1
 800b652:	d11b      	bne.n	800b68c <vTaskStartScheduler+0x98>
	__asm volatile
 800b654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b658:	f383 8811 	msr	BASEPRI, r3
 800b65c:	f3bf 8f6f 	isb	sy
 800b660:	f3bf 8f4f 	dsb	sy
 800b664:	613b      	str	r3, [r7, #16]
}
 800b666:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b668:	4b15      	ldr	r3, [pc, #84]	@ (800b6c0 <vTaskStartScheduler+0xcc>)
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	3354      	adds	r3, #84	@ 0x54
 800b66e:	4a15      	ldr	r2, [pc, #84]	@ (800b6c4 <vTaskStartScheduler+0xd0>)
 800b670:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b672:	4b15      	ldr	r3, [pc, #84]	@ (800b6c8 <vTaskStartScheduler+0xd4>)
 800b674:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b678:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b67a:	4b14      	ldr	r3, [pc, #80]	@ (800b6cc <vTaskStartScheduler+0xd8>)
 800b67c:	2201      	movs	r2, #1
 800b67e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b680:	4b13      	ldr	r3, [pc, #76]	@ (800b6d0 <vTaskStartScheduler+0xdc>)
 800b682:	2200      	movs	r2, #0
 800b684:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b686:	f001 fabb 	bl	800cc00 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b68a:	e00f      	b.n	800b6ac <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b68c:	697b      	ldr	r3, [r7, #20]
 800b68e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b692:	d10b      	bne.n	800b6ac <vTaskStartScheduler+0xb8>
	__asm volatile
 800b694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b698:	f383 8811 	msr	BASEPRI, r3
 800b69c:	f3bf 8f6f 	isb	sy
 800b6a0:	f3bf 8f4f 	dsb	sy
 800b6a4:	60fb      	str	r3, [r7, #12]
}
 800b6a6:	bf00      	nop
 800b6a8:	bf00      	nop
 800b6aa:	e7fd      	b.n	800b6a8 <vTaskStartScheduler+0xb4>
}
 800b6ac:	bf00      	nop
 800b6ae:	3718      	adds	r7, #24
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	bd80      	pop	{r7, pc}
 800b6b4:	0800ddbc 	.word	0x0800ddbc
 800b6b8:	0800bef9 	.word	0x0800bef9
 800b6bc:	20001a80 	.word	0x20001a80
 800b6c0:	20001588 	.word	0x20001588
 800b6c4:	2000003c 	.word	0x2000003c
 800b6c8:	20001a7c 	.word	0x20001a7c
 800b6cc:	20001a68 	.word	0x20001a68
 800b6d0:	20001a60 	.word	0x20001a60

0800b6d4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b6d4:	b480      	push	{r7}
 800b6d6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b6d8:	4b04      	ldr	r3, [pc, #16]	@ (800b6ec <vTaskSuspendAll+0x18>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	3301      	adds	r3, #1
 800b6de:	4a03      	ldr	r2, [pc, #12]	@ (800b6ec <vTaskSuspendAll+0x18>)
 800b6e0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b6e2:	bf00      	nop
 800b6e4:	46bd      	mov	sp, r7
 800b6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ea:	4770      	bx	lr
 800b6ec:	20001a84 	.word	0x20001a84

0800b6f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b6f0:	b580      	push	{r7, lr}
 800b6f2:	b084      	sub	sp, #16
 800b6f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b6fe:	4b42      	ldr	r3, [pc, #264]	@ (800b808 <xTaskResumeAll+0x118>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	2b00      	cmp	r3, #0
 800b704:	d10b      	bne.n	800b71e <xTaskResumeAll+0x2e>
	__asm volatile
 800b706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b70a:	f383 8811 	msr	BASEPRI, r3
 800b70e:	f3bf 8f6f 	isb	sy
 800b712:	f3bf 8f4f 	dsb	sy
 800b716:	603b      	str	r3, [r7, #0]
}
 800b718:	bf00      	nop
 800b71a:	bf00      	nop
 800b71c:	e7fd      	b.n	800b71a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b71e:	f001 fb13 	bl	800cd48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b722:	4b39      	ldr	r3, [pc, #228]	@ (800b808 <xTaskResumeAll+0x118>)
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	3b01      	subs	r3, #1
 800b728:	4a37      	ldr	r2, [pc, #220]	@ (800b808 <xTaskResumeAll+0x118>)
 800b72a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b72c:	4b36      	ldr	r3, [pc, #216]	@ (800b808 <xTaskResumeAll+0x118>)
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	2b00      	cmp	r3, #0
 800b732:	d162      	bne.n	800b7fa <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b734:	4b35      	ldr	r3, [pc, #212]	@ (800b80c <xTaskResumeAll+0x11c>)
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d05e      	beq.n	800b7fa <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b73c:	e02f      	b.n	800b79e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b73e:	4b34      	ldr	r3, [pc, #208]	@ (800b810 <xTaskResumeAll+0x120>)
 800b740:	68db      	ldr	r3, [r3, #12]
 800b742:	68db      	ldr	r3, [r3, #12]
 800b744:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b746:	68fb      	ldr	r3, [r7, #12]
 800b748:	3318      	adds	r3, #24
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7ff f83a 	bl	800a7c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b750:	68fb      	ldr	r3, [r7, #12]
 800b752:	3304      	adds	r3, #4
 800b754:	4618      	mov	r0, r3
 800b756:	f7ff f835 	bl	800a7c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b75a:	68fb      	ldr	r3, [r7, #12]
 800b75c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b75e:	4b2d      	ldr	r3, [pc, #180]	@ (800b814 <xTaskResumeAll+0x124>)
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	429a      	cmp	r2, r3
 800b764:	d903      	bls.n	800b76e <xTaskResumeAll+0x7e>
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76a:	4a2a      	ldr	r2, [pc, #168]	@ (800b814 <xTaskResumeAll+0x124>)
 800b76c:	6013      	str	r3, [r2, #0]
 800b76e:	68fb      	ldr	r3, [r7, #12]
 800b770:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b772:	4613      	mov	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	4413      	add	r3, r2
 800b778:	009b      	lsls	r3, r3, #2
 800b77a:	4a27      	ldr	r2, [pc, #156]	@ (800b818 <xTaskResumeAll+0x128>)
 800b77c:	441a      	add	r2, r3
 800b77e:	68fb      	ldr	r3, [r7, #12]
 800b780:	3304      	adds	r3, #4
 800b782:	4619      	mov	r1, r3
 800b784:	4610      	mov	r0, r2
 800b786:	f7fe ffc0 	bl	800a70a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b78e:	4b23      	ldr	r3, [pc, #140]	@ (800b81c <xTaskResumeAll+0x12c>)
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b794:	429a      	cmp	r2, r3
 800b796:	d302      	bcc.n	800b79e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b798:	4b21      	ldr	r3, [pc, #132]	@ (800b820 <xTaskResumeAll+0x130>)
 800b79a:	2201      	movs	r2, #1
 800b79c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b79e:	4b1c      	ldr	r3, [pc, #112]	@ (800b810 <xTaskResumeAll+0x120>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1cb      	bne.n	800b73e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d001      	beq.n	800b7b0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b7ac:	f000 fc60 	bl	800c070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b7b0:	4b1c      	ldr	r3, [pc, #112]	@ (800b824 <xTaskResumeAll+0x134>)
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d010      	beq.n	800b7de <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b7bc:	f000 f940 	bl	800ba40 <xTaskIncrementTick>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d002      	beq.n	800b7cc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b7c6:	4b16      	ldr	r3, [pc, #88]	@ (800b820 <xTaskResumeAll+0x130>)
 800b7c8:	2201      	movs	r2, #1
 800b7ca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	3b01      	subs	r3, #1
 800b7d0:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	d1f1      	bne.n	800b7bc <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b7d8:	4b12      	ldr	r3, [pc, #72]	@ (800b824 <xTaskResumeAll+0x134>)
 800b7da:	2200      	movs	r2, #0
 800b7dc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b7de:	4b10      	ldr	r3, [pc, #64]	@ (800b820 <xTaskResumeAll+0x130>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d009      	beq.n	800b7fa <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b7ea:	4b0f      	ldr	r3, [pc, #60]	@ (800b828 <xTaskResumeAll+0x138>)
 800b7ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b7f0:	601a      	str	r2, [r3, #0]
 800b7f2:	f3bf 8f4f 	dsb	sy
 800b7f6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b7fa:	f001 fad7 	bl	800cdac <vPortExitCritical>

	return xAlreadyYielded;
 800b7fe:	68bb      	ldr	r3, [r7, #8]
}
 800b800:	4618      	mov	r0, r3
 800b802:	3710      	adds	r7, #16
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}
 800b808:	20001a84 	.word	0x20001a84
 800b80c:	20001a5c 	.word	0x20001a5c
 800b810:	20001a1c 	.word	0x20001a1c
 800b814:	20001a64 	.word	0x20001a64
 800b818:	2000158c 	.word	0x2000158c
 800b81c:	20001588 	.word	0x20001588
 800b820:	20001a70 	.word	0x20001a70
 800b824:	20001a6c 	.word	0x20001a6c
 800b828:	e000ed04 	.word	0xe000ed04

0800b82c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b82c:	b480      	push	{r7}
 800b82e:	b083      	sub	sp, #12
 800b830:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b832:	4b05      	ldr	r3, [pc, #20]	@ (800b848 <xTaskGetTickCount+0x1c>)
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b838:	687b      	ldr	r3, [r7, #4]
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	370c      	adds	r7, #12
 800b83e:	46bd      	mov	sp, r7
 800b840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b844:	4770      	bx	lr
 800b846:	bf00      	nop
 800b848:	20001a60 	.word	0x20001a60

0800b84c <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 800b84c:	b480      	push	{r7}
 800b84e:	b085      	sub	sp, #20
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d102      	bne.n	800b860 <pcTaskGetName+0x14>
 800b85a:	4b0e      	ldr	r3, [pc, #56]	@ (800b894 <pcTaskGetName+0x48>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	e000      	b.n	800b862 <pcTaskGetName+0x16>
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d10b      	bne.n	800b882 <pcTaskGetName+0x36>
	__asm volatile
 800b86a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b86e:	f383 8811 	msr	BASEPRI, r3
 800b872:	f3bf 8f6f 	isb	sy
 800b876:	f3bf 8f4f 	dsb	sy
 800b87a:	60bb      	str	r3, [r7, #8]
}
 800b87c:	bf00      	nop
 800b87e:	bf00      	nop
 800b880:	e7fd      	b.n	800b87e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	3334      	adds	r3, #52	@ 0x34
}
 800b886:	4618      	mov	r0, r3
 800b888:	3714      	adds	r7, #20
 800b88a:	46bd      	mov	sp, r7
 800b88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b890:	4770      	bx	lr
 800b892:	bf00      	nop
 800b894:	20001588 	.word	0x20001588

0800b898 <prvSearchForNameWithinSingleList>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	static TCB_t *prvSearchForNameWithinSingleList( List_t *pxList, const char pcNameToQuery[] )
	{
 800b898:	b480      	push	{r7}
 800b89a:	b08b      	sub	sp, #44	@ 0x2c
 800b89c:	af00      	add	r7, sp, #0
 800b89e:	6078      	str	r0, [r7, #4]
 800b8a0:	6039      	str	r1, [r7, #0]
	TCB_t *pxNextTCB, *pxFirstTCB, *pxReturn = NULL;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	627b      	str	r3, [r7, #36]	@ 0x24
	char cNextChar;
	BaseType_t xBreakLoop;

		/* This function is called with the scheduler suspended. */

		if( listCURRENT_LIST_LENGTH( pxList ) > ( UBaseType_t ) 0 )
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	2b00      	cmp	r3, #0
 800b8ac:	d05b      	beq.n	800b966 <prvSearchForNameWithinSingleList+0xce>
		{
			listGET_OWNER_OF_NEXT_ENTRY( pxFirstTCB, pxList );  /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	61bb      	str	r3, [r7, #24]
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	685b      	ldr	r3, [r3, #4]
 800b8b6:	685a      	ldr	r2, [r3, #4]
 800b8b8:	69bb      	ldr	r3, [r7, #24]
 800b8ba:	605a      	str	r2, [r3, #4]
 800b8bc:	69bb      	ldr	r3, [r7, #24]
 800b8be:	685a      	ldr	r2, [r3, #4]
 800b8c0:	69bb      	ldr	r3, [r7, #24]
 800b8c2:	3308      	adds	r3, #8
 800b8c4:	429a      	cmp	r2, r3
 800b8c6:	d104      	bne.n	800b8d2 <prvSearchForNameWithinSingleList+0x3a>
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	685b      	ldr	r3, [r3, #4]
 800b8cc:	685a      	ldr	r2, [r3, #4]
 800b8ce:	69bb      	ldr	r3, [r7, #24]
 800b8d0:	605a      	str	r2, [r3, #4]
 800b8d2:	69bb      	ldr	r3, [r7, #24]
 800b8d4:	685b      	ldr	r3, [r3, #4]
 800b8d6:	68db      	ldr	r3, [r3, #12]
 800b8d8:	617b      	str	r3, [r7, #20]

			do
			{
				listGET_OWNER_OF_NEXT_ENTRY( pxNextTCB, pxList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	613b      	str	r3, [r7, #16]
 800b8de:	693b      	ldr	r3, [r7, #16]
 800b8e0:	685b      	ldr	r3, [r3, #4]
 800b8e2:	685a      	ldr	r2, [r3, #4]
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	605a      	str	r2, [r3, #4]
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	685a      	ldr	r2, [r3, #4]
 800b8ec:	693b      	ldr	r3, [r7, #16]
 800b8ee:	3308      	adds	r3, #8
 800b8f0:	429a      	cmp	r2, r3
 800b8f2:	d104      	bne.n	800b8fe <prvSearchForNameWithinSingleList+0x66>
 800b8f4:	693b      	ldr	r3, [r7, #16]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	685a      	ldr	r2, [r3, #4]
 800b8fa:	693b      	ldr	r3, [r7, #16]
 800b8fc:	605a      	str	r2, [r3, #4]
 800b8fe:	693b      	ldr	r3, [r7, #16]
 800b900:	685b      	ldr	r3, [r3, #4]
 800b902:	68db      	ldr	r3, [r3, #12]
 800b904:	60fb      	str	r3, [r7, #12]

				/* Check each character in the name looking for a match or
				mismatch. */
				xBreakLoop = pdFALSE;
 800b906:	2300      	movs	r3, #0
 800b908:	61fb      	str	r3, [r7, #28]
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b90a:	2300      	movs	r3, #0
 800b90c:	623b      	str	r3, [r7, #32]
 800b90e:	e01c      	b.n	800b94a <prvSearchForNameWithinSingleList+0xb2>
				{
					cNextChar = pxNextTCB->pcTaskName[ x ];
 800b910:	68fa      	ldr	r2, [r7, #12]
 800b912:	6a3b      	ldr	r3, [r7, #32]
 800b914:	4413      	add	r3, r2
 800b916:	3334      	adds	r3, #52	@ 0x34
 800b918:	781b      	ldrb	r3, [r3, #0]
 800b91a:	72fb      	strb	r3, [r7, #11]

					if( cNextChar != pcNameToQuery[ x ] )
 800b91c:	683a      	ldr	r2, [r7, #0]
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	4413      	add	r3, r2
 800b922:	781b      	ldrb	r3, [r3, #0]
 800b924:	7afa      	ldrb	r2, [r7, #11]
 800b926:	429a      	cmp	r2, r3
 800b928:	d002      	beq.n	800b930 <prvSearchForNameWithinSingleList+0x98>
					{
						/* Characters didn't match. */
						xBreakLoop = pdTRUE;
 800b92a:	2301      	movs	r3, #1
 800b92c:	61fb      	str	r3, [r7, #28]
 800b92e:	e006      	b.n	800b93e <prvSearchForNameWithinSingleList+0xa6>
					}
					else if( cNextChar == ( char ) 0x00 )
 800b930:	7afb      	ldrb	r3, [r7, #11]
 800b932:	2b00      	cmp	r3, #0
 800b934:	d103      	bne.n	800b93e <prvSearchForNameWithinSingleList+0xa6>
					{
						/* Both strings terminated, a match must have been
						found. */
						pxReturn = pxNextTCB;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	627b      	str	r3, [r7, #36]	@ 0x24
						xBreakLoop = pdTRUE;
 800b93a:	2301      	movs	r3, #1
 800b93c:	61fb      	str	r3, [r7, #28]
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					if( xBreakLoop != pdFALSE )
 800b93e:	69fb      	ldr	r3, [r7, #28]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d106      	bne.n	800b952 <prvSearchForNameWithinSingleList+0xba>
				for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b944:	6a3b      	ldr	r3, [r7, #32]
 800b946:	3301      	adds	r3, #1
 800b948:	623b      	str	r3, [r7, #32]
 800b94a:	6a3b      	ldr	r3, [r7, #32]
 800b94c:	2b0f      	cmp	r3, #15
 800b94e:	d9df      	bls.n	800b910 <prvSearchForNameWithinSingleList+0x78>
 800b950:	e000      	b.n	800b954 <prvSearchForNameWithinSingleList+0xbc>
					{
						break;
 800b952:	bf00      	nop
					}
				}

				if( pxReturn != NULL )
 800b954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b956:	2b00      	cmp	r3, #0
 800b958:	d104      	bne.n	800b964 <prvSearchForNameWithinSingleList+0xcc>
				{
					/* The handle has been found. */
					break;
				}

			} while( pxNextTCB != pxFirstTCB );
 800b95a:	68fa      	ldr	r2, [r7, #12]
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	429a      	cmp	r2, r3
 800b960:	d1bb      	bne.n	800b8da <prvSearchForNameWithinSingleList+0x42>
 800b962:	e000      	b.n	800b966 <prvSearchForNameWithinSingleList+0xce>
					break;
 800b964:	bf00      	nop
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return pxReturn;
 800b966:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 800b968:	4618      	mov	r0, r3
 800b96a:	372c      	adds	r7, #44	@ 0x2c
 800b96c:	46bd      	mov	sp, r7
 800b96e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b972:	4770      	bx	lr

0800b974 <xTaskGetHandle>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_xTaskGetHandle == 1 )

	TaskHandle_t xTaskGetHandle( const char *pcNameToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b974:	b580      	push	{r7, lr}
 800b976:	b086      	sub	sp, #24
 800b978:	af00      	add	r7, sp, #0
 800b97a:	6078      	str	r0, [r7, #4]
	UBaseType_t uxQueue = configMAX_PRIORITIES;
 800b97c:	2338      	movs	r3, #56	@ 0x38
 800b97e:	617b      	str	r3, [r7, #20]
	TCB_t* pxTCB;

		/* Task names will be truncated to configMAX_TASK_NAME_LEN - 1 bytes. */
		configASSERT( strlen( pcNameToQuery ) < configMAX_TASK_NAME_LEN );
 800b980:	6878      	ldr	r0, [r7, #4]
 800b982:	f7f4 fc25 	bl	80001d0 <strlen>
 800b986:	4603      	mov	r3, r0
 800b988:	2b0f      	cmp	r3, #15
 800b98a:	d90b      	bls.n	800b9a4 <xTaskGetHandle+0x30>
	__asm volatile
 800b98c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b990:	f383 8811 	msr	BASEPRI, r3
 800b994:	f3bf 8f6f 	isb	sy
 800b998:	f3bf 8f4f 	dsb	sy
 800b99c:	60fb      	str	r3, [r7, #12]
}
 800b99e:	bf00      	nop
 800b9a0:	bf00      	nop
 800b9a2:	e7fd      	b.n	800b9a0 <xTaskGetHandle+0x2c>

		vTaskSuspendAll();
 800b9a4:	f7ff fe96 	bl	800b6d4 <vTaskSuspendAll>
		{
			/* Search the ready lists. */
			do
			{
				uxQueue--;
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	3b01      	subs	r3, #1
 800b9ac:	617b      	str	r3, [r7, #20]
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) &( pxReadyTasksLists[ uxQueue ] ), pcNameToQuery );
 800b9ae:	697a      	ldr	r2, [r7, #20]
 800b9b0:	4613      	mov	r3, r2
 800b9b2:	009b      	lsls	r3, r3, #2
 800b9b4:	4413      	add	r3, r2
 800b9b6:	009b      	lsls	r3, r3, #2
 800b9b8:	4a1c      	ldr	r2, [pc, #112]	@ (800ba2c <xTaskGetHandle+0xb8>)
 800b9ba:	4413      	add	r3, r2
 800b9bc:	6879      	ldr	r1, [r7, #4]
 800b9be:	4618      	mov	r0, r3
 800b9c0:	f7ff ff6a 	bl	800b898 <prvSearchForNameWithinSingleList>
 800b9c4:	6138      	str	r0, [r7, #16]

				if( pxTCB != NULL )
 800b9c6:	693b      	ldr	r3, [r7, #16]
 800b9c8:	2b00      	cmp	r3, #0
 800b9ca:	d103      	bne.n	800b9d4 <xTaskGetHandle+0x60>
				{
					/* Found the handle. */
					break;
				}

			} while( uxQueue > ( UBaseType_t ) tskIDLE_PRIORITY ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9cc:	697b      	ldr	r3, [r7, #20]
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d1ea      	bne.n	800b9a8 <xTaskGetHandle+0x34>
 800b9d2:	e000      	b.n	800b9d6 <xTaskGetHandle+0x62>
					break;
 800b9d4:	bf00      	nop

			/* Search the delayed lists. */
			if( pxTCB == NULL )
 800b9d6:	693b      	ldr	r3, [r7, #16]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d106      	bne.n	800b9ea <xTaskGetHandle+0x76>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxDelayedTaskList, pcNameToQuery );
 800b9dc:	4b14      	ldr	r3, [pc, #80]	@ (800ba30 <xTaskGetHandle+0xbc>)
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	6879      	ldr	r1, [r7, #4]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f7ff ff58 	bl	800b898 <prvSearchForNameWithinSingleList>
 800b9e8:	6138      	str	r0, [r7, #16]
			}

			if( pxTCB == NULL )
 800b9ea:	693b      	ldr	r3, [r7, #16]
 800b9ec:	2b00      	cmp	r3, #0
 800b9ee:	d106      	bne.n	800b9fe <xTaskGetHandle+0x8a>
			{
				pxTCB = prvSearchForNameWithinSingleList( ( List_t * ) pxOverflowDelayedTaskList, pcNameToQuery );
 800b9f0:	4b10      	ldr	r3, [pc, #64]	@ (800ba34 <xTaskGetHandle+0xc0>)
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	6879      	ldr	r1, [r7, #4]
 800b9f6:	4618      	mov	r0, r3
 800b9f8:	f7ff ff4e 	bl	800b898 <prvSearchForNameWithinSingleList>
 800b9fc:	6138      	str	r0, [r7, #16]
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
			{
				if( pxTCB == NULL )
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d104      	bne.n	800ba0e <xTaskGetHandle+0x9a>
				{
					/* Search the suspended list. */
					pxTCB = prvSearchForNameWithinSingleList( &xSuspendedTaskList, pcNameToQuery );
 800ba04:	6879      	ldr	r1, [r7, #4]
 800ba06:	480c      	ldr	r0, [pc, #48]	@ (800ba38 <xTaskGetHandle+0xc4>)
 800ba08:	f7ff ff46 	bl	800b898 <prvSearchForNameWithinSingleList>
 800ba0c:	6138      	str	r0, [r7, #16]
			}
			#endif

			#if( INCLUDE_vTaskDelete == 1 )
			{
				if( pxTCB == NULL )
 800ba0e:	693b      	ldr	r3, [r7, #16]
 800ba10:	2b00      	cmp	r3, #0
 800ba12:	d104      	bne.n	800ba1e <xTaskGetHandle+0xaa>
				{
					/* Search the deleted list. */
					pxTCB = prvSearchForNameWithinSingleList( &xTasksWaitingTermination, pcNameToQuery );
 800ba14:	6879      	ldr	r1, [r7, #4]
 800ba16:	4809      	ldr	r0, [pc, #36]	@ (800ba3c <xTaskGetHandle+0xc8>)
 800ba18:	f7ff ff3e 	bl	800b898 <prvSearchForNameWithinSingleList>
 800ba1c:	6138      	str	r0, [r7, #16]
				}
			}
			#endif
		}
		( void ) xTaskResumeAll();
 800ba1e:	f7ff fe67 	bl	800b6f0 <xTaskResumeAll>

		return pxTCB;
 800ba22:	693b      	ldr	r3, [r7, #16]
	}
 800ba24:	4618      	mov	r0, r3
 800ba26:	3718      	adds	r7, #24
 800ba28:	46bd      	mov	sp, r7
 800ba2a:	bd80      	pop	{r7, pc}
 800ba2c:	2000158c 	.word	0x2000158c
 800ba30:	20001a14 	.word	0x20001a14
 800ba34:	20001a18 	.word	0x20001a18
 800ba38:	20001a48 	.word	0x20001a48
 800ba3c:	20001a30 	.word	0x20001a30

0800ba40 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800ba40:	b580      	push	{r7, lr}
 800ba42:	b086      	sub	sp, #24
 800ba44:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ba46:	2300      	movs	r3, #0
 800ba48:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba4a:	4b4f      	ldr	r3, [pc, #316]	@ (800bb88 <xTaskIncrementTick+0x148>)
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	f040 8090 	bne.w	800bb74 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ba54:	4b4d      	ldr	r3, [pc, #308]	@ (800bb8c <xTaskIncrementTick+0x14c>)
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	3301      	adds	r3, #1
 800ba5a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ba5c:	4a4b      	ldr	r2, [pc, #300]	@ (800bb8c <xTaskIncrementTick+0x14c>)
 800ba5e:	693b      	ldr	r3, [r7, #16]
 800ba60:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ba62:	693b      	ldr	r3, [r7, #16]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d121      	bne.n	800baac <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ba68:	4b49      	ldr	r3, [pc, #292]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00b      	beq.n	800ba8a <xTaskIncrementTick+0x4a>
	__asm volatile
 800ba72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba76:	f383 8811 	msr	BASEPRI, r3
 800ba7a:	f3bf 8f6f 	isb	sy
 800ba7e:	f3bf 8f4f 	dsb	sy
 800ba82:	603b      	str	r3, [r7, #0]
}
 800ba84:	bf00      	nop
 800ba86:	bf00      	nop
 800ba88:	e7fd      	b.n	800ba86 <xTaskIncrementTick+0x46>
 800ba8a:	4b41      	ldr	r3, [pc, #260]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	60fb      	str	r3, [r7, #12]
 800ba90:	4b40      	ldr	r3, [pc, #256]	@ (800bb94 <xTaskIncrementTick+0x154>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	4a3e      	ldr	r2, [pc, #248]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800ba96:	6013      	str	r3, [r2, #0]
 800ba98:	4a3e      	ldr	r2, [pc, #248]	@ (800bb94 <xTaskIncrementTick+0x154>)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	6013      	str	r3, [r2, #0]
 800ba9e:	4b3e      	ldr	r3, [pc, #248]	@ (800bb98 <xTaskIncrementTick+0x158>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	3301      	adds	r3, #1
 800baa4:	4a3c      	ldr	r2, [pc, #240]	@ (800bb98 <xTaskIncrementTick+0x158>)
 800baa6:	6013      	str	r3, [r2, #0]
 800baa8:	f000 fae2 	bl	800c070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800baac:	4b3b      	ldr	r3, [pc, #236]	@ (800bb9c <xTaskIncrementTick+0x15c>)
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	693a      	ldr	r2, [r7, #16]
 800bab2:	429a      	cmp	r2, r3
 800bab4:	d349      	bcc.n	800bb4a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bab6:	4b36      	ldr	r3, [pc, #216]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	681b      	ldr	r3, [r3, #0]
 800babc:	2b00      	cmp	r3, #0
 800babe:	d104      	bne.n	800baca <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bac0:	4b36      	ldr	r3, [pc, #216]	@ (800bb9c <xTaskIncrementTick+0x15c>)
 800bac2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800bac6:	601a      	str	r2, [r3, #0]
					break;
 800bac8:	e03f      	b.n	800bb4a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800baca:	4b31      	ldr	r3, [pc, #196]	@ (800bb90 <xTaskIncrementTick+0x150>)
 800bacc:	681b      	ldr	r3, [r3, #0]
 800bace:	68db      	ldr	r3, [r3, #12]
 800bad0:	68db      	ldr	r3, [r3, #12]
 800bad2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	685b      	ldr	r3, [r3, #4]
 800bad8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800bada:	693a      	ldr	r2, [r7, #16]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	429a      	cmp	r2, r3
 800bae0:	d203      	bcs.n	800baea <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800bae2:	4a2e      	ldr	r2, [pc, #184]	@ (800bb9c <xTaskIncrementTick+0x15c>)
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800bae8:	e02f      	b.n	800bb4a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	3304      	adds	r3, #4
 800baee:	4618      	mov	r0, r3
 800baf0:	f7fe fe68 	bl	800a7c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800baf4:	68bb      	ldr	r3, [r7, #8]
 800baf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d004      	beq.n	800bb06 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800bafc:	68bb      	ldr	r3, [r7, #8]
 800bafe:	3318      	adds	r3, #24
 800bb00:	4618      	mov	r0, r3
 800bb02:	f7fe fe5f 	bl	800a7c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb0a:	4b25      	ldr	r3, [pc, #148]	@ (800bba0 <xTaskIncrementTick+0x160>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d903      	bls.n	800bb1a <xTaskIncrementTick+0xda>
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb16:	4a22      	ldr	r2, [pc, #136]	@ (800bba0 <xTaskIncrementTick+0x160>)
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4a1f      	ldr	r2, [pc, #124]	@ (800bba4 <xTaskIncrementTick+0x164>)
 800bb28:	441a      	add	r2, r3
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4610      	mov	r0, r2
 800bb32:	f7fe fdea 	bl	800a70a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800bb36:	68bb      	ldr	r3, [r7, #8]
 800bb38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3a:	4b1b      	ldr	r3, [pc, #108]	@ (800bba8 <xTaskIncrementTick+0x168>)
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d3b8      	bcc.n	800bab6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800bb44:	2301      	movs	r3, #1
 800bb46:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bb48:	e7b5      	b.n	800bab6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800bb4a:	4b17      	ldr	r3, [pc, #92]	@ (800bba8 <xTaskIncrementTick+0x168>)
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb50:	4914      	ldr	r1, [pc, #80]	@ (800bba4 <xTaskIncrementTick+0x164>)
 800bb52:	4613      	mov	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	4413      	add	r3, r2
 800bb58:	009b      	lsls	r3, r3, #2
 800bb5a:	440b      	add	r3, r1
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	d901      	bls.n	800bb66 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800bb62:	2301      	movs	r3, #1
 800bb64:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bb66:	4b11      	ldr	r3, [pc, #68]	@ (800bbac <xTaskIncrementTick+0x16c>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d007      	beq.n	800bb7e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800bb6e:	2301      	movs	r3, #1
 800bb70:	617b      	str	r3, [r7, #20]
 800bb72:	e004      	b.n	800bb7e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bb74:	4b0e      	ldr	r3, [pc, #56]	@ (800bbb0 <xTaskIncrementTick+0x170>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	3301      	adds	r3, #1
 800bb7a:	4a0d      	ldr	r2, [pc, #52]	@ (800bbb0 <xTaskIncrementTick+0x170>)
 800bb7c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bb7e:	697b      	ldr	r3, [r7, #20]
}
 800bb80:	4618      	mov	r0, r3
 800bb82:	3718      	adds	r7, #24
 800bb84:	46bd      	mov	sp, r7
 800bb86:	bd80      	pop	{r7, pc}
 800bb88:	20001a84 	.word	0x20001a84
 800bb8c:	20001a60 	.word	0x20001a60
 800bb90:	20001a14 	.word	0x20001a14
 800bb94:	20001a18 	.word	0x20001a18
 800bb98:	20001a74 	.word	0x20001a74
 800bb9c:	20001a7c 	.word	0x20001a7c
 800bba0:	20001a64 	.word	0x20001a64
 800bba4:	2000158c 	.word	0x2000158c
 800bba8:	20001588 	.word	0x20001588
 800bbac:	20001a70 	.word	0x20001a70
 800bbb0:	20001a6c 	.word	0x20001a6c

0800bbb4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b085      	sub	sp, #20
 800bbb8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bbba:	4b2b      	ldr	r3, [pc, #172]	@ (800bc68 <vTaskSwitchContext+0xb4>)
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d003      	beq.n	800bbca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bbc2:	4b2a      	ldr	r3, [pc, #168]	@ (800bc6c <vTaskSwitchContext+0xb8>)
 800bbc4:	2201      	movs	r2, #1
 800bbc6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bbc8:	e047      	b.n	800bc5a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800bbca:	4b28      	ldr	r3, [pc, #160]	@ (800bc6c <vTaskSwitchContext+0xb8>)
 800bbcc:	2200      	movs	r2, #0
 800bbce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbd0:	4b27      	ldr	r3, [pc, #156]	@ (800bc70 <vTaskSwitchContext+0xbc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	e011      	b.n	800bbfc <vTaskSwitchContext+0x48>
 800bbd8:	68fb      	ldr	r3, [r7, #12]
 800bbda:	2b00      	cmp	r3, #0
 800bbdc:	d10b      	bne.n	800bbf6 <vTaskSwitchContext+0x42>
	__asm volatile
 800bbde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbe2:	f383 8811 	msr	BASEPRI, r3
 800bbe6:	f3bf 8f6f 	isb	sy
 800bbea:	f3bf 8f4f 	dsb	sy
 800bbee:	607b      	str	r3, [r7, #4]
}
 800bbf0:	bf00      	nop
 800bbf2:	bf00      	nop
 800bbf4:	e7fd      	b.n	800bbf2 <vTaskSwitchContext+0x3e>
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	3b01      	subs	r3, #1
 800bbfa:	60fb      	str	r3, [r7, #12]
 800bbfc:	491d      	ldr	r1, [pc, #116]	@ (800bc74 <vTaskSwitchContext+0xc0>)
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	4613      	mov	r3, r2
 800bc02:	009b      	lsls	r3, r3, #2
 800bc04:	4413      	add	r3, r2
 800bc06:	009b      	lsls	r3, r3, #2
 800bc08:	440b      	add	r3, r1
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d0e3      	beq.n	800bbd8 <vTaskSwitchContext+0x24>
 800bc10:	68fa      	ldr	r2, [r7, #12]
 800bc12:	4613      	mov	r3, r2
 800bc14:	009b      	lsls	r3, r3, #2
 800bc16:	4413      	add	r3, r2
 800bc18:	009b      	lsls	r3, r3, #2
 800bc1a:	4a16      	ldr	r2, [pc, #88]	@ (800bc74 <vTaskSwitchContext+0xc0>)
 800bc1c:	4413      	add	r3, r2
 800bc1e:	60bb      	str	r3, [r7, #8]
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	685b      	ldr	r3, [r3, #4]
 800bc24:	685a      	ldr	r2, [r3, #4]
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	605a      	str	r2, [r3, #4]
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	685a      	ldr	r2, [r3, #4]
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	3308      	adds	r3, #8
 800bc32:	429a      	cmp	r2, r3
 800bc34:	d104      	bne.n	800bc40 <vTaskSwitchContext+0x8c>
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	605a      	str	r2, [r3, #4]
 800bc40:	68bb      	ldr	r3, [r7, #8]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	68db      	ldr	r3, [r3, #12]
 800bc46:	4a0c      	ldr	r2, [pc, #48]	@ (800bc78 <vTaskSwitchContext+0xc4>)
 800bc48:	6013      	str	r3, [r2, #0]
 800bc4a:	4a09      	ldr	r2, [pc, #36]	@ (800bc70 <vTaskSwitchContext+0xbc>)
 800bc4c:	68fb      	ldr	r3, [r7, #12]
 800bc4e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bc50:	4b09      	ldr	r3, [pc, #36]	@ (800bc78 <vTaskSwitchContext+0xc4>)
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	3354      	adds	r3, #84	@ 0x54
 800bc56:	4a09      	ldr	r2, [pc, #36]	@ (800bc7c <vTaskSwitchContext+0xc8>)
 800bc58:	6013      	str	r3, [r2, #0]
}
 800bc5a:	bf00      	nop
 800bc5c:	3714      	adds	r7, #20
 800bc5e:	46bd      	mov	sp, r7
 800bc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc64:	4770      	bx	lr
 800bc66:	bf00      	nop
 800bc68:	20001a84 	.word	0x20001a84
 800bc6c:	20001a70 	.word	0x20001a70
 800bc70:	20001a64 	.word	0x20001a64
 800bc74:	2000158c 	.word	0x2000158c
 800bc78:	20001588 	.word	0x20001588
 800bc7c:	2000003c 	.word	0x2000003c

0800bc80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b084      	sub	sp, #16
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
 800bc88:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d10b      	bne.n	800bca8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800bc90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc94:	f383 8811 	msr	BASEPRI, r3
 800bc98:	f3bf 8f6f 	isb	sy
 800bc9c:	f3bf 8f4f 	dsb	sy
 800bca0:	60fb      	str	r3, [r7, #12]
}
 800bca2:	bf00      	nop
 800bca4:	bf00      	nop
 800bca6:	e7fd      	b.n	800bca4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bca8:	4b07      	ldr	r3, [pc, #28]	@ (800bcc8 <vTaskPlaceOnEventList+0x48>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	3318      	adds	r3, #24
 800bcae:	4619      	mov	r1, r3
 800bcb0:	6878      	ldr	r0, [r7, #4]
 800bcb2:	f7fe fd4e 	bl	800a752 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bcb6:	2101      	movs	r1, #1
 800bcb8:	6838      	ldr	r0, [r7, #0]
 800bcba:	f000 fb69 	bl	800c390 <prvAddCurrentTaskToDelayedList>
}
 800bcbe:	bf00      	nop
 800bcc0:	3710      	adds	r7, #16
 800bcc2:	46bd      	mov	sp, r7
 800bcc4:	bd80      	pop	{r7, pc}
 800bcc6:	bf00      	nop
 800bcc8:	20001588 	.word	0x20001588

0800bccc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b086      	sub	sp, #24
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	2b00      	cmp	r3, #0
 800bcdc:	d10b      	bne.n	800bcf6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800bcde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bce2:	f383 8811 	msr	BASEPRI, r3
 800bce6:	f3bf 8f6f 	isb	sy
 800bcea:	f3bf 8f4f 	dsb	sy
 800bcee:	617b      	str	r3, [r7, #20]
}
 800bcf0:	bf00      	nop
 800bcf2:	bf00      	nop
 800bcf4:	e7fd      	b.n	800bcf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bcf6:	4b0a      	ldr	r3, [pc, #40]	@ (800bd20 <vTaskPlaceOnEventListRestricted+0x54>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	3318      	adds	r3, #24
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	68f8      	ldr	r0, [r7, #12]
 800bd00:	f7fe fd03 	bl	800a70a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800bd0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800bd0e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bd10:	6879      	ldr	r1, [r7, #4]
 800bd12:	68b8      	ldr	r0, [r7, #8]
 800bd14:	f000 fb3c 	bl	800c390 <prvAddCurrentTaskToDelayedList>
	}
 800bd18:	bf00      	nop
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}
 800bd20:	20001588 	.word	0x20001588

0800bd24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b086      	sub	sp, #24
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	68db      	ldr	r3, [r3, #12]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bd34:	693b      	ldr	r3, [r7, #16]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d10b      	bne.n	800bd52 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800bd3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd3e:	f383 8811 	msr	BASEPRI, r3
 800bd42:	f3bf 8f6f 	isb	sy
 800bd46:	f3bf 8f4f 	dsb	sy
 800bd4a:	60fb      	str	r3, [r7, #12]
}
 800bd4c:	bf00      	nop
 800bd4e:	bf00      	nop
 800bd50:	e7fd      	b.n	800bd4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bd52:	693b      	ldr	r3, [r7, #16]
 800bd54:	3318      	adds	r3, #24
 800bd56:	4618      	mov	r0, r3
 800bd58:	f7fe fd34 	bl	800a7c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bd5c:	4b1d      	ldr	r3, [pc, #116]	@ (800bdd4 <xTaskRemoveFromEventList+0xb0>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d11d      	bne.n	800bda0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bd64:	693b      	ldr	r3, [r7, #16]
 800bd66:	3304      	adds	r3, #4
 800bd68:	4618      	mov	r0, r3
 800bd6a:	f7fe fd2b 	bl	800a7c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd72:	4b19      	ldr	r3, [pc, #100]	@ (800bdd8 <xTaskRemoveFromEventList+0xb4>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	429a      	cmp	r2, r3
 800bd78:	d903      	bls.n	800bd82 <xTaskRemoveFromEventList+0x5e>
 800bd7a:	693b      	ldr	r3, [r7, #16]
 800bd7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd7e:	4a16      	ldr	r2, [pc, #88]	@ (800bdd8 <xTaskRemoveFromEventList+0xb4>)
 800bd80:	6013      	str	r3, [r2, #0]
 800bd82:	693b      	ldr	r3, [r7, #16]
 800bd84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd86:	4613      	mov	r3, r2
 800bd88:	009b      	lsls	r3, r3, #2
 800bd8a:	4413      	add	r3, r2
 800bd8c:	009b      	lsls	r3, r3, #2
 800bd8e:	4a13      	ldr	r2, [pc, #76]	@ (800bddc <xTaskRemoveFromEventList+0xb8>)
 800bd90:	441a      	add	r2, r3
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	3304      	adds	r3, #4
 800bd96:	4619      	mov	r1, r3
 800bd98:	4610      	mov	r0, r2
 800bd9a:	f7fe fcb6 	bl	800a70a <vListInsertEnd>
 800bd9e:	e005      	b.n	800bdac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bda0:	693b      	ldr	r3, [r7, #16]
 800bda2:	3318      	adds	r3, #24
 800bda4:	4619      	mov	r1, r3
 800bda6:	480e      	ldr	r0, [pc, #56]	@ (800bde0 <xTaskRemoveFromEventList+0xbc>)
 800bda8:	f7fe fcaf 	bl	800a70a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bdac:	693b      	ldr	r3, [r7, #16]
 800bdae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bdb0:	4b0c      	ldr	r3, [pc, #48]	@ (800bde4 <xTaskRemoveFromEventList+0xc0>)
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb6:	429a      	cmp	r2, r3
 800bdb8:	d905      	bls.n	800bdc6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bdba:	2301      	movs	r3, #1
 800bdbc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bdbe:	4b0a      	ldr	r3, [pc, #40]	@ (800bde8 <xTaskRemoveFromEventList+0xc4>)
 800bdc0:	2201      	movs	r2, #1
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	e001      	b.n	800bdca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bdca:	697b      	ldr	r3, [r7, #20]
}
 800bdcc:	4618      	mov	r0, r3
 800bdce:	3718      	adds	r7, #24
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}
 800bdd4:	20001a84 	.word	0x20001a84
 800bdd8:	20001a64 	.word	0x20001a64
 800bddc:	2000158c 	.word	0x2000158c
 800bde0:	20001a1c 	.word	0x20001a1c
 800bde4:	20001588 	.word	0x20001588
 800bde8:	20001a70 	.word	0x20001a70

0800bdec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bdec:	b480      	push	{r7}
 800bdee:	b083      	sub	sp, #12
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bdf4:	4b06      	ldr	r3, [pc, #24]	@ (800be10 <vTaskInternalSetTimeOutState+0x24>)
 800bdf6:	681a      	ldr	r2, [r3, #0]
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bdfc:	4b05      	ldr	r3, [pc, #20]	@ (800be14 <vTaskInternalSetTimeOutState+0x28>)
 800bdfe:	681a      	ldr	r2, [r3, #0]
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	605a      	str	r2, [r3, #4]
}
 800be04:	bf00      	nop
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	20001a74 	.word	0x20001a74
 800be14:	20001a60 	.word	0x20001a60

0800be18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b088      	sub	sp, #32
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
 800be20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10b      	bne.n	800be40 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be2c:	f383 8811 	msr	BASEPRI, r3
 800be30:	f3bf 8f6f 	isb	sy
 800be34:	f3bf 8f4f 	dsb	sy
 800be38:	613b      	str	r3, [r7, #16]
}
 800be3a:	bf00      	nop
 800be3c:	bf00      	nop
 800be3e:	e7fd      	b.n	800be3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800be40:	683b      	ldr	r3, [r7, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d10b      	bne.n	800be5e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800be46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be4a:	f383 8811 	msr	BASEPRI, r3
 800be4e:	f3bf 8f6f 	isb	sy
 800be52:	f3bf 8f4f 	dsb	sy
 800be56:	60fb      	str	r3, [r7, #12]
}
 800be58:	bf00      	nop
 800be5a:	bf00      	nop
 800be5c:	e7fd      	b.n	800be5a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800be5e:	f000 ff73 	bl	800cd48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800be62:	4b1d      	ldr	r3, [pc, #116]	@ (800bed8 <xTaskCheckForTimeOut+0xc0>)
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	69ba      	ldr	r2, [r7, #24]
 800be6e:	1ad3      	subs	r3, r2, r3
 800be70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800be7a:	d102      	bne.n	800be82 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800be7c:	2300      	movs	r3, #0
 800be7e:	61fb      	str	r3, [r7, #28]
 800be80:	e023      	b.n	800beca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681a      	ldr	r2, [r3, #0]
 800be86:	4b15      	ldr	r3, [pc, #84]	@ (800bedc <xTaskCheckForTimeOut+0xc4>)
 800be88:	681b      	ldr	r3, [r3, #0]
 800be8a:	429a      	cmp	r2, r3
 800be8c:	d007      	beq.n	800be9e <xTaskCheckForTimeOut+0x86>
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	685b      	ldr	r3, [r3, #4]
 800be92:	69ba      	ldr	r2, [r7, #24]
 800be94:	429a      	cmp	r2, r3
 800be96:	d302      	bcc.n	800be9e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800be98:	2301      	movs	r3, #1
 800be9a:	61fb      	str	r3, [r7, #28]
 800be9c:	e015      	b.n	800beca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800be9e:	683b      	ldr	r3, [r7, #0]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	697a      	ldr	r2, [r7, #20]
 800bea4:	429a      	cmp	r2, r3
 800bea6:	d20b      	bcs.n	800bec0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bea8:	683b      	ldr	r3, [r7, #0]
 800beaa:	681a      	ldr	r2, [r3, #0]
 800beac:	697b      	ldr	r3, [r7, #20]
 800beae:	1ad2      	subs	r2, r2, r3
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7ff ff99 	bl	800bdec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800beba:	2300      	movs	r3, #0
 800bebc:	61fb      	str	r3, [r7, #28]
 800bebe:	e004      	b.n	800beca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800bec0:	683b      	ldr	r3, [r7, #0]
 800bec2:	2200      	movs	r2, #0
 800bec4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800bec6:	2301      	movs	r3, #1
 800bec8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800beca:	f000 ff6f 	bl	800cdac <vPortExitCritical>

	return xReturn;
 800bece:	69fb      	ldr	r3, [r7, #28]
}
 800bed0:	4618      	mov	r0, r3
 800bed2:	3720      	adds	r7, #32
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	20001a60 	.word	0x20001a60
 800bedc:	20001a74 	.word	0x20001a74

0800bee0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800bee0:	b480      	push	{r7}
 800bee2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800bee4:	4b03      	ldr	r3, [pc, #12]	@ (800bef4 <vTaskMissedYield+0x14>)
 800bee6:	2201      	movs	r2, #1
 800bee8:	601a      	str	r2, [r3, #0]
}
 800beea:	bf00      	nop
 800beec:	46bd      	mov	sp, r7
 800beee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bef2:	4770      	bx	lr
 800bef4:	20001a70 	.word	0x20001a70

0800bef8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800bf00:	f000 f852 	bl	800bfa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800bf04:	4b06      	ldr	r3, [pc, #24]	@ (800bf20 <prvIdleTask+0x28>)
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	2b01      	cmp	r3, #1
 800bf0a:	d9f9      	bls.n	800bf00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800bf0c:	4b05      	ldr	r3, [pc, #20]	@ (800bf24 <prvIdleTask+0x2c>)
 800bf0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf12:	601a      	str	r2, [r3, #0]
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800bf1c:	e7f0      	b.n	800bf00 <prvIdleTask+0x8>
 800bf1e:	bf00      	nop
 800bf20:	2000158c 	.word	0x2000158c
 800bf24:	e000ed04 	.word	0xe000ed04

0800bf28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf2e:	2300      	movs	r3, #0
 800bf30:	607b      	str	r3, [r7, #4]
 800bf32:	e00c      	b.n	800bf4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800bf34:	687a      	ldr	r2, [r7, #4]
 800bf36:	4613      	mov	r3, r2
 800bf38:	009b      	lsls	r3, r3, #2
 800bf3a:	4413      	add	r3, r2
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4a12      	ldr	r2, [pc, #72]	@ (800bf88 <prvInitialiseTaskLists+0x60>)
 800bf40:	4413      	add	r3, r2
 800bf42:	4618      	mov	r0, r3
 800bf44:	f7fe fbb4 	bl	800a6b0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	607b      	str	r3, [r7, #4]
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2b37      	cmp	r3, #55	@ 0x37
 800bf52:	d9ef      	bls.n	800bf34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800bf54:	480d      	ldr	r0, [pc, #52]	@ (800bf8c <prvInitialiseTaskLists+0x64>)
 800bf56:	f7fe fbab 	bl	800a6b0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800bf5a:	480d      	ldr	r0, [pc, #52]	@ (800bf90 <prvInitialiseTaskLists+0x68>)
 800bf5c:	f7fe fba8 	bl	800a6b0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bf60:	480c      	ldr	r0, [pc, #48]	@ (800bf94 <prvInitialiseTaskLists+0x6c>)
 800bf62:	f7fe fba5 	bl	800a6b0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800bf66:	480c      	ldr	r0, [pc, #48]	@ (800bf98 <prvInitialiseTaskLists+0x70>)
 800bf68:	f7fe fba2 	bl	800a6b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800bf6c:	480b      	ldr	r0, [pc, #44]	@ (800bf9c <prvInitialiseTaskLists+0x74>)
 800bf6e:	f7fe fb9f 	bl	800a6b0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800bf72:	4b0b      	ldr	r3, [pc, #44]	@ (800bfa0 <prvInitialiseTaskLists+0x78>)
 800bf74:	4a05      	ldr	r2, [pc, #20]	@ (800bf8c <prvInitialiseTaskLists+0x64>)
 800bf76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bf78:	4b0a      	ldr	r3, [pc, #40]	@ (800bfa4 <prvInitialiseTaskLists+0x7c>)
 800bf7a:	4a05      	ldr	r2, [pc, #20]	@ (800bf90 <prvInitialiseTaskLists+0x68>)
 800bf7c:	601a      	str	r2, [r3, #0]
}
 800bf7e:	bf00      	nop
 800bf80:	3708      	adds	r7, #8
 800bf82:	46bd      	mov	sp, r7
 800bf84:	bd80      	pop	{r7, pc}
 800bf86:	bf00      	nop
 800bf88:	2000158c 	.word	0x2000158c
 800bf8c:	200019ec 	.word	0x200019ec
 800bf90:	20001a00 	.word	0x20001a00
 800bf94:	20001a1c 	.word	0x20001a1c
 800bf98:	20001a30 	.word	0x20001a30
 800bf9c:	20001a48 	.word	0x20001a48
 800bfa0:	20001a14 	.word	0x20001a14
 800bfa4:	20001a18 	.word	0x20001a18

0800bfa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800bfa8:	b580      	push	{r7, lr}
 800bfaa:	b082      	sub	sp, #8
 800bfac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfae:	e019      	b.n	800bfe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bfb0:	f000 feca 	bl	800cd48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfb4:	4b10      	ldr	r3, [pc, #64]	@ (800bff8 <prvCheckTasksWaitingTermination+0x50>)
 800bfb6:	68db      	ldr	r3, [r3, #12]
 800bfb8:	68db      	ldr	r3, [r3, #12]
 800bfba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	3304      	adds	r3, #4
 800bfc0:	4618      	mov	r0, r3
 800bfc2:	f7fe fbff 	bl	800a7c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bfc6:	4b0d      	ldr	r3, [pc, #52]	@ (800bffc <prvCheckTasksWaitingTermination+0x54>)
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	3b01      	subs	r3, #1
 800bfcc:	4a0b      	ldr	r2, [pc, #44]	@ (800bffc <prvCheckTasksWaitingTermination+0x54>)
 800bfce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bfd0:	4b0b      	ldr	r3, [pc, #44]	@ (800c000 <prvCheckTasksWaitingTermination+0x58>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	3b01      	subs	r3, #1
 800bfd6:	4a0a      	ldr	r2, [pc, #40]	@ (800c000 <prvCheckTasksWaitingTermination+0x58>)
 800bfd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bfda:	f000 fee7 	bl	800cdac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bfde:	6878      	ldr	r0, [r7, #4]
 800bfe0:	f000 f810 	bl	800c004 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bfe4:	4b06      	ldr	r3, [pc, #24]	@ (800c000 <prvCheckTasksWaitingTermination+0x58>)
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d1e1      	bne.n	800bfb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bfec:	bf00      	nop
 800bfee:	bf00      	nop
 800bff0:	3708      	adds	r7, #8
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20001a30 	.word	0x20001a30
 800bffc:	20001a5c 	.word	0x20001a5c
 800c000:	20001a44 	.word	0x20001a44

0800c004 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	3354      	adds	r3, #84	@ 0x54
 800c010:	4618      	mov	r0, r3
 800c012:	f001 f9fd 	bl	800d410 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d108      	bne.n	800c032 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c024:	4618      	mov	r0, r3
 800c026:	f001 f87f 	bl	800d128 <vPortFree>
				vPortFree( pxTCB );
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f001 f87c 	bl	800d128 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800c030:	e019      	b.n	800c066 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d103      	bne.n	800c044 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800c03c:	6878      	ldr	r0, [r7, #4]
 800c03e:	f001 f873 	bl	800d128 <vPortFree>
	}
 800c042:	e010      	b.n	800c066 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800c04a:	2b02      	cmp	r3, #2
 800c04c:	d00b      	beq.n	800c066 <prvDeleteTCB+0x62>
	__asm volatile
 800c04e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c052:	f383 8811 	msr	BASEPRI, r3
 800c056:	f3bf 8f6f 	isb	sy
 800c05a:	f3bf 8f4f 	dsb	sy
 800c05e:	60fb      	str	r3, [r7, #12]
}
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	e7fd      	b.n	800c062 <prvDeleteTCB+0x5e>
	}
 800c066:	bf00      	nop
 800c068:	3710      	adds	r7, #16
 800c06a:	46bd      	mov	sp, r7
 800c06c:	bd80      	pop	{r7, pc}
	...

0800c070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800c070:	b480      	push	{r7}
 800c072:	b083      	sub	sp, #12
 800c074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c076:	4b0c      	ldr	r3, [pc, #48]	@ (800c0a8 <prvResetNextTaskUnblockTime+0x38>)
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d104      	bne.n	800c08a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800c080:	4b0a      	ldr	r3, [pc, #40]	@ (800c0ac <prvResetNextTaskUnblockTime+0x3c>)
 800c082:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800c088:	e008      	b.n	800c09c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c08a:	4b07      	ldr	r3, [pc, #28]	@ (800c0a8 <prvResetNextTaskUnblockTime+0x38>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	68db      	ldr	r3, [r3, #12]
 800c090:	68db      	ldr	r3, [r3, #12]
 800c092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	4a04      	ldr	r2, [pc, #16]	@ (800c0ac <prvResetNextTaskUnblockTime+0x3c>)
 800c09a:	6013      	str	r3, [r2, #0]
}
 800c09c:	bf00      	nop
 800c09e:	370c      	adds	r7, #12
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	20001a14 	.word	0x20001a14
 800c0ac:	20001a7c 	.word	0x20001a7c

0800c0b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c0b0:	b480      	push	{r7}
 800c0b2:	b083      	sub	sp, #12
 800c0b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c0b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c0e4 <xTaskGetSchedulerState+0x34>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	2b00      	cmp	r3, #0
 800c0bc:	d102      	bne.n	800c0c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c0be:	2301      	movs	r3, #1
 800c0c0:	607b      	str	r3, [r7, #4]
 800c0c2:	e008      	b.n	800c0d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c0c4:	4b08      	ldr	r3, [pc, #32]	@ (800c0e8 <xTaskGetSchedulerState+0x38>)
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d102      	bne.n	800c0d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c0cc:	2302      	movs	r3, #2
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e001      	b.n	800c0d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c0d6:	687b      	ldr	r3, [r7, #4]
	}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	370c      	adds	r7, #12
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr
 800c0e4:	20001a68 	.word	0x20001a68
 800c0e8:	20001a84 	.word	0x20001a84

0800c0ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	b086      	sub	sp, #24
 800c0f0:	af00      	add	r7, sp, #0
 800c0f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d058      	beq.n	800c1b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c102:	4b2f      	ldr	r3, [pc, #188]	@ (800c1c0 <xTaskPriorityDisinherit+0xd4>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	693a      	ldr	r2, [r7, #16]
 800c108:	429a      	cmp	r2, r3
 800c10a:	d00b      	beq.n	800c124 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800c10c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c110:	f383 8811 	msr	BASEPRI, r3
 800c114:	f3bf 8f6f 	isb	sy
 800c118:	f3bf 8f4f 	dsb	sy
 800c11c:	60fb      	str	r3, [r7, #12]
}
 800c11e:	bf00      	nop
 800c120:	bf00      	nop
 800c122:	e7fd      	b.n	800c120 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c124:	693b      	ldr	r3, [r7, #16]
 800c126:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d10b      	bne.n	800c144 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800c12c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c130:	f383 8811 	msr	BASEPRI, r3
 800c134:	f3bf 8f6f 	isb	sy
 800c138:	f3bf 8f4f 	dsb	sy
 800c13c:	60bb      	str	r3, [r7, #8]
}
 800c13e:	bf00      	nop
 800c140:	bf00      	nop
 800c142:	e7fd      	b.n	800c140 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c148:	1e5a      	subs	r2, r3, #1
 800c14a:	693b      	ldr	r3, [r7, #16]
 800c14c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c14e:	693b      	ldr	r3, [r7, #16]
 800c150:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c156:	429a      	cmp	r2, r3
 800c158:	d02c      	beq.n	800c1b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c15a:	693b      	ldr	r3, [r7, #16]
 800c15c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c15e:	2b00      	cmp	r3, #0
 800c160:	d128      	bne.n	800c1b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c162:	693b      	ldr	r3, [r7, #16]
 800c164:	3304      	adds	r3, #4
 800c166:	4618      	mov	r0, r3
 800c168:	f7fe fb2c 	bl	800a7c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c16c:	693b      	ldr	r3, [r7, #16]
 800c16e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c174:	693b      	ldr	r3, [r7, #16]
 800c176:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c178:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800c17c:	693b      	ldr	r3, [r7, #16]
 800c17e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c184:	4b0f      	ldr	r3, [pc, #60]	@ (800c1c4 <xTaskPriorityDisinherit+0xd8>)
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	429a      	cmp	r2, r3
 800c18a:	d903      	bls.n	800c194 <xTaskPriorityDisinherit+0xa8>
 800c18c:	693b      	ldr	r3, [r7, #16]
 800c18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c190:	4a0c      	ldr	r2, [pc, #48]	@ (800c1c4 <xTaskPriorityDisinherit+0xd8>)
 800c192:	6013      	str	r3, [r2, #0]
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c198:	4613      	mov	r3, r2
 800c19a:	009b      	lsls	r3, r3, #2
 800c19c:	4413      	add	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4a09      	ldr	r2, [pc, #36]	@ (800c1c8 <xTaskPriorityDisinherit+0xdc>)
 800c1a2:	441a      	add	r2, r3
 800c1a4:	693b      	ldr	r3, [r7, #16]
 800c1a6:	3304      	adds	r3, #4
 800c1a8:	4619      	mov	r1, r3
 800c1aa:	4610      	mov	r0, r2
 800c1ac:	f7fe faad 	bl	800a70a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1b0:	2301      	movs	r3, #1
 800c1b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1b4:	697b      	ldr	r3, [r7, #20]
	}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3718      	adds	r7, #24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	20001588 	.word	0x20001588
 800c1c4:	20001a64 	.word	0x20001a64
 800c1c8:	2000158c 	.word	0x2000158c

0800c1cc <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800c1cc:	b580      	push	{r7, lr}
 800c1ce:	b084      	sub	sp, #16
 800c1d0:	af00      	add	r7, sp, #0
 800c1d2:	6078      	str	r0, [r7, #4]
 800c1d4:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800c1d6:	f000 fdb7 	bl	800cd48 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800c1da:	4b20      	ldr	r3, [pc, #128]	@ (800c25c <ulTaskNotifyTake+0x90>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c1e2:	2b00      	cmp	r3, #0
 800c1e4:	d113      	bne.n	800c20e <ulTaskNotifyTake+0x42>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800c1e6:	4b1d      	ldr	r3, [pc, #116]	@ (800c25c <ulTaskNotifyTake+0x90>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	2201      	movs	r2, #1
 800c1ec:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 800c1f0:	683b      	ldr	r3, [r7, #0]
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d00b      	beq.n	800c20e <ulTaskNotifyTake+0x42>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800c1f6:	2101      	movs	r1, #1
 800c1f8:	6838      	ldr	r0, [r7, #0]
 800c1fa:	f000 f8c9 	bl	800c390 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800c1fe:	4b18      	ldr	r3, [pc, #96]	@ (800c260 <ulTaskNotifyTake+0x94>)
 800c200:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c204:	601a      	str	r2, [r3, #0]
 800c206:	f3bf 8f4f 	dsb	sy
 800c20a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800c20e:	f000 fdcd 	bl	800cdac <vPortExitCritical>

		taskENTER_CRITICAL();
 800c212:	f000 fd99 	bl	800cd48 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800c216:	4b11      	ldr	r3, [pc, #68]	@ (800c25c <ulTaskNotifyTake+0x90>)
 800c218:	681b      	ldr	r3, [r3, #0]
 800c21a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c21e:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800c220:	68fb      	ldr	r3, [r7, #12]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00e      	beq.n	800c244 <ulTaskNotifyTake+0x78>
			{
				if( xClearCountOnExit != pdFALSE )
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d005      	beq.n	800c238 <ulTaskNotifyTake+0x6c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800c22c:	4b0b      	ldr	r3, [pc, #44]	@ (800c25c <ulTaskNotifyTake+0x90>)
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	2200      	movs	r2, #0
 800c232:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
 800c236:	e005      	b.n	800c244 <ulTaskNotifyTake+0x78>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800c238:	4b08      	ldr	r3, [pc, #32]	@ (800c25c <ulTaskNotifyTake+0x90>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	3a01      	subs	r2, #1
 800c240:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c244:	4b05      	ldr	r3, [pc, #20]	@ (800c25c <ulTaskNotifyTake+0x90>)
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	2200      	movs	r2, #0
 800c24a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
		}
		taskEXIT_CRITICAL();
 800c24e:	f000 fdad 	bl	800cdac <vPortExitCritical>

		return ulReturn;
 800c252:	68fb      	ldr	r3, [r7, #12]
	}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	20001588 	.word	0x20001588
 800c260:	e000ed04 	.word	0xe000ed04

0800c264 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800c264:	b580      	push	{r7, lr}
 800c266:	b08a      	sub	sp, #40	@ 0x28
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2b00      	cmp	r3, #0
 800c272:	d10b      	bne.n	800c28c <vTaskNotifyGiveFromISR+0x28>
	__asm volatile
 800c274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c278:	f383 8811 	msr	BASEPRI, r3
 800c27c:	f3bf 8f6f 	isb	sy
 800c280:	f3bf 8f4f 	dsb	sy
 800c284:	61bb      	str	r3, [r7, #24]
}
 800c286:	bf00      	nop
 800c288:	bf00      	nop
 800c28a:	e7fd      	b.n	800c288 <vTaskNotifyGiveFromISR+0x24>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c28c:	f000 fe3c 	bl	800cf08 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	627b      	str	r3, [r7, #36]	@ 0x24
	__asm volatile
 800c294:	f3ef 8211 	mrs	r2, BASEPRI
 800c298:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c29c:	f383 8811 	msr	BASEPRI, r3
 800c2a0:	f3bf 8f6f 	isb	sy
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	617a      	str	r2, [r7, #20]
 800c2aa:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c2ac:	697b      	ldr	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c2ae:	623b      	str	r3, [r7, #32]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b2:	f893 30a4 	ldrb.w	r3, [r3, #164]	@ 0xa4
 800c2b6:	77fb      	strb	r3, [r7, #31]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	2202      	movs	r2, #2
 800c2bc:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800c2c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2c2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800c2c6:	1c5a      	adds	r2, r3, #1
 800c2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ca:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800c2ce:	7ffb      	ldrb	r3, [r7, #31]
 800c2d0:	2b01      	cmp	r3, #1
 800c2d2:	d147      	bne.n	800c364 <vTaskNotifyGiveFromISR+0x100>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800c2d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d00b      	beq.n	800c2f4 <vTaskNotifyGiveFromISR+0x90>
	__asm volatile
 800c2dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2e0:	f383 8811 	msr	BASEPRI, r3
 800c2e4:	f3bf 8f6f 	isb	sy
 800c2e8:	f3bf 8f4f 	dsb	sy
 800c2ec:	60fb      	str	r3, [r7, #12]
}
 800c2ee:	bf00      	nop
 800c2f0:	bf00      	nop
 800c2f2:	e7fd      	b.n	800c2f0 <vTaskNotifyGiveFromISR+0x8c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c2f4:	4b20      	ldr	r3, [pc, #128]	@ (800c378 <vTaskNotifyGiveFromISR+0x114>)
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	2b00      	cmp	r3, #0
 800c2fa:	d11d      	bne.n	800c338 <vTaskNotifyGiveFromISR+0xd4>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c2fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2fe:	3304      	adds	r3, #4
 800c300:	4618      	mov	r0, r3
 800c302:	f7fe fa5f 	bl	800a7c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c30a:	4b1c      	ldr	r3, [pc, #112]	@ (800c37c <vTaskNotifyGiveFromISR+0x118>)
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	429a      	cmp	r2, r3
 800c310:	d903      	bls.n	800c31a <vTaskNotifyGiveFromISR+0xb6>
 800c312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c314:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c316:	4a19      	ldr	r2, [pc, #100]	@ (800c37c <vTaskNotifyGiveFromISR+0x118>)
 800c318:	6013      	str	r3, [r2, #0]
 800c31a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c31c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c31e:	4613      	mov	r3, r2
 800c320:	009b      	lsls	r3, r3, #2
 800c322:	4413      	add	r3, r2
 800c324:	009b      	lsls	r3, r3, #2
 800c326:	4a16      	ldr	r2, [pc, #88]	@ (800c380 <vTaskNotifyGiveFromISR+0x11c>)
 800c328:	441a      	add	r2, r3
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	3304      	adds	r3, #4
 800c32e:	4619      	mov	r1, r3
 800c330:	4610      	mov	r0, r2
 800c332:	f7fe f9ea 	bl	800a70a <vListInsertEnd>
 800c336:	e005      	b.n	800c344 <vTaskNotifyGiveFromISR+0xe0>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800c338:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c33a:	3318      	adds	r3, #24
 800c33c:	4619      	mov	r1, r3
 800c33e:	4811      	ldr	r0, [pc, #68]	@ (800c384 <vTaskNotifyGiveFromISR+0x120>)
 800c340:	f7fe f9e3 	bl	800a70a <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800c344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c348:	4b0f      	ldr	r3, [pc, #60]	@ (800c388 <vTaskNotifyGiveFromISR+0x124>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c34e:	429a      	cmp	r2, r3
 800c350:	d908      	bls.n	800c364 <vTaskNotifyGiveFromISR+0x100>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800c352:	683b      	ldr	r3, [r7, #0]
 800c354:	2b00      	cmp	r3, #0
 800c356:	d002      	beq.n	800c35e <vTaskNotifyGiveFromISR+0xfa>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800c358:	683b      	ldr	r3, [r7, #0]
 800c35a:	2201      	movs	r2, #1
 800c35c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800c35e:	4b0b      	ldr	r3, [pc, #44]	@ (800c38c <vTaskNotifyGiveFromISR+0x128>)
 800c360:	2201      	movs	r2, #1
 800c362:	601a      	str	r2, [r3, #0]
 800c364:	6a3b      	ldr	r3, [r7, #32]
 800c366:	60bb      	str	r3, [r7, #8]
	__asm volatile
 800c368:	68bb      	ldr	r3, [r7, #8]
 800c36a:	f383 8811 	msr	BASEPRI, r3
}
 800c36e:	bf00      	nop
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
	}
 800c370:	bf00      	nop
 800c372:	3728      	adds	r7, #40	@ 0x28
 800c374:	46bd      	mov	sp, r7
 800c376:	bd80      	pop	{r7, pc}
 800c378:	20001a84 	.word	0x20001a84
 800c37c:	20001a64 	.word	0x20001a64
 800c380:	2000158c 	.word	0x2000158c
 800c384:	20001a1c 	.word	0x20001a1c
 800c388:	20001588 	.word	0x20001588
 800c38c:	20001a70 	.word	0x20001a70

0800c390 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b084      	sub	sp, #16
 800c394:	af00      	add	r7, sp, #0
 800c396:	6078      	str	r0, [r7, #4]
 800c398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c39a:	4b21      	ldr	r3, [pc, #132]	@ (800c420 <prvAddCurrentTaskToDelayedList+0x90>)
 800c39c:	681b      	ldr	r3, [r3, #0]
 800c39e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c3a0:	4b20      	ldr	r3, [pc, #128]	@ (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	3304      	adds	r3, #4
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe fa0c 	bl	800a7c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c3b2:	d10a      	bne.n	800c3ca <prvAddCurrentTaskToDelayedList+0x3a>
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d007      	beq.n	800c3ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3ba:	4b1a      	ldr	r3, [pc, #104]	@ (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3304      	adds	r3, #4
 800c3c0:	4619      	mov	r1, r3
 800c3c2:	4819      	ldr	r0, [pc, #100]	@ (800c428 <prvAddCurrentTaskToDelayedList+0x98>)
 800c3c4:	f7fe f9a1 	bl	800a70a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c3c8:	e026      	b.n	800c418 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c3ca:	68fa      	ldr	r2, [r7, #12]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c3d2:	4b14      	ldr	r3, [pc, #80]	@ (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c3da:	68ba      	ldr	r2, [r7, #8]
 800c3dc:	68fb      	ldr	r3, [r7, #12]
 800c3de:	429a      	cmp	r2, r3
 800c3e0:	d209      	bcs.n	800c3f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3e2:	4b12      	ldr	r3, [pc, #72]	@ (800c42c <prvAddCurrentTaskToDelayedList+0x9c>)
 800c3e4:	681a      	ldr	r2, [r3, #0]
 800c3e6:	4b0f      	ldr	r3, [pc, #60]	@ (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	3304      	adds	r3, #4
 800c3ec:	4619      	mov	r1, r3
 800c3ee:	4610      	mov	r0, r2
 800c3f0:	f7fe f9af 	bl	800a752 <vListInsert>
}
 800c3f4:	e010      	b.n	800c418 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c3f6:	4b0e      	ldr	r3, [pc, #56]	@ (800c430 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c3f8:	681a      	ldr	r2, [r3, #0]
 800c3fa:	4b0a      	ldr	r3, [pc, #40]	@ (800c424 <prvAddCurrentTaskToDelayedList+0x94>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	3304      	adds	r3, #4
 800c400:	4619      	mov	r1, r3
 800c402:	4610      	mov	r0, r2
 800c404:	f7fe f9a5 	bl	800a752 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c408:	4b0a      	ldr	r3, [pc, #40]	@ (800c434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	68ba      	ldr	r2, [r7, #8]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d202      	bcs.n	800c418 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c412:	4a08      	ldr	r2, [pc, #32]	@ (800c434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	6013      	str	r3, [r2, #0]
}
 800c418:	bf00      	nop
 800c41a:	3710      	adds	r7, #16
 800c41c:	46bd      	mov	sp, r7
 800c41e:	bd80      	pop	{r7, pc}
 800c420:	20001a60 	.word	0x20001a60
 800c424:	20001588 	.word	0x20001588
 800c428:	20001a48 	.word	0x20001a48
 800c42c:	20001a18 	.word	0x20001a18
 800c430:	20001a14 	.word	0x20001a14
 800c434:	20001a7c 	.word	0x20001a7c

0800c438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c438:	b580      	push	{r7, lr}
 800c43a:	b08a      	sub	sp, #40	@ 0x28
 800c43c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c43e:	2300      	movs	r3, #0
 800c440:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c442:	f000 fb13 	bl	800ca6c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c446:	4b1d      	ldr	r3, [pc, #116]	@ (800c4bc <xTimerCreateTimerTask+0x84>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d021      	beq.n	800c492 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c44e:	2300      	movs	r3, #0
 800c450:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c452:	2300      	movs	r3, #0
 800c454:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c456:	1d3a      	adds	r2, r7, #4
 800c458:	f107 0108 	add.w	r1, r7, #8
 800c45c:	f107 030c 	add.w	r3, r7, #12
 800c460:	4618      	mov	r0, r3
 800c462:	f7fe f90b 	bl	800a67c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c466:	6879      	ldr	r1, [r7, #4]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	68fa      	ldr	r2, [r7, #12]
 800c46c:	9202      	str	r2, [sp, #8]
 800c46e:	9301      	str	r3, [sp, #4]
 800c470:	2302      	movs	r3, #2
 800c472:	9300      	str	r3, [sp, #0]
 800c474:	2300      	movs	r3, #0
 800c476:	460a      	mov	r2, r1
 800c478:	4911      	ldr	r1, [pc, #68]	@ (800c4c0 <xTimerCreateTimerTask+0x88>)
 800c47a:	4812      	ldr	r0, [pc, #72]	@ (800c4c4 <xTimerCreateTimerTask+0x8c>)
 800c47c:	f7fe fec6 	bl	800b20c <xTaskCreateStatic>
 800c480:	4603      	mov	r3, r0
 800c482:	4a11      	ldr	r2, [pc, #68]	@ (800c4c8 <xTimerCreateTimerTask+0x90>)
 800c484:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c486:	4b10      	ldr	r3, [pc, #64]	@ (800c4c8 <xTimerCreateTimerTask+0x90>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	d001      	beq.n	800c492 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c48e:	2301      	movs	r3, #1
 800c490:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	2b00      	cmp	r3, #0
 800c496:	d10b      	bne.n	800c4b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800c498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c49c:	f383 8811 	msr	BASEPRI, r3
 800c4a0:	f3bf 8f6f 	isb	sy
 800c4a4:	f3bf 8f4f 	dsb	sy
 800c4a8:	613b      	str	r3, [r7, #16]
}
 800c4aa:	bf00      	nop
 800c4ac:	bf00      	nop
 800c4ae:	e7fd      	b.n	800c4ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c4b0:	697b      	ldr	r3, [r7, #20]
}
 800c4b2:	4618      	mov	r0, r3
 800c4b4:	3718      	adds	r7, #24
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	20001ab8 	.word	0x20001ab8
 800c4c0:	0800ddc4 	.word	0x0800ddc4
 800c4c4:	0800c605 	.word	0x0800c605
 800c4c8:	20001abc 	.word	0x20001abc

0800c4cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c4cc:	b580      	push	{r7, lr}
 800c4ce:	b08a      	sub	sp, #40	@ 0x28
 800c4d0:	af00      	add	r7, sp, #0
 800c4d2:	60f8      	str	r0, [r7, #12]
 800c4d4:	60b9      	str	r1, [r7, #8]
 800c4d6:	607a      	str	r2, [r7, #4]
 800c4d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c4da:	2300      	movs	r3, #0
 800c4dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2b00      	cmp	r3, #0
 800c4e2:	d10b      	bne.n	800c4fc <xTimerGenericCommand+0x30>
	__asm volatile
 800c4e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e8:	f383 8811 	msr	BASEPRI, r3
 800c4ec:	f3bf 8f6f 	isb	sy
 800c4f0:	f3bf 8f4f 	dsb	sy
 800c4f4:	623b      	str	r3, [r7, #32]
}
 800c4f6:	bf00      	nop
 800c4f8:	bf00      	nop
 800c4fa:	e7fd      	b.n	800c4f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c4fc:	4b19      	ldr	r3, [pc, #100]	@ (800c564 <xTimerGenericCommand+0x98>)
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d02a      	beq.n	800c55a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	2b05      	cmp	r3, #5
 800c514:	dc18      	bgt.n	800c548 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c516:	f7ff fdcb 	bl	800c0b0 <xTaskGetSchedulerState>
 800c51a:	4603      	mov	r3, r0
 800c51c:	2b02      	cmp	r3, #2
 800c51e:	d109      	bne.n	800c534 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c520:	4b10      	ldr	r3, [pc, #64]	@ (800c564 <xTimerGenericCommand+0x98>)
 800c522:	6818      	ldr	r0, [r3, #0]
 800c524:	f107 0110 	add.w	r1, r7, #16
 800c528:	2300      	movs	r3, #0
 800c52a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c52c:	f7fe fa7e 	bl	800aa2c <xQueueGenericSend>
 800c530:	6278      	str	r0, [r7, #36]	@ 0x24
 800c532:	e012      	b.n	800c55a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c534:	4b0b      	ldr	r3, [pc, #44]	@ (800c564 <xTimerGenericCommand+0x98>)
 800c536:	6818      	ldr	r0, [r3, #0]
 800c538:	f107 0110 	add.w	r1, r7, #16
 800c53c:	2300      	movs	r3, #0
 800c53e:	2200      	movs	r2, #0
 800c540:	f7fe fa74 	bl	800aa2c <xQueueGenericSend>
 800c544:	6278      	str	r0, [r7, #36]	@ 0x24
 800c546:	e008      	b.n	800c55a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c548:	4b06      	ldr	r3, [pc, #24]	@ (800c564 <xTimerGenericCommand+0x98>)
 800c54a:	6818      	ldr	r0, [r3, #0]
 800c54c:	f107 0110 	add.w	r1, r7, #16
 800c550:	2300      	movs	r3, #0
 800c552:	683a      	ldr	r2, [r7, #0]
 800c554:	f7fe fb6c 	bl	800ac30 <xQueueGenericSendFromISR>
 800c558:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c55a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800c55c:	4618      	mov	r0, r3
 800c55e:	3728      	adds	r7, #40	@ 0x28
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}
 800c564:	20001ab8 	.word	0x20001ab8

0800c568 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b088      	sub	sp, #32
 800c56c:	af02      	add	r7, sp, #8
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c572:	4b23      	ldr	r3, [pc, #140]	@ (800c600 <prvProcessExpiredTimer+0x98>)
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68db      	ldr	r3, [r3, #12]
 800c578:	68db      	ldr	r3, [r3, #12]
 800c57a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	3304      	adds	r3, #4
 800c580:	4618      	mov	r0, r3
 800c582:	f7fe f91f 	bl	800a7c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c586:	697b      	ldr	r3, [r7, #20]
 800c588:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c58c:	f003 0304 	and.w	r3, r3, #4
 800c590:	2b00      	cmp	r3, #0
 800c592:	d023      	beq.n	800c5dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c594:	697b      	ldr	r3, [r7, #20]
 800c596:	699a      	ldr	r2, [r3, #24]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	18d1      	adds	r1, r2, r3
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	683a      	ldr	r2, [r7, #0]
 800c5a0:	6978      	ldr	r0, [r7, #20]
 800c5a2:	f000 f8d5 	bl	800c750 <prvInsertTimerInActiveList>
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d020      	beq.n	800c5ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	9300      	str	r3, [sp, #0]
 800c5b0:	2300      	movs	r3, #0
 800c5b2:	687a      	ldr	r2, [r7, #4]
 800c5b4:	2100      	movs	r1, #0
 800c5b6:	6978      	ldr	r0, [r7, #20]
 800c5b8:	f7ff ff88 	bl	800c4cc <xTimerGenericCommand>
 800c5bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c5be:	693b      	ldr	r3, [r7, #16]
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d114      	bne.n	800c5ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 800c5c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c5c8:	f383 8811 	msr	BASEPRI, r3
 800c5cc:	f3bf 8f6f 	isb	sy
 800c5d0:	f3bf 8f4f 	dsb	sy
 800c5d4:	60fb      	str	r3, [r7, #12]
}
 800c5d6:	bf00      	nop
 800c5d8:	bf00      	nop
 800c5da:	e7fd      	b.n	800c5d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c5dc:	697b      	ldr	r3, [r7, #20]
 800c5de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c5e2:	f023 0301 	bic.w	r3, r3, #1
 800c5e6:	b2da      	uxtb	r2, r3
 800c5e8:	697b      	ldr	r3, [r7, #20]
 800c5ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	6a1b      	ldr	r3, [r3, #32]
 800c5f2:	6978      	ldr	r0, [r7, #20]
 800c5f4:	4798      	blx	r3
}
 800c5f6:	bf00      	nop
 800c5f8:	3718      	adds	r7, #24
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bd80      	pop	{r7, pc}
 800c5fe:	bf00      	nop
 800c600:	20001ab0 	.word	0x20001ab0

0800c604 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c604:	b580      	push	{r7, lr}
 800c606:	b084      	sub	sp, #16
 800c608:	af00      	add	r7, sp, #0
 800c60a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c60c:	f107 0308 	add.w	r3, r7, #8
 800c610:	4618      	mov	r0, r3
 800c612:	f000 f859 	bl	800c6c8 <prvGetNextExpireTime>
 800c616:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	4619      	mov	r1, r3
 800c61c:	68f8      	ldr	r0, [r7, #12]
 800c61e:	f000 f805 	bl	800c62c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c622:	f000 f8d7 	bl	800c7d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c626:	bf00      	nop
 800c628:	e7f0      	b.n	800c60c <prvTimerTask+0x8>
	...

0800c62c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b084      	sub	sp, #16
 800c630:	af00      	add	r7, sp, #0
 800c632:	6078      	str	r0, [r7, #4]
 800c634:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c636:	f7ff f84d 	bl	800b6d4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c63a:	f107 0308 	add.w	r3, r7, #8
 800c63e:	4618      	mov	r0, r3
 800c640:	f000 f866 	bl	800c710 <prvSampleTimeNow>
 800c644:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c646:	68bb      	ldr	r3, [r7, #8]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d130      	bne.n	800c6ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c64c:	683b      	ldr	r3, [r7, #0]
 800c64e:	2b00      	cmp	r3, #0
 800c650:	d10a      	bne.n	800c668 <prvProcessTimerOrBlockTask+0x3c>
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	429a      	cmp	r2, r3
 800c658:	d806      	bhi.n	800c668 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c65a:	f7ff f849 	bl	800b6f0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c65e:	68f9      	ldr	r1, [r7, #12]
 800c660:	6878      	ldr	r0, [r7, #4]
 800c662:	f7ff ff81 	bl	800c568 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c666:	e024      	b.n	800c6b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d008      	beq.n	800c680 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c66e:	4b13      	ldr	r3, [pc, #76]	@ (800c6bc <prvProcessTimerOrBlockTask+0x90>)
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d101      	bne.n	800c67c <prvProcessTimerOrBlockTask+0x50>
 800c678:	2301      	movs	r3, #1
 800c67a:	e000      	b.n	800c67e <prvProcessTimerOrBlockTask+0x52>
 800c67c:	2300      	movs	r3, #0
 800c67e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c680:	4b0f      	ldr	r3, [pc, #60]	@ (800c6c0 <prvProcessTimerOrBlockTask+0x94>)
 800c682:	6818      	ldr	r0, [r3, #0]
 800c684:	687a      	ldr	r2, [r7, #4]
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	683a      	ldr	r2, [r7, #0]
 800c68c:	4619      	mov	r1, r3
 800c68e:	f7fe fd89 	bl	800b1a4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c692:	f7ff f82d 	bl	800b6f0 <xTaskResumeAll>
 800c696:	4603      	mov	r3, r0
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d10a      	bne.n	800c6b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c69c:	4b09      	ldr	r3, [pc, #36]	@ (800c6c4 <prvProcessTimerOrBlockTask+0x98>)
 800c69e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	f3bf 8f4f 	dsb	sy
 800c6a8:	f3bf 8f6f 	isb	sy
}
 800c6ac:	e001      	b.n	800c6b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c6ae:	f7ff f81f 	bl	800b6f0 <xTaskResumeAll>
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}
 800c6ba:	bf00      	nop
 800c6bc:	20001ab4 	.word	0x20001ab4
 800c6c0:	20001ab8 	.word	0x20001ab8
 800c6c4:	e000ed04 	.word	0xe000ed04

0800c6c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c6d0:	4b0e      	ldr	r3, [pc, #56]	@ (800c70c <prvGetNextExpireTime+0x44>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <prvGetNextExpireTime+0x16>
 800c6da:	2201      	movs	r2, #1
 800c6dc:	e000      	b.n	800c6e0 <prvGetNextExpireTime+0x18>
 800c6de:	2200      	movs	r2, #0
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2b00      	cmp	r3, #0
 800c6ea:	d105      	bne.n	800c6f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c6ec:	4b07      	ldr	r3, [pc, #28]	@ (800c70c <prvGetNextExpireTime+0x44>)
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	60fb      	str	r3, [r7, #12]
 800c6f6:	e001      	b.n	800c6fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c6fc:	68fb      	ldr	r3, [r7, #12]
}
 800c6fe:	4618      	mov	r0, r3
 800c700:	3714      	adds	r7, #20
 800c702:	46bd      	mov	sp, r7
 800c704:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	20001ab0 	.word	0x20001ab0

0800c710 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b084      	sub	sp, #16
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c718:	f7ff f888 	bl	800b82c <xTaskGetTickCount>
 800c71c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c71e:	4b0b      	ldr	r3, [pc, #44]	@ (800c74c <prvSampleTimeNow+0x3c>)
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	68fa      	ldr	r2, [r7, #12]
 800c724:	429a      	cmp	r2, r3
 800c726:	d205      	bcs.n	800c734 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c728:	f000 f93a 	bl	800c9a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2201      	movs	r2, #1
 800c730:	601a      	str	r2, [r3, #0]
 800c732:	e002      	b.n	800c73a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2200      	movs	r2, #0
 800c738:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c73a:	4a04      	ldr	r2, [pc, #16]	@ (800c74c <prvSampleTimeNow+0x3c>)
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c740:	68fb      	ldr	r3, [r7, #12]
}
 800c742:	4618      	mov	r0, r3
 800c744:	3710      	adds	r7, #16
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
 800c74a:	bf00      	nop
 800c74c:	20001ac0 	.word	0x20001ac0

0800c750 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c750:	b580      	push	{r7, lr}
 800c752:	b086      	sub	sp, #24
 800c754:	af00      	add	r7, sp, #0
 800c756:	60f8      	str	r0, [r7, #12]
 800c758:	60b9      	str	r1, [r7, #8]
 800c75a:	607a      	str	r2, [r7, #4]
 800c75c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c75e:	2300      	movs	r3, #0
 800c760:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	68ba      	ldr	r2, [r7, #8]
 800c766:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	68fa      	ldr	r2, [r7, #12]
 800c76c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c76e:	68ba      	ldr	r2, [r7, #8]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	429a      	cmp	r2, r3
 800c774:	d812      	bhi.n	800c79c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	1ad2      	subs	r2, r2, r3
 800c77c:	68fb      	ldr	r3, [r7, #12]
 800c77e:	699b      	ldr	r3, [r3, #24]
 800c780:	429a      	cmp	r2, r3
 800c782:	d302      	bcc.n	800c78a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c784:	2301      	movs	r3, #1
 800c786:	617b      	str	r3, [r7, #20]
 800c788:	e01b      	b.n	800c7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c78a:	4b10      	ldr	r3, [pc, #64]	@ (800c7cc <prvInsertTimerInActiveList+0x7c>)
 800c78c:	681a      	ldr	r2, [r3, #0]
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	3304      	adds	r3, #4
 800c792:	4619      	mov	r1, r3
 800c794:	4610      	mov	r0, r2
 800c796:	f7fd ffdc 	bl	800a752 <vListInsert>
 800c79a:	e012      	b.n	800c7c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c79c:	687a      	ldr	r2, [r7, #4]
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	429a      	cmp	r2, r3
 800c7a2:	d206      	bcs.n	800c7b2 <prvInsertTimerInActiveList+0x62>
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	683b      	ldr	r3, [r7, #0]
 800c7a8:	429a      	cmp	r2, r3
 800c7aa:	d302      	bcc.n	800c7b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c7ac:	2301      	movs	r3, #1
 800c7ae:	617b      	str	r3, [r7, #20]
 800c7b0:	e007      	b.n	800c7c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c7b2:	4b07      	ldr	r3, [pc, #28]	@ (800c7d0 <prvInsertTimerInActiveList+0x80>)
 800c7b4:	681a      	ldr	r2, [r3, #0]
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3304      	adds	r3, #4
 800c7ba:	4619      	mov	r1, r3
 800c7bc:	4610      	mov	r0, r2
 800c7be:	f7fd ffc8 	bl	800a752 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c7c2:	697b      	ldr	r3, [r7, #20]
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3718      	adds	r7, #24
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	20001ab4 	.word	0x20001ab4
 800c7d0:	20001ab0 	.word	0x20001ab0

0800c7d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b08e      	sub	sp, #56	@ 0x38
 800c7d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c7da:	e0ce      	b.n	800c97a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	da19      	bge.n	800c816 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c7e2:	1d3b      	adds	r3, r7, #4
 800c7e4:	3304      	adds	r3, #4
 800c7e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c7e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d10b      	bne.n	800c806 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c7ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7f2:	f383 8811 	msr	BASEPRI, r3
 800c7f6:	f3bf 8f6f 	isb	sy
 800c7fa:	f3bf 8f4f 	dsb	sy
 800c7fe:	61fb      	str	r3, [r7, #28]
}
 800c800:	bf00      	nop
 800c802:	bf00      	nop
 800c804:	e7fd      	b.n	800c802 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c808:	681b      	ldr	r3, [r3, #0]
 800c80a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c80c:	6850      	ldr	r0, [r2, #4]
 800c80e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c810:	6892      	ldr	r2, [r2, #8]
 800c812:	4611      	mov	r1, r2
 800c814:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	f2c0 80ae 	blt.w	800c97a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c824:	695b      	ldr	r3, [r3, #20]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d004      	beq.n	800c834 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c82a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c82c:	3304      	adds	r3, #4
 800c82e:	4618      	mov	r0, r3
 800c830:	f7fd ffc8 	bl	800a7c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c834:	463b      	mov	r3, r7
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff ff6a 	bl	800c710 <prvSampleTimeNow>
 800c83c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	2b09      	cmp	r3, #9
 800c842:	f200 8097 	bhi.w	800c974 <prvProcessReceivedCommands+0x1a0>
 800c846:	a201      	add	r2, pc, #4	@ (adr r2, 800c84c <prvProcessReceivedCommands+0x78>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c875 	.word	0x0800c875
 800c850:	0800c875 	.word	0x0800c875
 800c854:	0800c875 	.word	0x0800c875
 800c858:	0800c8eb 	.word	0x0800c8eb
 800c85c:	0800c8ff 	.word	0x0800c8ff
 800c860:	0800c94b 	.word	0x0800c94b
 800c864:	0800c875 	.word	0x0800c875
 800c868:	0800c875 	.word	0x0800c875
 800c86c:	0800c8eb 	.word	0x0800c8eb
 800c870:	0800c8ff 	.word	0x0800c8ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c876:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c87a:	f043 0301 	orr.w	r3, r3, #1
 800c87e:	b2da      	uxtb	r2, r3
 800c880:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c882:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c886:	68ba      	ldr	r2, [r7, #8]
 800c888:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c88a:	699b      	ldr	r3, [r3, #24]
 800c88c:	18d1      	adds	r1, r2, r3
 800c88e:	68bb      	ldr	r3, [r7, #8]
 800c890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c894:	f7ff ff5c 	bl	800c750 <prvInsertTimerInActiveList>
 800c898:	4603      	mov	r3, r0
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d06c      	beq.n	800c978 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c89e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a0:	6a1b      	ldr	r3, [r3, #32]
 800c8a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c8a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8ac:	f003 0304 	and.w	r3, r3, #4
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d061      	beq.n	800c978 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c8b4:	68ba      	ldr	r2, [r7, #8]
 800c8b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8b8:	699b      	ldr	r3, [r3, #24]
 800c8ba:	441a      	add	r2, r3
 800c8bc:	2300      	movs	r3, #0
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	2100      	movs	r1, #0
 800c8c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c8c6:	f7ff fe01 	bl	800c4cc <xTimerGenericCommand>
 800c8ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c8cc:	6a3b      	ldr	r3, [r7, #32]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d152      	bne.n	800c978 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c8d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8d6:	f383 8811 	msr	BASEPRI, r3
 800c8da:	f3bf 8f6f 	isb	sy
 800c8de:	f3bf 8f4f 	dsb	sy
 800c8e2:	61bb      	str	r3, [r7, #24]
}
 800c8e4:	bf00      	nop
 800c8e6:	bf00      	nop
 800c8e8:	e7fd      	b.n	800c8e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c8f0:	f023 0301 	bic.w	r3, r3, #1
 800c8f4:	b2da      	uxtb	r2, r3
 800c8f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c8fc:	e03d      	b.n	800c97a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c8fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c900:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c904:	f043 0301 	orr.w	r3, r3, #1
 800c908:	b2da      	uxtb	r2, r3
 800c90a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c90c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c914:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c918:	699b      	ldr	r3, [r3, #24]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d10b      	bne.n	800c936 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	617b      	str	r3, [r7, #20]
}
 800c930:	bf00      	nop
 800c932:	bf00      	nop
 800c934:	e7fd      	b.n	800c932 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c936:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c938:	699a      	ldr	r2, [r3, #24]
 800c93a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93c:	18d1      	adds	r1, r2, r3
 800c93e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c940:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c942:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c944:	f7ff ff04 	bl	800c750 <prvInsertTimerInActiveList>
					break;
 800c948:	e017      	b.n	800c97a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c94a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c94c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c950:	f003 0302 	and.w	r3, r3, #2
 800c954:	2b00      	cmp	r3, #0
 800c956:	d103      	bne.n	800c960 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c958:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c95a:	f000 fbe5 	bl	800d128 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c95e:	e00c      	b.n	800c97a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c960:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c962:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c966:	f023 0301 	bic.w	r3, r3, #1
 800c96a:	b2da      	uxtb	r2, r3
 800c96c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c96e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c972:	e002      	b.n	800c97a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c974:	bf00      	nop
 800c976:	e000      	b.n	800c97a <prvProcessReceivedCommands+0x1a6>
					break;
 800c978:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c97a:	4b08      	ldr	r3, [pc, #32]	@ (800c99c <prvProcessReceivedCommands+0x1c8>)
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	1d39      	adds	r1, r7, #4
 800c980:	2200      	movs	r2, #0
 800c982:	4618      	mov	r0, r3
 800c984:	f7fe f9f2 	bl	800ad6c <xQueueReceive>
 800c988:	4603      	mov	r3, r0
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	f47f af26 	bne.w	800c7dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c990:	bf00      	nop
 800c992:	bf00      	nop
 800c994:	3730      	adds	r7, #48	@ 0x30
 800c996:	46bd      	mov	sp, r7
 800c998:	bd80      	pop	{r7, pc}
 800c99a:	bf00      	nop
 800c99c:	20001ab8 	.word	0x20001ab8

0800c9a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b088      	sub	sp, #32
 800c9a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9a6:	e049      	b.n	800ca3c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c9a8:	4b2e      	ldr	r3, [pc, #184]	@ (800ca64 <prvSwitchTimerLists+0xc4>)
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	68db      	ldr	r3, [r3, #12]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b2:	4b2c      	ldr	r3, [pc, #176]	@ (800ca64 <prvSwitchTimerLists+0xc4>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	68db      	ldr	r3, [r3, #12]
 800c9b8:	68db      	ldr	r3, [r3, #12]
 800c9ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	3304      	adds	r3, #4
 800c9c0:	4618      	mov	r0, r3
 800c9c2:	f7fd feff 	bl	800a7c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	6a1b      	ldr	r3, [r3, #32]
 800c9ca:	68f8      	ldr	r0, [r7, #12]
 800c9cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c9d4:	f003 0304 	and.w	r3, r3, #4
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d02f      	beq.n	800ca3c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c9dc:	68fb      	ldr	r3, [r7, #12]
 800c9de:	699b      	ldr	r3, [r3, #24]
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	4413      	add	r3, r2
 800c9e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c9e6:	68ba      	ldr	r2, [r7, #8]
 800c9e8:	693b      	ldr	r3, [r7, #16]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d90e      	bls.n	800ca0c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	68ba      	ldr	r2, [r7, #8]
 800c9f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	68fa      	ldr	r2, [r7, #12]
 800c9f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c9fa:	4b1a      	ldr	r3, [pc, #104]	@ (800ca64 <prvSwitchTimerLists+0xc4>)
 800c9fc:	681a      	ldr	r2, [r3, #0]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	3304      	adds	r3, #4
 800ca02:	4619      	mov	r1, r3
 800ca04:	4610      	mov	r0, r2
 800ca06:	f7fd fea4 	bl	800a752 <vListInsert>
 800ca0a:	e017      	b.n	800ca3c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	9300      	str	r3, [sp, #0]
 800ca10:	2300      	movs	r3, #0
 800ca12:	693a      	ldr	r2, [r7, #16]
 800ca14:	2100      	movs	r1, #0
 800ca16:	68f8      	ldr	r0, [r7, #12]
 800ca18:	f7ff fd58 	bl	800c4cc <xTimerGenericCommand>
 800ca1c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d10b      	bne.n	800ca3c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800ca24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca28:	f383 8811 	msr	BASEPRI, r3
 800ca2c:	f3bf 8f6f 	isb	sy
 800ca30:	f3bf 8f4f 	dsb	sy
 800ca34:	603b      	str	r3, [r7, #0]
}
 800ca36:	bf00      	nop
 800ca38:	bf00      	nop
 800ca3a:	e7fd      	b.n	800ca38 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ca3c:	4b09      	ldr	r3, [pc, #36]	@ (800ca64 <prvSwitchTimerLists+0xc4>)
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d1b0      	bne.n	800c9a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ca46:	4b07      	ldr	r3, [pc, #28]	@ (800ca64 <prvSwitchTimerLists+0xc4>)
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ca4c:	4b06      	ldr	r3, [pc, #24]	@ (800ca68 <prvSwitchTimerLists+0xc8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	4a04      	ldr	r2, [pc, #16]	@ (800ca64 <prvSwitchTimerLists+0xc4>)
 800ca52:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ca54:	4a04      	ldr	r2, [pc, #16]	@ (800ca68 <prvSwitchTimerLists+0xc8>)
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	6013      	str	r3, [r2, #0]
}
 800ca5a:	bf00      	nop
 800ca5c:	3718      	adds	r7, #24
 800ca5e:	46bd      	mov	sp, r7
 800ca60:	bd80      	pop	{r7, pc}
 800ca62:	bf00      	nop
 800ca64:	20001ab0 	.word	0x20001ab0
 800ca68:	20001ab4 	.word	0x20001ab4

0800ca6c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b082      	sub	sp, #8
 800ca70:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ca72:	f000 f969 	bl	800cd48 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ca76:	4b15      	ldr	r3, [pc, #84]	@ (800cacc <prvCheckForValidListAndQueue+0x60>)
 800ca78:	681b      	ldr	r3, [r3, #0]
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d120      	bne.n	800cac0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ca7e:	4814      	ldr	r0, [pc, #80]	@ (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca80:	f7fd fe16 	bl	800a6b0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca84:	4813      	ldr	r0, [pc, #76]	@ (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca86:	f7fd fe13 	bl	800a6b0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca8a:	4b13      	ldr	r3, [pc, #76]	@ (800cad8 <prvCheckForValidListAndQueue+0x6c>)
 800ca8c:	4a10      	ldr	r2, [pc, #64]	@ (800cad0 <prvCheckForValidListAndQueue+0x64>)
 800ca8e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca90:	4b12      	ldr	r3, [pc, #72]	@ (800cadc <prvCheckForValidListAndQueue+0x70>)
 800ca92:	4a10      	ldr	r2, [pc, #64]	@ (800cad4 <prvCheckForValidListAndQueue+0x68>)
 800ca94:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca96:	2300      	movs	r3, #0
 800ca98:	9300      	str	r3, [sp, #0]
 800ca9a:	4b11      	ldr	r3, [pc, #68]	@ (800cae0 <prvCheckForValidListAndQueue+0x74>)
 800ca9c:	4a11      	ldr	r2, [pc, #68]	@ (800cae4 <prvCheckForValidListAndQueue+0x78>)
 800ca9e:	2110      	movs	r1, #16
 800caa0:	200a      	movs	r0, #10
 800caa2:	f7fd ff23 	bl	800a8ec <xQueueGenericCreateStatic>
 800caa6:	4603      	mov	r3, r0
 800caa8:	4a08      	ldr	r2, [pc, #32]	@ (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caaa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800caac:	4b07      	ldr	r3, [pc, #28]	@ (800cacc <prvCheckForValidListAndQueue+0x60>)
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d005      	beq.n	800cac0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800cab4:	4b05      	ldr	r3, [pc, #20]	@ (800cacc <prvCheckForValidListAndQueue+0x60>)
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	490b      	ldr	r1, [pc, #44]	@ (800cae8 <prvCheckForValidListAndQueue+0x7c>)
 800caba:	4618      	mov	r0, r3
 800cabc:	f7fe fb48 	bl	800b150 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cac0:	f000 f974 	bl	800cdac <vPortExitCritical>
}
 800cac4:	bf00      	nop
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd80      	pop	{r7, pc}
 800caca:	bf00      	nop
 800cacc:	20001ab8 	.word	0x20001ab8
 800cad0:	20001a88 	.word	0x20001a88
 800cad4:	20001a9c 	.word	0x20001a9c
 800cad8:	20001ab0 	.word	0x20001ab0
 800cadc:	20001ab4 	.word	0x20001ab4
 800cae0:	20001b64 	.word	0x20001b64
 800cae4:	20001ac4 	.word	0x20001ac4
 800cae8:	0800ddcc 	.word	0x0800ddcc

0800caec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	60f8      	str	r0, [r7, #12]
 800caf4:	60b9      	str	r1, [r7, #8]
 800caf6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800caf8:	68fb      	ldr	r3, [r7, #12]
 800cafa:	3b04      	subs	r3, #4
 800cafc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cafe:	68fb      	ldr	r3, [r7, #12]
 800cb00:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800cb04:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb06:	68fb      	ldr	r3, [r7, #12]
 800cb08:	3b04      	subs	r3, #4
 800cb0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	f023 0201 	bic.w	r2, r3, #1
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3b04      	subs	r3, #4
 800cb1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cb1c:	4a0c      	ldr	r2, [pc, #48]	@ (800cb50 <pxPortInitialiseStack+0x64>)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800cb22:	68fb      	ldr	r3, [r7, #12]
 800cb24:	3b14      	subs	r3, #20
 800cb26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cb28:	687a      	ldr	r2, [r7, #4]
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	3b04      	subs	r3, #4
 800cb32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	f06f 0202 	mvn.w	r2, #2
 800cb3a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	3b20      	subs	r3, #32
 800cb40:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cb42:	68fb      	ldr	r3, [r7, #12]
}
 800cb44:	4618      	mov	r0, r3
 800cb46:	3714      	adds	r7, #20
 800cb48:	46bd      	mov	sp, r7
 800cb4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4e:	4770      	bx	lr
 800cb50:	0800cb55 	.word	0x0800cb55

0800cb54 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cb5e:	4b13      	ldr	r3, [pc, #76]	@ (800cbac <prvTaskExitError+0x58>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800cb66:	d00b      	beq.n	800cb80 <prvTaskExitError+0x2c>
	__asm volatile
 800cb68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6c:	f383 8811 	msr	BASEPRI, r3
 800cb70:	f3bf 8f6f 	isb	sy
 800cb74:	f3bf 8f4f 	dsb	sy
 800cb78:	60fb      	str	r3, [r7, #12]
}
 800cb7a:	bf00      	nop
 800cb7c:	bf00      	nop
 800cb7e:	e7fd      	b.n	800cb7c <prvTaskExitError+0x28>
	__asm volatile
 800cb80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb84:	f383 8811 	msr	BASEPRI, r3
 800cb88:	f3bf 8f6f 	isb	sy
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	60bb      	str	r3, [r7, #8]
}
 800cb92:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb94:	bf00      	nop
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d0fc      	beq.n	800cb96 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb9c:	bf00      	nop
 800cb9e:	bf00      	nop
 800cba0:	3714      	adds	r7, #20
 800cba2:	46bd      	mov	sp, r7
 800cba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba8:	4770      	bx	lr
 800cbaa:	bf00      	nop
 800cbac:	20000038 	.word	0x20000038

0800cbb0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cbb0:	4b07      	ldr	r3, [pc, #28]	@ (800cbd0 <pxCurrentTCBConst2>)
 800cbb2:	6819      	ldr	r1, [r3, #0]
 800cbb4:	6808      	ldr	r0, [r1, #0]
 800cbb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cbba:	f380 8809 	msr	PSP, r0
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f04f 0000 	mov.w	r0, #0
 800cbc6:	f380 8811 	msr	BASEPRI, r0
 800cbca:	4770      	bx	lr
 800cbcc:	f3af 8000 	nop.w

0800cbd0 <pxCurrentTCBConst2>:
 800cbd0:	20001588 	.word	0x20001588
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cbd4:	bf00      	nop
 800cbd6:	bf00      	nop

0800cbd8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cbd8:	4808      	ldr	r0, [pc, #32]	@ (800cbfc <prvPortStartFirstTask+0x24>)
 800cbda:	6800      	ldr	r0, [r0, #0]
 800cbdc:	6800      	ldr	r0, [r0, #0]
 800cbde:	f380 8808 	msr	MSP, r0
 800cbe2:	f04f 0000 	mov.w	r0, #0
 800cbe6:	f380 8814 	msr	CONTROL, r0
 800cbea:	b662      	cpsie	i
 800cbec:	b661      	cpsie	f
 800cbee:	f3bf 8f4f 	dsb	sy
 800cbf2:	f3bf 8f6f 	isb	sy
 800cbf6:	df00      	svc	0
 800cbf8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cbfa:	bf00      	nop
 800cbfc:	e000ed08 	.word	0xe000ed08

0800cc00 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b086      	sub	sp, #24
 800cc04:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cc06:	4b47      	ldr	r3, [pc, #284]	@ (800cd24 <xPortStartScheduler+0x124>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	4a47      	ldr	r2, [pc, #284]	@ (800cd28 <xPortStartScheduler+0x128>)
 800cc0c:	4293      	cmp	r3, r2
 800cc0e:	d10b      	bne.n	800cc28 <xPortStartScheduler+0x28>
	__asm volatile
 800cc10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	60fb      	str	r3, [r7, #12]
}
 800cc22:	bf00      	nop
 800cc24:	bf00      	nop
 800cc26:	e7fd      	b.n	800cc24 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cc28:	4b3e      	ldr	r3, [pc, #248]	@ (800cd24 <xPortStartScheduler+0x124>)
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	4a3f      	ldr	r2, [pc, #252]	@ (800cd2c <xPortStartScheduler+0x12c>)
 800cc2e:	4293      	cmp	r3, r2
 800cc30:	d10b      	bne.n	800cc4a <xPortStartScheduler+0x4a>
	__asm volatile
 800cc32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc36:	f383 8811 	msr	BASEPRI, r3
 800cc3a:	f3bf 8f6f 	isb	sy
 800cc3e:	f3bf 8f4f 	dsb	sy
 800cc42:	613b      	str	r3, [r7, #16]
}
 800cc44:	bf00      	nop
 800cc46:	bf00      	nop
 800cc48:	e7fd      	b.n	800cc46 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cc4a:	4b39      	ldr	r3, [pc, #228]	@ (800cd30 <xPortStartScheduler+0x130>)
 800cc4c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cc4e:	697b      	ldr	r3, [r7, #20]
 800cc50:	781b      	ldrb	r3, [r3, #0]
 800cc52:	b2db      	uxtb	r3, r3
 800cc54:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	22ff      	movs	r2, #255	@ 0xff
 800cc5a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	781b      	ldrb	r3, [r3, #0]
 800cc60:	b2db      	uxtb	r3, r3
 800cc62:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cc64:	78fb      	ldrb	r3, [r7, #3]
 800cc66:	b2db      	uxtb	r3, r3
 800cc68:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800cc6c:	b2da      	uxtb	r2, r3
 800cc6e:	4b31      	ldr	r3, [pc, #196]	@ (800cd34 <xPortStartScheduler+0x134>)
 800cc70:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cc72:	4b31      	ldr	r3, [pc, #196]	@ (800cd38 <xPortStartScheduler+0x138>)
 800cc74:	2207      	movs	r2, #7
 800cc76:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc78:	e009      	b.n	800cc8e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800cc7a:	4b2f      	ldr	r3, [pc, #188]	@ (800cd38 <xPortStartScheduler+0x138>)
 800cc7c:	681b      	ldr	r3, [r3, #0]
 800cc7e:	3b01      	subs	r3, #1
 800cc80:	4a2d      	ldr	r2, [pc, #180]	@ (800cd38 <xPortStartScheduler+0x138>)
 800cc82:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc84:	78fb      	ldrb	r3, [r7, #3]
 800cc86:	b2db      	uxtb	r3, r3
 800cc88:	005b      	lsls	r3, r3, #1
 800cc8a:	b2db      	uxtb	r3, r3
 800cc8c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc8e:	78fb      	ldrb	r3, [r7, #3]
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800cc96:	2b80      	cmp	r3, #128	@ 0x80
 800cc98:	d0ef      	beq.n	800cc7a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc9a:	4b27      	ldr	r3, [pc, #156]	@ (800cd38 <xPortStartScheduler+0x138>)
 800cc9c:	681b      	ldr	r3, [r3, #0]
 800cc9e:	f1c3 0307 	rsb	r3, r3, #7
 800cca2:	2b04      	cmp	r3, #4
 800cca4:	d00b      	beq.n	800ccbe <xPortStartScheduler+0xbe>
	__asm volatile
 800cca6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccaa:	f383 8811 	msr	BASEPRI, r3
 800ccae:	f3bf 8f6f 	isb	sy
 800ccb2:	f3bf 8f4f 	dsb	sy
 800ccb6:	60bb      	str	r3, [r7, #8]
}
 800ccb8:	bf00      	nop
 800ccba:	bf00      	nop
 800ccbc:	e7fd      	b.n	800ccba <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ccbe:	4b1e      	ldr	r3, [pc, #120]	@ (800cd38 <xPortStartScheduler+0x138>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	021b      	lsls	r3, r3, #8
 800ccc4:	4a1c      	ldr	r2, [pc, #112]	@ (800cd38 <xPortStartScheduler+0x138>)
 800ccc6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ccc8:	4b1b      	ldr	r3, [pc, #108]	@ (800cd38 <xPortStartScheduler+0x138>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ccd0:	4a19      	ldr	r2, [pc, #100]	@ (800cd38 <xPortStartScheduler+0x138>)
 800ccd2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	b2da      	uxtb	r2, r3
 800ccd8:	697b      	ldr	r3, [r7, #20]
 800ccda:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ccdc:	4b17      	ldr	r3, [pc, #92]	@ (800cd3c <xPortStartScheduler+0x13c>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	4a16      	ldr	r2, [pc, #88]	@ (800cd3c <xPortStartScheduler+0x13c>)
 800cce2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800cce6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cce8:	4b14      	ldr	r3, [pc, #80]	@ (800cd3c <xPortStartScheduler+0x13c>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	4a13      	ldr	r2, [pc, #76]	@ (800cd3c <xPortStartScheduler+0x13c>)
 800ccee:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800ccf2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ccf4:	f000 f8da 	bl	800ceac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800ccf8:	4b11      	ldr	r3, [pc, #68]	@ (800cd40 <xPortStartScheduler+0x140>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800ccfe:	f000 f8f9 	bl	800cef4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cd02:	4b10      	ldr	r3, [pc, #64]	@ (800cd44 <xPortStartScheduler+0x144>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	4a0f      	ldr	r2, [pc, #60]	@ (800cd44 <xPortStartScheduler+0x144>)
 800cd08:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800cd0c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cd0e:	f7ff ff63 	bl	800cbd8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cd12:	f7fe ff4f 	bl	800bbb4 <vTaskSwitchContext>
	prvTaskExitError();
 800cd16:	f7ff ff1d 	bl	800cb54 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cd1a:	2300      	movs	r3, #0
}
 800cd1c:	4618      	mov	r0, r3
 800cd1e:	3718      	adds	r7, #24
 800cd20:	46bd      	mov	sp, r7
 800cd22:	bd80      	pop	{r7, pc}
 800cd24:	e000ed00 	.word	0xe000ed00
 800cd28:	410fc271 	.word	0x410fc271
 800cd2c:	410fc270 	.word	0x410fc270
 800cd30:	e000e400 	.word	0xe000e400
 800cd34:	20001bb4 	.word	0x20001bb4
 800cd38:	20001bb8 	.word	0x20001bb8
 800cd3c:	e000ed20 	.word	0xe000ed20
 800cd40:	20000038 	.word	0x20000038
 800cd44:	e000ef34 	.word	0xe000ef34

0800cd48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800cd48:	b480      	push	{r7}
 800cd4a:	b083      	sub	sp, #12
 800cd4c:	af00      	add	r7, sp, #0
	__asm volatile
 800cd4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd52:	f383 8811 	msr	BASEPRI, r3
 800cd56:	f3bf 8f6f 	isb	sy
 800cd5a:	f3bf 8f4f 	dsb	sy
 800cd5e:	607b      	str	r3, [r7, #4]
}
 800cd60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800cd62:	4b10      	ldr	r3, [pc, #64]	@ (800cda4 <vPortEnterCritical+0x5c>)
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	3301      	adds	r3, #1
 800cd68:	4a0e      	ldr	r2, [pc, #56]	@ (800cda4 <vPortEnterCritical+0x5c>)
 800cd6a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cd6c:	4b0d      	ldr	r3, [pc, #52]	@ (800cda4 <vPortEnterCritical+0x5c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b01      	cmp	r3, #1
 800cd72:	d110      	bne.n	800cd96 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cd74:	4b0c      	ldr	r3, [pc, #48]	@ (800cda8 <vPortEnterCritical+0x60>)
 800cd76:	681b      	ldr	r3, [r3, #0]
 800cd78:	b2db      	uxtb	r3, r3
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d00b      	beq.n	800cd96 <vPortEnterCritical+0x4e>
	__asm volatile
 800cd7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	603b      	str	r3, [r7, #0]
}
 800cd90:	bf00      	nop
 800cd92:	bf00      	nop
 800cd94:	e7fd      	b.n	800cd92 <vPortEnterCritical+0x4a>
	}
}
 800cd96:	bf00      	nop
 800cd98:	370c      	adds	r7, #12
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda0:	4770      	bx	lr
 800cda2:	bf00      	nop
 800cda4:	20000038 	.word	0x20000038
 800cda8:	e000ed04 	.word	0xe000ed04

0800cdac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cdac:	b480      	push	{r7}
 800cdae:	b083      	sub	sp, #12
 800cdb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cdb2:	4b12      	ldr	r3, [pc, #72]	@ (800cdfc <vPortExitCritical+0x50>)
 800cdb4:	681b      	ldr	r3, [r3, #0]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d10b      	bne.n	800cdd2 <vPortExitCritical+0x26>
	__asm volatile
 800cdba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdbe:	f383 8811 	msr	BASEPRI, r3
 800cdc2:	f3bf 8f6f 	isb	sy
 800cdc6:	f3bf 8f4f 	dsb	sy
 800cdca:	607b      	str	r3, [r7, #4]
}
 800cdcc:	bf00      	nop
 800cdce:	bf00      	nop
 800cdd0:	e7fd      	b.n	800cdce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cdd2:	4b0a      	ldr	r3, [pc, #40]	@ (800cdfc <vPortExitCritical+0x50>)
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	3b01      	subs	r3, #1
 800cdd8:	4a08      	ldr	r2, [pc, #32]	@ (800cdfc <vPortExitCritical+0x50>)
 800cdda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cddc:	4b07      	ldr	r3, [pc, #28]	@ (800cdfc <vPortExitCritical+0x50>)
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d105      	bne.n	800cdf0 <vPortExitCritical+0x44>
 800cde4:	2300      	movs	r3, #0
 800cde6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	f383 8811 	msr	BASEPRI, r3
}
 800cdee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cdf0:	bf00      	nop
 800cdf2:	370c      	adds	r7, #12
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdfa:	4770      	bx	lr
 800cdfc:	20000038 	.word	0x20000038

0800ce00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ce00:	f3ef 8009 	mrs	r0, PSP
 800ce04:	f3bf 8f6f 	isb	sy
 800ce08:	4b15      	ldr	r3, [pc, #84]	@ (800ce60 <pxCurrentTCBConst>)
 800ce0a:	681a      	ldr	r2, [r3, #0]
 800ce0c:	f01e 0f10 	tst.w	lr, #16
 800ce10:	bf08      	it	eq
 800ce12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ce16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce1a:	6010      	str	r0, [r2, #0]
 800ce1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ce20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ce24:	f380 8811 	msr	BASEPRI, r0
 800ce28:	f3bf 8f4f 	dsb	sy
 800ce2c:	f3bf 8f6f 	isb	sy
 800ce30:	f7fe fec0 	bl	800bbb4 <vTaskSwitchContext>
 800ce34:	f04f 0000 	mov.w	r0, #0
 800ce38:	f380 8811 	msr	BASEPRI, r0
 800ce3c:	bc09      	pop	{r0, r3}
 800ce3e:	6819      	ldr	r1, [r3, #0]
 800ce40:	6808      	ldr	r0, [r1, #0]
 800ce42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce46:	f01e 0f10 	tst.w	lr, #16
 800ce4a:	bf08      	it	eq
 800ce4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ce50:	f380 8809 	msr	PSP, r0
 800ce54:	f3bf 8f6f 	isb	sy
 800ce58:	4770      	bx	lr
 800ce5a:	bf00      	nop
 800ce5c:	f3af 8000 	nop.w

0800ce60 <pxCurrentTCBConst>:
 800ce60:	20001588 	.word	0x20001588
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ce64:	bf00      	nop
 800ce66:	bf00      	nop

0800ce68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b082      	sub	sp, #8
 800ce6c:	af00      	add	r7, sp, #0
	__asm volatile
 800ce6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce72:	f383 8811 	msr	BASEPRI, r3
 800ce76:	f3bf 8f6f 	isb	sy
 800ce7a:	f3bf 8f4f 	dsb	sy
 800ce7e:	607b      	str	r3, [r7, #4]
}
 800ce80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce82:	f7fe fddd 	bl	800ba40 <xTaskIncrementTick>
 800ce86:	4603      	mov	r3, r0
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d003      	beq.n	800ce94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce8c:	4b06      	ldr	r3, [pc, #24]	@ (800cea8 <xPortSysTickHandler+0x40>)
 800ce8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ce92:	601a      	str	r2, [r3, #0]
 800ce94:	2300      	movs	r3, #0
 800ce96:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f383 8811 	msr	BASEPRI, r3
}
 800ce9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800cea0:	bf00      	nop
 800cea2:	3708      	adds	r7, #8
 800cea4:	46bd      	mov	sp, r7
 800cea6:	bd80      	pop	{r7, pc}
 800cea8:	e000ed04 	.word	0xe000ed04

0800ceac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ceac:	b480      	push	{r7}
 800ceae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ceb0:	4b0b      	ldr	r3, [pc, #44]	@ (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ceb2:	2200      	movs	r2, #0
 800ceb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ceb6:	4b0b      	ldr	r3, [pc, #44]	@ (800cee4 <vPortSetupTimerInterrupt+0x38>)
 800ceb8:	2200      	movs	r2, #0
 800ceba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800cebc:	4b0a      	ldr	r3, [pc, #40]	@ (800cee8 <vPortSetupTimerInterrupt+0x3c>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a0a      	ldr	r2, [pc, #40]	@ (800ceec <vPortSetupTimerInterrupt+0x40>)
 800cec2:	fba2 2303 	umull	r2, r3, r2, r3
 800cec6:	099b      	lsrs	r3, r3, #6
 800cec8:	4a09      	ldr	r2, [pc, #36]	@ (800cef0 <vPortSetupTimerInterrupt+0x44>)
 800ceca:	3b01      	subs	r3, #1
 800cecc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800cece:	4b04      	ldr	r3, [pc, #16]	@ (800cee0 <vPortSetupTimerInterrupt+0x34>)
 800ced0:	2207      	movs	r2, #7
 800ced2:	601a      	str	r2, [r3, #0]
}
 800ced4:	bf00      	nop
 800ced6:	46bd      	mov	sp, r7
 800ced8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cedc:	4770      	bx	lr
 800cede:	bf00      	nop
 800cee0:	e000e010 	.word	0xe000e010
 800cee4:	e000e018 	.word	0xe000e018
 800cee8:	2000002c 	.word	0x2000002c
 800ceec:	10624dd3 	.word	0x10624dd3
 800cef0:	e000e014 	.word	0xe000e014

0800cef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800cf04 <vPortEnableVFP+0x10>
 800cef8:	6801      	ldr	r1, [r0, #0]
 800cefa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cefe:	6001      	str	r1, [r0, #0]
 800cf00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800cf02:	bf00      	nop
 800cf04:	e000ed88 	.word	0xe000ed88

0800cf08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800cf08:	b480      	push	{r7}
 800cf0a:	b085      	sub	sp, #20
 800cf0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800cf0e:	f3ef 8305 	mrs	r3, IPSR
 800cf12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2b0f      	cmp	r3, #15
 800cf18:	d915      	bls.n	800cf46 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800cf1a:	4a18      	ldr	r2, [pc, #96]	@ (800cf7c <vPortValidateInterruptPriority+0x74>)
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	4413      	add	r3, r2
 800cf20:	781b      	ldrb	r3, [r3, #0]
 800cf22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cf24:	4b16      	ldr	r3, [pc, #88]	@ (800cf80 <vPortValidateInterruptPriority+0x78>)
 800cf26:	781b      	ldrb	r3, [r3, #0]
 800cf28:	7afa      	ldrb	r2, [r7, #11]
 800cf2a:	429a      	cmp	r2, r3
 800cf2c:	d20b      	bcs.n	800cf46 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800cf2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf32:	f383 8811 	msr	BASEPRI, r3
 800cf36:	f3bf 8f6f 	isb	sy
 800cf3a:	f3bf 8f4f 	dsb	sy
 800cf3e:	607b      	str	r3, [r7, #4]
}
 800cf40:	bf00      	nop
 800cf42:	bf00      	nop
 800cf44:	e7fd      	b.n	800cf42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cf46:	4b0f      	ldr	r3, [pc, #60]	@ (800cf84 <vPortValidateInterruptPriority+0x7c>)
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800cf4e:	4b0e      	ldr	r3, [pc, #56]	@ (800cf88 <vPortValidateInterruptPriority+0x80>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	429a      	cmp	r2, r3
 800cf54:	d90b      	bls.n	800cf6e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800cf56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf5a:	f383 8811 	msr	BASEPRI, r3
 800cf5e:	f3bf 8f6f 	isb	sy
 800cf62:	f3bf 8f4f 	dsb	sy
 800cf66:	603b      	str	r3, [r7, #0]
}
 800cf68:	bf00      	nop
 800cf6a:	bf00      	nop
 800cf6c:	e7fd      	b.n	800cf6a <vPortValidateInterruptPriority+0x62>
	}
 800cf6e:	bf00      	nop
 800cf70:	3714      	adds	r7, #20
 800cf72:	46bd      	mov	sp, r7
 800cf74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf78:	4770      	bx	lr
 800cf7a:	bf00      	nop
 800cf7c:	e000e3f0 	.word	0xe000e3f0
 800cf80:	20001bb4 	.word	0x20001bb4
 800cf84:	e000ed0c 	.word	0xe000ed0c
 800cf88:	20001bb8 	.word	0x20001bb8

0800cf8c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b08a      	sub	sp, #40	@ 0x28
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf94:	2300      	movs	r3, #0
 800cf96:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf98:	f7fe fb9c 	bl	800b6d4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf9c:	4b5c      	ldr	r3, [pc, #368]	@ (800d110 <pvPortMalloc+0x184>)
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d101      	bne.n	800cfa8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cfa4:	f000 f924 	bl	800d1f0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cfa8:	4b5a      	ldr	r3, [pc, #360]	@ (800d114 <pvPortMalloc+0x188>)
 800cfaa:	681a      	ldr	r2, [r3, #0]
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	4013      	ands	r3, r2
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	f040 8095 	bne.w	800d0e0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d01e      	beq.n	800cffa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800cfbc:	2208      	movs	r2, #8
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	4413      	add	r3, r2
 800cfc2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f003 0307 	and.w	r3, r3, #7
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d015      	beq.n	800cffa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	f023 0307 	bic.w	r3, r3, #7
 800cfd4:	3308      	adds	r3, #8
 800cfd6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	f003 0307 	and.w	r3, r3, #7
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00b      	beq.n	800cffa <pvPortMalloc+0x6e>
	__asm volatile
 800cfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe6:	f383 8811 	msr	BASEPRI, r3
 800cfea:	f3bf 8f6f 	isb	sy
 800cfee:	f3bf 8f4f 	dsb	sy
 800cff2:	617b      	str	r3, [r7, #20]
}
 800cff4:	bf00      	nop
 800cff6:	bf00      	nop
 800cff8:	e7fd      	b.n	800cff6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cffa:	687b      	ldr	r3, [r7, #4]
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d06f      	beq.n	800d0e0 <pvPortMalloc+0x154>
 800d000:	4b45      	ldr	r3, [pc, #276]	@ (800d118 <pvPortMalloc+0x18c>)
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	687a      	ldr	r2, [r7, #4]
 800d006:	429a      	cmp	r2, r3
 800d008:	d86a      	bhi.n	800d0e0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d00a:	4b44      	ldr	r3, [pc, #272]	@ (800d11c <pvPortMalloc+0x190>)
 800d00c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d00e:	4b43      	ldr	r3, [pc, #268]	@ (800d11c <pvPortMalloc+0x190>)
 800d010:	681b      	ldr	r3, [r3, #0]
 800d012:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d014:	e004      	b.n	800d020 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800d016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d018:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d022:	685b      	ldr	r3, [r3, #4]
 800d024:	687a      	ldr	r2, [r7, #4]
 800d026:	429a      	cmp	r2, r3
 800d028:	d903      	bls.n	800d032 <pvPortMalloc+0xa6>
 800d02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d1f1      	bne.n	800d016 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d032:	4b37      	ldr	r3, [pc, #220]	@ (800d110 <pvPortMalloc+0x184>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d038:	429a      	cmp	r2, r3
 800d03a:	d051      	beq.n	800d0e0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d03c:	6a3b      	ldr	r3, [r7, #32]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2208      	movs	r2, #8
 800d042:	4413      	add	r3, r2
 800d044:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d046:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d048:	681a      	ldr	r2, [r3, #0]
 800d04a:	6a3b      	ldr	r3, [r7, #32]
 800d04c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d04e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d050:	685a      	ldr	r2, [r3, #4]
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	1ad2      	subs	r2, r2, r3
 800d056:	2308      	movs	r3, #8
 800d058:	005b      	lsls	r3, r3, #1
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d920      	bls.n	800d0a0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d05e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	4413      	add	r3, r2
 800d064:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d066:	69bb      	ldr	r3, [r7, #24]
 800d068:	f003 0307 	and.w	r3, r3, #7
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d00b      	beq.n	800d088 <pvPortMalloc+0xfc>
	__asm volatile
 800d070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d074:	f383 8811 	msr	BASEPRI, r3
 800d078:	f3bf 8f6f 	isb	sy
 800d07c:	f3bf 8f4f 	dsb	sy
 800d080:	613b      	str	r3, [r7, #16]
}
 800d082:	bf00      	nop
 800d084:	bf00      	nop
 800d086:	e7fd      	b.n	800d084 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d08a:	685a      	ldr	r2, [r3, #4]
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	69bb      	ldr	r3, [r7, #24]
 800d092:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d094:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d096:	687a      	ldr	r2, [r7, #4]
 800d098:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d09a:	69b8      	ldr	r0, [r7, #24]
 800d09c:	f000 f90a 	bl	800d2b4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d0a0:	4b1d      	ldr	r3, [pc, #116]	@ (800d118 <pvPortMalloc+0x18c>)
 800d0a2:	681a      	ldr	r2, [r3, #0]
 800d0a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0a6:	685b      	ldr	r3, [r3, #4]
 800d0a8:	1ad3      	subs	r3, r2, r3
 800d0aa:	4a1b      	ldr	r2, [pc, #108]	@ (800d118 <pvPortMalloc+0x18c>)
 800d0ac:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d0ae:	4b1a      	ldr	r3, [pc, #104]	@ (800d118 <pvPortMalloc+0x18c>)
 800d0b0:	681a      	ldr	r2, [r3, #0]
 800d0b2:	4b1b      	ldr	r3, [pc, #108]	@ (800d120 <pvPortMalloc+0x194>)
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	429a      	cmp	r2, r3
 800d0b8:	d203      	bcs.n	800d0c2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d0ba:	4b17      	ldr	r3, [pc, #92]	@ (800d118 <pvPortMalloc+0x18c>)
 800d0bc:	681b      	ldr	r3, [r3, #0]
 800d0be:	4a18      	ldr	r2, [pc, #96]	@ (800d120 <pvPortMalloc+0x194>)
 800d0c0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d0c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0c4:	685a      	ldr	r2, [r3, #4]
 800d0c6:	4b13      	ldr	r3, [pc, #76]	@ (800d114 <pvPortMalloc+0x188>)
 800d0c8:	681b      	ldr	r3, [r3, #0]
 800d0ca:	431a      	orrs	r2, r3
 800d0cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0ce:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d0d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d0d6:	4b13      	ldr	r3, [pc, #76]	@ (800d124 <pvPortMalloc+0x198>)
 800d0d8:	681b      	ldr	r3, [r3, #0]
 800d0da:	3301      	adds	r3, #1
 800d0dc:	4a11      	ldr	r2, [pc, #68]	@ (800d124 <pvPortMalloc+0x198>)
 800d0de:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d0e0:	f7fe fb06 	bl	800b6f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d0e4:	69fb      	ldr	r3, [r7, #28]
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	d00b      	beq.n	800d106 <pvPortMalloc+0x17a>
	__asm volatile
 800d0ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0f2:	f383 8811 	msr	BASEPRI, r3
 800d0f6:	f3bf 8f6f 	isb	sy
 800d0fa:	f3bf 8f4f 	dsb	sy
 800d0fe:	60fb      	str	r3, [r7, #12]
}
 800d100:	bf00      	nop
 800d102:	bf00      	nop
 800d104:	e7fd      	b.n	800d102 <pvPortMalloc+0x176>
	return pvReturn;
 800d106:	69fb      	ldr	r3, [r7, #28]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3728      	adds	r7, #40	@ 0x28
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}
 800d110:	200057c4 	.word	0x200057c4
 800d114:	200057d8 	.word	0x200057d8
 800d118:	200057c8 	.word	0x200057c8
 800d11c:	200057bc 	.word	0x200057bc
 800d120:	200057cc 	.word	0x200057cc
 800d124:	200057d0 	.word	0x200057d0

0800d128 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b086      	sub	sp, #24
 800d12c:	af00      	add	r7, sp, #0
 800d12e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d04f      	beq.n	800d1da <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d13a:	2308      	movs	r3, #8
 800d13c:	425b      	negs	r3, r3
 800d13e:	697a      	ldr	r2, [r7, #20]
 800d140:	4413      	add	r3, r2
 800d142:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d148:	693b      	ldr	r3, [r7, #16]
 800d14a:	685a      	ldr	r2, [r3, #4]
 800d14c:	4b25      	ldr	r3, [pc, #148]	@ (800d1e4 <vPortFree+0xbc>)
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	4013      	ands	r3, r2
 800d152:	2b00      	cmp	r3, #0
 800d154:	d10b      	bne.n	800d16e <vPortFree+0x46>
	__asm volatile
 800d156:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d15a:	f383 8811 	msr	BASEPRI, r3
 800d15e:	f3bf 8f6f 	isb	sy
 800d162:	f3bf 8f4f 	dsb	sy
 800d166:	60fb      	str	r3, [r7, #12]
}
 800d168:	bf00      	nop
 800d16a:	bf00      	nop
 800d16c:	e7fd      	b.n	800d16a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d00b      	beq.n	800d18e <vPortFree+0x66>
	__asm volatile
 800d176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d17a:	f383 8811 	msr	BASEPRI, r3
 800d17e:	f3bf 8f6f 	isb	sy
 800d182:	f3bf 8f4f 	dsb	sy
 800d186:	60bb      	str	r3, [r7, #8]
}
 800d188:	bf00      	nop
 800d18a:	bf00      	nop
 800d18c:	e7fd      	b.n	800d18a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d18e:	693b      	ldr	r3, [r7, #16]
 800d190:	685a      	ldr	r2, [r3, #4]
 800d192:	4b14      	ldr	r3, [pc, #80]	@ (800d1e4 <vPortFree+0xbc>)
 800d194:	681b      	ldr	r3, [r3, #0]
 800d196:	4013      	ands	r3, r2
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d01e      	beq.n	800d1da <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d19c:	693b      	ldr	r3, [r7, #16]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d11a      	bne.n	800d1da <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	685a      	ldr	r2, [r3, #4]
 800d1a8:	4b0e      	ldr	r3, [pc, #56]	@ (800d1e4 <vPortFree+0xbc>)
 800d1aa:	681b      	ldr	r3, [r3, #0]
 800d1ac:	43db      	mvns	r3, r3
 800d1ae:	401a      	ands	r2, r3
 800d1b0:	693b      	ldr	r3, [r7, #16]
 800d1b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d1b4:	f7fe fa8e 	bl	800b6d4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d1b8:	693b      	ldr	r3, [r7, #16]
 800d1ba:	685a      	ldr	r2, [r3, #4]
 800d1bc:	4b0a      	ldr	r3, [pc, #40]	@ (800d1e8 <vPortFree+0xc0>)
 800d1be:	681b      	ldr	r3, [r3, #0]
 800d1c0:	4413      	add	r3, r2
 800d1c2:	4a09      	ldr	r2, [pc, #36]	@ (800d1e8 <vPortFree+0xc0>)
 800d1c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d1c6:	6938      	ldr	r0, [r7, #16]
 800d1c8:	f000 f874 	bl	800d2b4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d1cc:	4b07      	ldr	r3, [pc, #28]	@ (800d1ec <vPortFree+0xc4>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	3301      	adds	r3, #1
 800d1d2:	4a06      	ldr	r2, [pc, #24]	@ (800d1ec <vPortFree+0xc4>)
 800d1d4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d1d6:	f7fe fa8b 	bl	800b6f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d1da:	bf00      	nop
 800d1dc:	3718      	adds	r7, #24
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	bd80      	pop	{r7, pc}
 800d1e2:	bf00      	nop
 800d1e4:	200057d8 	.word	0x200057d8
 800d1e8:	200057c8 	.word	0x200057c8
 800d1ec:	200057d4 	.word	0x200057d4

0800d1f0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d1f0:	b480      	push	{r7}
 800d1f2:	b085      	sub	sp, #20
 800d1f4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d1f6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800d1fa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d1fc:	4b27      	ldr	r3, [pc, #156]	@ (800d29c <prvHeapInit+0xac>)
 800d1fe:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f003 0307 	and.w	r3, r3, #7
 800d206:	2b00      	cmp	r3, #0
 800d208:	d00c      	beq.n	800d224 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d20a:	68fb      	ldr	r3, [r7, #12]
 800d20c:	3307      	adds	r3, #7
 800d20e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	f023 0307 	bic.w	r3, r3, #7
 800d216:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d218:	68ba      	ldr	r2, [r7, #8]
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	1ad3      	subs	r3, r2, r3
 800d21e:	4a1f      	ldr	r2, [pc, #124]	@ (800d29c <prvHeapInit+0xac>)
 800d220:	4413      	add	r3, r2
 800d222:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d224:	68fb      	ldr	r3, [r7, #12]
 800d226:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d228:	4a1d      	ldr	r2, [pc, #116]	@ (800d2a0 <prvHeapInit+0xb0>)
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d22e:	4b1c      	ldr	r3, [pc, #112]	@ (800d2a0 <prvHeapInit+0xb0>)
 800d230:	2200      	movs	r2, #0
 800d232:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	68ba      	ldr	r2, [r7, #8]
 800d238:	4413      	add	r3, r2
 800d23a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d23c:	2208      	movs	r2, #8
 800d23e:	68fb      	ldr	r3, [r7, #12]
 800d240:	1a9b      	subs	r3, r3, r2
 800d242:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	f023 0307 	bic.w	r3, r3, #7
 800d24a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	4a15      	ldr	r2, [pc, #84]	@ (800d2a4 <prvHeapInit+0xb4>)
 800d250:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d252:	4b14      	ldr	r3, [pc, #80]	@ (800d2a4 <prvHeapInit+0xb4>)
 800d254:	681b      	ldr	r3, [r3, #0]
 800d256:	2200      	movs	r2, #0
 800d258:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d25a:	4b12      	ldr	r3, [pc, #72]	@ (800d2a4 <prvHeapInit+0xb4>)
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	2200      	movs	r2, #0
 800d260:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d266:	683b      	ldr	r3, [r7, #0]
 800d268:	68fa      	ldr	r2, [r7, #12]
 800d26a:	1ad2      	subs	r2, r2, r3
 800d26c:	683b      	ldr	r3, [r7, #0]
 800d26e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d270:	4b0c      	ldr	r3, [pc, #48]	@ (800d2a4 <prvHeapInit+0xb4>)
 800d272:	681a      	ldr	r2, [r3, #0]
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d278:	683b      	ldr	r3, [r7, #0]
 800d27a:	685b      	ldr	r3, [r3, #4]
 800d27c:	4a0a      	ldr	r2, [pc, #40]	@ (800d2a8 <prvHeapInit+0xb8>)
 800d27e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685b      	ldr	r3, [r3, #4]
 800d284:	4a09      	ldr	r2, [pc, #36]	@ (800d2ac <prvHeapInit+0xbc>)
 800d286:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d288:	4b09      	ldr	r3, [pc, #36]	@ (800d2b0 <prvHeapInit+0xc0>)
 800d28a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800d28e:	601a      	str	r2, [r3, #0]
}
 800d290:	bf00      	nop
 800d292:	3714      	adds	r7, #20
 800d294:	46bd      	mov	sp, r7
 800d296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29a:	4770      	bx	lr
 800d29c:	20001bbc 	.word	0x20001bbc
 800d2a0:	200057bc 	.word	0x200057bc
 800d2a4:	200057c4 	.word	0x200057c4
 800d2a8:	200057cc 	.word	0x200057cc
 800d2ac:	200057c8 	.word	0x200057c8
 800d2b0:	200057d8 	.word	0x200057d8

0800d2b4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d2b4:	b480      	push	{r7}
 800d2b6:	b085      	sub	sp, #20
 800d2b8:	af00      	add	r7, sp, #0
 800d2ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d2bc:	4b28      	ldr	r3, [pc, #160]	@ (800d360 <prvInsertBlockIntoFreeList+0xac>)
 800d2be:	60fb      	str	r3, [r7, #12]
 800d2c0:	e002      	b.n	800d2c8 <prvInsertBlockIntoFreeList+0x14>
 800d2c2:	68fb      	ldr	r3, [r7, #12]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	60fb      	str	r3, [r7, #12]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	681b      	ldr	r3, [r3, #0]
 800d2cc:	687a      	ldr	r2, [r7, #4]
 800d2ce:	429a      	cmp	r2, r3
 800d2d0:	d8f7      	bhi.n	800d2c2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d2d2:	68fb      	ldr	r3, [r7, #12]
 800d2d4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	68ba      	ldr	r2, [r7, #8]
 800d2dc:	4413      	add	r3, r2
 800d2de:	687a      	ldr	r2, [r7, #4]
 800d2e0:	429a      	cmp	r2, r3
 800d2e2:	d108      	bne.n	800d2f6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	685a      	ldr	r2, [r3, #4]
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	685b      	ldr	r3, [r3, #4]
 800d2ec:	441a      	add	r2, r3
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	685b      	ldr	r3, [r3, #4]
 800d2fe:	68ba      	ldr	r2, [r7, #8]
 800d300:	441a      	add	r2, r3
 800d302:	68fb      	ldr	r3, [r7, #12]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	429a      	cmp	r2, r3
 800d308:	d118      	bne.n	800d33c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d30a:	68fb      	ldr	r3, [r7, #12]
 800d30c:	681a      	ldr	r2, [r3, #0]
 800d30e:	4b15      	ldr	r3, [pc, #84]	@ (800d364 <prvInsertBlockIntoFreeList+0xb0>)
 800d310:	681b      	ldr	r3, [r3, #0]
 800d312:	429a      	cmp	r2, r3
 800d314:	d00d      	beq.n	800d332 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	685a      	ldr	r2, [r3, #4]
 800d31a:	68fb      	ldr	r3, [r7, #12]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	441a      	add	r2, r3
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	681a      	ldr	r2, [r3, #0]
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	601a      	str	r2, [r3, #0]
 800d330:	e008      	b.n	800d344 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d332:	4b0c      	ldr	r3, [pc, #48]	@ (800d364 <prvInsertBlockIntoFreeList+0xb0>)
 800d334:	681a      	ldr	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	601a      	str	r2, [r3, #0]
 800d33a:	e003      	b.n	800d344 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681a      	ldr	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d344:	68fa      	ldr	r2, [r7, #12]
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d002      	beq.n	800d352 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	687a      	ldr	r2, [r7, #4]
 800d350:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d352:	bf00      	nop
 800d354:	3714      	adds	r7, #20
 800d356:	46bd      	mov	sp, r7
 800d358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d35c:	4770      	bx	lr
 800d35e:	bf00      	nop
 800d360:	200057bc 	.word	0x200057bc
 800d364:	200057c4 	.word	0x200057c4

0800d368 <_vsiprintf_r>:
 800d368:	b510      	push	{r4, lr}
 800d36a:	b09a      	sub	sp, #104	@ 0x68
 800d36c:	2400      	movs	r4, #0
 800d36e:	9100      	str	r1, [sp, #0]
 800d370:	9104      	str	r1, [sp, #16]
 800d372:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d376:	9105      	str	r1, [sp, #20]
 800d378:	9102      	str	r1, [sp, #8]
 800d37a:	4905      	ldr	r1, [pc, #20]	@ (800d390 <_vsiprintf_r+0x28>)
 800d37c:	9103      	str	r1, [sp, #12]
 800d37e:	4669      	mov	r1, sp
 800d380:	9419      	str	r4, [sp, #100]	@ 0x64
 800d382:	f000 f957 	bl	800d634 <_svfiprintf_r>
 800d386:	9b00      	ldr	r3, [sp, #0]
 800d388:	701c      	strb	r4, [r3, #0]
 800d38a:	b01a      	add	sp, #104	@ 0x68
 800d38c:	bd10      	pop	{r4, pc}
 800d38e:	bf00      	nop
 800d390:	ffff0208 	.word	0xffff0208

0800d394 <vsiprintf>:
 800d394:	4613      	mov	r3, r2
 800d396:	460a      	mov	r2, r1
 800d398:	4601      	mov	r1, r0
 800d39a:	4802      	ldr	r0, [pc, #8]	@ (800d3a4 <vsiprintf+0x10>)
 800d39c:	6800      	ldr	r0, [r0, #0]
 800d39e:	f7ff bfe3 	b.w	800d368 <_vsiprintf_r>
 800d3a2:	bf00      	nop
 800d3a4:	2000003c 	.word	0x2000003c

0800d3a8 <memset>:
 800d3a8:	4402      	add	r2, r0
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	4293      	cmp	r3, r2
 800d3ae:	d100      	bne.n	800d3b2 <memset+0xa>
 800d3b0:	4770      	bx	lr
 800d3b2:	f803 1b01 	strb.w	r1, [r3], #1
 800d3b6:	e7f9      	b.n	800d3ac <memset+0x4>

0800d3b8 <__errno>:
 800d3b8:	4b01      	ldr	r3, [pc, #4]	@ (800d3c0 <__errno+0x8>)
 800d3ba:	6818      	ldr	r0, [r3, #0]
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	2000003c 	.word	0x2000003c

0800d3c4 <__libc_init_array>:
 800d3c4:	b570      	push	{r4, r5, r6, lr}
 800d3c6:	4d0d      	ldr	r5, [pc, #52]	@ (800d3fc <__libc_init_array+0x38>)
 800d3c8:	4c0d      	ldr	r4, [pc, #52]	@ (800d400 <__libc_init_array+0x3c>)
 800d3ca:	1b64      	subs	r4, r4, r5
 800d3cc:	10a4      	asrs	r4, r4, #2
 800d3ce:	2600      	movs	r6, #0
 800d3d0:	42a6      	cmp	r6, r4
 800d3d2:	d109      	bne.n	800d3e8 <__libc_init_array+0x24>
 800d3d4:	4d0b      	ldr	r5, [pc, #44]	@ (800d404 <__libc_init_array+0x40>)
 800d3d6:	4c0c      	ldr	r4, [pc, #48]	@ (800d408 <__libc_init_array+0x44>)
 800d3d8:	f000 fcc2 	bl	800dd60 <_init>
 800d3dc:	1b64      	subs	r4, r4, r5
 800d3de:	10a4      	asrs	r4, r4, #2
 800d3e0:	2600      	movs	r6, #0
 800d3e2:	42a6      	cmp	r6, r4
 800d3e4:	d105      	bne.n	800d3f2 <__libc_init_array+0x2e>
 800d3e6:	bd70      	pop	{r4, r5, r6, pc}
 800d3e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3ec:	4798      	blx	r3
 800d3ee:	3601      	adds	r6, #1
 800d3f0:	e7ee      	b.n	800d3d0 <__libc_init_array+0xc>
 800d3f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d3f6:	4798      	blx	r3
 800d3f8:	3601      	adds	r6, #1
 800d3fa:	e7f2      	b.n	800d3e2 <__libc_init_array+0x1e>
 800d3fc:	0800e0a8 	.word	0x0800e0a8
 800d400:	0800e0a8 	.word	0x0800e0a8
 800d404:	0800e0a8 	.word	0x0800e0a8
 800d408:	0800e0ac 	.word	0x0800e0ac

0800d40c <__retarget_lock_acquire_recursive>:
 800d40c:	4770      	bx	lr

0800d40e <__retarget_lock_release_recursive>:
 800d40e:	4770      	bx	lr

0800d410 <_reclaim_reent>:
 800d410:	4b2d      	ldr	r3, [pc, #180]	@ (800d4c8 <_reclaim_reent+0xb8>)
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	4283      	cmp	r3, r0
 800d416:	b570      	push	{r4, r5, r6, lr}
 800d418:	4604      	mov	r4, r0
 800d41a:	d053      	beq.n	800d4c4 <_reclaim_reent+0xb4>
 800d41c:	69c3      	ldr	r3, [r0, #28]
 800d41e:	b31b      	cbz	r3, 800d468 <_reclaim_reent+0x58>
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	b163      	cbz	r3, 800d43e <_reclaim_reent+0x2e>
 800d424:	2500      	movs	r5, #0
 800d426:	69e3      	ldr	r3, [r4, #28]
 800d428:	68db      	ldr	r3, [r3, #12]
 800d42a:	5959      	ldr	r1, [r3, r5]
 800d42c:	b9b1      	cbnz	r1, 800d45c <_reclaim_reent+0x4c>
 800d42e:	3504      	adds	r5, #4
 800d430:	2d80      	cmp	r5, #128	@ 0x80
 800d432:	d1f8      	bne.n	800d426 <_reclaim_reent+0x16>
 800d434:	69e3      	ldr	r3, [r4, #28]
 800d436:	4620      	mov	r0, r4
 800d438:	68d9      	ldr	r1, [r3, #12]
 800d43a:	f000 f855 	bl	800d4e8 <_free_r>
 800d43e:	69e3      	ldr	r3, [r4, #28]
 800d440:	6819      	ldr	r1, [r3, #0]
 800d442:	b111      	cbz	r1, 800d44a <_reclaim_reent+0x3a>
 800d444:	4620      	mov	r0, r4
 800d446:	f000 f84f 	bl	800d4e8 <_free_r>
 800d44a:	69e3      	ldr	r3, [r4, #28]
 800d44c:	689d      	ldr	r5, [r3, #8]
 800d44e:	b15d      	cbz	r5, 800d468 <_reclaim_reent+0x58>
 800d450:	4629      	mov	r1, r5
 800d452:	4620      	mov	r0, r4
 800d454:	682d      	ldr	r5, [r5, #0]
 800d456:	f000 f847 	bl	800d4e8 <_free_r>
 800d45a:	e7f8      	b.n	800d44e <_reclaim_reent+0x3e>
 800d45c:	680e      	ldr	r6, [r1, #0]
 800d45e:	4620      	mov	r0, r4
 800d460:	f000 f842 	bl	800d4e8 <_free_r>
 800d464:	4631      	mov	r1, r6
 800d466:	e7e1      	b.n	800d42c <_reclaim_reent+0x1c>
 800d468:	6961      	ldr	r1, [r4, #20]
 800d46a:	b111      	cbz	r1, 800d472 <_reclaim_reent+0x62>
 800d46c:	4620      	mov	r0, r4
 800d46e:	f000 f83b 	bl	800d4e8 <_free_r>
 800d472:	69e1      	ldr	r1, [r4, #28]
 800d474:	b111      	cbz	r1, 800d47c <_reclaim_reent+0x6c>
 800d476:	4620      	mov	r0, r4
 800d478:	f000 f836 	bl	800d4e8 <_free_r>
 800d47c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d47e:	b111      	cbz	r1, 800d486 <_reclaim_reent+0x76>
 800d480:	4620      	mov	r0, r4
 800d482:	f000 f831 	bl	800d4e8 <_free_r>
 800d486:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d488:	b111      	cbz	r1, 800d490 <_reclaim_reent+0x80>
 800d48a:	4620      	mov	r0, r4
 800d48c:	f000 f82c 	bl	800d4e8 <_free_r>
 800d490:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d492:	b111      	cbz	r1, 800d49a <_reclaim_reent+0x8a>
 800d494:	4620      	mov	r0, r4
 800d496:	f000 f827 	bl	800d4e8 <_free_r>
 800d49a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d49c:	b111      	cbz	r1, 800d4a4 <_reclaim_reent+0x94>
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 f822 	bl	800d4e8 <_free_r>
 800d4a4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d4a6:	b111      	cbz	r1, 800d4ae <_reclaim_reent+0x9e>
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 f81d 	bl	800d4e8 <_free_r>
 800d4ae:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800d4b0:	b111      	cbz	r1, 800d4b8 <_reclaim_reent+0xa8>
 800d4b2:	4620      	mov	r0, r4
 800d4b4:	f000 f818 	bl	800d4e8 <_free_r>
 800d4b8:	6a23      	ldr	r3, [r4, #32]
 800d4ba:	b11b      	cbz	r3, 800d4c4 <_reclaim_reent+0xb4>
 800d4bc:	4620      	mov	r0, r4
 800d4be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d4c2:	4718      	bx	r3
 800d4c4:	bd70      	pop	{r4, r5, r6, pc}
 800d4c6:	bf00      	nop
 800d4c8:	2000003c 	.word	0x2000003c

0800d4cc <memcpy>:
 800d4cc:	440a      	add	r2, r1
 800d4ce:	4291      	cmp	r1, r2
 800d4d0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d4d4:	d100      	bne.n	800d4d8 <memcpy+0xc>
 800d4d6:	4770      	bx	lr
 800d4d8:	b510      	push	{r4, lr}
 800d4da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4e2:	4291      	cmp	r1, r2
 800d4e4:	d1f9      	bne.n	800d4da <memcpy+0xe>
 800d4e6:	bd10      	pop	{r4, pc}

0800d4e8 <_free_r>:
 800d4e8:	b538      	push	{r3, r4, r5, lr}
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	2900      	cmp	r1, #0
 800d4ee:	d041      	beq.n	800d574 <_free_r+0x8c>
 800d4f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d4f4:	1f0c      	subs	r4, r1, #4
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	bfb8      	it	lt
 800d4fa:	18e4      	addlt	r4, r4, r3
 800d4fc:	f000 fbc4 	bl	800dc88 <__malloc_lock>
 800d500:	4a1d      	ldr	r2, [pc, #116]	@ (800d578 <_free_r+0x90>)
 800d502:	6813      	ldr	r3, [r2, #0]
 800d504:	b933      	cbnz	r3, 800d514 <_free_r+0x2c>
 800d506:	6063      	str	r3, [r4, #4]
 800d508:	6014      	str	r4, [r2, #0]
 800d50a:	4628      	mov	r0, r5
 800d50c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d510:	f000 bbc0 	b.w	800dc94 <__malloc_unlock>
 800d514:	42a3      	cmp	r3, r4
 800d516:	d908      	bls.n	800d52a <_free_r+0x42>
 800d518:	6820      	ldr	r0, [r4, #0]
 800d51a:	1821      	adds	r1, r4, r0
 800d51c:	428b      	cmp	r3, r1
 800d51e:	bf01      	itttt	eq
 800d520:	6819      	ldreq	r1, [r3, #0]
 800d522:	685b      	ldreq	r3, [r3, #4]
 800d524:	1809      	addeq	r1, r1, r0
 800d526:	6021      	streq	r1, [r4, #0]
 800d528:	e7ed      	b.n	800d506 <_free_r+0x1e>
 800d52a:	461a      	mov	r2, r3
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	b10b      	cbz	r3, 800d534 <_free_r+0x4c>
 800d530:	42a3      	cmp	r3, r4
 800d532:	d9fa      	bls.n	800d52a <_free_r+0x42>
 800d534:	6811      	ldr	r1, [r2, #0]
 800d536:	1850      	adds	r0, r2, r1
 800d538:	42a0      	cmp	r0, r4
 800d53a:	d10b      	bne.n	800d554 <_free_r+0x6c>
 800d53c:	6820      	ldr	r0, [r4, #0]
 800d53e:	4401      	add	r1, r0
 800d540:	1850      	adds	r0, r2, r1
 800d542:	4283      	cmp	r3, r0
 800d544:	6011      	str	r1, [r2, #0]
 800d546:	d1e0      	bne.n	800d50a <_free_r+0x22>
 800d548:	6818      	ldr	r0, [r3, #0]
 800d54a:	685b      	ldr	r3, [r3, #4]
 800d54c:	6053      	str	r3, [r2, #4]
 800d54e:	4408      	add	r0, r1
 800d550:	6010      	str	r0, [r2, #0]
 800d552:	e7da      	b.n	800d50a <_free_r+0x22>
 800d554:	d902      	bls.n	800d55c <_free_r+0x74>
 800d556:	230c      	movs	r3, #12
 800d558:	602b      	str	r3, [r5, #0]
 800d55a:	e7d6      	b.n	800d50a <_free_r+0x22>
 800d55c:	6820      	ldr	r0, [r4, #0]
 800d55e:	1821      	adds	r1, r4, r0
 800d560:	428b      	cmp	r3, r1
 800d562:	bf04      	itt	eq
 800d564:	6819      	ldreq	r1, [r3, #0]
 800d566:	685b      	ldreq	r3, [r3, #4]
 800d568:	6063      	str	r3, [r4, #4]
 800d56a:	bf04      	itt	eq
 800d56c:	1809      	addeq	r1, r1, r0
 800d56e:	6021      	streq	r1, [r4, #0]
 800d570:	6054      	str	r4, [r2, #4]
 800d572:	e7ca      	b.n	800d50a <_free_r+0x22>
 800d574:	bd38      	pop	{r3, r4, r5, pc}
 800d576:	bf00      	nop
 800d578:	20005920 	.word	0x20005920

0800d57c <__ssputs_r>:
 800d57c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d580:	688e      	ldr	r6, [r1, #8]
 800d582:	461f      	mov	r7, r3
 800d584:	42be      	cmp	r6, r7
 800d586:	680b      	ldr	r3, [r1, #0]
 800d588:	4682      	mov	sl, r0
 800d58a:	460c      	mov	r4, r1
 800d58c:	4690      	mov	r8, r2
 800d58e:	d82d      	bhi.n	800d5ec <__ssputs_r+0x70>
 800d590:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d594:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d598:	d026      	beq.n	800d5e8 <__ssputs_r+0x6c>
 800d59a:	6965      	ldr	r5, [r4, #20]
 800d59c:	6909      	ldr	r1, [r1, #16]
 800d59e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5a2:	eba3 0901 	sub.w	r9, r3, r1
 800d5a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5aa:	1c7b      	adds	r3, r7, #1
 800d5ac:	444b      	add	r3, r9
 800d5ae:	106d      	asrs	r5, r5, #1
 800d5b0:	429d      	cmp	r5, r3
 800d5b2:	bf38      	it	cc
 800d5b4:	461d      	movcc	r5, r3
 800d5b6:	0553      	lsls	r3, r2, #21
 800d5b8:	d527      	bpl.n	800d60a <__ssputs_r+0x8e>
 800d5ba:	4629      	mov	r1, r5
 800d5bc:	f000 f958 	bl	800d870 <_malloc_r>
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	b360      	cbz	r0, 800d61e <__ssputs_r+0xa2>
 800d5c4:	6921      	ldr	r1, [r4, #16]
 800d5c6:	464a      	mov	r2, r9
 800d5c8:	f7ff ff80 	bl	800d4cc <memcpy>
 800d5cc:	89a3      	ldrh	r3, [r4, #12]
 800d5ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d5d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d5d6:	81a3      	strh	r3, [r4, #12]
 800d5d8:	6126      	str	r6, [r4, #16]
 800d5da:	6165      	str	r5, [r4, #20]
 800d5dc:	444e      	add	r6, r9
 800d5de:	eba5 0509 	sub.w	r5, r5, r9
 800d5e2:	6026      	str	r6, [r4, #0]
 800d5e4:	60a5      	str	r5, [r4, #8]
 800d5e6:	463e      	mov	r6, r7
 800d5e8:	42be      	cmp	r6, r7
 800d5ea:	d900      	bls.n	800d5ee <__ssputs_r+0x72>
 800d5ec:	463e      	mov	r6, r7
 800d5ee:	6820      	ldr	r0, [r4, #0]
 800d5f0:	4632      	mov	r2, r6
 800d5f2:	4641      	mov	r1, r8
 800d5f4:	f000 fb82 	bl	800dcfc <memmove>
 800d5f8:	68a3      	ldr	r3, [r4, #8]
 800d5fa:	1b9b      	subs	r3, r3, r6
 800d5fc:	60a3      	str	r3, [r4, #8]
 800d5fe:	6823      	ldr	r3, [r4, #0]
 800d600:	4433      	add	r3, r6
 800d602:	6023      	str	r3, [r4, #0]
 800d604:	2000      	movs	r0, #0
 800d606:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d60a:	462a      	mov	r2, r5
 800d60c:	f000 fb48 	bl	800dca0 <_realloc_r>
 800d610:	4606      	mov	r6, r0
 800d612:	2800      	cmp	r0, #0
 800d614:	d1e0      	bne.n	800d5d8 <__ssputs_r+0x5c>
 800d616:	6921      	ldr	r1, [r4, #16]
 800d618:	4650      	mov	r0, sl
 800d61a:	f7ff ff65 	bl	800d4e8 <_free_r>
 800d61e:	230c      	movs	r3, #12
 800d620:	f8ca 3000 	str.w	r3, [sl]
 800d624:	89a3      	ldrh	r3, [r4, #12]
 800d626:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d62a:	81a3      	strh	r3, [r4, #12]
 800d62c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d630:	e7e9      	b.n	800d606 <__ssputs_r+0x8a>
	...

0800d634 <_svfiprintf_r>:
 800d634:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d638:	4698      	mov	r8, r3
 800d63a:	898b      	ldrh	r3, [r1, #12]
 800d63c:	061b      	lsls	r3, r3, #24
 800d63e:	b09d      	sub	sp, #116	@ 0x74
 800d640:	4607      	mov	r7, r0
 800d642:	460d      	mov	r5, r1
 800d644:	4614      	mov	r4, r2
 800d646:	d510      	bpl.n	800d66a <_svfiprintf_r+0x36>
 800d648:	690b      	ldr	r3, [r1, #16]
 800d64a:	b973      	cbnz	r3, 800d66a <_svfiprintf_r+0x36>
 800d64c:	2140      	movs	r1, #64	@ 0x40
 800d64e:	f000 f90f 	bl	800d870 <_malloc_r>
 800d652:	6028      	str	r0, [r5, #0]
 800d654:	6128      	str	r0, [r5, #16]
 800d656:	b930      	cbnz	r0, 800d666 <_svfiprintf_r+0x32>
 800d658:	230c      	movs	r3, #12
 800d65a:	603b      	str	r3, [r7, #0]
 800d65c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d660:	b01d      	add	sp, #116	@ 0x74
 800d662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d666:	2340      	movs	r3, #64	@ 0x40
 800d668:	616b      	str	r3, [r5, #20]
 800d66a:	2300      	movs	r3, #0
 800d66c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d66e:	2320      	movs	r3, #32
 800d670:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d674:	f8cd 800c 	str.w	r8, [sp, #12]
 800d678:	2330      	movs	r3, #48	@ 0x30
 800d67a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d818 <_svfiprintf_r+0x1e4>
 800d67e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d682:	f04f 0901 	mov.w	r9, #1
 800d686:	4623      	mov	r3, r4
 800d688:	469a      	mov	sl, r3
 800d68a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d68e:	b10a      	cbz	r2, 800d694 <_svfiprintf_r+0x60>
 800d690:	2a25      	cmp	r2, #37	@ 0x25
 800d692:	d1f9      	bne.n	800d688 <_svfiprintf_r+0x54>
 800d694:	ebba 0b04 	subs.w	fp, sl, r4
 800d698:	d00b      	beq.n	800d6b2 <_svfiprintf_r+0x7e>
 800d69a:	465b      	mov	r3, fp
 800d69c:	4622      	mov	r2, r4
 800d69e:	4629      	mov	r1, r5
 800d6a0:	4638      	mov	r0, r7
 800d6a2:	f7ff ff6b 	bl	800d57c <__ssputs_r>
 800d6a6:	3001      	adds	r0, #1
 800d6a8:	f000 80a7 	beq.w	800d7fa <_svfiprintf_r+0x1c6>
 800d6ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d6ae:	445a      	add	r2, fp
 800d6b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d6b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	f000 809f 	beq.w	800d7fa <_svfiprintf_r+0x1c6>
 800d6bc:	2300      	movs	r3, #0
 800d6be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d6c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6c6:	f10a 0a01 	add.w	sl, sl, #1
 800d6ca:	9304      	str	r3, [sp, #16]
 800d6cc:	9307      	str	r3, [sp, #28]
 800d6ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d6d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d6d4:	4654      	mov	r4, sl
 800d6d6:	2205      	movs	r2, #5
 800d6d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6dc:	484e      	ldr	r0, [pc, #312]	@ (800d818 <_svfiprintf_r+0x1e4>)
 800d6de:	f7f2 fd7f 	bl	80001e0 <memchr>
 800d6e2:	9a04      	ldr	r2, [sp, #16]
 800d6e4:	b9d8      	cbnz	r0, 800d71e <_svfiprintf_r+0xea>
 800d6e6:	06d0      	lsls	r0, r2, #27
 800d6e8:	bf44      	itt	mi
 800d6ea:	2320      	movmi	r3, #32
 800d6ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6f0:	0711      	lsls	r1, r2, #28
 800d6f2:	bf44      	itt	mi
 800d6f4:	232b      	movmi	r3, #43	@ 0x2b
 800d6f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d6fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d6fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d700:	d015      	beq.n	800d72e <_svfiprintf_r+0xfa>
 800d702:	9a07      	ldr	r2, [sp, #28]
 800d704:	4654      	mov	r4, sl
 800d706:	2000      	movs	r0, #0
 800d708:	f04f 0c0a 	mov.w	ip, #10
 800d70c:	4621      	mov	r1, r4
 800d70e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d712:	3b30      	subs	r3, #48	@ 0x30
 800d714:	2b09      	cmp	r3, #9
 800d716:	d94b      	bls.n	800d7b0 <_svfiprintf_r+0x17c>
 800d718:	b1b0      	cbz	r0, 800d748 <_svfiprintf_r+0x114>
 800d71a:	9207      	str	r2, [sp, #28]
 800d71c:	e014      	b.n	800d748 <_svfiprintf_r+0x114>
 800d71e:	eba0 0308 	sub.w	r3, r0, r8
 800d722:	fa09 f303 	lsl.w	r3, r9, r3
 800d726:	4313      	orrs	r3, r2
 800d728:	9304      	str	r3, [sp, #16]
 800d72a:	46a2      	mov	sl, r4
 800d72c:	e7d2      	b.n	800d6d4 <_svfiprintf_r+0xa0>
 800d72e:	9b03      	ldr	r3, [sp, #12]
 800d730:	1d19      	adds	r1, r3, #4
 800d732:	681b      	ldr	r3, [r3, #0]
 800d734:	9103      	str	r1, [sp, #12]
 800d736:	2b00      	cmp	r3, #0
 800d738:	bfbb      	ittet	lt
 800d73a:	425b      	neglt	r3, r3
 800d73c:	f042 0202 	orrlt.w	r2, r2, #2
 800d740:	9307      	strge	r3, [sp, #28]
 800d742:	9307      	strlt	r3, [sp, #28]
 800d744:	bfb8      	it	lt
 800d746:	9204      	strlt	r2, [sp, #16]
 800d748:	7823      	ldrb	r3, [r4, #0]
 800d74a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d74c:	d10a      	bne.n	800d764 <_svfiprintf_r+0x130>
 800d74e:	7863      	ldrb	r3, [r4, #1]
 800d750:	2b2a      	cmp	r3, #42	@ 0x2a
 800d752:	d132      	bne.n	800d7ba <_svfiprintf_r+0x186>
 800d754:	9b03      	ldr	r3, [sp, #12]
 800d756:	1d1a      	adds	r2, r3, #4
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	9203      	str	r2, [sp, #12]
 800d75c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d760:	3402      	adds	r4, #2
 800d762:	9305      	str	r3, [sp, #20]
 800d764:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d828 <_svfiprintf_r+0x1f4>
 800d768:	7821      	ldrb	r1, [r4, #0]
 800d76a:	2203      	movs	r2, #3
 800d76c:	4650      	mov	r0, sl
 800d76e:	f7f2 fd37 	bl	80001e0 <memchr>
 800d772:	b138      	cbz	r0, 800d784 <_svfiprintf_r+0x150>
 800d774:	9b04      	ldr	r3, [sp, #16]
 800d776:	eba0 000a 	sub.w	r0, r0, sl
 800d77a:	2240      	movs	r2, #64	@ 0x40
 800d77c:	4082      	lsls	r2, r0
 800d77e:	4313      	orrs	r3, r2
 800d780:	3401      	adds	r4, #1
 800d782:	9304      	str	r3, [sp, #16]
 800d784:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d788:	4824      	ldr	r0, [pc, #144]	@ (800d81c <_svfiprintf_r+0x1e8>)
 800d78a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d78e:	2206      	movs	r2, #6
 800d790:	f7f2 fd26 	bl	80001e0 <memchr>
 800d794:	2800      	cmp	r0, #0
 800d796:	d036      	beq.n	800d806 <_svfiprintf_r+0x1d2>
 800d798:	4b21      	ldr	r3, [pc, #132]	@ (800d820 <_svfiprintf_r+0x1ec>)
 800d79a:	bb1b      	cbnz	r3, 800d7e4 <_svfiprintf_r+0x1b0>
 800d79c:	9b03      	ldr	r3, [sp, #12]
 800d79e:	3307      	adds	r3, #7
 800d7a0:	f023 0307 	bic.w	r3, r3, #7
 800d7a4:	3308      	adds	r3, #8
 800d7a6:	9303      	str	r3, [sp, #12]
 800d7a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7aa:	4433      	add	r3, r6
 800d7ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d7ae:	e76a      	b.n	800d686 <_svfiprintf_r+0x52>
 800d7b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7b4:	460c      	mov	r4, r1
 800d7b6:	2001      	movs	r0, #1
 800d7b8:	e7a8      	b.n	800d70c <_svfiprintf_r+0xd8>
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	3401      	adds	r4, #1
 800d7be:	9305      	str	r3, [sp, #20]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	f04f 0c0a 	mov.w	ip, #10
 800d7c6:	4620      	mov	r0, r4
 800d7c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7cc:	3a30      	subs	r2, #48	@ 0x30
 800d7ce:	2a09      	cmp	r2, #9
 800d7d0:	d903      	bls.n	800d7da <_svfiprintf_r+0x1a6>
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d0c6      	beq.n	800d764 <_svfiprintf_r+0x130>
 800d7d6:	9105      	str	r1, [sp, #20]
 800d7d8:	e7c4      	b.n	800d764 <_svfiprintf_r+0x130>
 800d7da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7de:	4604      	mov	r4, r0
 800d7e0:	2301      	movs	r3, #1
 800d7e2:	e7f0      	b.n	800d7c6 <_svfiprintf_r+0x192>
 800d7e4:	ab03      	add	r3, sp, #12
 800d7e6:	9300      	str	r3, [sp, #0]
 800d7e8:	462a      	mov	r2, r5
 800d7ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d824 <_svfiprintf_r+0x1f0>)
 800d7ec:	a904      	add	r1, sp, #16
 800d7ee:	4638      	mov	r0, r7
 800d7f0:	f3af 8000 	nop.w
 800d7f4:	1c42      	adds	r2, r0, #1
 800d7f6:	4606      	mov	r6, r0
 800d7f8:	d1d6      	bne.n	800d7a8 <_svfiprintf_r+0x174>
 800d7fa:	89ab      	ldrh	r3, [r5, #12]
 800d7fc:	065b      	lsls	r3, r3, #25
 800d7fe:	f53f af2d 	bmi.w	800d65c <_svfiprintf_r+0x28>
 800d802:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d804:	e72c      	b.n	800d660 <_svfiprintf_r+0x2c>
 800d806:	ab03      	add	r3, sp, #12
 800d808:	9300      	str	r3, [sp, #0]
 800d80a:	462a      	mov	r2, r5
 800d80c:	4b05      	ldr	r3, [pc, #20]	@ (800d824 <_svfiprintf_r+0x1f0>)
 800d80e:	a904      	add	r1, sp, #16
 800d810:	4638      	mov	r0, r7
 800d812:	f000 f91b 	bl	800da4c <_printf_i>
 800d816:	e7ed      	b.n	800d7f4 <_svfiprintf_r+0x1c0>
 800d818:	0800e06c 	.word	0x0800e06c
 800d81c:	0800e076 	.word	0x0800e076
 800d820:	00000000 	.word	0x00000000
 800d824:	0800d57d 	.word	0x0800d57d
 800d828:	0800e072 	.word	0x0800e072

0800d82c <sbrk_aligned>:
 800d82c:	b570      	push	{r4, r5, r6, lr}
 800d82e:	4e0f      	ldr	r6, [pc, #60]	@ (800d86c <sbrk_aligned+0x40>)
 800d830:	460c      	mov	r4, r1
 800d832:	6831      	ldr	r1, [r6, #0]
 800d834:	4605      	mov	r5, r0
 800d836:	b911      	cbnz	r1, 800d83e <sbrk_aligned+0x12>
 800d838:	f000 fa7a 	bl	800dd30 <_sbrk_r>
 800d83c:	6030      	str	r0, [r6, #0]
 800d83e:	4621      	mov	r1, r4
 800d840:	4628      	mov	r0, r5
 800d842:	f000 fa75 	bl	800dd30 <_sbrk_r>
 800d846:	1c43      	adds	r3, r0, #1
 800d848:	d103      	bne.n	800d852 <sbrk_aligned+0x26>
 800d84a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800d84e:	4620      	mov	r0, r4
 800d850:	bd70      	pop	{r4, r5, r6, pc}
 800d852:	1cc4      	adds	r4, r0, #3
 800d854:	f024 0403 	bic.w	r4, r4, #3
 800d858:	42a0      	cmp	r0, r4
 800d85a:	d0f8      	beq.n	800d84e <sbrk_aligned+0x22>
 800d85c:	1a21      	subs	r1, r4, r0
 800d85e:	4628      	mov	r0, r5
 800d860:	f000 fa66 	bl	800dd30 <_sbrk_r>
 800d864:	3001      	adds	r0, #1
 800d866:	d1f2      	bne.n	800d84e <sbrk_aligned+0x22>
 800d868:	e7ef      	b.n	800d84a <sbrk_aligned+0x1e>
 800d86a:	bf00      	nop
 800d86c:	2000591c 	.word	0x2000591c

0800d870 <_malloc_r>:
 800d870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d874:	1ccd      	adds	r5, r1, #3
 800d876:	f025 0503 	bic.w	r5, r5, #3
 800d87a:	3508      	adds	r5, #8
 800d87c:	2d0c      	cmp	r5, #12
 800d87e:	bf38      	it	cc
 800d880:	250c      	movcc	r5, #12
 800d882:	2d00      	cmp	r5, #0
 800d884:	4606      	mov	r6, r0
 800d886:	db01      	blt.n	800d88c <_malloc_r+0x1c>
 800d888:	42a9      	cmp	r1, r5
 800d88a:	d904      	bls.n	800d896 <_malloc_r+0x26>
 800d88c:	230c      	movs	r3, #12
 800d88e:	6033      	str	r3, [r6, #0]
 800d890:	2000      	movs	r0, #0
 800d892:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d896:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d96c <_malloc_r+0xfc>
 800d89a:	f000 f9f5 	bl	800dc88 <__malloc_lock>
 800d89e:	f8d8 3000 	ldr.w	r3, [r8]
 800d8a2:	461c      	mov	r4, r3
 800d8a4:	bb44      	cbnz	r4, 800d8f8 <_malloc_r+0x88>
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f7ff ffbf 	bl	800d82c <sbrk_aligned>
 800d8ae:	1c43      	adds	r3, r0, #1
 800d8b0:	4604      	mov	r4, r0
 800d8b2:	d158      	bne.n	800d966 <_malloc_r+0xf6>
 800d8b4:	f8d8 4000 	ldr.w	r4, [r8]
 800d8b8:	4627      	mov	r7, r4
 800d8ba:	2f00      	cmp	r7, #0
 800d8bc:	d143      	bne.n	800d946 <_malloc_r+0xd6>
 800d8be:	2c00      	cmp	r4, #0
 800d8c0:	d04b      	beq.n	800d95a <_malloc_r+0xea>
 800d8c2:	6823      	ldr	r3, [r4, #0]
 800d8c4:	4639      	mov	r1, r7
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	eb04 0903 	add.w	r9, r4, r3
 800d8cc:	f000 fa30 	bl	800dd30 <_sbrk_r>
 800d8d0:	4581      	cmp	r9, r0
 800d8d2:	d142      	bne.n	800d95a <_malloc_r+0xea>
 800d8d4:	6821      	ldr	r1, [r4, #0]
 800d8d6:	1a6d      	subs	r5, r5, r1
 800d8d8:	4629      	mov	r1, r5
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7ff ffa6 	bl	800d82c <sbrk_aligned>
 800d8e0:	3001      	adds	r0, #1
 800d8e2:	d03a      	beq.n	800d95a <_malloc_r+0xea>
 800d8e4:	6823      	ldr	r3, [r4, #0]
 800d8e6:	442b      	add	r3, r5
 800d8e8:	6023      	str	r3, [r4, #0]
 800d8ea:	f8d8 3000 	ldr.w	r3, [r8]
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	bb62      	cbnz	r2, 800d94c <_malloc_r+0xdc>
 800d8f2:	f8c8 7000 	str.w	r7, [r8]
 800d8f6:	e00f      	b.n	800d918 <_malloc_r+0xa8>
 800d8f8:	6822      	ldr	r2, [r4, #0]
 800d8fa:	1b52      	subs	r2, r2, r5
 800d8fc:	d420      	bmi.n	800d940 <_malloc_r+0xd0>
 800d8fe:	2a0b      	cmp	r2, #11
 800d900:	d917      	bls.n	800d932 <_malloc_r+0xc2>
 800d902:	1961      	adds	r1, r4, r5
 800d904:	42a3      	cmp	r3, r4
 800d906:	6025      	str	r5, [r4, #0]
 800d908:	bf18      	it	ne
 800d90a:	6059      	strne	r1, [r3, #4]
 800d90c:	6863      	ldr	r3, [r4, #4]
 800d90e:	bf08      	it	eq
 800d910:	f8c8 1000 	streq.w	r1, [r8]
 800d914:	5162      	str	r2, [r4, r5]
 800d916:	604b      	str	r3, [r1, #4]
 800d918:	4630      	mov	r0, r6
 800d91a:	f000 f9bb 	bl	800dc94 <__malloc_unlock>
 800d91e:	f104 000b 	add.w	r0, r4, #11
 800d922:	1d23      	adds	r3, r4, #4
 800d924:	f020 0007 	bic.w	r0, r0, #7
 800d928:	1ac2      	subs	r2, r0, r3
 800d92a:	bf1c      	itt	ne
 800d92c:	1a1b      	subne	r3, r3, r0
 800d92e:	50a3      	strne	r3, [r4, r2]
 800d930:	e7af      	b.n	800d892 <_malloc_r+0x22>
 800d932:	6862      	ldr	r2, [r4, #4]
 800d934:	42a3      	cmp	r3, r4
 800d936:	bf0c      	ite	eq
 800d938:	f8c8 2000 	streq.w	r2, [r8]
 800d93c:	605a      	strne	r2, [r3, #4]
 800d93e:	e7eb      	b.n	800d918 <_malloc_r+0xa8>
 800d940:	4623      	mov	r3, r4
 800d942:	6864      	ldr	r4, [r4, #4]
 800d944:	e7ae      	b.n	800d8a4 <_malloc_r+0x34>
 800d946:	463c      	mov	r4, r7
 800d948:	687f      	ldr	r7, [r7, #4]
 800d94a:	e7b6      	b.n	800d8ba <_malloc_r+0x4a>
 800d94c:	461a      	mov	r2, r3
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	42a3      	cmp	r3, r4
 800d952:	d1fb      	bne.n	800d94c <_malloc_r+0xdc>
 800d954:	2300      	movs	r3, #0
 800d956:	6053      	str	r3, [r2, #4]
 800d958:	e7de      	b.n	800d918 <_malloc_r+0xa8>
 800d95a:	230c      	movs	r3, #12
 800d95c:	6033      	str	r3, [r6, #0]
 800d95e:	4630      	mov	r0, r6
 800d960:	f000 f998 	bl	800dc94 <__malloc_unlock>
 800d964:	e794      	b.n	800d890 <_malloc_r+0x20>
 800d966:	6005      	str	r5, [r0, #0]
 800d968:	e7d6      	b.n	800d918 <_malloc_r+0xa8>
 800d96a:	bf00      	nop
 800d96c:	20005920 	.word	0x20005920

0800d970 <_printf_common>:
 800d970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d974:	4616      	mov	r6, r2
 800d976:	4698      	mov	r8, r3
 800d978:	688a      	ldr	r2, [r1, #8]
 800d97a:	690b      	ldr	r3, [r1, #16]
 800d97c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d980:	4293      	cmp	r3, r2
 800d982:	bfb8      	it	lt
 800d984:	4613      	movlt	r3, r2
 800d986:	6033      	str	r3, [r6, #0]
 800d988:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d98c:	4607      	mov	r7, r0
 800d98e:	460c      	mov	r4, r1
 800d990:	b10a      	cbz	r2, 800d996 <_printf_common+0x26>
 800d992:	3301      	adds	r3, #1
 800d994:	6033      	str	r3, [r6, #0]
 800d996:	6823      	ldr	r3, [r4, #0]
 800d998:	0699      	lsls	r1, r3, #26
 800d99a:	bf42      	ittt	mi
 800d99c:	6833      	ldrmi	r3, [r6, #0]
 800d99e:	3302      	addmi	r3, #2
 800d9a0:	6033      	strmi	r3, [r6, #0]
 800d9a2:	6825      	ldr	r5, [r4, #0]
 800d9a4:	f015 0506 	ands.w	r5, r5, #6
 800d9a8:	d106      	bne.n	800d9b8 <_printf_common+0x48>
 800d9aa:	f104 0a19 	add.w	sl, r4, #25
 800d9ae:	68e3      	ldr	r3, [r4, #12]
 800d9b0:	6832      	ldr	r2, [r6, #0]
 800d9b2:	1a9b      	subs	r3, r3, r2
 800d9b4:	42ab      	cmp	r3, r5
 800d9b6:	dc26      	bgt.n	800da06 <_printf_common+0x96>
 800d9b8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d9bc:	6822      	ldr	r2, [r4, #0]
 800d9be:	3b00      	subs	r3, #0
 800d9c0:	bf18      	it	ne
 800d9c2:	2301      	movne	r3, #1
 800d9c4:	0692      	lsls	r2, r2, #26
 800d9c6:	d42b      	bmi.n	800da20 <_printf_common+0xb0>
 800d9c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d9cc:	4641      	mov	r1, r8
 800d9ce:	4638      	mov	r0, r7
 800d9d0:	47c8      	blx	r9
 800d9d2:	3001      	adds	r0, #1
 800d9d4:	d01e      	beq.n	800da14 <_printf_common+0xa4>
 800d9d6:	6823      	ldr	r3, [r4, #0]
 800d9d8:	6922      	ldr	r2, [r4, #16]
 800d9da:	f003 0306 	and.w	r3, r3, #6
 800d9de:	2b04      	cmp	r3, #4
 800d9e0:	bf02      	ittt	eq
 800d9e2:	68e5      	ldreq	r5, [r4, #12]
 800d9e4:	6833      	ldreq	r3, [r6, #0]
 800d9e6:	1aed      	subeq	r5, r5, r3
 800d9e8:	68a3      	ldr	r3, [r4, #8]
 800d9ea:	bf0c      	ite	eq
 800d9ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d9f0:	2500      	movne	r5, #0
 800d9f2:	4293      	cmp	r3, r2
 800d9f4:	bfc4      	itt	gt
 800d9f6:	1a9b      	subgt	r3, r3, r2
 800d9f8:	18ed      	addgt	r5, r5, r3
 800d9fa:	2600      	movs	r6, #0
 800d9fc:	341a      	adds	r4, #26
 800d9fe:	42b5      	cmp	r5, r6
 800da00:	d11a      	bne.n	800da38 <_printf_common+0xc8>
 800da02:	2000      	movs	r0, #0
 800da04:	e008      	b.n	800da18 <_printf_common+0xa8>
 800da06:	2301      	movs	r3, #1
 800da08:	4652      	mov	r2, sl
 800da0a:	4641      	mov	r1, r8
 800da0c:	4638      	mov	r0, r7
 800da0e:	47c8      	blx	r9
 800da10:	3001      	adds	r0, #1
 800da12:	d103      	bne.n	800da1c <_printf_common+0xac>
 800da14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da1c:	3501      	adds	r5, #1
 800da1e:	e7c6      	b.n	800d9ae <_printf_common+0x3e>
 800da20:	18e1      	adds	r1, r4, r3
 800da22:	1c5a      	adds	r2, r3, #1
 800da24:	2030      	movs	r0, #48	@ 0x30
 800da26:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800da2a:	4422      	add	r2, r4
 800da2c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800da30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800da34:	3302      	adds	r3, #2
 800da36:	e7c7      	b.n	800d9c8 <_printf_common+0x58>
 800da38:	2301      	movs	r3, #1
 800da3a:	4622      	mov	r2, r4
 800da3c:	4641      	mov	r1, r8
 800da3e:	4638      	mov	r0, r7
 800da40:	47c8      	blx	r9
 800da42:	3001      	adds	r0, #1
 800da44:	d0e6      	beq.n	800da14 <_printf_common+0xa4>
 800da46:	3601      	adds	r6, #1
 800da48:	e7d9      	b.n	800d9fe <_printf_common+0x8e>
	...

0800da4c <_printf_i>:
 800da4c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800da50:	7e0f      	ldrb	r7, [r1, #24]
 800da52:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800da54:	2f78      	cmp	r7, #120	@ 0x78
 800da56:	4691      	mov	r9, r2
 800da58:	4680      	mov	r8, r0
 800da5a:	460c      	mov	r4, r1
 800da5c:	469a      	mov	sl, r3
 800da5e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800da62:	d807      	bhi.n	800da74 <_printf_i+0x28>
 800da64:	2f62      	cmp	r7, #98	@ 0x62
 800da66:	d80a      	bhi.n	800da7e <_printf_i+0x32>
 800da68:	2f00      	cmp	r7, #0
 800da6a:	f000 80d1 	beq.w	800dc10 <_printf_i+0x1c4>
 800da6e:	2f58      	cmp	r7, #88	@ 0x58
 800da70:	f000 80b8 	beq.w	800dbe4 <_printf_i+0x198>
 800da74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800da78:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800da7c:	e03a      	b.n	800daf4 <_printf_i+0xa8>
 800da7e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800da82:	2b15      	cmp	r3, #21
 800da84:	d8f6      	bhi.n	800da74 <_printf_i+0x28>
 800da86:	a101      	add	r1, pc, #4	@ (adr r1, 800da8c <_printf_i+0x40>)
 800da88:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800da8c:	0800dae5 	.word	0x0800dae5
 800da90:	0800daf9 	.word	0x0800daf9
 800da94:	0800da75 	.word	0x0800da75
 800da98:	0800da75 	.word	0x0800da75
 800da9c:	0800da75 	.word	0x0800da75
 800daa0:	0800da75 	.word	0x0800da75
 800daa4:	0800daf9 	.word	0x0800daf9
 800daa8:	0800da75 	.word	0x0800da75
 800daac:	0800da75 	.word	0x0800da75
 800dab0:	0800da75 	.word	0x0800da75
 800dab4:	0800da75 	.word	0x0800da75
 800dab8:	0800dbf7 	.word	0x0800dbf7
 800dabc:	0800db23 	.word	0x0800db23
 800dac0:	0800dbb1 	.word	0x0800dbb1
 800dac4:	0800da75 	.word	0x0800da75
 800dac8:	0800da75 	.word	0x0800da75
 800dacc:	0800dc19 	.word	0x0800dc19
 800dad0:	0800da75 	.word	0x0800da75
 800dad4:	0800db23 	.word	0x0800db23
 800dad8:	0800da75 	.word	0x0800da75
 800dadc:	0800da75 	.word	0x0800da75
 800dae0:	0800dbb9 	.word	0x0800dbb9
 800dae4:	6833      	ldr	r3, [r6, #0]
 800dae6:	1d1a      	adds	r2, r3, #4
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	6032      	str	r2, [r6, #0]
 800daec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800daf0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800daf4:	2301      	movs	r3, #1
 800daf6:	e09c      	b.n	800dc32 <_printf_i+0x1e6>
 800daf8:	6833      	ldr	r3, [r6, #0]
 800dafa:	6820      	ldr	r0, [r4, #0]
 800dafc:	1d19      	adds	r1, r3, #4
 800dafe:	6031      	str	r1, [r6, #0]
 800db00:	0606      	lsls	r6, r0, #24
 800db02:	d501      	bpl.n	800db08 <_printf_i+0xbc>
 800db04:	681d      	ldr	r5, [r3, #0]
 800db06:	e003      	b.n	800db10 <_printf_i+0xc4>
 800db08:	0645      	lsls	r5, r0, #25
 800db0a:	d5fb      	bpl.n	800db04 <_printf_i+0xb8>
 800db0c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800db10:	2d00      	cmp	r5, #0
 800db12:	da03      	bge.n	800db1c <_printf_i+0xd0>
 800db14:	232d      	movs	r3, #45	@ 0x2d
 800db16:	426d      	negs	r5, r5
 800db18:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800db1c:	4858      	ldr	r0, [pc, #352]	@ (800dc80 <_printf_i+0x234>)
 800db1e:	230a      	movs	r3, #10
 800db20:	e011      	b.n	800db46 <_printf_i+0xfa>
 800db22:	6821      	ldr	r1, [r4, #0]
 800db24:	6833      	ldr	r3, [r6, #0]
 800db26:	0608      	lsls	r0, r1, #24
 800db28:	f853 5b04 	ldr.w	r5, [r3], #4
 800db2c:	d402      	bmi.n	800db34 <_printf_i+0xe8>
 800db2e:	0649      	lsls	r1, r1, #25
 800db30:	bf48      	it	mi
 800db32:	b2ad      	uxthmi	r5, r5
 800db34:	2f6f      	cmp	r7, #111	@ 0x6f
 800db36:	4852      	ldr	r0, [pc, #328]	@ (800dc80 <_printf_i+0x234>)
 800db38:	6033      	str	r3, [r6, #0]
 800db3a:	bf14      	ite	ne
 800db3c:	230a      	movne	r3, #10
 800db3e:	2308      	moveq	r3, #8
 800db40:	2100      	movs	r1, #0
 800db42:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800db46:	6866      	ldr	r6, [r4, #4]
 800db48:	60a6      	str	r6, [r4, #8]
 800db4a:	2e00      	cmp	r6, #0
 800db4c:	db05      	blt.n	800db5a <_printf_i+0x10e>
 800db4e:	6821      	ldr	r1, [r4, #0]
 800db50:	432e      	orrs	r6, r5
 800db52:	f021 0104 	bic.w	r1, r1, #4
 800db56:	6021      	str	r1, [r4, #0]
 800db58:	d04b      	beq.n	800dbf2 <_printf_i+0x1a6>
 800db5a:	4616      	mov	r6, r2
 800db5c:	fbb5 f1f3 	udiv	r1, r5, r3
 800db60:	fb03 5711 	mls	r7, r3, r1, r5
 800db64:	5dc7      	ldrb	r7, [r0, r7]
 800db66:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800db6a:	462f      	mov	r7, r5
 800db6c:	42bb      	cmp	r3, r7
 800db6e:	460d      	mov	r5, r1
 800db70:	d9f4      	bls.n	800db5c <_printf_i+0x110>
 800db72:	2b08      	cmp	r3, #8
 800db74:	d10b      	bne.n	800db8e <_printf_i+0x142>
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	07df      	lsls	r7, r3, #31
 800db7a:	d508      	bpl.n	800db8e <_printf_i+0x142>
 800db7c:	6923      	ldr	r3, [r4, #16]
 800db7e:	6861      	ldr	r1, [r4, #4]
 800db80:	4299      	cmp	r1, r3
 800db82:	bfde      	ittt	le
 800db84:	2330      	movle	r3, #48	@ 0x30
 800db86:	f806 3c01 	strble.w	r3, [r6, #-1]
 800db8a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800db8e:	1b92      	subs	r2, r2, r6
 800db90:	6122      	str	r2, [r4, #16]
 800db92:	f8cd a000 	str.w	sl, [sp]
 800db96:	464b      	mov	r3, r9
 800db98:	aa03      	add	r2, sp, #12
 800db9a:	4621      	mov	r1, r4
 800db9c:	4640      	mov	r0, r8
 800db9e:	f7ff fee7 	bl	800d970 <_printf_common>
 800dba2:	3001      	adds	r0, #1
 800dba4:	d14a      	bne.n	800dc3c <_printf_i+0x1f0>
 800dba6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800dbaa:	b004      	add	sp, #16
 800dbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbb0:	6823      	ldr	r3, [r4, #0]
 800dbb2:	f043 0320 	orr.w	r3, r3, #32
 800dbb6:	6023      	str	r3, [r4, #0]
 800dbb8:	4832      	ldr	r0, [pc, #200]	@ (800dc84 <_printf_i+0x238>)
 800dbba:	2778      	movs	r7, #120	@ 0x78
 800dbbc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dbc0:	6823      	ldr	r3, [r4, #0]
 800dbc2:	6831      	ldr	r1, [r6, #0]
 800dbc4:	061f      	lsls	r7, r3, #24
 800dbc6:	f851 5b04 	ldr.w	r5, [r1], #4
 800dbca:	d402      	bmi.n	800dbd2 <_printf_i+0x186>
 800dbcc:	065f      	lsls	r7, r3, #25
 800dbce:	bf48      	it	mi
 800dbd0:	b2ad      	uxthmi	r5, r5
 800dbd2:	6031      	str	r1, [r6, #0]
 800dbd4:	07d9      	lsls	r1, r3, #31
 800dbd6:	bf44      	itt	mi
 800dbd8:	f043 0320 	orrmi.w	r3, r3, #32
 800dbdc:	6023      	strmi	r3, [r4, #0]
 800dbde:	b11d      	cbz	r5, 800dbe8 <_printf_i+0x19c>
 800dbe0:	2310      	movs	r3, #16
 800dbe2:	e7ad      	b.n	800db40 <_printf_i+0xf4>
 800dbe4:	4826      	ldr	r0, [pc, #152]	@ (800dc80 <_printf_i+0x234>)
 800dbe6:	e7e9      	b.n	800dbbc <_printf_i+0x170>
 800dbe8:	6823      	ldr	r3, [r4, #0]
 800dbea:	f023 0320 	bic.w	r3, r3, #32
 800dbee:	6023      	str	r3, [r4, #0]
 800dbf0:	e7f6      	b.n	800dbe0 <_printf_i+0x194>
 800dbf2:	4616      	mov	r6, r2
 800dbf4:	e7bd      	b.n	800db72 <_printf_i+0x126>
 800dbf6:	6833      	ldr	r3, [r6, #0]
 800dbf8:	6825      	ldr	r5, [r4, #0]
 800dbfa:	6961      	ldr	r1, [r4, #20]
 800dbfc:	1d18      	adds	r0, r3, #4
 800dbfe:	6030      	str	r0, [r6, #0]
 800dc00:	062e      	lsls	r6, r5, #24
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	d501      	bpl.n	800dc0a <_printf_i+0x1be>
 800dc06:	6019      	str	r1, [r3, #0]
 800dc08:	e002      	b.n	800dc10 <_printf_i+0x1c4>
 800dc0a:	0668      	lsls	r0, r5, #25
 800dc0c:	d5fb      	bpl.n	800dc06 <_printf_i+0x1ba>
 800dc0e:	8019      	strh	r1, [r3, #0]
 800dc10:	2300      	movs	r3, #0
 800dc12:	6123      	str	r3, [r4, #16]
 800dc14:	4616      	mov	r6, r2
 800dc16:	e7bc      	b.n	800db92 <_printf_i+0x146>
 800dc18:	6833      	ldr	r3, [r6, #0]
 800dc1a:	1d1a      	adds	r2, r3, #4
 800dc1c:	6032      	str	r2, [r6, #0]
 800dc1e:	681e      	ldr	r6, [r3, #0]
 800dc20:	6862      	ldr	r2, [r4, #4]
 800dc22:	2100      	movs	r1, #0
 800dc24:	4630      	mov	r0, r6
 800dc26:	f7f2 fadb 	bl	80001e0 <memchr>
 800dc2a:	b108      	cbz	r0, 800dc30 <_printf_i+0x1e4>
 800dc2c:	1b80      	subs	r0, r0, r6
 800dc2e:	6060      	str	r0, [r4, #4]
 800dc30:	6863      	ldr	r3, [r4, #4]
 800dc32:	6123      	str	r3, [r4, #16]
 800dc34:	2300      	movs	r3, #0
 800dc36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800dc3a:	e7aa      	b.n	800db92 <_printf_i+0x146>
 800dc3c:	6923      	ldr	r3, [r4, #16]
 800dc3e:	4632      	mov	r2, r6
 800dc40:	4649      	mov	r1, r9
 800dc42:	4640      	mov	r0, r8
 800dc44:	47d0      	blx	sl
 800dc46:	3001      	adds	r0, #1
 800dc48:	d0ad      	beq.n	800dba6 <_printf_i+0x15a>
 800dc4a:	6823      	ldr	r3, [r4, #0]
 800dc4c:	079b      	lsls	r3, r3, #30
 800dc4e:	d413      	bmi.n	800dc78 <_printf_i+0x22c>
 800dc50:	68e0      	ldr	r0, [r4, #12]
 800dc52:	9b03      	ldr	r3, [sp, #12]
 800dc54:	4298      	cmp	r0, r3
 800dc56:	bfb8      	it	lt
 800dc58:	4618      	movlt	r0, r3
 800dc5a:	e7a6      	b.n	800dbaa <_printf_i+0x15e>
 800dc5c:	2301      	movs	r3, #1
 800dc5e:	4632      	mov	r2, r6
 800dc60:	4649      	mov	r1, r9
 800dc62:	4640      	mov	r0, r8
 800dc64:	47d0      	blx	sl
 800dc66:	3001      	adds	r0, #1
 800dc68:	d09d      	beq.n	800dba6 <_printf_i+0x15a>
 800dc6a:	3501      	adds	r5, #1
 800dc6c:	68e3      	ldr	r3, [r4, #12]
 800dc6e:	9903      	ldr	r1, [sp, #12]
 800dc70:	1a5b      	subs	r3, r3, r1
 800dc72:	42ab      	cmp	r3, r5
 800dc74:	dcf2      	bgt.n	800dc5c <_printf_i+0x210>
 800dc76:	e7eb      	b.n	800dc50 <_printf_i+0x204>
 800dc78:	2500      	movs	r5, #0
 800dc7a:	f104 0619 	add.w	r6, r4, #25
 800dc7e:	e7f5      	b.n	800dc6c <_printf_i+0x220>
 800dc80:	0800e07d 	.word	0x0800e07d
 800dc84:	0800e08e 	.word	0x0800e08e

0800dc88 <__malloc_lock>:
 800dc88:	4801      	ldr	r0, [pc, #4]	@ (800dc90 <__malloc_lock+0x8>)
 800dc8a:	f7ff bbbf 	b.w	800d40c <__retarget_lock_acquire_recursive>
 800dc8e:	bf00      	nop
 800dc90:	20005914 	.word	0x20005914

0800dc94 <__malloc_unlock>:
 800dc94:	4801      	ldr	r0, [pc, #4]	@ (800dc9c <__malloc_unlock+0x8>)
 800dc96:	f7ff bbba 	b.w	800d40e <__retarget_lock_release_recursive>
 800dc9a:	bf00      	nop
 800dc9c:	20005914 	.word	0x20005914

0800dca0 <_realloc_r>:
 800dca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dca4:	4607      	mov	r7, r0
 800dca6:	4614      	mov	r4, r2
 800dca8:	460d      	mov	r5, r1
 800dcaa:	b921      	cbnz	r1, 800dcb6 <_realloc_r+0x16>
 800dcac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dcb0:	4611      	mov	r1, r2
 800dcb2:	f7ff bddd 	b.w	800d870 <_malloc_r>
 800dcb6:	b92a      	cbnz	r2, 800dcc4 <_realloc_r+0x24>
 800dcb8:	f7ff fc16 	bl	800d4e8 <_free_r>
 800dcbc:	4625      	mov	r5, r4
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dcc4:	f000 f844 	bl	800dd50 <_malloc_usable_size_r>
 800dcc8:	4284      	cmp	r4, r0
 800dcca:	4606      	mov	r6, r0
 800dccc:	d802      	bhi.n	800dcd4 <_realloc_r+0x34>
 800dcce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800dcd2:	d8f4      	bhi.n	800dcbe <_realloc_r+0x1e>
 800dcd4:	4621      	mov	r1, r4
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	f7ff fdca 	bl	800d870 <_malloc_r>
 800dcdc:	4680      	mov	r8, r0
 800dcde:	b908      	cbnz	r0, 800dce4 <_realloc_r+0x44>
 800dce0:	4645      	mov	r5, r8
 800dce2:	e7ec      	b.n	800dcbe <_realloc_r+0x1e>
 800dce4:	42b4      	cmp	r4, r6
 800dce6:	4622      	mov	r2, r4
 800dce8:	4629      	mov	r1, r5
 800dcea:	bf28      	it	cs
 800dcec:	4632      	movcs	r2, r6
 800dcee:	f7ff fbed 	bl	800d4cc <memcpy>
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	4638      	mov	r0, r7
 800dcf6:	f7ff fbf7 	bl	800d4e8 <_free_r>
 800dcfa:	e7f1      	b.n	800dce0 <_realloc_r+0x40>

0800dcfc <memmove>:
 800dcfc:	4288      	cmp	r0, r1
 800dcfe:	b510      	push	{r4, lr}
 800dd00:	eb01 0402 	add.w	r4, r1, r2
 800dd04:	d902      	bls.n	800dd0c <memmove+0x10>
 800dd06:	4284      	cmp	r4, r0
 800dd08:	4623      	mov	r3, r4
 800dd0a:	d807      	bhi.n	800dd1c <memmove+0x20>
 800dd0c:	1e43      	subs	r3, r0, #1
 800dd0e:	42a1      	cmp	r1, r4
 800dd10:	d008      	beq.n	800dd24 <memmove+0x28>
 800dd12:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd16:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd1a:	e7f8      	b.n	800dd0e <memmove+0x12>
 800dd1c:	4402      	add	r2, r0
 800dd1e:	4601      	mov	r1, r0
 800dd20:	428a      	cmp	r2, r1
 800dd22:	d100      	bne.n	800dd26 <memmove+0x2a>
 800dd24:	bd10      	pop	{r4, pc}
 800dd26:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd2a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd2e:	e7f7      	b.n	800dd20 <memmove+0x24>

0800dd30 <_sbrk_r>:
 800dd30:	b538      	push	{r3, r4, r5, lr}
 800dd32:	4d06      	ldr	r5, [pc, #24]	@ (800dd4c <_sbrk_r+0x1c>)
 800dd34:	2300      	movs	r3, #0
 800dd36:	4604      	mov	r4, r0
 800dd38:	4608      	mov	r0, r1
 800dd3a:	602b      	str	r3, [r5, #0]
 800dd3c:	f7f7 fbfc 	bl	8005538 <_sbrk>
 800dd40:	1c43      	adds	r3, r0, #1
 800dd42:	d102      	bne.n	800dd4a <_sbrk_r+0x1a>
 800dd44:	682b      	ldr	r3, [r5, #0]
 800dd46:	b103      	cbz	r3, 800dd4a <_sbrk_r+0x1a>
 800dd48:	6023      	str	r3, [r4, #0]
 800dd4a:	bd38      	pop	{r3, r4, r5, pc}
 800dd4c:	20005918 	.word	0x20005918

0800dd50 <_malloc_usable_size_r>:
 800dd50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dd54:	1f18      	subs	r0, r3, #4
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	bfbc      	itt	lt
 800dd5a:	580b      	ldrlt	r3, [r1, r0]
 800dd5c:	18c0      	addlt	r0, r0, r3
 800dd5e:	4770      	bx	lr

0800dd60 <_init>:
 800dd60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd62:	bf00      	nop
 800dd64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd66:	bc08      	pop	{r3}
 800dd68:	469e      	mov	lr, r3
 800dd6a:	4770      	bx	lr

0800dd6c <_fini>:
 800dd6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd6e:	bf00      	nop
 800dd70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dd72:	bc08      	pop	{r3}
 800dd74:	469e      	mov	lr, r3
 800dd76:	4770      	bx	lr
